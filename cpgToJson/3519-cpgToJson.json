{"edges": [["21", "23"], ["21", "367"], ["21", "368"], ["21", "369"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "28"], ["23", "31"], ["23", "42"], ["23", "43"], ["23", "46"], ["23", "365"], ["24", "25"], ["24", "26"], ["27", "3"], ["28", "29"], ["28", "30"], ["31", "5"], ["31", "32"], ["32", "33"], ["32", "36"], ["32", "41"], ["33", "34"], ["33", "35"], ["36", "37"], ["36", "38"], ["38", "39"], ["38", "40"], ["43", "44"], ["43", "45"], ["46", "47"], ["46", "51"], ["47", "48"], ["47", "50"], ["48", "49"], ["51", "52"], ["51", "53"], ["51", "57"], ["51", "61"], ["51", "62"], ["51", "65"], ["51", "70"], ["51", "71"], ["51", "77"], ["51", "78"], ["51", "87"], ["51", "150"], ["51", "155"], ["51", "180"], ["51", "181"], ["51", "190"], ["51", "211"], ["51", "351"], ["51", "362"], ["53", "54"], ["53", "55"], ["55", "56"], ["57", "58"], ["57", "59"], ["59", "60"], ["62", "63"], ["62", "64"], ["65", "66"], ["65", "67"], ["67", "68"], ["67", "69"], ["71", "72"], ["71", "73"], ["73", "74"], ["74", "75"], ["74", "76"], ["78", "79"], ["78", "80"], ["80", "81"], ["80", "84"], ["81", "82"], ["81", "83"], ["84", "85"], ["84", "86"], ["87", "88"], ["87", "89"], ["87", "92"], ["87", "95"], ["87", "97"], ["89", "90"], ["89", "91"], ["92", "93"], ["92", "94"], ["95", "96"], ["97", "98"], ["98", "99"], ["98", "100"], ["98", "103"], ["98", "106"], ["98", "108"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "105"], ["106", "107"], ["108", "109"], ["109", "110"], ["109", "117"], ["109", "124"], ["110", "111"], ["110", "114"], ["111", "112"], ["111", "113"], ["114", "115"], ["114", "116"], ["117", "118"], ["117", "123"], ["118", "119"], ["118", "122"], ["119", "120"], ["119", "121"], ["124", "125"], ["125", "126"], ["125", "131"], ["126", "127"], ["126", "130"], ["127", "128"], ["127", "129"], ["131", "132"], ["131", "149"], ["132", "133"], ["132", "142"], ["133", "134"], ["133", "139"], ["134", "135"], ["134", "136"], ["136", "137"], ["136", "138"], ["139", "140"], ["139", "141"], ["142", "143"], ["142", "148"], ["143", "144"], ["143", "145"], ["145", "146"], ["145", "147"], ["150", "151"], ["150", "154"], ["151", "152"], ["151", "153"], ["155", "156"], ["155", "157"], ["155", "160"], ["155", "165"], ["155", "167"], ["157", "158"], ["157", "159"], ["160", "161"], ["160", "162"], ["162", "163"], ["162", "164"], ["165", "166"], ["167", "168"], ["167", "171"], ["168", "169"], ["168", "170"], ["171", "172"], ["171", "179"], ["172", "173"], ["172", "178"], ["173", "174"], ["173", "175"], ["175", "176"], ["175", "177"], ["181", "182"], ["181", "183"], ["183", "184"], ["183", "187"], ["184", "185"], ["184", "186"], ["187", "188"], ["187", "189"], ["190", "191"], ["190", "192"], ["190", "195"], ["190", "198"], ["190", "200"], ["192", "193"], ["192", "194"], ["195", "196"], ["195", "197"], ["198", "199"], ["200", "201"], ["200", "206"], ["201", "202"], ["201", "205"], ["202", "203"], ["202", "204"], ["206", "207"], ["206", "208"], ["208", "209"], ["208", "210"], ["211", "212"], ["211", "213"], ["211", "216"], ["211", "219"], ["211", "221"], ["213", "214"], ["213", "215"], ["216", "217"], ["216", "218"], ["219", "220"], ["221", "222"], ["222", "223"], ["222", "224"], ["222", "227"], ["222", "232"], ["222", "234"], ["224", "225"], ["224", "226"], ["227", "228"], ["227", "229"], ["229", "230"], ["229", "231"], ["232", "233"], ["234", "235"], ["234", "242"], ["234", "243"], ["234", "246"], ["234", "329"], ["234", "336"], ["235", "236"], ["235", "241"], ["236", "237"], ["237", "238"], ["237", "239"], ["237", "240"], ["243", "244"], ["243", "245"], ["246", "247"], ["246", "248"], ["246", "253"], ["246", "256"], ["246", "258"], ["248", "249"], ["248", "250"], ["250", "251"], ["250", "252"], ["253", "254"], ["253", "255"], ["256", "257"], ["258", "259"], ["258", "268"], ["258", "269"], ["258", "276"], ["258", "277"], ["258", "284"], ["258", "285"], ["258", "292"], ["258", "293"], ["258", "302"], ["258", "309"], ["258", "322"], ["259", "260"], ["259", "267"], ["260", "261"], ["261", "262"], ["261", "263"], ["261", "264"], ["264", "265"], ["264", "266"], ["269", "270"], ["269", "271"], ["271", "272"], ["271", "275"], ["272", "273"], ["272", "274"], ["277", "278"], ["277", "279"], ["279", "280"], ["279", "281"], ["281", "282"], ["281", "283"], ["285", "286"], ["285", "287"], ["287", "288"], ["287", "289"], ["289", "290"], ["289", "291"], ["293", "294"], ["293", "295"], ["295", "296"], ["295", "301"], ["296", "297"], ["296", "298"], ["298", "299"], ["298", "300"], ["302", "303"], ["302", "304"], ["304", "305"], ["304", "308"], ["305", "306"], ["305", "307"], ["309", "310"], ["309", "311"], ["311", "312"], ["311", "321"], ["312", "313"], ["312", "314"], ["314", "315"], ["314", "318"], ["315", "316"], ["315", "317"], ["318", "319"], ["318", "320"], ["322", "323"], ["322", "324"], ["324", "325"], ["324", "328"], ["325", "326"], ["325", "327"], ["329", "330"], ["329", "335"], ["330", "331"], ["330", "334"], ["331", "332"], ["331", "333"], ["336", "337"], ["336", "340"], ["337", "338"], ["337", "339"], ["340", "341"], ["340", "342"], ["342", "343"], ["342", "350"], ["343", "344"], ["343", "345"], ["345", "346"], ["345", "349"], ["346", "347"], ["346", "348"], ["351", "352"], ["351", "353"], ["353", "354"], ["353", "361"], ["354", "355"], ["354", "356"], ["356", "357"], ["356", "360"], ["357", "358"], ["357", "359"], ["362", "363"], ["362", "364"], ["365", "366"], ["24", "27"], ["27", "30"], ["28", "35"], ["31", "43"], ["43", "48"], ["365", "369"], ["26", "24"], ["30", "28"], ["47", "55"], ["47", "365"], ["33", "40"], ["36", "31"], ["48", "47"], ["53", "59"], ["57", "62"], ["62", "67"], ["65", "74"], ["71", "81"], ["78", "89"], ["150", "157"], ["181", "192"], ["351", "362"], ["362", "48"], ["35", "33"], ["38", "36"], ["55", "53"], ["59", "57"], ["67", "65"], ["73", "71"], ["80", "78"], ["89", "92"], ["92", "100"], ["92", "151"], ["95", "92"], ["151", "150"], ["157", "162"], ["160", "168"], ["160", "184"], ["165", "162"], ["167", "165"], ["183", "181"], ["192", "195"], ["195", "202"], ["195", "213"], ["198", "195"], ["200", "198"], ["213", "216"], ["216", "224"], ["216", "357"], ["219", "216"], ["353", "351"], ["40", "38"], ["74", "73"], ["81", "84"], ["84", "80"], ["162", "160"], ["168", "175"], ["171", "167"], ["184", "187"], ["187", "183"], ["201", "208"], ["206", "200"], ["354", "353"], ["100", "103"], ["103", "111"], ["103", "95"], ["106", "103"], ["172", "171"], ["202", "201"], ["208", "206"], ["224", "229"], ["227", "237"], ["227", "219"], ["232", "229"], ["356", "354"], ["173", "172"], ["229", "227"], ["243", "250"], ["329", "337"], ["357", "356"], ["110", "119"], ["110", "127"], ["117", "106"], ["175", "173"], ["236", "232"], ["236", "243"], ["248", "253"], ["253", "264"], ["253", "331"], ["256", "253"], ["330", "329"], ["337", "346"], ["337", "232"], ["340", "232"], ["111", "110"], ["111", "114"], ["114", "110"], ["118", "117"], ["125", "106"], ["237", "236"], ["250", "248"], ["269", "281"], ["277", "289"], ["285", "298"], ["293", "305"], ["302", "315"], ["309", "325"], ["322", "256"], ["331", "330"], ["342", "340"], ["119", "118"], ["126", "136"], ["131", "125"], ["260", "331"], ["260", "272"], ["271", "269"], ["279", "277"], ["287", "285"], ["295", "293"], ["304", "302"], ["311", "309"], ["324", "322"], ["343", "342"], ["127", "126"], ["132", "131"], ["261", "260"], ["272", "271"], ["281", "279"], ["289", "287"], ["296", "295"], ["305", "304"], ["312", "311"], ["325", "324"], ["345", "343"], ["133", "145"], ["142", "132"], ["264", "261"], ["298", "296"], ["314", "312"], ["346", "345"], ["134", "139"], ["139", "133"], ["143", "142"], ["315", "318"], ["318", "314"], ["136", "134"], ["145", "143"], ["21", "26"], ["22", "369"], ["24", "369"], ["27", "369"], ["27", "369"], ["28", "369"], ["33", "369"], ["36", "369"], ["36", "369"], ["36", "369"], ["31", "369"], ["43", "369"], ["48", "369"], ["47", "369"], ["47", "369"], ["365", "369"], ["365", "369"], ["53", "369"], ["53", "369"], ["59", "369"], ["57", "369"], ["57", "369"], ["62", "369"], ["65", "369"], ["65", "369"], ["71", "369"], ["73", "369"], ["71", "369"], ["71", "369"], ["78", "369"], ["78", "369"], ["78", "369"], ["89", "369"], ["150", "369"], ["150", "369"], ["160", "369"], ["160", "369"], ["181", "369"], ["183", "369"], ["181", "369"], ["181", "369"], ["192", "369"], ["213", "369"], ["216", "369"], ["216", "369"], ["216", "369"], ["354", "369"], ["353", "369"], ["353", "369"], ["351", "369"], ["351", "369"], ["362", "369"], ["362", "369"], ["224", "369"], ["227", "369"], ["227", "369"], ["227", "369"], ["219", "369"], ["237", "369"], ["236", "369"], ["236", "369"], ["243", "369"], ["248", "369"], ["248", "369"], ["253", "369"], ["253", "369"], ["261", "369"], ["261", "369"], ["261", "369"], ["260", "369"], ["260", "369"], ["271", "369"], ["269", "369"], ["269", "369"], ["277", "369"], ["277", "369"], ["285", "369"], ["285", "369"], ["298", "369"], ["298", "369"], ["293", "369"], ["293", "369"], ["305", "369"], ["304", "369"], ["302", "369"], ["302", "369"], ["312", "369"], ["311", "369"], ["309", "369"], ["309", "369"], ["325", "369"], ["324", "369"], ["322", "369"], ["322", "369"], ["256", "369"], ["329", "369"], ["329", "369"], ["329", "369"], ["337", "369"], ["343", "369"], ["342", "369"], ["340", "369"], ["340", "369"], ["232", "369"], ["200", "369"], ["200", "369"], ["200", "369"], ["198", "369"], ["167", "369"], ["172", "369"], ["171", "369"], ["167", "369"], ["167", "369"], ["165", "369"], ["100", "369"], ["103", "369"], ["103", "369"], ["95", "369"], ["110", "369"], ["110", "369"], ["110", "369"], ["125", "369"], ["132", "369"], ["132", "369"], ["131", "369"], ["125", "369"], ["125", "369"], ["117", "369"], ["117", "369"], ["106", "369"], ["21", "22"], ["21", "24"], ["21", "28"], ["21", "43"], ["24", "27"], ["21", "27"], ["28", "31"], ["21", "31"], ["33", "31"], ["36", "31"], ["31", "365"], ["362", "365"], ["21", "365"], ["21", "33"], ["21", "41"], ["48", "47"], ["21", "47"], ["55", "53"], ["59", "57"], ["21", "62"], ["73", "71"], ["80", "78"], ["21", "150"], ["183", "181"], ["353", "351"], ["353", "351"], ["33", "36"], ["21", "36"], ["43", "48"], ["21", "48"], ["237", "65"], ["261", "65"], ["21", "65"], ["53", "65"], ["21", "89"], ["21", "157"], ["171", "167"], ["171", "167"], ["21", "192"], ["71", "200"], ["172", "200"], ["21", "213"], ["31", "362"], ["21", "362"], ["351", "362"], ["27", "55"], ["59", "55"], ["21", "55"], ["55", "59"], ["21", "59"], ["53", "67"], ["21", "67"], ["21", "73"], ["53", "73"], ["21", "80"], ["53", "80"], ["89", "92"], ["95", "92"], ["21", "92"], ["53", "92"], ["103", "95"], ["21", "95"], ["157", "160"], ["165", "160"], ["21", "160"], ["92", "160"], ["175", "165"], ["21", "165"], ["21", "183"], ["92", "183"], ["192", "195"], ["198", "195"], ["21", "195"], ["92", "195"], ["208", "198"], ["21", "198"], ["213", "216"], ["219", "216"], ["21", "216"], ["195", "216"], ["229", "216"], ["216", "219"], ["237", "219"], ["337", "219"], ["21", "219"], ["62", "353"], ["340", "353"], ["21", "353"], ["57", "353"], ["324", "353"], ["342", "353"], ["171", "353"], ["131", "353"], ["21", "74"], ["53", "74"], ["21", "81"], ["53", "81"], ["21", "84"], ["53", "84"], ["21", "100"], ["92", "162"], ["21", "162"], ["172", "171"], ["172", "171"], ["57", "171"], ["131", "171"], ["21", "171"], ["21", "184"], ["92", "184"], ["21", "187"], ["92", "187"], ["21", "224"], ["62", "354"], ["340", "354"], ["21", "354"], ["100", "103"], ["106", "103"], ["21", "103"], ["92", "103"], ["114", "103"], ["145", "103"], ["111", "106"], ["114", "106"], ["139", "106"], ["21", "106"], ["71", "172"], ["21", "172"], ["195", "208"], ["21", "208"], ["224", "227"], ["232", "227"], ["21", "227"], ["229", "227"], ["229", "227"], ["237", "232"], ["264", "232"], ["318", "232"], ["21", "232"], ["21", "243"], ["243", "329"], ["322", "329"], ["21", "329"], ["21", "117"], ["216", "229"], ["337", "229"], ["21", "229"], ["250", "248"], ["250", "248"], ["342", "340"], ["342", "340"], ["111", "110"], ["111", "110"], ["114", "110"], ["114", "110"], ["131", "125"], ["131", "125"], ["160", "175"], ["21", "175"], ["237", "236"], ["237", "236"], ["237", "236"], ["248", "253"], ["256", "253"], ["21", "253"], ["287", "256"], ["21", "256"], ["271", "269"], ["271", "269"], ["71", "277"], ["287", "285"], ["287", "285"], ["304", "302"], ["304", "302"], ["311", "309"], ["311", "309"], ["324", "322"], ["324", "322"], ["250", "337"], ["272", "337"], ["21", "337"], ["229", "337"], ["103", "111"], ["21", "111"], ["111", "114"], ["21", "114"], ["103", "114"], ["65", "237"], ["261", "237"], ["21", "237"], ["216", "237"], ["337", "237"], ["227", "237"], ["237", "250"], ["21", "250"], ["62", "342"], ["340", "342"], ["21", "342"], ["329", "342"], ["57", "342"], ["324", "342"], ["171", "342"], ["131", "342"], ["57", "131"], ["21", "131"], ["261", "260"], ["261", "260"], ["261", "260"], ["272", "271"], ["272", "271"], ["21", "271"], ["272", "287"], ["21", "287"], ["289", "287"], ["289", "287"], ["305", "304"], ["305", "304"], ["57", "304"], ["324", "304"], ["342", "304"], ["171", "304"], ["131", "304"], ["21", "304"], ["312", "311"], ["312", "311"], ["304", "311"], ["21", "311"], ["243", "324"], ["322", "324"], ["21", "324"], ["309", "324"], ["311", "324"], ["62", "343"], ["340", "343"], ["21", "343"], ["329", "343"], ["237", "261"], ["21", "261"], ["253", "261"], ["264", "261"], ["264", "261"], ["250", "272"], ["21", "272"], ["261", "272"], ["269", "281"], ["21", "281"], ["264", "289"], ["21", "289"], ["277", "305"], ["21", "305"], ["293", "305"], ["302", "312"], ["21", "312"], ["243", "325"], ["322", "325"], ["21", "325"], ["309", "325"], ["237", "264"], ["318", "264"], ["21", "264"], ["281", "298"], ["21", "298"], ["285", "298"], ["111", "139"], ["114", "139"], ["21", "139"], ["289", "318"], ["21", "318"], ["103", "136"], ["114", "136"], ["21", "136"], ["136", "145"], ["21", "145"], ["47", "192"], ["47", "84"], ["47", "150"], ["47", "74"], ["47", "213"], ["47", "162"], ["47", "356"], ["47", "59"], ["47", "181"], ["47", "195"], ["47", "184"], ["47", "80"], ["47", "362"], ["47", "160"], ["47", "48"], ["47", "65"], ["47", "357"], ["47", "71"], ["47", "53"], ["47", "55"], ["47", "216"], ["47", "351"], ["47", "73"], ["47", "57"], ["47", "81"], ["47", "67"], ["47", "151"], ["47", "92"], ["47", "187"], ["47", "353"], ["47", "47"], ["47", "183"], ["47", "89"], ["47", "354"], ["47", "157"], ["47", "78"], ["47", "62"], ["92", "95"], ["92", "100"], ["92", "103"], ["92", "92"], ["160", "167"], ["160", "162"], ["160", "168"], ["160", "160"], ["160", "172"], ["160", "173"], ["160", "171"], ["160", "165"], ["160", "175"], ["195", "206"], ["195", "208"], ["195", "195"], ["195", "202"], ["195", "201"], ["195", "200"], ["195", "198"], ["216", "224"], ["216", "229"], ["216", "216"], ["216", "227"], ["216", "219"], ["103", "103"], ["103", "111"], ["103", "106"], ["103", "110"], ["227", "236"], ["227", "237"], ["227", "229"], ["227", "227"], ["227", "232"], ["110", "136"], ["110", "134"], ["110", "118"], ["110", "127"], ["110", "117"], ["110", "133"], ["110", "145"], ["110", "131"], ["110", "132"], ["110", "119"], ["110", "139"], ["110", "142"], ["110", "143"], ["110", "126"], ["110", "125"], ["236", "243"], ["236", "329"], ["236", "253"], ["236", "337"], ["236", "330"], ["236", "331"], ["236", "248"], ["236", "250"], ["253", "264"], ["253", "260"], ["253", "261"], ["337", "340"], ["337", "346"], ["337", "342"], ["337", "343"], ["337", "345"], ["111", "114"], ["260", "272"], ["260", "256"], ["260", "322"], ["260", "298"], ["260", "302"], ["260", "281"], ["260", "324"], ["260", "315"], ["260", "296"], ["260", "304"], ["260", "311"], ["260", "253"], ["260", "305"], ["260", "269"], ["260", "279"], ["260", "309"], ["260", "285"], ["260", "289"], ["260", "293"], ["260", "325"], ["260", "314"], ["260", "318"], ["260", "295"], ["260", "277"], ["260", "287"], ["260", "312"], ["260", "271"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new MyScanner())<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new MyScanner())<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new MyScanner())<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.assignment,ANY out = new PrintWriter(new BufferedOutputStream(System.out)))<SUB>3</SUB>>", "30": "<(&lt;operator&gt;.alloc,new PrintWriter(new BufferedOutputStream(System.out)))<SUB>3</SUB>>", "5": "<(IDENTIFIER,out,new PrintWriter(new BufferedOutputStream(System.out)))<SUB>3</SUB>>", "33": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "35": "<(&lt;operator&gt;.alloc,new BufferedOutputStream(System.out))<SUB>3</SUB>>", "37": "<(IDENTIFIER,$obj1,new BufferedOutputStream(System.out))>", "39": "<(IDENTIFIER,System,new BufferedOutputStream(System.out))<SUB>3</SUB>>", "41": "<(IDENTIFIER,$obj1,&lt;empty&gt;)>", "43": "<(&lt;operator&gt;.assignment,int t = 1)<SUB>4</SUB>>", "45": "<(LITERAL,1,int t = 1)<SUB>4</SUB>>", "47": "<(&lt;operator&gt;.greaterThan,t-- &gt; 0)<SUB>5</SUB>>", "49": "<(IDENTIFIER,t,t--)<SUB>5</SUB>>", "51": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>5</SUB>>", "53": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>6</SUB>>", "55": "<(nextInt,nextInt())<SUB>6</SUB>>", "57": "<(&lt;operator&gt;.assignment,mod = nextLong())<SUB>7</SUB>>", "59": "<(nextLong,nextLong())<SUB>7</SUB>>", "61": "<(LOCAL,long res: long)<SUB>8</SUB>>", "63": "<(IDENTIFIER,res,long res = 0)<SUB>8</SUB>>", "65": "<(initFac,initFac(n + 7))<SUB>9</SUB>>", "67": "<(&lt;operator&gt;.addition,n + 7)<SUB>9</SUB>>", "69": "<(LITERAL,7,n + 7)<SUB>9</SUB>>", "71": "<(&lt;operator&gt;.assignment,long[] tpow = new long[n + 7])<SUB>10</SUB>>", "73": "<(&lt;operator&gt;.alloc,new long[n + 7])>", "75": "<(IDENTIFIER,n,n + 7)<SUB>10</SUB>>", "77": "<(LOCAL,long[][] combo: long[][])<SUB>11</SUB>>", "79": "<(IDENTIFIER,combo,long[][] combo = new long[n + 6][n + 6])<SUB>11</SUB>>", "81": "<(&lt;operator&gt;.addition,n + 6)<SUB>11</SUB>>", "83": "<(LITERAL,6,n + 6)<SUB>11</SUB>>", "85": "<(IDENTIFIER,n,n + 6)<SUB>11</SUB>>", "87": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt;= n); i++),for (int i = 0; Some(i &lt;= n); i++))<SUB>12</SUB>>", "89": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>12</SUB>>", "91": "<(LITERAL,0,int i = 0)<SUB>12</SUB>>", "93": "<(IDENTIFIER,i,i &lt;= n)<SUB>12</SUB>>", "95": "<(&lt;operator&gt;.postIncrement,i++)<SUB>12</SUB>>", "97": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>12</SUB>>", "99": "<(LOCAL,int j: int)<SUB>13</SUB>>", "101": "<(IDENTIFIER,j,int j = 0)<SUB>13</SUB>>", "103": "<(&lt;operator&gt;.lessEqualsThan,j &lt;= i)<SUB>13</SUB>>", "105": "<(IDENTIFIER,i,j &lt;= i)<SUB>13</SUB>>", "107": "<(IDENTIFIER,j,j++)<SUB>13</SUB>>", "109": "<(CONTROL_STRUCTURE,if (j == 0 || j == i),if (j == 0 || j == i))<SUB>14</SUB>>", "111": "<(&lt;operator&gt;.equals,j == 0)<SUB>14</SUB>>", "113": "<(LITERAL,0,j == 0)<SUB>14</SUB>>", "115": "<(IDENTIFIER,j,j == i)<SUB>14</SUB>>", "117": "<(&lt;operator&gt;.assignment,combo[i][j] = 1)<SUB>15</SUB>>", "119": "<(&lt;operator&gt;.indexAccess,combo[i])<SUB>15</SUB>>", "121": "<(IDENTIFIER,i,combo[i][j] = 1)<SUB>15</SUB>>", "123": "<(LITERAL,1,combo[i][j] = 1)<SUB>15</SUB>>", "125": "<(&lt;operator&gt;.assignment,combo[i][j] = (combo[i - 1][j - 1] + combo[i - 1][j]) % mod)<SUB>17</SUB>>", "127": "<(&lt;operator&gt;.indexAccess,combo[i])<SUB>17</SUB>>", "129": "<(IDENTIFIER,i,combo[i][j] = (combo[i - 1][j - 1] + combo[i - 1][j]) % mod)<SUB>17</SUB>>", "131": "<(&lt;operator&gt;.modulo,(combo[i - 1][j - 1] + combo[i - 1][j]) % mod)<SUB>17</SUB>>", "133": "<(&lt;operator&gt;.indexAccess,combo[i - 1][j - 1])<SUB>17</SUB>>", "135": "<(IDENTIFIER,combo,combo[i - 1][j - 1] + combo[i - 1][j])<SUB>17</SUB>>", "137": "<(IDENTIFIER,i,i - 1)<SUB>17</SUB>>", "139": "<(&lt;operator&gt;.subtraction,j - 1)<SUB>17</SUB>>", "141": "<(LITERAL,1,j - 1)<SUB>17</SUB>>", "143": "<(&lt;operator&gt;.indexAccess,combo[i - 1])<SUB>17</SUB>>", "145": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>17</SUB>>", "147": "<(LITERAL,1,i - 1)<SUB>17</SUB>>", "149": "<(IDENTIFIER,mod,(combo[i - 1][j - 1] + combo[i - 1][j]) % mod)<SUB>17</SUB>>", "151": "<(&lt;operator&gt;.indexAccess,tpow[0])<SUB>20</SUB>>", "153": "<(LITERAL,0,tpow[0] = 1)<SUB>20</SUB>>", "155": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt;= n + 6); i++),for (int i = 1; Some(i &lt;= n + 6); i++))<SUB>21</SUB>>", "157": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>21</SUB>>", "159": "<(LITERAL,1,int i = 1)<SUB>21</SUB>>", "161": "<(IDENTIFIER,i,i &lt;= n + 6)<SUB>21</SUB>>", "163": "<(IDENTIFIER,n,n + 6)<SUB>21</SUB>>", "165": "<(&lt;operator&gt;.postIncrement,i++)<SUB>21</SUB>>", "167": "<(&lt;operator&gt;.assignment,tpow[i] = (tpow[i - 1] * 2) % mod)<SUB>21</SUB>>", "169": "<(IDENTIFIER,tpow,tpow[i] = (tpow[i - 1] * 2) % mod)<SUB>21</SUB>>", "171": "<(&lt;operator&gt;.modulo,(tpow[i - 1] * 2) % mod)<SUB>21</SUB>>", "173": "<(&lt;operator&gt;.indexAccess,tpow[i - 1])<SUB>21</SUB>>", "175": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>21</SUB>>", "177": "<(LITERAL,1,i - 1)<SUB>21</SUB>>", "179": "<(IDENTIFIER,mod,(tpow[i - 1] * 2) % mod)<SUB>21</SUB>>", "181": "<(&lt;operator&gt;.assignment,long[][] dp = new long[n + 1][n + 1])<SUB>23</SUB>>", "183": "<(&lt;operator&gt;.alloc,new long[n + 1][n + 1])>", "185": "<(IDENTIFIER,n,n + 1)<SUB>23</SUB>>", "187": "<(&lt;operator&gt;.addition,n + 1)<SUB>23</SUB>>", "189": "<(LITERAL,1,n + 1)<SUB>23</SUB>>", "191": "<(LOCAL,int i: int)<SUB>24</SUB>>", "193": "<(IDENTIFIER,i,int i = 1)<SUB>24</SUB>>", "195": "<(&lt;operator&gt;.lessEqualsThan,i &lt;= n)<SUB>24</SUB>>", "197": "<(IDENTIFIER,n,i &lt;= n)<SUB>24</SUB>>", "199": "<(IDENTIFIER,i,i++)<SUB>24</SUB>>", "201": "<(&lt;operator&gt;.indexAccess,dp[i][0])<SUB>24</SUB>>", "203": "<(IDENTIFIER,dp,dp[i][0] = tpow[i - 1])<SUB>24</SUB>>", "205": "<(LITERAL,0,dp[i][0] = tpow[i - 1])<SUB>24</SUB>>", "207": "<(IDENTIFIER,tpow,dp[i][0] = tpow[i - 1])<SUB>24</SUB>>", "209": "<(IDENTIFIER,i,i - 1)<SUB>24</SUB>>", "211": "<(CONTROL_STRUCTURE,for (int i = 3; Some(i &lt;= n); i++),for (int i = 3; Some(i &lt;= n); i++))<SUB>25</SUB>>", "213": "<(&lt;operator&gt;.assignment,int i = 3)<SUB>25</SUB>>", "215": "<(LITERAL,3,int i = 3)<SUB>25</SUB>>", "217": "<(IDENTIFIER,i,i &lt;= n)<SUB>25</SUB>>", "219": "<(&lt;operator&gt;.postIncrement,i++)<SUB>25</SUB>>", "221": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>25</SUB>>", "223": "<(LOCAL,int auto: int)<SUB>26</SUB>>", "225": "<(IDENTIFIER,auto,int auto = 1)<SUB>26</SUB>>", "227": "<(&lt;operator&gt;.lessEqualsThan,auto &lt;= n / 2)<SUB>26</SUB>>", "229": "<(&lt;operator&gt;.division,n / 2)<SUB>26</SUB>>", "231": "<(LITERAL,2,n / 2)<SUB>26</SUB>>", "233": "<(IDENTIFIER,auto,auto++)<SUB>26</SUB>>", "235": "<(CONTROL_STRUCTURE,if (!check(i, auto)),if (!check(i, auto)))<SUB>27</SUB>>", "237": "<(check,check(i, auto))<SUB>27</SUB>>", "239": "<(IDENTIFIER,i,check(i, auto))<SUB>27</SUB>>", "241": "<(CONTROL_STRUCTURE,continue;,continue;)<SUB>27</SUB>>", "243": "<(&lt;operator&gt;.assignment,long total = 0)<SUB>28</SUB>>", "245": "<(LITERAL,0,long total = 0)<SUB>28</SUB>>", "247": "<(LOCAL,int j: int)<SUB>29</SUB>>", "249": "<(IDENTIFIER,j,int j = i - 2)<SUB>29</SUB>>", "251": "<(IDENTIFIER,i,i - 2)<SUB>29</SUB>>", "253": "<(&lt;operator&gt;.greaterEqualsThan,j &gt;= 1)<SUB>29</SUB>>", "255": "<(LITERAL,1,j &gt;= 1)<SUB>29</SUB>>", "257": "<(IDENTIFIER,j,j--)<SUB>29</SUB>>", "259": "<(CONTROL_STRUCTURE,if (!check(j, auto - 1)),if (!check(j, auto - 1)))<SUB>30</SUB>>", "261": "<(check,check(j, auto - 1))<SUB>30</SUB>>", "263": "<(IDENTIFIER,j,check(j, auto - 1))<SUB>30</SUB>>", "265": "<(IDENTIFIER,auto,auto - 1)<SUB>30</SUB>>", "267": "<(CONTROL_STRUCTURE,break;,break;)<SUB>30</SUB>>", "269": "<(&lt;operator&gt;.assignment,int len = i - j - 1)<SUB>31</SUB>>", "271": "<(&lt;operator&gt;.subtraction,i - j - 1)<SUB>31</SUB>>", "273": "<(IDENTIFIER,i,i - j)<SUB>31</SUB>>", "275": "<(LITERAL,1,i - j - 1)<SUB>31</SUB>>", "277": "<(&lt;operator&gt;.assignment,long ways = tpow[len - 1])<SUB>32</SUB>>", "279": "<(&lt;operator&gt;.indexAccess,tpow[len - 1])<SUB>32</SUB>>", "281": "<(&lt;operator&gt;.subtraction,len - 1)<SUB>32</SUB>>", "283": "<(LITERAL,1,len - 1)<SUB>32</SUB>>", "285": "<(&lt;operator&gt;.assignment,int picked = j - (auto - 1))<SUB>33</SUB>>", "287": "<(&lt;operator&gt;.subtraction,j - (auto - 1))<SUB>33</SUB>>", "289": "<(&lt;operator&gt;.subtraction,auto - 1)<SUB>33</SUB>>", "291": "<(LITERAL,1,auto - 1)<SUB>33</SUB>>", "293": "<(&lt;operator&gt;.assignment,long interleave = combo[len + picked][picked])<SUB>34</SUB>>", "295": "<(&lt;operator&gt;.indexAccess,combo[len + picked][picked])<SUB>34</SUB>>", "297": "<(IDENTIFIER,combo,long interleave = combo[len + picked][picked])<SUB>34</SUB>>", "299": "<(IDENTIFIER,len,len + picked)<SUB>34</SUB>>", "301": "<(IDENTIFIER,picked,long interleave = combo[len + picked][picked])<SUB>34</SUB>>", "303": "<(IDENTIFIER,ways,ways = (ways * interleave) % mod)<SUB>35</SUB>>", "305": "<(&lt;operator&gt;.multiplication,ways * interleave)<SUB>35</SUB>>", "307": "<(IDENTIFIER,interleave,ways * interleave)<SUB>35</SUB>>", "309": "<(&lt;operator&gt;.assignment,ways = (ways * dp[j][auto - 1]) % mod)<SUB>36</SUB>>", "311": "<(&lt;operator&gt;.modulo,(ways * dp[j][auto - 1]) % mod)<SUB>36</SUB>>", "313": "<(IDENTIFIER,ways,ways * dp[j][auto - 1])<SUB>36</SUB>>", "315": "<(&lt;operator&gt;.indexAccess,dp[j])<SUB>36</SUB>>", "317": "<(IDENTIFIER,j,ways * dp[j][auto - 1])<SUB>36</SUB>>", "319": "<(IDENTIFIER,auto,auto - 1)<SUB>36</SUB>>", "321": "<(IDENTIFIER,mod,(ways * dp[j][auto - 1]) % mod)<SUB>36</SUB>>", "323": "<(IDENTIFIER,total,total = (total + ways) % mod)<SUB>37</SUB>>", "325": "<(&lt;operator&gt;.addition,total + ways)<SUB>37</SUB>>", "327": "<(IDENTIFIER,ways,total + ways)<SUB>37</SUB>>", "329": "<(&lt;operator&gt;.assignment,dp[i][auto] = total)<SUB>39</SUB>>", "331": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>39</SUB>>", "333": "<(IDENTIFIER,i,dp[i][auto] = total)<SUB>39</SUB>>", "335": "<(IDENTIFIER,total,dp[i][auto] = total)<SUB>39</SUB>>", "337": "<(&lt;operator&gt;.equals,i == n)<SUB>40</SUB>>", "339": "<(IDENTIFIER,n,i == n)<SUB>40</SUB>>", "341": "<(IDENTIFIER,res,res = (res + dp[i][auto]) % mod)<SUB>40</SUB>>", "343": "<(&lt;operator&gt;.addition,res + dp[i][auto])<SUB>40</SUB>>", "345": "<(&lt;operator&gt;.indexAccess,dp[i][auto])<SUB>40</SUB>>", "347": "<(IDENTIFIER,dp,res + dp[i][auto])<SUB>40</SUB>>", "349": "<(IDENTIFIER,auto,res + dp[i][auto])<SUB>40</SUB>>", "351": "<(&lt;operator&gt;.assignment,res = (res + dp[n][0]) % mod)<SUB>43</SUB>>", "353": "<(&lt;operator&gt;.modulo,(res + dp[n][0]) % mod)<SUB>43</SUB>>", "355": "<(IDENTIFIER,res,res + dp[n][0])<SUB>43</SUB>>", "357": "<(&lt;operator&gt;.indexAccess,dp[n])<SUB>43</SUB>>", "359": "<(IDENTIFIER,n,res + dp[n][0])<SUB>43</SUB>>", "361": "<(IDENTIFIER,mod,(res + dp[n][0]) % mod)<SUB>43</SUB>>", "363": "<(IDENTIFIER,out,println(res))<SUB>44</SUB>>", "365": "<(close,close())<SUB>46</SUB>>", "367": "<(MODIFIER,PUBLIC)>", "369": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}