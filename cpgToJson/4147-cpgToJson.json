{"edges": [["19", "20"], ["19", "21"], ["19", "210"], ["19", "211"], ["19", "212"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "33"], ["21", "38"], ["21", "44"], ["21", "72"], ["21", "81"], ["21", "185"], ["21", "206"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["29", "30"], ["29", "31"], ["31", "32"], ["33", "34"], ["33", "35"], ["35", "36"], ["35", "37"], ["38", "39"], ["38", "40"], ["40", "41"], ["41", "42"], ["41", "43"], ["44", "45"], ["44", "46"], ["44", "49"], ["44", "52"], ["44", "54"], ["46", "47"], ["46", "48"], ["49", "50"], ["49", "51"], ["52", "53"], ["54", "55"], ["54", "56"], ["54", "59"], ["54", "62"], ["54", "64"], ["56", "57"], ["56", "58"], ["59", "60"], ["59", "61"], ["62", "63"], ["64", "65"], ["64", "70"], ["65", "66"], ["65", "69"], ["66", "67"], ["66", "68"], ["70", "71"], ["72", "73"], ["72", "80"], ["73", "74"], ["73", "75"], ["75", "76"], ["75", "79"], ["76", "77"], ["76", "78"], ["81", "82"], ["81", "83"], ["81", "90"], ["81", "93"], ["81", "95"], ["83", "84"], ["83", "85"], ["85", "86"], ["85", "89"], ["86", "87"], ["86", "88"], ["90", "91"], ["90", "92"], ["93", "94"], ["95", "96"], ["95", "97"], ["95", "102"], ["95", "111"], ["97", "98"], ["97", "99"], ["99", "100"], ["99", "101"], ["102", "103"], ["102", "104"], ["104", "105"], ["104", "110"], ["105", "106"], ["105", "107"], ["107", "108"], ["107", "109"], ["111", "112"], ["111", "113"], ["111", "116"], ["111", "119"], ["111", "121"], ["113", "114"], ["113", "115"], ["116", "117"], ["116", "118"], ["119", "120"], ["121", "122"], ["121", "129"], ["122", "123"], ["122", "128"], ["123", "124"], ["124", "125"], ["124", "126"], ["124", "127"], ["129", "130"], ["129", "131"], ["129", "136"], ["129", "139"], ["129", "141"], ["131", "132"], ["131", "133"], ["133", "134"], ["133", "135"], ["136", "137"], ["136", "138"], ["139", "140"], ["141", "142"], ["141", "149"], ["141", "167"], ["142", "143"], ["142", "148"], ["143", "144"], ["144", "145"], ["144", "146"], ["144", "147"], ["149", "150"], ["149", "156"], ["150", "151"], ["150", "152"], ["152", "153"], ["152", "154"], ["152", "155"], ["156", "157"], ["156", "166"], ["157", "158"], ["157", "163"], ["158", "159"], ["158", "162"], ["159", "160"], ["159", "161"], ["163", "164"], ["163", "165"], ["167", "168"], ["167", "174"], ["168", "169"], ["168", "170"], ["170", "171"], ["170", "172"], ["170", "173"], ["174", "175"], ["174", "184"], ["175", "176"], ["175", "181"], ["176", "177"], ["176", "180"], ["177", "178"], ["177", "179"], ["181", "182"], ["181", "183"], ["185", "186"], ["185", "187"], ["185", "190"], ["185", "193"], ["185", "195"], ["187", "188"], ["187", "189"], ["190", "191"], ["190", "192"], ["193", "194"], ["195", "196"], ["195", "199"], ["195", "200"], ["196", "197"], ["196", "198"], ["200", "201"], ["200", "202"], ["202", "203"], ["202", "204"], ["202", "205"], ["206", "207"], ["207", "208"], ["207", "209"], ["22", "28"], ["25", "31"], ["29", "35"], ["33", "41"], ["38", "46"], ["72", "86"], ["206", "212"], ["24", "22"], ["26", "25"], ["31", "29"], ["35", "33"], ["40", "38"], ["46", "49"], ["49", "56"], ["49", "76"], ["52", "49"], ["73", "72"], ["83", "90"], ["90", "99"], ["90", "187"], ["93", "90"], ["187", "190"], ["190", "198"], ["190", "209"], ["193", "190"], ["195", "193"], ["207", "206"], ["28", "26"], ["41", "40"], ["56", "59"], ["59", "66"], ["59", "52"], ["62", "59"], ["64", "62"], ["75", "73"], ["85", "83"], ["97", "107"], ["102", "113"], ["196", "202"], ["200", "195"], ["209", "207"], ["65", "70"], ["70", "64"], ["76", "75"], ["86", "85"], ["99", "97"], ["104", "102"], ["113", "116"], ["116", "124"], ["116", "93"], ["119", "116"], ["198", "196"], ["202", "200"], ["66", "65"], ["105", "104"], ["107", "105"], ["123", "119"], ["123", "133"], ["131", "136"], ["136", "144"], ["136", "119"], ["139", "136"], ["124", "123"], ["133", "131"], ["149", "170"], ["167", "139"], ["143", "139"], ["143", "152"], ["150", "159"], ["156", "149"], ["168", "177"], ["174", "167"], ["144", "143"], ["152", "150"], ["157", "156"], ["170", "168"], ["175", "174"], ["158", "163"], ["163", "157"], ["176", "181"], ["181", "175"], ["159", "158"], ["177", "176"], ["19", "24"], ["20", "212"], ["22", "212"], ["25", "212"], ["25", "212"], ["31", "212"], ["29", "212"], ["29", "212"], ["33", "212"], ["33", "212"], ["33", "212"], ["38", "212"], ["38", "212"], ["38", "212"], ["72", "212"], ["72", "212"], ["85", "212"], ["83", "212"], ["83", "212"], ["90", "212"], ["90", "212"], ["187", "212"], ["190", "212"], ["190", "212"], ["190", "212"], ["206", "212"], ["206", "212"], ["202", "212"], ["195", "212"], ["195", "212"], ["193", "212"], ["97", "212"], ["97", "212"], ["102", "212"], ["105", "212"], ["104", "212"], ["102", "212"], ["102", "212"], ["113", "212"], ["116", "212"], ["116", "212"], ["93", "212"], ["124", "212"], ["123", "212"], ["123", "212"], ["131", "212"], ["131", "212"], ["136", "212"], ["136", "212"], ["144", "212"], ["143", "212"], ["143", "212"], ["149", "212"], ["157", "212"], ["156", "212"], ["149", "212"], ["149", "212"], ["170", "212"], ["167", "212"], ["175", "212"], ["175", "212"], ["174", "212"], ["174", "212"], ["167", "212"], ["167", "212"], ["139", "212"], ["119", "212"], ["56", "212"], ["59", "212"], ["59", "212"], ["52", "212"], ["64", "212"], ["70", "212"], ["64", "212"], ["64", "212"], ["62", "212"], ["99", "212"], ["19", "20"], ["19", "22"], ["31", "29"], ["35", "33"], ["40", "38"], ["19", "72"], ["22", "25"], ["19", "25"], ["19", "46"], ["85", "83"], ["85", "83"], ["19", "187"], ["195", "206"], ["25", "31"], ["19", "31"], ["29", "35"], ["19", "35"], ["41", "40"], ["41", "40"], ["46", "49"], ["52", "49"], ["19", "49"], ["41", "49"], ["59", "49"], ["49", "52"], ["19", "52"], ["19", "56"], ["70", "64"], ["83", "90"], ["93", "90"], ["19", "90"], ["99", "93"], ["124", "93"], ["144", "93"], ["170", "93"], ["19", "93"], ["99", "97"], ["99", "97"], ["104", "102"], ["104", "102"], ["187", "190"], ["193", "190"], ["19", "190"], ["86", "190"], ["116", "190"], ["202", "193"], ["19", "193"], ["19", "195"], ["38", "195"], ["19", "41"], ["35", "41"], ["56", "59"], ["62", "59"], ["19", "59"], ["49", "59"], ["59", "62"], ["19", "62"], ["76", "75"], ["76", "75"], ["19", "75"], ["86", "85"], ["86", "85"], ["19", "85"], ["19", "113"], ["31", "70"], ["19", "70"], ["19", "76"], ["49", "76"], ["19", "86"], ["76", "86"], ["19", "99"], ["90", "99"], ["105", "104"], ["105", "104"], ["19", "104"], ["113", "116"], ["119", "116"], ["19", "116"], ["86", "116"], ["136", "116"], ["124", "119"], ["152", "119"], ["19", "119"], ["124", "202"], ["144", "202"], ["170", "202"], ["19", "202"], ["190", "202"], ["107", "105"], ["19", "105"], ["107", "105"], ["124", "131"], ["19", "131"], ["97", "107"], ["19", "107"], ["124", "123"], ["124", "123"], ["124", "123"], ["131", "136"], ["139", "136"], ["19", "136"], ["116", "136"], ["144", "139"], ["170", "139"], ["19", "139"], ["156", "149"], ["156", "149"], ["174", "167"], ["174", "167"], ["144", "124"], ["170", "124"], ["19", "124"], ["99", "124"], ["144", "124"], ["170", "124"], ["116", "124"], ["124", "133"], ["19", "133"], ["38", "149"], ["38", "167"], ["144", "143"], ["144", "143"], ["144", "143"], ["157", "156"], ["157", "156"], ["102", "156"], ["174", "156"], ["19", "156"], ["175", "174"], ["175", "174"], ["156", "174"], ["19", "174"], ["124", "144"], ["170", "144"], ["19", "144"], ["124", "144"], ["170", "144"], ["136", "144"], ["144", "152"], ["19", "152"], ["144", "152"], ["124", "152"], ["38", "157"], ["175", "157"], ["152", "170"], ["19", "170"], ["152", "170"], ["144", "170"], ["38", "175"], ["157", "175"], ["49", "52"], ["49", "56"], ["49", "59"], ["49", "49"], ["90", "107"], ["90", "113"], ["90", "102"], ["90", "104"], ["90", "97"], ["90", "93"], ["90", "90"], ["90", "116"], ["90", "99"], ["90", "105"], ["190", "196"], ["190", "198"], ["190", "195"], ["190", "190"], ["190", "202"], ["190", "193"], ["190", "200"], ["59", "64"], ["59", "59"], ["59", "70"], ["59", "66"], ["59", "65"], ["59", "62"], ["116", "119"], ["116", "116"], ["116", "123"], ["116", "124"], ["123", "136"], ["123", "131"], ["123", "133"], ["136", "136"], ["136", "144"], ["136", "139"], ["136", "143"], ["143", "167"], ["143", "163"], ["143", "149"], ["143", "150"], ["143", "168"], ["143", "170"], ["143", "181"], ["143", "152"], ["143", "174"], ["143", "158"], ["143", "157"], ["143", "159"], ["143", "176"], ["143", "177"], ["143", "175"], ["143", "156"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY in = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,in,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(&lt;operator&gt;.assignment,n = nextInt())<SUB>3</SUB>>", "31": "<(nextInt,nextInt())<SUB>3</SUB>>", "33": "<(&lt;operator&gt;.assignment,prob = new double[n][n])<SUB>4</SUB>>", "35": "<(&lt;operator&gt;.alloc,new double[n][n])>", "37": "<(IDENTIFIER,n,new double[n][n])<SUB>4</SUB>>", "39": "<(IDENTIFIER,memo,memo = new double[1 &lt;&lt; n])<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; n)<SUB>5</SUB>>", "43": "<(IDENTIFIER,n,1 &lt;&lt; n)<SUB>5</SUB>>", "45": "<(LOCAL,int i: int)<SUB>6</SUB>>", "47": "<(IDENTIFIER,i,int i = 0)<SUB>6</SUB>>", "49": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>6</SUB>>", "51": "<(IDENTIFIER,n,i &lt; n)<SUB>6</SUB>>", "53": "<(IDENTIFIER,i,i++)<SUB>6</SUB>>", "55": "<(LOCAL,int j: int)<SUB>7</SUB>>", "57": "<(IDENTIFIER,j,int j = 0)<SUB>7</SUB>>", "59": "<(&lt;operator&gt;.lessThan,j &lt; n)<SUB>7</SUB>>", "61": "<(IDENTIFIER,n,j &lt; n)<SUB>7</SUB>>", "63": "<(IDENTIFIER,j,j++)<SUB>7</SUB>>", "65": "<(&lt;operator&gt;.indexAccess,prob[i][j])<SUB>8</SUB>>", "67": "<(IDENTIFIER,prob,prob[i][j] = nextDouble())<SUB>8</SUB>>", "69": "<(IDENTIFIER,j,prob[i][j] = nextDouble())<SUB>8</SUB>>", "71": "<(IDENTIFIER,in,nextDouble())<SUB>8</SUB>>", "73": "<(&lt;operator&gt;.indexAccess,memo[(1 &lt;&lt; n) - 1])<SUB>9</SUB>>", "75": "<(&lt;operator&gt;.subtraction,(1 &lt;&lt; n) - 1)<SUB>9</SUB>>", "77": "<(LITERAL,1,1 &lt;&lt; n)<SUB>9</SUB>>", "79": "<(LITERAL,1,(1 &lt;&lt; n) - 1)<SUB>9</SUB>>", "81": "<(CONTROL_STRUCTURE,for (int k = (1 &lt;&lt; n) - 1; Some(k &gt; 0); k--),for (int k = (1 &lt;&lt; n) - 1; Some(k &gt; 0); k--))<SUB>10</SUB>>", "83": "<(&lt;operator&gt;.assignment,int k = (1 &lt;&lt; n) - 1)<SUB>10</SUB>>", "85": "<(&lt;operator&gt;.subtraction,(1 &lt;&lt; n) - 1)<SUB>10</SUB>>", "87": "<(LITERAL,1,1 &lt;&lt; n)<SUB>10</SUB>>", "89": "<(LITERAL,1,(1 &lt;&lt; n) - 1)<SUB>10</SUB>>", "91": "<(IDENTIFIER,k,k &gt; 0)<SUB>10</SUB>>", "93": "<(&lt;operator&gt;.postDecrement,k--)<SUB>10</SUB>>", "95": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "97": "<(&lt;operator&gt;.assignment,int numWays = Integer.bitCount(k))<SUB>11</SUB>>", "99": "<(bitCount,Integer.bitCount(k))<SUB>11</SUB>>", "101": "<(IDENTIFIER,k,Integer.bitCount(k))<SUB>11</SUB>>", "103": "<(IDENTIFIER,numWays,numWays = (numWays * (numWays - 1)) / 2)<SUB>12</SUB>>", "105": "<(&lt;operator&gt;.multiplication,numWays * (numWays - 1))<SUB>12</SUB>>", "107": "<(&lt;operator&gt;.subtraction,numWays - 1)<SUB>12</SUB>>", "109": "<(LITERAL,1,numWays - 1)<SUB>12</SUB>>", "111": "<(CONTROL_STRUCTURE,for (int first = 0; Some(first &lt; n); first++),for (int first = 0; Some(first &lt; n); first++))<SUB>13</SUB>>", "113": "<(&lt;operator&gt;.assignment,int first = 0)<SUB>13</SUB>>", "115": "<(LITERAL,0,int first = 0)<SUB>13</SUB>>", "117": "<(IDENTIFIER,first,first &lt; n)<SUB>13</SUB>>", "119": "<(&lt;operator&gt;.postIncrement,first++)<SUB>13</SUB>>", "121": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>13</SUB>>", "123": "<(&lt;operator&gt;.logicalNot,!isSet(k, first))<SUB>14</SUB>>", "125": "<(IDENTIFIER,this,isSet(k, first))<SUB>14</SUB>>", "127": "<(IDENTIFIER,first,isSet(k, first))<SUB>14</SUB>>", "129": "<(CONTROL_STRUCTURE,for (int second = first + 1; Some(second &lt; n); second++),for (int second = first + 1; Some(second &lt; n); second++))<SUB>15</SUB>>", "131": "<(&lt;operator&gt;.assignment,int second = first + 1)<SUB>15</SUB>>", "133": "<(&lt;operator&gt;.addition,first + 1)<SUB>15</SUB>>", "135": "<(LITERAL,1,first + 1)<SUB>15</SUB>>", "137": "<(IDENTIFIER,second,second &lt; n)<SUB>15</SUB>>", "139": "<(&lt;operator&gt;.postIncrement,second++)<SUB>15</SUB>>", "141": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>15</SUB>>", "143": "<(&lt;operator&gt;.logicalNot,!isSet(k, second))<SUB>16</SUB>>", "145": "<(IDENTIFIER,this,isSet(k, second))<SUB>16</SUB>>", "147": "<(IDENTIFIER,second,isSet(k, second))<SUB>16</SUB>>", "149": "<(&lt;operator&gt;.assignmentPlus,memo[reset(k, first)] += prob[second][first] * memo[k] / numWays)<SUB>17</SUB>>", "151": "<(IDENTIFIER,memo,memo[reset(k, first)] += prob[second][first] * memo[k] / numWays)<SUB>17</SUB>>", "153": "<(IDENTIFIER,this,reset(k, first))<SUB>17</SUB>>", "155": "<(IDENTIFIER,first,reset(k, first))<SUB>17</SUB>>", "157": "<(&lt;operator&gt;.multiplication,prob[second][first] * memo[k])<SUB>17</SUB>>", "159": "<(&lt;operator&gt;.indexAccess,prob[second])<SUB>17</SUB>>", "161": "<(IDENTIFIER,second,prob[second][first] * memo[k])<SUB>17</SUB>>", "163": "<(&lt;operator&gt;.indexAccess,memo[k])<SUB>17</SUB>>", "165": "<(IDENTIFIER,k,prob[second][first] * memo[k])<SUB>17</SUB>>", "167": "<(&lt;operator&gt;.assignmentPlus,memo[reset(k, second)] += prob[first][second] * memo[k] / numWays)<SUB>18</SUB>>", "169": "<(IDENTIFIER,memo,memo[reset(k, second)] += prob[first][second] * memo[k] / numWays)<SUB>18</SUB>>", "171": "<(IDENTIFIER,this,reset(k, second))<SUB>18</SUB>>", "173": "<(IDENTIFIER,second,reset(k, second))<SUB>18</SUB>>", "175": "<(&lt;operator&gt;.multiplication,prob[first][second] * memo[k])<SUB>18</SUB>>", "177": "<(&lt;operator&gt;.indexAccess,prob[first])<SUB>18</SUB>>", "179": "<(IDENTIFIER,first,prob[first][second] * memo[k])<SUB>18</SUB>>", "181": "<(&lt;operator&gt;.indexAccess,memo[k])<SUB>18</SUB>>", "183": "<(IDENTIFIER,k,prob[first][second] * memo[k])<SUB>18</SUB>>", "185": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>22</SUB>>", "187": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>22</SUB>>", "189": "<(LITERAL,0,int i = 0)<SUB>22</SUB>>", "191": "<(IDENTIFIER,i,i &lt; n)<SUB>22</SUB>>", "193": "<(&lt;operator&gt;.postIncrement,i++)<SUB>22</SUB>>", "195": "<(printf,printf(&quot;%.6f &quot;, memo[set(0, i)]))<SUB>23</SUB>>", "197": "<(IDENTIFIER,System,printf(&quot;%.6f &quot;, memo[set(0, i)]))<SUB>23</SUB>>", "199": "<(LITERAL,&quot;%.6f &quot;,printf(&quot;%.6f &quot;, memo[set(0, i)]))<SUB>23</SUB>>", "201": "<(IDENTIFIER,memo,printf(&quot;%.6f &quot;, memo[set(0, i)]))<SUB>23</SUB>>", "203": "<(IDENTIFIER,this,set(0, i))<SUB>23</SUB>>", "205": "<(IDENTIFIER,i,set(0, i))<SUB>23</SUB>>", "207": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>24</SUB>>", "209": "<(FIELD_IDENTIFIER,out,out)<SUB>24</SUB>>", "211": "<(MODIFIER,STATIC)>"}}