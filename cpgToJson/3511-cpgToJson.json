{"edges": [["17", "19"], ["17", "213"], ["17", "214"], ["17", "215"], ["19", "20"], ["19", "21"], ["19", "24"], ["19", "209"], ["19", "211"], ["21", "22"], ["21", "23"], ["24", "25"], ["24", "29"], ["25", "26"], ["25", "28"], ["26", "27"], ["29", "30"], ["29", "31"], ["29", "35"], ["29", "39"], ["29", "45"], ["29", "48"], ["29", "49"], ["29", "58"], ["29", "80"], ["29", "181"], ["29", "182"], ["29", "185"], ["29", "206"], ["31", "32"], ["31", "33"], ["33", "34"], ["35", "36"], ["35", "37"], ["37", "38"], ["39", "40"], ["39", "41"], ["41", "42"], ["42", "43"], ["42", "44"], ["45", "46"], ["45", "47"], ["49", "50"], ["49", "51"], ["51", "52"], ["51", "55"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "57"], ["58", "59"], ["58", "60"], ["58", "63"], ["58", "66"], ["58", "68"], ["60", "61"], ["60", "62"], ["63", "64"], ["63", "65"], ["66", "67"], ["68", "69"], ["68", "74"], ["69", "70"], ["69", "73"], ["70", "71"], ["70", "72"], ["74", "75"], ["74", "76"], ["74", "77"], ["77", "78"], ["77", "79"], ["80", "81"], ["80", "82"], ["80", "85"], ["80", "88"], ["80", "90"], ["82", "83"], ["82", "84"], ["85", "86"], ["85", "87"], ["88", "89"], ["90", "91"], ["91", "92"], ["91", "93"], ["91", "96"], ["91", "99"], ["91", "101"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["99", "100"], ["101", "102"], ["102", "103"], ["102", "104"], ["102", "107"], ["102", "110"], ["102", "112"], ["104", "105"], ["104", "106"], ["107", "108"], ["107", "109"], ["110", "111"], ["112", "113"], ["112", "114"], ["112", "135"], ["112", "155"], ["112", "166"], ["114", "115"], ["114", "116"], ["116", "117"], ["116", "134"], ["117", "118"], ["117", "129"], ["118", "119"], ["118", "126"], ["119", "120"], ["119", "121"], ["121", "122"], ["121", "125"], ["122", "123"], ["122", "124"], ["126", "127"], ["126", "128"], ["129", "130"], ["129", "133"], ["130", "131"], ["130", "132"], ["135", "136"], ["135", "143"], ["136", "137"], ["136", "142"], ["137", "138"], ["137", "139"], ["139", "140"], ["139", "141"], ["143", "144"], ["143", "149"], ["144", "145"], ["144", "146"], ["146", "147"], ["146", "148"], ["149", "150"], ["149", "151"], ["149", "152"], ["152", "153"], ["152", "154"], ["155", "156"], ["155", "157"], ["157", "158"], ["157", "165"], ["158", "159"], ["158", "160"], ["160", "161"], ["160", "162"], ["162", "163"], ["162", "164"], ["166", "167"], ["166", "172"], ["167", "168"], ["167", "171"], ["168", "169"], ["168", "170"], ["172", "173"], ["172", "180"], ["173", "174"], ["173", "179"], ["174", "175"], ["174", "178"], ["175", "176"], ["175", "177"], ["182", "183"], ["182", "184"], ["185", "186"], ["185", "187"], ["185", "190"], ["185", "193"], ["185", "195"], ["187", "188"], ["187", "189"], ["190", "191"], ["190", "192"], ["193", "194"], ["195", "196"], ["195", "197"], ["197", "198"], ["197", "205"], ["198", "199"], ["198", "200"], ["200", "201"], ["200", "204"], ["201", "202"], ["201", "203"], ["206", "207"], ["206", "208"], ["209", "210"], ["211", "212"], ["21", "26"], ["209", "211"], ["211", "215"], ["25", "33"], ["25", "209"], ["26", "25"], ["31", "37"], ["35", "42"], ["39", "45"], ["45", "52"], ["49", "60"], ["182", "187"], ["206", "26"], ["33", "31"], ["37", "35"], ["41", "39"], ["51", "49"], ["60", "63"], ["63", "70"], ["63", "82"], ["66", "63"], ["68", "66"], ["82", "85"], ["85", "93"], ["85", "182"], ["88", "85"], ["187", "190"], ["190", "201"], ["190", "206"], ["193", "190"], ["195", "193"], ["42", "41"], ["52", "55"], ["55", "51"], ["69", "77"], ["74", "68"], ["197", "195"], ["70", "69"], ["77", "74"], ["93", "96"], ["96", "104"], ["96", "88"], ["99", "96"], ["198", "197"], ["200", "198"], ["104", "107"], ["107", "122"], ["107", "99"], ["110", "107"], ["201", "200"], ["114", "139"], ["155", "168"], ["166", "110"], ["116", "114"], ["136", "146"], ["136", "162"], ["143", "162"], ["157", "155"], ["167", "175"], ["172", "166"], ["117", "116"], ["137", "136"], ["144", "152"], ["149", "143"], ["158", "157"], ["168", "167"], ["173", "172"], ["118", "130"], ["129", "117"], ["139", "137"], ["146", "144"], ["152", "149"], ["160", "158"], ["174", "173"], ["119", "126"], ["126", "118"], ["130", "129"], ["162", "160"], ["175", "174"], ["121", "119"], ["122", "121"], ["17", "21"], ["18", "215"], ["21", "215"], ["26", "215"], ["25", "215"], ["25", "215"], ["209", "215"], ["211", "215"], ["211", "215"], ["31", "215"], ["31", "215"], ["35", "215"], ["37", "215"], ["35", "215"], ["35", "215"], ["39", "215"], ["41", "215"], ["39", "215"], ["39", "215"], ["45", "215"], ["45", "215"], ["49", "215"], ["51", "215"], ["49", "215"], ["49", "215"], ["60", "215"], ["82", "215"], ["182", "215"], ["187", "215"], ["190", "215"], ["190", "215"], ["190", "215"], ["206", "215"], ["206", "215"], ["198", "215"], ["197", "215"], ["197", "215"], ["195", "215"], ["195", "215"], ["193", "215"], ["93", "215"], ["96", "215"], ["96", "215"], ["88", "215"], ["104", "215"], ["107", "215"], ["107", "215"], ["99", "215"], ["121", "215"], ["117", "215"], ["117", "215"], ["116", "215"], ["114", "215"], ["114", "215"], ["136", "215"], ["149", "215"], ["143", "215"], ["143", "215"], ["158", "215"], ["157", "215"], ["155", "215"], ["155", "215"], ["166", "215"], ["173", "215"], ["172", "215"], ["172", "215"], ["166", "215"], ["166", "215"], ["110", "215"], ["68", "215"], ["74", "215"], ["74", "215"], ["68", "215"], ["68", "215"], ["66", "215"], ["17", "18"], ["17", "21"], ["206", "209"], ["17", "209"], ["209", "211"], ["17", "211"], ["26", "25"], ["17", "25"], ["33", "31"], ["37", "35"], ["41", "39"], ["51", "49"], ["17", "182"], ["21", "26"], ["17", "26"], ["149", "45"], ["74", "45"], ["17", "45"], ["31", "45"], ["17", "60"], ["74", "68"], ["74", "68"], ["74", "68"], ["17", "82"], ["17", "187"], ["197", "195"], ["197", "195"], ["17", "206"], ["182", "206"], ["195", "206"], ["37", "33"], ["17", "33"], ["33", "37"], ["17", "37"], ["31", "41"], ["17", "41"], ["45", "51"], ["17", "51"], ["60", "63"], ["66", "63"], ["17", "63"], ["45", "63"], ["77", "66"], ["17", "66"], ["82", "85"], ["88", "85"], ["17", "85"], ["63", "85"], ["96", "88"], ["17", "88"], ["187", "190"], ["193", "190"], ["17", "190"], ["85", "190"], ["190", "193"], ["17", "193"], ["31", "42"], ["17", "42"], ["45", "52"], ["17", "52"], ["17", "55"], ["45", "55"], ["45", "74"], ["17", "74"], ["77", "74"], ["77", "74"], ["17", "93"], ["182", "197"], ["195", "197"], ["17", "197"], ["35", "197"], ["172", "197"], ["63", "77"], ["17", "77"], ["93", "96"], ["99", "96"], ["17", "96"], ["85", "96"], ["122", "96"], ["107", "99"], ["17", "99"], ["182", "198"], ["195", "198"], ["17", "198"], ["17", "104"], ["104", "107"], ["110", "107"], ["17", "107"], ["96", "107"], ["126", "107"], ["162", "110"], ["17", "110"], ["116", "114"], ["116", "114"], ["157", "155"], ["157", "155"], ["172", "166"], ["172", "166"], ["149", "143"], ["149", "143"], ["149", "143"], ["117", "116"], ["117", "116"], ["35", "116"], ["172", "116"], ["17", "116"], ["39", "136"], ["158", "136"], ["17", "136"], ["158", "157"], ["158", "157"], ["116", "157"], ["17", "157"], ["166", "172"], ["155", "172"], ["17", "172"], ["157", "172"], ["45", "149"], ["74", "149"], ["17", "149"], ["152", "149"], ["152", "149"], ["114", "158"], ["17", "158"], ["39", "158"], ["136", "158"], ["143", "158"], ["166", "173"], ["155", "173"], ["17", "173"], ["126", "139"], ["17", "139"], ["139", "146"], ["17", "146"], ["146", "152"], ["17", "152"], ["107", "126"], ["17", "126"], ["122", "126"], ["139", "162"], ["152", "162"], ["17", "162"], ["122", "121"], ["122", "121"], ["17", "121"], ["96", "122"], ["17", "122"], ["107", "122"], ["25", "60"], ["25", "26"], ["25", "42"], ["25", "51"], ["25", "52"], ["25", "37"], ["25", "85"], ["25", "25"], ["25", "206"], ["25", "35"], ["25", "187"], ["25", "190"], ["25", "33"], ["25", "182"], ["25", "49"], ["25", "45"], ["25", "82"], ["25", "41"], ["25", "63"], ["25", "55"], ["25", "39"], ["25", "31"], ["63", "68"], ["63", "77"], ["63", "69"], ["63", "74"], ["63", "70"], ["63", "66"], ["63", "63"], ["85", "96"], ["85", "85"], ["85", "93"], ["85", "88"], ["190", "197"], ["190", "198"], ["190", "195"], ["190", "190"], ["190", "201"], ["190", "193"], ["190", "200"], ["96", "107"], ["96", "96"], ["96", "104"], ["96", "99"], ["107", "107"], ["107", "167"], ["107", "136"], ["107", "114"], ["107", "119"], ["107", "121"], ["107", "162"], ["107", "168"], ["107", "129"], ["107", "173"], ["107", "137"], ["107", "130"], ["107", "118"], ["107", "174"], ["107", "155"], ["107", "139"], ["107", "158"], ["107", "160"], ["107", "116"], ["107", "122"], ["107", "166"], ["107", "157"], ["107", "126"], ["107", "110"], ["107", "117"], ["107", "175"], ["107", "172"], ["136", "146"], ["136", "149"], ["136", "144"], ["136", "152"], ["136", "143"]], "features": {"17": "<(METHOD,main)<SUB>1</SUB>>", "19": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "21": "<(&lt;operator&gt;.assignment,int test = 1)<SUB>2</SUB>>", "23": "<(LITERAL,1,int test = 1)<SUB>2</SUB>>", "25": "<(&lt;operator&gt;.greaterThan,test-- &gt; 0)<SUB>4</SUB>>", "27": "<(IDENTIFIER,test,test--)<SUB>4</SUB>>", "29": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>4</SUB>>", "31": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>5</SUB>>", "33": "<(nextInt,nextInt())<SUB>5</SUB>>", "35": "<(&lt;operator&gt;.assignment,MOD = nextLong())<SUB>6</SUB>>", "37": "<(nextLong,nextLong())<SUB>6</SUB>>", "39": "<(&lt;operator&gt;.assignment,memo = new long[n + 1])<SUB>7</SUB>>", "41": "<(&lt;operator&gt;.alloc,new long[n + 1])>", "43": "<(IDENTIFIER,n,n + 1)<SUB>7</SUB>>", "45": "<(fill,fill(n))<SUB>8</SUB>>", "47": "<(IDENTIFIER,n,fill(n))<SUB>8</SUB>>", "49": "<(&lt;operator&gt;.assignment,long[][] dp = new long[n + 5][n + 5])<SUB>9</SUB>>", "51": "<(&lt;operator&gt;.alloc,new long[n + 5][n + 5])>", "53": "<(IDENTIFIER,n,n + 5)<SUB>9</SUB>>", "55": "<(&lt;operator&gt;.addition,n + 5)<SUB>9</SUB>>", "57": "<(LITERAL,5,n + 5)<SUB>9</SUB>>", "59": "<(LOCAL,int i: int)<SUB>10</SUB>>", "61": "<(IDENTIFIER,i,int i = 1)<SUB>10</SUB>>", "63": "<(&lt;operator&gt;.lessEqualsThan,i &lt;= n)<SUB>10</SUB>>", "65": "<(IDENTIFIER,n,i &lt;= n)<SUB>10</SUB>>", "67": "<(IDENTIFIER,i,i++)<SUB>10</SUB>>", "69": "<(&lt;operator&gt;.indexAccess,dp[i][i])<SUB>10</SUB>>", "71": "<(IDENTIFIER,dp,dp[i][i] = exp(2, i - 1))<SUB>10</SUB>>", "73": "<(IDENTIFIER,i,dp[i][i] = exp(2, i - 1))<SUB>10</SUB>>", "75": "<(IDENTIFIER,this,exp(2, i - 1))<SUB>10</SUB>>", "77": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>10</SUB>>", "79": "<(LITERAL,1,i - 1)<SUB>10</SUB>>", "81": "<(LOCAL,int i: int)<SUB>11</SUB>>", "83": "<(IDENTIFIER,i,int i = 2)<SUB>11</SUB>>", "85": "<(&lt;operator&gt;.lessEqualsThan,i &lt;= n)<SUB>11</SUB>>", "87": "<(IDENTIFIER,n,i &lt;= n)<SUB>11</SUB>>", "89": "<(IDENTIFIER,i,i++)<SUB>11</SUB>>", "91": "<(CONTROL_STRUCTURE,for (int j = 1; Some(j &lt; i); j++),for (int j = 1; Some(j &lt; i); j++))<SUB>12</SUB>>", "93": "<(&lt;operator&gt;.assignment,int j = 1)<SUB>12</SUB>>", "95": "<(LITERAL,1,int j = 1)<SUB>12</SUB>>", "97": "<(IDENTIFIER,j,j &lt; i)<SUB>12</SUB>>", "99": "<(&lt;operator&gt;.postIncrement,j++)<SUB>12</SUB>>", "101": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>12</SUB>>", "103": "<(LOCAL,int k: int)<SUB>13</SUB>>", "105": "<(IDENTIFIER,k,int k = 1)<SUB>13</SUB>>", "107": "<(&lt;operator&gt;.lessEqualsThan,k &lt;= j)<SUB>13</SUB>>", "109": "<(IDENTIFIER,j,k &lt;= j)<SUB>13</SUB>>", "111": "<(IDENTIFIER,k,k++)<SUB>13</SUB>>", "113": "<(LOCAL,long val: long)<SUB>14</SUB>>", "115": "<(IDENTIFIER,val,long val = (dp[i - k - 1][j - k] * C[j][k]) % MOD)<SUB>14</SUB>>", "117": "<(&lt;operator&gt;.multiplication,dp[i - k - 1][j - k] * C[j][k])<SUB>14</SUB>>", "119": "<(&lt;operator&gt;.indexAccess,dp[i - k - 1])<SUB>14</SUB>>", "121": "<(&lt;operator&gt;.subtraction,i - k - 1)<SUB>14</SUB>>", "123": "<(IDENTIFIER,i,i - k)<SUB>14</SUB>>", "125": "<(LITERAL,1,i - k - 1)<SUB>14</SUB>>", "127": "<(IDENTIFIER,j,j - k)<SUB>14</SUB>>", "129": "<(&lt;operator&gt;.indexAccess,C[j][k])<SUB>14</SUB>>", "131": "<(IDENTIFIER,C,dp[i - k - 1][j - k] * C[j][k])<SUB>14</SUB>>", "133": "<(IDENTIFIER,k,dp[i - k - 1][j - k] * C[j][k])<SUB>14</SUB>>", "135": "<(CONTROL_STRUCTURE,if (memo[k - 1] == 0),if (memo[k - 1] == 0))<SUB>15</SUB>>", "137": "<(&lt;operator&gt;.indexAccess,memo[k - 1])<SUB>15</SUB>>", "139": "<(&lt;operator&gt;.subtraction,k - 1)<SUB>15</SUB>>", "141": "<(LITERAL,1,k - 1)<SUB>15</SUB>>", "143": "<(&lt;operator&gt;.assignment,memo[k - 1] = exp(2, k - 1))<SUB>15</SUB>>", "145": "<(IDENTIFIER,memo,memo[k - 1] = exp(2, k - 1))<SUB>15</SUB>>", "147": "<(IDENTIFIER,k,k - 1)<SUB>15</SUB>>", "149": "<(exp,exp(2, k - 1))<SUB>15</SUB>>", "151": "<(LITERAL,2,exp(2, k - 1))<SUB>15</SUB>>", "153": "<(IDENTIFIER,k,k - 1)<SUB>15</SUB>>", "155": "<(&lt;operator&gt;.assignment,val = (val * memo[k - 1]) % MOD)<SUB>16</SUB>>", "157": "<(&lt;operator&gt;.modulo,(val * memo[k - 1]) % MOD)<SUB>16</SUB>>", "159": "<(IDENTIFIER,val,val * memo[k - 1])<SUB>16</SUB>>", "161": "<(IDENTIFIER,memo,val * memo[k - 1])<SUB>16</SUB>>", "163": "<(IDENTIFIER,k,k - 1)<SUB>16</SUB>>", "165": "<(IDENTIFIER,MOD,(val * memo[k - 1]) % MOD)<SUB>16</SUB>>", "167": "<(&lt;operator&gt;.indexAccess,dp[i][j])<SUB>17</SUB>>", "169": "<(IDENTIFIER,dp,dp[i][j] = (dp[i][j] + val) % MOD)<SUB>17</SUB>>", "171": "<(IDENTIFIER,j,dp[i][j] = (dp[i][j] + val) % MOD)<SUB>17</SUB>>", "173": "<(&lt;operator&gt;.addition,dp[i][j] + val)<SUB>17</SUB>>", "175": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>17</SUB>>", "177": "<(IDENTIFIER,i,dp[i][j] + val)<SUB>17</SUB>>", "179": "<(IDENTIFIER,val,dp[i][j] + val)<SUB>17</SUB>>", "181": "<(LOCAL,long ans: long)<SUB>21</SUB>>", "183": "<(IDENTIFIER,ans,long ans = 0)<SUB>21</SUB>>", "185": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt;= n); i++),for (int i = 0; Some(i &lt;= n); i++))<SUB>22</SUB>>", "187": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>22</SUB>>", "189": "<(LITERAL,0,int i = 0)<SUB>22</SUB>>", "191": "<(IDENTIFIER,i,i &lt;= n)<SUB>22</SUB>>", "193": "<(&lt;operator&gt;.postIncrement,i++)<SUB>22</SUB>>", "195": "<(&lt;operator&gt;.assignment,ans = (ans + dp[n][i]) % MOD)<SUB>22</SUB>>", "197": "<(&lt;operator&gt;.modulo,(ans + dp[n][i]) % MOD)<SUB>22</SUB>>", "199": "<(IDENTIFIER,ans,ans + dp[n][i])<SUB>22</SUB>>", "201": "<(&lt;operator&gt;.indexAccess,dp[n])<SUB>22</SUB>>", "203": "<(IDENTIFIER,n,ans + dp[n][i])<SUB>22</SUB>>", "205": "<(IDENTIFIER,MOD,(ans + dp[n][i]) % MOD)<SUB>22</SUB>>", "207": "<(IDENTIFIER,out,println(ans))<SUB>23</SUB>>", "209": "<(flush,flush())<SUB>25</SUB>>", "211": "<(close,close())<SUB>26</SUB>>", "213": "<(MODIFIER,PUBLIC)>", "215": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}