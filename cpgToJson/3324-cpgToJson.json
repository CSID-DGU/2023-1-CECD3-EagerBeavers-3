{"edges": [["19", "21"], ["19", "115"], ["19", "116"], ["19", "117"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "26"], ["21", "27"], ["21", "31"], ["21", "32"], ["21", "36"], ["21", "37"], ["21", "41"], ["21", "42"], ["21", "46"], ["21", "69"], ["21", "70"], ["21", "75"], ["21", "76"], ["21", "83"], ["21", "110"], ["22", "23"], ["22", "24"], ["25", "3"], ["27", "28"], ["27", "29"], ["29", "30"], ["32", "33"], ["32", "34"], ["34", "35"], ["37", "38"], ["37", "39"], ["39", "40"], ["42", "43"], ["42", "44"], ["44", "45"], ["46", "47"], ["46", "48"], ["46", "51"], ["46", "54"], ["46", "56"], ["48", "49"], ["48", "50"], ["51", "52"], ["51", "53"], ["54", "55"], ["56", "57"], ["56", "63"], ["57", "58"], ["57", "61"], ["58", "59"], ["58", "60"], ["61", "62"], ["63", "64"], ["63", "67"], ["64", "65"], ["64", "66"], ["67", "68"], ["70", "71"], ["70", "72"], ["72", "73"], ["72", "74"], ["76", "77"], ["76", "78"], ["78", "79"], ["78", "80"], ["78", "81"], ["78", "82"], ["83", "84"], ["83", "85"], ["83", "88"], ["83", "91"], ["83", "93"], ["85", "86"], ["85", "87"], ["88", "89"], ["88", "90"], ["91", "92"], ["93", "94"], ["93", "95"], ["93", "100"], ["95", "96"], ["95", "97"], ["97", "98"], ["97", "99"], ["100", "101"], ["100", "102"], ["102", "103"], ["102", "104"], ["102", "105"], ["105", "106"], ["105", "107"], ["105", "108"], ["105", "109"], ["110", "111"], ["110", "114"], ["111", "112"], ["111", "113"], ["22", "25"], ["25", "29"], ["27", "34"], ["32", "39"], ["37", "44"], ["42", "48"], ["70", "78"], ["76", "85"], ["110", "117"], ["24", "22"], ["29", "27"], ["34", "32"], ["39", "37"], ["44", "42"], ["48", "51"], ["51", "58"], ["51", "74"], ["54", "51"], ["72", "70"], ["78", "76"], ["85", "88"], ["88", "97"], ["88", "113"], ["91", "88"], ["111", "110"], ["57", "64"], ["63", "54"], ["74", "72"], ["95", "105"], ["100", "91"], ["113", "111"], ["58", "61"], ["61", "57"], ["64", "67"], ["67", "63"], ["97", "95"], ["102", "100"], ["105", "102"], ["19", "24"], ["20", "117"], ["22", "117"], ["25", "117"], ["27", "117"], ["34", "117"], ["32", "117"], ["32", "117"], ["37", "117"], ["42", "117"], ["42", "117"], ["51", "117"], ["51", "117"], ["70", "117"], ["70", "117"], ["76", "117"], ["78", "117"], ["78", "117"], ["78", "117"], ["76", "117"], ["76", "117"], ["85", "117"], ["88", "117"], ["88", "117"], ["88", "117"], ["110", "117"], ["110", "117"], ["110", "117"], ["97", "117"], ["95", "117"], ["95", "117"], ["105", "117"], ["105", "117"], ["105", "117"], ["102", "117"], ["100", "117"], ["100", "117"], ["91", "117"], ["57", "117"], ["57", "117"], ["63", "117"], ["67", "117"], ["63", "117"], ["63", "117"], ["54", "117"], ["102", "117"], ["19", "20"], ["19", "22"], ["29", "27"], ["34", "32"], ["39", "37"], ["44", "42"], ["78", "76"], ["78", "76"], ["78", "76"], ["78", "76"], ["22", "25"], ["19", "25"], ["19", "48"], ["19", "85"], ["70", "110"], ["100", "110"], ["19", "110"], ["25", "29"], ["19", "29"], ["29", "34"], ["19", "34"], ["32", "39"], ["19", "39"], ["39", "44"], ["19", "44"], ["48", "51"], ["54", "51"], ["19", "51"], ["44", "51"], ["51", "54"], ["19", "54"], ["61", "57"], ["67", "63"], ["19", "78"], ["27", "78"], ["37", "78"], ["57", "78"], ["42", "78"], ["63", "78"], ["85", "88"], ["91", "88"], ["19", "88"], ["78", "88"], ["105", "91"], ["19", "91"], ["97", "95"], ["97", "95"], ["102", "100"], ["102", "100"], ["102", "100"], ["34", "61"], ["67", "61"], ["19", "61"], ["61", "67"], ["19", "67"], ["78", "97"], ["105", "97"], ["19", "97"], ["76", "97"], ["19", "102"], ["70", "102"], ["100", "102"], ["105", "102"], ["105", "102"], ["105", "102"], ["105", "102"], ["97", "105"], ["19", "105"], ["95", "105"], ["51", "105"], ["88", "105"], ["51", "58"], ["51", "61"], ["51", "64"], ["51", "51"], ["51", "57"], ["51", "67"], ["51", "63"], ["51", "54"], ["88", "105"], ["88", "100"], ["88", "102"], ["88", "88"], ["88", "95"], ["88", "97"], ["88", "91"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new MyScanner())<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new MyScanner())<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new MyScanner())<SUB>2</SUB>>", "27": "<(&lt;operator&gt;.assignment,int N = nextInt())<SUB>4</SUB>>", "29": "<(nextInt,nextInt())<SUB>4</SUB>>", "31": "<(LOCAL,int M: int)<SUB>5</SUB>>", "33": "<(IDENTIFIER,M,int M = nextInt())<SUB>5</SUB>>", "35": "<(IDENTIFIER,sc,nextInt())<SUB>5</SUB>>", "37": "<(&lt;operator&gt;.assignment,int[] edgeFrom = new int[M])<SUB>7</SUB>>", "39": "<(&lt;operator&gt;.alloc,new int[M])>", "41": "<(LOCAL,int[] edgeTo: int[])<SUB>8</SUB>>", "43": "<(IDENTIFIER,edgeTo,int[] edgeTo = new int[M])<SUB>8</SUB>>", "45": "<(IDENTIFIER,M,new int[M])<SUB>8</SUB>>", "47": "<(LOCAL,int i: int)<SUB>9</SUB>>", "49": "<(IDENTIFIER,i,int i = 0)<SUB>9</SUB>>", "51": "<(&lt;operator&gt;.lessThan,i &lt; M)<SUB>9</SUB>>", "53": "<(IDENTIFIER,M,i &lt; M)<SUB>9</SUB>>", "55": "<(IDENTIFIER,i,i++)<SUB>9</SUB>>", "57": "<(&lt;operator&gt;.assignment,edgeFrom[i] = nextInt())<SUB>10</SUB>>", "59": "<(IDENTIFIER,edgeFrom,edgeFrom[i] = nextInt())<SUB>10</SUB>>", "61": "<(nextInt,nextInt())<SUB>10</SUB>>", "63": "<(&lt;operator&gt;.assignment,edgeTo[i] = nextInt())<SUB>11</SUB>>", "65": "<(IDENTIFIER,edgeTo,edgeTo[i] = nextInt())<SUB>11</SUB>>", "67": "<(nextInt,nextInt())<SUB>11</SUB>>", "69": "<(LOCAL,int best: int)<SUB>14</SUB>>", "71": "<(IDENTIFIER,best,int best = Integer.MAX_VALUE)<SUB>14</SUB>>", "73": "<(IDENTIFIER,Integer,int best = Integer.MAX_VALUE)<SUB>14</SUB>>", "75": "<(LOCAL,boolean[][] adjMat: boolean[][])<SUB>15</SUB>>", "77": "<(IDENTIFIER,adjMat,boolean[][] adjMat = makeAdjMat(N, edgeFrom, edgeTo))<SUB>15</SUB>>", "79": "<(IDENTIFIER,this,makeAdjMat(N, edgeFrom, edgeTo))<SUB>15</SUB>>", "81": "<(IDENTIFIER,edgeFrom,makeAdjMat(N, edgeFrom, edgeTo))<SUB>15</SUB>>", "83": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; N); i++),for (int i = 0; Some(i &lt; N); i++))<SUB>16</SUB>>", "85": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>16</SUB>>", "87": "<(LITERAL,0,int i = 0)<SUB>16</SUB>>", "89": "<(IDENTIFIER,i,i &lt; N)<SUB>16</SUB>>", "91": "<(&lt;operator&gt;.postIncrement,i++)<SUB>16</SUB>>", "93": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>16</SUB>>", "95": "<(&lt;operator&gt;.assignment,boolean[][] mat = copyOfArray2d(adjMat))<SUB>17</SUB>>", "97": "<(copyOfArray2d,copyOfArray2d(adjMat))<SUB>17</SUB>>", "99": "<(IDENTIFIER,adjMat,copyOfArray2d(adjMat))<SUB>17</SUB>>", "101": "<(IDENTIFIER,best,best = min(best, count(mat, M, i)))<SUB>18</SUB>>", "103": "<(IDENTIFIER,Math,min(best, count(mat, M, i)))<SUB>18</SUB>>", "105": "<(count,count(mat, M, i))<SUB>18</SUB>>", "107": "<(IDENTIFIER,mat,count(mat, M, i))<SUB>18</SUB>>", "109": "<(IDENTIFIER,i,count(mat, M, i))<SUB>18</SUB>>", "111": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>21</SUB>>", "113": "<(FIELD_IDENTIFIER,out,out)<SUB>21</SUB>>", "115": "<(MODIFIER,PUBLIC)>", "117": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}