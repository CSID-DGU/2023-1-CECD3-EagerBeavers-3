{"edges": [["21", "23"], ["21", "133"], ["21", "134"], ["21", "135"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "38"], ["23", "39"], ["23", "40"], ["23", "41"], ["23", "6"], ["23", "48"], ["23", "51"], ["23", "52"], ["23", "128"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "32"], ["28", "37"], ["29", "30"], ["29", "31"], ["32", "33"], ["32", "34"], ["34", "35"], ["34", "36"], ["41", "42"], ["41", "43"], ["43", "44"], ["43", "45"], ["45", "46"], ["46", "47"], ["48", "49"], ["48", "50"], ["51", "5"], ["52", "53"], ["52", "57"], ["53", "54"], ["53", "56"], ["54", "55"], ["57", "58"], ["57", "65"], ["57", "66"], ["57", "69"], ["57", "70"], ["57", "79"], ["57", "96"], ["57", "105"], ["57", "122"], ["58", "59"], ["58", "60"], ["60", "61"], ["60", "62"], ["62", "63"], ["63", "64"], ["66", "67"], ["66", "68"], ["70", "71"], ["70", "72"], ["72", "73"], ["72", "74"], ["74", "75"], ["74", "76"], ["76", "77"], ["76", "78"], ["79", "80"], ["79", "93"], ["80", "81"], ["80", "88"], ["81", "82"], ["81", "85"], ["82", "83"], ["82", "84"], ["85", "86"], ["85", "87"], ["88", "89"], ["88", "92"], ["89", "90"], ["89", "91"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["98", "99"], ["98", "100"], ["100", "101"], ["100", "102"], ["102", "103"], ["102", "104"], ["105", "106"], ["105", "119"], ["106", "107"], ["106", "114"], ["107", "108"], ["107", "111"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "113"], ["114", "115"], ["114", "118"], ["115", "116"], ["115", "117"], ["119", "120"], ["119", "121"], ["122", "123"], ["122", "124"], ["124", "125"], ["124", "126"], ["124", "127"], ["128", "129"], ["128", "132"], ["129", "130"], ["129", "131"], ["24", "31"], ["27", "46"], ["41", "50"], ["48", "51"], ["51", "54"], ["128", "135"], ["26", "24"], ["43", "41"], ["50", "48"], ["53", "63"], ["53", "131"], ["129", "128"], ["29", "36"], ["32", "27"], ["45", "43"], ["54", "53"], ["58", "66"], ["66", "73"], ["70", "82"], ["96", "108"], ["122", "54"], ["131", "129"], ["31", "29"], ["34", "32"], ["46", "45"], ["60", "58"], ["72", "70"], ["80", "93"], ["80", "99"], ["93", "99"], ["98", "96"], ["106", "119"], ["106", "124"], ["119", "124"], ["124", "122"], ["36", "34"], ["62", "60"], ["73", "76"], ["74", "72"], ["81", "80"], ["81", "89"], ["88", "80"], ["99", "102"], ["100", "98"], ["107", "106"], ["107", "115"], ["114", "106"], ["63", "62"], ["76", "74"], ["82", "85"], ["85", "81"], ["89", "88"], ["102", "100"], ["108", "111"], ["111", "107"], ["115", "114"], ["21", "26"], ["22", "135"], ["24", "135"], ["29", "135"], ["32", "135"], ["32", "135"], ["32", "135"], ["27", "135"], ["43", "135"], ["46", "135"], ["45", "135"], ["43", "135"], ["41", "135"], ["41", "135"], ["48", "135"], ["51", "135"], ["54", "135"], ["53", "135"], ["53", "135"], ["128", "135"], ["128", "135"], ["128", "135"], ["60", "135"], ["63", "135"], ["62", "135"], ["60", "135"], ["58", "135"], ["58", "135"], ["66", "135"], ["72", "135"], ["70", "135"], ["70", "135"], ["81", "135"], ["80", "135"], ["88", "135"], ["80", "135"], ["80", "135"], ["93", "135"], ["100", "135"], ["98", "135"], ["96", "135"], ["96", "135"], ["108", "135"], ["107", "135"], ["111", "135"], ["107", "135"], ["106", "135"], ["115", "135"], ["114", "135"], ["106", "135"], ["106", "135"], ["119", "135"], ["124", "135"], ["122", "135"], ["122", "135"], ["21", "22"], ["21", "24"], ["43", "41"], ["43", "41"], ["21", "48"], ["24", "27"], ["21", "27"], ["29", "27"], ["32", "27"], ["48", "51"], ["21", "51"], ["51", "128"], ["122", "128"], ["21", "128"], ["21", "29"], ["21", "37"], ["21", "43"], ["45", "43"], ["54", "53"], ["21", "53"], ["60", "58"], ["60", "58"], ["21", "66"], ["21", "70"], ["74", "70"], ["74", "70"], ["21", "96"], ["100", "96"], ["100", "96"], ["29", "32"], ["21", "32"], ["46", "45"], ["41", "54"], ["21", "54"], ["21", "93"], ["21", "119"], ["51", "122"], ["21", "122"], ["27", "46"], ["21", "46"], ["43", "60"], ["21", "60"], ["62", "60"], ["21", "72"], ["74", "72"], ["74", "72"], ["81", "80"], ["81", "80"], ["88", "80"], ["88", "80"], ["21", "98"], ["100", "98"], ["100", "98"], ["107", "106"], ["107", "106"], ["114", "106"], ["114", "106"], ["21", "124"], ["63", "62"], ["100", "74"], ["21", "74"], ["76", "74"], ["76", "74"], ["82", "81"], ["85", "81"], ["85", "81"], ["89", "88"], ["89", "88"], ["21", "88"], ["74", "100"], ["21", "100"], ["102", "100"], ["102", "100"], ["108", "107"], ["111", "107"], ["111", "107"], ["115", "114"], ["115", "114"], ["21", "114"], ["46", "63"], ["21", "63"], ["58", "76"], ["21", "76"], ["70", "82"], ["21", "82"], ["76", "85"], ["21", "85"], ["85", "89"], ["21", "89"], ["85", "102"], ["89", "102"], ["21", "102"], ["96", "108"], ["21", "108"], ["102", "111"], ["21", "111"], ["111", "115"], ["21", "115"], ["53", "107"], ["53", "60"], ["53", "73"], ["53", "96"], ["53", "66"], ["53", "98"], ["53", "122"], ["53", "99"], ["53", "81"], ["53", "102"], ["53", "85"], ["53", "72"], ["53", "74"], ["53", "106"], ["53", "76"], ["53", "82"], ["53", "54"], ["53", "80"], ["53", "58"], ["53", "100"], ["53", "53"], ["53", "70"], ["53", "63"], ["53", "124"], ["53", "108"], ["53", "111"], ["53", "62"], ["80", "93"], ["106", "119"], ["81", "89"], ["81", "88"], ["107", "115"], ["107", "114"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY br = new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "26": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "3": "<(IDENTIFIER,br,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "29": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "31": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>3</SUB>>", "33": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "35": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>3</SUB>>", "37": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "39": "<(LOCAL,int N: int)<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.assignment,int T = parseInt(br.readLine().trim()))<SUB>7</SUB>>", "43": "<(parseInt,parseInt(br.readLine().trim()))<SUB>7</SUB>>", "45": "<(trim,trim())<SUB>7</SUB>>", "47": "<(IDENTIFIER,br,readLine())<SUB>7</SUB>>", "48": "<(&lt;operator&gt;.assignment,StringBuilder sb = new StringBuilder())<SUB>8</SUB>>", "50": "<(&lt;operator&gt;.alloc,new StringBuilder())<SUB>8</SUB>>", "5": "<(IDENTIFIER,sb,new StringBuilder())<SUB>8</SUB>>", "53": "<(&lt;operator&gt;.greaterThan,T-- &gt; 0)<SUB>10</SUB>>", "55": "<(IDENTIFIER,T,T--)<SUB>10</SUB>>", "57": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>11</SUB>>", "59": "<(IDENTIFIER,N,N = parseInt(br.readLine().trim()))<SUB>12</SUB>>", "61": "<(IDENTIFIER,Integer,parseInt(br.readLine().trim()))<SUB>12</SUB>>", "63": "<(readLine,readLine())<SUB>12</SUB>>", "65": "<(LOCAL,boolean flag: boolean)<SUB>14</SUB>>", "67": "<(IDENTIFIER,flag,boolean flag = false)<SUB>14</SUB>>", "69": "<(LOCAL,int sqrt: int)<SUB>15</SUB>>", "71": "<(IDENTIFIER,sqrt,int sqrt = (int) Math.sqrt(N / 2))<SUB>15</SUB>>", "73": "<(TYPE_REF,int,int)<SUB>15</SUB>>", "75": "<(IDENTIFIER,Math,Math.sqrt(N / 2))<SUB>15</SUB>>", "77": "<(IDENTIFIER,N,N / 2)<SUB>15</SUB>>", "79": "<(CONTROL_STRUCTURE,if (sqrt * sqrt == N / 2 &amp;&amp; N % 2 == 0),if (sqrt * sqrt == N / 2 &amp;&amp; N % 2 == 0))<SUB>16</SUB>>", "81": "<(&lt;operator&gt;.equals,sqrt * sqrt == N / 2)<SUB>16</SUB>>", "83": "<(IDENTIFIER,sqrt,sqrt * sqrt)<SUB>16</SUB>>", "85": "<(&lt;operator&gt;.division,N / 2)<SUB>16</SUB>>", "87": "<(LITERAL,2,N / 2)<SUB>16</SUB>>", "89": "<(&lt;operator&gt;.modulo,N % 2)<SUB>16</SUB>>", "91": "<(LITERAL,2,N % 2)<SUB>16</SUB>>", "93": "<(&lt;operator&gt;.assignment,flag = true)<SUB>16</SUB>>", "95": "<(LITERAL,true,flag = true)<SUB>16</SUB>>", "97": "<(IDENTIFIER,sqrt,sqrt = (int) Math.sqrt(N / 4))<SUB>18</SUB>>", "99": "<(TYPE_REF,int,int)<SUB>18</SUB>>", "101": "<(IDENTIFIER,Math,Math.sqrt(N / 4))<SUB>18</SUB>>", "103": "<(IDENTIFIER,N,N / 4)<SUB>18</SUB>>", "105": "<(CONTROL_STRUCTURE,if (sqrt * sqrt == N / 4 &amp;&amp; N % 4 == 0),if (sqrt * sqrt == N / 4 &amp;&amp; N % 4 == 0))<SUB>19</SUB>>", "107": "<(&lt;operator&gt;.equals,sqrt * sqrt == N / 4)<SUB>19</SUB>>", "109": "<(IDENTIFIER,sqrt,sqrt * sqrt)<SUB>19</SUB>>", "111": "<(&lt;operator&gt;.division,N / 4)<SUB>19</SUB>>", "113": "<(LITERAL,4,N / 4)<SUB>19</SUB>>", "115": "<(&lt;operator&gt;.modulo,N % 4)<SUB>19</SUB>>", "117": "<(LITERAL,4,N % 4)<SUB>19</SUB>>", "119": "<(&lt;operator&gt;.assignment,flag = true)<SUB>19</SUB>>", "121": "<(LITERAL,true,flag = true)<SUB>19</SUB>>", "123": "<(IDENTIFIER,sb,sb.append(flag ? &quot;YES\\n&quot; : &quot;NO\\n&quot;))<SUB>21</SUB>>", "125": "<(IDENTIFIER,flag,flag ? &quot;YES\\n&quot; : &quot;NO\\n&quot;)<SUB>21</SUB>>", "127": "<(LITERAL,&quot;NO\\n&quot;,flag ? &quot;YES\\n&quot; : &quot;NO\\n&quot;)<SUB>21</SUB>>", "129": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>23</SUB>>", "131": "<(FIELD_IDENTIFIER,out,out)<SUB>23</SUB>>", "133": "<(MODIFIER,PUBLIC)>", "135": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}