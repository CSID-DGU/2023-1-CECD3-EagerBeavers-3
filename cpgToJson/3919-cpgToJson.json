{"edges": [["28", "30"], ["28", "699"], ["28", "700"], ["28", "701"], ["30", "4"], ["30", "31"], ["30", "34"], ["30", "6"], ["30", "45"], ["30", "48"], ["30", "51"], ["30", "52"], ["30", "58"], ["30", "59"], ["30", "63"], ["30", "64"], ["30", "68"], ["30", "137"], ["30", "138"], ["30", "141"], ["30", "163"], ["30", "178"], ["30", "179"], ["30", "9"], ["30", "184"], ["30", "187"], ["30", "188"], ["30", "11"], ["30", "220"], ["30", "223"], ["30", "224"], ["30", "270"], ["30", "271"], ["30", "277"], ["30", "293"], ["30", "294"], ["30", "300"], ["30", "425"], ["30", "493"], ["31", "32"], ["31", "33"], ["34", "3"], ["34", "35"], ["35", "36"], ["35", "39"], ["35", "44"], ["36", "37"], ["36", "38"], ["39", "40"], ["39", "41"], ["41", "42"], ["41", "43"], ["45", "46"], ["45", "47"], ["48", "5"], ["48", "49"], ["49", "50"], ["52", "53"], ["52", "54"], ["54", "55"], ["54", "56"], ["56", "57"], ["59", "60"], ["59", "61"], ["61", "62"], ["64", "65"], ["64", "66"], ["66", "67"], ["68", "69"], ["68", "70"], ["68", "73"], ["68", "76"], ["68", "78"], ["70", "71"], ["70", "72"], ["73", "74"], ["73", "75"], ["76", "77"], ["78", "79"], ["78", "90"], ["78", "93"], ["78", "96"], ["78", "97"], ["78", "103"], ["78", "116"], ["78", "117"], ["78", "123"], ["79", "80"], ["79", "83"], ["80", "81"], ["80", "82"], ["83", "84"], ["83", "87"], ["83", "89"], ["84", "85"], ["84", "86"], ["87", "88"], ["90", "91"], ["90", "92"], ["93", "7"], ["93", "94"], ["94", "95"], ["97", "98"], ["97", "99"], ["99", "100"], ["99", "101"], ["101", "102"], ["103", "104"], ["103", "108"], ["104", "105"], ["104", "107"], ["105", "106"], ["108", "109"], ["108", "112"], ["109", "110"], ["109", "111"], ["112", "113"], ["112", "114"], ["114", "115"], ["117", "118"], ["117", "119"], ["119", "120"], ["120", "121"], ["120", "122"], ["123", "124"], ["123", "126"], ["124", "125"], ["126", "127"], ["126", "128"], ["126", "132"], ["128", "129"], ["128", "130"], ["130", "131"], ["132", "133"], ["132", "136"], ["133", "134"], ["133", "135"], ["138", "139"], ["138", "140"], ["141", "142"], ["141", "143"], ["141", "146"], ["141", "151"], ["141", "153"], ["143", "144"], ["143", "145"], ["146", "147"], ["146", "148"], ["148", "149"], ["148", "150"], ["151", "152"], ["153", "154"], ["153", "155"], ["153", "160"], ["155", "156"], ["155", "157"], ["157", "158"], ["157", "159"], ["160", "161"], ["160", "162"], ["163", "164"], ["163", "171"], ["164", "165"], ["164", "170"], ["165", "166"], ["165", "169"], ["166", "167"], ["166", "168"], ["171", "172"], ["171", "177"], ["172", "173"], ["172", "176"], ["173", "174"], ["173", "175"], ["179", "180"], ["179", "181"], ["181", "182"], ["181", "183"], ["184", "185"], ["184", "186"], ["187", "8"], ["188", "189"], ["188", "190"], ["188", "193"], ["188", "196"], ["188", "198"], ["188", "199"], ["188", "205"], ["190", "191"], ["190", "192"], ["193", "194"], ["193", "195"], ["196", "197"], ["199", "200"], ["199", "201"], ["201", "202"], ["202", "203"], ["202", "204"], ["205", "206"], ["205", "208"], ["206", "207"], ["208", "209"], ["208", "210"], ["208", "214"], ["210", "211"], ["210", "212"], ["212", "213"], ["214", "215"], ["214", "216"], ["214", "219"], ["216", "217"], ["216", "218"], ["220", "221"], ["220", "222"], ["223", "10"], ["224", "225"], ["224", "226"], ["224", "229"], ["224", "232"], ["224", "234"], ["224", "235"], ["224", "241"], ["226", "227"], ["226", "228"], ["229", "230"], ["229", "231"], ["232", "233"], ["235", "236"], ["235", "237"], ["237", "238"], ["238", "239"], ["238", "240"], ["241", "242"], ["241", "244"], ["242", "243"], ["244", "245"], ["244", "246"], ["244", "250"], ["244", "251"], ["244", "260"], ["246", "247"], ["246", "248"], ["248", "249"], ["251", "252"], ["251", "253"], ["253", "254"], ["253", "259"], ["254", "255"], ["254", "256"], ["256", "257"], ["256", "258"], ["260", "261"], ["260", "264"], ["261", "262"], ["261", "263"], ["264", "265"], ["264", "266"], ["264", "269"], ["266", "267"], ["266", "268"], ["271", "272"], ["271", "273"], ["273", "274"], ["274", "275"], ["274", "276"], ["277", "278"], ["277", "281"], ["278", "279"], ["278", "280"], ["281", "282"], ["281", "285"], ["281", "292"], ["282", "283"], ["282", "284"], ["285", "286"], ["285", "287"], ["285", "289"], ["285", "291"], ["287", "288"], ["289", "290"], ["294", "295"], ["294", "296"], ["296", "297"], ["297", "298"], ["297", "299"], ["300", "301"], ["300", "302"], ["300", "305"], ["300", "308"], ["300", "310"], ["302", "303"], ["302", "304"], ["305", "306"], ["305", "307"], ["308", "309"], ["310", "311"], ["310", "312"], ["310", "315"], ["310", "321"], ["310", "323"], ["312", "313"], ["312", "314"], ["315", "316"], ["315", "317"], ["317", "318"], ["318", "319"], ["318", "320"], ["321", "322"], ["323", "324"], ["323", "336"], ["323", "337"], ["323", "348"], ["323", "349"], ["323", "352"], ["323", "353"], ["323", "356"], ["323", "403"], ["323", "408"], ["324", "325"], ["324", "335"], ["325", "326"], ["326", "327"], ["326", "328"], ["328", "329"], ["328", "330"], ["330", "331"], ["330", "334"], ["331", "332"], ["331", "333"], ["337", "338"], ["337", "339"], ["339", "340"], ["339", "341"], ["341", "342"], ["341", "343"], ["343", "344"], ["343", "347"], ["344", "345"], ["344", "346"], ["349", "350"], ["349", "351"], ["353", "354"], ["353", "355"], ["356", "357"], ["356", "364"], ["357", "358"], ["357", "359"], ["359", "360"], ["359", "363"], ["360", "361"], ["360", "362"], ["364", "365"], ["364", "366"], ["364", "371"], ["364", "391"], ["364", "396"], ["366", "367"], ["366", "368"], ["368", "369"], ["368", "370"], ["371", "372"], ["371", "386"], ["372", "373"], ["372", "380"], ["373", "374"], ["373", "379"], ["374", "375"], ["374", "376"], ["376", "377"], ["376", "378"], ["380", "381"], ["381", "382"], ["381", "383"], ["383", "384"], ["383", "385"], ["386", "387"], ["386", "390"], ["387", "388"], ["387", "389"], ["391", "392"], ["391", "393"], ["393", "394"], ["393", "395"], ["396", "397"], ["396", "398"], ["398", "399"], ["398", "400"], ["400", "401"], ["400", "402"], ["403", "404"], ["403", "405"], ["405", "406"], ["405", "407"], ["408", "409"], ["408", "410"], ["410", "411"], ["410", "414"], ["411", "412"], ["411", "413"], ["414", "415"], ["414", "418"], ["414", "424"], ["415", "416"], ["415", "417"], ["418", "419"], ["418", "420"], ["418", "422"], ["418", "423"], ["420", "421"], ["425", "426"], ["425", "427"], ["425", "430"], ["425", "435"], ["425", "437"], ["425", "438"], ["427", "428"], ["427", "429"], ["430", "431"], ["430", "432"], ["432", "433"], ["432", "434"], ["435", "436"], ["438", "439"], ["438", "440"], ["438", "443"], ["438", "446"], ["438", "453"], ["440", "441"], ["440", "442"], ["443", "444"], ["443", "445"], ["446", "447"], ["446", "448"], ["448", "449"], ["448", "452"], ["449", "450"], ["449", "451"], ["453", "454"], ["453", "467"], ["454", "455"], ["454", "462"], ["455", "456"], ["455", "461"], ["456", "457"], ["456", "458"], ["458", "459"], ["458", "460"], ["462", "463"], ["462", "466"], ["463", "464"], ["463", "465"], ["467", "468"], ["467", "492"], ["468", "469"], ["468", "472"], ["469", "470"], ["469", "471"], ["472", "473"], ["472", "476"], ["472", "491"], ["473", "474"], ["473", "475"], ["476", "477"], ["476", "478"], ["476", "481"], ["476", "486"], ["478", "479"], ["478", "480"], ["481", "482"], ["481", "485"], ["482", "483"], ["482", "484"], ["486", "487"], ["486", "490"], ["487", "488"], ["487", "489"], ["493", "494"], ["493", "503"], ["493", "508"], ["494", "495"], ["494", "502"], ["495", "496"], ["495", "497"], ["497", "498"], ["497", "501"], ["498", "499"], ["498", "500"], ["503", "504"], ["503", "507"], ["504", "505"], ["504", "506"], ["508", "509"], ["509", "13"], ["509", "510"], ["509", "513"], ["509", "515"], ["509", "516"], ["509", "521"], ["509", "539"], ["509", "540"], ["509", "547"], ["509", "665"], ["509", "694"], ["510", "511"], ["510", "512"], ["513", "12"], ["513", "514"], ["516", "517"], ["516", "518"], ["518", "519"], ["518", "520"], ["521", "522"], ["521", "523"], ["521", "526"], ["521", "529"], ["521", "531"], ["523", "524"], ["523", "525"], ["526", "527"], ["526", "528"], ["529", "530"], ["531", "532"], ["531", "537"], ["532", "533"], ["532", "536"], ["533", "534"], ["533", "535"], ["537", "538"], ["540", "541"], ["540", "542"], ["542", "543"], ["542", "546"], ["543", "544"], ["543", "545"], ["547", "548"], ["547", "551"], ["548", "549"], ["548", "550"], ["551", "552"], ["551", "553"], ["551", "560"], ["551", "561"], ["551", "568"], ["551", "569"], ["551", "576"], ["551", "577"], ["551", "590"], ["551", "591"], ["551", "596"], ["551", "605"], ["551", "614"], ["551", "658"], ["553", "554"], ["553", "555"], ["555", "556"], ["555", "559"], ["556", "557"], ["556", "558"], ["561", "562"], ["561", "563"], ["563", "564"], ["563", "567"], ["564", "565"], ["564", "566"], ["569", "570"], ["569", "571"], ["571", "572"], ["571", "575"], ["572", "573"], ["572", "574"], ["577", "578"], ["577", "579"], ["579", "580"], ["579", "585"], ["580", "581"], ["580", "582"], ["582", "583"], ["582", "584"], ["585", "586"], ["585", "589"], ["586", "587"], ["586", "588"], ["591", "592"], ["591", "593"], ["593", "594"], ["593", "595"], ["596", "597"], ["596", "604"], ["597", "598"], ["597", "603"], ["598", "599"], ["598", "600"], ["600", "601"], ["600", "602"], ["605", "606"], ["605", "613"], ["606", "607"], ["606", "612"], ["607", "608"], ["607", "609"], ["609", "610"], ["609", "611"], ["614", "615"], ["614", "616"], ["616", "617"], ["616", "618"], ["616", "623"], ["616", "628"], ["616", "637"], ["616", "649"], ["618", "619"], ["618", "620"], ["620", "621"], ["620", "622"], ["623", "624"], ["623", "625"], ["625", "626"], ["625", "627"], ["628", "629"], ["628", "636"], ["629", "630"], ["629", "635"], ["630", "631"], ["630", "632"], ["632", "633"], ["632", "634"], ["637", "638"], ["637", "648"], ["638", "639"], ["638", "646"], ["639", "640"], ["639", "645"], ["640", "641"], ["640", "642"], ["642", "643"], ["642", "644"], ["646", "647"], ["649", "650"], ["649", "657"], ["650", "651"], ["650", "656"], ["651", "652"], ["651", "653"], ["653", "654"], ["653", "655"], ["658", "659"], ["658", "660"], ["660", "661"], ["660", "664"], ["661", "662"], ["661", "663"], ["665", "666"], ["665", "667"], ["665", "670"], ["665", "673"], ["665", "675"], ["667", "668"], ["667", "669"], ["670", "671"], ["670", "672"], ["673", "674"], ["675", "676"], ["675", "693"], ["676", "677"], ["676", "686"], ["677", "678"], ["677", "679"], ["679", "680"], ["679", "685"], ["680", "681"], ["680", "684"], ["681", "682"], ["681", "683"], ["686", "687"], ["686", "692"], ["687", "688"], ["687", "691"], ["688", "689"], ["688", "690"], ["694", "695"], ["694", "698"], ["695", "696"], ["695", "697"], ["31", "38"], ["34", "47"], ["45", "49"], ["48", "56"], ["52", "61"], ["59", "66"], ["64", "70"], ["138", "143"], ["179", "186"], ["184", "187"], ["187", "193"], ["220", "223"], ["223", "229"], ["271", "278"], ["277", "297"], ["294", "302"], ["33", "31"], ["47", "45"], ["49", "48"], ["54", "52"], ["61", "59"], ["66", "64"], ["70", "73"], ["73", "80"], ["73", "138"], ["76", "73"], ["143", "150"], ["146", "157"], ["146", "166"], ["151", "150"], ["164", "175"], ["164", "181"], ["181", "179"], ["186", "184"], ["193", "196"], ["196", "202"], ["196", "222"], ["199", "196"], ["222", "220"], ["229", "232"], ["232", "238"], ["232", "274"], ["235", "232"], ["273", "271"], ["278", "284"], ["296", "294"], ["302", "305"], ["305", "312"], ["305", "427"], ["308", "305"], ["427", "432"], ["430", "435"], ["430", "498"], ["435", "432"], ["494", "506"], ["494", "512"], ["503", "701"], ["36", "43"], ["39", "34"], ["56", "54"], ["79", "92"], ["90", "94"], ["93", "101"], ["97", "105"], ["117", "124"], ["148", "146"], ["155", "160"], ["160", "151"], ["165", "164"], ["172", "177"], ["177", "701"], ["201", "199"], ["237", "235"], ["274", "273"], ["282", "287"], ["285", "277"], ["297", "296"], ["312", "318"], ["315", "329"], ["315", "308"], ["321", "318"], ["432", "430"], ["495", "494"], ["504", "503"], ["38", "36"], ["41", "39"], ["80", "86"], ["92", "90"], ["94", "93"], ["99", "97"], ["104", "109"], ["104", "120"], ["108", "105"], ["119", "117"], ["124", "130"], ["124", "76"], ["150", "148"], ["157", "155"], ["166", "165"], ["173", "172"], ["202", "201"], ["238", "237"], ["284", "282"], ["287", "289"], ["289", "285"], ["317", "315"], ["337", "349"], ["349", "353"], ["353", "360"], ["403", "409"], ["497", "495"], ["506", "504"], ["510", "513"], ["513", "518"], ["516", "523"], ["540", "548"], ["694", "701"], ["43", "41"], ["84", "87"], ["87", "79"], ["101", "99"], ["105", "104"], ["109", "114"], ["112", "108"], ["120", "119"], ["128", "133"], ["132", "124"], ["175", "173"], ["318", "317"], ["325", "321"], ["325", "342"], ["339", "337"], ["357", "368"], ["357", "405"], ["405", "403"], ["409", "411"], ["409", "321"], ["410", "321"], ["498", "497"], ["512", "510"], ["518", "516"], ["523", "526"], ["526", "533"], ["526", "543"], ["529", "526"], ["531", "529"], ["542", "540"], ["548", "556"], ["548", "667"], ["667", "670"], ["670", "681"], ["670", "697"], ["673", "670"], ["675", "673"], ["695", "694"], ["86", "84"], ["114", "112"], ["130", "128"], ["133", "132"], ["326", "325"], ["341", "339"], ["359", "357"], ["366", "376"], ["391", "401"], ["396", "360"], ["411", "417"], ["532", "537"], ["537", "531"], ["543", "542"], ["553", "564"], ["561", "572"], ["569", "582"], ["577", "593"], ["591", "600"], ["596", "609"], ["605", "620"], ["605", "661"], ["658", "548"], ["676", "675"], ["697", "695"], ["328", "326"], ["342", "344"], ["343", "341"], ["360", "359"], ["368", "366"], ["372", "387"], ["372", "393"], ["393", "391"], ["398", "396"], ["415", "420"], ["418", "410"], ["533", "532"], ["555", "553"], ["563", "561"], ["571", "569"], ["579", "577"], ["593", "591"], ["597", "596"], ["606", "605"], ["660", "658"], ["677", "688"], ["686", "676"], ["329", "331"], ["330", "328"], ["344", "343"], ["373", "372"], ["373", "384"], ["380", "372"], ["387", "405"], ["400", "398"], ["417", "415"], ["420", "418"], ["556", "559"], ["559", "555"], ["564", "567"], ["567", "563"], ["572", "575"], ["575", "571"], ["580", "586"], ["585", "579"], ["598", "597"], ["607", "606"], ["618", "625"], ["623", "632"], ["628", "642"], ["649", "620"], ["649", "661"], ["661", "664"], ["664", "660"], ["679", "677"], ["687", "686"], ["331", "330"], ["374", "373"], ["381", "380"], ["401", "400"], ["582", "580"], ["586", "585"], ["600", "598"], ["609", "607"], ["620", "618"], ["625", "623"], ["629", "628"], ["638", "661"], ["638", "653"], ["650", "649"], ["680", "679"], ["688", "687"], ["376", "374"], ["383", "381"], ["630", "629"], ["639", "646"], ["646", "638"], ["651", "650"], ["681", "680"], ["384", "383"], ["632", "630"], ["640", "639"], ["653", "651"], ["642", "640"], ["28", "33"], ["177", "701"], ["29", "701"], ["31", "701"], ["36", "701"], ["39", "701"], ["39", "701"], ["39", "701"], ["34", "701"], ["45", "701"], ["49", "701"], ["48", "701"], ["48", "701"], ["54", "701"], ["56", "701"], ["54", "701"], ["52", "701"], ["52", "701"], ["59", "701"], ["59", "701"], ["59", "701"], ["64", "701"], ["64", "701"], ["64", "701"], ["70", "701"], ["73", "701"], ["73", "701"], ["138", "701"], ["143", "701"], ["146", "701"], ["146", "701"], ["146", "701"], ["166", "701"], ["165", "701"], ["165", "701"], ["164", "701"], ["164", "701"], ["172", "701"], ["155", "701"], ["160", "701"], ["160", "701"], ["151", "701"], ["87", "701"], ["87", "701"], ["79", "701"], ["90", "701"], ["94", "701"], ["93", "701"], ["93", "701"], ["99", "701"], ["101", "701"], ["99", "701"], ["97", "701"], ["97", "701"], ["105", "701"], ["104", "701"], ["104", "701"], ["119", "701"], ["117", "701"], ["124", "701"], ["124", "701"], ["76", "701"], ["132", "701"], ["132", "701"], ["132", "701"], ["112", "701"], ["114", "701"], ["112", "701"], ["108", "701"], ["108", "701"], ["166", "701"], ["28", "29"], ["28", "31"], ["28", "45"], ["54", "52"], ["54", "52"], ["61", "59"], ["66", "64"], ["28", "138"], ["181", "179"], ["181", "179"], ["28", "184"], ["28", "220"], ["273", "271"], ["282", "277"], ["285", "277"], ["28", "277"], ["296", "294"], ["31", "34"], ["28", "34"], ["36", "34"], ["39", "34"], ["45", "48"], ["28", "48"], ["49", "48"], ["28", "70"], ["28", "143"], ["184", "187"], ["28", "187"], ["201", "199"], ["220", "223"], ["28", "223"], ["237", "235"], ["28", "302"], ["28", "427"], ["28", "36"], ["28", "44"], ["34", "49"], ["28", "49"], ["28", "54"], ["56", "54"], ["52", "61"], ["28", "61"], ["61", "66"], ["28", "66"], ["70", "73"], ["76", "73"], ["28", "73"], ["66", "73"], ["73", "76"], ["28", "76"], ["84", "79"], ["87", "79"], ["28", "79"], ["28", "90"], ["99", "97"], ["99", "97"], ["119", "117"], ["143", "146"], ["151", "146"], ["28", "146"], ["59", "146"], ["146", "151"], ["28", "151"], ["36", "155"], ["59", "155"], ["124", "155"], ["155", "160"], ["28", "160"], ["165", "164"], ["165", "164"], ["28", "164"], ["28", "177"], ["166", "181"], ["28", "181"], ["165", "181"], ["28", "193"], ["181", "193"], ["193", "196"], ["28", "196"], ["196", "229"], ["28", "229"], ["193", "229"], ["229", "232"], ["28", "232"], ["274", "273"], ["274", "273"], ["28", "282"], ["28", "292"], ["297", "296"], ["297", "296"], ["302", "305"], ["308", "305"], ["28", "305"], ["297", "305"], ["305", "308"], ["405", "308"], ["418", "308"], ["28", "308"], ["28", "312"], ["427", "430"], ["435", "430"], ["28", "430"], ["432", "430"], ["432", "430"], ["430", "435"], ["28", "435"], ["271", "494"], ["28", "494"], ["28", "503"], ["36", "39"], ["28", "39"], ["48", "56"], ["28", "56"], ["90", "93"], ["28", "93"], ["94", "93"], ["138", "160"], ["166", "165"], ["166", "165"], ["73", "165"], ["28", "165"], ["28", "172"], ["64", "201"], ["64", "237"], ["201", "237"], ["28", "274"], ["229", "274"], ["282", "285"], ["28", "285"], ["287", "285"], ["289", "285"], ["28", "297"], ["274", "297"], ["312", "315"], ["321", "315"], ["28", "315"], ["317", "315"], ["330", "321"], ["359", "321"], ["418", "321"], ["28", "321"], ["339", "337"], ["339", "337"], ["28", "349"], ["28", "353"], ["405", "403"], ["405", "403"], ["28", "432"], ["305", "432"], ["28", "510"], ["518", "516"], ["518", "516"], ["542", "540"], ["542", "540"], ["28", "84"], ["28", "89"], ["49", "94"], ["28", "94"], ["54", "99"], ["112", "99"], ["28", "99"], ["101", "99"], ["105", "104"], ["28", "104"], ["64", "108"], ["79", "108"], ["112", "108"], ["112", "108"], ["64", "119"], ["79", "119"], ["108", "119"], ["117", "124"], ["130", "124"], ["28", "124"], ["130", "128"], ["128", "132"], ["28", "132"], ["28", "166"], ["138", "166"], ["160", "166"], ["28", "287"], ["28", "289"], ["64", "317"], ["330", "317"], ["359", "317"], ["349", "403"], ["374", "403"], ["391", "403"], ["28", "403"], ["28", "409"], ["415", "410"], ["418", "410"], ["28", "410"], ["498", "497"], ["498", "497"], ["28", "497"], ["510", "513"], ["28", "513"], ["28", "523"], ["537", "531"], ["28", "667"], ["513", "694"], ["677", "694"], ["28", "694"], ["84", "87"], ["28", "87"], ["93", "101"], ["28", "101"], ["97", "105"], ["28", "105"], ["99", "112"], ["28", "112"], ["114", "112"], ["59", "132"], ["326", "325"], ["326", "325"], ["326", "339"], ["28", "339"], ["343", "339"], ["343", "339"], ["337", "357"], ["396", "357"], ["28", "357"], ["359", "357"], ["359", "357"], ["368", "366"], ["368", "366"], ["393", "391"], ["393", "391"], ["398", "396"], ["398", "396"], ["28", "405"], ["305", "405"], ["418", "405"], ["28", "498"], ["432", "498"], ["498", "518"], ["28", "518"], ["523", "526"], ["529", "526"], ["28", "526"], ["518", "526"], ["526", "529"], ["28", "529"], ["543", "542"], ["543", "542"], ["28", "542"], ["540", "548"], ["658", "548"], ["28", "548"], ["580", "577"], ["580", "577"], ["585", "577"], ["585", "577"], ["593", "591"], ["593", "591"], ["600", "596"], ["28", "596"], ["569", "605"], ["28", "605"], ["667", "670"], ["673", "670"], ["28", "670"], ["543", "670"], ["670", "673"], ["28", "673"], ["676", "675"], ["676", "675"], ["28", "675"], ["101", "114"], ["28", "114"], ["124", "130"], ["28", "130"], ["223", "326"], ["339", "326"], ["381", "326"], ["398", "326"], ["28", "326"], ["330", "326"], ["330", "326"], ["28", "341"], ["343", "341"], ["343", "341"], ["64", "359"], ["343", "359"], ["343", "359"], ["28", "359"], ["374", "391"], ["28", "391"], ["28", "415"], ["28", "424"], ["28", "537"], ["28", "543"], ["526", "543"], ["28", "615"], ["677", "676"], ["677", "676"], ["28", "676"], ["28", "328"], ["330", "328"], ["330", "328"], ["64", "343"], ["330", "343"], ["330", "343"], ["28", "343"], ["187", "368"], ["28", "368"], ["357", "368"], ["373", "372"], ["373", "372"], ["380", "372"], ["28", "387"], ["28", "393"], ["376", "393"], ["339", "398"], ["381", "398"], ["28", "398"], ["368", "398"], ["415", "418"], ["28", "418"], ["420", "418"], ["359", "418"], ["405", "418"], ["580", "579"], ["580", "579"], ["585", "579"], ["585", "579"], ["187", "593"], ["609", "593"], ["642", "593"], ["653", "593"], ["368", "593"], ["28", "593"], ["577", "593"], ["620", "618"], ["620", "618"], ["625", "623"], ["625", "623"], ["632", "628"], ["28", "628"], ["618", "649"], ["28", "649"], ["513", "677"], ["28", "677"], ["28", "686"], ["64", "330"], ["317", "330"], ["315", "330"], ["28", "330"], ["374", "373"], ["374", "373"], ["28", "373"], ["381", "380"], ["381", "380"], ["28", "400"], ["368", "400"], ["28", "420"], ["179", "580"], ["28", "580"], ["59", "580"], ["64", "585"], ["317", "585"], ["561", "585"], ["28", "585"], ["28", "679"], ["349", "374"], ["391", "374"], ["28", "374"], ["376", "374"], ["376", "374"], ["339", "381"], ["398", "381"], ["28", "381"], ["368", "381"], ["593", "600"], ["28", "600"], ["593", "600"], ["600", "609"], ["28", "609"], ["600", "609"], ["609", "620"], ["653", "620"], ["28", "620"], ["609", "620"], ["653", "620"], ["223", "625"], ["326", "625"], ["339", "625"], ["381", "625"], ["398", "625"], ["28", "625"], ["620", "625"], ["605", "638"], ["649", "638"], ["646", "638"], ["28", "376"], ["366", "376"], ["28", "383"], ["368", "383"], ["28", "646"], ["620", "632"], ["28", "632"], ["623", "632"], ["642", "653"], ["28", "653"], ["642", "653"], ["632", "642"], ["28", "642"], ["632", "642"], ["73", "120"], ["73", "84"], ["73", "104"], ["73", "76"], ["73", "80"], ["73", "117"], ["73", "73"], ["73", "87"], ["73", "105"], ["73", "93"], ["73", "86"], ["73", "94"], ["73", "119"], ["73", "92"], ["73", "97"], ["73", "101"], ["73", "90"], ["73", "79"], ["73", "99"], ["73", "124"], ["146", "148"], ["146", "160"], ["146", "151"], ["146", "146"], ["146", "150"], ["146", "155"], ["146", "157"], ["164", "430"], ["164", "494"], ["164", "186"], ["164", "296"], ["164", "498"], ["164", "305"], ["164", "297"], ["164", "172"], ["164", "282"], ["164", "179"], ["164", "273"], ["164", "232"], ["164", "223"], ["164", "187"], ["164", "289"], ["164", "427"], ["164", "287"], ["164", "294"], ["164", "432"], ["164", "271"], ["164", "196"], ["164", "181"], ["164", "302"], ["164", "184"], ["164", "274"], ["164", "278"], ["164", "177"], ["164", "229"], ["164", "222"], ["164", "284"], ["164", "497"], ["164", "285"], ["164", "173"], ["164", "495"], ["164", "277"], ["164", "193"], ["164", "220"], ["164", "175"], ["196", "201"], ["196", "196"], ["196", "202"], ["196", "199"], ["232", "237"], ["232", "232"], ["232", "238"], ["232", "235"], ["305", "308"], ["305", "315"], ["305", "305"], ["305", "318"], ["305", "317"], ["305", "312"], ["430", "430"], ["430", "432"], ["430", "435"], ["494", "512"], ["494", "543"], ["494", "516"], ["494", "548"], ["494", "695"], ["494", "513"], ["494", "506"], ["494", "694"], ["494", "670"], ["494", "503"], ["494", "510"], ["494", "518"], ["494", "667"], ["494", "697"], ["494", "523"], ["494", "504"], ["494", "540"], ["494", "526"], ["494", "542"], ["315", "326"], ["315", "315"], ["315", "329"], ["315", "325"], ["315", "318"], ["315", "317"], ["315", "328"], ["315", "321"], ["315", "330"], ["315", "331"], ["104", "104"], ["104", "108"], ["104", "105"], ["104", "114"], ["104", "112"], ["104", "109"], ["124", "133"], ["124", "132"], ["124", "130"], ["124", "128"], ["124", "124"], ["325", "357"], ["325", "360"], ["325", "353"], ["325", "409"], ["325", "343"], ["325", "344"], ["325", "403"], ["325", "349"], ["325", "405"], ["325", "342"], ["325", "337"], ["325", "341"], ["325", "339"], ["325", "359"], ["357", "376"], ["357", "368"], ["357", "372"], ["357", "373"], ["357", "374"], ["357", "366"], ["409", "418"], ["409", "417"], ["409", "415"], ["409", "410"], ["409", "411"], ["409", "420"], ["526", "529"], ["526", "537"], ["526", "531"], ["526", "526"], ["526", "533"], ["526", "532"], ["548", "580"], ["548", "577"], ["548", "596"], ["548", "600"], ["548", "585"], ["548", "548"], ["548", "658"], ["548", "563"], ["548", "555"], ["548", "575"], ["548", "556"], ["548", "591"], ["548", "564"], ["548", "582"], ["548", "664"], ["548", "586"], ["548", "593"], ["548", "571"], ["548", "572"], ["548", "553"], ["548", "598"], ["548", "561"], ["548", "597"], ["548", "567"], ["548", "661"], ["548", "605"], ["548", "660"], ["548", "559"], ["548", "607"], ["548", "609"], ["548", "569"], ["548", "579"], ["548", "606"], ["548", "623"], ["548", "630"], ["548", "620"], ["548", "646"], ["548", "639"], ["548", "632"], ["548", "642"], ["548", "640"], ["548", "638"], ["548", "618"], ["548", "625"], ["548", "628"], ["548", "629"], ["670", "676"], ["670", "680"], ["670", "681"], ["670", "673"], ["670", "675"], ["670", "677"], ["670", "670"], ["670", "679"], ["670", "686"], ["670", "687"], ["670", "688"], ["372", "357"], ["372", "360"], ["372", "400"], ["372", "387"], ["372", "398"], ["372", "391"], ["372", "401"], ["372", "396"], ["372", "393"], ["372", "359"], ["373", "384"], ["373", "383"], ["373", "380"], ["373", "381"], ["638", "649"], ["638", "650"], ["638", "653"], ["638", "651"], ["638", "623"], ["638", "630"], ["638", "620"], ["638", "646"], ["638", "639"], ["638", "632"], ["638", "642"], ["638", "640"], ["638", "638"], ["638", "618"], ["638", "625"], ["638", "628"], ["638", "629"]], "features": {"28": "<(METHOD,main)<SUB>1</SUB>>", "30": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "31": "<(&lt;operator&gt;.assignment,ANY infile = new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "33": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "3": "<(IDENTIFIER,infile,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "36": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "38": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>3</SUB>>", "40": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "42": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>3</SUB>>", "44": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "45": "<(&lt;operator&gt;.assignment,ANY st = new StringTokenizer(infile.readLine()))<SUB>4</SUB>>", "47": "<(&lt;operator&gt;.alloc,new StringTokenizer(infile.readLine()))<SUB>4</SUB>>", "5": "<(IDENTIFIER,st,new StringTokenizer(infile.readLine()))<SUB>4</SUB>>", "50": "<(IDENTIFIER,infile,readLine())<SUB>4</SUB>>", "52": "<(&lt;operator&gt;.assignment,int N = parseInt(st.nextToken()))<SUB>5</SUB>>", "54": "<(parseInt,parseInt(st.nextToken()))<SUB>5</SUB>>", "56": "<(nextToken,nextToken())<SUB>5</SUB>>", "58": "<(LOCAL,long[] sums: long[])<SUB>6</SUB>>", "60": "<(IDENTIFIER,sums,long[] sums = new long[N])<SUB>6</SUB>>", "62": "<(IDENTIFIER,N,new long[N])<SUB>6</SUB>>", "64": "<(&lt;operator&gt;.assignment,ANY boxes = new ArrayList[N])<SUB>7</SUB>>", "66": "<(&lt;operator&gt;.alloc,new ArrayList[N])>", "68": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; N); i++),for (int i = 0; Some(i &lt; N); i++))<SUB>8</SUB>>", "70": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>8</SUB>>", "72": "<(LITERAL,0,int i = 0)<SUB>8</SUB>>", "74": "<(IDENTIFIER,i,i &lt; N)<SUB>8</SUB>>", "76": "<(&lt;operator&gt;.postIncrement,i++)<SUB>8</SUB>>", "78": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>>", "80": "<(&lt;operator&gt;.indexAccess,boxes[i])<SUB>10</SUB>>", "82": "<(IDENTIFIER,i,boxes[i] = new ArrayList&lt;Integer&gt;())<SUB>10</SUB>>", "84": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "86": "<(&lt;operator&gt;.alloc,new ArrayList&lt;Integer&gt;())<SUB>10</SUB>>", "88": "<(IDENTIFIER,$obj3,new ArrayList&lt;Integer&gt;())>", "90": "<(&lt;operator&gt;.assignment,st = new StringTokenizer(infile.readLine()))<SUB>11</SUB>>", "92": "<(&lt;operator&gt;.alloc,new StringTokenizer(infile.readLine()))<SUB>11</SUB>>", "7": "<(IDENTIFIER,st,new StringTokenizer(infile.readLine()))<SUB>11</SUB>>", "95": "<(IDENTIFIER,infile,readLine())<SUB>11</SUB>>", "97": "<(&lt;operator&gt;.assignment,int a = parseInt(st.nextToken()))<SUB>12</SUB>>", "99": "<(parseInt,parseInt(st.nextToken()))<SUB>12</SUB>>", "101": "<(nextToken,nextToken())<SUB>12</SUB>>", "103": "<(CONTROL_STRUCTURE,while (a-- &gt; 0),while (a-- &gt; 0))<SUB>13</SUB>>", "105": "<(&lt;operator&gt;.postDecrement,a--)<SUB>13</SUB>>", "107": "<(LITERAL,0,a-- &gt; 0)<SUB>13</SUB>>", "109": "<(&lt;operator&gt;.indexAccess,boxes[i])<SUB>14</SUB>>", "111": "<(IDENTIFIER,i,add(Integer.parseInt(st.nextToken())))<SUB>14</SUB>>", "113": "<(IDENTIFIER,Integer,parseInt(st.nextToken()))<SUB>14</SUB>>", "115": "<(IDENTIFIER,st,nextToken())<SUB>14</SUB>>", "117": "<(&lt;operator&gt;.assignment,)<SUB>15</SUB>>", "119": "<(iterator,&lt;empty&gt;)<SUB>15</SUB>>", "121": "<(IDENTIFIER,boxes,&lt;empty&gt;)<SUB>15</SUB>>", "123": "<(CONTROL_STRUCTURE,FOR,FOR)<SUB>15</SUB>>", "125": "<(IDENTIFIER,$iterLocal0,&lt;empty&gt;)>", "127": "<(LOCAL,x: int)<SUB>15</SUB>>", "129": "<(IDENTIFIER,x,&lt;empty&gt;)>", "131": "<(IDENTIFIER,$iterLocal0,&lt;empty&gt;)>", "133": "<(&lt;operator&gt;.indexAccess,sums[i])<SUB>16</SUB>>", "135": "<(IDENTIFIER,i,sums[i] += x)<SUB>16</SUB>>", "137": "<(LOCAL,long lmaosum: long)<SUB>18</SUB>>", "139": "<(IDENTIFIER,lmaosum,long lmaosum = 0L)<SUB>18</SUB>>", "141": "<(CONTROL_STRUCTURE,&lt;empty&gt;,&lt;empty&gt;)>", "143": "<(&lt;operator&gt;.assignment,int $idx0 = 0)<SUB>19</SUB>>", "145": "<(LITERAL,0,int $idx0 = 0)<SUB>19</SUB>>", "147": "<(IDENTIFIER,$idx0,$idx0 &lt; sums.length)>", "149": "<(IDENTIFIER,sums,$idx0 &lt; sums.length)>", "151": "<(&lt;operator&gt;.postIncrement,$idx0++)<SUB>19</SUB>>", "153": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>19</SUB>>", "155": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)<SUB>19</SUB>>", "157": "<(&lt;operator&gt;.indexAccess,&lt;empty&gt;)<SUB>19</SUB>>", "159": "<(IDENTIFIER,$idx0,&lt;empty&gt;)>", "161": "<(IDENTIFIER,lmaosum,lmaosum += x)<SUB>20</SUB>>", "163": "<(CONTROL_STRUCTURE,if (Math.abs(lmaosum) % N != 0),if (Math.abs(lmaosum) % N != 0))<SUB>21</SUB>>", "165": "<(&lt;operator&gt;.modulo,Math.abs(lmaosum) % N)<SUB>21</SUB>>", "167": "<(IDENTIFIER,Math,Math.abs(lmaosum))<SUB>21</SUB>>", "169": "<(IDENTIFIER,N,Math.abs(lmaosum) % N)<SUB>21</SUB>>", "171": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>22</SUB>>", "173": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>23</SUB>>", "175": "<(FIELD_IDENTIFIER,out,out)<SUB>23</SUB>>", "177": "<(RETURN,return;,return;)<SUB>24</SUB>>", "179": "<(&lt;operator&gt;.assignment,long target = lmaosum / N)<SUB>26</SUB>>", "181": "<(&lt;operator&gt;.division,lmaosum / N)<SUB>26</SUB>>", "183": "<(IDENTIFIER,N,lmaosum / N)<SUB>26</SUB>>", "184": "<(&lt;operator&gt;.assignment,ANY map = new HashMap&lt;Long, Integer&gt;())<SUB>28</SUB>>", "186": "<(&lt;operator&gt;.alloc,new HashMap&lt;Long, Integer&gt;())<SUB>28</SUB>>", "8": "<(IDENTIFIER,map,new HashMap&lt;Long, Integer&gt;())<SUB>28</SUB>>", "189": "<(LOCAL,int k: int)<SUB>29</SUB>>", "191": "<(IDENTIFIER,k,int k = 0)<SUB>29</SUB>>", "193": "<(&lt;operator&gt;.lessThan,k &lt; N)<SUB>29</SUB>>", "195": "<(IDENTIFIER,N,k &lt; N)<SUB>29</SUB>>", "197": "<(IDENTIFIER,k,k++)<SUB>29</SUB>>", "199": "<(&lt;operator&gt;.assignment,)<SUB>30</SUB>>", "201": "<(iterator,&lt;empty&gt;)<SUB>30</SUB>>", "203": "<(IDENTIFIER,boxes,&lt;empty&gt;)<SUB>30</SUB>>", "205": "<(CONTROL_STRUCTURE,FOR,FOR)<SUB>30</SUB>>", "207": "<(IDENTIFIER,$iterLocal1,&lt;empty&gt;)>", "209": "<(LOCAL,x: int)<SUB>30</SUB>>", "211": "<(IDENTIFIER,x,&lt;empty&gt;)>", "213": "<(IDENTIFIER,$iterLocal1,&lt;empty&gt;)>", "215": "<(IDENTIFIER,map,put((long) x, k))<SUB>31</SUB>>", "217": "<(TYPE_REF,long,long)<SUB>31</SUB>>", "219": "<(IDENTIFIER,k,put((long) x, k))<SUB>31</SUB>>", "220": "<(&lt;operator&gt;.assignment,ANY edges = new HashMap&lt;Long, Long&gt;())<SUB>32</SUB>>", "222": "<(&lt;operator&gt;.alloc,new HashMap&lt;Long, Long&gt;())<SUB>32</SUB>>", "10": "<(IDENTIFIER,edges,new HashMap&lt;Long, Long&gt;())<SUB>32</SUB>>", "225": "<(LOCAL,int k: int)<SUB>33</SUB>>", "227": "<(IDENTIFIER,k,int k = 0)<SUB>33</SUB>>", "229": "<(&lt;operator&gt;.lessThan,k &lt; N)<SUB>33</SUB>>", "231": "<(IDENTIFIER,N,k &lt; N)<SUB>33</SUB>>", "233": "<(IDENTIFIER,k,k++)<SUB>33</SUB>>", "235": "<(&lt;operator&gt;.assignment,)<SUB>34</SUB>>", "237": "<(iterator,&lt;empty&gt;)<SUB>34</SUB>>", "239": "<(IDENTIFIER,boxes,&lt;empty&gt;)<SUB>34</SUB>>", "241": "<(CONTROL_STRUCTURE,FOR,FOR)<SUB>34</SUB>>", "243": "<(IDENTIFIER,$iterLocal2,&lt;empty&gt;)>", "245": "<(LOCAL,x: int)<SUB>34</SUB>>", "247": "<(IDENTIFIER,x,&lt;empty&gt;)>", "249": "<(IDENTIFIER,$iterLocal2,&lt;empty&gt;)>", "251": "<(&lt;operator&gt;.assignment,long nextval = target - sums[k] + x)<SUB>36</SUB>>", "253": "<(&lt;operator&gt;.addition,target - sums[k] + x)<SUB>36</SUB>>", "255": "<(IDENTIFIER,target,target - sums[k])<SUB>36</SUB>>", "257": "<(IDENTIFIER,sums,target - sums[k])<SUB>36</SUB>>", "259": "<(IDENTIFIER,x,target - sums[k] + x)<SUB>36</SUB>>", "261": "<(containsKey,containsKey(nextval))<SUB>37</SUB>>", "263": "<(IDENTIFIER,nextval,containsKey(nextval))<SUB>37</SUB>>", "265": "<(IDENTIFIER,edges,put((long) x, nextval))<SUB>38</SUB>>", "267": "<(TYPE_REF,long,long)<SUB>38</SUB>>", "269": "<(IDENTIFIER,nextval,put((long) x, nextval))<SUB>38</SUB>>", "271": "<(&lt;operator&gt;.assignment,ANY dp = new Node[1 &lt;&lt; N])<SUB>40</SUB>>", "273": "<(&lt;operator&gt;.alloc,new Node[1 &lt;&lt; N])>", "275": "<(LITERAL,1,1 &lt;&lt; N)<SUB>40</SUB>>", "277": "<(&lt;operator&gt;.assignment,dp[0] = new Node(-69, -69, 0))<SUB>41</SUB>>", "279": "<(IDENTIFIER,dp,dp[0] = new Node(-69, -69, 0))<SUB>41</SUB>>", "281": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>41</SUB>>", "283": "<(IDENTIFIER,$obj7,&lt;empty&gt;)>", "285": "<(&lt;init&gt;,new Node(-69, -69, 0))<SUB>41</SUB>>", "287": "<(&lt;operator&gt;.minus,-69)<SUB>41</SUB>>", "289": "<(&lt;operator&gt;.minus,-69)<SUB>41</SUB>>", "291": "<(LITERAL,0,new Node(-69, -69, 0))<SUB>41</SUB>>", "293": "<(LOCAL,Node[] subsets: ANY)<SUB>43</SUB>>", "295": "<(IDENTIFIER,subsets,ANY subsets = new Node[1 &lt;&lt; N])<SUB>43</SUB>>", "297": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; N)<SUB>43</SUB>>", "299": "<(IDENTIFIER,N,1 &lt;&lt; N)<SUB>43</SUB>>", "301": "<(LOCAL,int b: int)<SUB>44</SUB>>", "303": "<(IDENTIFIER,b,int b = 0)<SUB>44</SUB>>", "305": "<(&lt;operator&gt;.lessThan,b &lt; N)<SUB>44</SUB>>", "307": "<(IDENTIFIER,N,b &lt; N)<SUB>44</SUB>>", "309": "<(IDENTIFIER,b,b++)<SUB>44</SUB>>", "311": "<(LOCAL,int i: int)<SUB>45</SUB>>", "313": "<(IDENTIFIER,i,int i = 0)<SUB>45</SUB>>", "315": "<(&lt;operator&gt;.lessThan,i &lt; boxes[b].size())<SUB>45</SUB>>", "317": "<(size,size())<SUB>45</SUB>>", "319": "<(IDENTIFIER,boxes,size())<SUB>45</SUB>>", "321": "<(&lt;operator&gt;.postIncrement,i++)<SUB>45</SUB>>", "323": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>46</SUB>>", "325": "<(&lt;operator&gt;.logicalNot,!edges.containsKey((long) boxes[b].get(i)))<SUB>47</SUB>>", "327": "<(IDENTIFIER,edges,containsKey((long) boxes[b].get(i)))<SUB>47</SUB>>", "329": "<(TYPE_REF,long,long)<SUB>47</SUB>>", "331": "<(&lt;operator&gt;.indexAccess,boxes[b])<SUB>47</SUB>>", "333": "<(IDENTIFIER,b,get(i))<SUB>47</SUB>>", "335": "<(CONTROL_STRUCTURE,continue;,continue;)<SUB>48</SUB>>", "337": "<(&lt;operator&gt;.assignment,long curr = get((long) boxes[b].get(i)))<SUB>49</SUB>>", "339": "<(get,get((long) boxes[b].get(i)))<SUB>49</SUB>>", "341": "<(&lt;operator&gt;.cast,(long) boxes[b].get(i))<SUB>49</SUB>>", "343": "<(get,get(i))<SUB>49</SUB>>", "345": "<(IDENTIFIER,boxes,get(i))<SUB>49</SUB>>", "347": "<(IDENTIFIER,i,get(i))<SUB>49</SUB>>", "349": "<(&lt;operator&gt;.assignment,int submask = 0)<SUB>51</SUB>>", "351": "<(LITERAL,0,int submask = 0)<SUB>51</SUB>>", "353": "<(&lt;operator&gt;.assignment,boolean cyclic = true)<SUB>51</SUB>>", "355": "<(LITERAL,true,boolean cyclic = true)<SUB>51</SUB>>", "357": "<(&lt;operator&gt;.notEquals,curr != boxes[b].get(i))<SUB>52</SUB>>", "359": "<(get,get(i))<SUB>52</SUB>>", "361": "<(IDENTIFIER,boxes,get(i))<SUB>52</SUB>>", "363": "<(IDENTIFIER,i,get(i))<SUB>52</SUB>>", "365": "<(LOCAL,int k: int)<SUB>54</SUB>>", "367": "<(IDENTIFIER,k,int k = get(curr))<SUB>54</SUB>>", "369": "<(IDENTIFIER,map,get(curr))<SUB>54</SUB>>", "371": "<(CONTROL_STRUCTURE,if ((submask &amp; (1 &lt;&lt; k)) &gt; 0 || !edges.containsKey((long) curr)),if ((submask &amp; (1 &lt;&lt; k)) &gt; 0 || !edges.containsKey((long) curr)))<SUB>55</SUB>>", "373": "<(&lt;operator&gt;.greaterThan,(submask &amp; (1 &lt;&lt; k)) &gt; 0)<SUB>55</SUB>>", "375": "<(IDENTIFIER,submask,submask &amp; (1 &lt;&lt; k))<SUB>55</SUB>>", "377": "<(LITERAL,1,1 &lt;&lt; k)<SUB>55</SUB>>", "379": "<(LITERAL,0,(submask &amp; (1 &lt;&lt; k)) &gt; 0)<SUB>55</SUB>>", "381": "<(containsKey,containsKey((long) curr))<SUB>55</SUB>>", "383": "<(&lt;operator&gt;.cast,(long) curr)<SUB>55</SUB>>", "385": "<(IDENTIFIER,curr,(long) curr)<SUB>55</SUB>>", "387": "<(&lt;operator&gt;.assignment,cyclic = false)<SUB>57</SUB>>", "389": "<(LITERAL,false,cyclic = false)<SUB>57</SUB>>", "391": "<(&lt;operators&gt;.assignmentOr,submask |= 1 &lt;&lt; k)<SUB>60</SUB>>", "393": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; k)<SUB>60</SUB>>", "395": "<(IDENTIFIER,k,1 &lt;&lt; k)<SUB>60</SUB>>", "397": "<(IDENTIFIER,curr,curr = get((long) curr))<SUB>61</SUB>>", "399": "<(IDENTIFIER,edges,get((long) curr))<SUB>61</SUB>>", "401": "<(TYPE_REF,long,long)<SUB>61</SUB>>", "403": "<(&lt;operators&gt;.assignmentOr,submask |= 1 &lt;&lt; b)<SUB>63</SUB>>", "405": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; b)<SUB>63</SUB>>", "407": "<(IDENTIFIER,b,1 &lt;&lt; b)<SUB>63</SUB>>", "409": "<(IDENTIFIER,cyclic,if (cyclic))<SUB>64</SUB>>", "411": "<(&lt;operator&gt;.indexAccess,subsets[submask])<SUB>65</SUB>>", "413": "<(IDENTIFIER,submask,subsets[submask] = new Node(-69, i, b))<SUB>65</SUB>>", "415": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "417": "<(&lt;operator&gt;.alloc,new Node(-69, i, b))<SUB>65</SUB>>", "419": "<(IDENTIFIER,$obj8,new Node(-69, i, b))>", "421": "<(LITERAL,69,-69)<SUB>65</SUB>>", "423": "<(IDENTIFIER,b,new Node(-69, i, b))<SUB>65</SUB>>", "425": "<(CONTROL_STRUCTURE,for (int mask = 1; Some(mask &lt; (1 &lt;&lt; N)); mask++),for (int mask = 1; Some(mask &lt; (1 &lt;&lt; N)); mask++))<SUB>67</SUB>>", "427": "<(&lt;operator&gt;.assignment,int mask = 1)<SUB>67</SUB>>", "429": "<(LITERAL,1,int mask = 1)<SUB>67</SUB>>", "431": "<(IDENTIFIER,mask,mask &lt; (1 &lt;&lt; N))<SUB>67</SUB>>", "433": "<(LITERAL,1,1 &lt;&lt; N)<SUB>67</SUB>>", "435": "<(&lt;operator&gt;.postIncrement,mask++)<SUB>67</SUB>>", "437": "<(JUMP_TARGET,outer)>", "439": "<(LOCAL,int submask: int)<SUB>68</SUB>>", "441": "<(IDENTIFIER,submask,int submask = mask)<SUB>68</SUB>>", "443": "<(&lt;operator&gt;.greaterThan,submask &gt; 0)<SUB>68</SUB>>", "445": "<(LITERAL,0,submask &gt; 0)<SUB>68</SUB>>", "447": "<(IDENTIFIER,submask,submask = (submask - 1) &amp; mask)<SUB>68</SUB>>", "449": "<(&lt;operator&gt;.subtraction,submask - 1)<SUB>68</SUB>>", "451": "<(LITERAL,1,submask - 1)<SUB>68</SUB>>", "453": "<(CONTROL_STRUCTURE,if (dp[mask ^ submask] != null &amp;&amp; subsets[submask] != null),if (dp[mask ^ submask] != null &amp;&amp; subsets[submask] != null))<SUB>69</SUB>>", "455": "<(&lt;operator&gt;.notEquals,dp[mask ^ submask] != null)<SUB>69</SUB>>", "457": "<(IDENTIFIER,dp,dp[mask ^ submask] != null)<SUB>69</SUB>>", "459": "<(IDENTIFIER,mask,mask ^ submask)<SUB>69</SUB>>", "461": "<(LITERAL,null,dp[mask ^ submask] != null)<SUB>69</SUB>>", "463": "<(&lt;operator&gt;.indexAccess,subsets[submask])<SUB>69</SUB>>", "465": "<(IDENTIFIER,submask,subsets[submask] != null)<SUB>69</SUB>>", "467": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>70</SUB>>", "469": "<(&lt;operator&gt;.indexAccess,dp[mask])<SUB>71</SUB>>", "471": "<(IDENTIFIER,mask,dp[mask] = new Node(mask ^ submask, subsets[submask].dex, subsets[submask].start))<SUB>71</SUB>>", "473": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "475": "<(&lt;operator&gt;.alloc,new Node(mask ^ submask, subsets[submask].dex, subsets[submask].start))<SUB>71</SUB>>", "477": "<(IDENTIFIER,$obj9,new Node(mask ^ submask, subsets[submask].dex, subsets[submask].start))>", "479": "<(IDENTIFIER,mask,mask ^ submask)<SUB>71</SUB>>", "481": "<(&lt;operator&gt;.fieldAccess,subsets[submask].dex)<SUB>71</SUB>>", "483": "<(IDENTIFIER,subsets,new Node(mask ^ submask, subsets[submask].dex, subsets[submask].start))<SUB>71</SUB>>", "485": "<(FIELD_IDENTIFIER,dex,dex)<SUB>71</SUB>>", "487": "<(&lt;operator&gt;.indexAccess,subsets[submask])<SUB>71</SUB>>", "489": "<(IDENTIFIER,submask,new Node(mask ^ submask, subsets[submask].dex, subsets[submask].start))<SUB>71</SUB>>", "491": "<(IDENTIFIER,$obj9,&lt;empty&gt;)>", "493": "<(CONTROL_STRUCTURE,if (dp[(1 &lt;&lt; N) - 1] == null),if (dp[(1 &lt;&lt; N) - 1] == null))<SUB>74</SUB>>", "495": "<(&lt;operator&gt;.indexAccess,dp[(1 &lt;&lt; N) - 1])<SUB>74</SUB>>", "497": "<(&lt;operator&gt;.subtraction,(1 &lt;&lt; N) - 1)<SUB>74</SUB>>", "499": "<(LITERAL,1,1 &lt;&lt; N)<SUB>74</SUB>>", "501": "<(LITERAL,1,(1 &lt;&lt; N) - 1)<SUB>74</SUB>>", "503": "<(println,System.out.println(&quot;No&quot;))<SUB>75</SUB>>", "505": "<(IDENTIFIER,System,System.out.println(&quot;No&quot;))<SUB>75</SUB>>", "507": "<(LITERAL,&quot;No&quot;,System.out.println(&quot;No&quot;))<SUB>75</SUB>>", "509": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>77</SUB>>", "510": "<(&lt;operator&gt;.assignment,StringBuilder sb = new StringBuilder(&quot;Yes\\n&quot;))<SUB>78</SUB>>", "512": "<(&lt;operator&gt;.alloc,new StringBuilder(&quot;Yes\\n&quot;))<SUB>78</SUB>>", "12": "<(IDENTIFIER,sb,new StringBuilder(&quot;Yes\\n&quot;))<SUB>78</SUB>>", "515": "<(LOCAL,long[][] res: long[][])<SUB>79</SUB>>", "517": "<(IDENTIFIER,res,long[][] res = new long[N][2])<SUB>79</SUB>>", "519": "<(IDENTIFIER,N,new long[N][2])<SUB>79</SUB>>", "521": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; N); i++),for (int i = 0; Some(i &lt; N); i++))<SUB>80</SUB>>", "523": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>80</SUB>>", "525": "<(LITERAL,0,int i = 0)<SUB>80</SUB>>", "527": "<(IDENTIFIER,i,i &lt; N)<SUB>80</SUB>>", "529": "<(&lt;operator&gt;.postIncrement,i++)<SUB>80</SUB>>", "531": "<(&lt;operator&gt;.assignment,res[i][1] = -1L)<SUB>81</SUB>>", "533": "<(&lt;operator&gt;.indexAccess,res[i])<SUB>81</SUB>>", "535": "<(IDENTIFIER,i,res[i][1] = -1L)<SUB>81</SUB>>", "537": "<(&lt;operator&gt;.minus,-1L)<SUB>81</SUB>>", "539": "<(LOCAL,int currmask: int)<SUB>82</SUB>>", "541": "<(IDENTIFIER,currmask,int currmask = (1 &lt;&lt; N) - 1)<SUB>82</SUB>>", "543": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; N)<SUB>82</SUB>>", "545": "<(IDENTIFIER,N,1 &lt;&lt; N)<SUB>82</SUB>>", "547": "<(CONTROL_STRUCTURE,while (currmask != 0),while (currmask != 0))<SUB>83</SUB>>", "549": "<(IDENTIFIER,currmask,currmask != 0)<SUB>83</SUB>>", "551": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>84</SUB>>", "553": "<(&lt;operator&gt;.assignment,int submask = dp[currmask].mask)<SUB>85</SUB>>", "555": "<(&lt;operator&gt;.fieldAccess,dp[currmask].mask)<SUB>85</SUB>>", "557": "<(IDENTIFIER,dp,int submask = dp[currmask].mask)<SUB>85</SUB>>", "559": "<(FIELD_IDENTIFIER,mask,mask)<SUB>85</SUB>>", "561": "<(&lt;operator&gt;.assignment,int i = dp[currmask].dex)<SUB>86</SUB>>", "563": "<(&lt;operator&gt;.fieldAccess,dp[currmask].dex)<SUB>86</SUB>>", "565": "<(IDENTIFIER,dp,int i = dp[currmask].dex)<SUB>86</SUB>>", "567": "<(FIELD_IDENTIFIER,dex,dex)<SUB>86</SUB>>", "569": "<(&lt;operator&gt;.assignment,int b = dp[currmask].start)<SUB>87</SUB>>", "571": "<(&lt;operator&gt;.fieldAccess,dp[currmask].start)<SUB>87</SUB>>", "573": "<(IDENTIFIER,dp,int b = dp[currmask].start)<SUB>87</SUB>>", "575": "<(FIELD_IDENTIFIER,start,start)<SUB>87</SUB>>", "577": "<(&lt;operator&gt;.assignment,long nextval = target - sums[b] + boxes[b].get(i))<SUB>88</SUB>>", "579": "<(&lt;operator&gt;.addition,target - sums[b] + boxes[b].get(i))<SUB>88</SUB>>", "581": "<(IDENTIFIER,target,target - sums[b])<SUB>88</SUB>>", "583": "<(IDENTIFIER,sums,target - sums[b])<SUB>88</SUB>>", "585": "<(get,get(i))<SUB>88</SUB>>", "587": "<(IDENTIFIER,boxes,get(i))<SUB>88</SUB>>", "589": "<(IDENTIFIER,i,get(i))<SUB>88</SUB>>", "591": "<(&lt;operator&gt;.assignment,int curr = get(nextval))<SUB>89</SUB>>", "593": "<(get,get(nextval))<SUB>89</SUB>>", "595": "<(IDENTIFIER,nextval,get(nextval))<SUB>89</SUB>>", "597": "<(&lt;operator&gt;.indexAccess,res[map.get(nextval)][0])<SUB>90</SUB>>", "599": "<(IDENTIFIER,res,res[map.get(nextval)][0] = nextval)<SUB>90</SUB>>", "601": "<(IDENTIFIER,map,get(nextval))<SUB>90</SUB>>", "603": "<(LITERAL,0,res[map.get(nextval)][0] = nextval)<SUB>90</SUB>>", "605": "<(&lt;operator&gt;.assignment,res[map.get(nextval)][1] = b)<SUB>91</SUB>>", "607": "<(&lt;operator&gt;.indexAccess,res[map.get(nextval)])<SUB>91</SUB>>", "609": "<(get,get(nextval))<SUB>91</SUB>>", "611": "<(IDENTIFIER,nextval,get(nextval))<SUB>91</SUB>>", "613": "<(IDENTIFIER,b,res[map.get(nextval)][1] = b)<SUB>91</SUB>>", "615": "<(LITERAL,true,while (true))<SUB>92</SUB>>", "617": "<(LOCAL,int lol: int)<SUB>94</SUB>>", "619": "<(IDENTIFIER,lol,int lol = get(nextval))<SUB>94</SUB>>", "621": "<(IDENTIFIER,map,get(nextval))<SUB>94</SUB>>", "623": "<(&lt;operator&gt;.assignment,nextval = get(nextval))<SUB>95</SUB>>", "625": "<(get,get(nextval))<SUB>95</SUB>>", "627": "<(IDENTIFIER,nextval,get(nextval))<SUB>95</SUB>>", "629": "<(&lt;operator&gt;.indexAccess,res[map.get(nextval)][0])<SUB>96</SUB>>", "631": "<(IDENTIFIER,res,res[map.get(nextval)][0] = nextval)<SUB>96</SUB>>", "633": "<(IDENTIFIER,map,get(nextval))<SUB>96</SUB>>", "635": "<(LITERAL,0,res[map.get(nextval)][0] = nextval)<SUB>96</SUB>>", "637": "<(CONTROL_STRUCTURE,if (res[map.get(nextval)][1] != -1),if (res[map.get(nextval)][1] != -1))<SUB>97</SUB>>", "639": "<(&lt;operator&gt;.indexAccess,res[map.get(nextval)][1])<SUB>97</SUB>>", "641": "<(IDENTIFIER,res,res[map.get(nextval)][1] != -1)<SUB>97</SUB>>", "643": "<(IDENTIFIER,map,get(nextval))<SUB>97</SUB>>", "645": "<(LITERAL,1,res[map.get(nextval)][1] != -1)<SUB>97</SUB>>", "647": "<(LITERAL,1,-1)<SUB>97</SUB>>", "649": "<(&lt;operator&gt;.assignment,res[map.get(nextval)][1] = lol)<SUB>99</SUB>>", "651": "<(&lt;operator&gt;.indexAccess,res[map.get(nextval)])<SUB>99</SUB>>", "653": "<(get,get(nextval))<SUB>99</SUB>>", "655": "<(IDENTIFIER,nextval,get(nextval))<SUB>99</SUB>>", "657": "<(IDENTIFIER,lol,res[map.get(nextval)][1] = lol)<SUB>99</SUB>>", "659": "<(IDENTIFIER,currmask,currmask = dp[currmask].mask)<SUB>101</SUB>>", "661": "<(&lt;operator&gt;.indexAccess,dp[currmask])<SUB>101</SUB>>", "663": "<(IDENTIFIER,currmask,currmask = dp[currmask].mask)<SUB>101</SUB>>", "665": "<(CONTROL_STRUCTURE,for (int k = 0; Some(k &lt; N); k++),for (int k = 0; Some(k &lt; N); k++))<SUB>103</SUB>>", "667": "<(&lt;operator&gt;.assignment,int k = 0)<SUB>103</SUB>>", "669": "<(LITERAL,0,int k = 0)<SUB>103</SUB>>", "671": "<(IDENTIFIER,k,k &lt; N)<SUB>103</SUB>>", "673": "<(&lt;operator&gt;.postIncrement,k++)<SUB>103</SUB>>", "675": "<(append,sb.append(res[k][0] + &quot; &quot;).append(res[k][1] + 1).append(&quot;\\n&quot;))<SUB>104</SUB>>", "677": "<(append,sb.append(res[k][0] + &quot; &quot;))<SUB>104</SUB>>", "679": "<(&lt;operator&gt;.addition,res[k][0] + &quot; &quot;)<SUB>104</SUB>>", "681": "<(&lt;operator&gt;.indexAccess,res[k])<SUB>104</SUB>>", "683": "<(IDENTIFIER,k,res[k][0] + &quot; &quot;)<SUB>104</SUB>>", "685": "<(LITERAL,&quot; &quot;,res[k][0] + &quot; &quot;)<SUB>104</SUB>>", "687": "<(&lt;operator&gt;.indexAccess,res[k][1])<SUB>104</SUB>>", "689": "<(IDENTIFIER,res,res[k][1] + 1)<SUB>104</SUB>>", "691": "<(LITERAL,1,res[k][1] + 1)<SUB>104</SUB>>", "693": "<(LITERAL,&quot;\\n&quot;,sb.append(res[k][0] + &quot; &quot;).append(res[k][1] + 1).append(&quot;\\n&quot;))<SUB>104</SUB>>", "695": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>105</SUB>>", "697": "<(FIELD_IDENTIFIER,out,out)<SUB>105</SUB>>", "699": "<(MODIFIER,PUBLIC)>", "701": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}