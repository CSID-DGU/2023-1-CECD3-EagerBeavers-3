{"edges": [["19", "21"], ["19", "67"], ["19", "68"], ["19", "69"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "26"], ["21", "27"], ["21", "28"], ["21", "29"], ["21", "33"], ["21", "37"], ["21", "46"], ["21", "53"], ["21", "60"], ["22", "23"], ["22", "24"], ["25", "3"], ["29", "30"], ["29", "31"], ["31", "32"], ["33", "34"], ["33", "35"], ["35", "36"], ["37", "38"], ["37", "39"], ["39", "40"], ["39", "41"], ["41", "42"], ["41", "43"], ["43", "44"], ["43", "45"], ["46", "47"], ["46", "48"], ["48", "49"], ["48", "50"], ["50", "51"], ["50", "52"], ["53", "54"], ["53", "55"], ["55", "56"], ["55", "59"], ["56", "57"], ["56", "58"], ["60", "61"], ["60", "64"], ["61", "62"], ["61", "63"], ["64", "65"], ["64", "66"], ["22", "25"], ["25", "31"], ["29", "35"], ["33", "43"], ["37", "49"], ["46", "56"], ["53", "63"], ["60", "69"], ["24", "22"], ["31", "29"], ["35", "33"], ["39", "37"], ["48", "46"], ["55", "53"], ["61", "64"], ["64", "60"], ["41", "39"], ["49", "50"], ["50", "48"], ["56", "55"], ["63", "61"], ["43", "41"], ["19", "24"], ["20", "69"], ["22", "69"], ["25", "69"], ["29", "69"], ["35", "69"], ["33", "69"], ["33", "69"], ["43", "69"], ["41", "69"], ["39", "69"], ["37", "69"], ["37", "69"], ["48", "69"], ["46", "69"], ["46", "69"], ["55", "69"], ["53", "69"], ["53", "69"], ["60", "69"], ["64", "69"], ["64", "69"], ["60", "69"], ["60", "69"], ["50", "69"], ["19", "20"], ["19", "22"], ["31", "29"], ["35", "33"], ["19", "37"], ["41", "37"], ["41", "37"], ["19", "46"], ["50", "46"], ["50", "46"], ["55", "53"], ["55", "53"], ["22", "25"], ["19", "25"], ["64", "60"], ["64", "60"], ["25", "31"], ["19", "31"], ["31", "35"], ["19", "35"], ["19", "39"], ["41", "39"], ["41", "39"], ["19", "48"], ["50", "48"], ["50", "48"], ["56", "55"], ["56", "55"], ["19", "55"], ["19", "64"], ["29", "64"], ["53", "64"], ["19", "41"], ["33", "41"], ["29", "41"], ["19", "50"], ["37", "50"], ["46", "56"], ["19", "56"], ["33", "43"], ["19", "43"], ["29", "43"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY z = new Reader())<SUB>3</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Reader())<SUB>3</SUB>>", "3": "<(IDENTIFIER,z,new Reader())<SUB>3</SUB>>", "27": "<(LOCAL,long k: long)<SUB>4</SUB>>", "29": "<(&lt;operator&gt;.assignment,long n = nextLong())<SUB>4</SUB>>", "31": "<(nextLong,nextLong())<SUB>4</SUB>>", "33": "<(&lt;operator&gt;.assignment,long k = nextLong())<SUB>4</SUB>>", "35": "<(nextLong,nextLong())<SUB>4</SUB>>", "37": "<(&lt;operator&gt;.assignment,x = 9L + 8L * (k + n))<SUB>5</SUB>>", "39": "<(&lt;operator&gt;.addition,9L + 8L * (k + n))<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.multiplication,8L * (k + n))<SUB>5</SUB>>", "43": "<(&lt;operator&gt;.addition,k + n)<SUB>5</SUB>>", "45": "<(IDENTIFIER,n,k + n)<SUB>5</SUB>>", "47": "<(IDENTIFIER,x,x = (long) Math.sqrt(x))<SUB>6</SUB>>", "49": "<(TYPE_REF,long,long)<SUB>6</SUB>>", "51": "<(IDENTIFIER,Math,Math.sqrt(x))<SUB>6</SUB>>", "53": "<(&lt;operator&gt;.assignment,x = (x - 3) / 2)<SUB>7</SUB>>", "55": "<(&lt;operator&gt;.division,(x - 3) / 2)<SUB>7</SUB>>", "57": "<(IDENTIFIER,x,x - 3)<SUB>7</SUB>>", "59": "<(LITERAL,2,(x - 3) / 2)<SUB>7</SUB>>", "61": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>8</SUB>>", "63": "<(FIELD_IDENTIFIER,out,out)<SUB>8</SUB>>", "65": "<(IDENTIFIER,n,n - x)<SUB>8</SUB>>", "67": "<(MODIFIER,PUBLIC)>", "69": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}