{"edges": [["21", "22"], ["21", "23"], ["21", "500"], ["21", "501"], ["21", "502"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "28"], ["23", "31"], ["23", "42"], ["23", "43"], ["23", "47"], ["23", "48"], ["23", "52"], ["23", "53"], ["23", "58"], ["23", "59"], ["23", "64"], ["23", "65"], ["23", "70"], ["23", "99"], ["23", "148"], ["23", "216"], ["23", "288"], ["23", "289"], ["23", "296"], ["23", "297"], ["23", "300"], ["23", "495"], ["23", "498"], ["24", "25"], ["24", "26"], ["27", "3"], ["28", "29"], ["28", "30"], ["31", "5"], ["31", "32"], ["32", "33"], ["32", "36"], ["32", "41"], ["33", "34"], ["33", "35"], ["36", "37"], ["36", "38"], ["38", "39"], ["38", "40"], ["43", "44"], ["43", "45"], ["45", "46"], ["48", "49"], ["48", "50"], ["50", "51"], ["53", "54"], ["53", "55"], ["55", "56"], ["55", "57"], ["59", "60"], ["59", "61"], ["61", "62"], ["61", "63"], ["65", "66"], ["65", "67"], ["67", "68"], ["67", "69"], ["70", "71"], ["70", "72"], ["70", "75"], ["70", "78"], ["70", "80"], ["72", "73"], ["72", "74"], ["75", "76"], ["75", "77"], ["78", "79"], ["80", "81"], ["81", "82"], ["81", "83"], ["81", "86"], ["81", "89"], ["81", "91"], ["83", "84"], ["83", "85"], ["86", "87"], ["86", "88"], ["89", "90"], ["91", "92"], ["91", "97"], ["92", "93"], ["92", "96"], ["93", "94"], ["93", "95"], ["97", "98"], ["99", "100"], ["99", "103"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "105"], ["103", "110"], ["103", "142"], ["103", "145"], ["103", "147"], ["105", "106"], ["105", "107"], ["107", "108"], ["107", "109"], ["110", "111"], ["110", "112"], ["110", "115"], ["110", "120"], ["110", "122"], ["112", "113"], ["112", "114"], ["115", "116"], ["115", "117"], ["117", "118"], ["117", "119"], ["120", "121"], ["122", "123"], ["122", "124"], ["124", "125"], ["124", "126"], ["124", "127"], ["127", "128"], ["127", "129"], ["129", "130"], ["129", "135"], ["130", "131"], ["130", "134"], ["131", "132"], ["131", "133"], ["135", "136"], ["135", "139"], ["136", "137"], ["136", "138"], ["139", "140"], ["139", "141"], ["142", "143"], ["142", "144"], ["145", "146"], ["148", "149"], ["148", "150"], ["148", "153"], ["148", "156"], ["148", "158"], ["150", "151"], ["150", "152"], ["153", "154"], ["153", "155"], ["156", "157"], ["158", "159"], ["159", "160"], ["159", "161"], ["159", "164"], ["159", "167"], ["159", "169"], ["161", "162"], ["161", "163"], ["164", "165"], ["164", "166"], ["167", "168"], ["169", "170"], ["169", "175"], ["169", "176"], ["169", "181"], ["169", "209"], ["170", "171"], ["170", "174"], ["171", "172"], ["171", "173"], ["176", "177"], ["176", "178"], ["178", "179"], ["178", "180"], ["181", "182"], ["181", "183"], ["181", "186"], ["181", "189"], ["181", "191"], ["183", "184"], ["183", "185"], ["186", "187"], ["186", "188"], ["189", "190"], ["191", "192"], ["191", "193"], ["193", "194"], ["193", "195"], ["193", "196"], ["196", "197"], ["196", "198"], ["198", "199"], ["198", "204"], ["199", "200"], ["199", "203"], ["200", "201"], ["200", "202"], ["204", "205"], ["204", "208"], ["205", "206"], ["205", "207"], ["209", "210"], ["209", "215"], ["210", "211"], ["210", "214"], ["211", "212"], ["211", "213"], ["216", "217"], ["216", "218"], ["216", "221"], ["216", "224"], ["216", "226"], ["218", "219"], ["218", "220"], ["221", "222"], ["221", "223"], ["224", "225"], ["226", "227"], ["227", "228"], ["227", "229"], ["227", "232"], ["227", "235"], ["227", "237"], ["229", "230"], ["229", "231"], ["232", "233"], ["232", "234"], ["235", "236"], ["237", "238"], ["237", "243"], ["237", "244"], ["237", "249"], ["237", "281"], ["238", "239"], ["238", "242"], ["239", "240"], ["239", "241"], ["244", "245"], ["244", "246"], ["246", "247"], ["246", "248"], ["249", "250"], ["249", "251"], ["249", "254"], ["249", "259"], ["249", "261"], ["251", "252"], ["251", "253"], ["254", "255"], ["254", "256"], ["256", "257"], ["256", "258"], ["259", "260"], ["261", "262"], ["261", "263"], ["263", "264"], ["263", "265"], ["263", "266"], ["266", "267"], ["266", "268"], ["268", "269"], ["268", "274"], ["269", "270"], ["269", "273"], ["270", "271"], ["270", "272"], ["274", "275"], ["274", "278"], ["275", "276"], ["275", "277"], ["278", "279"], ["278", "280"], ["281", "282"], ["281", "287"], ["282", "283"], ["282", "286"], ["283", "284"], ["283", "285"], ["289", "290"], ["289", "291"], ["291", "292"], ["291", "295"], ["292", "293"], ["292", "294"], ["297", "298"], ["297", "299"], ["300", "301"], ["300", "302"], ["300", "305"], ["300", "308"], ["300", "310"], ["302", "303"], ["302", "304"], ["305", "306"], ["305", "307"], ["308", "309"], ["310", "311"], ["310", "335"], ["310", "371"], ["310", "459"], ["311", "312"], ["311", "313"], ["311", "316"], ["311", "321"], ["311", "323"], ["313", "314"], ["313", "315"], ["316", "317"], ["316", "318"], ["318", "319"], ["318", "320"], ["321", "322"], ["323", "324"], ["323", "325"], ["323", "330"], ["325", "326"], ["325", "327"], ["327", "328"], ["327", "329"], ["330", "331"], ["330", "332"], ["330", "333"], ["333", "334"], ["335", "336"], ["335", "337"], ["335", "340"], ["335", "343"], ["335", "345"], ["337", "338"], ["337", "339"], ["340", "341"], ["340", "342"], ["343", "344"], ["345", "346"], ["346", "347"], ["346", "350"], ["346", "361"], ["347", "348"], ["347", "349"], ["350", "351"], ["350", "358"], ["351", "352"], ["351", "357"], ["352", "353"], ["352", "354"], ["354", "355"], ["354", "356"], ["358", "359"], ["358", "360"], ["361", "362"], ["362", "363"], ["362", "370"], ["363", "364"], ["363", "369"], ["364", "365"], ["364", "366"], ["366", "367"], ["366", "368"], ["371", "372"], ["371", "373"], ["371", "376"], ["371", "381"], ["371", "383"], ["373", "374"], ["373", "375"], ["376", "377"], ["376", "378"], ["378", "379"], ["378", "380"], ["381", "382"], ["383", "384"], ["384", "385"], ["384", "386"], ["384", "389"], ["384", "392"], ["384", "394"], ["386", "387"], ["386", "388"], ["389", "390"], ["389", "391"], ["392", "393"], ["394", "395"], ["394", "405"], ["395", "396"], ["395", "404"], ["396", "397"], ["396", "402"], ["397", "398"], ["397", "401"], ["398", "399"], ["398", "400"], ["402", "403"], ["405", "406"], ["405", "407"], ["405", "410"], ["405", "413"], ["405", "415"], ["407", "408"], ["407", "409"], ["410", "411"], ["410", "412"], ["413", "414"], ["415", "416"], ["415", "421"], ["416", "417"], ["416", "420"], ["417", "418"], ["417", "419"], ["421", "422"], ["421", "429"], ["422", "423"], ["422", "428"], ["423", "424"], ["423", "427"], ["424", "425"], ["424", "426"], ["429", "430"], ["430", "431"], ["430", "436"], ["431", "432"], ["431", "435"], ["432", "433"], ["432", "434"], ["436", "437"], ["436", "438"], ["436", "443"], ["438", "439"], ["438", "442"], ["439", "440"], ["439", "441"], ["443", "444"], ["443", "445"], ["443", "450"], ["445", "446"], ["445", "449"], ["446", "447"], ["446", "448"], ["450", "451"], ["450", "458"], ["451", "452"], ["451", "453"], ["453", "454"], ["453", "455"], ["455", "456"], ["455", "457"], ["459", "460"], ["459", "461"], ["459", "464"], ["459", "467"], ["459", "469"], ["461", "462"], ["461", "463"], ["464", "465"], ["464", "466"], ["467", "468"], ["469", "470"], ["469", "471"], ["469", "478"], ["471", "472"], ["471", "473"], ["473", "474"], ["473", "477"], ["474", "475"], ["474", "476"], ["478", "479"], ["478", "480"], ["480", "481"], ["480", "482"], ["480", "483"], ["483", "484"], ["483", "485"], ["483", "494"], ["485", "486"], ["485", "493"], ["486", "487"], ["486", "488"], ["488", "489"], ["488", "492"], ["489", "490"], ["489", "491"], ["495", "496"], ["495", "497"], ["498", "499"], ["24", "27"], ["27", "30"], ["28", "35"], ["31", "45"], ["43", "50"], ["48", "55"], ["53", "61"], ["59", "67"], ["65", "72"], ["289", "297"], ["297", "302"], ["495", "498"], ["498", "502"], ["26", "24"], ["30", "28"], ["45", "43"], ["50", "48"], ["55", "53"], ["61", "59"], ["67", "65"], ["72", "75"], ["75", "83"], ["75", "100"], ["78", "75"], ["100", "109"], ["100", "150"], ["150", "153"], ["153", "161"], ["153", "218"], ["156", "153"], ["218", "221"], ["221", "229"], ["221", "292"], ["224", "221"], ["291", "289"], ["302", "305"], ["305", "313"], ["305", "495"], ["308", "305"], ["33", "40"], ["36", "31"], ["105", "112"], ["142", "145"], ["145", "147"], ["147", "502"], ["292", "291"], ["35", "33"], ["38", "36"], ["83", "86"], ["86", "93"], ["86", "78"], ["89", "86"], ["91", "89"], ["107", "105"], ["112", "117"], ["115", "131"], ["115", "142"], ["120", "117"], ["122", "120"], ["161", "164"], ["164", "171"], ["164", "156"], ["167", "164"], ["229", "232"], ["232", "239"], ["232", "224"], ["235", "232"], ["313", "320"], ["316", "327"], ["316", "337"], ["321", "320"], ["337", "340"], ["340", "347"], ["340", "373"], ["343", "340"], ["373", "378"], ["376", "386"], ["376", "461"], ["381", "378"], ["461", "464"], ["464", "474"], ["464", "308"], ["467", "464"], ["40", "38"], ["92", "97"], ["97", "91"], ["109", "107"], ["117", "115"], ["124", "122"], ["176", "183"], ["209", "167"], ["244", "251"], ["281", "235"], ["318", "316"], ["325", "333"], ["330", "321"], ["378", "376"], ["471", "489"], ["478", "467"], ["93", "92"], ["127", "124"], ["171", "167"], ["171", "180"], ["178", "176"], ["183", "186"], ["186", "200"], ["186", "211"], ["189", "186"], ["191", "189"], ["210", "209"], ["239", "235"], ["239", "248"], ["246", "244"], ["251", "256"], ["254", "270"], ["254", "283"], ["259", "256"], ["261", "259"], ["282", "281"], ["320", "318"], ["327", "325"], ["333", "330"], ["347", "354"], ["347", "366"], ["350", "343"], ["386", "389"], ["389", "398"], ["389", "381"], ["392", "389"], ["473", "471"], ["480", "478"], ["129", "127"], ["180", "178"], ["193", "191"], ["211", "210"], ["248", "246"], ["256", "254"], ["263", "261"], ["283", "282"], ["351", "360"], ["358", "350"], ["362", "343"], ["474", "473"], ["483", "480"], ["130", "136"], ["135", "129"], ["196", "193"], ["266", "263"], ["352", "351"], ["360", "358"], ["363", "362"], ["396", "392"], ["396", "407"], ["407", "410"], ["410", "417"], ["410", "392"], ["413", "410"], ["485", "483"], ["131", "130"], ["136", "139"], ["139", "135"], ["198", "196"], ["268", "266"], ["354", "352"], ["364", "363"], ["397", "402"], ["402", "396"], ["486", "485"], ["199", "205"], ["204", "198"], ["269", "275"], ["274", "268"], ["366", "364"], ["398", "397"], ["417", "413"], ["417", "424"], ["422", "432"], ["422", "413"], ["488", "486"], ["200", "199"], ["205", "204"], ["270", "269"], ["275", "278"], ["278", "274"], ["423", "422"], ["430", "413"], ["489", "488"], ["424", "423"], ["431", "439"], ["436", "430"], ["432", "431"], ["438", "446"], ["443", "436"], ["439", "438"], ["445", "455"], ["450", "443"], ["446", "445"], ["451", "450"], ["453", "451"], ["455", "453"], ["21", "26"], ["147", "502"], ["22", "502"], ["24", "502"], ["27", "502"], ["28", "502"], ["33", "502"], ["36", "502"], ["36", "502"], ["36", "502"], ["31", "502"], ["43", "502"], ["50", "502"], ["48", "502"], ["48", "502"], ["53", "502"], ["53", "502"], ["59", "502"], ["59", "502"], ["59", "502"], ["65", "502"], ["65", "502"], ["65", "502"], ["75", "502"], ["100", "502"], ["100", "502"], ["105", "502"], ["105", "502"], ["112", "502"], ["115", "502"], ["117", "502"], ["115", "502"], ["115", "502"], ["142", "502"], ["142", "502"], ["145", "502"], ["145", "502"], ["124", "502"], ["129", "502"], ["129", "502"], ["127", "502"], ["124", "502"], ["122", "502"], ["122", "502"], ["120", "502"], ["83", "502"], ["86", "502"], ["86", "502"], ["78", "502"], ["91", "502"], ["97", "502"], ["91", "502"], ["91", "502"], ["89", "502"], ["330", "502"], ["21", "22"], ["21", "24"], ["21", "28"], ["45", "43"], ["50", "48"], ["55", "53"], ["61", "59"], ["67", "65"], ["67", "65"], ["291", "289"], ["291", "289"], ["21", "297"], ["24", "27"], ["21", "27"], ["28", "31"], ["21", "31"], ["33", "31"], ["36", "31"], ["21", "72"], ["21", "150"], ["21", "218"], ["21", "302"], ["31", "495"], ["21", "495"], ["297", "495"], ["478", "495"], ["495", "498"], ["21", "498"], ["21", "33"], ["21", "41"], ["27", "45"], ["21", "45"], ["45", "50"], ["21", "50"], ["43", "55"], ["21", "55"], ["55", "61"], ["21", "61"], ["61", "67"], ["21", "67"], ["48", "67"], ["72", "75"], ["78", "75"], ["21", "75"], ["67", "75"], ["75", "78"], ["21", "78"], ["75", "100"], ["21", "100"], ["21", "147"], ["150", "153"], ["156", "153"], ["21", "153"], ["100", "153"], ["164", "153"], ["153", "156"], ["171", "156"], ["21", "156"], ["218", "221"], ["224", "221"], ["21", "221"], ["153", "221"], ["232", "221"], ["221", "224"], ["239", "224"], ["21", "224"], ["292", "291"], ["292", "291"], ["21", "291"], ["302", "305"], ["308", "305"], ["21", "305"], ["291", "305"], ["464", "305"], ["305", "308"], ["347", "308"], ["21", "308"], ["33", "36"], ["21", "36"], ["21", "83"], ["97", "91"], ["21", "112"], ["124", "122"], ["124", "122"], ["124", "122"], ["31", "142"], ["21", "142"], ["105", "142"], ["122", "142"], ["142", "145"], ["21", "145"], ["21", "161"], ["21", "229"], ["21", "292"], ["221", "292"], ["21", "313"], ["21", "337"], ["21", "373"], ["21", "461"], ["83", "86"], ["89", "86"], ["21", "86"], ["67", "86"], ["86", "89"], ["21", "89"], ["112", "115"], ["120", "115"], ["21", "115"], ["117", "115"], ["117", "115"], ["21", "120"], ["115", "120"], ["161", "164"], ["167", "164"], ["21", "164"], ["153", "164"], ["171", "167"], ["21", "167"], ["176", "209"], ["191", "209"], ["21", "209"], ["229", "232"], ["235", "232"], ["21", "232"], ["221", "232"], ["239", "235"], ["21", "235"], ["244", "281"], ["261", "281"], ["21", "281"], ["313", "316"], ["321", "316"], ["21", "316"], ["289", "316"], ["316", "321"], ["21", "321"], ["33", "325"], ["289", "325"], ["337", "340"], ["343", "340"], ["21", "340"], ["305", "340"], ["366", "343"], ["354", "343"], ["21", "343"], ["373", "376"], ["381", "376"], ["21", "376"], ["378", "376"], ["378", "376"], ["376", "381"], ["424", "381"], ["453", "381"], ["21", "381"], ["461", "464"], ["467", "464"], ["21", "464"], ["378", "464"], ["489", "464"], ["464", "467"], ["21", "467"], ["480", "478"], ["480", "478"], ["480", "478"], ["50", "97"], ["21", "97"], ["67", "117"], ["86", "117"], ["21", "117"], ["127", "124"], ["21", "124"], ["105", "124"], ["122", "124"], ["127", "124"], ["21", "183"], ["193", "191"], ["193", "191"], ["193", "191"], ["21", "251"], ["263", "261"], ["263", "261"], ["263", "261"], ["21", "330"], ["325", "330"], ["333", "330"], ["21", "378"], ["340", "378"], ["389", "378"], ["21", "386"], ["124", "127"], ["21", "127"], ["129", "127"], ["129", "127"], ["153", "171"], ["21", "171"], ["164", "171"], ["183", "186"], ["189", "186"], ["21", "186"], ["67", "186"], ["86", "186"], ["186", "189"], ["21", "189"], ["221", "239"], ["21", "239"], ["232", "239"], ["251", "254"], ["259", "254"], ["21", "254"], ["256", "254"], ["256", "254"], ["21", "259"], ["254", "259"], ["21", "333"], ["340", "347"], ["21", "347"], ["305", "347"], ["21", "362"], ["386", "389"], ["392", "389"], ["21", "389"], ["378", "389"], ["410", "389"], ["389", "392"], ["417", "392"], ["455", "392"], ["21", "392"], ["483", "480"], ["21", "480"], ["297", "480"], ["478", "480"], ["483", "480"], ["483", "480"], ["196", "193"], ["21", "193"], ["176", "193"], ["191", "193"], ["196", "193"], ["67", "256"], ["186", "256"], ["86", "256"], ["21", "256"], ["266", "263"], ["21", "263"], ["244", "263"], ["261", "263"], ["266", "263"], ["21", "407"], ["480", "483"], ["436", "483"], ["263", "483"], ["193", "483"], ["21", "483"], ["471", "483"], ["193", "196"], ["21", "196"], ["198", "196"], ["198", "196"], ["263", "266"], ["193", "266"], ["21", "266"], ["268", "266"], ["268", "266"], ["430", "396"], ["402", "396"], ["407", "410"], ["413", "410"], ["21", "410"], ["389", "410"], ["417", "413"], ["424", "413"], ["21", "413"], ["115", "139"], ["21", "139"], ["198", "268"], ["21", "354"], ["347", "354"], ["21", "402"], ["21", "366"], ["347", "366"], ["410", "417"], ["21", "417"], ["389", "417"], ["455", "417"], ["423", "422"], ["423", "422"], ["21", "422"], ["436", "430"], ["436", "430"], ["436", "430"], ["489", "488"], ["489", "488"], ["21", "488"], ["254", "278"], ["21", "278"], ["424", "423"], ["424", "423"], ["21", "423"], ["21", "489"], ["464", "489"], ["376", "424"], ["453", "424"], ["21", "424"], ["417", "424"], ["443", "436"], ["21", "436"], ["396", "436"], ["430", "436"], ["443", "436"], ["443", "436"], ["480", "443"], ["436", "443"], ["263", "443"], ["193", "443"], ["21", "443"], ["424", "453"], ["21", "453"], ["455", "453"], ["455", "453"], ["21", "455"], ["417", "455"], ["75", "86"], ["75", "75"], ["75", "83"], ["75", "78"], ["100", "150"], ["100", "292"], ["100", "112"], ["100", "302"], ["100", "498"], ["100", "147"], ["100", "117"], ["100", "305"], ["100", "297"], ["100", "109"], ["100", "107"], ["100", "115"], ["100", "145"], ["100", "153"], ["100", "291"], ["100", "289"], ["100", "221"], ["100", "495"], ["100", "142"], ["100", "105"], ["100", "218"], ["153", "161"], ["153", "153"], ["153", "164"], ["153", "156"], ["221", "224"], ["221", "229"], ["221", "232"], ["221", "221"], ["305", "376"], ["305", "308"], ["305", "464"], ["305", "378"], ["305", "340"], ["305", "305"], ["305", "316"], ["305", "320"], ["305", "337"], ["305", "373"], ["305", "318"], ["305", "461"], ["305", "313"], ["86", "93"], ["86", "86"], ["86", "92"], ["86", "97"], ["86", "91"], ["86", "89"], ["115", "120"], ["115", "136"], ["115", "129"], ["115", "127"], ["115", "122"], ["115", "135"], ["115", "117"], ["115", "115"], ["115", "131"], ["115", "130"], ["115", "139"], ["115", "124"], ["164", "167"], ["164", "164"], ["164", "171"], ["232", "232"], ["232", "239"], ["232", "235"], ["316", "316"], ["316", "321"], ["316", "320"], ["316", "325"], ["316", "318"], ["316", "333"], ["316", "327"], ["316", "330"], ["340", "340"], ["340", "347"], ["340", "343"], ["376", "376"], ["376", "378"], ["376", "389"], ["376", "386"], ["376", "381"], ["464", "480"], ["464", "464"], ["464", "488"], ["464", "486"], ["464", "471"], ["464", "478"], ["464", "485"], ["464", "489"], ["464", "467"], ["464", "473"], ["464", "474"], ["464", "483"], ["171", "209"], ["171", "186"], ["171", "180"], ["171", "176"], ["171", "178"], ["171", "183"], ["171", "210"], ["171", "211"], ["186", "196"], ["186", "204"], ["186", "186"], ["186", "200"], ["186", "199"], ["186", "198"], ["186", "189"], ["186", "191"], ["186", "205"], ["186", "193"], ["239", "283"], ["239", "256"], ["239", "281"], ["239", "254"], ["239", "282"], ["239", "244"], ["239", "246"], ["239", "251"], ["239", "248"], ["254", "256"], ["254", "268"], ["254", "274"], ["254", "254"], ["254", "278"], ["254", "269"], ["254", "261"], ["254", "275"], ["254", "259"], ["254", "270"], ["254", "263"], ["254", "266"], ["347", "358"], ["347", "362"], ["347", "364"], ["347", "360"], ["347", "351"], ["347", "366"], ["347", "352"], ["347", "354"], ["347", "350"], ["347", "363"], ["389", "392"], ["389", "396"], ["389", "389"], ["389", "402"], ["389", "397"], ["389", "398"], ["396", "410"], ["396", "407"], ["410", "410"], ["410", "413"], ["410", "417"], ["417", "424"], ["417", "423"], ["417", "422"], ["422", "450"], ["422", "430"], ["422", "446"], ["422", "443"], ["422", "455"], ["422", "453"], ["422", "439"], ["422", "451"], ["422", "432"], ["422", "431"], ["422", "436"], ["422", "438"], ["422", "445"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new MyScanner())<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new MyScanner())<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new MyScanner())<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.assignment,ANY out = new PrintWriter(new BufferedOutputStream(System.out)))<SUB>3</SUB>>", "30": "<(&lt;operator&gt;.alloc,new PrintWriter(new BufferedOutputStream(System.out)))<SUB>3</SUB>>", "5": "<(IDENTIFIER,out,new PrintWriter(new BufferedOutputStream(System.out)))<SUB>3</SUB>>", "33": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "35": "<(&lt;operator&gt;.alloc,new BufferedOutputStream(System.out))<SUB>3</SUB>>", "37": "<(IDENTIFIER,$obj1,new BufferedOutputStream(System.out))>", "39": "<(IDENTIFIER,System,new BufferedOutputStream(System.out))<SUB>3</SUB>>", "41": "<(IDENTIFIER,$obj1,&lt;empty&gt;)>", "43": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>4</SUB>>", "45": "<(nextInt,nextInt())<SUB>4</SUB>>", "47": "<(LOCAL,int m: int)<SUB>4</SUB>>", "49": "<(IDENTIFIER,m,int m = nextInt())<SUB>4</SUB>>", "51": "<(IDENTIFIER,sc,nextInt())<SUB>4</SUB>>", "53": "<(&lt;operator&gt;.assignment,long[][] mn1 = new long[n][n])<SUB>5</SUB>>", "55": "<(&lt;operator&gt;.alloc,new long[n][n])>", "57": "<(IDENTIFIER,n,new long[n][n])<SUB>5</SUB>>", "59": "<(&lt;operator&gt;.assignment,long[][] mn2 = new long[n][n])<SUB>6</SUB>>", "61": "<(&lt;operator&gt;.alloc,new long[n][n])>", "63": "<(IDENTIFIER,n,new long[n][n])<SUB>6</SUB>>", "65": "<(&lt;operator&gt;.assignment,long[][] grid = new long[n][m])<SUB>7</SUB>>", "67": "<(&lt;operator&gt;.alloc,new long[n][m])>", "69": "<(IDENTIFIER,m,new long[n][m])<SUB>7</SUB>>", "71": "<(LOCAL,int i: int)<SUB>8</SUB>>", "73": "<(IDENTIFIER,i,int i = 0)<SUB>8</SUB>>", "75": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>8</SUB>>", "77": "<(IDENTIFIER,n,i &lt; n)<SUB>8</SUB>>", "79": "<(IDENTIFIER,i,i++)<SUB>8</SUB>>", "81": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; m); j++),for (int j = 0; Some(j &lt; m); j++))<SUB>9</SUB>>", "83": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>9</SUB>>", "85": "<(LITERAL,0,int j = 0)<SUB>9</SUB>>", "87": "<(IDENTIFIER,j,j &lt; m)<SUB>9</SUB>>", "89": "<(&lt;operator&gt;.postIncrement,j++)<SUB>9</SUB>>", "91": "<(&lt;operator&gt;.assignment,grid[i][j] = nextInt())<SUB>9</SUB>>", "93": "<(&lt;operator&gt;.indexAccess,grid[i])<SUB>9</SUB>>", "95": "<(IDENTIFIER,i,grid[i][j] = nextInt())<SUB>9</SUB>>", "97": "<(nextInt,nextInt())<SUB>9</SUB>>", "99": "<(CONTROL_STRUCTURE,if (n == 1),if (n == 1))<SUB>11</SUB>>", "101": "<(IDENTIFIER,n,n == 1)<SUB>11</SUB>>", "103": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>11</SUB>>", "105": "<(&lt;operator&gt;.assignment,long ans = Integer.MAX_VALUE)<SUB>12</SUB>>", "107": "<(&lt;operator&gt;.fieldAccess,Integer.MAX_VALUE)<SUB>12</SUB>>", "109": "<(FIELD_IDENTIFIER,MAX_VALUE,MAX_VALUE)<SUB>12</SUB>>", "111": "<(LOCAL,int i: int)<SUB>13</SUB>>", "113": "<(IDENTIFIER,i,int i = 0)<SUB>13</SUB>>", "115": "<(&lt;operator&gt;.lessThan,i &lt; m - 1)<SUB>13</SUB>>", "117": "<(&lt;operator&gt;.subtraction,m - 1)<SUB>13</SUB>>", "119": "<(LITERAL,1,m - 1)<SUB>13</SUB>>", "121": "<(IDENTIFIER,i,i++)<SUB>13</SUB>>", "123": "<(IDENTIFIER,ans,ans = Math.min(ans, Math.abs(grid[0][i] - grid[0][i + 1])))<SUB>13</SUB>>", "125": "<(IDENTIFIER,Math,Math.min(ans, Math.abs(grid[0][i] - grid[0][i + 1])))<SUB>13</SUB>>", "127": "<(abs,Math.abs(grid[0][i] - grid[0][i + 1]))<SUB>13</SUB>>", "129": "<(&lt;operator&gt;.subtraction,grid[0][i] - grid[0][i + 1])<SUB>13</SUB>>", "131": "<(&lt;operator&gt;.indexAccess,grid[0])<SUB>13</SUB>>", "133": "<(LITERAL,0,grid[0][i] - grid[0][i + 1])<SUB>13</SUB>>", "135": "<(&lt;operator&gt;.indexAccess,grid[0][i + 1])<SUB>13</SUB>>", "137": "<(IDENTIFIER,grid,grid[0][i] - grid[0][i + 1])<SUB>13</SUB>>", "139": "<(&lt;operator&gt;.addition,i + 1)<SUB>13</SUB>>", "141": "<(LITERAL,1,i + 1)<SUB>13</SUB>>", "143": "<(IDENTIFIER,out,println(ans))<SUB>14</SUB>>", "145": "<(close,close())<SUB>15</SUB>>", "147": "<(RETURN,return;,return;)<SUB>16</SUB>>", "149": "<(LOCAL,int i: int)<SUB>18</SUB>>", "151": "<(IDENTIFIER,i,int i = 0)<SUB>18</SUB>>", "153": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>18</SUB>>", "155": "<(IDENTIFIER,n,i &lt; n)<SUB>18</SUB>>", "157": "<(IDENTIFIER,i,i++)<SUB>18</SUB>>", "159": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>19</SUB>>", "161": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>19</SUB>>", "163": "<(LITERAL,0,int j = 0)<SUB>19</SUB>>", "165": "<(IDENTIFIER,j,j &lt; n)<SUB>19</SUB>>", "167": "<(&lt;operator&gt;.postIncrement,j++)<SUB>19</SUB>>", "169": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>19</SUB>>", "171": "<(&lt;operator&gt;.equals,i == j)<SUB>20</SUB>>", "173": "<(IDENTIFIER,j,i == j)<SUB>20</SUB>>", "175": "<(LOCAL,long min: long)<SUB>21</SUB>>", "177": "<(IDENTIFIER,min,long min = Long.MAX_VALUE)<SUB>21</SUB>>", "179": "<(IDENTIFIER,Long,long min = Long.MAX_VALUE)<SUB>21</SUB>>", "181": "<(CONTROL_STRUCTURE,for (int k = 0; Some(k &lt; m); k++),for (int k = 0; Some(k &lt; m); k++))<SUB>22</SUB>>", "183": "<(&lt;operator&gt;.assignment,int k = 0)<SUB>22</SUB>>", "185": "<(LITERAL,0,int k = 0)<SUB>22</SUB>>", "187": "<(IDENTIFIER,k,k &lt; m)<SUB>22</SUB>>", "189": "<(&lt;operator&gt;.postIncrement,k++)<SUB>22</SUB>>", "191": "<(&lt;operator&gt;.assignment,min = Math.min(min, Math.abs(grid[i][k] - grid[j][k])))<SUB>22</SUB>>", "193": "<(min,Math.min(min, Math.abs(grid[i][k] - grid[j][k])))<SUB>22</SUB>>", "195": "<(IDENTIFIER,min,Math.min(min, Math.abs(grid[i][k] - grid[j][k])))<SUB>22</SUB>>", "197": "<(IDENTIFIER,Math,Math.abs(grid[i][k] - grid[j][k]))<SUB>22</SUB>>", "199": "<(&lt;operator&gt;.indexAccess,grid[i][k])<SUB>22</SUB>>", "201": "<(IDENTIFIER,grid,grid[i][k] - grid[j][k])<SUB>22</SUB>>", "203": "<(IDENTIFIER,k,grid[i][k] - grid[j][k])<SUB>22</SUB>>", "205": "<(&lt;operator&gt;.indexAccess,grid[j])<SUB>22</SUB>>", "207": "<(IDENTIFIER,j,grid[i][k] - grid[j][k])<SUB>22</SUB>>", "209": "<(&lt;operator&gt;.assignment,mn1[i][j] = min)<SUB>23</SUB>>", "211": "<(&lt;operator&gt;.indexAccess,mn1[i])<SUB>23</SUB>>", "213": "<(IDENTIFIER,i,mn1[i][j] = min)<SUB>23</SUB>>", "215": "<(IDENTIFIER,min,mn1[i][j] = min)<SUB>23</SUB>>", "217": "<(LOCAL,int i: int)<SUB>26</SUB>>", "219": "<(IDENTIFIER,i,int i = 0)<SUB>26</SUB>>", "221": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>26</SUB>>", "223": "<(IDENTIFIER,n,i &lt; n)<SUB>26</SUB>>", "225": "<(IDENTIFIER,i,i++)<SUB>26</SUB>>", "227": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>27</SUB>>", "229": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>27</SUB>>", "231": "<(LITERAL,0,int j = 0)<SUB>27</SUB>>", "233": "<(IDENTIFIER,j,j &lt; n)<SUB>27</SUB>>", "235": "<(&lt;operator&gt;.postIncrement,j++)<SUB>27</SUB>>", "237": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>27</SUB>>", "239": "<(&lt;operator&gt;.equals,i == j)<SUB>28</SUB>>", "241": "<(IDENTIFIER,j,i == j)<SUB>28</SUB>>", "243": "<(LOCAL,long min: long)<SUB>29</SUB>>", "245": "<(IDENTIFIER,min,long min = Long.MAX_VALUE)<SUB>29</SUB>>", "247": "<(IDENTIFIER,Long,long min = Long.MAX_VALUE)<SUB>29</SUB>>", "249": "<(CONTROL_STRUCTURE,for (int k = 0; Some(k &lt; m - 1); k++),for (int k = 0; Some(k &lt; m - 1); k++))<SUB>30</SUB>>", "251": "<(&lt;operator&gt;.assignment,int k = 0)<SUB>30</SUB>>", "253": "<(LITERAL,0,int k = 0)<SUB>30</SUB>>", "255": "<(IDENTIFIER,k,k &lt; m - 1)<SUB>30</SUB>>", "257": "<(IDENTIFIER,m,m - 1)<SUB>30</SUB>>", "259": "<(&lt;operator&gt;.postIncrement,k++)<SUB>30</SUB>>", "261": "<(&lt;operator&gt;.assignment,min = Math.min(min, Math.abs(grid[i][k] - grid[j][k + 1])))<SUB>30</SUB>>", "263": "<(min,Math.min(min, Math.abs(grid[i][k] - grid[j][k + 1])))<SUB>30</SUB>>", "265": "<(IDENTIFIER,min,Math.min(min, Math.abs(grid[i][k] - grid[j][k + 1])))<SUB>30</SUB>>", "267": "<(IDENTIFIER,Math,Math.abs(grid[i][k] - grid[j][k + 1]))<SUB>30</SUB>>", "269": "<(&lt;operator&gt;.indexAccess,grid[i][k])<SUB>30</SUB>>", "271": "<(IDENTIFIER,grid,grid[i][k] - grid[j][k + 1])<SUB>30</SUB>>", "273": "<(IDENTIFIER,k,grid[i][k] - grid[j][k + 1])<SUB>30</SUB>>", "275": "<(&lt;operator&gt;.indexAccess,grid[j])<SUB>30</SUB>>", "277": "<(IDENTIFIER,j,grid[i][k] - grid[j][k + 1])<SUB>30</SUB>>", "279": "<(IDENTIFIER,k,k + 1)<SUB>30</SUB>>", "281": "<(&lt;operator&gt;.assignment,mn2[i][j] = min)<SUB>31</SUB>>", "283": "<(&lt;operator&gt;.indexAccess,mn2[i])<SUB>31</SUB>>", "285": "<(IDENTIFIER,i,mn2[i][j] = min)<SUB>31</SUB>>", "287": "<(IDENTIFIER,min,mn2[i][j] = min)<SUB>31</SUB>>", "289": "<(&lt;operator&gt;.assignment,long[][] dp = new long[1 &lt;&lt; n][n])<SUB>34</SUB>>", "291": "<(&lt;operator&gt;.alloc,new long[1 &lt;&lt; n][n])>", "293": "<(LITERAL,1,1 &lt;&lt; n)<SUB>34</SUB>>", "295": "<(IDENTIFIER,n,new long[1 &lt;&lt; n][n])<SUB>34</SUB>>", "297": "<(&lt;operator&gt;.assignment,long ans = 0)<SUB>37</SUB>>", "299": "<(LITERAL,0,long ans = 0)<SUB>37</SUB>>", "301": "<(LOCAL,int i: int)<SUB>38</SUB>>", "303": "<(IDENTIFIER,i,int i = 0)<SUB>38</SUB>>", "305": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>38</SUB>>", "307": "<(IDENTIFIER,n,i &lt; n)<SUB>38</SUB>>", "309": "<(IDENTIFIER,i,i++)<SUB>38</SUB>>", "311": "<(CONTROL_STRUCTURE,&lt;empty&gt;,&lt;empty&gt;)>", "313": "<(&lt;operator&gt;.assignment,int $idx0 = 0)<SUB>39</SUB>>", "315": "<(LITERAL,0,int $idx0 = 0)<SUB>39</SUB>>", "317": "<(IDENTIFIER,$idx0,$idx0 &lt; dp.length)>", "319": "<(IDENTIFIER,dp,$idx0 &lt; dp.length)>", "321": "<(&lt;operator&gt;.postIncrement,$idx0++)<SUB>39</SUB>>", "323": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>39</SUB>>", "325": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)<SUB>39</SUB>>", "327": "<(&lt;operator&gt;.indexAccess,&lt;empty&gt;)<SUB>39</SUB>>", "329": "<(IDENTIFIER,$idx0,&lt;empty&gt;)>", "331": "<(IDENTIFIER,Arrays,fill(a, -1))<SUB>39</SUB>>", "333": "<(&lt;operator&gt;.minus,-1)<SUB>39</SUB>>", "335": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>40</SUB>>", "337": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>40</SUB>>", "339": "<(LITERAL,0,int j = 0)<SUB>40</SUB>>", "341": "<(IDENTIFIER,j,j &lt; n)<SUB>40</SUB>>", "343": "<(&lt;operator&gt;.postIncrement,j++)<SUB>40</SUB>>", "345": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>40</SUB>>", "347": "<(&lt;operator&gt;.equals,j == i)<SUB>41</SUB>>", "349": "<(IDENTIFIER,i,j == i)<SUB>41</SUB>>", "351": "<(&lt;operator&gt;.indexAccess,dp[1 &lt;&lt; j][j])<SUB>41</SUB>>", "353": "<(IDENTIFIER,dp,dp[1 &lt;&lt; j][j] = Long.MAX_VALUE)<SUB>41</SUB>>", "355": "<(LITERAL,1,1 &lt;&lt; j)<SUB>41</SUB>>", "357": "<(IDENTIFIER,j,dp[1 &lt;&lt; j][j] = Long.MAX_VALUE)<SUB>41</SUB>>", "359": "<(IDENTIFIER,Long,dp[1 &lt;&lt; j][j] = Long.MAX_VALUE)<SUB>41</SUB>>", "361": "<(CONTROL_STRUCTURE,else,else)<SUB>42</SUB>>", "363": "<(&lt;operator&gt;.indexAccess,dp[1 &lt;&lt; j][j])<SUB>42</SUB>>", "365": "<(IDENTIFIER,dp,dp[1 &lt;&lt; j][j] = 0)<SUB>42</SUB>>", "367": "<(LITERAL,1,1 &lt;&lt; j)<SUB>42</SUB>>", "369": "<(IDENTIFIER,j,dp[1 &lt;&lt; j][j] = 0)<SUB>42</SUB>>", "371": "<(CONTROL_STRUCTURE,for (int mask = 1; Some(mask &lt; (1 &lt;&lt; n)); mask++),for (int mask = 1; Some(mask &lt; (1 &lt;&lt; n)); mask++))<SUB>44</SUB>>", "373": "<(&lt;operator&gt;.assignment,int mask = 1)<SUB>44</SUB>>", "375": "<(LITERAL,1,int mask = 1)<SUB>44</SUB>>", "377": "<(IDENTIFIER,mask,mask &lt; (1 &lt;&lt; n))<SUB>44</SUB>>", "379": "<(LITERAL,1,1 &lt;&lt; n)<SUB>44</SUB>>", "381": "<(&lt;operator&gt;.postIncrement,mask++)<SUB>44</SUB>>", "383": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>44</SUB>>", "385": "<(LOCAL,int last: int)<SUB>45</SUB>>", "387": "<(IDENTIFIER,last,int last = 0)<SUB>45</SUB>>", "389": "<(&lt;operator&gt;.lessThan,last &lt; n)<SUB>45</SUB>>", "391": "<(IDENTIFIER,n,last &lt; n)<SUB>45</SUB>>", "393": "<(IDENTIFIER,last,last++)<SUB>45</SUB>>", "395": "<(CONTROL_STRUCTURE,if (dp[mask][last] != -1),if (dp[mask][last] != -1))<SUB>46</SUB>>", "397": "<(&lt;operator&gt;.indexAccess,dp[mask][last])<SUB>46</SUB>>", "399": "<(IDENTIFIER,dp,dp[mask][last] != -1)<SUB>46</SUB>>", "401": "<(IDENTIFIER,last,dp[mask][last] != -1)<SUB>46</SUB>>", "403": "<(LITERAL,1,-1)<SUB>46</SUB>>", "405": "<(CONTROL_STRUCTURE,for (int prev = 0; Some(prev &lt; n); prev++),for (int prev = 0; Some(prev &lt; n); prev++))<SUB>47</SUB>>", "407": "<(&lt;operator&gt;.assignment,int prev = 0)<SUB>47</SUB>>", "409": "<(LITERAL,0,int prev = 0)<SUB>47</SUB>>", "411": "<(IDENTIFIER,prev,prev &lt; n)<SUB>47</SUB>>", "413": "<(&lt;operator&gt;.postIncrement,prev++)<SUB>47</SUB>>", "415": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>47</SUB>>", "417": "<(&lt;operator&gt;.equals,prev == last)<SUB>48</SUB>>", "419": "<(IDENTIFIER,last,prev == last)<SUB>48</SUB>>", "421": "<(CONTROL_STRUCTURE,if (((mask &gt;&gt; prev) &amp; 1) == 1),if (((mask &gt;&gt; prev) &amp; 1) == 1))<SUB>49</SUB>>", "423": "<(&lt;operator&gt;.and,(mask &gt;&gt; prev) &amp; 1)<SUB>49</SUB>>", "425": "<(IDENTIFIER,mask,mask &gt;&gt; prev)<SUB>49</SUB>>", "427": "<(LITERAL,1,(mask &gt;&gt; prev) &amp; 1)<SUB>49</SUB>>", "429": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>49</SUB>>", "431": "<(&lt;operator&gt;.indexAccess,dp[mask][last])<SUB>50</SUB>>", "433": "<(IDENTIFIER,dp,dp[mask][last] = Math.max(dp[mask][last], Math.min(mn1[prev][last], dp[mask ^ (1 &lt;&lt; last)][prev])))<SUB>50</SUB>>", "435": "<(IDENTIFIER,last,dp[mask][last] = Math.max(dp[mask][last], Math.min(mn1[prev][last], dp[mask ^ (1 &lt;&lt; last)][prev])))<SUB>50</SUB>>", "437": "<(IDENTIFIER,Math,Math.max(dp[mask][last], Math.min(mn1[prev][last], dp[mask ^ (1 &lt;&lt; last)][prev])))<SUB>50</SUB>>", "439": "<(&lt;operator&gt;.indexAccess,dp[mask])<SUB>50</SUB>>", "441": "<(IDENTIFIER,mask,Math.max(dp[mask][last], Math.min(mn1[prev][last], dp[mask ^ (1 &lt;&lt; last)][prev])))<SUB>50</SUB>>", "443": "<(min,Math.min(mn1[prev][last], dp[mask ^ (1 &lt;&lt; last)][prev]))<SUB>50</SUB>>", "445": "<(&lt;operator&gt;.indexAccess,mn1[prev][last])<SUB>50</SUB>>", "447": "<(IDENTIFIER,mn1,Math.min(mn1[prev][last], dp[mask ^ (1 &lt;&lt; last)][prev]))<SUB>50</SUB>>", "449": "<(IDENTIFIER,last,Math.min(mn1[prev][last], dp[mask ^ (1 &lt;&lt; last)][prev]))<SUB>50</SUB>>", "451": "<(&lt;operator&gt;.indexAccess,dp[mask ^ (1 &lt;&lt; last)])<SUB>50</SUB>>", "453": "<(&lt;operator&gt;.xor,mask ^ (1 &lt;&lt; last))<SUB>50</SUB>>", "455": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; last)<SUB>50</SUB>>", "457": "<(IDENTIFIER,last,1 &lt;&lt; last)<SUB>50</SUB>>", "459": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>56</SUB>>", "461": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>56</SUB>>", "463": "<(LITERAL,0,int j = 0)<SUB>56</SUB>>", "465": "<(IDENTIFIER,j,j &lt; n)<SUB>56</SUB>>", "467": "<(&lt;operator&gt;.postIncrement,j++)<SUB>56</SUB>>", "469": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>56</SUB>>", "471": "<(&lt;operator&gt;.assignment,long end = mn2[j][i])<SUB>58</SUB>>", "473": "<(&lt;operator&gt;.indexAccess,mn2[j][i])<SUB>58</SUB>>", "475": "<(IDENTIFIER,mn2,long end = mn2[j][i])<SUB>58</SUB>>", "477": "<(IDENTIFIER,i,long end = mn2[j][i])<SUB>58</SUB>>", "479": "<(IDENTIFIER,ans,ans = Math.max(ans, Math.min(dp[(1 &lt;&lt; n) - 1][j], end)))<SUB>59</SUB>>", "481": "<(IDENTIFIER,Math,Math.max(ans, Math.min(dp[(1 &lt;&lt; n) - 1][j], end)))<SUB>59</SUB>>", "483": "<(min,Math.min(dp[(1 &lt;&lt; n) - 1][j], end))<SUB>59</SUB>>", "485": "<(&lt;operator&gt;.indexAccess,dp[(1 &lt;&lt; n) - 1][j])<SUB>59</SUB>>", "487": "<(IDENTIFIER,dp,Math.min(dp[(1 &lt;&lt; n) - 1][j], end))<SUB>59</SUB>>", "489": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; n)<SUB>59</SUB>>", "491": "<(IDENTIFIER,n,1 &lt;&lt; n)<SUB>59</SUB>>", "493": "<(IDENTIFIER,j,Math.min(dp[(1 &lt;&lt; n) - 1][j], end))<SUB>59</SUB>>", "495": "<(println,println(ans))<SUB>62</SUB>>", "497": "<(IDENTIFIER,ans,println(ans))<SUB>62</SUB>>", "499": "<(IDENTIFIER,out,close())<SUB>63</SUB>>", "501": "<(MODIFIER,STATIC)>"}}