{"edges": [["19", "20"], ["19", "21"], ["19", "286"], ["19", "287"], ["19", "288"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "36"], ["21", "37"], ["21", "38"], ["21", "45"], ["21", "52"], ["21", "59"], ["21", "66"], ["21", "71"], ["21", "104"], ["21", "111"], ["21", "118"], ["21", "128"], ["21", "170"], ["21", "212"], ["21", "241"], ["21", "256"], ["21", "259"], ["21", "284"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "30"], ["26", "35"], ["27", "28"], ["27", "29"], ["30", "31"], ["30", "32"], ["32", "33"], ["32", "34"], ["38", "39"], ["38", "40"], ["40", "41"], ["40", "44"], ["41", "42"], ["42", "43"], ["45", "46"], ["45", "47"], ["47", "48"], ["47", "49"], ["49", "50"], ["49", "51"], ["52", "53"], ["52", "54"], ["54", "55"], ["54", "56"], ["56", "57"], ["56", "58"], ["59", "60"], ["59", "61"], ["61", "62"], ["61", "63"], ["63", "64"], ["63", "65"], ["66", "67"], ["66", "68"], ["68", "69"], ["68", "70"], ["71", "72"], ["71", "75"], ["71", "78"], ["71", "80"], ["72", "73"], ["72", "74"], ["75", "76"], ["75", "77"], ["78", "79"], ["80", "81"], ["81", "82"], ["81", "83"], ["81", "86"], ["81", "89"], ["81", "91"], ["83", "84"], ["83", "85"], ["86", "87"], ["86", "88"], ["89", "90"], ["91", "92"], ["91", "97"], ["92", "93"], ["92", "96"], ["93", "94"], ["93", "95"], ["97", "98"], ["97", "101"], ["97", "103"], ["98", "99"], ["98", "100"], ["101", "102"], ["104", "105"], ["104", "106"], ["106", "107"], ["106", "108"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "113"], ["113", "114"], ["113", "117"], ["114", "115"], ["114", "116"], ["118", "119"], ["118", "120"], ["120", "121"], ["120", "122"], ["120", "123"], ["123", "124"], ["123", "127"], ["124", "125"], ["124", "126"], ["128", "129"], ["128", "132"], ["128", "135"], ["128", "137"], ["129", "130"], ["129", "131"], ["132", "133"], ["132", "134"], ["135", "136"], ["137", "138"], ["137", "145"], ["138", "139"], ["138", "140"], ["140", "141"], ["140", "144"], ["141", "142"], ["142", "143"], ["145", "146"], ["145", "147"], ["145", "150"], ["145", "155"], ["145", "157"], ["147", "148"], ["147", "149"], ["150", "151"], ["150", "152"], ["152", "153"], ["152", "154"], ["155", "156"], ["157", "158"], ["157", "163"], ["158", "159"], ["158", "162"], ["159", "160"], ["159", "161"], ["163", "164"], ["163", "169"], ["164", "165"], ["164", "166"], ["166", "167"], ["166", "168"], ["170", "171"], ["170", "174"], ["170", "179"], ["170", "181"], ["171", "172"], ["171", "173"], ["174", "175"], ["174", "176"], ["176", "177"], ["176", "178"], ["179", "180"], ["181", "182"], ["181", "189"], ["182", "183"], ["182", "184"], ["184", "185"], ["184", "188"], ["185", "186"], ["186", "187"], ["189", "190"], ["189", "191"], ["189", "194"], ["189", "197"], ["189", "199"], ["191", "192"], ["191", "193"], ["194", "195"], ["194", "196"], ["197", "198"], ["199", "200"], ["199", "205"], ["200", "201"], ["200", "204"], ["201", "202"], ["201", "203"], ["205", "206"], ["205", "211"], ["206", "207"], ["206", "208"], ["208", "209"], ["208", "210"], ["212", "213"], ["212", "216"], ["212", "219"], ["212", "221"], ["213", "214"], ["213", "215"], ["216", "217"], ["216", "218"], ["219", "220"], ["221", "222"], ["222", "223"], ["222", "224"], ["222", "227"], ["222", "230"], ["222", "232"], ["224", "225"], ["224", "226"], ["227", "228"], ["227", "229"], ["230", "231"], ["232", "233"], ["232", "234"], ["232", "239"], ["234", "235"], ["234", "238"], ["235", "236"], ["235", "237"], ["239", "240"], ["241", "242"], ["241", "247"], ["242", "243"], ["242", "246"], ["243", "244"], ["243", "245"], ["247", "248"], ["247", "251"], ["247", "253"], ["248", "249"], ["248", "250"], ["251", "252"], ["253", "254"], ["253", "255"], ["256", "257"], ["256", "258"], ["259", "260"], ["259", "263"], ["259", "266"], ["259", "268"], ["260", "261"], ["260", "262"], ["263", "264"], ["263", "265"], ["266", "267"], ["268", "269"], ["269", "270"], ["269", "271"], ["269", "274"], ["269", "277"], ["269", "279"], ["271", "272"], ["271", "273"], ["274", "275"], ["274", "276"], ["277", "278"], ["279", "280"], ["279", "281"], ["279", "282"], ["279", "283"], ["284", "285"], ["22", "29"], ["25", "42"], ["38", "49"], ["45", "56"], ["52", "63"], ["59", "68"], ["66", "72"], ["104", "114"], ["111", "124"], ["118", "129"], ["256", "260"], ["284", "288"], ["24", "22"], ["40", "38"], ["47", "45"], ["54", "52"], ["61", "59"], ["68", "66"], ["72", "75"], ["75", "83"], ["75", "108"], ["78", "75"], ["106", "104"], ["113", "111"], ["120", "118"], ["129", "132"], ["132", "142"], ["132", "171"], ["135", "132"], ["171", "176"], ["174", "186"], ["174", "213"], ["179", "176"], ["213", "216"], ["216", "224"], ["216", "243"], ["219", "216"], ["242", "248"], ["242", "256"], ["260", "263"], ["263", "271"], ["263", "284"], ["266", "263"], ["27", "34"], ["30", "25"], ["41", "40"], ["49", "47"], ["56", "54"], ["63", "61"], ["108", "106"], ["114", "113"], ["123", "120"], ["138", "147"], ["176", "174"], ["182", "191"], ["243", "242"], ["248", "251"], ["251", "253"], ["253", "256"], ["29", "27"], ["32", "30"], ["42", "41"], ["83", "86"], ["86", "93"], ["86", "78"], ["89", "86"], ["91", "89"], ["124", "123"], ["140", "138"], ["147", "152"], ["150", "159"], ["150", "135"], ["155", "152"], ["157", "155"], ["184", "182"], ["191", "194"], ["194", "201"], ["194", "179"], ["197", "194"], ["199", "197"], ["224", "227"], ["227", "235"], ["227", "219"], ["230", "227"], ["232", "230"], ["271", "274"], ["274", "279"], ["274", "266"], ["277", "274"], ["279", "277"], ["34", "32"], ["92", "100"], ["141", "140"], ["152", "150"], ["158", "166"], ["163", "157"], ["185", "184"], ["200", "208"], ["205", "199"], ["234", "239"], ["239", "232"], ["93", "92"], ["98", "101"], ["101", "91"], ["142", "141"], ["159", "158"], ["164", "163"], ["186", "185"], ["201", "200"], ["206", "205"], ["235", "234"], ["100", "98"], ["166", "164"], ["208", "206"], ["19", "24"], ["20", "288"], ["22", "288"], ["27", "288"], ["30", "288"], ["30", "288"], ["30", "288"], ["25", "288"], ["38", "288"], ["42", "288"], ["41", "288"], ["40", "288"], ["38", "288"], ["38", "288"], ["47", "288"], ["45", "288"], ["45", "288"], ["54", "288"], ["52", "288"], ["52", "288"], ["61", "288"], ["61", "288"], ["59", "288"], ["59", "288"], ["66", "288"], ["66", "288"], ["66", "288"], ["104", "288"], ["106", "288"], ["104", "288"], ["104", "288"], ["111", "288"], ["111", "288"], ["111", "288"], ["118", "288"], ["120", "288"], ["123", "288"], ["120", "288"], ["118", "288"], ["118", "288"], ["174", "288"], ["174", "288"], ["242", "288"], ["242", "288"], ["253", "288"], ["253", "288"], ["256", "288"], ["256", "288"], ["260", "288"], ["263", "288"], ["263", "288"], ["263", "288"], ["284", "288"], ["284", "288"], ["271", "288"], ["274", "288"], ["274", "288"], ["274", "288"], ["266", "288"], ["279", "288"], ["279", "288"], ["277", "288"], ["224", "288"], ["227", "288"], ["227", "288"], ["227", "288"], ["219", "288"], ["232", "288"], ["232", "288"], ["232", "288"], ["230", "288"], ["182", "288"], ["186", "288"], ["185", "288"], ["184", "288"], ["182", "288"], ["182", "288"], ["191", "288"], ["194", "288"], ["194", "288"], ["194", "288"], ["179", "288"], ["199", "288"], ["206", "288"], ["206", "288"], ["205", "288"], ["199", "288"], ["199", "288"], ["197", "288"], ["138", "288"], ["142", "288"], ["141", "288"], ["140", "288"], ["138", "288"], ["138", "288"], ["147", "288"], ["150", "288"], ["152", "288"], ["150", "288"], ["150", "288"], ["135", "288"], ["157", "288"], ["164", "288"], ["164", "288"], ["163", "288"], ["157", "288"], ["157", "288"], ["155", "288"], ["83", "288"], ["86", "288"], ["86", "288"], ["78", "288"], ["91", "288"], ["98", "288"], ["101", "288"], ["101", "288"], ["91", "288"], ["89", "288"], ["232", "288"], ["19", "20"], ["19", "22"], ["40", "38"], ["40", "38"], ["47", "45"], ["47", "45"], ["54", "52"], ["54", "52"], ["61", "59"], ["61", "59"], ["68", "66"], ["68", "66"], ["106", "104"], ["106", "104"], ["113", "111"], ["113", "111"], ["120", "118"], ["120", "118"], ["120", "118"], ["19", "256"], ["22", "25"], ["19", "25"], ["27", "25"], ["30", "25"], ["19", "72"], ["19", "129"], ["19", "171"], ["19", "213"], ["243", "256"], ["248", "256"], ["19", "260"], ["251", "284"], ["279", "284"], ["19", "284"], ["19", "27"], ["19", "35"], ["41", "40"], ["19", "40"], ["19", "47"], ["38", "47"], ["47", "54"], ["19", "54"], ["38", "54"], ["54", "61"], ["19", "61"], ["38", "61"], ["45", "68"], ["19", "68"], ["52", "68"], ["72", "75"], ["78", "75"], ["19", "75"], ["68", "75"], ["75", "78"], ["19", "78"], ["75", "106"], ["19", "106"], ["108", "106"], ["108", "106"], ["114", "113"], ["114", "113"], ["108", "113"], ["19", "113"], ["114", "120"], ["19", "120"], ["113", "120"], ["124", "120"], ["124", "120"], ["129", "132"], ["135", "132"], ["19", "132"], ["120", "132"], ["132", "135"], ["19", "135"], ["140", "138"], ["140", "138"], ["171", "174"], ["179", "174"], ["19", "174"], ["176", "174"], ["176", "174"], ["174", "179"], ["19", "179"], ["184", "182"], ["184", "182"], ["213", "216"], ["219", "216"], ["19", "216"], ["176", "216"], ["216", "219"], ["19", "219"], ["243", "242"], ["243", "242"], ["19", "242"], ["19", "248"], ["260", "263"], ["266", "263"], ["19", "263"], ["216", "263"], ["263", "266"], ["279", "266"], ["19", "266"], ["27", "30"], ["19", "30"], ["42", "41"], ["19", "83"], ["98", "91"], ["101", "91"], ["19", "91"], ["68", "108"], ["86", "108"], ["19", "108"], ["106", "114"], ["19", "114"], ["124", "123"], ["124", "123"], ["19", "123"], ["19", "147"], ["163", "157"], ["163", "157"], ["132", "176"], ["19", "176"], ["19", "191"], ["205", "199"], ["205", "199"], ["19", "224"], ["124", "243"], ["19", "243"], ["243", "248"], ["19", "251"], ["30", "253"], ["19", "253"], ["19", "271"], ["25", "42"], ["19", "42"], ["83", "86"], ["89", "86"], ["19", "86"], ["68", "86"], ["86", "89"], ["19", "89"], ["59", "124"], ["19", "124"], ["141", "140"], ["19", "140"], ["147", "150"], ["155", "150"], ["19", "150"], ["152", "150"], ["152", "150"], ["150", "155"], ["19", "155"], ["185", "184"], ["19", "184"], ["191", "194"], ["197", "194"], ["19", "194"], ["120", "194"], ["152", "194"], ["194", "197"], ["19", "197"], ["224", "227"], ["230", "227"], ["19", "227"], ["120", "227"], ["194", "227"], ["152", "227"], ["227", "230"], ["19", "230"], ["19", "232"], ["239", "232"], ["271", "274"], ["277", "274"], ["19", "274"], ["120", "274"], ["227", "274"], ["194", "274"], ["152", "274"], ["279", "277"], ["19", "277"], ["251", "279"], ["19", "279"], ["263", "279"], ["274", "279"], ["256", "279"], ["19", "98"], ["19", "103"], ["142", "141"], ["120", "152"], ["19", "152"], ["164", "163"], ["164", "163"], ["19", "163"], ["186", "185"], ["206", "205"], ["206", "205"], ["19", "205"], ["19", "239"], ["98", "101"], ["19", "101"], ["42", "142"], ["19", "142"], ["61", "164"], ["19", "164"], ["138", "164"], ["42", "186"], ["142", "186"], ["19", "186"], ["61", "206"], ["164", "206"], ["19", "206"], ["182", "206"], ["164", "206"], ["75", "75"], ["75", "86"], ["75", "83"], ["75", "78"], ["132", "132"], ["132", "150"], ["132", "138"], ["132", "152"], ["132", "141"], ["132", "142"], ["132", "140"], ["132", "147"], ["132", "135"], ["174", "179"], ["174", "185"], ["174", "191"], ["174", "184"], ["174", "174"], ["174", "194"], ["174", "182"], ["174", "186"], ["174", "176"], ["216", "224"], ["216", "216"], ["216", "227"], ["216", "219"], ["242", "251"], ["242", "253"], ["242", "248"], ["263", "274"], ["263", "263"], ["263", "271"], ["263", "266"], ["86", "98"], ["86", "92"], ["86", "91"], ["86", "93"], ["86", "101"], ["86", "100"], ["86", "86"], ["86", "89"], ["150", "163"], ["150", "150"], ["150", "152"], ["150", "164"], ["150", "155"], ["150", "158"], ["150", "166"], ["150", "157"], ["150", "159"], ["194", "197"], ["194", "206"], ["194", "208"], ["194", "194"], ["194", "201"], ["194", "205"], ["194", "200"], ["194", "199"], ["227", "230"], ["227", "232"], ["227", "239"], ["227", "235"], ["227", "234"], ["227", "227"], ["274", "279"], ["274", "274"], ["274", "277"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY br = new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "24": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "3": "<(IDENTIFIER,br,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "27": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "29": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>3</SUB>>", "31": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "33": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>3</SUB>>", "35": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "37": "<(LOCAL,String[] s: java.lang.String[])<SUB>7</SUB>>", "39": "<(IDENTIFIER,s,String[] s = split(&quot; &quot;))<SUB>7</SUB>>", "41": "<(trim,trim())<SUB>7</SUB>>", "43": "<(IDENTIFIER,br,readLine())<SUB>7</SUB>>", "45": "<(&lt;operator&gt;.assignment,N = Integer.parseInt(s[0]))<SUB>8</SUB>>", "47": "<(parseInt,Integer.parseInt(s[0]))<SUB>8</SUB>>", "49": "<(&lt;operator&gt;.indexAccess,s[0])<SUB>8</SUB>>", "51": "<(LITERAL,0,Integer.parseInt(s[0]))<SUB>8</SUB>>", "53": "<(IDENTIFIER,M,M = Integer.parseInt(s[1]))<SUB>9</SUB>>", "55": "<(IDENTIFIER,Integer,Integer.parseInt(s[1]))<SUB>9</SUB>>", "57": "<(IDENTIFIER,s,Integer.parseInt(s[1]))<SUB>9</SUB>>", "59": "<(&lt;operator&gt;.assignment,K = Integer.parseInt(s[2]))<SUB>10</SUB>>", "61": "<(parseInt,Integer.parseInt(s[2]))<SUB>10</SUB>>", "63": "<(&lt;operator&gt;.indexAccess,s[2])<SUB>10</SUB>>", "65": "<(LITERAL,2,Integer.parseInt(s[2]))<SUB>10</SUB>>", "67": "<(IDENTIFIER,edge,edge = new ArrayDeque[N][M])<SUB>12</SUB>>", "69": "<(IDENTIFIER,N,new ArrayDeque[N][M])<SUB>12</SUB>>", "71": "<(CONTROL_STRUCTURE,for (i = 0; Some(i &lt; N); i++),for (i = 0; Some(i &lt; N); i++))<SUB>13</SUB>>", "73": "<(IDENTIFIER,i,i = 0)<SUB>13</SUB>>", "75": "<(&lt;operator&gt;.lessThan,i &lt; N)<SUB>13</SUB>>", "77": "<(IDENTIFIER,N,i &lt; N)<SUB>13</SUB>>", "79": "<(IDENTIFIER,i,i++)<SUB>13</SUB>>", "81": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; M); j++),for (int j = 0; Some(j &lt; M); j++))<SUB>15</SUB>>", "83": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>15</SUB>>", "85": "<(LITERAL,0,int j = 0)<SUB>15</SUB>>", "87": "<(IDENTIFIER,j,j &lt; M)<SUB>15</SUB>>", "89": "<(&lt;operator&gt;.postIncrement,j++)<SUB>15</SUB>>", "91": "<(&lt;operator&gt;.assignment,edge[i][j] = new ArrayDeque&lt;&gt;())<SUB>16</SUB>>", "93": "<(&lt;operator&gt;.indexAccess,edge[i])<SUB>16</SUB>>", "95": "<(IDENTIFIER,i,edge[i][j] = new ArrayDeque&lt;&gt;())<SUB>16</SUB>>", "97": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>16</SUB>>", "99": "<(IDENTIFIER,$obj2,&lt;empty&gt;)>", "101": "<(&lt;init&gt;,new ArrayDeque&lt;&gt;())<SUB>16</SUB>>", "103": "<(IDENTIFIER,$obj2,&lt;empty&gt;)>", "105": "<(IDENTIFIER,w1,w1 = new long[N][M - 1])<SUB>19</SUB>>", "107": "<(IDENTIFIER,N,new long[N][M - 1])<SUB>19</SUB>>", "109": "<(IDENTIFIER,M,M - 1)<SUB>19</SUB>>", "111": "<(&lt;operator&gt;.assignment,w2 = new long[N - 1][M])<SUB>20</SUB>>", "113": "<(&lt;operator&gt;.alloc,new long[N - 1][M])>", "115": "<(IDENTIFIER,N,N - 1)<SUB>20</SUB>>", "117": "<(IDENTIFIER,M,new long[N - 1][M])<SUB>20</SUB>>", "119": "<(IDENTIFIER,dp,dp = new long[N][M][K / 2 + 1])<SUB>21</SUB>>", "121": "<(IDENTIFIER,N,new long[N][M][K / 2 + 1])<SUB>21</SUB>>", "123": "<(&lt;operator&gt;.addition,K / 2 + 1)<SUB>21</SUB>>", "125": "<(IDENTIFIER,K,K / 2)<SUB>21</SUB>>", "127": "<(LITERAL,1,K / 2 + 1)<SUB>21</SUB>>", "129": "<(&lt;operator&gt;.assignment,i = 0)<SUB>23</SUB>>", "131": "<(LITERAL,0,i = 0)<SUB>23</SUB>>", "133": "<(IDENTIFIER,i,i &lt; N)<SUB>23</SUB>>", "135": "<(&lt;operator&gt;.postIncrement,i++)<SUB>23</SUB>>", "137": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>24</SUB>>", "139": "<(IDENTIFIER,s,s = split(&quot; &quot;))<SUB>25</SUB>>", "141": "<(trim,trim())<SUB>25</SUB>>", "143": "<(IDENTIFIER,br,readLine())<SUB>25</SUB>>", "145": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; M - 1); j++),for (int j = 0; Some(j &lt; M - 1); j++))<SUB>26</SUB>>", "147": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>26</SUB>>", "149": "<(LITERAL,0,int j = 0)<SUB>26</SUB>>", "151": "<(IDENTIFIER,j,j &lt; M - 1)<SUB>26</SUB>>", "153": "<(IDENTIFIER,M,M - 1)<SUB>26</SUB>>", "155": "<(&lt;operator&gt;.postIncrement,j++)<SUB>26</SUB>>", "157": "<(&lt;operator&gt;.assignment,w1[i][j] = Integer.parseInt(s[j]) * 2L)<SUB>26</SUB>>", "159": "<(&lt;operator&gt;.indexAccess,w1[i])<SUB>26</SUB>>", "161": "<(IDENTIFIER,i,w1[i][j] = Integer.parseInt(s[j]) * 2L)<SUB>26</SUB>>", "163": "<(&lt;operator&gt;.multiplication,Integer.parseInt(s[j]) * 2L)<SUB>26</SUB>>", "165": "<(IDENTIFIER,Integer,Integer.parseInt(s[j]))<SUB>26</SUB>>", "167": "<(IDENTIFIER,s,Integer.parseInt(s[j]))<SUB>26</SUB>>", "169": "<(LITERAL,2L,Integer.parseInt(s[j]) * 2L)<SUB>26</SUB>>", "171": "<(&lt;operator&gt;.assignment,i = 0)<SUB>28</SUB>>", "173": "<(LITERAL,0,i = 0)<SUB>28</SUB>>", "175": "<(IDENTIFIER,i,i &lt; N - 1)<SUB>28</SUB>>", "177": "<(IDENTIFIER,N,N - 1)<SUB>28</SUB>>", "179": "<(&lt;operator&gt;.postIncrement,i++)<SUB>28</SUB>>", "181": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>29</SUB>>", "183": "<(IDENTIFIER,s,s = split(&quot; &quot;))<SUB>30</SUB>>", "185": "<(trim,trim())<SUB>30</SUB>>", "187": "<(IDENTIFIER,br,readLine())<SUB>30</SUB>>", "189": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; M); j++),for (int j = 0; Some(j &lt; M); j++))<SUB>31</SUB>>", "191": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>31</SUB>>", "193": "<(LITERAL,0,int j = 0)<SUB>31</SUB>>", "195": "<(IDENTIFIER,j,j &lt; M)<SUB>31</SUB>>", "197": "<(&lt;operator&gt;.postIncrement,j++)<SUB>31</SUB>>", "199": "<(&lt;operator&gt;.assignment,w2[i][j] = Integer.parseInt(s[j]) * 2L)<SUB>31</SUB>>", "201": "<(&lt;operator&gt;.indexAccess,w2[i])<SUB>31</SUB>>", "203": "<(IDENTIFIER,i,w2[i][j] = Integer.parseInt(s[j]) * 2L)<SUB>31</SUB>>", "205": "<(&lt;operator&gt;.multiplication,Integer.parseInt(s[j]) * 2L)<SUB>31</SUB>>", "207": "<(IDENTIFIER,Integer,Integer.parseInt(s[j]))<SUB>31</SUB>>", "209": "<(IDENTIFIER,s,Integer.parseInt(s[j]))<SUB>31</SUB>>", "211": "<(LITERAL,2L,Integer.parseInt(s[j]) * 2L)<SUB>31</SUB>>", "213": "<(&lt;operator&gt;.assignment,i = 0)<SUB>34</SUB>>", "215": "<(LITERAL,0,i = 0)<SUB>34</SUB>>", "217": "<(IDENTIFIER,i,i &lt; N)<SUB>34</SUB>>", "219": "<(&lt;operator&gt;.postIncrement,i++)<SUB>34</SUB>>", "221": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>35</SUB>>", "223": "<(LOCAL,int j: int)<SUB>36</SUB>>", "225": "<(IDENTIFIER,j,int j = 0)<SUB>36</SUB>>", "227": "<(&lt;operator&gt;.lessThan,j &lt; M)<SUB>36</SUB>>", "229": "<(IDENTIFIER,M,j &lt; M)<SUB>36</SUB>>", "231": "<(IDENTIFIER,j,j++)<SUB>36</SUB>>", "233": "<(IDENTIFIER,Arrays,fill(dp[i][j], -1))<SUB>37</SUB>>", "235": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>37</SUB>>", "237": "<(IDENTIFIER,i,fill(dp[i][j], -1))<SUB>37</SUB>>", "239": "<(&lt;operator&gt;.minus,-1)<SUB>37</SUB>>", "241": "<(CONTROL_STRUCTURE,if (K % 2 == 1),if (K % 2 == 1))<SUB>40</SUB>>", "243": "<(&lt;operator&gt;.modulo,K % 2)<SUB>40</SUB>>", "245": "<(LITERAL,2,K % 2)<SUB>40</SUB>>", "247": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>41</SUB>>", "249": "<(IDENTIFIER,K,K /= 2)<SUB>42</SUB>>", "251": "<(answer,answer())<SUB>43</SUB>>", "253": "<(exit,System.exit(0))<SUB>44</SUB>>", "255": "<(LITERAL,0,System.exit(0))<SUB>44</SUB>>", "257": "<(IDENTIFIER,K,K /= 2)<SUB>47</SUB>>", "259": "<(CONTROL_STRUCTURE,for (i = 0; Some(i &lt; N); i++),for (i = 0; Some(i &lt; N); i++))<SUB>48</SUB>>", "261": "<(IDENTIFIER,i,i = 0)<SUB>48</SUB>>", "263": "<(&lt;operator&gt;.lessThan,i &lt; N)<SUB>48</SUB>>", "265": "<(IDENTIFIER,N,i &lt; N)<SUB>48</SUB>>", "267": "<(IDENTIFIER,i,i++)<SUB>48</SUB>>", "269": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; M); j++),for (int j = 0; Some(j &lt; M); j++))<SUB>50</SUB>>", "271": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>50</SUB>>", "273": "<(LITERAL,0,int j = 0)<SUB>50</SUB>>", "275": "<(IDENTIFIER,j,j &lt; M)<SUB>50</SUB>>", "277": "<(&lt;operator&gt;.postIncrement,j++)<SUB>50</SUB>>", "279": "<(solve,solve(i, j, K))<SUB>51</SUB>>", "281": "<(IDENTIFIER,i,solve(i, j, K))<SUB>51</SUB>>", "283": "<(IDENTIFIER,K,solve(i, j, K))<SUB>51</SUB>>", "285": "<(IDENTIFIER,this,answer())<SUB>54</SUB>>", "287": "<(MODIFIER,STATIC)>"}}