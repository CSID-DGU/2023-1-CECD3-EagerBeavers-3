{"edges": [["19", "20"], ["19", "21"], ["19", "68"], ["19", "69"], ["19", "70"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "61"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["39", "40"], ["39", "41"], ["39", "44"], ["39", "47"], ["39", "49"], ["41", "42"], ["41", "43"], ["44", "45"], ["44", "46"], ["47", "48"], ["49", "50"], ["50", "51"], ["50", "54"], ["51", "52"], ["51", "53"], ["54", "55"], ["54", "59"], ["54", "60"], ["55", "56"], ["55", "58"], ["56", "57"], ["61", "62"], ["61", "65"], ["62", "63"], ["62", "64"], ["65", "66"], ["65", "67"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "41"], ["61", "70"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["41", "44"], ["44", "51"], ["44", "64"], ["47", "44"], ["62", "65"], ["65", "61"], ["28", "26"], ["50", "47"], ["64", "62"], ["51", "56"], ["54", "50"], ["55", "54"], ["56", "55"], ["19", "24"], ["20", "70"], ["22", "70"], ["25", "70"], ["25", "70"], ["32", "70"], ["30", "70"], ["30", "70"], ["35", "70"], ["35", "70"], ["41", "70"], ["44", "70"], ["44", "70"], ["44", "70"], ["61", "70"], ["65", "70"], ["61", "70"], ["61", "70"], ["50", "70"], ["56", "70"], ["55", "70"], ["54", "70"], ["50", "70"], ["50", "70"], ["47", "70"], ["65", "70"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["22", "25"], ["19", "25"], ["19", "41"], ["65", "61"], ["65", "61"], ["25", "32"], ["19", "32"], ["30", "37"], ["19", "37"], ["41", "44"], ["47", "44"], ["19", "44"], ["37", "44"], ["44", "47"], ["19", "47"], ["19", "50"], ["19", "65"], ["35", "65"], ["50", "65"], ["19", "54"], ["56", "55"], ["19", "55"], ["32", "56"], ["19", "56"], ["44", "47"], ["44", "50"], ["44", "51"], ["44", "44"], ["44", "55"], ["44", "56"], ["44", "54"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY in = new Scanner(System.in))<SUB>3</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>3</SUB>>", "3": "<(IDENTIFIER,in,new Scanner(System.in))<SUB>3</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>3</SUB>>", "29": "<(LOCAL,int n: int)<SUB>4</SUB>>", "31": "<(IDENTIFIER,n,int n = nextInt())<SUB>4</SUB>>", "33": "<(IDENTIFIER,in,nextInt())<SUB>4</SUB>>", "35": "<(&lt;operator&gt;.assignment,boolean[] lst = new boolean[n])<SUB>5</SUB>>", "37": "<(&lt;operator&gt;.alloc,new boolean[n])>", "39": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>6</SUB>>", "41": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>6</SUB>>", "43": "<(LITERAL,0,int i = 0)<SUB>6</SUB>>", "45": "<(IDENTIFIER,i,i &lt; n)<SUB>6</SUB>>", "47": "<(&lt;operator&gt;.postIncrement,i++)<SUB>6</SUB>>", "49": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>7</SUB>>", "51": "<(&lt;operator&gt;.indexAccess,lst[i])<SUB>8</SUB>>", "53": "<(IDENTIFIER,i,lst[i] = (in.next().equals(&quot;s&quot;)) ? false : true)<SUB>8</SUB>>", "55": "<(equals,equals(&quot;s&quot;))<SUB>8</SUB>>", "57": "<(IDENTIFIER,in,next())<SUB>8</SUB>>", "59": "<(LITERAL,false,(in.next().equals(&quot;s&quot;)) ? false : true)<SUB>8</SUB>>", "61": "<(println,println(dp(lst)))<SUB>10</SUB>>", "63": "<(IDENTIFIER,System,println(dp(lst)))<SUB>10</SUB>>", "65": "<(dp,dp(lst))<SUB>10</SUB>>", "67": "<(IDENTIFIER,lst,dp(lst))<SUB>10</SUB>>", "69": "<(MODIFIER,STATIC)>"}}