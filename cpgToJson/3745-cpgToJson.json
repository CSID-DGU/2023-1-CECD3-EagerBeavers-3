{"edges": [["21", "23"], ["21", "315"], ["21", "316"], ["21", "317"], ["23", "24"], ["23", "4"], ["23", "27"], ["23", "30"], ["23", "6"], ["23", "31"], ["23", "34"], ["23", "38"], ["23", "39"], ["23", "43"], ["23", "44"], ["23", "49"], ["23", "50"], ["23", "54"], ["23", "55"], ["23", "61"], ["23", "62"], ["23", "65"], ["23", "147"], ["23", "148"], ["23", "157"], ["23", "164"], ["23", "165"], ["23", "168"], ["23", "306"], ["23", "313"], ["24", "25"], ["24", "26"], ["27", "28"], ["27", "29"], ["30", "3"], ["31", "32"], ["31", "33"], ["34", "5"], ["34", "35"], ["35", "36"], ["35", "37"], ["39", "40"], ["39", "41"], ["41", "42"], ["44", "45"], ["44", "46"], ["46", "47"], ["46", "48"], ["50", "51"], ["50", "52"], ["52", "53"], ["55", "56"], ["55", "57"], ["57", "58"], ["58", "59"], ["58", "60"], ["62", "63"], ["62", "64"], ["65", "66"], ["65", "67"], ["65", "70"], ["65", "73"], ["65", "75"], ["67", "68"], ["67", "69"], ["70", "71"], ["70", "72"], ["73", "74"], ["75", "76"], ["76", "77"], ["76", "81"], ["77", "78"], ["78", "79"], ["78", "80"], ["81", "82"], ["81", "87"], ["81", "88"], ["81", "91"], ["81", "141"], ["82", "83"], ["82", "86"], ["83", "84"], ["83", "85"], ["88", "89"], ["88", "90"], ["91", "92"], ["91", "93"], ["91", "98"], ["91", "101"], ["91", "103"], ["93", "94"], ["93", "95"], ["95", "96"], ["95", "97"], ["98", "99"], ["98", "100"], ["101", "102"], ["103", "104"], ["103", "105"], ["103", "114"], ["103", "115"], ["103", "122"], ["105", "106"], ["105", "107"], ["107", "108"], ["107", "111"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "113"], ["115", "116"], ["115", "117"], ["117", "118"], ["117", "119"], ["119", "120"], ["119", "121"], ["122", "123"], ["122", "133"], ["123", "124"], ["123", "128"], ["124", "125"], ["125", "126"], ["125", "127"], ["128", "129"], ["128", "130"], ["130", "131"], ["130", "132"], ["133", "134"], ["133", "139"], ["134", "135"], ["134", "138"], ["135", "136"], ["135", "137"], ["139", "140"], ["141", "142"], ["141", "146"], ["142", "143"], ["142", "144"], ["144", "145"], ["148", "149"], ["148", "150"], ["150", "151"], ["150", "154"], ["151", "152"], ["151", "153"], ["154", "155"], ["154", "156"], ["157", "158"], ["157", "163"], ["158", "159"], ["158", "162"], ["159", "160"], ["159", "161"], ["165", "166"], ["165", "167"], ["168", "169"], ["168", "170"], ["168", "173"], ["168", "176"], ["168", "178"], ["170", "171"], ["170", "172"], ["173", "174"], ["173", "175"], ["176", "177"], ["178", "179"], ["178", "180"], ["178", "185"], ["178", "303"], ["180", "181"], ["180", "182"], ["182", "183"], ["182", "184"], ["185", "186"], ["185", "187"], ["185", "190"], ["185", "198"], ["185", "200"], ["187", "188"], ["187", "189"], ["190", "191"], ["190", "192"], ["192", "193"], ["192", "194"], ["192", "195"], ["195", "196"], ["195", "197"], ["198", "199"], ["200", "201"], ["201", "202"], ["201", "203"], ["201", "206"], ["201", "212"], ["201", "214"], ["203", "204"], ["203", "205"], ["206", "207"], ["206", "208"], ["208", "209"], ["208", "210"], ["208", "211"], ["212", "213"], ["214", "215"], ["215", "216"], ["215", "217"], ["215", "223"], ["215", "231"], ["215", "233"], ["217", "218"], ["217", "219"], ["219", "220"], ["219", "221"], ["219", "222"], ["223", "224"], ["223", "225"], ["225", "226"], ["225", "227"], ["225", "228"], ["228", "229"], ["228", "230"], ["231", "232"], ["233", "234"], ["233", "235"], ["233", "240"], ["233", "241"], ["233", "280"], ["233", "281"], ["233", "288"], ["235", "236"], ["235", "237"], ["237", "238"], ["237", "239"], ["241", "242"], ["241", "243"], ["243", "244"], ["243", "245"], ["243", "250"], ["243", "261"], ["243", "270"], ["243", "273"], ["245", "246"], ["245", "249"], ["246", "247"], ["246", "248"], ["250", "251"], ["250", "258"], ["251", "252"], ["251", "253"], ["253", "254"], ["253", "257"], ["254", "255"], ["254", "256"], ["258", "259"], ["258", "260"], ["261", "262"], ["261", "267"], ["262", "263"], ["262", "264"], ["264", "265"], ["264", "266"], ["267", "268"], ["267", "269"], ["270", "271"], ["270", "272"], ["273", "274"], ["273", "279"], ["274", "275"], ["274", "276"], ["276", "277"], ["276", "278"], ["281", "282"], ["281", "283"], ["283", "284"], ["283", "287"], ["284", "285"], ["284", "286"], ["288", "289"], ["288", "294"], ["289", "290"], ["289", "293"], ["290", "291"], ["290", "292"], ["294", "295"], ["294", "302"], ["295", "296"], ["295", "301"], ["296", "297"], ["296", "300"], ["297", "298"], ["297", "299"], ["303", "304"], ["303", "305"], ["306", "307"], ["306", "308"], ["308", "309"], ["308", "312"], ["309", "310"], ["309", "311"], ["313", "314"], ["24", "29"], ["27", "30"], ["30", "33"], ["31", "37"], ["34", "41"], ["39", "46"], ["44", "52"], ["50", "58"], ["55", "62"], ["62", "67"], ["148", "159"], ["157", "165"], ["165", "170"], ["306", "313"], ["313", "317"], ["29", "27"], ["33", "31"], ["35", "34"], ["41", "39"], ["46", "44"], ["52", "50"], ["57", "55"], ["67", "70"], ["70", "78"], ["70", "151"], ["73", "70"], ["150", "148"], ["158", "157"], ["170", "173"], ["173", "182"], ["173", "309"], ["176", "173"], ["308", "306"], ["37", "35"], ["58", "57"], ["151", "154"], ["154", "150"], ["159", "158"], ["180", "187"], ["303", "176"], ["309", "308"], ["77", "83"], ["77", "73"], ["182", "180"], ["187", "195"], ["190", "203"], ["190", "303"], ["198", "195"], ["78", "77"], ["82", "88"], ["88", "95"], ["141", "73"], ["192", "190"], ["83", "82"], ["93", "98"], ["98", "108"], ["98", "144"], ["101", "98"], ["142", "141"], ["195", "192"], ["203", "208"], ["206", "219"], ["206", "198"], ["212", "208"], ["95", "93"], ["105", "118"], ["115", "125"], ["144", "142"], ["208", "206"], ["107", "105"], ["117", "115"], ["123", "135"], ["123", "101"], ["217", "228"], ["223", "237"], ["223", "212"], ["231", "228"], ["108", "111"], ["111", "107"], ["118", "119"], ["119", "117"], ["124", "123"], ["124", "130"], ["128", "123"], ["134", "139"], ["139", "101"], ["219", "217"], ["225", "223"], ["235", "246"], ["241", "284"], ["281", "290"], ["288", "231"], ["125", "124"], ["130", "128"], ["135", "134"], ["228", "225"], ["237", "235"], ["243", "241"], ["283", "281"], ["289", "297"], ["294", "288"], ["245", "254"], ["250", "264"], ["261", "270"], ["270", "276"], ["273", "243"], ["284", "283"], ["290", "289"], ["295", "294"], ["246", "245"], ["251", "258"], ["258", "250"], ["262", "267"], ["267", "261"], ["274", "273"], ["296", "295"], ["253", "251"], ["264", "262"], ["276", "274"], ["297", "296"], ["254", "253"], ["21", "24"], ["22", "317"], ["24", "317"], ["24", "317"], ["27", "317"], ["30", "317"], ["31", "317"], ["34", "317"], ["34", "317"], ["39", "317"], ["39", "317"], ["44", "317"], ["46", "317"], ["44", "317"], ["44", "317"], ["50", "317"], ["50", "317"], ["50", "317"], ["55", "317"], ["55", "317"], ["55", "317"], ["62", "317"], ["67", "317"], ["70", "317"], ["70", "317"], ["148", "317"], ["150", "317"], ["154", "317"], ["150", "317"], ["148", "317"], ["148", "317"], ["157", "317"], ["157", "317"], ["165", "317"], ["165", "317"], ["170", "317"], ["173", "317"], ["173", "317"], ["173", "317"], ["306", "317"], ["306", "317"], ["313", "317"], ["313", "317"], ["180", "317"], ["180", "317"], ["187", "317"], ["190", "317"], ["192", "317"], ["192", "317"], ["190", "317"], ["190", "317"], ["303", "317"], ["303", "317"], ["303", "317"], ["176", "317"], ["203", "317"], ["206", "317"], ["206", "317"], ["206", "317"], ["198", "317"], ["217", "317"], ["217", "317"], ["223", "317"], ["225", "317"], ["223", "317"], ["223", "317"], ["212", "317"], ["235", "317"], ["235", "317"], ["243", "317"], ["243", "317"], ["243", "317"], ["243", "317"], ["243", "317"], ["241", "317"], ["241", "317"], ["281", "317"], ["284", "317"], ["283", "317"], ["281", "317"], ["281", "317"], ["288", "317"], ["295", "317"], ["294", "317"], ["288", "317"], ["288", "317"], ["231", "317"], ["77", "317"], ["77", "317"], ["82", "317"], ["82", "317"], ["88", "317"], ["93", "317"], ["93", "317"], ["98", "317"], ["98", "317"], ["141", "317"], ["141", "317"], ["141", "317"], ["73", "317"], ["107", "317"], ["107", "317"], ["105", "317"], ["105", "317"], ["115", "317"], ["119", "317"], ["117", "317"], ["115", "317"], ["115", "317"], ["124", "317"], ["123", "317"], ["128", "317"], ["130", "317"], ["128", "317"], ["123", "317"], ["123", "317"], ["134", "317"], ["134", "317"], ["139", "317"], ["101", "317"], ["119", "317"], ["294", "317"], ["21", "22"], ["21", "27"], ["21", "31"], ["41", "39"], ["46", "44"], ["46", "44"], ["52", "50"], ["57", "55"], ["21", "62"], ["150", "148"], ["150", "148"], ["21", "157"], ["21", "165"], ["21", "24"], ["27", "30"], ["21", "30"], ["31", "34"], ["21", "34"], ["21", "67"], ["21", "170"], ["34", "306"], ["21", "306"], ["306", "313"], ["21", "313"], ["30", "41"], ["21", "41"], ["41", "46"], ["21", "46"], ["39", "46"], ["46", "52"], ["21", "52"], ["52", "57"], ["21", "57"], ["67", "70"], ["73", "70"], ["21", "70"], ["98", "70"], ["52", "70"], ["70", "73"], ["21", "73"], ["62", "150"], ["144", "150"], ["21", "150"], ["70", "150"], ["170", "173"], ["176", "173"], ["21", "173"], ["62", "173"], ["144", "173"], ["173", "176"], ["276", "176"], ["21", "176"], ["55", "180"], ["180", "303"], ["208", "303"], ["21", "303"], ["52", "58"], ["21", "58"], ["62", "151"], ["144", "151"], ["21", "151"], ["70", "154"], ["21", "154"], ["21", "187"], ["195", "303"], ["50", "77"], ["82", "77"], ["21", "82"], ["21", "88"], ["88", "141"], ["139", "141"], ["21", "141"], ["187", "190"], ["198", "190"], ["21", "190"], ["192", "190"], ["192", "190"], ["192", "190"], ["208", "198"], ["21", "198"], ["70", "93"], ["21", "93"], ["24", "192"], ["208", "192"], ["21", "192"], ["195", "192"], ["195", "192"], ["21", "203"], ["93", "98"], ["101", "98"], ["21", "98"], ["70", "98"], ["98", "101"], ["21", "101"], ["107", "105"], ["107", "105"], ["21", "115"], ["119", "115"], ["119", "115"], ["165", "195"], ["303", "195"], ["21", "195"], ["203", "206"], ["212", "206"], ["21", "206"], ["208", "206"], ["208", "206"], ["208", "206"], ["219", "212"], ["283", "212"], ["21", "212"], ["70", "95"], ["21", "95"], ["62", "144"], ["21", "144"], ["192", "208"], ["225", "208"], ["21", "208"], ["190", "208"], ["253", "208"], ["180", "208"], ["225", "208"], ["219", "217"], ["219", "217"], ["219", "217"], ["44", "107"], ["21", "117"], ["119", "117"], ["119", "117"], ["124", "123"], ["128", "123"], ["128", "123"], ["21", "134"], ["217", "223"], ["231", "223"], ["21", "223"], ["225", "223"], ["225", "223"], ["225", "223"], ["267", "231"], ["21", "231"], ["237", "235"], ["237", "235"], ["243", "241"], ["243", "241"], ["243", "241"], ["243", "241"], ["243", "241"], ["243", "241"], ["283", "281"], ["283", "281"], ["294", "288"], ["294", "288"], ["21", "119"], ["105", "119"], ["50", "124"], ["134", "124"], ["119", "128"], ["21", "128"], ["130", "128"], ["88", "139"], ["21", "139"], ["208", "219"], ["21", "219"], ["206", "219"], ["219", "225"], ["243", "225"], ["21", "225"], ["208", "225"], ["264", "225"], ["195", "225"], ["115", "130"], ["21", "130"], ["195", "228"], ["21", "228"], ["225", "237"], ["21", "237"], ["223", "237"], ["225", "243"], ["21", "243"], ["253", "283"], ["21", "283"], ["235", "283"], ["258", "283"], ["288", "294"], ["241", "294"], ["21", "294"], ["253", "284"], ["21", "284"], ["235", "284"], ["288", "295"], ["241", "295"], ["21", "295"], ["237", "258"], ["21", "258"], ["219", "258"], ["283", "258"], ["258", "267"], ["21", "267"], ["21", "253"], ["208", "253"], ["237", "264"], ["21", "264"], ["173", "276"], ["21", "276"], ["21", "254"], ["70", "73"], ["70", "77"], ["70", "70"], ["70", "78"], ["173", "192"], ["173", "195"], ["173", "187"], ["173", "190"], ["173", "173"], ["173", "182"], ["173", "180"], ["173", "176"], ["173", "303"], ["77", "98"], ["77", "95"], ["77", "144"], ["77", "93"], ["77", "88"], ["77", "141"], ["77", "142"], ["77", "82"], ["77", "83"], ["190", "192"], ["190", "198"], ["190", "206"], ["190", "208"], ["190", "195"], ["190", "190"], ["190", "203"], ["98", "107"], ["98", "115"], ["98", "98"], ["98", "119"], ["98", "101"], ["98", "118"], ["98", "108"], ["98", "111"], ["98", "123"], ["98", "105"], ["98", "117"], ["98", "124"], ["98", "125"], ["206", "225"], ["206", "228"], ["206", "206"], ["206", "208"], ["206", "223"], ["206", "212"], ["206", "217"], ["206", "219"], ["123", "134"], ["123", "139"], ["123", "135"], ["223", "225"], ["223", "273"], ["223", "261"], ["223", "290"], ["223", "283"], ["223", "243"], ["223", "245"], ["223", "228"], ["223", "262"], ["223", "264"], ["223", "284"], ["223", "223"], ["223", "281"], ["223", "231"], ["223", "246"], ["223", "289"], ["223", "267"], ["223", "288"], ["223", "258"], ["223", "276"], ["223", "296"], ["223", "295"], ["223", "274"], ["223", "235"], ["223", "294"], ["223", "270"], ["223", "237"], ["223", "251"], ["223", "253"], ["223", "254"], ["223", "241"], ["223", "250"], ["223", "297"], ["124", "128"], ["124", "130"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "25": "<(IDENTIFIER,this,setupCombo(301))<SUB>2</SUB>>", "4": "<(LOCAL,FastScanner sc: ANY)<SUB>3</SUB>>", "28": "<(IDENTIFIER,sc,ANY sc = new FastScanner())<SUB>3</SUB>>", "30": "<(&lt;init&gt;,new FastScanner())<SUB>3</SUB>>", "6": "<(LOCAL,PrintWriter out: ANY)<SUB>4</SUB>>", "32": "<(IDENTIFIER,out,ANY out = new PrintWriter(System.out))<SUB>4</SUB>>", "34": "<(&lt;init&gt;,new PrintWriter(System.out))<SUB>4</SUB>>", "35": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>4</SUB>>", "37": "<(FIELD_IDENTIFIER,out,out)<SUB>4</SUB>>", "39": "<(&lt;operator&gt;.assignment,int N = nextInt())<SUB>6</SUB>>", "41": "<(nextInt,nextInt())<SUB>6</SUB>>", "43": "<(LOCAL,long[] a: long[])<SUB>7</SUB>>", "45": "<(IDENTIFIER,a,long[] a = nextLongs(N))<SUB>7</SUB>>", "47": "<(IDENTIFIER,sc,nextLongs(N))<SUB>7</SUB>>", "49": "<(LOCAL,boolean[] vis: boolean[])<SUB>8</SUB>>", "51": "<(IDENTIFIER,vis,boolean[] vis = new boolean[N])<SUB>8</SUB>>", "53": "<(IDENTIFIER,N,new boolean[N])<SUB>8</SUB>>", "55": "<(&lt;operator&gt;.assignment,int[] groups = new int[N + 1])<SUB>9</SUB>>", "57": "<(&lt;operator&gt;.alloc,new int[N + 1])>", "59": "<(IDENTIFIER,N,N + 1)<SUB>9</SUB>>", "61": "<(LOCAL,int G: int)<SUB>10</SUB>>", "63": "<(IDENTIFIER,G,int G = 0)<SUB>10</SUB>>", "65": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; N); i++),for (int i = 0; Some(i &lt; N); i++))<SUB>11</SUB>>", "67": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>11</SUB>>", "69": "<(LITERAL,0,int i = 0)<SUB>11</SUB>>", "71": "<(IDENTIFIER,i,i &lt; N)<SUB>11</SUB>>", "73": "<(&lt;operator&gt;.postIncrement,i++)<SUB>11</SUB>>", "75": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>11</SUB>>", "77": "<(&lt;operator&gt;.logicalNot,!vis[i])<SUB>12</SUB>>", "79": "<(IDENTIFIER,vis,!vis[i])<SUB>12</SUB>>", "81": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>12</SUB>>", "83": "<(&lt;operator&gt;.indexAccess,vis[i])<SUB>13</SUB>>", "85": "<(IDENTIFIER,i,vis[i] = true)<SUB>13</SUB>>", "87": "<(LOCAL,int elems: int)<SUB>14</SUB>>", "89": "<(IDENTIFIER,elems,int elems = 1)<SUB>14</SUB>>", "91": "<(CONTROL_STRUCTURE,for (int j = i + 1; Some(j &lt; N); j++),for (int j = i + 1; Some(j &lt; N); j++))<SUB>15</SUB>>", "93": "<(&lt;operator&gt;.assignment,int j = i + 1)<SUB>15</SUB>>", "95": "<(&lt;operator&gt;.addition,i + 1)<SUB>15</SUB>>", "97": "<(LITERAL,1,i + 1)<SUB>15</SUB>>", "99": "<(IDENTIFIER,j,j &lt; N)<SUB>15</SUB>>", "101": "<(&lt;operator&gt;.postIncrement,j++)<SUB>15</SUB>>", "103": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>15</SUB>>", "105": "<(&lt;operator&gt;.assignment,long prod = a[i] * a[j])<SUB>16</SUB>>", "107": "<(&lt;operator&gt;.multiplication,a[i] * a[j])<SUB>16</SUB>>", "109": "<(IDENTIFIER,a,a[i] * a[j])<SUB>16</SUB>>", "111": "<(&lt;operator&gt;.indexAccess,a[j])<SUB>16</SUB>>", "113": "<(IDENTIFIER,j,a[i] * a[j])<SUB>16</SUB>>", "115": "<(&lt;operator&gt;.assignment,long root = (long) Math.sqrt(prod))<SUB>17</SUB>>", "117": "<(&lt;operator&gt;.cast,(long) Math.sqrt(prod))<SUB>17</SUB>>", "119": "<(sqrt,Math.sqrt(prod))<SUB>17</SUB>>", "121": "<(IDENTIFIER,prod,Math.sqrt(prod))<SUB>17</SUB>>", "123": "<(&lt;operator&gt;.logicalAnd,!vis[j] &amp;&amp; prod == root * root)<SUB>18</SUB>>", "125": "<(&lt;operator&gt;.indexAccess,vis[j])<SUB>18</SUB>>", "127": "<(IDENTIFIER,j,!vis[j])<SUB>18</SUB>>", "129": "<(IDENTIFIER,prod,prod == root * root)<SUB>18</SUB>>", "131": "<(IDENTIFIER,root,root * root)<SUB>18</SUB>>", "133": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>18</SUB>>", "135": "<(&lt;operator&gt;.indexAccess,vis[j])<SUB>19</SUB>>", "137": "<(IDENTIFIER,j,vis[j] = true)<SUB>19</SUB>>", "139": "<(&lt;operator&gt;.postIncrement,elems++)<SUB>20</SUB>>", "141": "<(&lt;operator&gt;.assignment,groups[++G] = elems)<SUB>23</SUB>>", "143": "<(IDENTIFIER,groups,groups[++G] = elems)<SUB>23</SUB>>", "145": "<(IDENTIFIER,G,++G)<SUB>23</SUB>>", "147": "<(LOCAL,long[][] dp: long[][])<SUB>27</SUB>>", "149": "<(IDENTIFIER,dp,long[][] dp = new long[G + 1][N + 1])<SUB>27</SUB>>", "151": "<(&lt;operator&gt;.addition,G + 1)<SUB>27</SUB>>", "153": "<(LITERAL,1,G + 1)<SUB>27</SUB>>", "155": "<(IDENTIFIER,N,N + 1)<SUB>27</SUB>>", "157": "<(&lt;operator&gt;.assignment,dp[0][0] = 1)<SUB>29</SUB>>", "159": "<(&lt;operator&gt;.indexAccess,dp[0])<SUB>29</SUB>>", "161": "<(LITERAL,0,dp[0][0] = 1)<SUB>29</SUB>>", "163": "<(LITERAL,1,dp[0][0] = 1)<SUB>29</SUB>>", "165": "<(&lt;operator&gt;.assignment,int total = 0)<SUB>31</SUB>>", "167": "<(LITERAL,0,int total = 0)<SUB>31</SUB>>", "169": "<(LOCAL,int prefix: int)<SUB>32</SUB>>", "171": "<(IDENTIFIER,prefix,int prefix = 1)<SUB>32</SUB>>", "173": "<(&lt;operator&gt;.lessEqualsThan,prefix &lt;= G)<SUB>32</SUB>>", "175": "<(IDENTIFIER,G,prefix &lt;= G)<SUB>32</SUB>>", "177": "<(IDENTIFIER,prefix,prefix++)<SUB>32</SUB>>", "179": "<(LOCAL,int amt: int)<SUB>33</SUB>>", "181": "<(IDENTIFIER,amt,int amt = groups[prefix])<SUB>33</SUB>>", "183": "<(IDENTIFIER,groups,int amt = groups[prefix])<SUB>33</SUB>>", "185": "<(CONTROL_STRUCTURE,for (int prevBad = 0; Some(prevBad &lt;= max(0, total - 1)); prevBad++),for (int prevBad = 0; Some(prevBad &lt;= max(0, total - 1)); prevBad++))<SUB>34</SUB>>", "187": "<(&lt;operator&gt;.assignment,int prevBad = 0)<SUB>34</SUB>>", "189": "<(LITERAL,0,int prevBad = 0)<SUB>34</SUB>>", "191": "<(IDENTIFIER,prevBad,prevBad &lt;= max(0, total - 1))<SUB>34</SUB>>", "193": "<(IDENTIFIER,this,max(0, total - 1))<SUB>34</SUB>>", "195": "<(&lt;operator&gt;.subtraction,total - 1)<SUB>34</SUB>>", "197": "<(LITERAL,1,total - 1)<SUB>34</SUB>>", "199": "<(IDENTIFIER,prevBad,prevBad++)<SUB>34</SUB>>", "201": "<(CONTROL_STRUCTURE,for (int fixed = 0; Some(fixed &lt;= min(prevBad, amt)); fixed++),for (int fixed = 0; Some(fixed &lt;= min(prevBad, amt)); fixed++))<SUB>35</SUB>>", "203": "<(&lt;operator&gt;.assignment,int fixed = 0)<SUB>35</SUB>>", "205": "<(LITERAL,0,int fixed = 0)<SUB>35</SUB>>", "207": "<(IDENTIFIER,fixed,fixed &lt;= min(prevBad, amt))<SUB>35</SUB>>", "209": "<(IDENTIFIER,this,min(prevBad, amt))<SUB>35</SUB>>", "211": "<(IDENTIFIER,amt,min(prevBad, amt))<SUB>35</SUB>>", "213": "<(IDENTIFIER,fixed,fixed++)<SUB>35</SUB>>", "215": "<(CONTROL_STRUCTURE,for (int slots = max(1, fixed); Some(slots &lt;= min(amt, total + 1)); slots++),for (int slots = max(1, fixed); Some(slots &lt;= min(amt, total + 1)); slots++))<SUB>36</SUB>>", "217": "<(&lt;operator&gt;.assignment,int slots = max(1, fixed))<SUB>36</SUB>>", "219": "<(max,max(1, fixed))<SUB>36</SUB>>", "221": "<(LITERAL,1,max(1, fixed))<SUB>36</SUB>>", "223": "<(&lt;operator&gt;.lessEqualsThan,slots &lt;= min(amt, total + 1))<SUB>36</SUB>>", "225": "<(min,min(amt, total + 1))<SUB>36</SUB>>", "227": "<(IDENTIFIER,amt,min(amt, total + 1))<SUB>36</SUB>>", "229": "<(IDENTIFIER,total,total + 1)<SUB>36</SUB>>", "231": "<(&lt;operator&gt;.postIncrement,slots++)<SUB>36</SUB>>", "233": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>36</SUB>>", "235": "<(&lt;operator&gt;.assignment,int introduced = amt - slots)<SUB>37</SUB>>", "237": "<(&lt;operator&gt;.subtraction,amt - slots)<SUB>37</SUB>>", "239": "<(IDENTIFIER,slots,amt - slots)<SUB>37</SUB>>", "241": "<(&lt;operator&gt;.assignment,long ways = mult(choose[prevBad][fixed], choose[total + 1 - prevBad][slots - fixed], choose[amt - 1][slots - 1], fact[amt], dp[prefix - 1][prevBad]))<SUB>38</SUB>>", "243": "<(mult,mult(choose[prevBad][fixed], choose[total + 1 - prevBad][slots - fixed], choose[amt - 1][slots - 1], fact[amt], dp[prefix - 1][prevBad]))<SUB>38</SUB>>", "245": "<(&lt;operator&gt;.indexAccess,choose[prevBad][fixed])<SUB>39</SUB>>", "247": "<(IDENTIFIER,choose,mult(choose[prevBad][fixed], choose[total + 1 - prevBad][slots - fixed], choose[amt - 1][slots - 1], fact[amt], dp[prefix - 1][prevBad]))<SUB>39</SUB>>", "249": "<(IDENTIFIER,fixed,mult(choose[prevBad][fixed], choose[total + 1 - prevBad][slots - fixed], choose[amt - 1][slots - 1], fact[amt], dp[prefix - 1][prevBad]))<SUB>39</SUB>>", "251": "<(&lt;operator&gt;.indexAccess,choose[total + 1 - prevBad])<SUB>40</SUB>>", "253": "<(&lt;operator&gt;.subtraction,total + 1 - prevBad)<SUB>40</SUB>>", "255": "<(IDENTIFIER,total,total + 1)<SUB>40</SUB>>", "257": "<(IDENTIFIER,prevBad,total + 1 - prevBad)<SUB>40</SUB>>", "259": "<(IDENTIFIER,slots,slots - fixed)<SUB>40</SUB>>", "261": "<(&lt;operator&gt;.indexAccess,choose[amt - 1][slots - 1])<SUB>41</SUB>>", "263": "<(IDENTIFIER,choose,mult(choose[prevBad][fixed], choose[total + 1 - prevBad][slots - fixed], choose[amt - 1][slots - 1], fact[amt], dp[prefix - 1][prevBad]))<SUB>41</SUB>>", "265": "<(IDENTIFIER,amt,amt - 1)<SUB>41</SUB>>", "267": "<(&lt;operator&gt;.subtraction,slots - 1)<SUB>41</SUB>>", "269": "<(LITERAL,1,slots - 1)<SUB>41</SUB>>", "271": "<(IDENTIFIER,fact,mult(choose[prevBad][fixed], choose[total + 1 - prevBad][slots - fixed], choose[amt - 1][slots - 1], fact[amt], dp[prefix - 1][prevBad]))<SUB>42</SUB>>", "273": "<(&lt;operator&gt;.indexAccess,dp[prefix - 1][prevBad])<SUB>43</SUB>>", "275": "<(IDENTIFIER,dp,mult(choose[prevBad][fixed], choose[total + 1 - prevBad][slots - fixed], choose[amt - 1][slots - 1], fact[amt], dp[prefix - 1][prevBad]))<SUB>43</SUB>>", "277": "<(IDENTIFIER,prefix,prefix - 1)<SUB>43</SUB>>", "279": "<(IDENTIFIER,prevBad,mult(choose[prevBad][fixed], choose[total + 1 - prevBad][slots - fixed], choose[amt - 1][slots - 1], fact[amt], dp[prefix - 1][prevBad]))<SUB>43</SUB>>", "281": "<(&lt;operator&gt;.assignment,int currBad = prevBad + introduced - fixed)<SUB>45</SUB>>", "283": "<(&lt;operator&gt;.subtraction,prevBad + introduced - fixed)<SUB>45</SUB>>", "285": "<(IDENTIFIER,prevBad,prevBad + introduced)<SUB>45</SUB>>", "287": "<(IDENTIFIER,fixed,prevBad + introduced - fixed)<SUB>45</SUB>>", "289": "<(&lt;operator&gt;.indexAccess,dp[prefix][currBad])<SUB>46</SUB>>", "291": "<(IDENTIFIER,dp,dp[prefix][currBad] = (dp[prefix][currBad] + ways) % mod)<SUB>46</SUB>>", "293": "<(IDENTIFIER,currBad,dp[prefix][currBad] = (dp[prefix][currBad] + ways) % mod)<SUB>46</SUB>>", "295": "<(&lt;operator&gt;.addition,dp[prefix][currBad] + ways)<SUB>46</SUB>>", "297": "<(&lt;operator&gt;.indexAccess,dp[prefix])<SUB>46</SUB>>", "299": "<(IDENTIFIER,prefix,dp[prefix][currBad] + ways)<SUB>46</SUB>>", "301": "<(IDENTIFIER,ways,dp[prefix][currBad] + ways)<SUB>46</SUB>>", "303": "<(&lt;operator&gt;.assignmentPlus,total += amt)<SUB>50</SUB>>", "305": "<(IDENTIFIER,amt,total += amt)<SUB>50</SUB>>", "307": "<(IDENTIFIER,out,println(dp[G][0]))<SUB>53</SUB>>", "309": "<(&lt;operator&gt;.indexAccess,dp[G])<SUB>53</SUB>>", "311": "<(IDENTIFIER,G,println(dp[G][0]))<SUB>53</SUB>>", "313": "<(close,close())<SUB>54</SUB>>", "315": "<(MODIFIER,PUBLIC)>", "317": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}