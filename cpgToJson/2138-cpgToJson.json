{"edges": [["23", "24"], ["23", "25"], ["23", "186"], ["23", "187"], ["23", "188"], ["25", "4"], ["25", "26"], ["25", "29"], ["25", "30"], ["25", "31"], ["25", "35"], ["25", "36"], ["25", "6"], ["25", "40"], ["25", "43"], ["25", "44"], ["25", "8"], ["25", "59"], ["25", "62"], ["25", "63"], ["25", "164"], ["26", "27"], ["26", "28"], ["29", "3"], ["31", "32"], ["31", "33"], ["33", "34"], ["36", "37"], ["36", "38"], ["38", "39"], ["40", "41"], ["40", "42"], ["43", "5"], ["44", "45"], ["44", "46"], ["44", "49"], ["44", "52"], ["44", "54"], ["46", "47"], ["46", "48"], ["49", "50"], ["49", "51"], ["52", "53"], ["54", "55"], ["55", "56"], ["55", "57"], ["57", "58"], ["59", "60"], ["59", "61"], ["62", "7"], ["63", "64"], ["63", "65"], ["63", "68"], ["63", "71"], ["63", "73"], ["65", "66"], ["65", "67"], ["68", "69"], ["68", "70"], ["71", "72"], ["73", "74"], ["73", "75"], ["73", "78"], ["73", "79"], ["73", "83"], ["73", "151"], ["75", "76"], ["75", "77"], ["79", "80"], ["79", "81"], ["81", "82"], ["83", "84"], ["83", "86"], ["84", "85"], ["86", "87"], ["86", "88"], ["86", "92"], ["88", "89"], ["88", "90"], ["90", "91"], ["92", "93"], ["92", "108"], ["93", "94"], ["93", "105"], ["94", "95"], ["94", "104"], ["95", "96"], ["95", "97"], ["97", "98"], ["97", "101"], ["98", "99"], ["98", "100"], ["101", "102"], ["101", "103"], ["105", "106"], ["105", "107"], ["108", "109"], ["108", "110"], ["108", "115"], ["108", "116"], ["108", "127"], ["108", "128"], ["108", "141"], ["110", "111"], ["110", "112"], ["112", "113"], ["112", "114"], ["116", "117"], ["116", "118"], ["118", "119"], ["118", "120"], ["120", "121"], ["120", "124"], ["121", "122"], ["121", "123"], ["124", "125"], ["124", "126"], ["128", "129"], ["128", "130"], ["130", "131"], ["130", "132"], ["132", "133"], ["132", "134"], ["134", "135"], ["134", "138"], ["135", "136"], ["135", "137"], ["138", "139"], ["138", "140"], ["141", "142"], ["141", "143"], ["143", "144"], ["143", "145"], ["143", "146"], ["146", "147"], ["146", "148"], ["148", "149"], ["148", "150"], ["151", "152"], ["151", "153"], ["153", "154"], ["153", "157"], ["153", "163"], ["154", "155"], ["154", "156"], ["157", "158"], ["157", "159"], ["157", "162"], ["159", "160"], ["159", "161"], ["164", "165"], ["164", "166"], ["164", "169"], ["164", "172"], ["164", "174"], ["166", "167"], ["166", "168"], ["169", "170"], ["169", "171"], ["172", "173"], ["174", "175"], ["175", "176"], ["175", "179"], ["176", "177"], ["176", "178"], ["179", "180"], ["179", "185"], ["180", "181"], ["180", "184"], ["181", "182"], ["181", "183"], ["26", "29"], ["29", "33"], ["31", "38"], ["36", "42"], ["40", "43"], ["43", "46"], ["59", "62"], ["62", "65"], ["28", "26"], ["33", "31"], ["38", "36"], ["42", "40"], ["46", "49"], ["49", "57"], ["49", "61"], ["52", "49"], ["61", "59"], ["65", "68"], ["68", "75"], ["68", "166"], ["71", "68"], ["166", "169"], ["169", "188"], ["169", "178"], ["172", "169"], ["55", "52"], ["75", "81"], ["79", "84"], ["151", "71"], ["175", "172"], ["57", "55"], ["81", "79"], ["84", "90"], ["84", "156"], ["176", "181"], ["179", "175"], ["88", "98"], ["154", "159"], ["157", "151"], ["178", "176"], ["180", "179"], ["90", "88"], ["93", "84"], ["93", "112"], ["156", "154"], ["159", "157"], ["181", "184"], ["184", "180"], ["94", "105"], ["105", "93"], ["110", "121"], ["116", "135"], ["128", "150"], ["141", "84"], ["95", "94"], ["112", "110"], ["118", "116"], ["130", "128"], ["143", "141"], ["97", "95"], ["120", "118"], ["132", "130"], ["146", "143"], ["98", "103"], ["101", "97"], ["121", "126"], ["124", "120"], ["134", "132"], ["148", "146"], ["103", "101"], ["126", "124"], ["135", "138"], ["138", "134"], ["150", "148"], ["23", "28"], ["24", "188"], ["26", "188"], ["29", "188"], ["31", "188"], ["36", "188"], ["38", "188"], ["36", "188"], ["36", "188"], ["40", "188"], ["43", "188"], ["43", "188"], ["59", "188"], ["62", "188"], ["62", "188"], ["166", "188"], ["169", "188"], ["169", "188"], ["169", "188"], ["172", "188"], ["71", "188"], ["52", "188"], ["23", "24"], ["23", "26"], ["33", "31"], ["38", "36"], ["23", "40"], ["23", "59"], ["26", "29"], ["23", "29"], ["40", "43"], ["23", "43"], ["23", "46"], ["59", "62"], ["23", "62"], ["23", "65"], ["23", "166"], ["29", "33"], ["23", "33"], ["33", "38"], ["23", "38"], ["46", "49"], ["52", "49"], ["23", "49"], ["31", "49"], ["49", "52"], ["23", "52"], ["65", "68"], ["71", "68"], ["23", "68"], ["49", "68"], ["159", "71"], ["23", "71"], ["36", "75"], ["105", "75"], ["112", "75"], ["23", "75"], ["81", "79"], ["166", "169"], ["172", "169"], ["23", "169"], ["68", "169"], ["181", "172"], ["23", "172"], ["43", "55"], ["23", "55"], ["57", "55"], ["81", "151"], ["23", "151"], ["154", "151"], ["157", "151"], ["23", "175"], ["38", "57"], ["23", "57"], ["62", "81"], ["151", "81"], ["23", "81"], ["79", "84"], ["90", "84"], ["23", "84"], ["90", "88"], ["23", "154"], ["23", "163"], ["23", "179"], ["154", "157"], ["23", "157"], ["159", "157"], ["159", "157"], ["75", "157"], ["141", "157"], ["84", "90"], ["23", "90"], ["94", "93"], ["94", "93"], ["105", "93"], ["105", "93"], ["112", "110"], ["112", "110"], ["118", "116"], ["118", "116"], ["130", "128"], ["130", "128"], ["143", "141"], ["143", "141"], ["143", "141"], ["43", "159"], ["98", "159"], ["121", "159"], ["55", "159"], ["23", "159"], ["68", "159"], ["98", "159"], ["121", "159"], ["62", "181"], ["151", "181"], ["23", "181"], ["169", "181"], ["95", "94"], ["95", "94"], ["23", "94"], ["23", "105"], ["112", "105"], ["36", "105"], ["143", "95"], ["23", "95"], ["97", "95"], ["97", "95"], ["23", "112"], ["105", "112"], ["95", "118"], ["23", "118"], ["120", "118"], ["120", "118"], ["132", "130"], ["23", "130"], ["132", "130"], ["130", "143"], ["23", "143"], ["75", "143"], ["141", "143"], ["128", "143"], ["88", "143"], ["98", "97"], ["98", "97"], ["88", "97"], ["121", "120"], ["121", "120"], ["88", "120"], ["97", "120"], ["118", "132"], ["23", "132"], ["134", "132"], ["134", "132"], ["128", "146"], ["23", "146"], ["88", "146"], ["43", "98"], ["159", "98"], ["121", "98"], ["55", "98"], ["23", "98"], ["68", "98"], ["121", "98"], ["98", "121"], ["23", "121"], ["98", "121"], ["135", "134"], ["138", "134"], ["110", "135"], ["23", "135"], ["116", "138"], ["23", "138"], ["49", "57"], ["49", "52"], ["49", "49"], ["49", "55"], ["68", "68"], ["68", "75"], ["68", "154"], ["68", "81"], ["68", "84"], ["68", "151"], ["68", "79"], ["68", "157"], ["68", "159"], ["68", "71"], ["68", "156"], ["169", "169"], ["169", "179"], ["169", "178"], ["169", "181"], ["169", "184"], ["169", "180"], ["169", "176"], ["169", "175"], ["169", "172"], ["84", "94"], ["84", "98"], ["84", "84"], ["84", "103"], ["84", "95"], ["84", "97"], ["84", "93"], ["84", "101"], ["84", "90"], ["84", "88"], ["84", "105"], ["93", "120"], ["93", "146"], ["93", "128"], ["93", "132"], ["93", "150"], ["93", "121"], ["93", "112"], ["93", "134"], ["93", "138"], ["93", "148"], ["93", "130"], ["93", "118"], ["93", "141"], ["93", "116"], ["93", "143"], ["93", "126"], ["93", "135"], ["93", "110"], ["93", "124"]], "features": {"23": "<(METHOD,main)<SUB>1</SUB>>", "25": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "26": "<(&lt;operator&gt;.assignment,ANY input = new FastScanner())<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.alloc,new FastScanner())<SUB>2</SUB>>", "3": "<(IDENTIFIER,input,new FastScanner())<SUB>2</SUB>>", "31": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>3</SUB>>", "33": "<(nextInt,nextInt())<SUB>3</SUB>>", "35": "<(LOCAL,int radius: int)<SUB>4</SUB>>", "37": "<(IDENTIFIER,radius,int radius = nextInt())<SUB>4</SUB>>", "39": "<(IDENTIFIER,input,nextInt())<SUB>4</SUB>>", "40": "<(&lt;operator&gt;.assignment,ANY diskXToFall = new ArrayList&lt;Integer&gt;())<SUB>5</SUB>>", "42": "<(&lt;operator&gt;.alloc,new ArrayList&lt;Integer&gt;())<SUB>5</SUB>>", "5": "<(IDENTIFIER,diskXToFall,new ArrayList&lt;Integer&gt;())<SUB>5</SUB>>", "45": "<(LOCAL,int a: int)<SUB>6</SUB>>", "47": "<(IDENTIFIER,a,int a = 0)<SUB>6</SUB>>", "49": "<(&lt;operator&gt;.lessThan,a &lt; n)<SUB>6</SUB>>", "51": "<(IDENTIFIER,n,a &lt; n)<SUB>6</SUB>>", "53": "<(IDENTIFIER,a,a++)<SUB>6</SUB>>", "55": "<(add,add(input.nextInt()))<SUB>7</SUB>>", "57": "<(nextInt,nextInt())<SUB>7</SUB>>", "8": "<(LOCAL,ArrayList&lt;P&gt; stationaryDisks: ANY)<SUB>9</SUB>>", "60": "<(IDENTIFIER,stationaryDisks,ANY stationaryDisks = new ArrayList&lt;P&gt;())<SUB>9</SUB>>", "62": "<(&lt;init&gt;,new ArrayList&lt;P&gt;())<SUB>9</SUB>>", "63": "<(CONTROL_STRUCTURE,for (int a = 0; Some(a &lt; n); a++),for (int a = 0; Some(a &lt; n); a++))<SUB>10</SUB>>", "65": "<(&lt;operator&gt;.assignment,int a = 0)<SUB>10</SUB>>", "67": "<(LITERAL,0,int a = 0)<SUB>10</SUB>>", "69": "<(IDENTIFIER,a,a &lt; n)<SUB>10</SUB>>", "71": "<(&lt;operator&gt;.postIncrement,a++)<SUB>10</SUB>>", "73": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "75": "<(&lt;operator&gt;.assignment,double highCollision = radius)<SUB>11</SUB>>", "77": "<(IDENTIFIER,radius,double highCollision = radius)<SUB>11</SUB>>", "79": "<(&lt;operator&gt;.assignment,)<SUB>12</SUB>>", "81": "<(iterator,&lt;empty&gt;)<SUB>12</SUB>>", "83": "<(CONTROL_STRUCTURE,FOR,FOR)<SUB>12</SUB>>", "85": "<(IDENTIFIER,$iterLocal0,&lt;empty&gt;)>", "87": "<(LOCAL,i: ANY)<SUB>12</SUB>>", "89": "<(IDENTIFIER,i,&lt;empty&gt;)>", "91": "<(IDENTIFIER,$iterLocal0,&lt;empty&gt;)>", "93": "<(&lt;operator&gt;.lessEqualsThan,Math.abs(diskXToFall.get(a) - i.x) - 1e-8 &lt;= 2 * radius)<SUB>13</SUB>>", "95": "<(abs,abs(diskXToFall.get(a) - i.x))<SUB>13</SUB>>", "97": "<(&lt;operator&gt;.subtraction,diskXToFall.get(a) - i.x)<SUB>13</SUB>>", "99": "<(IDENTIFIER,diskXToFall,get(a))<SUB>13</SUB>>", "101": "<(&lt;operator&gt;.fieldAccess,i.x)<SUB>13</SUB>>", "103": "<(FIELD_IDENTIFIER,x,x)<SUB>13</SUB>>", "105": "<(&lt;operator&gt;.multiplication,2 * radius)<SUB>13</SUB>>", "107": "<(IDENTIFIER,radius,2 * radius)<SUB>13</SUB>>", "109": "<(LOCAL,double hypot: double)<SUB>14</SUB>>", "111": "<(IDENTIFIER,hypot,double hypot = 2 * radius)<SUB>14</SUB>>", "113": "<(LITERAL,2,2 * radius)<SUB>14</SUB>>", "115": "<(LOCAL,double leg: double)<SUB>15</SUB>>", "117": "<(IDENTIFIER,leg,double leg = abs(diskXToFall.get(a) - i.x))<SUB>15</SUB>>", "119": "<(IDENTIFIER,Math,abs(diskXToFall.get(a) - i.x))<SUB>15</SUB>>", "121": "<(get,get(a))<SUB>15</SUB>>", "123": "<(IDENTIFIER,a,get(a))<SUB>15</SUB>>", "125": "<(IDENTIFIER,i,diskXToFall.get(a) - i.x)<SUB>15</SUB>>", "127": "<(LOCAL,double yOffset: double)<SUB>16</SUB>>", "129": "<(IDENTIFIER,yOffset,double yOffset = Math.sqrt(Math.abs(hypot * hypot - leg * leg)))<SUB>16</SUB>>", "131": "<(IDENTIFIER,Math,Math.sqrt(Math.abs(hypot * hypot - leg * leg)))<SUB>16</SUB>>", "133": "<(IDENTIFIER,Math,Math.abs(hypot * hypot - leg * leg))<SUB>16</SUB>>", "135": "<(&lt;operator&gt;.multiplication,hypot * hypot)<SUB>16</SUB>>", "137": "<(IDENTIFIER,hypot,hypot * hypot)<SUB>16</SUB>>", "139": "<(IDENTIFIER,leg,leg * leg)<SUB>16</SUB>>", "141": "<(&lt;operator&gt;.assignment,highCollision = max(highCollision, yOffset + i.y))<SUB>17</SUB>>", "143": "<(max,max(highCollision, yOffset + i.y))<SUB>17</SUB>>", "145": "<(IDENTIFIER,highCollision,max(highCollision, yOffset + i.y))<SUB>17</SUB>>", "147": "<(IDENTIFIER,yOffset,yOffset + i.y)<SUB>17</SUB>>", "149": "<(IDENTIFIER,i,yOffset + i.y)<SUB>17</SUB>>", "151": "<(add,add(new P(diskXToFall.get(a), highCollision)))<SUB>20</SUB>>", "153": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>20</SUB>>", "155": "<(IDENTIFIER,$obj3,&lt;empty&gt;)>", "157": "<(&lt;init&gt;,new P(diskXToFall.get(a), highCollision))<SUB>20</SUB>>", "159": "<(get,get(a))<SUB>20</SUB>>", "161": "<(IDENTIFIER,a,get(a))<SUB>20</SUB>>", "163": "<(IDENTIFIER,$obj3,&lt;empty&gt;)>", "165": "<(LOCAL,int a: int)<SUB>22</SUB>>", "167": "<(IDENTIFIER,a,int a = 0)<SUB>22</SUB>>", "169": "<(&lt;operator&gt;.lessThan,a &lt; n)<SUB>22</SUB>>", "171": "<(IDENTIFIER,n,a &lt; n)<SUB>22</SUB>>", "173": "<(IDENTIFIER,a,a++)<SUB>22</SUB>>", "175": "<(print,print(stationaryDisks.get(a).y + &quot; &quot;))<SUB>23</SUB>>", "177": "<(IDENTIFIER,System,print(stationaryDisks.get(a).y + &quot; &quot;))<SUB>23</SUB>>", "179": "<(&lt;operator&gt;.addition,stationaryDisks.get(a).y + &quot; &quot;)<SUB>23</SUB>>", "181": "<(get,get(a))<SUB>23</SUB>>", "183": "<(IDENTIFIER,a,get(a))<SUB>23</SUB>>", "185": "<(LITERAL,&quot; &quot;,stationaryDisks.get(a).y + &quot; &quot;)<SUB>23</SUB>>", "187": "<(MODIFIER,STATIC)>"}}