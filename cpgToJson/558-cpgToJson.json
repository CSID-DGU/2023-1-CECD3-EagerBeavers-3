{"edges": [["19", "20"], ["19", "21"], ["19", "126"], ["19", "127"], ["19", "128"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "26"], ["21", "27"], ["21", "31"], ["21", "120"], ["21", "124"], ["22", "23"], ["22", "24"], ["25", "3"], ["27", "28"], ["27", "29"], ["29", "30"], ["31", "32"], ["31", "36"], ["32", "33"], ["32", "35"], ["33", "34"], ["36", "37"], ["36", "38"], ["36", "42"], ["36", "53"], ["36", "85"], ["36", "117"], ["38", "39"], ["38", "40"], ["40", "41"], ["42", "43"], ["42", "48"], ["43", "44"], ["43", "47"], ["44", "45"], ["44", "46"], ["48", "49"], ["48", "52"], ["49", "50"], ["49", "51"], ["53", "54"], ["53", "59"], ["54", "55"], ["54", "58"], ["55", "56"], ["55", "57"], ["59", "60"], ["59", "61"], ["59", "66"], ["59", "67"], ["59", "74"], ["61", "62"], ["61", "63"], ["63", "64"], ["63", "65"], ["67", "68"], ["67", "69"], ["69", "70"], ["69", "71"], ["71", "72"], ["71", "73"], ["74", "75"], ["74", "80"], ["75", "76"], ["75", "79"], ["76", "77"], ["76", "78"], ["80", "81"], ["80", "84"], ["81", "82"], ["81", "83"], ["85", "86"], ["85", "91"], ["86", "87"], ["86", "90"], ["87", "88"], ["87", "89"], ["91", "92"], ["91", "93"], ["91", "98"], ["91", "99"], ["91", "106"], ["93", "94"], ["93", "95"], ["95", "96"], ["95", "97"], ["99", "100"], ["99", "101"], ["101", "102"], ["101", "103"], ["103", "104"], ["103", "105"], ["106", "107"], ["106", "112"], ["107", "108"], ["107", "111"], ["108", "109"], ["108", "110"], ["112", "113"], ["112", "116"], ["113", "114"], ["113", "115"], ["117", "118"], ["117", "119"], ["120", "121"], ["120", "122"], ["122", "123"], ["124", "125"], ["22", "25"], ["25", "29"], ["27", "33"], ["120", "124"], ["124", "128"], ["24", "22"], ["29", "27"], ["32", "40"], ["32", "122"], ["122", "120"], ["33", "32"], ["38", "44"], ["117", "33"], ["40", "38"], ["43", "49"], ["43", "55"], ["54", "63"], ["54", "87"], ["86", "95"], ["86", "117"], ["44", "43"], ["49", "33"], ["55", "54"], ["61", "70"], ["67", "76"], ["87", "86"], ["93", "102"], ["99", "108"], ["63", "61"], ["69", "67"], ["75", "81"], ["75", "87"], ["95", "93"], ["101", "99"], ["107", "113"], ["107", "117"], ["70", "71"], ["71", "69"], ["76", "75"], ["81", "33"], ["102", "103"], ["103", "101"], ["108", "107"], ["113", "33"], ["19", "24"], ["20", "128"], ["22", "128"], ["25", "128"], ["29", "128"], ["27", "128"], ["27", "128"], ["33", "128"], ["32", "128"], ["32", "128"], ["122", "128"], ["120", "128"], ["120", "128"], ["124", "128"], ["124", "128"], ["40", "128"], ["38", "128"], ["38", "128"], ["44", "128"], ["43", "128"], ["43", "128"], ["54", "128"], ["54", "128"], ["63", "128"], ["61", "128"], ["61", "128"], ["71", "128"], ["69", "128"], ["67", "128"], ["67", "128"], ["76", "128"], ["75", "128"], ["75", "128"], ["75", "128"], ["87", "128"], ["86", "128"], ["86", "128"], ["95", "128"], ["93", "128"], ["93", "128"], ["103", "128"], ["101", "128"], ["99", "128"], ["99", "128"], ["108", "128"], ["107", "128"], ["107", "128"], ["107", "128"], ["117", "128"], ["113", "128"], ["81", "128"], ["49", "128"], ["19", "20"], ["19", "22"], ["29", "27"], ["22", "25"], ["19", "25"], ["19", "120"], ["122", "120"], ["120", "124"], ["19", "124"], ["19", "29"], ["33", "32"], ["19", "32"], ["40", "38"], ["25", "122"], ["117", "122"], ["113", "122"], ["81", "122"], ["49", "122"], ["19", "122"], ["27", "33"], ["19", "33"], ["25", "117"], ["113", "117"], ["81", "117"], ["49", "117"], ["19", "117"], ["29", "40"], ["19", "40"], ["44", "43"], ["44", "43"], ["19", "43"], ["55", "54"], ["55", "54"], ["19", "54"], ["63", "61"], ["63", "61"], ["19", "67"], ["71", "67"], ["71", "67"], ["87", "86"], ["87", "86"], ["19", "86"], ["95", "93"], ["95", "93"], ["19", "99"], ["103", "99"], ["103", "99"], ["38", "44"], ["19", "44"], ["25", "49"], ["117", "49"], ["113", "49"], ["81", "49"], ["19", "49"], ["44", "55"], ["19", "55"], ["55", "87"], ["63", "87"], ["19", "87"], ["55", "63"], ["19", "63"], ["19", "69"], ["71", "69"], ["71", "69"], ["76", "75"], ["71", "75"], ["19", "75"], ["87", "95"], ["19", "95"], ["19", "101"], ["103", "101"], ["103", "101"], ["108", "107"], ["103", "107"], ["19", "107"], ["103", "71"], ["19", "71"], ["61", "71"], ["67", "76"], ["19", "76"], ["25", "81"], ["117", "81"], ["113", "81"], ["49", "81"], ["19", "81"], ["71", "103"], ["19", "103"], ["93", "103"], ["99", "108"], ["19", "108"], ["25", "113"], ["117", "113"], ["81", "113"], ["49", "113"], ["19", "113"], ["32", "32"], ["32", "38"], ["32", "40"], ["32", "44"], ["32", "43"], ["32", "33"], ["43", "49"], ["43", "54"], ["43", "55"], ["54", "75"], ["54", "69"], ["54", "67"], ["54", "76"], ["54", "87"], ["54", "61"], ["54", "71"], ["54", "70"], ["54", "63"], ["54", "86"], ["86", "107"], ["86", "99"], ["86", "102"], ["86", "103"], ["86", "95"], ["86", "93"], ["86", "101"], ["86", "117"], ["86", "108"], ["75", "81"], ["75", "87"], ["75", "86"], ["107", "113"], ["107", "117"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,StringBuilder ans = new StringBuilder())<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new StringBuilder())<SUB>2</SUB>>", "3": "<(IDENTIFIER,ans,new StringBuilder())<SUB>2</SUB>>", "27": "<(&lt;operator&gt;.assignment,int t = ri())<SUB>3</SUB>>", "29": "<(ri,ri())<SUB>3</SUB>>", "31": "<(CONTROL_STRUCTURE,while (t-- &gt; 0),while (t-- &gt; 0))<SUB>5</SUB>>", "33": "<(&lt;operator&gt;.postDecrement,t--)<SUB>5</SUB>>", "35": "<(LITERAL,0,t-- &gt; 0)<SUB>5</SUB>>", "37": "<(LOCAL,long n: long)<SUB>7</SUB>>", "39": "<(IDENTIFIER,n,long n = rl())<SUB>7</SUB>>", "41": "<(IDENTIFIER,this,rl())<SUB>7</SUB>>", "43": "<(&lt;operator&gt;.equals,n % 2 == 1)<SUB>8</SUB>>", "45": "<(IDENTIFIER,n,n % 2)<SUB>8</SUB>>", "47": "<(LITERAL,1,n % 2 == 1)<SUB>8</SUB>>", "49": "<(append,ans.append(&quot;NO\\n&quot;))<SUB>10</SUB>>", "51": "<(LITERAL,&quot;NO\\n&quot;,ans.append(&quot;NO\\n&quot;))<SUB>10</SUB>>", "53": "<(CONTROL_STRUCTURE,if (n % 4 == 0),if (n % 4 == 0))<SUB>14</SUB>>", "55": "<(&lt;operator&gt;.modulo,n % 4)<SUB>14</SUB>>", "57": "<(LITERAL,4,n % 4)<SUB>14</SUB>>", "59": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>15</SUB>>", "61": "<(&lt;operator&gt;.assignment,long val = n / 4)<SUB>16</SUB>>", "63": "<(&lt;operator&gt;.division,n / 4)<SUB>16</SUB>>", "65": "<(LITERAL,4,n / 4)<SUB>16</SUB>>", "67": "<(&lt;operator&gt;.assignment,long sq = (long) Math.sqrt(val))<SUB>18</SUB>>", "69": "<(&lt;operator&gt;.cast,(long) Math.sqrt(val))<SUB>18</SUB>>", "71": "<(sqrt,Math.sqrt(val))<SUB>18</SUB>>", "73": "<(IDENTIFIER,val,Math.sqrt(val))<SUB>18</SUB>>", "75": "<(&lt;operator&gt;.equals,sq * sq == val)<SUB>19</SUB>>", "77": "<(IDENTIFIER,sq,sq * sq)<SUB>19</SUB>>", "79": "<(IDENTIFIER,val,sq * sq == val)<SUB>19</SUB>>", "81": "<(append,ans.append(&quot;YES\\n&quot;))<SUB>21</SUB>>", "83": "<(LITERAL,&quot;YES\\n&quot;,ans.append(&quot;YES\\n&quot;))<SUB>21</SUB>>", "85": "<(CONTROL_STRUCTURE,if (n % 2 == 0),if (n % 2 == 0))<SUB>25</SUB>>", "87": "<(&lt;operator&gt;.modulo,n % 2)<SUB>25</SUB>>", "89": "<(LITERAL,2,n % 2)<SUB>25</SUB>>", "91": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>26</SUB>>", "93": "<(&lt;operator&gt;.assignment,long val = n / 2)<SUB>27</SUB>>", "95": "<(&lt;operator&gt;.division,n / 2)<SUB>27</SUB>>", "97": "<(LITERAL,2,n / 2)<SUB>27</SUB>>", "99": "<(&lt;operator&gt;.assignment,long sq = (long) Math.sqrt(val))<SUB>28</SUB>>", "101": "<(&lt;operator&gt;.cast,(long) Math.sqrt(val))<SUB>28</SUB>>", "103": "<(sqrt,Math.sqrt(val))<SUB>28</SUB>>", "105": "<(IDENTIFIER,val,Math.sqrt(val))<SUB>28</SUB>>", "107": "<(&lt;operator&gt;.equals,sq * sq == val)<SUB>29</SUB>>", "109": "<(IDENTIFIER,sq,sq * sq)<SUB>29</SUB>>", "111": "<(IDENTIFIER,val,sq * sq == val)<SUB>29</SUB>>", "113": "<(append,ans.append(&quot;YES\\n&quot;))<SUB>31</SUB>>", "115": "<(LITERAL,&quot;YES\\n&quot;,ans.append(&quot;YES\\n&quot;))<SUB>31</SUB>>", "117": "<(append,ans.append(&quot;NO\\n&quot;))<SUB>35</SUB>>", "119": "<(LITERAL,&quot;NO\\n&quot;,ans.append(&quot;NO\\n&quot;))<SUB>35</SUB>>", "121": "<(IDENTIFIER,out,print(ans.toString()))<SUB>38</SUB>>", "123": "<(IDENTIFIER,ans,ans.toString())<SUB>38</SUB>>", "125": "<(IDENTIFIER,out,flush())<SUB>39</SUB>>", "127": "<(MODIFIER,STATIC)>"}}