{"edges": [["21", "23"], ["21", "221"], ["21", "222"], ["21", "223"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "38"], ["23", "41"], ["23", "44"], ["23", "45"], ["23", "50"], ["23", "51"], ["23", "58"], ["23", "59"], ["23", "66"], ["23", "67"], ["23", "73"], ["23", "107"], ["23", "108"], ["23", "111"], ["23", "130"], ["23", "131"], ["23", "135"], ["23", "136"], ["23", "139"], ["23", "163"], ["23", "204"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "32"], ["28", "37"], ["29", "30"], ["29", "31"], ["32", "33"], ["32", "34"], ["34", "35"], ["34", "36"], ["38", "39"], ["38", "40"], ["41", "5"], ["41", "42"], ["42", "43"], ["45", "46"], ["45", "47"], ["47", "48"], ["47", "49"], ["51", "52"], ["51", "53"], ["53", "54"], ["53", "55"], ["55", "56"], ["55", "57"], ["59", "60"], ["59", "61"], ["61", "62"], ["61", "63"], ["63", "64"], ["63", "65"], ["67", "68"], ["67", "69"], ["69", "70"], ["70", "71"], ["70", "72"], ["73", "74"], ["73", "75"], ["73", "78"], ["73", "83"], ["73", "85"], ["75", "76"], ["75", "77"], ["78", "79"], ["78", "80"], ["80", "81"], ["80", "82"], ["83", "84"], ["85", "86"], ["86", "87"], ["86", "88"], ["86", "93"], ["86", "96"], ["86", "101"], ["88", "89"], ["88", "90"], ["90", "91"], ["90", "92"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["98", "99"], ["98", "100"], ["101", "102"], ["102", "103"], ["102", "106"], ["103", "104"], ["103", "105"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "113"], ["111", "116"], ["111", "119"], ["111", "121"], ["113", "114"], ["113", "115"], ["116", "117"], ["116", "118"], ["119", "120"], ["121", "122"], ["122", "123"], ["122", "127"], ["123", "124"], ["124", "125"], ["124", "126"], ["127", "128"], ["128", "129"], ["131", "132"], ["131", "133"], ["133", "134"], ["136", "137"], ["136", "138"], ["139", "140"], ["139", "141"], ["139", "144"], ["139", "147"], ["139", "149"], ["141", "142"], ["141", "143"], ["144", "145"], ["144", "146"], ["147", "148"], ["149", "150"], ["150", "151"], ["150", "155"], ["151", "152"], ["152", "153"], ["152", "154"], ["155", "156"], ["155", "161"], ["156", "157"], ["156", "160"], ["157", "158"], ["157", "159"], ["161", "162"], ["163", "164"], ["163", "165"], ["163", "168"], ["163", "171"], ["163", "173"], ["165", "166"], ["165", "167"], ["168", "169"], ["168", "170"], ["171", "172"], ["173", "174"], ["174", "175"], ["174", "176"], ["174", "179"], ["174", "182"], ["174", "184"], ["176", "177"], ["176", "178"], ["179", "180"], ["179", "181"], ["182", "183"], ["184", "185"], ["185", "186"], ["185", "201"], ["186", "187"], ["186", "190"], ["187", "188"], ["187", "189"], ["190", "191"], ["190", "200"], ["191", "192"], ["191", "195"], ["192", "193"], ["192", "194"], ["195", "196"], ["195", "197"], ["197", "198"], ["197", "199"], ["201", "202"], ["202", "203"], ["204", "205"], ["204", "208"], ["204", "214"], ["205", "206"], ["205", "207"], ["208", "209"], ["209", "210"], ["209", "213"], ["210", "211"], ["210", "212"], ["214", "215"], ["215", "216"], ["216", "217"], ["216", "220"], ["217", "218"], ["217", "219"], ["24", "31"], ["27", "40"], ["38", "42"], ["41", "47"], ["45", "55"], ["51", "63"], ["59", "70"], ["67", "75"], ["108", "113"], ["131", "136"], ["136", "141"], ["26", "24"], ["40", "38"], ["42", "41"], ["47", "45"], ["53", "51"], ["61", "59"], ["69", "67"], ["75", "80"], ["78", "90"], ["78", "108"], ["83", "80"], ["113", "116"], ["116", "124"], ["116", "133"], ["119", "116"], ["133", "131"], ["141", "144"], ["144", "152"], ["144", "165"], ["147", "144"], ["165", "168"], ["168", "176"], ["168", "205"], ["171", "168"], ["205", "212"], ["205", "219"], ["29", "36"], ["32", "27"], ["55", "53"], ["63", "61"], ["70", "69"], ["80", "78"], ["209", "223"], ["31", "29"], ["34", "32"], ["88", "93"], ["93", "103"], ["93", "83"], ["96", "93"], ["123", "128"], ["123", "119"], ["151", "157"], ["151", "147"], ["176", "179"], ["179", "187"], ["179", "171"], ["182", "179"], ["210", "209"], ["216", "223"], ["36", "34"], ["90", "88"], ["98", "96"], ["102", "98"], ["124", "123"], ["128", "119"], ["152", "151"], ["156", "161"], ["161", "147"], ["212", "210"], ["217", "216"], ["103", "102"], ["157", "156"], ["186", "202"], ["186", "182"], ["219", "217"], ["187", "192"], ["190", "186"], ["202", "182"], ["191", "190"], ["192", "197"], ["195", "191"], ["197", "195"], ["21", "26"], ["22", "223"], ["24", "223"], ["29", "223"], ["32", "223"], ["32", "223"], ["32", "223"], ["27", "223"], ["38", "223"], ["42", "223"], ["41", "223"], ["41", "223"], ["45", "223"], ["47", "223"], ["45", "223"], ["45", "223"], ["53", "223"], ["51", "223"], ["51", "223"], ["61", "223"], ["61", "223"], ["59", "223"], ["59", "223"], ["67", "223"], ["69", "223"], ["67", "223"], ["67", "223"], ["78", "223"], ["78", "223"], ["108", "223"], ["131", "223"], ["131", "223"], ["131", "223"], ["136", "223"], ["136", "223"], ["144", "223"], ["144", "223"], ["165", "223"], ["168", "223"], ["168", "223"], ["168", "223"], ["205", "223"], ["205", "223"], ["209", "223"], ["176", "223"], ["179", "223"], ["179", "223"], ["171", "223"], ["186", "223"], ["191", "223"], ["191", "223"], ["190", "223"], ["186", "223"], ["186", "223"], ["202", "223"], ["182", "223"], ["151", "223"], ["151", "223"], ["156", "223"], ["156", "223"], ["161", "223"], ["161", "223"], ["147", "223"], ["123", "223"], ["123", "223"], ["128", "223"], ["119", "223"], ["88", "223"], ["88", "223"], ["93", "223"], ["93", "223"], ["83", "223"], ["102", "223"], ["102", "223"], ["96", "223"], ["96", "223"], ["80", "223"], ["21", "22"], ["21", "24"], ["21", "38"], ["47", "45"], ["47", "45"], ["53", "51"], ["53", "51"], ["61", "59"], ["61", "59"], ["69", "67"], ["21", "108"], ["133", "131"], ["21", "136"], ["24", "27"], ["21", "27"], ["29", "27"], ["32", "27"], ["38", "41"], ["21", "41"], ["42", "41"], ["21", "75"], ["21", "113"], ["21", "141"], ["21", "165"], ["21", "29"], ["21", "37"], ["27", "42"], ["21", "42"], ["41", "47"], ["21", "47"], ["21", "53"], ["45", "53"], ["53", "61"], ["21", "61"], ["45", "61"], ["51", "69"], ["21", "69"], ["75", "78"], ["83", "78"], ["21", "78"], ["80", "78"], ["80", "78"], ["21", "83"], ["78", "83"], ["113", "116"], ["119", "116"], ["21", "116"], ["80", "116"], ["116", "119"], ["21", "119"], ["108", "133"], ["128", "133"], ["21", "133"], ["141", "144"], ["147", "144"], ["21", "144"], ["116", "144"], ["144", "147"], ["21", "147"], ["165", "168"], ["171", "168"], ["21", "168"], ["133", "168"], ["179", "171"], ["21", "171"], ["59", "205"], ["202", "205"], ["21", "205"], ["29", "32"], ["21", "32"], ["51", "70"], ["21", "70"], ["21", "80"], ["93", "80"], ["51", "80"], ["78", "88"], ["21", "88"], ["93", "96"], ["21", "96"], ["78", "96"], ["21", "176"], ["21", "209"], ["88", "93"], ["96", "93"], ["21", "93"], ["80", "93"], ["21", "102"], ["67", "123"], ["67", "151"], ["123", "151"], ["144", "156"], ["21", "156"], ["176", "179"], ["182", "179"], ["21", "179"], ["168", "179"], ["21", "182"], ["179", "182"], ["21", "216"], ["78", "90"], ["21", "90"], ["93", "98"], ["21", "98"], ["78", "98"], ["108", "128"], ["21", "128"], ["136", "161"], ["21", "161"], ["131", "186"], ["21", "186"], ["131", "190"], ["21", "190"], ["59", "202"], ["21", "202"], ["131", "191"], ["179", "197"], ["21", "197"], ["78", "93"], ["78", "90"], ["78", "80"], ["78", "83"], ["78", "88"], ["78", "78"], ["116", "116"], ["116", "119"], ["116", "123"], ["116", "124"], ["144", "151"], ["144", "144"], ["144", "152"], ["144", "147"], ["168", "179"], ["168", "168"], ["168", "176"], ["168", "171"], ["205", "209"], ["205", "210"], ["205", "217"], ["205", "212"], ["205", "216"], ["205", "219"], ["93", "96"], ["93", "98"], ["93", "102"], ["93", "103"], ["93", "93"], ["123", "128"], ["151", "161"], ["151", "157"], ["151", "156"], ["179", "192"], ["179", "179"], ["179", "197"], ["179", "191"], ["179", "195"], ["179", "187"], ["179", "190"], ["179", "182"], ["179", "186"], ["186", "202"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY in = new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "3": "<(IDENTIFIER,in,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "29": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "31": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>2</SUB>>", "33": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "35": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>2</SUB>>", "37": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "38": "<(&lt;operator&gt;.assignment,String s = new String(in.readLine()))<SUB>3</SUB>>", "40": "<(&lt;operator&gt;.alloc,new String(in.readLine()))<SUB>3</SUB>>", "5": "<(IDENTIFIER,s,new String(in.readLine()))<SUB>3</SUB>>", "43": "<(IDENTIFIER,in,readLine())<SUB>3</SUB>>", "45": "<(&lt;operator&gt;.assignment,String[] t = s.split(&quot; &quot;))<SUB>4</SUB>>", "47": "<(split,s.split(&quot; &quot;))<SUB>4</SUB>>", "49": "<(LITERAL,&quot; &quot;,s.split(&quot; &quot;))<SUB>4</SUB>>", "51": "<(&lt;operator&gt;.assignment,int n = Integer.parseInt(t[0]))<SUB>5</SUB>>", "53": "<(parseInt,Integer.parseInt(t[0]))<SUB>5</SUB>>", "55": "<(&lt;operator&gt;.indexAccess,t[0])<SUB>5</SUB>>", "57": "<(LITERAL,0,Integer.parseInt(t[0]))<SUB>5</SUB>>", "59": "<(&lt;operator&gt;.assignment,int k = Integer.parseInt(t[1]))<SUB>6</SUB>>", "61": "<(parseInt,Integer.parseInt(t[1]))<SUB>6</SUB>>", "63": "<(&lt;operator&gt;.indexAccess,t[1])<SUB>6</SUB>>", "65": "<(LITERAL,1,Integer.parseInt(t[1]))<SUB>6</SUB>>", "67": "<(&lt;operator&gt;.assignment,boolean[] prime = new boolean[n + 1])<SUB>7</SUB>>", "69": "<(&lt;operator&gt;.alloc,new boolean[n + 1])>", "71": "<(IDENTIFIER,n,n + 1)<SUB>7</SUB>>", "73": "<(CONTROL_STRUCTURE,for (int i = 2; Some(i &lt; Math.sqrt(n)); i++),for (int i = 2; Some(i &lt; Math.sqrt(n)); i++))<SUB>8</SUB>>", "75": "<(&lt;operator&gt;.assignment,int i = 2)<SUB>8</SUB>>", "77": "<(LITERAL,2,int i = 2)<SUB>8</SUB>>", "79": "<(IDENTIFIER,i,i &lt; Math.sqrt(n))<SUB>8</SUB>>", "81": "<(IDENTIFIER,Math,Math.sqrt(n))<SUB>8</SUB>>", "83": "<(&lt;operator&gt;.postIncrement,i++)<SUB>8</SUB>>", "85": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>>", "87": "<(LOCAL,int j: int)<SUB>9</SUB>>", "89": "<(IDENTIFIER,j,int j = i + i)<SUB>9</SUB>>", "91": "<(IDENTIFIER,i,i + i)<SUB>9</SUB>>", "93": "<(&lt;operator&gt;.lessEqualsThan,j &lt;= n)<SUB>9</SUB>>", "95": "<(IDENTIFIER,n,j &lt;= n)<SUB>9</SUB>>", "97": "<(IDENTIFIER,j,j = j + i)<SUB>9</SUB>>", "99": "<(IDENTIFIER,j,j + i)<SUB>9</SUB>>", "101": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>>", "103": "<(&lt;operator&gt;.indexAccess,prime[j])<SUB>10</SUB>>", "105": "<(IDENTIFIER,j,prime[j] = true)<SUB>10</SUB>>", "107": "<(LOCAL,int size: int)<SUB>13</SUB>>", "109": "<(IDENTIFIER,size,int size = 0)<SUB>13</SUB>>", "111": "<(CONTROL_STRUCTURE,for (int i = 2; Some(i &lt;= n); i++),for (int i = 2; Some(i &lt;= n); i++))<SUB>14</SUB>>", "113": "<(&lt;operator&gt;.assignment,int i = 2)<SUB>14</SUB>>", "115": "<(LITERAL,2,int i = 2)<SUB>14</SUB>>", "117": "<(IDENTIFIER,i,i &lt;= n)<SUB>14</SUB>>", "119": "<(&lt;operator&gt;.postIncrement,i++)<SUB>14</SUB>>", "121": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>14</SUB>>", "123": "<(&lt;operator&gt;.logicalNot,!prime[i])<SUB>15</SUB>>", "125": "<(IDENTIFIER,prime,!prime[i])<SUB>15</SUB>>", "127": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>15</SUB>>", "129": "<(IDENTIFIER,size,size++)<SUB>16</SUB>>", "131": "<(&lt;operator&gt;.assignment,int[] pn = new int[size])<SUB>19</SUB>>", "133": "<(&lt;operator&gt;.alloc,new int[size])>", "135": "<(LOCAL,int index: int)<SUB>20</SUB>>", "137": "<(IDENTIFIER,index,int index = 0)<SUB>20</SUB>>", "139": "<(CONTROL_STRUCTURE,for (int i = 2; Some(i &lt;= n); i++),for (int i = 2; Some(i &lt;= n); i++))<SUB>21</SUB>>", "141": "<(&lt;operator&gt;.assignment,int i = 2)<SUB>21</SUB>>", "143": "<(LITERAL,2,int i = 2)<SUB>21</SUB>>", "145": "<(IDENTIFIER,i,i &lt;= n)<SUB>21</SUB>>", "147": "<(&lt;operator&gt;.postIncrement,i++)<SUB>21</SUB>>", "149": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>21</SUB>>", "151": "<(&lt;operator&gt;.logicalNot,!prime[i])<SUB>22</SUB>>", "153": "<(IDENTIFIER,prime,!prime[i])<SUB>22</SUB>>", "155": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>22</SUB>>", "157": "<(&lt;operator&gt;.indexAccess,pn[index])<SUB>23</SUB>>", "159": "<(IDENTIFIER,index,pn[index] = i)<SUB>23</SUB>>", "161": "<(&lt;operator&gt;.postIncrement,index++)<SUB>24</SUB>>", "163": "<(CONTROL_STRUCTURE,for (int i = 2; Some(i &lt; size); i++),for (int i = 2; Some(i &lt; size); i++))<SUB>27</SUB>>", "165": "<(&lt;operator&gt;.assignment,int i = 2)<SUB>27</SUB>>", "167": "<(LITERAL,2,int i = 2)<SUB>27</SUB>>", "169": "<(IDENTIFIER,i,i &lt; size)<SUB>27</SUB>>", "171": "<(&lt;operator&gt;.postIncrement,i++)<SUB>27</SUB>>", "173": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>27</SUB>>", "175": "<(LOCAL,int j: int)<SUB>28</SUB>>", "177": "<(IDENTIFIER,j,int j = 0)<SUB>28</SUB>>", "179": "<(&lt;operator&gt;.lessThan,j &lt; i)<SUB>28</SUB>>", "181": "<(IDENTIFIER,i,j &lt; i)<SUB>28</SUB>>", "183": "<(IDENTIFIER,j,j++)<SUB>28</SUB>>", "185": "<(CONTROL_STRUCTURE,if (pn[i] == pn[j] + pn[j + 1] + 1),if (pn[i] == pn[j] + pn[j + 1] + 1))<SUB>29</SUB>>", "187": "<(&lt;operator&gt;.indexAccess,pn[i])<SUB>29</SUB>>", "189": "<(IDENTIFIER,i,pn[i] == pn[j] + pn[j + 1] + 1)<SUB>29</SUB>>", "191": "<(&lt;operator&gt;.addition,pn[j] + pn[j + 1])<SUB>29</SUB>>", "193": "<(IDENTIFIER,pn,pn[j] + pn[j + 1])<SUB>29</SUB>>", "195": "<(&lt;operator&gt;.indexAccess,pn[j + 1])<SUB>29</SUB>>", "197": "<(&lt;operator&gt;.addition,j + 1)<SUB>29</SUB>>", "199": "<(LITERAL,1,j + 1)<SUB>29</SUB>>", "201": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>29</SUB>>", "203": "<(IDENTIFIER,k,k--)<SUB>31</SUB>>", "205": "<(&lt;operator&gt;.lessEqualsThan,k &lt;= 0)<SUB>35</SUB>>", "207": "<(LITERAL,0,k &lt;= 0)<SUB>35</SUB>>", "209": "<(println,System.out.println(&quot;YES&quot;))<SUB>36</SUB>>", "211": "<(IDENTIFIER,System,System.out.println(&quot;YES&quot;))<SUB>36</SUB>>", "213": "<(LITERAL,&quot;YES&quot;,System.out.println(&quot;YES&quot;))<SUB>36</SUB>>", "215": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>37</SUB>>", "217": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>38</SUB>>", "219": "<(FIELD_IDENTIFIER,out,out)<SUB>38</SUB>>", "221": "<(MODIFIER,PUBLIC)>", "223": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}