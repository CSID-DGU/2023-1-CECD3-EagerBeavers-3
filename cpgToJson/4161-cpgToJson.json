{"edges": [["19", "21"], ["19", "193"], ["19", "194"], ["19", "195"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "31"], ["21", "35"], ["21", "36"], ["21", "43"], ["21", "71"], ["21", "78"], ["21", "157"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["29", "30"], ["31", "32"], ["31", "33"], ["33", "34"], ["36", "37"], ["36", "38"], ["38", "39"], ["38", "42"], ["39", "40"], ["39", "41"], ["43", "44"], ["43", "45"], ["43", "48"], ["43", "51"], ["43", "53"], ["45", "46"], ["45", "47"], ["48", "49"], ["48", "50"], ["51", "52"], ["53", "54"], ["53", "55"], ["53", "58"], ["53", "61"], ["53", "63"], ["55", "56"], ["55", "57"], ["58", "59"], ["58", "60"], ["61", "62"], ["63", "64"], ["63", "69"], ["64", "65"], ["64", "68"], ["65", "66"], ["65", "67"], ["69", "70"], ["71", "72"], ["71", "77"], ["72", "73"], ["72", "76"], ["73", "74"], ["73", "75"], ["78", "79"], ["78", "80"], ["78", "83"], ["78", "88"], ["78", "90"], ["80", "81"], ["80", "82"], ["83", "84"], ["83", "85"], ["85", "86"], ["85", "87"], ["88", "89"], ["90", "91"], ["90", "149"], ["91", "92"], ["91", "93"], ["91", "96"], ["91", "99"], ["91", "101"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["99", "100"], ["101", "102"], ["101", "111"], ["101", "112"], ["101", "118"], ["102", "103"], ["102", "110"], ["103", "104"], ["103", "109"], ["104", "105"], ["104", "106"], ["106", "107"], ["106", "108"], ["112", "113"], ["112", "114"], ["114", "115"], ["115", "116"], ["115", "117"], ["118", "119"], ["118", "121"], ["119", "120"], ["121", "122"], ["121", "123"], ["121", "127"], ["123", "124"], ["123", "125"], ["125", "126"], ["127", "128"], ["127", "137"], ["128", "129"], ["128", "136"], ["129", "130"], ["129", "131"], ["131", "132"], ["131", "135"], ["132", "133"], ["132", "134"], ["137", "138"], ["137", "142"], ["138", "139"], ["138", "140"], ["138", "141"], ["142", "143"], ["142", "148"], ["143", "144"], ["143", "145"], ["145", "146"], ["145", "147"], ["149", "150"], ["149", "151"], ["149", "156"], ["151", "152"], ["151", "153"], ["153", "154"], ["153", "155"], ["157", "158"], ["157", "159"], ["157", "162"], ["157", "165"], ["157", "167"], ["159", "160"], ["159", "161"], ["162", "163"], ["162", "164"], ["165", "166"], ["167", "168"], ["167", "177"], ["168", "169"], ["168", "172"], ["169", "170"], ["169", "171"], ["172", "173"], ["172", "176"], ["173", "174"], ["173", "175"], ["177", "178"], ["177", "181"], ["177", "182"], ["178", "179"], ["178", "180"], ["182", "183"], ["182", "190"], ["183", "184"], ["183", "185"], ["185", "186"], ["185", "189"], ["186", "187"], ["186", "188"], ["190", "191"], ["190", "192"], ["22", "28"], ["25", "29"], ["29", "33"], ["31", "39"], ["36", "45"], ["71", "80"], ["24", "22"], ["26", "25"], ["33", "31"], ["38", "36"], ["45", "48"], ["48", "55"], ["48", "73"], ["51", "48"], ["72", "71"], ["80", "85"], ["83", "93"], ["83", "159"], ["88", "85"], ["159", "162"], ["162", "195"], ["162", "169"], ["165", "162"], ["28", "26"], ["39", "38"], ["55", "58"], ["58", "65"], ["58", "51"], ["61", "58"], ["63", "61"], ["73", "72"], ["85", "83"], ["149", "88"], ["177", "165"], ["64", "69"], ["69", "63"], ["93", "96"], ["96", "106"], ["96", "153"], ["99", "96"], ["151", "149"], ["169", "175"], ["169", "180"], ["172", "180"], ["178", "186"], ["182", "177"], ["65", "64"], ["102", "115"], ["112", "99"], ["153", "151"], ["173", "172"], ["180", "178"], ["183", "190"], ["190", "182"], ["103", "102"], ["114", "112"], ["175", "173"], ["185", "183"], ["104", "103"], ["115", "114"], ["186", "185"], ["106", "104"], ["19", "24"], ["20", "195"], ["22", "195"], ["25", "195"], ["25", "195"], ["29", "195"], ["29", "195"], ["33", "195"], ["31", "195"], ["31", "195"], ["36", "195"], ["38", "195"], ["36", "195"], ["36", "195"], ["71", "195"], ["71", "195"], ["83", "195"], ["83", "195"], ["159", "195"], ["162", "195"], ["162", "195"], ["162", "195"], ["165", "195"], ["88", "195"], ["51", "195"], ["149", "195"], ["19", "20"], ["19", "22"], ["33", "31"], ["38", "36"], ["38", "36"], ["19", "71"], ["22", "25"], ["19", "25"], ["19", "29"], ["19", "45"], ["19", "80"], ["19", "159"], ["25", "33"], ["19", "33"], ["39", "38"], ["39", "38"], ["19", "38"], ["45", "48"], ["51", "48"], ["19", "48"], ["39", "48"], ["58", "48"], ["48", "51"], ["19", "51"], ["19", "55"], ["69", "63"], ["80", "83"], ["88", "83"], ["19", "83"], ["85", "83"], ["85", "83"], ["153", "88"], ["19", "88"], ["159", "162"], ["165", "162"], ["19", "162"], ["85", "162"], ["186", "162"], ["190", "165"], ["19", "165"], ["19", "39"], ["31", "39"], ["55", "58"], ["61", "58"], ["19", "58"], ["48", "58"], ["58", "61"], ["19", "61"], ["48", "85"], ["19", "85"], ["19", "93"], ["19", "149"], ["102", "149"], ["172", "177"], ["19", "177"], ["33", "69"], ["19", "69"], ["93", "96"], ["99", "96"], ["19", "96"], ["36", "96"], ["96", "99"], ["19", "99"], ["114", "112"], ["162", "169"], ["19", "169"], ["177", "172"], ["19", "172"], ["19", "102"], ["83", "153"], ["106", "153"], ["19", "153"], ["19", "190"], ["169", "190"], ["186", "185"], ["186", "185"], ["19", "185"], ["162", "186"], ["19", "186"], ["83", "106"], ["19", "106"], ["48", "48"], ["48", "51"], ["48", "58"], ["48", "55"], ["83", "96"], ["83", "85"], ["83", "149"], ["83", "151"], ["83", "153"], ["83", "93"], ["83", "83"], ["83", "88"], ["162", "183"], ["162", "169"], ["162", "178"], ["162", "185"], ["162", "162"], ["162", "190"], ["162", "177"], ["162", "165"], ["162", "182"], ["162", "186"], ["162", "180"], ["58", "64"], ["58", "69"], ["58", "65"], ["58", "58"], ["58", "61"], ["58", "63"], ["96", "115"], ["96", "96"], ["96", "99"], ["96", "102"], ["96", "114"], ["96", "103"], ["96", "104"], ["96", "106"], ["96", "112"], ["169", "173"], ["169", "175"], ["169", "172"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY scan = new Scanner(System.in))<SUB>3</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>3</SUB>>", "3": "<(IDENTIFIER,scan,new Scanner(System.in))<SUB>3</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>3</SUB>>", "29": "<(init,init())<SUB>4</SUB>>", "31": "<(&lt;operator&gt;.assignment,n = nextInt())<SUB>5</SUB>>", "33": "<(nextInt,nextInt())<SUB>5</SUB>>", "35": "<(LOCAL,int m: int)<SUB>6</SUB>>", "37": "<(IDENTIFIER,m,int m = (1 &lt;&lt; n) - 1)<SUB>6</SUB>>", "39": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; n)<SUB>6</SUB>>", "41": "<(IDENTIFIER,n,1 &lt;&lt; n)<SUB>6</SUB>>", "43": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>7</SUB>>", "45": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>7</SUB>>", "47": "<(LITERAL,0,int i = 0)<SUB>7</SUB>>", "49": "<(IDENTIFIER,i,i &lt; n)<SUB>7</SUB>>", "51": "<(&lt;operator&gt;.postIncrement,i++)<SUB>7</SUB>>", "53": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>8</SUB>>", "55": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>8</SUB>>", "57": "<(LITERAL,0,int j = 0)<SUB>8</SUB>>", "59": "<(IDENTIFIER,j,j &lt; n)<SUB>8</SUB>>", "61": "<(&lt;operator&gt;.postIncrement,j++)<SUB>8</SUB>>", "63": "<(&lt;operator&gt;.assignment,prob[i][j] = nextDouble())<SUB>9</SUB>>", "65": "<(&lt;operator&gt;.indexAccess,prob[i])<SUB>9</SUB>>", "67": "<(IDENTIFIER,i,prob[i][j] = nextDouble())<SUB>9</SUB>>", "69": "<(nextDouble,nextDouble())<SUB>9</SUB>>", "71": "<(&lt;operator&gt;.assignment,dp[0][m] = 1)<SUB>10</SUB>>", "73": "<(&lt;operator&gt;.indexAccess,dp[0])<SUB>10</SUB>>", "75": "<(LITERAL,0,dp[0][m] = 1)<SUB>10</SUB>>", "77": "<(LITERAL,1,dp[0][m] = 1)<SUB>10</SUB>>", "79": "<(LOCAL,int i: int)<SUB>12</SUB>>", "81": "<(IDENTIFIER,i,int i = 0)<SUB>12</SUB>>", "83": "<(&lt;operator&gt;.lessThan,i &lt; (n - 1))<SUB>12</SUB>>", "85": "<(&lt;operator&gt;.subtraction,n - 1)<SUB>12</SUB>>", "87": "<(LITERAL,1,n - 1)<SUB>12</SUB>>", "89": "<(IDENTIFIER,i,i++)<SUB>12</SUB>>", "91": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt;= m); j++),for (int j = 0; Some(j &lt;= m); j++))<SUB>14</SUB>>", "93": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>14</SUB>>", "95": "<(LITERAL,0,int j = 0)<SUB>14</SUB>>", "97": "<(IDENTIFIER,j,j &lt;= m)<SUB>14</SUB>>", "99": "<(&lt;operator&gt;.postIncrement,j++)<SUB>14</SUB>>", "101": "<(CONTROL_STRUCTURE,if (dp[i % 2][j] &gt; 0),if (dp[i % 2][j] &gt; 0))<SUB>15</SUB>>", "103": "<(&lt;operator&gt;.indexAccess,dp[i % 2][j])<SUB>15</SUB>>", "105": "<(IDENTIFIER,dp,dp[i % 2][j] &gt; 0)<SUB>15</SUB>>", "107": "<(IDENTIFIER,i,i % 2)<SUB>15</SUB>>", "109": "<(IDENTIFIER,j,dp[i % 2][j] &gt; 0)<SUB>15</SUB>>", "111": "<(LOCAL,$iterLocal0: java.util.Iterator)<SUB>16</SUB>>", "113": "<(IDENTIFIER,$iterLocal0,)<SUB>16</SUB>>", "115": "<(&lt;operator&gt;.indexAccess,adj[j])<SUB>16</SUB>>", "117": "<(IDENTIFIER,j,&lt;empty&gt;)<SUB>16</SUB>>", "119": "<(hasNext,&lt;empty&gt;)<SUB>16</SUB>>", "121": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>16</SUB>>", "123": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)<SUB>16</SUB>>", "125": "<(next,&lt;empty&gt;)<SUB>16</SUB>>", "127": "<(&lt;operator&gt;.assignmentPlus,dp[(i + 1) % 2][next] += value(j, next) * dp[i % 2][j])<SUB>17</SUB>>", "129": "<(&lt;operator&gt;.indexAccess,dp[(i + 1) % 2])<SUB>17</SUB>>", "131": "<(&lt;operator&gt;.modulo,(i + 1) % 2)<SUB>17</SUB>>", "133": "<(IDENTIFIER,i,i + 1)<SUB>17</SUB>>", "135": "<(LITERAL,2,(i + 1) % 2)<SUB>17</SUB>>", "137": "<(&lt;operator&gt;.multiplication,value(j, next) * dp[i % 2][j])<SUB>17</SUB>>", "139": "<(IDENTIFIER,this,value(j, next))<SUB>17</SUB>>", "141": "<(IDENTIFIER,next,value(j, next))<SUB>17</SUB>>", "143": "<(&lt;operator&gt;.indexAccess,dp[i % 2])<SUB>17</SUB>>", "145": "<(&lt;operator&gt;.modulo,i % 2)<SUB>17</SUB>>", "147": "<(LITERAL,2,i % 2)<SUB>17</SUB>>", "149": "<(fill,fill(dp[i % 2], 0))<SUB>18</SUB>>", "151": "<(&lt;operator&gt;.indexAccess,dp[i % 2])<SUB>18</SUB>>", "153": "<(&lt;operator&gt;.modulo,i % 2)<SUB>18</SUB>>", "155": "<(LITERAL,2,i % 2)<SUB>18</SUB>>", "157": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>21</SUB>>", "159": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>21</SUB>>", "161": "<(LITERAL,0,int i = 0)<SUB>21</SUB>>", "163": "<(IDENTIFIER,i,i &lt; n)<SUB>21</SUB>>", "165": "<(&lt;operator&gt;.postIncrement,i++)<SUB>21</SUB>>", "167": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>22</SUB>>", "169": "<(&lt;operator&gt;.notEquals,i != 0)<SUB>23</SUB>>", "171": "<(LITERAL,0,i != 0)<SUB>23</SUB>>", "173": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>24</SUB>>", "175": "<(FIELD_IDENTIFIER,out,out)<SUB>24</SUB>>", "177": "<(printf,printf(&quot;%.6f&quot;, dp[(n - 1) % 2][1 &lt;&lt; i]))<SUB>25</SUB>>", "179": "<(IDENTIFIER,System,printf(&quot;%.6f&quot;, dp[(n - 1) % 2][1 &lt;&lt; i]))<SUB>25</SUB>>", "181": "<(LITERAL,&quot;%.6f&quot;,printf(&quot;%.6f&quot;, dp[(n - 1) % 2][1 &lt;&lt; i]))<SUB>25</SUB>>", "183": "<(&lt;operator&gt;.indexAccess,dp[(n - 1) % 2])<SUB>25</SUB>>", "185": "<(&lt;operator&gt;.modulo,(n - 1) % 2)<SUB>25</SUB>>", "187": "<(IDENTIFIER,n,n - 1)<SUB>25</SUB>>", "189": "<(LITERAL,2,(n - 1) % 2)<SUB>25</SUB>>", "191": "<(LITERAL,1,1 &lt;&lt; i)<SUB>25</SUB>>", "193": "<(MODIFIER,PUBLIC)>", "195": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}