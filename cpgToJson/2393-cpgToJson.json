{"edges": [["24", "26"], ["24", "209"], ["24", "210"], ["24", "211"], ["26", "4"], ["26", "27"], ["26", "30"], ["26", "6"], ["26", "34"], ["26", "37"], ["26", "41"], ["26", "42"], ["26", "48"], ["26", "49"], ["26", "52"], ["26", "53"], ["26", "8"], ["26", "57"], ["26", "60"], ["26", "63"], ["26", "82"], ["26", "116"], ["26", "117"], ["26", "124"], ["26", "125"], ["26", "131"], ["26", "207"], ["27", "28"], ["27", "29"], ["30", "3"], ["30", "31"], ["31", "32"], ["31", "33"], ["34", "35"], ["34", "36"], ["37", "5"], ["37", "38"], ["38", "39"], ["38", "40"], ["42", "43"], ["42", "44"], ["44", "45"], ["44", "46"], ["46", "47"], ["49", "50"], ["49", "51"], ["53", "54"], ["53", "55"], ["55", "56"], ["57", "58"], ["57", "59"], ["60", "7"], ["60", "61"], ["61", "62"], ["63", "64"], ["63", "65"], ["63", "68"], ["63", "71"], ["63", "73"], ["65", "66"], ["65", "67"], ["68", "69"], ["68", "70"], ["71", "72"], ["73", "74"], ["74", "75"], ["74", "78"], ["75", "76"], ["75", "77"], ["78", "79"], ["78", "80"], ["80", "81"], ["82", "83"], ["82", "84"], ["82", "87"], ["82", "90"], ["82", "92"], ["84", "85"], ["84", "86"], ["87", "88"], ["87", "89"], ["90", "91"], ["92", "93"], ["93", "94"], ["93", "95"], ["93", "100"], ["93", "103"], ["93", "105"], ["95", "96"], ["95", "97"], ["97", "98"], ["97", "99"], ["100", "101"], ["100", "102"], ["103", "104"], ["105", "106"], ["106", "107"], ["106", "114"], ["107", "108"], ["107", "111"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "113"], ["114", "115"], ["117", "118"], ["117", "119"], ["119", "120"], ["119", "123"], ["120", "121"], ["120", "122"], ["125", "126"], ["125", "127"], ["127", "128"], ["127", "129"], ["129", "130"], ["131", "132"], ["131", "133"], ["131", "136"], ["131", "139"], ["131", "141"], ["133", "134"], ["133", "135"], ["136", "137"], ["136", "138"], ["139", "140"], ["141", "142"], ["141", "145"], ["141", "148"], ["141", "149"], ["141", "155"], ["141", "156"], ["141", "162"], ["141", "163"], ["141", "176"], ["142", "143"], ["142", "144"], ["145", "9"], ["145", "146"], ["146", "147"], ["149", "150"], ["149", "151"], ["151", "152"], ["151", "153"], ["153", "154"], ["156", "157"], ["156", "158"], ["158", "159"], ["158", "160"], ["160", "161"], ["163", "164"], ["163", "165"], ["165", "166"], ["165", "175"], ["166", "167"], ["166", "170"], ["167", "168"], ["167", "169"], ["170", "171"], ["170", "174"], ["171", "172"], ["171", "173"], ["176", "177"], ["176", "182"], ["176", "192"], ["177", "178"], ["177", "181"], ["178", "179"], ["178", "180"], ["182", "183"], ["183", "184"], ["183", "185"], ["183", "188"], ["185", "186"], ["185", "187"], ["188", "189"], ["189", "190"], ["189", "191"], ["192", "193"], ["193", "194"], ["193", "198"], ["194", "195"], ["194", "196"], ["196", "197"], ["198", "199"], ["198", "200"], ["198", "203"], ["200", "201"], ["200", "202"], ["203", "204"], ["204", "205"], ["204", "206"], ["207", "208"], ["27", "33"], ["30", "36"], ["34", "40"], ["37", "46"], ["42", "49"], ["49", "55"], ["53", "59"], ["57", "61"], ["60", "65"], ["117", "129"], ["125", "133"], ["207", "211"], ["29", "27"], ["31", "30"], ["36", "34"], ["38", "37"], ["44", "42"], ["55", "53"], ["59", "57"], ["61", "60"], ["65", "68"], ["68", "75"], ["68", "84"], ["71", "68"], ["84", "87"], ["87", "97"], ["87", "120"], ["90", "87"], ["119", "117"], ["127", "125"], ["133", "136"], ["136", "144"], ["136", "207"], ["139", "136"], ["33", "31"], ["40", "38"], ["46", "44"], ["74", "71"], ["120", "119"], ["129", "127"], ["142", "146"], ["145", "153"], ["149", "160"], ["156", "167"], ["163", "178"], ["75", "80"], ["78", "74"], ["95", "100"], ["100", "108"], ["100", "90"], ["103", "100"], ["144", "142"], ["146", "145"], ["151", "149"], ["158", "156"], ["165", "163"], ["177", "184"], ["177", "196"], ["80", "78"], ["97", "95"], ["153", "151"], ["160", "158"], ["166", "165"], ["178", "177"], ["107", "114"], ["107", "103"], ["114", "103"], ["167", "171"], ["170", "166"], ["184", "185"], ["184", "189"], ["185", "139"], ["194", "199"], ["108", "111"], ["111", "107"], ["171", "170"], ["189", "139"], ["196", "194"], ["199", "200"], ["199", "204"], ["200", "139"], ["204", "139"], ["24", "29"], ["25", "211"], ["27", "211"], ["30", "211"], ["30", "211"], ["34", "211"], ["37", "211"], ["37", "211"], ["42", "211"], ["49", "211"], ["53", "211"], ["53", "211"], ["53", "211"], ["57", "211"], ["60", "211"], ["60", "211"], ["87", "211"], ["87", "211"], ["117", "211"], ["120", "211"], ["119", "211"], ["117", "211"], ["117", "211"], ["127", "211"], ["129", "211"], ["127", "211"], ["125", "211"], ["125", "211"], ["133", "211"], ["136", "211"], ["136", "211"], ["136", "211"], ["207", "211"], ["207", "211"], ["142", "211"], ["146", "211"], ["145", "211"], ["145", "211"], ["149", "211"], ["158", "211"], ["160", "211"], ["158", "211"], ["156", "211"], ["156", "211"], ["166", "211"], ["171", "211"], ["171", "211"], ["166", "211"], ["165", "211"], ["163", "211"], ["163", "211"], ["178", "211"], ["177", "211"], ["177", "211"], ["194", "211"], ["194", "211"], ["194", "211"], ["204", "211"], ["200", "211"], ["189", "211"], ["185", "211"], ["139", "211"], ["95", "211"], ["95", "211"], ["100", "211"], ["100", "211"], ["90", "211"], ["107", "211"], ["107", "211"], ["107", "211"], ["114", "211"], ["103", "211"], ["74", "211"], ["80", "211"], ["78", "211"], ["74", "211"], ["74", "211"], ["71", "211"], ["24", "25"], ["24", "27"], ["24", "34"], ["44", "42"], ["44", "42"], ["24", "49"], ["55", "53"], ["24", "57"], ["119", "117"], ["119", "117"], ["127", "125"], ["127", "125"], ["27", "30"], ["24", "30"], ["34", "37"], ["24", "37"], ["57", "60"], ["24", "60"], ["61", "60"], ["24", "65"], ["24", "84"], ["24", "133"], ["37", "207"], ["204", "207"], ["200", "207"], ["189", "207"], ["185", "207"], ["24", "207"], ["24", "44"], ["46", "44"], ["42", "55"], ["24", "55"], ["46", "61"], ["24", "61"], ["65", "68"], ["71", "68"], ["24", "68"], ["55", "68"], ["68", "71"], ["24", "71"], ["78", "74"], ["78", "74"], ["84", "87"], ["90", "87"], ["24", "87"], ["68", "87"], ["100", "87"], ["24", "90"], ["87", "90"], ["120", "119"], ["120", "119"], ["24", "119"], ["44", "127"], ["78", "127"], ["24", "127"], ["129", "127"], ["133", "136"], ["139", "136"], ["24", "136"], ["125", "136"], ["136", "139"], ["24", "139"], ["24", "142"], ["151", "149"], ["151", "149"], ["158", "156"], ["158", "156"], ["165", "163"], ["165", "163"], ["30", "46"], ["24", "46"], ["87", "95"], ["24", "95"], ["49", "120"], ["114", "120"], ["24", "120"], ["61", "129"], ["24", "129"], ["142", "145"], ["24", "145"], ["146", "145"], ["44", "78"], ["24", "78"], ["80", "78"], ["95", "100"], ["103", "100"], ["24", "100"], ["87", "100"], ["100", "103"], ["24", "103"], ["129", "146"], ["24", "146"], ["127", "151"], ["158", "151"], ["24", "151"], ["153", "151"], ["151", "158"], ["24", "158"], ["160", "158"], ["166", "165"], ["166", "165"], ["24", "165"], ["178", "177"], ["178", "177"], ["24", "177"], ["60", "80"], ["24", "80"], ["87", "97"], ["24", "97"], ["145", "153"], ["24", "153"], ["153", "160"], ["24", "160"], ["167", "166"], ["167", "166"], ["171", "166"], ["171", "166"], ["24", "166"], ["163", "178"], ["24", "178"], ["24", "184"], ["196", "194"], ["53", "107"], ["74", "107"], ["49", "114"], ["24", "114"], ["156", "167"], ["24", "167"], ["149", "167"], ["171", "170"], ["171", "170"], ["24", "170"], ["37", "185"], ["204", "185"], ["200", "185"], ["189", "185"], ["24", "185"], ["24", "199"], ["167", "171"], ["24", "171"], ["167", "171"], ["37", "189"], ["204", "189"], ["200", "189"], ["185", "189"], ["24", "189"], ["117", "196"], ["194", "196"], ["24", "196"], ["37", "200"], ["204", "200"], ["189", "200"], ["185", "200"], ["24", "200"], ["37", "204"], ["200", "204"], ["189", "204"], ["185", "204"], ["24", "204"], ["68", "68"], ["68", "75"], ["68", "74"], ["68", "80"], ["68", "71"], ["68", "78"], ["87", "95"], ["87", "87"], ["87", "97"], ["87", "90"], ["87", "100"], ["136", "167"], ["136", "136"], ["136", "145"], ["136", "146"], ["136", "163"], ["136", "178"], ["136", "149"], ["136", "151"], ["136", "153"], ["136", "170"], ["136", "144"], ["136", "139"], ["136", "158"], ["136", "171"], ["136", "160"], ["136", "166"], ["136", "142"], ["136", "177"], ["136", "165"], ["136", "156"], ["100", "107"], ["100", "103"], ["100", "100"], ["100", "108"], ["100", "111"], ["177", "196"], ["177", "184"], ["177", "194"], ["177", "199"], ["107", "114"], ["184", "185"], ["184", "189"], ["199", "204"], ["199", "200"]], "features": {"24": "<(METHOD,main)<SUB>1</SUB>>", "26": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "27": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "29": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "32": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "6": "<(LOCAL,PrintWriter pw: ANY)<SUB>3</SUB>>", "35": "<(IDENTIFIER,pw,ANY pw = new PrintWriter(System.out))<SUB>3</SUB>>", "37": "<(&lt;init&gt;,new PrintWriter(System.out))<SUB>3</SUB>>", "38": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>3</SUB>>", "40": "<(FIELD_IDENTIFIER,out,out)<SUB>3</SUB>>", "42": "<(&lt;operator&gt;.assignment,int n = parseInt(sc.nextLine()))<SUB>5</SUB>>", "44": "<(parseInt,parseInt(sc.nextLine()))<SUB>5</SUB>>", "46": "<(nextLine,nextLine())<SUB>5</SUB>>", "48": "<(LOCAL,int inversions: int)<SUB>6</SUB>>", "50": "<(IDENTIFIER,inversions,int inversions = 0)<SUB>6</SUB>>", "52": "<(LOCAL,int[] data: int[])<SUB>7</SUB>>", "54": "<(IDENTIFIER,data,int[] data = new int[n])<SUB>7</SUB>>", "56": "<(IDENTIFIER,n,new int[n])<SUB>7</SUB>>", "57": "<(&lt;operator&gt;.assignment,ANY st = new StringTokenizer(sc.nextLine()))<SUB>9</SUB>>", "59": "<(&lt;operator&gt;.alloc,new StringTokenizer(sc.nextLine()))<SUB>9</SUB>>", "7": "<(IDENTIFIER,st,new StringTokenizer(sc.nextLine()))<SUB>9</SUB>>", "62": "<(IDENTIFIER,sc,nextLine())<SUB>9</SUB>>", "64": "<(LOCAL,int i: int)<SUB>10</SUB>>", "66": "<(IDENTIFIER,i,int i = 0)<SUB>10</SUB>>", "68": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>10</SUB>>", "70": "<(IDENTIFIER,n,i &lt; n)<SUB>10</SUB>>", "72": "<(IDENTIFIER,i,i++)<SUB>10</SUB>>", "74": "<(&lt;operator&gt;.assignment,data[i] = parseInt(st.nextToken()))<SUB>11</SUB>>", "76": "<(IDENTIFIER,data,data[i] = parseInt(st.nextToken()))<SUB>11</SUB>>", "78": "<(parseInt,parseInt(st.nextToken()))<SUB>11</SUB>>", "80": "<(nextToken,nextToken())<SUB>11</SUB>>", "82": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>14</SUB>>", "84": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>14</SUB>>", "86": "<(LITERAL,0,int i = 0)<SUB>14</SUB>>", "88": "<(IDENTIFIER,i,i &lt; n)<SUB>14</SUB>>", "90": "<(&lt;operator&gt;.postIncrement,i++)<SUB>14</SUB>>", "92": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>14</SUB>>", "94": "<(LOCAL,int j: int)<SUB>15</SUB>>", "96": "<(IDENTIFIER,j,int j = i + 1)<SUB>15</SUB>>", "98": "<(IDENTIFIER,i,i + 1)<SUB>15</SUB>>", "100": "<(&lt;operator&gt;.lessThan,j &lt; n)<SUB>15</SUB>>", "102": "<(IDENTIFIER,n,j &lt; n)<SUB>15</SUB>>", "104": "<(IDENTIFIER,j,j++)<SUB>15</SUB>>", "106": "<(CONTROL_STRUCTURE,if (data[i] &gt; data[j]),if (data[i] &gt; data[j]))<SUB>16</SUB>>", "108": "<(&lt;operator&gt;.indexAccess,data[i])<SUB>16</SUB>>", "110": "<(IDENTIFIER,i,data[i] &gt; data[j])<SUB>16</SUB>>", "112": "<(IDENTIFIER,data,data[i] &gt; data[j])<SUB>16</SUB>>", "114": "<(&lt;operator&gt;.postIncrement,inversions++)<SUB>17</SUB>>", "116": "<(LOCAL,boolean inversiontype: boolean)<SUB>21</SUB>>", "118": "<(IDENTIFIER,inversiontype,boolean inversiontype = inversions % 2 == 1)<SUB>21</SUB>>", "120": "<(&lt;operator&gt;.modulo,inversions % 2)<SUB>21</SUB>>", "122": "<(LITERAL,2,inversions % 2)<SUB>21</SUB>>", "124": "<(LOCAL,int n2: int)<SUB>23</SUB>>", "126": "<(IDENTIFIER,n2,int n2 = parseInt(sc.nextLine()))<SUB>23</SUB>>", "128": "<(IDENTIFIER,Integer,parseInt(sc.nextLine()))<SUB>23</SUB>>", "130": "<(IDENTIFIER,sc,nextLine())<SUB>23</SUB>>", "132": "<(LOCAL,int i: int)<SUB>24</SUB>>", "134": "<(IDENTIFIER,i,int i = 0)<SUB>24</SUB>>", "136": "<(&lt;operator&gt;.lessThan,i &lt; n2)<SUB>24</SUB>>", "138": "<(IDENTIFIER,n2,i &lt; n2)<SUB>24</SUB>>", "140": "<(IDENTIFIER,i,i++)<SUB>24</SUB>>", "142": "<(&lt;operator&gt;.assignment,st = new StringTokenizer(sc.nextLine()))<SUB>25</SUB>>", "144": "<(&lt;operator&gt;.alloc,new StringTokenizer(sc.nextLine()))<SUB>25</SUB>>", "9": "<(IDENTIFIER,st,new StringTokenizer(sc.nextLine()))<SUB>25</SUB>>", "147": "<(IDENTIFIER,sc,nextLine())<SUB>25</SUB>>", "149": "<(&lt;operator&gt;.assignment,int a = parseInt(st.nextToken()))<SUB>26</SUB>>", "151": "<(parseInt,parseInt(st.nextToken()))<SUB>26</SUB>>", "153": "<(nextToken,nextToken())<SUB>26</SUB>>", "155": "<(LOCAL,int b: int)<SUB>27</SUB>>", "157": "<(IDENTIFIER,b,int b = parseInt(st.nextToken()))<SUB>27</SUB>>", "159": "<(IDENTIFIER,Integer,parseInt(st.nextToken()))<SUB>27</SUB>>", "161": "<(IDENTIFIER,st,nextToken())<SUB>27</SUB>>", "163": "<(&lt;operator&gt;.assignment,int parity = (b - a) * (b - a + 1) / 2)<SUB>29</SUB>>", "165": "<(&lt;operator&gt;.division,(b - a) * (b - a + 1) / 2)<SUB>29</SUB>>", "167": "<(&lt;operator&gt;.subtraction,b - a)<SUB>29</SUB>>", "169": "<(IDENTIFIER,a,b - a)<SUB>29</SUB>>", "171": "<(&lt;operator&gt;.subtraction,b - a)<SUB>29</SUB>>", "173": "<(IDENTIFIER,a,b - a)<SUB>29</SUB>>", "175": "<(LITERAL,2,(b - a) * (b - a + 1) / 2)<SUB>29</SUB>>", "177": "<(&lt;operator&gt;.equals,parity % 2 == 0)<SUB>30</SUB>>", "179": "<(IDENTIFIER,parity,parity % 2)<SUB>30</SUB>>", "181": "<(LITERAL,0,parity % 2 == 0)<SUB>30</SUB>>", "183": "<(CONTROL_STRUCTURE,if (inversiontype),if (inversiontype))<SUB>31</SUB>>", "185": "<(println,println(&quot;odd&quot;))<SUB>32</SUB>>", "187": "<(LITERAL,&quot;odd&quot;,println(&quot;odd&quot;))<SUB>32</SUB>>", "189": "<(println,println(&quot;even&quot;))<SUB>34</SUB>>", "191": "<(LITERAL,&quot;even&quot;,println(&quot;even&quot;))<SUB>34</SUB>>", "193": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>35</SUB>>", "195": "<(IDENTIFIER,inversiontype,inversiontype = !inversiontype)<SUB>36</SUB>>", "197": "<(IDENTIFIER,inversiontype,!inversiontype)<SUB>36</SUB>>", "199": "<(IDENTIFIER,inversiontype,if (inversiontype))<SUB>37</SUB>>", "201": "<(IDENTIFIER,pw,println(&quot;odd&quot;))<SUB>38</SUB>>", "203": "<(CONTROL_STRUCTURE,else,else)<SUB>40</SUB>>", "205": "<(IDENTIFIER,pw,println(&quot;even&quot;))<SUB>40</SUB>>", "207": "<(close,close())<SUB>43</SUB>>", "209": "<(MODIFIER,PUBLIC)>", "211": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}