{"code": "    public static void main(String[] args) throws IOException {\n        FastReader fr = new FastReader();\n        FastWriter fw = new FastWriter();\n        int n = fr.nextInt();\n        int m = fr.nextInt();\n        for (int r = 0; r < n / 2; r++) {\n            for (int c = 0; c < m; c++) {\n                fw.println((r + 1) + \" \" + (c + 1));\n                fw.println((n - r) + \" \" + (m - c));\n            }\n        }\n        if (n % 2 != 0) {\n            int r = n / 2;\n            for (int c = 0; c < m / 2; c++) {\n                fw.println((r + 1) + \" \" + (c + 1));\n                fw.println((r + 1) + \" \" + (m - c));\n            }\n            if (m % 2 != 0) fw.println((r + 1) + \" \" + (m / 2 + 1));\n        }\n        fw.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint a[]=new int[200005];\n\t\tfor (int i=1;i<=n;i++) \n\t\ta[i]=sc.nextInt();\n\t\tfor (int i=2;i<n;i++) \n\t\tif (a[i-1]>a[i]&&a[i]<a[i+1]) {\n\t\t\tSystem.out.println(\"NO\");\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(\"YES\");\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new SequenceTransformation().solve();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String [] args) throws IOException\n        PrintWriter pw=new PrintWriter(System.out);//use pw.println() not pw.write();\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st=new StringTokenizer(br.readLine());\n        /*\n        inputCopy\n5 3\nxyabd\noutputCopy\n29\ninputCopy\n7 4\nproblem\noutputCopy\n34\ninputCopy\n2 2\nab\noutputCopy\n-1\ninputCopy\n12 1\nabaabbaaabbb\noutputCopy\n1\n        */\n        int n=Integer.parseInt(st.nextToken());\n        int k=Integer.parseInt(st.nextToken());\n        st=new StringTokenizer(br.readLine());\n        String str=st.nextToken();\n        char [] arr=str.toCharArray();\n        Arrays.sort(arr);\n        int weight=arr[0]-96;\n        char a=arr[0];\n        int included=1;\n        for(int i=1;i<arr.length;++i)\n        {\n            if(included==k)\n                break;\n            char c=arr[i];\n            if(c-a<2)\n                continue;\n           \n            weight+=arr[i]-96;\n            ++included;\n            a=arr[i];\n            \n        }\n        if(included==k)\n            pw.println(weight);\n        else\n            pw.println(-1);\n        pw.close();//Do not forget to write it after every program return statement !!\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        FastPrinter out = new FastPrinter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Main().solve();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        sb = new StringBuilder();\n        n = sc.nextInt();\n        TotalTime = sc.nextLong();\n        problems = new Problem[n];\n        for (int i = 0; i < n; i++) {\n            problems[i] = new Problem (sc.nextInt(), sc.nextLong(), i);\n        }\n        Arrays.sort(problems);\n        long num = -1;\n        long high = n;\n        long low = 0;\n        int iter = 0;\n        while (high - low > 1) {\n            num = (high + low) / 2;\n            if (test(num, false)) {\n                low = num;\n            }\n            else {\n                high = num;\n            }\n        }\n        if (test(high, false))\n            num = high;\n        else\n            num = low;\n        test(num, true);\n        System.out.print(sb);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String ar[]) throws IOException\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer nk=new StringTokenizer(br.readLine());\n        int n=Integer.parseInt(nk.nextToken());\n        int k=Integer.parseInt(nk.nextToken());\n        String st[]=br.readLine().split(\" \");\n        \n        int ans[]=new int[n];\n        int a[]=new int[n];\n        for(int i=0;i<n;i++)\n            ans[i]=Integer.parseInt(st[i]);  \n\n        for(int i=1;i<n;i++)\n            a[i]=ans[i]-ans[i-1];\n        a[0]=-1;\n\n        Arrays.sort(a);\n        int count=0,sum=0;\n        for(int i=0;i<n;i++)\n            if(a[i]<0)\n                count++;\n            else\n                sum=sum+a[i];\n        \n        k=k-count;\n        int i=n-1;\n        while(k>0 && i>=0)\n        {\n            if(a[i]>-1)\n            {\n                sum=sum-a[i];\n                k--;\n            }\n            i--;\n        }\n        System.out.println(sum);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)throws IOException {\n        /*\ninputCopy\n4\n2 1 2 1\noutputCopy\n4\ninputCopy\n5\n0 -1 -1 -1 -1\noutputCopy\n4\n*/\n        PrintWriter pw = new PrintWriter(System.out);\n        FastReader fr = new FastReader();\n        int n=fr.i();\n        int [] arr=new int[n];\n        fr.scanIntArr(arr);\n        int min=Integer.MAX_VALUE;\n        int max=Integer.MIN_VALUE;\n        long sum=0;\n        if(n==1)\n        {\n            pw.println(arr[0]);\n            pw.flush();\n            pw.close();\n            return;\n        }\n        for(int i=0;i<n;++i)\n        {\n            if(arr[i]<min)\n                min=arr[i];\n            if(arr[i]>max)\n                max=arr[i];\n            sum+=Math.abs(arr[i]);\n        }\n        if(min>0)\n        {\n            sum-=2*min;\n        }\n        if(max<0)\n        {\n            sum+=2*max;\n        }\n        pw.println(sum);\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        // int n = Integer.parseInt(bf.readLine());\n        StringTokenizer st = new StringTokenizer(bf.readLine());\n        // int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        StringBuilder ans1 = new StringBuilder();\n        StringBuilder ans2 = new StringBuilder();\n        for(int i=0; i<2229; i++) ans1.append('5');\n        ans1.append('6');\n        for(int i=0; i<2230; i++) ans2.append('4');\n        out.println(ans1.toString());\n        out.println(ans2.toString());\n        out.close(); System.exit(0);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String args[] ) {\n        \n        FastReader sc = new FastReader();\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[] arr = new int[105];\n        \n        for(int i=0;i<m;i++){\n            int a = sc.nextInt();\n            arr[a]++;\n        }\n        \n        for(int i=1;i<=1000;i++){\n            int sum=0;\n            \n            for(int a:arr){\n                if(a!=0){\n                    sum+=(a/i);\n                }\n            }\n            \n            \n            if(sum<n){\n                System.out.println(i-1);\n                return;\n            }\n            \n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        int tc = in.nextInt();\n        for(int i = 0; i < tc; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        a = sc.nextIntArray(n);\n        long inversions = divide(0, n - 1);\n//        out.println(inversions);\n//        System.err.println(Arrays.toString(a));\n        if (n == 5) out.println(\"Petr\");\n        else {\n            if (n % 2 == 0) out.println(inversions % 2 == 0 ? \"Petr\" : \"Um_nik\");\n            else out.println(inversions % 2 != 0 ? \"Petr\" : \"Um_nik\");\n        }\n        out.flush();\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            int S=Integer.parseInt(s1[1]);\n            if(S%n==0)\n             System.out.println(S/n);\n            else\n             System.out.println(S/n+1);\n      }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tint n=nextInt();\n\t\tint m=nextInt();\n\t\tlong b[]=new long[n];\n\t\tlong g[]=new long[m];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tb[i]=nextInt();\n\t\tfor(int i=0;i<m;i++)\n\t\t\tg[i]=nextInt();\n\t\tArrays.sort(b);\n\t\tArrays.sort(g);\n\t\tif(b[n-1]>g[0])\n\t\t\tSystem.out.println(\"-1\");\n\t\telse if(b[n-1]==g[0]){\n\t\t\tlong sum=0;\n\t\t\tfor(int i=0;i<m;i++)\n\t\t\t\tsum+=g[i];\n\t\t\tfor(int i=0;i<n-1;i++){\n\t\t\t\tsum+=(m*b[i]);\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}else{\n\t\t\tlong sum=0;\n\t\t\tfor(int i=0;i<m;i++)\n\t\t\t\tsum+=g[i];\n\t\t\tsum+=b[n-1];\n\t\t\tsum+=(b[n-2]*(m-1));\n\t\t\tfor(int i=0;i<n-2;i++){\n\t\t\t\tsum+=(m*b[i]);\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tint A = scan.nextInt();\n\t\tint B = scan.nextInt();\n\t\tlong x = scan.nextInt();\n\t\tlong y = scan.nextInt();\n\t\tlong z = scan.nextInt();\n\t\t\n\t\tlong requiredA = x * 2 + y;\n\t\tlong requiredB = y + z * 3;\n\t\t\n\t\tlong neededA = Math.max(0, requiredA - A);\n\t\tlong neededB = Math.max(0, requiredB - B);\n\t\tSystem.out.print(neededA + neededB);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new C().run();\n    }\n", "complexity": "linear"}
{"code": "public static void main(String[] args)\n\tScanner sc=new Scanner(System.in);\n\tint n=sc.nextInt();\n\tHashMap<Integer,Integer> h=new HashMap();\n\t//HashMap<Integer,Integer> h1=new HashMap();\n\tint[] a=new int[n];\n\tint x=sc.nextInt();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta[i]=sc.nextInt();\n\t\tif(h.get(a[i])==null)\n\t\t{\n\t\t\th.put(a[i], 1);\n\t\t\t//h1.put(a[i],i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(0);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint num=a[i]&x;\n\t\tif(num==a[i])\n\t\t\tcontinue;\n\t\tif(h.get(num)==null)\n\t\t\tcontinue;\n\t\t\n\t\telse\n\t\t{\n\t\t\t\n\t\t\tSystem.out.print(1);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint num=a[i]&x;\n\t\tif(num==a[i])\n\t\t\tcontinue;\n\t\tif(h.get(num)==null)\n\t\t\th.put(num, 1);\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(2);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tSystem.out.print(-1);\n\t\n     \n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(), m = sc.nextInt();\n\n        a = new int[101];\n        for (int i = 0; i < m; i++) {\n            int type = sc.nextInt();\n            a[type] = a[type] + 1;\n        }\n\n        int lo=1, hi=100, max=0;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo)/2;\n            if (check(n, mid)) {\n                max = mid;\n                lo = mid+1;\n            } else {\n                hi = mid -1;\n            }\n        }\n        System.out.println(max);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] cc = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tcc[i] = Integer.parseInt(st.nextToken());\n\t\tst = new StringTokenizer(br.readLine());\n\t\tint[] aa = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\taa[i] = Integer.parseInt(st.nextToken()) - 1;\n\t\tint[] used = new int[n];\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (used[i] == 2)\n\t\t\t\tcontinue;\n\t\t\tint j = i;\n\t\t\twhile (used[j] == 0) {\n\t\t\t\tused[j] = 1;\n\t\t\t\tj = aa[j];\n\t\t\t}\n\t\t\tif (used[j] == 1) {\n\t\t\t\tint c = cc[j];\n\t\t\t\twhile (used[j] == 1) {\n\t\t\t\t\tused[j] = 2;\n\t\t\t\t\tc = Math.min(c, cc[j]);\n\t\t\t\t\tj = aa[j];\n\t\t\t\t}\n\t\t\t\tans += c;\n\t\t\t}\n\t\t\tj = i;\n\t\t\twhile (used[j] == 1) {\n\t\t\t\tused[j] = 2;\n\t\t\t\tj = aa[j];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new D().solve();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[] ) {\n        \n        FastReader sc = new FastReader();\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[] arr = new int[105];\n        \n        for(int i=0;i<m;i++){\n            int a = sc.nextInt();\n            arr[a]++;\n        }\n        \n        for(int i=1;i<=1000;i++){\n            int sum=0;\n            \n            for(int a:arr){\n                if(a!=0){\n                    sum+=(a/i);\n                }\n            }\n            \n            \n            if(sum<n){\n                System.out.println(i-1);\n                return;\n            }\n            \n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n;\n        n = sc.nextInt();\n        int[] arr = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        int min = 1000000000, temp;\n\n        for (int i = 0; i < n; i++) {\n            temp = arr[i] / Math.max(i, n - 1 - i);\n            if (temp < min)\n                min = temp;\n//            System.out.println(i + \" \" + temp);\n        }\n\n        System.out.println(min);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tint n=Integer.parseInt(br.readLine());\n\t\tint[] A=new int[n];\n\t\tString[] s=br.readLine().split(\" \");\n\t\tfor(int i=0;i<n;i++){\n\t\t\tA[i]=Integer.parseInt(s[i]);\n\t\t}\n\t\tMap memo=new HashMap();\n\t\tint[] f=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(!memo.containsKey(A[i])){\n\t\t\t\tmemo.put(A[i],1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint ct=(int)memo.get(A[i]);\n\t\t\t\tmemo.put(A[i],ct+1);\n\t\t\t}\n\t\t\tint tot=0;\n\t\t\tif(memo.containsKey(A[i]-1)){\n\t\t\t\ttot+=(int)memo.get(A[i]-1);\n\t\t\t}\n\t\t\tif(memo.containsKey(A[i]+1)){\n\t\t\t\ttot+=(int)memo.get(A[i]+1);\n\t\t\t}\n\t\t\ttot+=(int)memo.get(A[i]);\n\t\t\tf[i]=tot;\n\t\t}\n\t\tBigInteger res=new BigInteger(\"0\");\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint tot1=i+1-f[i];\n\t\t\tint tot2=0;\n\t\t\tif(memo.containsKey(A[i]-1)){\n\t\t\t\ttot2+=(int)memo.get(A[i]-1);\n\t\t\t}\n\t\t\tif(memo.containsKey(A[i]+1)){\n\t\t\t\ttot2+=(int)memo.get(A[i]+1);\n\t\t\t}\n\t\t\ttot2+=(int)memo.get(A[i]);\n\t\t\ttot2=n-i-1-(tot2-f[i]);\n\t\t\t//res+=(long)(tot1-tot2)*(long)A[i];\n\t\t\tres=res.add(BigInteger.valueOf((long)(tot1-tot2)*(long)A[i]));\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n=sc.nextInt();\n        int arr[]=new int[n];\n        for (int i=0;i<n;i++)\n        {\n            arr[i]=sc.nextInt();\n        }\n        for (int i=0;i<n;i++)\n        {\n            if (arr[i]>=0)\n            {\n                arr[i]=-arr[i]-1;\n            }\n        }\n        if (n%2!=0)\n        {\n            int min=0;\n            for (int i=1;i<n;i++)\n            {\n                if (arr[i]<arr[min])\n                    min=i;\n            }\n            arr[min]=-arr[min]-1;\n        }\n        for (int x:arr)\n        {\n            System.out.print(x + \" \");\n        }\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        Scanner stdin = new Scanner(System.in);\n        /*int n = stdin.nextInt();\n        for(int i = 0; i < n; i++)\n        {\n        \ttest(stdin);\n        }*/\n        test(stdin);\n        stdin.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Main2().solve();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new cf1(),\"cf1\",1<<26).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        \n        FastReader in = new FastReader();\n        \n        long n = in.nextLong();\n        long m = in.nextLong();\n        long a = in.nextLong();\n        long b = in.nextLong();\n        long total = 0;\n        \n        long val =(n%m);\n        if (n%m != 0){\n            \n            long x = (val)*b;\n            long y = (m-val)*a;\n            \n            total = Math.min(x, y);\n        }\n        System.out.println(Math.abs(total));\n        \n    }\n", "complexity": "linear"}
{"code": "     public static void main(String []args){\n        final long MOD = 1000000007;\n        Scanner scan = new Scanner(System.in);\n        int now = 1;\n        int maxStatements = scan.nextInt();\n        long[] dp = new long[maxStatements + 1];\n        dp[now] = 1;\n        while(maxStatements > 0)\n        {\n            String add = scan.next();\n            if (add.equals(\"f\"))\n            {\n                now++;\n            }\n            else\n            {\n                for (int k = 1; k <= now; k++)\n                {\n                    dp[k] = ((dp[k] + dp[k-1]) % MOD);\n                }\n            }\n            maxStatements--;\n        }\n        System.out.println(dp[now]);\n     }\n", "complexity": "quadratic"}
{"code": "    public static void main( String[] args ) {\n        Scanner in = new Scanner( System.in );\n\tint a = 0, b = 0;\n\tSystem.out.println( \"? 0 0 \" );\n\tSystem.out.flush();\n\tint c = in.nextInt();\n\tfor ( int i = 29; i >= 0; i-- ) {\n\t    System.out.println( \"? \" + ( a + ( 1 << i ) ) + \" \" + b );\n\t    System.out.flush();\n\t    int q1 = in.nextInt();\n\t    System.out.println( \"? \" + a + \" \" + ( b + ( 1 << i ) ) );\n\t    System.out.flush();\n\t    int q2 = in.nextInt();\n\t    if ( q1 == q2 ) {\n\t\tif ( c == 1 )\n\t\t    a += ( 1 << i );\n\t\telse if ( c == -1 )\n\t\t    b += ( 1 << i );\n\t\tc = q1;\n\t    }\n\t    else if ( q1 == -1 ) {\n\t\ta += ( 1 << i );\n\t\tb += ( 1 << i );\n\t    }\n\t    else if ( q1 == -2 )\n\t\treturn;\n\t}\n\tSystem.out.println( \"! \" + a + \" \" + b );\n\tSystem.out.flush();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint w = sc.nextInt(), h = sc.nextInt() , n = sc.nextInt();\n\t\tTreeSet<Integer> vCuts = new TreeSet<>() , hCuts = new TreeSet<>();\n\t\tTreeMap<Integer, Integer> vSegments = new TreeMap<>() , hSegments = new TreeMap<>();\n\t\tvCuts.add(0);vCuts.add(w);\n\t\thCuts.add(0);hCuts.add(h);\n\t\tinsert(vSegments, w, 1);\n\t\tinsert(hSegments, h, 1);\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(n-->0)\n\t\t{\n\t\t\tif(sc.next().equals(\"H\"))\n\t\t\t\tcut(hCuts, hSegments, sc.nextInt());\n\t\t\telse\n\t\t\t\tcut(vCuts, vSegments, sc.nextInt());\n\t\t\tsb.append(1l*hSegments.lastKey() * vSegments.lastKey() + \"\\n\");\n\t\t}\n\t\tSystem.out.println(sb);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tScanner input =new Scanner(System.in);\n\t\tint a = input.nextInt();\n\t\tint b = input.nextInt();\n\t\tchar[] s1 =new char[a];\n\t\ts1 = input.next().toCharArray();\n\t\t\n\t\tchar[] s2 = new char[b];\n\t\ts2 = input.next().toCharArray();\n\t    boolean condition = false;\n\t    for(int i=0; i<a;i++){\n\t    \tif(s1[i]=='*'){\n\t    \t\tcondition= true;\n\t    \t\tbreak;\n\t    \t}\n\t    }\n\t   \n\t    if(!condition){\n\t    \tif(match(s1,s2)){\n\t    \t\tSystem.out.println(\"YES\");\n\t    \t\t\n\t    \t}\n\t    \telse\n\t    \t\tSystem.out.println(\"NO\");\n\t       return;\n\t    }\n\t    else{\n\t    \tint i=0;\n\t    \tif(s1.length-1>s2.length){\n\t    \t\tSystem.out.println(\"NO\");\n\t    \t\treturn;\n\t    \t}\n\t    \twhile(i<s1.length && i<s2.length && s1[i]==s2[i]){\n\t    \t\ti++;\n\t    \t}\n\t    \tint j=s2.length-1;\n\t    \tint k = s1.length-1;\n\t    \twhile(j>=0 && k>=0 &&  s1[k]==s2[j] && i<=j){\n\t    \t\tj--;\n\t    \t\tk--;\n\t    \t}\n\t    \t//System.out.println(i);\n\t    \tif(i==k && i>=0 && i<s1.length && s1[i]=='*' ){\n\t    \t\tSystem.out.println(\"YES\");\n\t    \t\treturn;\n\t    \t}\n\t    \tSystem.out.println(\"NO\");\n\t    }\n\t\t\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        S = sc.next();\n\n        System.out.println(solve());\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]){\n     Scanner sc=new Scanner(System.in);\n    int n=sc.nextInt();\n    int a[]=new int[n];\n    for(int i=0;i<n;i++)\n    a[i]=sc.nextInt();\n    Arrays.sort(a);\n    //boolean \n    int t=1,c=0;\n    for(int i=1;i<n;i++){\n        if(a[i]==a[i-1])\n        {\n            if(i-2>=0&&a[i-2]==a[i-1]-1){\n                System.out.println(\"cslnb\");\n                return;\n            }\n            c++;\n        }\n        if(a[i]==a[i-1]&&a[i]==0){\n        System.out.println(\"cslnb\");\n        return;\n        }\n    }\n    if(c>1)\n    {\n        System.out.println(\"cslnb\");\n        return;\n    }\n    for(int i=0;i<n;i++){\n        if((a[i]-i)%2!=0)\n        t=t^1;\n    }\n    if(t==1)\n    System.out.println(\"cslnb\");\n    else\n    System.out.println(\"sjfnb\");\n    \n    \n    \n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] ar = new int[200];\n\t\t\n\t\tString str = in.next();\n\t\tfor(int i = 0; i < str.length(); i++)\n\t\t\tar[ str.charAt(i) ]++;\n\t\t\t\n\t\tint ans = 100000;\n\t\t\n\t\tfor(int i = 'A'; i < 'A' + m; i++)\n\t\t\tans = Math.min(ans, ar[i]);\n\t\tans *= m;\n\t\t\n\t\tSystem.out.println(ans);\n\t\t\n\t\tin.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\nScanner input = new Scanner(System.in);\nlong size = input.nextLong();\nlong a = input.nextLong();\nlong b = input.nextLong();\n  long sum = a+b;\n   long d = sum-2;\n   long d1 = size*2 - sum;\nif(d<d1) System.out.println(\"White\");\nelse if(d>d1) System.out.println(\"Black\");\nelse System.out.println(\"White\");\n\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n        \n        \n        new Thread(null,new Runnable() {\n        \tpublic void run() {\n        \t\tnew Main().solve();\n        \t}\n        },\"1\",1<<26).start();\n        \n        \n    }\n", "complexity": "quadratic"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            long x=Long.parseLong(s1[1]);\n            long y=Long.parseLong(s1[2]);\n            long S=0;\n            long mod=1000000007;\n            B a[]=new B[n];\n            TreeMap<Long,Long> tm=new TreeMap<Long,Long>();\n            long ans[]=new long[n];\n            for(int i=0;i<n;i++)\n            {\n              String s2[]=br.readLine().split(\" \");\n              long l=Long.parseLong(s2[0]);\n              long r=Long.parseLong(s2[1]);\n              B b1=new B(l,r);\n              a[i]=b1;\n            }\n            Arrays.sort(a,new The_Comp());\n            \n            for(int i=0;i<n;i++)\n            {\n                  long l=a[i].x;\n                  long r=a[i].y;\n                  if(tm.floorKey(l-1)!=null)\n                  {\n                        long u=tm.floorKey(l-1);\n                        long v=l;\n                        if((v-u)*y<x)\n                        { ans[i]=((r-u)*y)%mod; \n                          if(tm.get(u)>1)\n                           tm.put(u,tm.get(u)-1);\n                          else\n                          tm.remove(u); \n                        }\n                        else\n                        { ans[i]=(x+(r-l)*y)%mod; }\n                  }\n                  else\n                   ans[i]=(x+(r-l)*y)%mod;\n                  S=(S+ans[i])%mod;\n                  if(tm.containsKey(r))\n                   tm.put(r,1+tm.get(r));\n                  else\n                   tm.put(r,(long)1);\n            }\n            System.out.println(S);\n      }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\tFastReader in=new FastReader();\n\tHashMap<Integer,Integer>map=new HashMap<Integer,Integer>();\n\n\tint n=in.nextInt();\n\tint r=in.nextInt();\n\t \n\tdouble theta=(double)360/(double)n;\n\t \n\tdouble b=1-((double)2/(double)(1-Math.cos((double)2*Math.PI/(double)n)));\n\tdouble x=Math.sqrt(1-b)-1;\n\tdouble ans=(double)r/(double)x;\n\tSystem.out.println(ans);\n\n\n\n\n\n\t}\n", "complexity": "constant"}
{"code": "public static void main(String[] args)\n    Scanner input = new Scanner(System.in);\n    int a = input.nextInt(), v = input.nextInt();\n    int l = input.nextInt(), d = input.nextInt(), w = input.nextInt();\n    double lo = 0, hi = v;\n    for(int iter = 0; iter < 1000; iter++)\n    {\n        double mid = (lo+hi)/2;\n        if(can(mid, a, d, w)) lo = mid;\n        else hi = mid;\n    }\n    //System.out.println(lo);\n    double t1 = lo / a;\n    double gone = .5 * t1 * t1 * a;\n    if(lo > w)\n    {\n        gone += -a * .5 * (lo - w) / a * (lo - w) / a + lo * (lo - w) / a;\n        t1 += (lo - w) / a;\n    }\n    t1 += (d - gone) / lo;\n    //System.out.println(t1);\n    double v0 = Math.min(lo, w);\n    double togo = l - d;\n    double toAdd = (-v0 + Math.sqrt(v0 * v0 + 4 * togo * .5 * a)) / a;\n    if(toAdd * a + v0 > v)\n    {\n        double tt = (v - v0) / a;\n        t1 += tt;\n        togo -= .5 * a * tt * tt + v0 * tt;\n        t1 += togo / v;\n    }\n    else t1 += toAdd;\n    System.out.println(t1);\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        char[] line = br.readLine().toCharArray();\n        int n = line.length;\n\n        int l = 0;\n        ArrayList<Node> groups = new ArrayList<>();\n        Node node = new Node(line[0], 1);\n        groups.add(node);\n        for (int i = 1; i < n; i++) {\n            if (line[i] == groups.get(l).letter) {\n                groups.get(l).count++;\n            } else {\n                node = new Node(line[i], 1);\n                groups.add(node);\n                l++;\n            }\n        }\n\n        int moves = 0;\n        ArrayList<Node> temp = new ArrayList<>();\n        while (groups.size() > 1) {\n            moves++;\n\n            l = groups.size();\n            groups.get(0).count--;\n            groups.get(l - 1).count--;\n            for (int i = 1; i < l - 1; i++) {\n                groups.get(i).count -= 2;\n            }\n\n            int p;\n            for (p = 0; p < l; p++) {\n                if (groups.get(p).count > 0) {\n                    temp.add(groups.get(p));\n                    break;\n                }\n            }\n            int lTemp = temp.size();\n            for (p++; p < l; p++) {\n                if (groups.get(p).count <= 0) {\n                    continue;\n                }\n                if (groups.get(p).letter == temp.get(lTemp - 1).letter) {\n                    temp.get(lTemp - 1).count += groups.get(p).count;\n                } else {\n                    temp.add(groups.get(p));\n                    lTemp++;\n                }\n            }\n\n            groups.clear();\n            groups.addAll(temp);\n            temp.clear();\n        }\n\n        System.out.println(moves);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[])throws IOException\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tString s1 = br.readLine();\n\t\tString s2 = br.readLine();\n\t\tint i=0;\n\t\tchar c1,c2;\n\t\tint cost = 0;\n\t\twhile(i<n)\n\t\t{\n\t\t\tc1 = s1.charAt(i);\n\t\t\tc2 = s2.charAt(i);\n\t\t\tif(c1 != c2)\n\t\t\t{\n\t\t\t\tif((i+1)<n && s1.charAt(i+1) != s2.charAt(i+1) && s1.charAt(i) != s1.charAt(i+1))\n\t\t\t\t{\n\t\t\t\t\tcost +=1;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcost +=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(cost);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String [] args) {\n\t\tScanner kb = new Scanner(System.in);\n\t\tint num = kb.nextInt();\n\t\t\n\t\tint[] beacons = new int[1000002];\n\t\tfor (int i=0; i<num; i++) {\n\t\t\tbeacons[kb.nextInt()] = kb.nextInt();\n\t\t}\n\t\t\n\t\tint [] dp = new int[1000002];\n\t\tint max = 0;\n\t\tif (beacons[0] != 0)\n\t\t\tdp[0] = 1;\n\t\t\n\t\tfor (int i=1; i<dp.length; i++) {\n\t\t\tif (beacons[i] == 0) {\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t} else {\n\t\t\t\tint index = i-1-beacons[i];\n\t\t\t\tif (index<0)\n\t\t\t\t\tdp[i] = 1;\n\t\t\t\telse\n\t\t\t\t\tdp[i] = 1 + dp[index];\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t\t//if (i<11)\n\t\t\t\t//System.out.println(i +\" is \"+dp[i]);\n\t\t}\n\t\t\n\t\tSystem.out.println(num-max);\n\t}\n", "complexity": "linear"}
{"code": "       public static void main(String args[]){\n              Scanner sc = new Scanner(System.in);\n              int n = sc.nextInt();\n              int ans = 0;\n              for(int i = 1; i <= n; i++){\n                     ans += ((i*2) <= n) ? i : n-i+1;\n              }\n              System.out.println(ans);\n       }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws Exception\n        Reader.init(System.in);\n        int n = Reader.nextInt();\n        int p = Reader.nextInt();\n        int L = Reader.nextInt();\n        int R = Reader.nextInt();\n        int a = 1;\n        int b = n;\n        int res = 0;\n        \n        if(a == L && b == R)\n        {\n            res = 0;\n        }\n        else if(L != a && R != b && p >= L && p <= R)\n        {\n            res = Math.min(p-L, R-p);\n            res += R- L + 2;\n        }\n        else if(L != a && R != b && p < L )\n        {\n            res += L-p + 1;\n            res += R - L +1;\n        }\n        else if(L != a && R != b && p > R)\n        {\n            res += p-R + 1;\n            res += R - L +1;\n        }\n        else if(a == L && p >=L && p<=R)\n        {\n            res += R - p + 1;\n        }\n        else if(R == b && p>=L && p<=R)\n        {\n            res += p - L + 1;\n        }\n        else if(a == L && p > R)\n        {\n            res += p - R + 1;\n        }\n        else if(R == b && p<L)\n        {\n            res += L - p + 1;\n        }\n            \n            \n        pw.print(res);\n        pw.close();\n \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskG solver = new TaskG();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n    \tint n = sc.nextInt();\n    \tint k = sc.nextInt();\n    \tchar str[][] = new char[5][n];\n        for(int i = 0;i < 4;i ++){\n        \tfor(int j = 0;j < n;j ++)\n                str[i][j] = '.';\n        }\n        if(k % 2 == 0){\n            k /= 2;\n            for(int i = 1;i <= 2;i++){\n                for(int j = 1;j <= k;j++)\n                     str[i][j] = '#'; \n            }\n        }\n        else{\n            str[1][n / 2] = '#';\n            if(k != 1){\n                int tmp = n / 2;\n                if(k <= n - 2){\n                    for(int i = 1;i<= (k - 1) / 2;i++){\n                        str[1][i] = '#';\n                        str[1][n - 1 - i] = '#';\n                    }\n                }\n                else{\n                    for(int i = 1;i <= n - 2;i++) str[1][i] = '#';\n                    k -= n - 2;\n                    for(int i = 1;i <= k/2;i++){\n                        str[2][i] = '#';\n                        str[2][n - 1 - i]='#';\n                    }\n                }\n     \n            }\n        }\n        System.out.println(\"YES\");\n        for(int i = 0;i < 4;i ++){\n        \tSystem.out.println(str[i]);\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString  a = sc.nextLine(), b = sc.nextLine();\n\t\tlong sum = 0;\n\t\tint frequency[][] = new int[200010][2];\n\t\tfor (int i = 1; i <= b.length(); i++) {\n\t        for (int j = 0; j < 2; j++)\n\t            frequency[i][j] = frequency[i - 1][j];\n\t        frequency[i][Character.getNumericValue((b.charAt(i - 1)))]++;\n\t    }\n\t   \n\t    for (int i = 0; i < a.length(); i++) {\n\t        int c = Character.getNumericValue(a.charAt(i));\n\t        for (int j = 0; j < 2; j++) {\n\t        \tint flippingTerm = Math.abs(c - j);\n\t        \tint endOfWindowValue = frequency[b.length() - a.length() + i + 1][j];\n\t        \tint startOfWindowOffset = frequency[i][j];\n\t            sum += flippingTerm * (endOfWindowValue - startOfWindowOffset);\n\t        }\n\t    }\n\t\tSystem.out.println(sum);\n\t\tsc.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSolution solution = new Solution();\n\t\tSystem.out.println(solution.solve());\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tadj = new ArrayList[n];\n\t\tfor (int i = 0; i < adj.length; ++i) {\n\t\t\tadj[i] = new ArrayList<>();\n\t\t}\n\t\tfor (int i = 1; i < n; ++i) {\n\t\t\tint p = sc.nextInt()-1;\n\t\t\tadj[p].add(i);\n\t\t\tadj[i].add(p);\n\t\t}\n\t\tnum = new int[n+1];\n\t\tdfs(0, -1);\n\t\tfor (int i = 1; i < num.length; ++i) {\n\t\t\tnum[i] += num[i-1];\n\t\t}\n\t\tint cur = 1;\n\t\tfor (int i = 0; i < num.length; ++i) {\n\t\t\twhile(cur <= num[i]){\n\t\t\t\tout.print(i + \" \");\n\t\t\t\t++cur;\n\t\t\t}\t\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t        \n\t\tint n = Integer.parseInt(st.nextToken());\n\t     \n\t\tlong[] myArray = new long[2 * n];\n\t        \n\t\t\tfor (int i = 0; i < n; i++)  {\n\t        \tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\t        \tmyArray[2 * i] = Long.parseLong(st1.nextToken()) * 2;\n\t        \tmyArray[2 * i + 1] = Long.parseLong(st1.nextToken()) * 2 + 1;\n\t        }  \n\t        \n\t        Arrays.sort(myArray);\n\t        long[] ans = new long[n + 1];\n\t        int cnt = 0;\n\t       \n\t        for (int i = 0; i < 2 * n - 1; i++)   {\n\t            if (myArray[i] % 2 == 0) cnt++; else cnt--;\n\t            ans[cnt] += (myArray[i + 1] + 1) / 2 - (myArray[i] + 1) / 2;\n\t        }   \n\t        \n\t        StringBuilder answer = new StringBuilder();\n\t        \n\t        for (int i = 1; i < n + 1; i++) {\n\t        \tanswer.append(ans[i]);\n\t        \tanswer.append(\" \");\n\t        }  \n\t        \n\t        System.out.println(answer);\n\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] P = new int[n];\n        int[] check=new int[n];\n        for (int i = 1; i < n; i++) {\n\n            P[i] = scanner.nextInt();\n            P[i]--;\n            check[P[i]]++;\n        }\n        int[] leaves = new int[n];\n\n\n        for (int i=0;i<n;i++) {\n            if(check[i]==0){\n                leaves[P[i]]++;\n            }\n        }\n\n\n        for (int i = 0; i < n; i++) {\n\n            if (check[i]>0&&leaves[i]<3) {\n                System.out.println(\"No\");\n                return;\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[]YAHIA_MOSTAFA){\n\t\tScanner sc =new Scanner(System.in);\n\t\tlong n=sc.nextLong(),x=sc.nextLong(),y=sc.nextLong();\n\t\tlong xb,xw,yb,yw;\n\t\txw=x-1;yw=y-1;xb=n-x;yb=n-y;\n\t\tif (x==n&&y==n){\n\t\t\tSystem.out.println(\"Black\");return;\n\t\t}\n\t\tlong c1=0,c2=0;\n\t\tlong f =Math.max(xb,yb);\n\t\tlong h =Math.max(xw,yw);\n\t\t//System.out.println(h+\" \"+f+\" \"+(h-f));\n\t\tif (h<=f)\n\t\t\tSystem.out.println(\"White\");\n\t\telse\n\t\t\tSystem.out.println(\"Black\");\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tReadin();\n\t\tstlr[0][0]= bell[0] =1;\n\t\tfor (int i=1; i<=m; i++)\n\t\t\tfor (int j=1;j<=i;j++) {\n\t\t\t\tstlr[i][j]= (stlr[i-1][j-1]+stlr[i-1][j]*(long)j)%MOD;\n\t\t\t\tbell[i]= (bell[i]+stlr[i][j])%MOD;\n\t\t\t}\n\t\tif (DEBUG)\n\t\t\tfor (int i=1; i<=m; i++) cerr.println(\"Bell[\"+i+\"] =\"+bell[i]);\n\t\tArrays.sort(occ);\n\t\tif (DEBUG) {\n\t\t\tcerr.println(\"After Sorting\");\n\t\t\tfor (int i=0;i<m; i++) cerr.println(occ[i]+\" \");}\n\t\tlong ans=1;\n\t\tfor (int i=0,j=0; i<m; i=j) {\n\t\t\tfor (j=i+1; j<m && occ[i]==occ[j];j++);\n\t\t\tans= (ans*bell[j-i])%MOD;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) throws IOException {\n    try (EhabAndAnotherAnotherXorProblem instance = new EhabAndAnotherAnotherXorProblem()) {\n      instance.solve();\n    }\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception{\n        FastReader sc=new FastReader(); \n        OutputStream outputStream = System.out;\n        PrintWriter out = new PrintWriter(outputStream);\n        int n=sc.nextInt();\n        HashMap<String,Integer> map=new HashMap<String,Integer>();\n        for(int i=0;i<n;i++) {\n            map.put(sc.next(), 1);\n        }\n        ArrayList<String> list=new ArrayList<String>();\n        int count=0;\n        if(!map.containsKey(\"purple\")) {\n            count++;\n            list.add(\"Power\");\n        }\nif(!map.containsKey(\"green\")) {\n    count++;\n    list.add(\"Time\");\n        }\n\nif(!map.containsKey(\"blue\")) {\n    count++;\n    list.add(\"Space\");\n}\n\nif(!map.containsKey(\"orange\")) {\n    count++;\n    list.add(\"Soul\");\n}\n\nif(!map.containsKey(\"red\")) {\n    count++;\n    list.add(\"Reality\");\n}\n\nif(!map.containsKey(\"yellow\")) {\n    count++;\n    list.add(\"Mind\");\n}System.out.println(count);\n    for(String s:list) {\n        System.out.println(s);\n    }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tSystem.out.println(n*n+(n-1)*(n-1));\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception\n    \tFastReader in=new FastReader();\n    \tPrintWriter pw=new PrintWriter(System.out);\n    \tint n=in.nextInt();\n    \tlong ans=0;\n    \tfor(int i=2;2*i<=n;i++)\n    \t{\n    \t\tans+=i*(n/i-1);\n    \t}\n    \tans*=4;\n    \tpw.print(ans);\n    \tpw.flush();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) {\n        FastScanner scn = new FastScanner();\n        int n = scn.nextInt();\n        int s = scn.nextInt();\n        if (s <= n) {\n            System.out.println(1);\n        } else if (s > n) {\n            if(s%n == 0){\n                System.out.println(s/n);\n            } else {\n                System.out.println(s/n + 1);\n            }\n        }\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\tFastReader in=new FastReader();\n\tHashMap<Integer,Integer>map=new HashMap<Integer,Integer>();\n\n\tint n=in.nextInt();\n\tint r=in.nextInt();\n\t \n\tdouble theta=(double)360/(double)n;\n\t \n\tdouble b=1-((double)2/(double)(1-Math.cos((double)2*Math.PI/(double)n)));\n\tdouble x=Math.sqrt(1-b)-1;\n\tdouble ans=(double)r/(double)x;\n\tSystem.out.println(ans);\n\n\n\n\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Throwable {\n        sc = new MyScanner();\n        pw = new PrintWriter(System.out);\n\n        n = sc.nextInt();\n        T = sc.nextLong();\n        p = new int[n];\n        l = new int[n];\n        x = new int[n];\n        t = new int[n];\n        adj = new ArrayList[n];\n\n        for (int i = 0; i < n; i++)\n            x[i] = sc.nextInt();\n        for (int i = 0; i < n; i++)\n            t[i] = sc.nextInt();\n        adj[0] = new ArrayList<>();\n        for (int i = 1; i < n; i++) {\n            adj[i] = new ArrayList<>();\n            p[i] = sc.nextInt() - 1;\n            l[i] = sc.nextInt();\n            adj[p[i]].add(i);\n        }\n\n        ftCnt = new long[N];\n        ftSum = new long[N];\n        ans = new long[n];\n\n        dfs(0);\n        pw.println(ans[0]);\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\t BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t int n = Integer.parseInt(br.readLine());\n\t\t HashMap<Double,Integer>h = new HashMap<>();\n\t\t double [] temp = new double[n];\n\t\t int m = 0;\n\t\t for(int i=0;i<n;i++) {\n\t\t\t String l = br.readLine();\n\t\t\t int[] x = new int[4];\n\t\t\t int k=0;\n\t\t\t boolean t = false;\n\t\t\t for(int j=0;j<l.length();j++) {\n\t\t\t\t if(l.charAt(j)=='(' || l.charAt(j)=='+' || l.charAt(j)==')' || l.charAt(j)=='/')\n\t\t\t\t\t x[k++] = j;\n\t\t\t }\n\t\t\t double a = Integer.parseInt(l.substring(x[0]+1,x[1]));\n\t\t\t double b = Integer.parseInt(l.substring(x[1]+1, x[2]));\n\t\t\t double c = Integer.parseInt(l.substring(x[3]+1));\n\t\t\t temp[m++] = (a+b)/c;\n\t\t\t //System.out.print((a+b)/c + \" \");\n\t\t\tif(h.containsKey((a+b)/c))\n\t\t\t\t\th.put((a+b)/c, h.get((a+b)/c)+1);\n\t\t\telse\n\t\t\t\th.put((a+b)/c, 1);\n\t\t }\n\t\t //System.out.println(h);\n\t\t for(int i=0;i<n;i++) {\n\t\t\t System.out.print(h.get(temp[i]) + \" \");\n\t\t }\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tif(n%2 == 0)System.out.println(n/2 +1);\n\t\telse System.out.println((int)Math.ceil((double)n/2));\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        BIT invert = new BIT(n+5);\n        BIT neg = new BIT(n+5);\n        long res = 0;\n        int[] arr = new int[n];\n        boolean[] has = new boolean[n+1];\n        long num1 = 0;\n        for(int i = 0; i < n; i++) {\n            arr[i] = in.nextInt();\n            if(arr[i] != -1) {\n                res += invert.read(n+5)-invert.read(arr[i]);\n                res %= MOD;\n                invert.update(arr[i], 1);\n                has[arr[i]] = true;\n            } else num1++;\n        }\n        if(num1 == 0) {\n            System.out.println(res);\n            return;\n        }\n        for(int i = 1; i <= n; i++) if(!has[i]) neg.update(i, 1);\n        long invertNum1 = modInv(num1, MOD);\n        res += ((num1*(num1-1))%MOD)*modInv(4, MOD);\n        res %= MOD;\n        long cnt = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == -1) {\n                cnt++;\n                continue;\n            }\n            res += (((neg.read(n+5)-neg.read(arr[i]))*cnt)%MOD)*invertNum1;\n            res %= MOD;\n        }\n        cnt = 0;\n        for(int i = n-1; i >= 0; i--) {\n            if(arr[i] == -1) {\n                cnt++;\n                continue;\n            }\n            res += (((neg.read(arr[i]))*cnt)%MOD)*invertNum1;\n            res %= MOD;\n        }\n        System.out.println(res);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        long[] a = new long[n];\n        for(int i=0;i<n;i++) a[i] = sc.nextLong();\n        long[] p = new long[n];\n        p[n-1] = a[n-1];\n        for(int i=n-2;i>=0;i--){\n            if(a[i]<p[i+1]) p[i] = p[i+1]-1;\n            else p[i] = a[i];\n        }\n        long max = p[0];\n        long res = p[0] - a[0];\n        for(int i=1;i<n;i++){\n            if(max < p[i]) max = p[i];\n            res += max - a[i];\n        }\n        System.out.println(res);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter out = new PrintWriter(System.out);\n        //Scanner sc = new Scanner();\n        Reader in = new Reader();\n        Main solver = new Main();\n        solver.solve(out, in);\n        out.flush();\n        out.close();\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new D().solve();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\t// your code goes here\n\t\tScanner sc=new Scanner(System.in);\n\t\tString a=sc.next();\n\t\tString b=sc.next();\n\t\tint m=a.length();\n\t\tint n=b.length();\n\t\tint[] zero=new int[n];\n\t\tint[] one=new int[n];\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(i==0)\n\t\t\t{\n\t\t\t\tif(b.charAt(i)=='0')\n\t\t\t\tzero[i]++;\n\t\t\t\telse\n\t\t\t\tone[i]++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tzero[i]=zero[i-1];\n\t\t\t\tone[i]=one[i-1];\n\t\t\t\tif(b.charAt(i)=='0')\n\t\t\t\tzero[i]++;\n\t\t\t\telse\n\t\t\t\tone[i]++;\n\t\t    }\n\t\t}\n\t\t\n\n\t\tlong res=0;\n\t\tfor(int i=0;i<m;i++)\n\t\t{\n\t\tint x=n-m+i;\n\t\tif(a.charAt(i)=='0')\n\t\tres+=one[x];\n\t\telse\n\t\tres+=zero[x];\n\t\tif(i>0)\n\t\t{\n\t\t\tif(a.charAt(i)=='0')\n\t\t\tres-=one[i-1];\n\t\t\telse\n\t\t\tres-=zero[i-1];\n\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint Q = readInt();\n\t\twhile(Q-- > 0) {\n\t\t\tlong n = readLong(), m = readLong(), k = readLong();\n\t\t\tif(Math.max(n, m) > k) println(-1);\n\t\t\telse {\n\t\t\t\tlong ans = k;\n\t\t\t\tif(n%2 != k%2) ans--;\n\t\t\t\tif(m%2 != k%2) ans--;\n\t\t\t\tprintln(ans);\n\t\t\t}\n\t\t}\n\t\texit();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        BTheHat solver = new BTheHat();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)  {\n\n        Scanner in = new Scanner(System.in) ;\n        PrintWriter pw = new PrintWriter(System.out);   \n        long n = in.nextLong() ; \n        long count =1 ; \n        long temp =n/2;\n     temp+=count ;\n      \n       \n        System.out.println(temp);\n }               \n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) {\n\t\tScanner in=new Scanner(System.in);\n\t\tString str=in.next();\n\t\tint cnt=0;\n\t\tfor(int i=0;i<str.length();++i) {\n\t\t\tif(str.charAt(i)=='1') {\n\t\t\t\t++cnt;\n\t\t\t}\n\t\t}\n\t\tint i=0;\n\t\tfor(;i<str.length();++i) {\n\t\t\tif(str.charAt(i)=='0') {\n\t\t\t\tSystem.out.print(\"0\");\n\t\t\t}\n\t\t\telse if(str.charAt(i)=='2') {\n\t\t\t\twhile(cnt-->0) {//\n\t\t\t\t\tSystem.out.print(\"1\");\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"2\");\n\t\t\t}\n\t\t}\n\t\twhile(cnt-->0) {\n\t\t\tSystem.out.print(\"1\");\n\t\t}\n\t\tin.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        long n = sc.nl();\n        long k = sc.nl();\n        long ans = (n+k-1)/n;\n        System.out.println(ans);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        long size = scan.nextLong();\n        int numberOfSpecial = scan.nextInt();\n        long pageSize = scan.nextLong();\n\n        long[] specialItemsArray = new long[numberOfSpecial];\n        for (int i = 0; i < numberOfSpecial; i++) {\n            specialItemsArray[i] = scan.nextLong();\n        }\n\n        int totalRemoved = 0;\n        int step = 0;\n\n        long currentPageIndex = BigDecimal.valueOf(specialItemsArray[0]).divide(BigDecimal.valueOf(pageSize),2, RoundingMode.UP).setScale(0, RoundingMode.CEILING).longValue();\n        int specialItemArrayIndex = 1;\n\n        while (specialItemArrayIndex < numberOfSpecial) {\n            long pageIndex = BigDecimal.valueOf(specialItemsArray[specialItemArrayIndex] - totalRemoved).divide(BigDecimal.valueOf(pageSize),2,RoundingMode.UP).setScale(0, RoundingMode.CEILING).longValue();\n            if (currentPageIndex != pageIndex) {\n                step++;\n                totalRemoved = specialItemArrayIndex;\n                currentPageIndex =  BigDecimal.valueOf(specialItemsArray[specialItemArrayIndex] - totalRemoved).divide(BigDecimal.valueOf(pageSize),2,RoundingMode.UP).setScale(0, RoundingMode.CEILING).longValue();\n            }\n            specialItemArrayIndex++;\n        }\n\n\n        System.out.println(step + 1);\n\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n        prepareIO(false);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)throws Exception {\n        FastReader in = new FastReader(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        n = in.nextInt();\n        \n        int brr[] = new int[2*n];\n        for (int i = 0; i < 2*n; i+= 2) {\n            brr[i] = in.nextInt();\n            brr[i+1] = in.nextInt();\n        }\n\n        arr = shrink(brr);\n        int imap[] = new int[2*n];\n        for (int i = 0; i < 2*n; i++) {\n            imap[arr[i]] = brr[i];\n        }\n\n        int idx = binarySearch(arr.length);\n        if(idx >= arr.length) pw.println(-1);\n        else pw.println(imap[idx]);\n\n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)\n        double a = 0, v = 0, l = 0, d = 0, w = 0;\n        try\n        {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            String[] str = br.readLine().split(\" \");\n            a = Double.parseDouble(str[0]);\n            v = Double.parseDouble(str[1]);\n            str = br.readLine().split(\" \");\n            l = Double.parseDouble(str[0]);\n            d = Double.parseDouble(str[1]);\n            w = Double.parseDouble(str[2]);\n        }\n        catch(Exception e)\n        {\n            System.out.println(e);\n        }\n\n        double t1, t2, t3, t4, t5, t, D = 0;\n        \n        if (w > v) w = v;\n        t2 = d / v - v / a + w * w / 2 / a / v;\n        if (t2 >= 0)\n        {\n            t1 = v / a; \n            t3 = t1 - w / a;\n        }\n        else\n        {\n            if (Math.sqrt(2 * d / a) > (w / a))\n            {\n                t1 = Math.sqrt((2 * a * d + w * w) / (a * a * 2));\n                t3 = t1 - w / a;\n            }\n            else\n            {\n                t1 = Math.sqrt(2 * d / a);\n                t3 = 0;\n            }\n            t2 = 0;\n        }\n        t5 = (l - d - v * v / 2 / a + a * (t1 - t3) * (t1 - t3) / 2) / v;\n        if (t5 >= 0) t4 = v / a - (t1 - t3);\n        else\n        {\n            t5 = 0;\n            t4 = -t1 + t3 + Math.sqrt((t1 - t3) * (t1 - t3) + 2 * (l - d) / a);\n        }\n        t = t1 + t2 + t3 + t4 + t5;\n        System.out.println(t);\n        //System.out.println(t1 + \" \" + t2 + \" \" + t3 + \" \" + t4 + \" \" + t5);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        \n        long n = sc.nextLong();\n        int m = sc.nextInt();\n        long k = sc.nextLong();\n        long[] p = new long[m];\n        long del = 0;\n        long nb = 1;\n        int op = 0;\n        for(int i=0;i<m;i++) p[i] = sc.nextLong();\n        for(int i=1;i<m;i++){\n            if(page(p[i]-del,k)!=page(p[i-1]-del,k)){\n                \n                del += nb;\n                nb = 1;\n                op++;\n                \n            }else{\n                nb++;\n                \n            }\n        }\n        if(nb!=0) op++;\n        \n        System.out.println(op);\n        \n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)  {\n\n        Scanner in = new Scanner(System.in) ;\n        PrintWriter pw = new PrintWriter(System.out);   \n     int k=in.nextInt(), n=in.nextInt(), s=in.nextInt(), p=in.nextInt() ;\n     int paper =n/s; \n     if(n%s!=0) paper++ ; \n     paper*=k ; \n     int fin = paper/p ; \n     if(paper%p!=0) fin++ ; \n        System.out.println( fin );\n       \n       \n }               \n", "complexity": "constant"}
{"code": "      public static void main(String args[])throws IOException{\n              Scanner sc = new Scanner(System.in);\n              int a[] = new int[1501];\n              for(int i = 0; i < 3; i++){\n                     a[sc.nextInt()]++;\n              }\n              if(a[1] > 0 || a[2] > 1 || a[3] > 2 || (a[4] == 2 && a[2] == 1)){\n                     System.out.println(\"YES\");\n              }else{\n                     System.out.println(\"NO\");\n              }\n      }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tint N = in.nextInt();\n\t\tStack<Integer> stack = new Stack<>();\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tint num = in.nextInt() % 2;\n\t\t\tif(stack.size() >= 1 && stack.lastElement() == num)\n\t\t\t\tstack.pop();\n\t\t\telse\n\t\t\t\tstack.add(num);\n\t\t}\n\t\t\n\t\tSystem.out.println(stack.size() <= 1 ? \"YES\" : \"NO\");\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastIO sc = new FastIO(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\t\n\t\tlong remove = 0;\n\t\t\n\t\tint[] heights = new int[n+1];\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\theights[i] = sc.nextInt();\n\t\t\tremove += heights[i];\n\t\t}\n\t\t\n\t\tArrays.sort(heights);\n\t\t//System.out.println(Arrays.toString(heights));\n\t\tlong keep = 0;\n\t\tfor(int i = n; i> 0; i--) {\n\t\t\tif(heights[i-1] >= heights[i]) {\n\t\t\t\theights[i-1] = heights[i]-1;\n\t\t\t}\n\t\t\tkeep += heights[i] - heights[i-1];\n\t\t}\n\t\t//System.out.println(Arrays.toString(heights));\n\t\t\n\t\tpw.println(remove - keep);\n\t\tpw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int n = sc.nextInt();\n        int best = 1;\n        int bestTime = Integer.MAX_VALUE;\n        for(int i=0;i<n;i++) {\n            int time;\n            int a = sc.nextInt();\n            time = (a%n==0 || a%n<=i) ? a/n : (a+n)/n;\n            if(time < bestTime) {\n                best = i + 1;\n                bestTime = time;\n            }\n        }\n\n        pw.println(best);\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "public static void main(String[] args) {\n\tScanner scan = new Scanner(System.in);\n\tString S [] = new String[3];\n\t\n\tint m=0,s=0,p=0;\n\tint temp=0;\n\t\n\tfor (int i = 0; i < S.length; i++) {\n\t\tS[i]=scan.next();\n\t\tif(S[i].indexOf('m')!=-1) m++;\n\t\tif(S[i].indexOf('s')!=-1) s++;\n\t\tif(S[i].indexOf('p')!=-1) p++;\n\t}\n\t\n\t\n\tint n1 = Integer.parseInt(S[0].substring(0,1));\n\tint n2 = Integer.parseInt(S[1].substring(0,1));\n\tint n3 = Integer.parseInt(S[2].substring(0,1));\n\t\n\t\n\t\n\t    int d3 = Math.abs(n1-n2);\n\t\tint d4 = Math.abs(n1-n3);\n\t\tint d5 = Math.abs(n2-n3);\n\t\t\n\t\n\tif(m==3||s==3||p==3) {\n\t\t\n\t\t    if(d3==1&d5==1&d4==2||d3==1&d4==1&d5==2||d5==1&d4==1&d3==2)\n\t\t\tSystem.out.println(0);\n\t\telse \n\t\t    if(d3==0&d4==0) System.out.println(0);\n\t\telse \n\t\t\tif(d3<d5&d3<d4) {\n\t\t\t    if(d3==1||d3==2||d3==0) System.out.println(1);\n\t\t        else                 System.out.println(2);\n\t\t\t    }\n\t\t\telse if (d5<d4&d5<d3){\n\t\t\t\t if(d5==1||d5==2||d5==0) System.out.println(1);\n\t\t\t\t\telse                 System.out.println(2);\n\t\t\t}\n\t\t\telse if(d4<d5&d4<d3) {\n\t\t\t\tif(d4==1||d4==2||d4==0) System.out.println(1);\n\t\t\t\telse                 System.out.println(2);\n\t\t\t}\n\t\t\telse if(d3==2&d5==2||d4==2&d5==2||d3==2&d4==2||d3==1&d5==1||d4==1&d5==1||d3==2&d4==1)\n\t\t\t\tSystem.out.println(1);\n\t\t\telse System.out.println(2);\n\t\t\t\n\t\t\t\n\t\t\n\t\t \n\t\t    \n\t\t    \n\t}\n\t\n\tif(m==2||s==2||p==2) {\n\t\t\n\t\t\n\t\t\n\t\tchar c1 = S[0].charAt(1);\n\t\tchar c2 = S[1].charAt(1);\n\t\tchar c3 = S[2].charAt(1);\n\t\t\n\t\t\n\t\tif(c1==c2) {\n\t\t\tif(n1==n2) System.out.println(1);\n\t\t\telse if(d3==1||d3==2) System.out.println(1);\n\t\t\telse System.out.println(2);\n\t\t}\n\t\tif(c1==c3) {\n\t\t\tif(n1==n3) System.out.println(1);\n\t\t\telse if(d4==1||d4==2) System.out.println(1);\n\t\t\telse System.out.println(2);\n\t\t}\n\t\tif(c2==c3) {\n\t\t\tif(n2==n3) System.out.println(1);\n\t\t\telse if(d5==1||d5==2) System.out.println(1);\n\t\t\telse System.out.println(2);\n\t\t}\n\t}\n\t\n\tif(m==1&s==1&p==1) System.out.println(2);\n\t\t\n\t\n\t\n}\n", "complexity": "constant"}
{"code": " \tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tString[] s = new String[2];\n\t\tfor(int i = 0; i < 2; i++){\n\t\t\ts[i] = scanner.next();\n\t\t}\n\t\tint n = s[0].length();\n\t\tchar[][] c = new char[2][n];\n\t\tfor(int i = 0; i < 2; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tc[i][j] = s[i].charAt(j);\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n-1; i++){\n\t\t\tif(c[0][i] == '0' && c[1][i] == '0' && c[0][i+1] == '0'){\n\t\t\t\tc[0][i] = 'X';\n\t\t\t\tc[1][i] = 'X';\n\t\t\t\tc[0][i+1] = 'X';\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c[0][i] == '0' && c[1][i] == '0' && c[1][i+1] == '0'){\n\t\t\t\tc[0][i] = 'X';\n\t\t\t\tc[1][i] = 'X';\n\t\t\t\tc[1][i+1] = 'X';\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c[0][i] == '0' && c[0][i+1] == '0' && c[1][i+1] == '0'){\n\t\t\t\tc[0][i] = 'X';\n\t\t\t\tc[0][i+1] = 'X';\n\t\t\t\tc[1][i+1] = 'X';\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c[0][i+1] == '0' && c[1][i+1] == '0' && c[1][i] == '0'){\n\t\t\t\tc[1][i] = 'X';\n\t\t\t\tc[0][i+1] = 'X';\n\t\t\t\tc[1][i+1] = 'X';\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DEhabIEsheOdnaOcherednayaZadachaNaXor solver = new DEhabIEsheOdnaOcherednayaZadachaNaXor();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        //FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n        PrintWriter pw = new PrintWriter(System.out);\n        int m = sc.nextInt();\n        int n = sc.nextInt();\n        int q = sc.nextInt();\n        TreeSet<Integer>length= new TreeSet<>();\n        length.add(0);\n        length.add(n);\n        TreeSet<Integer>width= new TreeSet<>();\n        width.add(0);\n        width.add(m);\n        TreeMap<Integer,Integer>len= new TreeMap<>();\n        len.put(n,1);\n        TreeMap<Integer,Integer>wid= new TreeMap<>();\n        wid.put(m,1);\n        while (q-->0){\n            String t= sc.next();\n            if (t.equals(\"H\")) {\n                int x = sc.nextInt();\n                int k1 = length.ceiling(x);\n                int k2 = length.floor(x);\n                if (x != k1) {\n                    int s = k1 - k2;\n                    int con = len.get(s);\n                    if (con == 1) len.remove(s);\n                    else len.put(s, con - 1);\n                    len.put((k1 - x), len.getOrDefault((k1 - x), 0) + 1);\n                    len.put((x - k2), len.getOrDefault((x - k2), 0) + 1);\n                    length.add(x);\n                }\n            }\n            else {\n                int x = sc.nextInt();\n                int k1 = width.ceiling(x);\n                int k2 = width.floor(x);\n                if (x != k1) {\n                    int s = k1 - k2;\n                    //System.out.println(s+\" \"+k1+\" \"+k2);\n                    int con = wid.get(s);\n                    if (con == 1) wid.remove(s);\n                    else wid.put(s, con - 1);\n                    wid.put((k1 - x), wid.getOrDefault((k1 - x), 0) + 1);\n                    wid.put((x - k2), wid.getOrDefault((x - k2), 0) + 1);\n                    width.add(x);\n                }\n            }\n            pw.println(1l*len.lastKey()*wid.lastKey());\n        }\n\n        pw.flush();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        BObtainingTheString solver = new BObtainingTheString();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew aaaaaaaaaaaaaaaa().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tint q = Integer.parseInt(br.readLine());\n\t\tTreeMap<Integer, Integer> mp = new TreeMap<>();\n\t\tint ans = 0;\n\t\twhile (q-- > 0) {\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tint l = Integer.parseInt(st.nextToken()) - 1;\n\t\t\tint r = Integer.parseInt(st.nextToken());\n\t\t\tint t = Integer.parseInt(st.nextToken());\n\t\t\tMap.Entry<Integer, Integer> e;\n\t\t\tint l_, r_;\n\t\t\tif (t == 1) {\n\t\t\t\tif ((e = mp.floorEntry(l)) != null && (r_ = e.getValue()) >= l) {\n\t\t\t\t\tl_ = e.getKey();\n\t\t\t\t\tans -= r_ - l_;\n\t\t\t\t\tl = l_;\n\t\t\t\t\tr = Math.max(r, r_);\n\t\t\t\t}\n\t\t\t\twhile ((e = mp.higherEntry(l)) != null && (l_ = e.getKey()) <= r) {\n\t\t\t\t\tr_ = e.getValue();\n\t\t\t\t\tans -= r_ - l_;\n\t\t\t\t\tr = Math.max(r, r_);\n\t\t\t\t\tmp.remove(l_);\n\t\t\t\t}\n\t\t\t\tans += r - l;\n\t\t\t\tmp.put(l, r);\n\t\t\t} else {\n\t\t\t\tr_ = l;\n\t\t\t\tif ((e = mp.floorEntry(l)) != null && (r_ = e.getValue()) > l) {\n\t\t\t\t\tl_ = e.getKey();\n\t\t\t\t\tif (l_ < l)\n\t\t\t\t\t\tmp.put(l_, l);\n\t\t\t\t\telse\n\t\t\t\t\t\tmp.remove(l_);\n\t\t\t\t\tans -= r_ - l;\n\t\t\t\t}\n\t\t\t\twhile ((e = mp.higherEntry(l)) != null && (l_ = e.getKey()) < r) {\n\t\t\t\t\tr_ = e.getValue();\n\t\t\t\t\tmp.remove(l_);\n\t\t\t\t\tans -= r_ - l_;\n\t\t\t\t}\n\t\t\t\tif (r_ > r) {\n\t\t\t\t\tmp.put(r, r_);\n\t\t\t\t\tans += r_ - r;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpw.println(n - ans);\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tScanner sc = new Scanner(System.in);\n\t\tHashSet<String> hs = new HashSet<String>();\n\t\tint[] Arr = new int[14];\n\t\tlong max = 0;\n\t\tfor (int i = 0; i < 14; i++) {\n\t\t\tArr[i] = sc.nextInt();\n\t\t}\n\n\t\tfor (int i = 0; i < 14; i++) {\n\t\t\tint[] arr = Arr.clone();\n\n\t\t\tlong sum = 0;\n\t\t\tint r = arr[i];\n\t\t\tarr[i] = 0;\n\t\t\tfor (int j = i + 1; j < arr.length && r > 0; j++) {\n\t\t\t\tarr[j]++;\n\t\t\t\tr--;\n\t\t\t}\n\t\t\tfor (int j = 0; j < arr.length; j++) {\n\t\t\t\tarr[j] +=( r / 14);\n\t\t\t\tif (j + 1 <= (r % 14)) {\n\t\t\t\t\tarr[j]++;\n\t\t\t\t}\n\t\t\t\tif (arr[j] % 2 == 0) {\n\t\t\t\t\tsum += arr[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, sum);\n\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tlong n = scanner.nextLong();\n\t\tlong m = scanner.nextLong();\n\t\tlong[] people = new long[(int) (n+m)];\n\t\tint[] taxiDrivers = new int[(int) (n+m)];\n\t\t\n\t\tfor(int i = 0;i< (n+m); i++) {\n\t\t\tpeople[i] = scanner.nextLong();\n\t\t}\n\t\t\n\t\tfor(int i = 0;i< (n+m); i++) {\n\t\t\ttaxiDrivers[i] = scanner.nextInt();\n\t\t}\n\t\t\n\t\tint lastTaxiDriverIndex = -1;\n\t\tlong[] riderCountArray = new long[(int) (m)];\n\t\tlong[] a1 = new long[(int)n];\n\t\tlong[] b1 = new long[(int)m];\n\t\t\n\t\tint j=0, k=0;\n\t\tfor(int i = 0;i< (n+m); i++) {\t\n\t\t\tif(taxiDrivers[i] == 0) {\n\t\t\t\ta1[j] = people[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse  {\n\t\t\t\tb1[k] = people[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint l = 0, q=0;\n\t\tfor(int i=0;i<j;i++) {\n\t\t\twhile ((l<m-1 && m>1) && Math.abs(a1[i] - b1[l]) > Math.abs(a1[i] - b1[l+1])) {\n\t\t\t\tl++; \n\t\t\t}\n\t\t\t\n\t\t\triderCountArray[l]++;\t\n\t\t}\n\t\t\n\t\tfor(int i = 0;i< (m); i++) {\n\t\t\tSystem.out.print(riderCountArray[i]+\" \");\n\t\t}\n\t} \n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int n = sc.nextInt();\n        pw.println(n/2+1);\n        pw.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile(sc.hasNext()) {\n\t\t\tint n=sc.nextInt();\n\t\t\tString s=sc.next();\n\t\t\tint sum=0;\n\t\t\tfor(int i=0;i<s.length();i++) {\n\t\t\t\tif(s.charAt(i)=='+') {\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\t\t\t\tif(s.charAt(i)=='-'&&sum!=0) {\n\t\t\t\t\tsum--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": " public static void main(String[] args) throws IOException {\n\tScanner sc = new Scanner(System.in);\n\tint n  =sc.nextInt();\n\tadj=new ArrayList[n+1];\n\tdist = new int[n+1];\n\tvisitParent = new boolean[n+1];\n\tfor(int i=0;i<=n;i++) adj[i]=new ArrayList<Integer>();\n\tint max=0;\n\t//first contribution\n\tfor(int i=1;i<n;i++){\n\t\tint u = sc.nextInt(),v=sc.nextInt();\n\t\tadj[u].add(v);\n\t\tadj[v].add(u);\n\t}\n\tdist[1]=0;\n\tdfs(1,1);\n System.out.println(ans);\n \n \n }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new OlyaAndMagicalSquare().solve();\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "public static void main(String[] args){\n Scanner s= new Scanner(System.in);\n int n=s.nextInt();StringBuilder sb=new StringBuilder();\n long[] a=new long[n/2];\n for(int i=0;i<n/2;i++){\n                  a[i]=s.nextLong();\n }int j=0;long[] a2=new long[n/2];long[] a1=new long[n/2];\n a1[j]=a[a.length-1]/2;\n a2[j]=a[a.length-1]-a[a.length-1]/2;\n for(int i=(n-1)/2-1;i>=0;i--){\n //    a1[j]=a[i]/2;a2[j++]=a[i]-a[i]/2;\n    long n1=a1[j];\n    if((a[i]-n1)<a2[j]){\n      a2[j+1]=a2[j++];a1[j]=a[i]-a2[j];                      \n     }else{a1[++j]=n1;a2[j]=a[i]-n1;}\n }int k=0;//int[] ans=new int[2*n];\n for(int i=(n-1)/2;i>=0;i--)\n   sb.append(a1[i]+\" \");\n  for(int i=0;i<n/2;i++)\n    sb.append(a2[i]+\" \");\n            System.out.println(sb.toString());     \n}\n}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong num = sc.nextLong() + 1;\n\t\tsc.close();\n\t\tSystem.out.println(num % 2 == 0 || num == 1 ? num / 2 : num);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSolution solution = new Solution();\n\t\tSystem.out.println(solution.solve());\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        int result = 1;\n        int thomasSum = 0;\n        StringTokenizer stk;\n        stk = new StringTokenizer(br.readLine());\n        int first = Integer.parseInt(stk.nextToken());\n        int second = Integer.parseInt(stk.nextToken());\n        int third = Integer.parseInt(stk.nextToken());\n        int fourth = Integer.parseInt(stk.nextToken());\n        thomasSum = first + second + third + fourth;\n        int tmp;\n        for (int i = 1; i < n; i++) {\n            stk = new StringTokenizer(br.readLine());\n            first = Integer.parseInt(stk.nextToken());\n            second = Integer.parseInt(stk.nextToken());\n            third = Integer.parseInt(stk.nextToken());\n            fourth = Integer.parseInt(stk.nextToken());\n            tmp = first + second + third + fourth;\n            if (tmp > thomasSum)\n                result++;\n        }\n        System.out.println(result);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tlong n = sc.nextLong();\n\t\tlong k = sc.nextLong();\n\t\tSystem.out.println(solve(n, k));\n\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "\t\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tPoint [] square = new Point [4] ; \n\t\tPoint [] rotSquare = new Point[4] ; \n\t\t\n\t\tfor(int i = 0 ; i < 4 ;i++)\n\t\t\tsquare[i] = new Point(sc.nextInt() , sc.nextInt());\n\t\t\n\t\tfor(int i = 0 ; i < 4 ;i++)\n\t\t\trotSquare[i] = new Point(sc.nextInt() , sc.nextInt());\n\t\t\n\t\tboolean can = false ; \n\t\t\n\t\tfor(int x = -100 ; x <= 100 ; x++)\n\t\t\tfor(int y = -100 ; y <= 100 ; y++)\n\t\t\t\tcan |= inside(new Point(x , y), square) & inside(new Point (x , y), rotSquare);\n\t\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\tout.println(can ? \"YES\" : \"NO\");\n\t\t\n\t\tout.flush();\n\t\tout.close();\n\n\t}\n", "complexity": "constant"}
{"code": "        public static void main(String[] args) {\n            Scanner input = new Scanner(System.in);\n            n = input.nextInt() ;\n            s = input.next() ;\n            a = s.toCharArray();\n            for(int i = 0 ; i < 200 ; ++i) {\n                int cur = i ;\n                boolean fl = true ;\n                for(int j = 0 ; j < n ; ++j) {\n                    if(a[j] == '+')\n                        ++cur ;\n                    else\n                        --cur ;\n                    if(cur < 0)\n                        fl = false ;\n                }\n                if(fl) {\n                    System.out.print(cur);\n                    return ;\n                }\n            }\n        }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = br.readLine().split(\"\\\\s\");\n        int N = Integer.parseInt(s[0]);\n        int K = Integer.parseInt(s[1]);\n        s = br.readLine().split(\"\\\\s\");\n        int[] arr = new int[N];\n        for(int i=0;i<N;++i) arr[i] = Integer.parseInt(s[i]);\n        solve(N,K,arr);   \n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tchar[] cs = in.next().toCharArray();\n\t\tint n=cs.length;\n\t\tint[] x = new int[n];\n\t\tfor(int i=0; i<n; ++i)\n\t\t\tx[i]=cs[i]-'0';\n\t\tlong[] dp1 = new long[n+1];\n\t\tfor(int i=0; i<n; ++i) \n\t\t\tdp1[i+1]=(x[i]+dp1[i]*10)%M;\n\t\tlong ans=0;\n\t\tfor(int d1=1; d1<=9; ++d1) {\n\t\t\tlong[][] dp2 = new long[2][n+1];\n\t\t\tfor(int i=0; i<n; ++i) {\n\t\t\t\tdp2[0][i+1]=x[i]>=d1?(10*dp2[0][i]+1)%M:dp2[0][i];\n\t\t\t\tfor(int d2=0; d2<x[i]; ++d2)\n\t\t\t\t\tdp2[1][i+1]=((d2>=d1?10*(dp2[0][i]+dp2[1][i])+dp1[i]+1:dp2[0][i]+dp2[1][i])+dp2[1][i+1])%M;\n\t\t\t\tfor(int d2=x[i]; d2<=9; ++d2)\n\t\t\t\t\tdp2[1][i+1]=((d2>=d1?10*dp2[1][i]+dp1[i]:dp2[1][i])+dp2[1][i+1])%M;\n\t\t\t}\n\t\t\tans+=dp2[0][n]+dp2[1][n];\n\t\t}\n\t\tout.println(ans%M);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[])\n        Reader sc=new Reader();\n        PrintWriter out=new PrintWriter(System.out);\n        int n=sc.i();\n        String s1=sc.s();\n        String s2=sc.s();\n        int pos1=-1;\n        int pos2=-1;\n        int arr[][][]=new int[100][100][2];\n        for(int i=0;i<n;i++)\n        {\n            if(s1.charAt(i)!=s2.charAt(i))\n            {\n                if(arr[s2.charAt(i)-97][s1.charAt(i)-97][0]==1)\n                {\n                    pos2=i;\n                    pos1=arr[s2.charAt(i)-97][s1.charAt(i)-97][1];\n                    break;\n                }\n                arr[s1.charAt(i)-97][s2.charAt(i)-97][0]=1;\n                arr[s1.charAt(i)-97][s2.charAt(i)-97][1]=i;\n            }\n        }\n        int ham=0;\n        for(int i=0;i<n;i++)\n        {\n            if(s1.charAt(i)!=s2.charAt(i))\n            ham++;\n        }\n        if(pos1!=-1&&pos2!=-1)\n        {\n            System.out.println(ham-2);\n            System.out.println(pos1+1+\" \"+(pos2+1));\n            System.exit(0);\n        }\n        \n        int arr1[][]=new int[100][2];\n        int arr2[][]=new int[100][2];\n        for(int i=0;i<n;i++)\n        {\n            if(s1.charAt(i)!=s2.charAt(i))\n            {\n                if(arr1[s1.charAt(i)-97][0]==1)\n                {\n                    pos2=i;\n                    pos1=arr1[s1.charAt(i)-97][1];\n                    break;\n                }\n                if(arr2[s2.charAt(i)-97][0]==1)\n                {\n                    pos2=i;\n                    pos1=arr2[s2.charAt(i)-97][1];\n                    break;\n                }\n                arr1[s2.charAt(i)-97][0]=1;\n                arr1[s2.charAt(i)-97][1]=i;\n                arr2[s1.charAt(i)-97][0]=1;\n                arr2[s1.charAt(i)-97][1]=i;\n            }\n        }\n        if(pos1!=-1&&pos2!=-1)\n        {\n            System.out.println(ham-1);\n            System.out.println(pos1+1+\" \"+(pos2+1));\n            System.exit(0);\n        }\n        System.out.println(ham);\n        System.out.println(pos1+\" \"+pos2);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) { new CF1068A(); }\n", "complexity": "constant"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            int S=Integer.parseInt(s1[1]);\n            if(S%n==0)\n             System.out.println(S/n);\n            else\n             System.out.println(S/n+1);\n      }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner in = new Scanner(System.in);\n\t\tint a = in.nextInt();\n\t\tint b = in.nextInt();\n\t\tint c = in.nextInt();\n\t\tint n = in.nextInt();\n\n\t\tint ans = n - (a + b - c);\n\t\tif(ans < 1 || a >= n || b >= n || c > a || c > b)\n\t\t\tans = -1;\n\t\t\n\t\tSystem.out.println(ans);\n\t\t\n\t\tin.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String [] argv) throws IOException\n\t\tBufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n\t\tMain ma=new Main();\n\t\tString[] l1=in.readLine().split(\" \");\n\t\tint n=Integer.parseInt(l1[0]);\n\t\tint q=Integer.parseInt(l1[1]);\n\t\tString[] ar=in.readLine().split(\" \");\n\t\tint a1=Integer.parseInt(ar[0]);\n\t\tint b1=Integer.parseInt(ar[1]);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tma.l.add(Integer.parseInt(ar[i]));\n\t\t}\n\t\tint m=ma.l.findmax();\n\t\tint[][] pair=new int[n][2];\n\t\tint t=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(ma.l.start.data==m)\n\t\t\t\tbreak;\n\t\t\tma.l.myfunc();\n\t\t\tpair[t][0]=ma.l.start.data;\n\t\t\tpair[t][1]=ma.l.start.next.data;\n\t\t\tt++;\n\t\t}\n\t\tint rl[]=new int[n];\n\t\tnode temp=ma.l.start;\n\t\tfor(int i=0;i<n;i++){\n\t\t\trl[i]=temp.data;\n\t\t\ttemp=temp.next;\n\t\t}\n\t\tfor(int i=0;i<q;i++){\n\t\t\tlong a=Long.parseLong(in.readLine());\n\t\t\tif(a==1){\n\t\t\t\tSystem.out.println(a1 + \" \" + b1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a<=t+1){\n\t\t\t\t\tSystem.out.println(pair[(int)(a-2)][0]+\" \"+pair[(int)(a-2)][1]);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif((a-t)%(n-1)==0){\n\t\t\t\t\t\tSystem.out.println(rl[0]+\" \"+rl[n-1]);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(rl[0]+\" \"+rl[(int)((a-t)%(n-1))]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] line = reader.readLine().split(\" \");\n        int w = Integer.valueOf(line[0]);\n        int h = Integer.valueOf(line[1]);\n        int n = Integer.valueOf(line[2]);\n\n        Request[] requests = new Request[n];\n\n        for (int i = 0; i < n; i++) {\n            line = reader.readLine().split(\" \");\n            requests[i] = new Request(line[0], Integer.valueOf(line[1]));\n        }\n\n        for (long e : solve(h, w, requests))\n            System.out.println(e);\n\n//        int w = 200000, h = 200000, n = 400000;\n//        Request[] requests = generate(w, h, n);\n//\n//        long start = System.currentTimeMillis();\n//        solve(h, w, requests);\n//        long end = System.currentTimeMillis();\n//\n//        System.out.println(\"Time: \" + (end - start) + \" ms\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\tScanner in = new Scanner (System.in);\n\tPrintWriter out = new PrintWriter(System.out);\n\n\tpair[] points = new pair [3];\n\tfor (int i = 0; i < 3; ++i) {\n\t    int x = in.nextInt();\n\t    int y = in.nextInt();\n\t    points[i] = new pair (x, y);\n\t}\n\n\tArrays.sort(points);\n\n\tint MaxY = Math.max(Math.max(points[0].y, points[1].y), points[2].y);\n\tint MinY = Math.min(Math.min(points[0].y, points[1].y), points[2].y);\n\n\tout.println(MaxY - MinY + points[2].x - points[0].x + 1);\n\tfor (int i = MinY; i <= MaxY; ++i)\n\t    out.println(points[1].x + \" \" + i);\n\tfor (int i = points[0].x; i < points[1].x; ++i)\n\t    out.println(i + \" \" + points[0].y);\n\tfor (int i = points[1].x + 1; i <= points[2].x; ++i)\n\t    out.println(i + \" \" + points[2].y);\n\t\n\tout.close();\n    }\n", "complexity": "nlogn"}
{"code": "        public static void main(String[] args){\n            Scanner scan = new Scanner(System.in);\n            int n = scan.nextInt();\n            int v = scan.nextInt();\n\n            System.out.print(solution(n, v));\n        }\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = br.readLine().split(\" \");\n        int n = Integer.parseInt(s[0]);\n        int d = Integer.parseInt(s[1]);\n        int k = Integer.parseInt(s[2]);\n        StringBuffer sb = new StringBuffer();\n        int[] rem = new int[n];\n        int[] deg = new int[n];\n        int i = 0;\n        if(k == 1){\n            if(n <= 2){\n\n            }else{\n                System.out.println(\"NO\");\n                return;\n            }\n        }\n        for(i=0;i<d;i++){\n            if(i>=n-1){\n                System.out.println(\"NO\");\n                return;\n            }\n            sb.append((i+1) +\" \" + (i+2)+\"\\n\");\n            rem[i] = Math.min(i, d-i);\n            deg[i]++;\n            if(i+1<n)\n            deg[i+1]++;\n        }\n        if(i<n){\n            rem[i] = 0;\n            deg[i] = 1;\n        }\n        i++;\n        int j  = 0;\n        for(;i<n;i++){\n            //For all remaining Nodes\n            while(true){\n                if(j>=n){\n                    System.out.println(\"NO\");\n                    return;\n                }\n                if(rem[j] > 0 && deg[j]<k){\n                    deg[j]++;\n                    rem[i] = rem[j] - 1;\n                    sb.append((j+1)+\" \"+(i+1)+\"\\n\");\n                    deg[i]++;\n                    break;\n                }else{\n                    j++;\n                }\n            }\n        }\n        System.out.println(\"YES\");\n        System.out.println(sb);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] wide = new int[n], sta = new int[n];\n        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n        \twide[i] = sc.nextInt();\n        \thm.put(wide[i], i + 1);\n        }\n        Util.sort(wide);\n        sc.nextLine();\n        String s = sc.nextLine();\n        int tp = 0, pos = 0;\n        StringBuilder out = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n        \tint t;\n        \tif (s.charAt(i) == '0') {\n        \t\tt = wide[pos++];\n        \t\tsta[tp++] = t;\n        \t} else t = sta[--tp];\n        \tout.append(hm.get(t) + \" \");\n        }\n        System.out.println(out.toString());\n        sc.close();\n    }\n", "complexity": "nlogn"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    OutputWriter out = new OutputWriter(outputStream);\n    ABirthday solver = new ABirthday();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n\t int[][] x = new int [200010][10];\n     String a = sc.nextLine(); \n     String b = sc.nextLine(); \n \t  int n = a.length();\n\t  int m = b.length();\n       for (int i = 1; i <= m; i++) {\n         for (int j = 0; j < 2; j++) {\n           x[i][j] = x[i - 1][j];\n         }\n         ++x[i][b.charAt(i - 1) - '0'];\n       }\n       long res = 0;\n        for (int i = 0, c; i < n; i++) {\n          c = a.charAt(i) - '0';\n           for (int j = 0; j < 2; j++) {\n             res += Math.abs(c - j) * (x[m - n + i + 1][j] - x[i][j]);\n           }\n        }\n         System.out.println(res);\n  }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args)\n    FastReader fr = new FastReader();\n    long n = fr.nextLong();\n    long x = fr.nextLong();\n    long y = fr.nextLong();\n    long w = Long.min(x,y) - 1 + (x - Long.min(x,y)) + (y - Long.min(x,y));\n    long b = n - Long.max(x,y) + (Long.max(x,y) - x) + (Long.max(x,y) - y);\n    if(w <= b) System.out.println(\"White\");\n    else System.out.println(\"Black\");\n\n  }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    CBanhMi solver = new CBanhMi();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt(), m = scanner.nextInt();\n        int[] vertical = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            vertical[i] = scanner.nextInt();\n        }\n\n        Arrays.sort(vertical);\n\n\n        ArrayList<Integer> horisontal = new ArrayList<>();\n        int amount = 0;\n        for (int i = 0; i < m; i++) {\n            int x1 = scanner.nextInt(), x2 = scanner.nextInt(), y = scanner.nextInt();\n            if (x1 == 1) {\n                amount++;\n                horisontal.add(x2);\n            }\n        }\n\n        Collections.sort(horisontal);\n\n\n        if (amount == 0) {\n            System.out.println(0);\n            return;\n        }\n\n\n        int minVal = amount, horSize = horisontal.size(), verLen = vertical.length;\n        int h = 0, v = 0;\n\n        for (; v < verLen && h < horSize; ) {\n\n           while (h < horSize && horisontal.get(h) < vertical[v]){\n               h++;\n               amount--;\n           }\n           minVal = Math.min(minVal, amount + v);\n\n            while (h < horSize && v < verLen && horisontal.get(h) >= vertical[v]){\n                minVal = Math.min(minVal, amount + v);\n                v++;\n            }\n\n        }\n\n        if(horisontal.get(horSize - 1) < 1E9){\n            minVal = Math.min(minVal, v);\n        }\n\n\n\n        System.out.println(minVal);\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String []args){\n    \t\t\tScanner in = new Scanner(System.in);\n\n    long n=in.nextLong();\n\t\tlong m=in.nextLong();\n\t\tlong k=in.nextLong();\n\t\tlong l=in.nextLong();\n \n\t\tlong j=((k+l)/m);\n\t\tif((k+l)%m!=0)j++;\n\t\tif((k+l>n) || j*m>n) {\n\t\t\tSystem.out.println(-1);\n\t\t}else {\n\t\t\t\n\t\t\tSystem.out.println(j);\n\t\t}\n\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\ttry (Scanner sc = new Scanner(System.in)) {\n\t\t\t\n\t\t\tint n = sc.nextInt();\n\t\t\tBigInteger m = sc.nextBigInteger();\n\t\t\t\n\t\t\tSystem.out.println(m.mod(BigInteger.valueOf(2).pow(n)));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        int[] arr = new int[n];\n        HashMap<Integer, Integer> map = new HashMap<>();\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        for (int i = 0; i < n; i++) {\n            int x = Integer.parseInt(st.nextToken());\n            arr[i] = x;\n            if (!map.containsKey(x)) {\n                map.put(x, 1);\n            } else {\n                map.replace(x, map.get(x) + 1);\n            }\n        }\n        int[] power = new int[31];\n        for (int i = 0; i < 31; i++) {\n            power[i] = 1 << i; // 0 100=4 1000=8 10000=16\n        }\n        int c = 0;\n        for (int i = 0; i < n; i++) {\n        boolean f = false;\n        for (int j = 0; j <= 30; j++) {\n        int check = power[j] - arr[i];\n                if ((map.containsKey(check) && check != arr[i])) {\n                f = true; break;}\n                if((map.containsKey(check) && check == arr[i] && map.get(check) >=2)) {\n                    f = true; break;\n                }\n            }\n            if (!f) {\n                c++;\n            }\n        }\n        System.out.println(c);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[])throws IOException{\n\t\tScanner sc=new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\tint x11=sc.nextInt();\n\t\tint y11=sc.nextInt();\n\t\tint x12=sc.nextInt();\n\t\tint y12=sc.nextInt();\n\t\tint x13=sc.nextInt();\n\t\tint y13=sc.nextInt();\n\t\tint x14=sc.nextInt();\n\t\tint y14=sc.nextInt();\n\t\tdouble x1c=(x11+x12+x13+x14)/4.0;\n\t\tdouble y1c=(y11+y12+y13+y14)/4.0;\n\t\tint x21=sc.nextInt();\n\t\tint y21=sc.nextInt();\n\t\tint x22=sc.nextInt();\n\t\tint y22=sc.nextInt();\n\t\tint x23=sc.nextInt();\n\t\tint y23=sc.nextInt();\n\t\tint x24=sc.nextInt();\n\t\tint y24=sc.nextInt();\n\t\tdouble x2c=(x21+x22+x23+x24)/4.0;\n\t\tdouble y2c=(y21+y22+y23+y24)/4.0;\n\t\tdouble a1=area(x11,y11,x12,y12,x13,y13)+area(x11,y11,x13,y13,x14,y14);\n\t\tdouble a2=area(x21,y21,x22,y22,x23,y23)+area(x21,y21,x23,y23,x24,y24);\n\t\tif(a1==area(x11,y11,x12,y12,x21,y21)+area(x11,y11,x21,y21,x14,y14)+area(x21,y21,x12,y12,x13,y13)+area(x21,y21,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a1==area(x11,y11,x12,y12,x22,y22)+area(x11,y11,x22,y22,x14,y14)+area(x22,y22,x12,y12,x13,y13)+area(x22,y22,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a1==area(x11,y11,x12,y12,x23,y23)+area(x11,y11,x23,y23,x14,y14)+area(x23,y23,x12,y12,x13,y13)+area(x23,y23,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a1==area(x11,y11,x12,y12,x24,y24)+area(x11,y11,x24,y24,x14,y14)+area(x24,y24,x12,y12,x13,y13)+area(x24,y24,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a1==area(x11,y11,x12,y12,x2c,y2c)+area(x11,y11,x2c,y2c,x14,y14)+area(x2c,y2c,x12,y12,x13,y13)+area(x2c,y2c,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x11,y11)+area(x21,y21,x11,y11,x24,y24)+area(x11,y11,x22,y22,x23,y23)+area(x11,y11,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x12,y12)+area(x21,y21,x12,y12,x24,y24)+area(x12,y12,x22,y22,x23,y23)+area(x12,y12,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x13,y13)+area(x21,y21,x13,y13,x24,y24)+area(x13,y13,x22,y22,x23,y23)+area(x13,y13,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x14,y14)+area(x21,y21,x14,y14,x24,y24)+area(x14,y14,x22,y22,x23,y23)+area(x14,y14,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x1c,y1c)+area(x21,y21,x14,y14,x2c,y2c)+area(x1c,y1c,x22,y22,x23,y23)+area(x1c,y1c,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tpw.println(\"NO\");\n\t\tpw.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = Integer.parseInt(br.readLine());\n\n        ArrayList<String> a = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            a.add(br.readLine());\n        }\n\n        if(solve(n, a)){\n            out.println(\"YES\");\n            for (String s : a) {\n                out.println(s);\n            }\n        }\n        else\n            out.println(\"NO\");\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new TwoSquares().solve();\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner s = new Scanner(System.in);\n        int rem[] = new int[3];\n\t\t\n\t\tArrays.fill(rem,-1);\n\t\trem[0] = 0;\n        char ch[] = s.next().toCharArray();\n\t\tint n = ch.length;\n \t\tlong dp[] = new long[n];\n\n        int sum = 0;\n\t\t\n        for(int i=0;i<ch.length;i++){\n\t\t   sum = sum + (ch[i]-48);\n\t\t   if(rem[sum%3] != -1)\n\t\t\t    if(i>0){\n\t\t\t\t\tdp[i] = Math.max(dp[i-1],dp[rem[sum%3]]+1);}\n\t\t\t\telse\n\t\t\t\t\tdp[i] = 1;\n\t       else\n\t\t\t   if(i>0)\n\t\t\t\t   dp[i] = dp[i-1];\n\t\t\t   \n\t\t   \n\t\t   rem[sum%3] = i;\n\t\t   sum = sum%3;\n\t\t   \n\t\t}\t\t\n\t\t \n\n            System.out.println(dp[n-1]);\t\t\t\n\t\t\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        long n = scanner.nextLong();\n        long x = scanner.nextLong(), y = scanner.nextLong();\n        long whiteSteps, blackSteps;\n\n        if(x == 1 || y == 1){\n            whiteSteps = (x - 1) + (y - 1);\n        } else {\n            whiteSteps = Math.min((x - 1) + Math.abs(y - x), (y - 1) + Math.abs(y - x));\n        }\n\n        if(x == n || y == n){\n            blackSteps = (n - x) + (n - y);\n        } else {\n            blackSteps = Math.min((n - x) + Math.abs(y - x), (n - y) + Math.abs(y - x));\n        }\n\n        if (whiteSteps <= blackSteps){\n            System.out.println(\"White\");\n        } else {\n            System.out.println(\"Black\");\n        }\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n, k;\n        n = sc.nextInt();\n        k = sc.nextInt();\n\n        int a = (n - k) / 2;\n\n        StringBuilder s = new StringBuilder();\n\n        int i;\n        while (s.length() < n) {\n            i = 0;\n            while (i < a && s.length() < n) {\n                s.append(\"0\");\n                i++;\n            }\n            if (s.length() < n) s.append(\"1\");\n        }\n\n        System.out.println(s);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        BufferedReader inp = new BufferedReader(new InputStreamReader(System.in));\n        String[] s1 = inp.readLine().split(\" \");\n        long clothes = Long.parseLong(s1[0]);\n        long months = Long.parseLong(s1[1]);\n\n        //formula 2^k(2x-1)+1;\n        calc(clothes,months);\n        System.out.print(ans);\n    }\n", "complexity": "logn"}
{"code": "public class Test { public static void main(String[] args)\n{\nScanner sc = new Scanner(System.in);\nint n= sc.nextInt();\nint x= (int)Math.sqrt(n) ;\nint a[] = new int[n+5];\nfor(int i=1,o=n,j;i<=n;i+=x)\nfor(j=(int)Math.min(i+x-1,n);j>=i;a[j--]=o--);\nfor(int i=1;i<=n;i++)System.out.print(a[i]+\" \");\nSystem.out.println();\n\n\n} \n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(null,null,\"BaZ\",1<<25)\n        {\n            public void run()\n            {\n                try\n                {\n                    solve();\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int N = sc.nextInt();\n        long dest = sc.nextLong();\n        long max = (long)N * ((long)N + 1L) / 2L;\n        if (dest < 2 * N - 1 || dest > max) {\n            out.println(\"No\");\n            out.close();\n            return;\n        }\n        int[] d = new int[N + 1];\n        int[] f = new int[N + 1];\n        int K = 1;\n        for (; K <= N; K++) {\n            long dep = 1L, cnt = 1L, c = 1L;\n            long t = 1L;\n            while (cnt < N) {\n                c = c * K;\n                dep++;\n                t += (dep * Math.min(c, N - cnt));\n                cnt += c;\n            }\n            if (t <= dest) break;\n        }\n        out.println(\"Yes\");\n        int dep = 1; long cnt = 1L, c = 1L;\n        long t = 1L;\n        d[1] = 1;\n        while (cnt < N) {\n            dep++; c = c * K; \n            long x = (long)N - cnt;\n            int min;\n            if (c >= x) min = (int)x;\n            else min = (int)c;\n            d[dep] = min;\n            t += (dep * Math.min(c, (long)N - cnt)); cnt += c;\n        }\n        dest -= t;\n        int curDep = dep; int nextDep = dep + 1;\n        while (dest > 0) {\n            if (d[curDep] <= 1) curDep--;\n            d[curDep]--;\n            long next = Math.min(nextDep++, dest + curDep);\n            dest -= ((int)next - curDep);\n            d[(int)next]++;\n        }\n        int first = 1;\n        for (int i = 2; i < nextDep; i++) {\n            int p = 0, fn = first - d[i - 1] + 1;\n            for (int j = first + 1; j <= first + d[i]; j++) {\n                if (p == K) {\n                    fn++; p = 0;\n                }\n                p++; f[j] = fn;\n            }\n            first += d[i];\n        }\n        for (int i = 2; i <= N; i++)\n            out.format(\"%d \", f[i]);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew two_squares().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        int n=r.nextInt();\n        int []l=new int[1005];\n        int []ri=new int[1005];\n        int []candy=new int[1005];\n        for(int i=1;i<=n;++i)\n        {\n            l[i]=r.nextInt();\n        }\n        for(int i=1;i<=n;++i)\n        {\n            ri[i]=r.nextInt();\n        }\n        for(int i=1;i<=n;++i)\n        {\n            if(l[i]>i-1||ri[i]>n-i)\n            {\n                System.out.println(\"NO\");\n                System.exit(0);\n            }\n            candy[i]=n-l[i]-ri[i];\n        }\n        for(int i=1;i<=n;++i)\n        {\n            int left=0,right=0;\n            for(int j=1;j<=i-1;++j)\n            {\n                if(candy[j]>candy[i])\n                {\n                    ++left;\n                }\n            }\n            for(int j=i+1;j<=n;++j)\n            {\n                if(candy[j]>candy[i])\n                {\n                    ++right;\n                }\n            }\n            if(left!=l[i]||right!=ri[i])\n            {\n                System.out.println(\"NO\");\n                System.exit(0);\n            }\n        }\n        System.out.println(\"YES\");\n        for(int i=1;i<=n;++i)\n        {\n            System.out.print(candy[i]+\" \");\n        }\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws Exception {\n        new Thread(null, new solution(),\"Main\",1<<26).start();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]){\n        out = new PrintWriter(System.out);\n        in = new InputReader();\n        new C();\n        out.flush(); out.close();\n    }   \n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));\n        \n        int query = in.nextInt();\n        \n        while (query -- > 0) {\n            int n = in.nextInt();\n            int k = in.nextInt();\n            \n            char[] arr = new char[n];\n            //slot all n into char array\n            String code = in.next();\n            for (int i = 0; i < n; i++) {\n                arr[i] = code.charAt(i);\n                \n            }\n            \n            //R, G, B cycle\n            int r = 0;\n            int g = 0;\n            int b = 0;\n            \n            for (int i = 0; i < k; i++) {\n                if (i % 3 == 0) {\n                    if (arr[i] == 'R') {g++; b++;}\n                    else if (arr[i] == 'G') {r++; b++;}\n                    else {r++; g++;} //if is 'B'\n                } else if (i % 3 == 1) {\n                    if (arr[i] == 'G') {g++; b++;}\n                    else if (arr[i] == 'B') {r++; b++;}\n                    else {r++; g++;} //if is 'R'\n                } else { //if mod 3 is 2\n                    if (arr[i] == 'B') {g++; b++;}\n                    else if (arr[i] == 'R') {r++; b++;}\n                    else {r++; g++;} //if is 'G'     \n                }\n            }\n            \n            //starting from kth position, if different then add 1, and check (j-k)th position\n            int rMin = r;\n            int gMin = g;\n            int bMin = b;\n            for (int j = k; j < n; j++) {\n                //R cycle\n                if ((j % 3 == 0 && arr[j] != 'R') ||  \n                    (j % 3 == 1 && arr[j] != 'G') ||\n                    (j % 3 == 2 && arr[j] != 'B')) {\n                    r++;\n                }\n                //R cycle \n                if (((j - k) % 3 == 0 && arr[j - k] != 'R') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'G') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'B')) {\n                    r--;\n                }\n                rMin = Math.min(r, rMin);\n                //G cycle\n                if ((j % 3 == 0 && arr[j] != 'G') ||  \n                    (j % 3 == 1 && arr[j] != 'B') ||\n                    (j % 3 == 2 && arr[j] != 'R')) {\n                    g++;\n                } \n                if (((j - k) % 3 == 0 && arr[j - k] != 'G') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'B') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'R')) {\n                    g--;\n                }      \n                gMin = Math.min(gMin, g);\n                //B cycle\n                if ((j % 3 == 0 && arr[j] != 'B') ||  \n                    (j % 3 == 1 && arr[j] != 'R') ||\n                    (j % 3 == 2 && arr[j] != 'G')) {\n                    b++;\n                }       \n                if (((j - k) % 3 == 0 && arr[j - k] != 'B') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'R') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'G')) {\n                    b--;\n                } \n                bMin = Math.min(bMin, b);\n                \n            }\n            \n            out.println(Math.min(Math.min(rMin, gMin), bMin));\n            \n        }\n        out.flush();\n        \n    } \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        CGlassCarving solver = new CGlassCarving();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new First().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Main().solve();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        if(((m + 1) / 60 < a) || ((m + 1) / 60 == a && (m + 1) % 60 <= b)) {\n            out(0, 0);\n            System.exit(0);\n        }\n        for(int i = 2; i <= n; i++) {\n            int x = sc.nextInt();\n            int y = sc.nextInt();\n\n            int bb = b + 2 * m + 2;\n            int aa = a + bb / 60;\n            bb %= 60;\n\n            if((aa < x) || (aa == x && bb <= y)) {\n                b = b + m + 1;\n                a = a + b / 60;\n                b %= 60;\n                out(a, b);\n                System.exit(0);\n            }\n            a = x;\n            b = y;\n        }\n        b = b + m + 1;\n        a = a + b / 60;\n        b = b % 60;        \n        out(a, b);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tString s = sc.next();\n\n\t\tStringBuilder ans = new StringBuilder();\n\t\tint count = 0;\n\t\tint open = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (s.charAt(i) == '(') {\n\t\t\t\tans.append(\"(\");\n\t\t\t\tcount++;\n\t\t\t\topen++;\n\t\t\t} else {\n\t\t\t\tans.append(\")\");\n\t\t\t\topen--;\n\t\t\t}\n\t\t\tif (count == k / 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (open > 0) {\n\t\t\tans.append(\")\");\n\t\t\topen--;\n\t\t}\n\t\tSystem.out.println(ans.toString());\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        int n = in.nextInt(),ans=Integer.MAX_VALUE,t=0;\n        String x = in.next();\n        for (int i = 0; i < n; i++) {\n            if(x.charAt(i)=='-')t--;\n            else t++;\n            ans=Math.min(ans,t);\n        }\n           if(ans <= 0) \n               System.out.println(Math.abs(ans)+t);\n           else \n               System.out.println(t);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        new Thread(null ,new Runnable(){\n            public void run(){\n                try{\n                    solve();\n                } catch(Exception e){\n                    e.printStackTrace();\n                }\n            }\n        },\"1\",1<<26).start();\n        \n    }\n", "complexity": "nlogn"}
{"code": "   public static void main(String args[])\n   \tScanner in = new Scanner(System.in);\n   \tint n = in.nextInt();\n   \tint m = in.nextInt();\n   \tint k = in.nextInt();\n   \tint arr[] = new int[n+1];\n   \tfor(int i =0;i<n;i++)\n   \t arr[i+1]= in.nextInt();\n   \t\n   \tlong sum[] = new long [n+1];\n   \t\n   \tfor(int i=1;i<=n;i++)\n   \t sum[i]=sum[i-1]+arr[i];\n   \t\n    long dp[] = new long[n+1];\n\n    for(int i =1;i<=n;i++)\n    {\n      for(int j=i;j>i-m&&j>=1;j--)\n      {\n        long val = sum[i]-sum[j-1]+dp[j-1]-k;\n        dp[i]= Math.max(dp[i],val);\n      }\t\n    }\n    long max =0;\n    for(int i =1;i<=n;i++)\n     max=Math.max(max,dp[i]);\n    \n    System.out.println(max);\n     \n   }\t\n", "complexity": "quadratic"}
{"code": "public static void main(String args[])\nScanner s=new Scanner(System.in);\nint n=s.nextInt();\nint m=s.nextInt();\nint arr[]=new int[n];\nint max = Integer.MIN_VALUE;\n        long sum = 0;\n        for(int i=0;i<n;i++)\n        {\n            arr[i] = s.nextInt();\n            sum = sum + arr[i];\n            max = Math.max(max,arr[i]);\n        }\n        Arrays.sort(arr);\n        int i = 0;\n        int count = 0;\n        int d = 0;\n        for(i=0; i<n; i++)\n        {\n            if(arr[i] > d)\n            {\n                count++;\n                d++;\n            }\n            else if(arr[i] == d && arr[i] > 0)\n            {\n                count++;\n            }\n        }\n        //System.out.println(count + \" \" + max);\n        if(max - d > 0)\n        {\n            count = count + max - d;\n        }\n        System.out.println(sum - count);}}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n=sc.nextInt();\n\t\tint []a=new int [n];\n\t\tint max=0;\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=sc.nextInt();\n\t\tStack<Integer> s=new Stack<>();\n\t\tboolean f=true;\n\t\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\t\tmax=Math.max(max,a[i]);\n\t\t\t\t\tif(!s.isEmpty() && a[i]>s.peek())\n\t\t\t\t\t\tf=false;\n\t\t\t\t\ts.push(a[i]);\n\t\t\t\t\twhile(!s.isEmpty()) {\n\t\t\t\t\t\tint high=s.pop();\n\t\t\t\t\t\tif(s.isEmpty() || s.peek()!=high) {\n\t\t\t\t\t\t\ts.push(high);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts.pop();\n\t\t\t\t\t}\n\t\t\t\t//\tSystem.out.println(s+\" \"+max);\n\t\t\t\t}\n\t\t\t\t//System.out.println(f+\" \"+max);\n\t\t\t\tif(f && s.size()==0)\n\t\t\t\t\tout.println(\"YES\");\n\t\t\t\telse if(f && s.size()==1 && s.peek()==max)\n\t\t\t\t\tout.println(\"YES\");\n\t\t\t\telse\n\t\t\t\t\tout.println(\"NO\");\n\t\t out.flush();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n,r,l;\n\t\tn = sc.nextInt();\n\t\twhile(n-->0) {\n\t\t\tl = sc.nextInt();\n\t\t\tr = sc.nextInt();\n\n\t\t\tSystem.out.println(f(r)-f(l-1));\n\t\t}\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint l = 1000, r = 0, u = 1000, b = 0;\n\t\t\n\t\tfor(int i = 0; i < n; i++ ) {\n\t\t\tString str = in.next();\n\t\t\tfor(int j = 0; j < m; j++)\n\t\t\t\tif(str.charAt(j) == 'B') {\n\t\t\t\t\tl = Math.min(j+1, l);\n\t\t\t\t\tr = Math.max(j+1, r);\n\t\t\t\t\tu = Math.min(i+1, u);\n\t\t\t\t\tb = Math.max(i+1, b);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println((u+b)/2 + \" \" + (l+r)/2);\n\t\t\n\t\tin.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new EhabAndAComponentChoosingProblem().solve();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n    int n=in.nextInt();\n    int a[]=new int[1000002];\n    int dp[]=new int[1000002],ans=0;\n    for(int i=0;i<n;i++){a[in.nextInt()]=in.nextInt();}\n    dp[0]=a[0]==0?0:1;\n    for(int i=1;i<1000002;i++){\n    if(a[i]==0){dp[i]=dp[i-1];}\n    else{\n    if(a[i]>=i){dp[i]=1;}\n    else{\n    dp[i]=dp[i-a[i]-1]+1;\n    }}\n    if(dp[i]>=ans)ans=dp[i];\n    }\n        System.out.println(n-ans);\n    }}\nclass FastReader\n    {\n        BufferedReader br;\n        StringTokenizer st;\n \n        public FastReader()\n        {\n            br = new BufferedReader(new\n                     InputStreamReader(System.in));\n        }\n \n        String next()\n        {\n            while (st == null || !st.hasMoreElements())\n            {\n                try\n                {\n                    st = new StringTokenizer(br.readLine());\n                }\n                catch (IOException  e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n \n        int nextInt()\n        {\n            return Integer.parseInt(next());\n        }\n \n        long nextLong()\n        {\n            return Long.parseLong(next());\n        }\n \n        double nextDouble()\n        {\n            return Double.parseDouble(next());\n        }\n \n        String nextLine()\n        {\n            String str = \"\";\n            try\n            {\n                str = br.readLine();\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n            return str;\n        }\n}\n\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{\n        FastReader sc=new FastReader(); \n        OutputStream outputStream = System.out;\n        PrintWriter out = new PrintWriter(outputStream);\n        int n=sc.nextInt();\n        int[] font=new int[n];\n        int[] cost=new int[n];\n        for(int i=0;i<n;i++) {\n            font[i]=sc.nextInt();\n        \n        }\n        for(int i=0;i<n;i++) {\n            cost[i]=sc.nextInt();\n        }\n        int[] dou= new int[n];\n        for(int i=0;i<n;i++) {\n            int min=Integer.MAX_VALUE;\n            for(int j=0;j<i;j++) {\n                if(font[j]<font[i]) {\n                    if(min>cost[i]+cost[j]) {\n                        min=cost[i]+cost[j];\n                    }\n                }\n            }\n            dou[i]=min;\n        }\n        int ans=Integer.MAX_VALUE;\n        for(int i=0;i<n;i++) {\n            int min=Integer.MAX_VALUE;\n            for(int j=0;j<i;j++) {\n                if(dou[j]!=Integer.MAX_VALUE && font[j]<font[i]) {\n                    if(min>dou[j]+cost[i]) {\n                        min=dou[j]+cost[i];\n                    }\n                }\n            }\n            if(min<ans) {\n                ans=min;\n            }\n        }\n        if(ans==Integer.MAX_VALUE) {\n            System.out.println(-1);\n        }\n        else {\n            System.out.println(ans);\n        }\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\t// your code goes here\n\t\tScanner in=new Scanner(System.in);\n\t\tlong x=in.nextLong();\n\t\tlong k=in.nextLong();\n\t\t\n\t\tlong mod=1000000007;\n\t\tlong get=power(2,k,mod);\n\t\tlong ans=((get%mod)*((2*x)%mod))%mod-get+1;\n\t\tif(ans<0)\n\t\tans+=mod;\n\t\tif(x==0)\n\t\tans=0;\n\t\tSystem.out.println(ans);\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "        public static void main(String[] args) {\n            Scanner sc = new Scanner(System.in);\n \n            int n = sc.nextInt();\n            int r = sc.nextInt();\n            double[] y = new double[n];\n            int arr[] = new int[n];\n \n            for (int i = 0; i < n; i++) {\n                arr[i] =sc.nextInt();\n                double top = r; // if we make it 0 and subtract from the result will get WA (do not know why!!!)\n                int x = arr[i];\n                for(int  j =0 ;j<i;j++)\n                {\n                    if(Math.abs(arr[j] -x )<=2*r) {\n \n                            top = Math.max(top  , y[j] + Math.sqrt((4 * r * r) - ((arr[j] - x) * (arr[j] - x))));\n \n                    }\n                }\n                y[i] = top ;\n                double res = y[i] ;\n                System.out.print(res+\" \");\n            }\n \n        }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) throws IOException {\n    try (ChainReaction instance = new ChainReaction()) {\n      instance.solve();\n    }\n  }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int a[] = new int[n];\n        int b[] = new int[n];\n        for (int i = 0; i < n; i++) a[i] = sc.nextInt();\n        for (int i = 0; i < n; i++) b[i] = sc.nextInt();\n        int c[] = new int[2 * n];\n        c[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            c[i * 2] = a[i];\n            c[i * 2 - 1] = b[i];\n            if (a[i] == 1 || b[i] == 1) {\n                System.out.print(-1);\n                System.exit(0);\n            }\n        }\n        c[2 * n - 1] = b[0];\n        if (a[0] == 1 || b[0] == 1) {\n            System.out.print(-1);\n            System.exit(0);\n        }\n        System.out.println(bin_search(c, m));\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main (String[] args) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            String parameterStringList[] = reader.readLine().split(\" \");\n            int x = Integer.parseInt(parameterStringList[0]);\n            int y = Integer.parseInt(parameterStringList[1]);\n            int z = Integer.parseInt(parameterStringList[2]);\n            int t1 = Integer.parseInt(parameterStringList[3]);\n            int t2 = Integer.parseInt(parameterStringList[4]);\n            int t3 = Integer.parseInt(parameterStringList[5]);\n\n            int T1 = Math.abs(x-y) * t1;\n            int T2 = Math.abs(x-z) * t2 + 3*t3 + Math.abs(x-y) * t2;\n\n            if(T2 <= T1) System.out.println(\"YES\");\n            else System.out.println(\"NO\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tString a = scan.next();\n\t\tString b = scan.next();\n\t\tchar last = b.charAt(0);\n\t\tString ans = \"\"+a.charAt(0);\n\t\tfor(int i = 1;i<a.length();i++){\n\t\t\tif(a.charAt(i)>=last)break;\n\t\t\tans+=a.charAt(i);\n\t\t}\n\t\tans+=last;\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry (BufferedReader r = new BufferedReader(new InputStreamReader(System.in))) {\n\t\t\tfinal String[] line = r.readLine().split(\" \");\n\t\t\tfinal int N = Integer.parseInt(line[0]), P = Integer.parseInt(line[1]);\n\t\t\tfinal String[] numS = r.readLine().split(\" \");\n\t\t\tif (numS.length != N) throw new IllegalArgumentException();\n\t\t\tfinal int[] n = new int[N];\n\t\t\tint sum1 = 0, sum2 = 0;\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tn[i] = Integer.parseInt(numS[i]) % P;\n\t\t\t\tsum2 += n[i];\n\t\t\t\tif (sum2 >= P) sum2 -= P;\n\t\t\t}\n\t\t\tint max = sum2;\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tsum1 += n[i];\n\t\t\t\tif (sum1 >= P) sum1 -= P;\n\t\t\t\tsum2 -= n[i];\n\t\t\t\tif (sum2 < 0) sum2 += P;\n\t\t\t\tfinal int s = sum1 + sum2;\n\t\t\t\tif (s > max) max = s;\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[])\n        Scanner sc=new Scanner(System.in);\n        long n=sc.nextLong();\n        if(n==0)\n        System.out.println(0);\n        else if(n%2==1)\n        System.out.println((n+1)/2);\n        else\n        System.out.println(n+1);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)throws IOException{\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[][] point = new int[n][];\n        for(int i=0;i<n;i++) point[i] = new int[]{sc.nextInt(),sc.nextInt()};\n        Arrays.sort(point,(a,b)->((a[0]-a[1])-(b[0]-b[1])));\n        TreeMap<Integer,Integer> tm = new TreeMap<>();\n        int ans = 0;\n        for(int i=n-1;i>=0;i--){\n            int x = point[i][0], w = point[i][1];\n            Map.Entry<Integer,Integer> cur =  tm.ceilingEntry(x+w);\n            int curRes;\n            if(cur==null) curRes = 1;\n            else curRes = cur.getValue()+1;\n            ans = Math.max(ans,curRes);\n            Map.Entry<Integer,Integer> upper = tm.ceilingEntry(x-w);\n            if(upper==null||upper.getValue()<curRes) tm.put(x-w,curRes);\n            //Integer key = tm.\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) { new bhaa().run(); }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tComp c1 = getComp(scanner);\n\t\tComp c2 = getComp(scanner);\n\t\tc1.sortByPrice();\n\t\tc2.sortByPrice();\t\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < c1.num || j < c2.num) {\n\t\t\tElem xi = (i < c1.num) ? c1.elems.get(i) : null;\n\t\t\tElem yj = (j < c2.num) ? c2.elems.get(j) : null;\n\t\t\tif(xi != null && yj != null) {\n\t\t\t\tif(xi.price >= yj.price) {\n\t\t\t\t\tif(!c2.resultSet.contains(xi)) {\n\t\t\t\t\t\tc1.resultSet.add(xi);\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tif(!c1.resultSet.contains(yj)) {\n\t\t\t\t\t\tc2.resultSet.add(yj);\n\t\t\t\t\t}\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t} else\n\t\t\tif(xi != null) {\n\t\t\t\tif(!c2.resultSet.contains(xi)) {\n\t\t\t\t\tc1.resultSet.add(xi);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tif(!c1.resultSet.contains(yj)) {\n\t\t\t\t\tc2.resultSet.add(yj);\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\t\t\t\t\n\t\t}\n\t\t\n\t\tlong result = c1.getResultPrice() + c2.getResultPrice();\n\t\tSystem.out.println(result);\n   }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new PrintStream(System.out));\n        StringTokenizer st = new StringTokenizer(f.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        long[] arrB = new long[n];\n        long[] arrG = new long[m];\n        st=new StringTokenizer(f.readLine());\n        for(int i=0;i<n;i++){\n            arrB[i]=Long.parseLong(st.nextToken());\n        }\n        st=new StringTokenizer(f.readLine());\n        for(int j=0;j<m;j++){\n            arrG[j]=Long.parseLong(st.nextToken());\n        }\n        Arrays.sort(arrB);\n        Arrays.sort(arrG);\n        long ans = 0;\n//        for (int i = 0; i < n; i++) ans += arrB[i] * m;\n//        for (int i = 0; i < m - 1; i++) ans += arrG[i] - arrB[0];\n//        if (arrB[m - 1] != arrB[0]) {\n//            if (arrB.length == 1) {\n//                ans=-1;\n//            }\n//            else ans += arrG[m - 1] - arrB[1];\n//        }\n//        if (arrG[m-1] < arrB[0]) {\n//            ans=-1;\n//        }\n        for(int i=0;i<n;i++){\n            ans+=arrB[i]*(long)m;\n        }\n        for(int i=1;i<m;i++){\n            ans+=arrG[i]-arrB[n-1];\n        }\n        if(arrB[n-1]!=arrG[0]){\n            if(n==1){\n                ans=-1;\n            }\n            else{\n                //smallest g goes to second to last\n                ans+=arrG[0]-arrB[n-2];\n            }\n        }\n        if(arrB[n-1]>arrG[0]){\n            ans=-1;\n        }\n        System.out.println(ans);\n        f.close();\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int cura = 0,curb = 0;\n        int ver;\n        System.out.println(\"? 0 0\");\n        System.out.flush();\n        ver = sc.nextInt();\n        for(int i=29;i>=0;i--){\n            System.out.println(\"? \"+(cura+(1<<i))+\" \"+curb);\n            System.out.flush();\n            int temp1 = sc.nextInt();\n            System.out.println(\"? \"+cura+\" \"+(curb+(1<<i)));\n            System.out.flush();\n            int temp2 = sc.nextInt();\n            if(temp1!=temp2){\n                if(temp2==1){\n                    cura += (1<<i);\n                    curb += (1<<i);\n                }\n            }\n            else{\n                if(ver==1) cura += (1<<i);\n                if(ver==-1) curb += (1<<i);\n                \n                ver = temp1;\n            }\n        }\n        System.out.println(\"! \"+cura+\" \"+curb);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\t// your code goes here\n\t\t\tlong n,s,p;\n\t\t\tScanner in=new Scanner(System.in);\n\t\t\tn=in.nextLong();\n\t\t\ts=in.nextLong();\n\t\t\tif(n==1 && s<=1)\n\t\t\t{\n\t\t\t    System.out.print(n-1);\n\t\t\t}\n\t        else if(s<n)\n\t        {\n\t            if(s%2!=0)\n\t\t        {System.out.print(s/2);}\n\t\t        else\n\t\t        {System.out.print(s/2-1);}\n\t        }\n\t        else if(s==n)\n\t{\n\t    if(s%2==0)\n\t\t{System.out.println((n/2)-1);}\n\t\telse\n\t\t{System.out.println(n/2);}\n\t}\n\telse if(s<=(2*n-1))\t\n\t{\n\t\tSystem.out.print((2*n+1-s)/2);\n\t}\n\telse\n\t{\n\t\tSystem.out.print(0);\n\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry (BufferedReader r = new BufferedReader(new InputStreamReader(System.in))) {\n\t\t\tfinal int N = Integer.parseInt(r.readLine());\n\t\t\tMatrix m1 = readMatrix(r, N), m2 = readMatrix(r, N);\n\t\t\tboolean matched = matchesFlipped(m1, m2);\n\t\t\tint i = 0;\n\t\t\twhile (i < 3 && !matched) {\n\t\t\t\tm1 = new MRot(m1);\n\t\t\t\tmatched = matchesFlipped(m1, m2);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tSystem.out.println(matched ? \"Yes\" : \"No\");\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args)\n    FastReader fr = new FastReader();\n    int n = fr.nextInt();\n    int q = fr.nextInt();\n    long[] a = new long[n];\n    long[] k = new long[q];\n    for(int i = 0; i < n; i++) a[i] = fr.nextLong();\n    for(int i = 0; i < q; i++) k[i] = fr.nextLong();\n    long[] pre = new long[n];\n    pre[0] = a[0];\n    for(int i = 1; i < n; i++) pre[i] = pre[i-1] + a[i];\n    long pd = 0;\n    for(int i = 0; i < q; i++)\n    {\n      int l = 0;\n      int r = n - 1;\n      while(r > l)\n      {\n        int mid = (l + r) >> 1;\n\n        if(pre[mid] - pd < k[i])\n        {\n          l = mid + 1;\n        }\n        else if(pre[mid] - pd > k[i])\n        {\n          r = mid - 1;\n        }\n        else\n        {\n          l = r = mid;\n        }\n      }\n      int ans = 0;\n      if(pre[l] - pd <= k[i])\n      {\n        ans = n - l - 1;\n      }\n      else\n      {\n        ans = n - l;\n      }\n      if(ans == 0) ans  = n;\n      pd = pd + k[i];\n      if(pd >= pre[n-1]) pd = 0;\n      System.out.println(ans);\n    }\n  }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint n = in.nextInt();\n\t\tTreeSet <Vector> vectors = new TreeSet <> ();\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tVector v = new Vector(in.nextLong(), in.nextLong(), i);\n\t\t\tvectors.add(v);\n\t\t}\n\t\twhile(vectors.size() > 2) {\n\t\t\t//System.out.println(vectors);\n\t\t\t//stop(500);\n\t\t\t\n\t\t\tTreeSet <Vector> support = new TreeSet <> ();\n\t\t\t\n\t\t\twhile(vectors.size() > 0) {\n\t\t\t\tVector curr = vectors.pollFirst();\n\t\t\t\tVector next1 = vectors.higher(curr);\n\t\t\t\tVector next2 = vectors.lower(curr.negate());\n\t\t\t\tVector next3 = vectors.higher(curr.negate());\n\t\t\t\tVector next4 = vectors.lower(curr);\n\t\t\t\t\n\t\t\t\t//System.out.println(\"CURR: \" + curr + \"\\n\" + next1 + \"\\n\" + next2);\n\t\t\t\t\n\t\t\t\tif(next1 != null) {\n\t\t\t\t\tif(ok(curr, next1)) {\n\t\t\t\t\t\tsupport.add(curr.add(next1));\n\t\t\t\t\t\tvectors.remove(next1);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next1 != null) {\n\t\t\t\t\tif(ok(curr, next1.negate())) {\n\t\t\t\t\t\tsupport.add(curr.subtract(next1));\n\t\t\t\t\t\tvectors.remove(next1);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next2 != null) {\n\t\t\t\t\tif(ok(curr, next2)) {\n\t\t\t\t\t\tsupport.add(curr.add(next2));\n\t\t\t\t\t\tvectors.remove(next2);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next2 != null) {\n\t\t\t\t\tif(ok(curr, next2.negate())) {\n\t\t\t\t\t\tsupport.add(curr.subtract(next2));\n\t\t\t\t\t\tvectors.remove(next2);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next3 != null) {\n\t\t\t\t\tif(ok(curr, next3)) {\n\t\t\t\t\t\tsupport.add(curr.add(next3));\n\t\t\t\t\t\tvectors.remove(next3);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next3 != null) {\n\t\t\t\t\tif(ok(curr, next3.negate())) {\n\t\t\t\t\t\tsupport.add(curr.subtract(next3));\n\t\t\t\t\t\tvectors.remove(next3);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next4 != null) {\n\t\t\t\t\tif(ok(curr, next4)) {\n\t\t\t\t\t\tsupport.add(curr.add(next4));\n\t\t\t\t\t\tvectors.remove(next4);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next4 != null) {\n\t\t\t\t\tif(ok(curr, next4.negate())) {\n\t\t\t\t\t\tsupport.add(curr.subtract(next4));\n\t\t\t\t\t\tvectors.remove(next4);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsupport.add(curr);\n\t\t\t}\n\t\t\t\n\t\t\tvectors = support;\n\t\t}\n\t\t\n\t\tif(vectors.size() == 2) {\n\t\t\tVector curr = vectors.pollFirst();\n\t\t\tVector next = vectors.pollFirst();\n\t\t\tVector add = curr.add(next);\n\t\t\tVector sub = curr.subtract(next);\n\t\t\tif(sub.euclideanNorm() <= add.euclideanNorm())\n\t\t\t\tvectors.add(sub);\n\t\t\telse\n\t\t\t\tvectors.add(add);\n\t\t}\n\t\t\n\t\t//System.out.println(vectors.first().euclideanNorm());\n\t\t\n\t\tStringBuilder buffer = new StringBuilder();\n\t\tint[] ans = new int[n];\n\t\tdfs(vectors.pollFirst(), ans);\n\t\tfor(int i = 0; i < n; i ++)\n\t\t\tbuffer.append(ans[i] + \" \");\n\t\tSystem.out.println(buffer);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A4();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String []args){\n       Scanner sc = new Scanner (System.in);\n    long a [] = new long [14];\n    long b [] = new long [14];\n    long p,q,r,s,max = 0;\n    for(int i = 0; i < 14; i++) a[i] = sc.nextInt();\n    for(int i = 0; i < 14; i++){\n      p = a[i]%14;\n      q = a[i]/14;\n      r = 0;\n      s = 0;\n      for(int j = 0; j < 14; j++) b[j] = a[j];\n      b[i] = 0;\n      int j = (i+1)%14;\n      for(; r < p; r++) {\n        b[j]++;\n        j=(j+1)%14;\n      }\n      for( j = 0; j < 14; j++) {\n        b[j] += q;\n        if(b[j] % 2 == 0) s+= b[j];\n      }\n      max = Math.max(max,s);\n    }\n    System.out.println(max);\n\n\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n//        int[] arr = {1, 3, 7, 18};\n//        int bIndex = Arrays.binarySearch(arr, 4);\n//        System.out.println(bIndex);\n\n\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        Map<Integer, Integer> beacons = new TreeMap<>();\n\n        for (int i = 0; i < n; i++) {\n            int index = scan.nextInt();\n            int power = scan.nextInt();\n            beacons.put(index, power);\n        }\n        int[] indicesArr = new int[n];\n        int arrInd = 0;\n        for (int index : beacons.keySet()) {\n            indicesArr[arrInd] = index;\n            arrInd++;\n        }\n       // Integer[] indicesArr = ((Integer[])beacons.keySet().toArray());\n        int[] nDestroys = new int[n];\n        for (int i = 0; i < n; i++) {\n            int bIndex = Arrays.binarySearch(indicesArr, indicesArr[i] - beacons.get(indicesArr[i]));\n            if (bIndex < 0)\n                bIndex = -(bIndex + 1);\n            nDestroys[i] = i - bIndex;\n        }\n        int[] totalBeacons = new int[n];\n        int maxBeacons = 1;\n        totalBeacons[0] = 1;\n        for (int i = 1; i < n; i++) {\n            if (nDestroys[i] == 0)\n                totalBeacons[i] = totalBeacons[i - 1] + 1;\n            else {\n                if ((i - nDestroys[i] - 1) >= 0)\n                    totalBeacons[i] = totalBeacons[i - nDestroys[i] - 1] + 1;\n                else\n                    totalBeacons[i] = 1;\n            }\n               // totalBeacons[i] = totalBeacons[i - nDestroys[i]] + 1;\n            //totalBeacons[i] = i - nDestroys[i] + totalBeacons[i - nDestroys[i]] + 1;\n            if(totalBeacons[i] > maxBeacons)\n                maxBeacons = totalBeacons[i];\n        }\n//        System.out.println(\"\\ntotalBeacons array\");\n//        for (int i = 0; i < n; i++) {\n//            System.out.print(totalBeacons[i] + \" \");\n//        }\n//        if (maxBeacons == -1)\n//            System.out.println(n);\n        System.out.println(n - maxBeacons);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] aa = new int[n];\n\t\tint[] i1 = new int[n];\n\t\tint[] i2 = new int[n];\n\t\tint n1 = 0, n2 = 0, m2 = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\taa[i] = a;\n\t\t\tif (a == 1)\n\t\t\t\ti1[n1++] = i;\n\t\t\telse {\n\t\t\t\ti2[n2++] = i;\n\t\t\t\tm2 += a;\n\t\t\t}\n\t\t}\n\t\tif (m2 < (n2 - 1) * 2 + n1) {\n\t\t\tSystem.out.println(\"NO\");\n\t\t\treturn;\n\t\t}\n\t\tint m = n2 - 1 + n1;\n\t\tint d = n2 - 1 + Math.min(n1, 2);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tpw.println(\"YES \" + d);\n\t\tpw.println(m);\n\t\tfor (int i = 0; i + 1 < n2; i++) {\n\t\t\tpw.println((i2[i] + 1) + \" \" + (i2[i + 1] + 1));\n\t\t\taa[i2[i]]--; aa[i2[i + 1]]--;\n\t\t}\n\t\tif (n1 > 0) {\n\t\t\twhile (n2 > 0 && aa[i2[n2 - 1]] == 0)\n\t\t\t\tn2--;\n\t\t\tpw.println((i2[n2 - 1] + 1) + \" \" + (i1[n1 - 1] + 1));\n\t\t\taa[i2[n2 - 1]]--;\n\t\t\tn1--;\n\t\t}\n\t\tfor (int i = 0, j = 0; j < n1; j++) {\n\t\t\twhile (aa[i2[i]] == 0)\n\t\t\t\ti++;\n\t\t\tpw.println((i2[i] + 1) + \" \" + (i1[j] + 1));\n\t\t\taa[i2[i]]--;\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter printer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tnV = Integer.parseInt(reader.readLine());\n\n\t\tchldn = new ArrayList[nV];\n\t\tfor (int i = 0; i < nV; i++) {\n\t\t\tchldn[i] = new ArrayList<>();\n\t\t}\n\n\t\tanc = new int[nV][21];\n\t\tdepth = new int[nV];\n\n\t\tnum = new int[nV];\n\t\tnLoc = new int[nV];\n\t\ttree = new int[nV * 4][2];\n\t\tfor (int[] a : tree) {\n\t\t\ta[0] = a[1] = -1;\n\t\t}\n\n\t\troot = 0;\n\n\t\tStringTokenizer inputData = new StringTokenizer(reader.readLine());\n\t\tfor (int i = 0; i < nV; i++) {\n\t\t\tnum[i] = Integer.parseInt(inputData.nextToken());\n\t\t\tnLoc[num[i]] = i;\n\t\t}\n\n\t\tinputData = new StringTokenizer(reader.readLine());\n\t\tfor (int i = 1; i < nV; i++) {\n\t\t\tanc[i][0] = Integer.parseInt(inputData.nextToken()) - 1;\n\t\t\tchldn[anc[i][0]].add(i);\n\t\t}\n\n\t\tpreprocess();\n\n\t\tbuild(1, 0, nV - 1);\n\n\t\tint nQ = Integer.parseInt(reader.readLine());\n\n\t\twhile (nQ-- > 0) {\n\t\t\tinputData = new StringTokenizer(reader.readLine());\n\t\t\tif (inputData.nextToken().equals(\"1\")) {\n\t\t\t\tint a = Integer.parseInt(inputData.nextToken()) - 1;\n\t\t\t\tint b = Integer.parseInt(inputData.nextToken()) - 1;\n\n\t\t\t\tint temp = num[a];\n\t\t\t\tnum[a] = num[b];\n\t\t\t\tnum[b] = temp;\n\n\t\t\t\tnLoc[num[a]] = a;\n\t\t\t\tnLoc[num[b]] = b;\n\n\t\t\t\tupdate(1, 0, nV - 1, num[a]);\n\t\t\t\tupdate(1, 0, nV - 1, num[b]);\n\t\t\t} else {\n\t\t\t\tprinter.println(query(1, 0, nV - 1, nLoc[0], nLoc[0]) + 1);\n\t\t\t}\n\t\t}\n\t\tprinter.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i] = in.nextInt();\n\t\t}\n\t\tif (n % 2 == 0) {\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (arr[i] >= 0) {\n\t\t\t\t\tarr[i] = -1*arr[i]-1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint max = Integer.MIN_VALUE;\n\t\t\tint maxIndex = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tint elem = arr[i];\n\t\t\t\tif (elem < 0) {\n\t\t\t\t\telem = -1*elem-1;\n\t\t\t\t}\n\t\t\t\tif (elem > max) {\n\t\t\t\t\tmax = elem;\n\t\t\t\t\tmaxIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (i == maxIndex) {\n\t\t\t\t\tif (arr[i] < 0) {\n\t\t\t\t\t\tarr[i] = -1*arr[i]-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (arr[i] >= 0) {\n\t\t\t\t\t\tarr[i] = -1*arr[i]-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < n ;i++) {\n\t\t\tsb.append(arr[i] + \" \");\n\t\t\t\n\t\t}\n\t\tSystem.out.println(sb);\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n        Scanner sc=new Scanner(System.in);\n         int n=sc.nextInt();\n         int m=sc.nextInt();\n         int x=m%(int)Math.pow(2,n);\n         System.out.println(x);\n\n\n\n}\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new TaskA(),\"TaskA\",1<<26).start();\n    }\n", "complexity": "nlogn"}
{"code": "  public static void main(String[] args) {\n    int n = in.nextInt();\n    int m = in.nextInt();\n    long boyMax = 0;\n    int NBoyMax = 0;\n\n    long sweets = 0;\n    TreeSet<Long> boyMember = new TreeSet<>();\n    for (int i = 0; i < n; i++) {\n      long input = in.nextLong();\n      boyMember.add(input);\n      if (boyMax < input) {\n        boyMax = input;\n        NBoyMax = 1;\n      } else if (boyMax == input) NBoyMax++;\n      sweets += (input * m);\n    }\n\n    long smallestGirl = (long) 1e8 + 1;\n    long sum = 0;\n    for (int i = 0; i < m; i++) {\n      long input = in.nextLong();\n      sum += input;\n      if (smallestGirl > input) smallestGirl = input;\n    }\n\n    if (smallestGirl < boyMember.last()) {\n      out.println(-1);\n    } else if (smallestGirl == boyMember.last()) {\n      sweets += sum - boyMember.last() * m;\n      out.println(sweets);\n    } else {\n\n      if (NBoyMax > 1) {\n        sweets += sum - boyMember.last() * m;\n        out.println(sweets);\n      } else {\n        Object[] boyList = boyMember.toArray();\n        if (boyList.length > 1) {\n          long boy = 0;\n          boy = (long)boyList[boyList.length - 2];\n          sweets += (sum - smallestGirl - boyMember.last() * (m - 1));\n          sweets += (smallestGirl - boy);\n          out.println(sweets);\n        } else {\n          out.println(-1);\n        }\n      }\n    }\n\n    in.close();\n    out.close();\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n= sc.nextInt();\n\t\tint k= sc.nextInt();\n\t\tint a[] = new int[n];\n\t\tint d[] = new int[n-1];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ta[i] = sc.nextInt();\n\t\t\tif(i>0)\n\t\t\t\td[i-1] = a[i-1] - a[i];\n\t\t}\n\t\tArrays.sort(d);\n\t\tint t = 0;\n\t\tfor(int i=0;i<k-1;i++)\n\t\t\tt += d[i];\n\t\tSystem.out.println(a[n-1]-a[0]+t);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        int Q = scanner.nextInt();\n        while(Q-->0) {\n            int N = scanner.nextInt();\n            int K = scanner.nextInt();\n            String s1 = \"RGB\";\n            String s2 = \"GBR\";\n            String s3 = \"BRG\";\n            char[] arr = scanner.next().toCharArray();\n            int[] cnts = new int[3];\n            for(int i = 0; i < K; i++) {\n                int ind = i % 3;\n                if (arr[i] != s1.charAt(ind)) cnts[0]++;\n                if (arr[i] != s2.charAt(ind)) cnts[1]++;\n                if (arr[i] != s3.charAt(ind)) cnts[2]++;\n            }\n            int ans = Math.min(Math.min(cnts[0], cnts[1]), cnts[2]);\n            for(int i = K; i < N; i++) {\n                int ind = (K-1)%3;\n                int[] nextCnts = new int[3];\n                nextCnts[1] = cnts[0];\n                nextCnts[2] = cnts[1];\n                nextCnts[0] = cnts[2];\n                if ('R' != arr[i-K]) nextCnts[1]--;\n                if ('G' != arr[i-K]) nextCnts[2]--;\n                if ('B' != arr[i-K]) nextCnts[0]--;\n                if (arr[i] != s1.charAt(ind)) nextCnts[0]++;\n                if (arr[i] != s2.charAt(ind)) nextCnts[1]++;\n                if (arr[i] != s3.charAt(ind)) nextCnts[2]++;\n                cnts = nextCnts;\n                for(int j = 0; j < 3; j++) ans = Math.min(ans, cnts[j]);\n            }\n            out.println(ans);\n        }\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\t int array[]=new int[n];\n\t\t int max=Integer.MAX_VALUE;\n\t\t int index=0;\n\t\t for(int i=0;i<n;i++)\n\t\t {\n\t\t\t int k=sc.nextInt();\n\t\t\t array[i]=k;\n\t\t\t if(array[i]>=0)\n\t\t\t {\n\t\t\t\t array[i]=-array[i]-1;\n\t\t\t }\n\t\t\t if(array[i]<max)\n\t\t\t {\n\t\t\t\t max=array[i];\n\t\t\t\t index=i;\n\t\t\t\t \n\t\t\t }\n\t\t }\n\t\t if(n%2!=0)\n\t\t {\n\t\t\t array[index]=-array[index]-1;\n\t\t }\n\t\t for(int i=0;i<n;i++)\n\t\t {\n\t\t\t System.out.print(array[i]+\" \" );\n\t\t }\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n=sc.nextInt(),k=sc.nextInt();\n\t\tchar []s=sc.next().toCharArray();\n\t\tif(canWinFromOneMove(s, k)) {\n\t\t\tSystem.out.println(\"tokitsukaze\");\n\t\t\treturn;\n\t\t}\n\t\tint []suff=new int [n+1];\n\t\tsuff[n-1]=1;\n\t\tfor(int i=n-2;i>=0;i--) {\n\t\t\tsuff[i]=1+(s[i+1]==s[i]?suff[i+1]:0);\n\t\t}\n\t\tfor(int i=n-2;i>=0;i--)\n\t\t\tsuff[i]=Math.max(suff[i], suff[i+1]);\n\t\tint max=0,curr=0;\n\t\tboolean draw=false;\n\t\tint ones=0;\n\t\tfor(int i=0;i+k<=n;i++) {\n\t\t\t\n\t\t\t// one\n\t\t\tint prefix=ones==i?k+ones:max;\n\t\t\tint suffix=i+k==n?k:s[i+k]=='1' && suff[i+k]==n-(i+k)?k+suff[i+k]:suff[i+k];\n\t\t\tchar first=i==0?'1':s[0],last=i+k==n?'1':s[n-1];\n\t\t\tboolean zero=first==last && prefix+suffix+k>=n || Math.max(prefix, suffix)+k>=n;\n\t\t\t// zero\n\t\t\t prefix=ones==0?k+ones:max;\n\t\t\t suffix=i+k==n?k:s[i+k]=='0' && suff[i+k]==n-(i+k)?k+suff[i+k]:suff[i+k];\n\t\t\t first=i==0?'0':s[0];\n\t\t\t last=i+k==n?'0':s[n-1];\n\t\t\tboolean one=first==last && prefix+suffix+k>=n || Math.max(prefix, suffix)+k>=n;\n\t\t\tif(!zero || !one) {\n//\t\t\t\tSystem.err.println(i+1);\n\t\t\t\tdraw=true;\n\t\t\t}\n\t\t\tif(s[i]=='1')\n\t\t\t\tones++;\n\t\t\tif(i>0 && s[i]==s[i-1] )\n\t\t\t\tcurr++;\n\t\t\telse\n\t\t\t\tcurr=1;\n\t\t\tmax=Math.max(max, curr);\n\t\t}\n\t\tout.println(draw?\"once again\":\"quailty\");\n\t\tout.close();\n\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tint n = in.nextInt(), m = in.nextInt();\n\t\tlong bounty = in.nextInt(), increase = in.nextInt();\n\t\tint damage = in.nextInt();\n\t\tint[] mh = new int[n];\n\t\tint[] sh = new int[n];\n\t\tint[] reg = new int[n];\n\t\tlong countKilled = 0;\n\t\tArrayList<Event> es = new ArrayList<>();\n\t\tEvent[] regen = new Event[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tmh[i] = in.nextInt();\n\t\t\tsh[i] = in.nextInt();\n\t\t\treg[i] = in.nextInt();\n\t\t\tif(sh[i] <= damage)\n\t\t\t\tcountKilled++;\n\t\t\tif(reg[i] > 0) {\n\t\t\t\tint time = (damage+1 - sh[i]+reg[i]-1)/reg[i];\n\t\t\t\tif(time > 0 && mh[i] >= damage+1) {\n\t\t\t\t\tEvent e2 = new Event(time, i, damage+1);\n\t\t\t\t\tregen[i] = e2;\n\t\t\t\t\tes.add(e2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<m;i++) {\n\t\t\tEvent e = new Event(in.nextInt(), in.nextInt()-1, in.nextInt());\n\t\t\tes.add(e);\n\t\t\tif(reg[e.e] > 0) {\n\t\t\t\tint time = (damage+1 - e.h+reg[e.e]-1)/reg[e.e];\n\t\t\t\tif(time > 0 && mh[e.e] >= damage+1) {\n\t\t\t\t\tEvent e2 = new Event(e.t + time, e.e, damage+1);\n\t\t\t\t\te.regen = e2;\n\t\t\t\t\tes.add(e2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCollections.sort(es, (a,b) -> a.t-b.t);\n\t\tlong ans = countKilled*bounty;\n\t\tint lastTime = 0;\n\t\tfor(Event e : es) {\n\t\t\tif(e.t == -1) continue;\n\t\t\tif(regen[e.e] != e && regen[e.e] != null) {\n\t\t\t\tregen[e.e].t = -1;\n\t\t\t\tregen[e.e] = null;\n\t\t\t}\n\t\t\tif(lastTime != e.t) {\n\t\t\t\tans = Math.max(ans, countKilled*(bounty+(e.t-1)*increase));\n\t\t\t}\n\t\t\tif(sh[e.e] <= damage)\n\t\t\t\tcountKilled--;\n\t\t\tsh[e.e] = e.h;\n\t\t\tif(sh[e.e] <= damage)\n\t\t\t\tcountKilled++;\n\t\t\tif(e.regen != null) {\n\t\t\t\tregen[e.e] = e.regen;\n\t\t\t}\n\t\t\tlastTime = e.t;\n\t\t}\n\t\tif(countKilled != 0) {\n\t\t\tif(increase > 0)\n\t\t\t\tans = -1;\n\t\t\telse\n\t\t\t\tans = Math.max(ans, countKilled*bounty);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Reader read = new Reader();\n\n        int n = read.nextInt();\n        int a1 = read.nextInt();\n        int a2 = read.nextInt();\n        int b1 = read.nextInt();\n        int b2 = read.nextInt();\n        int c1 = read.nextInt();\n        int c2 = read.nextInt();\n\n        if (b1 > a1 && b2 > a2 && c1 > a1 && c2 > a2)\n            System.out.print(\"YES\");\n        else if (b1 > a1 && b2 < a2 && c1 > a1 && c2 < a2)\n            System.out.print(\"YES\");\n        else if (b1 < a1 && b2 > a2 && c1 < a1 && c2 > a2)\n            System.out.print(\"YES\");\n        else if (b1 < a1 && b2 < a2 && c1 < a1 && c2 < a2)\n            System.out.print(\"YES\");\n        else\n            System.out.print(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ReaderFastIO in = new ReaderFastIO(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DConcatenatedMultiples solver = new DConcatenatedMultiples();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint n = nextInt();\n\t\tint[] a = intArray(n);\n\t\t\n\t\tlong s = 0;\n\t\tfor (int x : a)\n\t\t\ts += x;\n\t\t\n\t\tlong m = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tm += a[i];\n\t\t\tif (m*2 >= s) {\n\t\t\t\tSystem.out.println(i+1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\n\t\tint[] code = new int[scanner.nextInt()];\n\t\tint[] prints = new int[scanner.nextInt()];\n\n\t\tfor (int i = 0; i < code.length; i++) {\n\t\t\tcode[i] = scanner.nextInt();\n\t\t}\n\t\tfor (int i = 0; i < prints.length; i++) {\n\t\t\tprints[i] = scanner.nextInt();\n\t\t}\n\t\tfor (int i = 0; i < code.length; i++) {\n\t\t\tfor (int j = 0; j < prints.length; j++) {\n\t\t\t\tif (code[i] == prints[j]) {\n\t\t\t\t\tSystem.out.print(prints[j] + \" \");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tscanner.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFA();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) \n        InputReader sc=new InputReader(System.in);\n        int n=sc.nextInt();\n        int s=sc.nextInt();\n        card c[]=new card[n];\n        for(int i=0;i<n;i++)\n        {\n            int x=sc.nextInt();\n            int y=sc.nextInt();\n            c[i]=new card(x,y);\n        }\n        Arrays.sort(c,new sort());\n        int time=0;\n        for(int i=n-1;i>=0;i--)\n        {\n            time+=s-c[i].l;\n            if((c[i].r-time)>0)\n            time+=c[i].r-time;\n            s=c[i].l;\n        }\n        if(c[0].l!=0)\n        time+=c[0].l;\n        System.out.println(time);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) throws IOException {\n        if (args.length > 0) {\n            setIn(new FileInputStream(args[0] + \".inp\"));\n            setOut(new PrintStream(args[0] + \".out\"));\n        }\n        Main solver = new Main();\n        solver.out.flush();  //  could be replace with a method, but nah, this is just competitive programming :p\n    }\n", "complexity": "linear"}
{"code": "    public static void main( String[] args ) {\n\tScanner in = new Scanner( System.in );\n\tint n = in.nextInt();\n\tString st = in.next();\n\tint[] a = new int[n];\n\tfor ( int i = 0; i < n; i++ )\n\t    a[i] = st.charAt( i ) - 48;\n\tboolean c = false;\n\tfor ( int i = 1; !c && i < n; i++ ) {\n\t    int s = 0;\n\t    for ( int j = 0; j < i; j++ )\n\t\ts += a[j];\n\t    int t = 0;\n\t    for ( int j = i; j < n; j++ ) {\n\t\tt += a[j];\n\t\tif ( t > s )\n\t\t    if ( t - a[j] != s )\n\t\t\tbreak;\n\t\t    else\n\t\t\tt = a[j];\n\t    }\n\t    if ( t == s )\n\t\tc = true;\n\t}\n\tSystem.out.println( c ? \"YES\" : \"NO\" );\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new LogicalExpression().solve();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)throws IOException\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tint n = Integer.parseInt(br.readLine());\n\t\t\n\t\tint arr[] = new int [n];\n\t\t\n\t\tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\n\t\tfor(int i = 0 ; i < n ; i++)\n\t\t{\n\t\t\tarr[i] = Integer.parseInt(st1.nextToken());\n\t\t}\n\t\t\n\t\tint max = -1;\n\t\tboolean flag = true;\n\t\t\n\t\tfor(int i = 0 ; i < n ; i++)\n\t\t{\n\t\t\tif(arr[i] > max+1)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tout.println(i+1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax = Math.max(max, arr[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(flag)\n\t\t\tout.println(-1);\n\t\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n        long n = Long.parseLong(st.nextToken()) , m = Long.parseLong(st.nextToken());\n        \n        long sum = 0;\n        \n        for(int i=0;i<m;i++){\n        \tStringTokenizer st1 = new StringTokenizer(br.readLine());\n            sum+= n* Long.parseLong(st1.nextToken());\n            Long a= Long.parseLong(st1.nextToken());\n            if(a < 0){\n                if(n % 2 == 0)\n                    sum += n*n / 4*a;\n                else{\n                    sum += (n/2) * (n/2+1) * a;\n                }\n            }\n            else\n                sum += (a*(n) * (n-1) / 2);\n            \n        }\n        System.out.println((double)sum/n);\n\t}\n", "complexity": "linear"}
{"code": "\t\t\tpublic static void main(String[] args)\n\t\t\t\tInputReader in = new InputReader(System.in);\n\t\t\t\tPrintWriter pw = new PrintWriter(System.out);\n\n\t\t\t\tint n = in.nextInt();\n\t\t\t\tlong U = in.nextLong();\n\t\t\t\tlong[] E = new long[n];\n\t\t\t\tdouble max = -1;\n\t\t\t\t\n\t\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\t\tE[i] = in.nextLong();\n\t\t\t\t\n\t\t\t\tfor(int k=1;k<n-1;k++)\n\t\t\t\t{\n\t\t\t\t\tint i = k + 1, j = n - 1, mid = 0;\n\t\t\t\t\tdouble T = 0;\n\t\t\t\t\t\n\t\t\t\t\twhile(i < j)\n\t\t\t\t\t{\n\t\t\t\t\t\tmid = (int)Math.ceil((double)(i+j)/2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(E[mid] - E[k-1] <= U)\n\t\t\t\t\t\t\ti = mid;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tj = mid - 1;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tj = k;\n\t\t\t\t\tk = i;\n\t\t\t\t\ti = j - 1;\n\t\t\t\t\t\n\t\t\t\t\tT = E[k] - E[j];\n\t\t\t\t\tT /= E[k] - E[i];\n\t\t\t\t\t\n\t\t\t\t\tif(E[k] - E[i] <= U)\n\t\t\t\t\t\tmax = Math.max(max, T);\n\t\t\t\t\t\n\t\t\t\t\tk = j;\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t\tpw.println(max);\n\t\t\t\t\n\t\t\t\tpw.flush();\n\t\t\t\tpw.close();\n\t\t\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) \n        FastReader sc=new FastReader();\n\t\tint n=sc.nextInt();\n\t\tPair arr[]=new Pair[n];\n\t\tPair pref[]=new Pair[n];\n\t\tPair suff[]=new Pair[n];\n\t\tfor( int i=0;i<n;i++)\n\t\t{\n\t\t\tlong u=sc.nextLong();\n\t\t\tlong v=sc.nextLong();\n\t\t\tarr[i]=new Pair(u,v);\n\t\t\tpref[i]=new Pair(0,0);\n\t\t\tsuff[i]=new Pair(0,0);\n\t\t}\n\t\tpref[0].x=arr[0].x;\n\t\tpref[0].y=arr[0].y;\n\t\tfor( int i=1;i<n;i++)\n\t\t{\n\t\t\tpref[i].x=(long)Math.max(pref[i-1].x,arr[i].x);\n\t\t\tpref[i].y=(long)Math.min(pref[i-1].y,arr[i].y);\n\t\t}\n\t\tsuff[n-1].x=arr[n-1].x;\n\t\tsuff[n-1].y=arr[n-1].y;\n\t\tfor( int i=n-2;i>=0;i--)\n\t\t{\n\t\t\tsuff[i].x=(long)Math.max(suff[i+1].x,arr[i].x);\n\t\t\tsuff[i].y=(long)Math.min(suff[i+1].y,arr[i].y);\n\t\t}\n\t\tlong max=Long.MIN_VALUE;\n\t\tlong ans=0;\n\t\t\n\t\tfor( int i=0;i<n;i++)\n\t\t{\n\t\t\tlong val=Long.MAX_VALUE;\n\t\t\tlong val1=Long.MAX_VALUE;\n\t\t\t\n\t\t\tif(i!=0&&i!=n-1)\n\t\t\t{\n\t\t\t\t val=(long)Math.min(pref[i-1].y,suff[i+1].y)-(long)Math.max(pref[i-1].x,suff[i+1].x);\n\t\t\t\t \n\t\t\t}\n\t\t\telse if(i!=n-1)\n\t\t\t{\n\t\t\t\tval=suff[i+1].y-suff[i+1].x;\n\t\t\t}\n\t\t\telse\n\t\t\t\tval=pref[i-1].y-pref[i-1].x;\n\t\t\t\n\t\t\tans=val;\n\t\t\tif(ans<0)\n\t\t\t\tans=0;\n\t\t\tmax=(long)Math.max(ans,max);\n\t\t}\n\t\tSystem.out.println(max);\n     \n       \n\t\t\n\t\t\n\t\t\n    } \n", "complexity": "linear"}
{"code": "    public static void main( String[] args ) {\n        Scanner in = new Scanner( System.in );\n\tint a = 0, b = 0;\n\tSystem.out.println( \"? 0 0 \" );\n\tSystem.out.flush();\n\tint c = in.nextInt();\n\tfor ( int i = 29; i >= 0; i-- ) {\n\t    System.out.println( \"? \" + ( a + ( 1 << i ) ) + \" \" + b );\n\t    System.out.flush();\n\t    int q1 = in.nextInt();\n\t    System.out.println( \"? \" + a + \" \" + ( b + ( 1 << i ) ) );\n\t    System.out.flush();\n\t    int q2 = in.nextInt();\n\t    if ( q1 == q2 ) {\n\t\tif ( c == 1 )\n\t\t    a += ( 1 << i );\n\t\telse if ( c == -1 )\n\t\t    b += ( 1 << i );\n\t\tc = q1;\n\t    }\n\t    else if ( q1 == -1 ) {\n\t\ta += ( 1 << i );\n\t\tb += ( 1 << i );\n\t    }\n\t    else if ( q1 == -2 )\n\t\treturn;\n\t}\n\tSystem.out.println( \"! \" + a + \" \" + b );\n\tSystem.out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter out = new PrintWriter(System.out);\n        //Scanner sc = new Scanner();\n        Reader in = new Reader();\n        Main solver = new Main();\n        solver.solve(out, in);\n        out.flush();\n        out.close();\n \n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tint x=Integer.parseInt(br.readLine());\n\t\tint y=Integer.parseInt(br.readLine());\n\t\tSystem.out.print((int)(y%(Math.pow(2, x))));\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine());\n        StringTokenizer st;\n        for(int z=0;z<t;z++){\n            st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            st = new StringTokenizer(br.readLine());\n            int min=1;\n            int max=1;\n            for(int i=0;i<n;i++){\n                int k = Integer.parseInt(st.nextToken());\n                if(max<k){\n                    min = max;\n                    max = k;\n                }else if(min<k){\n                    min = k;\n                }\n            }\n            int res = Math.min(n-2,min-1);\n            System.out.println(res);\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\taa = new ArrayList[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\taa[i] = new ArrayList<Integer>();\n\t\twhile (m-- > 0) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint i = Integer.parseInt(st.nextToken()) - 1;\n\t\t\tint j = Integer.parseInt(st.nextToken()) - 1;\n\t\t\taa[i].add(j);\n\t\t}\n\t\tvisited = new boolean[n];\n\t\tinstack = new boolean[n];\n\t\tstack = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tif (dfs1(i))\n\t\t\t\tbreak;\n\t\tif (cnt == 0) {\n\t\t\tSystem.out.println(\"YES\");\n\t\t\treturn;\n\t\t}\n\t\tfor (j_ = h_, i_ = stack[--cnt]; ; j_ = i_, i_ = stack[--cnt]) {\n\t\t\tArrays.fill(visited, false);\n\t\t\tArrays.fill(instack, false);\n\t\t\tboolean cycle = false;\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tif (dfs2(i)) {\n\t\t\t\t\tcycle = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (!cycle) {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (i_ == h_)\n\t\t\t\tbreak;\n\t\t}\n\t\tSystem.out.println(\"NO\");\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tint m = s.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i] = s.nextInt();\n\t\t}\n\t\tSystem.out.println(func(n, m, arr)-func(n, m+1, arr));\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n        solve(in, out);\n        in.close();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint a1 = Integer.parseInt(st.nextToken());\n\t\tint a2 = Integer.parseInt(st.nextToken());\n\t\tint a3 = Integer.parseInt(st.nextToken());\n\t\tint a4 = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[10];\n\t\taa[0] = aa[1] = aa[2] = aa[3] = a1;\n\t\taa[4] = aa[5] = aa[6] = a2;\n\t\taa[7] = aa[8] = a3;\n\t\taa[9] = a4;\n\t\tint[][] ww = new int[10][4];\n\t\tww[0][0] = 1;\n\t\tww[1][1] = 1;\n\t\tww[2][2] = 1;\n\t\tww[3][3] = 1;\n\t\tww[4][0] = ww[4][1] = 2;\n\t\tww[5][1] = ww[5][2] = 2;\n\t\tww[6][2] = ww[6][3] = 2;\n\t\tww[7][0] = ww[7][1] = ww[7][2] = 3;\n\t\tww[8][1] = ww[8][2] = ww[8][3] = 3;\n\t\tww[9][0] = ww[9][1] = ww[9][2] = ww[9][3] = 4;\n\t\tchar[][] cc = new char[4][n + 8];\n\t\tfor (int k = 0; k < 4; k++) {\n\t\t\tchar[] c_ = cc[k];\n\t\t\tbr.readLine().getChars(0, n, c_, 4);\n\t\t\tc_[0] = c_[1] = c_[2] = c_[3]\n\t\t\t\t= c_[n + 4] = c_[n + 5] = c_[n + 6] = c_[n + 7] = '.';\n\t\t}\n\t\tint[][][][] dp = new int[5][5][5][5];\n\t\tint[][][][] dq = new int[5][5][5][5];\n\t\tfill(dp, INF);\n\t\tdp[4][4][4][4] = 0;\n\t\tint[] hh = new int[4];\n\t\tfor (int i = 0; i < n + 4; i++) {\n\t\t\tfor (int h0 = 0; h0 <= 4; h0++)\n\t\t\t\tfor (int h1 = 0; h1 <= 4; h1++)\n\t\t\t\t\tfor (int h2 = 0; h2 <= 4; h2++)\n\t\t\t\t\t\tfor (int h3 = 0; h3 <= 4; h3++)\n\t\t\t\t\t\t\tfor (int s = 0; s < 10; s++) {\n\t\t\t\t\t\t\t\thh[0] = h0;\n\t\t\t\t\t\t\t\thh[1] = h1;\n\t\t\t\t\t\t\t\thh[2] = h2;\n\t\t\t\t\t\t\t\thh[3] = h3;\n\t\t\t\t\t\t\t\tfor (int k = 0; k < 4; k++) {\n\t\t\t\t\t\t\t\t\tint h = ww[s][k];\n\t\t\t\t\t\t\t\t\tif (hh[k] < h) {\n\t\t\t\t\t\t\t\t\t\twhile (h < 4 && cc[k][i + h] == '.')\n\t\t\t\t\t\t\t\t\t\t\th++;\n\t\t\t\t\t\t\t\t\t\thh[k] = h;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tint x = dp[h0][h1][h2][h3] + aa[s];\n\t\t\t\t\t\t\t\tif (dp[hh[0]][hh[1]][hh[2]][hh[3]] > x)\n\t\t\t\t\t\t\t\t\tdp[hh[0]][hh[1]][hh[2]][hh[3]] = x;\n\t\t\t\t\t\t\t}\n\t\t\tfill(dq, INF);\n\t\t\tfor (int h0 = 1; h0 <= 4; h0++) {\n\t\t\t\thh[0] = h0 < 4 || cc[0][i + 4] == '*' ? h0 - 1 : 4;\n\t\t\t\tfor (int h1 = 1; h1 <= 4; h1++) {\n\t\t\t\t\thh[1] = h1 < 4 || cc[1][i + 4] == '*' ? h1 - 1 : 4;\n\t\t\t\t\tfor (int h2 = 1; h2 <= 4; h2++) {\n\t\t\t\t\t\thh[2] = h2 < 4 || cc[2][i + 4] == '*' ? h2 - 1 : 4;\n\t\t\t\t\t\tfor (int h3 = 1; h3 <= 4; h3++) {\n\t\t\t\t\t\t\thh[3] = h3 < 4 || cc[3][i + 4] == '*' ? h3 - 1 : 4;\n\t\t\t\t\t\t\tint x = dp[h0][h1][h2][h3];\n\t\t\t\t\t\t\tif (dq[hh[0]][hh[1]][hh[2]][hh[3]] > x)\n\t\t\t\t\t\t\t\tdq[hh[0]][hh[1]][hh[2]][hh[3]] = x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[][][][] tmp = dp; dp = dq; dq = tmp;\n\t\t}\n\t\tSystem.out.println(dp[4][4][4][4]);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader lector = new BufferedReader(new InputStreamReader(System.in));\n\t\tint planet = Integer.parseInt(lector.readLine());\n\t\tint ini = Integer.parseInt(lector.readLine());\n\t\tdouble peso = ini;\n\t\tint[] desp = new int[planet];\n\t\tint[] ater = new int[planet];\n\t\tString[] temp = lector.readLine().split(\" \");\t\t\n\t\tfor(int i=0; i<planet; i++) {\n\t\t\tdesp[i] = Integer.parseInt(temp[i]);\n\t\t\tif(desp[i] == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\tlector.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttemp = lector.readLine().split(\" \");\t\t\n\t\tfor(int i=0; i<planet; i++) {\n\t\t\tater[i] = Integer.parseInt(temp[i]);\n\t\t\tif(ater[i] == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\tlector.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttemp = null;\n\t\tint i=planet-1;\n\t\tpeso = (peso*ater[0])/(ater[0]-1);\n\t\twhile(i>0) {\n\t\t\tpeso = (peso*desp[i])/(desp[i]-1);\n\t\t\tpeso = (peso*ater[i])/(ater[i]-1);\n\t\t\ti--;\n\t\t}\n\t\tpeso = (peso*desp[0])/(desp[0]-1);\n\t\tpeso = peso - ini;\n\t\tSystem.out.println(peso);\n\t\tlector.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskG solver = new TaskG();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)throws IOException\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();int sum=1;\n        for(int i=1;i<=n;i++)\n        {\n            sum=sum+(4*(i-1));\n        }\n        System.out.println(sum);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new TaskB(),\"TaskB\",1<<26).start();\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) throws IOException {\n\t Scanner sc = new Scanner(System.in);\n\t\n\t //rec\n\t int xr1=sc.nextInt(), yr1=sc.nextInt(), xr2=sc.nextInt(),yr2=sc.nextInt();\n\t int xr3=sc.nextInt(), yr3=sc.nextInt(), xr4=sc.nextInt(),yr4=sc.nextInt();\n\t\n\t Point pr1 = new Point(xr1, yr1);\n\t Point pr2 = new Point(xr2, yr2);\n\t Point pr3 = new Point(xr3, yr3);\n\t Point pr4 = new Point(xr4, yr4);\n\t \n\t LineSegment lr1 = new LineSegment(pr1, pr2);\n\t LineSegment lr2 = new LineSegment(pr2, pr3);\n\t LineSegment lr3 = new LineSegment(pr3, pr4);\n\t LineSegment lr4 = new LineSegment(pr4, pr1);\n\t \n\t //diamond\n\t int xd1=sc.nextInt(), yd1=sc.nextInt(), xd2=sc.nextInt(),yd2=sc.nextInt();\n\t int xd3=sc.nextInt(), yd3=sc.nextInt(), xd4=sc.nextInt(),yd4=sc.nextInt();\n\t \n\t Point p1 = new Point(xd1, yd1);\n\t Point p2 = new Point(xd2, yd2);\n\t Point p3 = new Point(xd3, yd3);\n\t Point p4 = new Point(xd4, yd4);\n\t \n\t Point [] pt = new Point [5];\n\t pt[0]=p1;  pt[1]=p2;  pt[2]=p3;  pt[3]=p4;  pt[4]=p1;\n\t Polygon pg = new Polygon(pt);\n\t \n\t if(pg.inside(pr1)||pg.inside(pr2)||pg.inside(pr3)||pg.inside(pr4)) {\n\t\t System.out.println(\"YES\");\n\t\t return;\n\t }\n\t\n\t \n\t LineSegment ld1 = new LineSegment(p1, p2);\n\t LineSegment ld2 = new LineSegment(p2, p3);\n\t LineSegment ld3 = new LineSegment(p3, p4);\n\t LineSegment ld4 = new LineSegment(p4, p1);\n\t \n\t Rectangle rec = new Rectangle(new Point(Math.min(Math.min(xr3,xr4),Math.min(xr1,xr2)), Math.min(Math.min(yr3,yr4),Math.min(yr1,yr2))), \n\t\t\t new Point(Math.max(Math.max(xr3,xr4),Math.max(xr1,xr2)), Math.max(Math.max(yr3,yr4),Math.max(yr1,yr2))) );\n\t \n\t if(rec.contains(p1)||rec.contains(p2)||rec.contains(p3)||rec.contains(p4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t if(ld1.intersect(lr1)||ld1.intersect(lr3)||ld1.intersect(lr3)||ld1.intersect(lr4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t if(ld2.intersect(lr1)||ld2.intersect(lr3)||ld2.intersect(lr3)||ld2.intersect(lr4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t if(ld3.intersect(lr1)||ld3.intersect(lr3)||ld3.intersect(lr3)||ld3.intersect(lr4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t if(ld4.intersect(lr1)||ld4.intersect(lr3)||ld4.intersect(lr3)||ld4.intersect(lr4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t System.out.println(\"NO\");\n\t \n\t \n\t \n\t \n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        \n        int query = in.nextInt();\n        \n        while (query -- > 0) {\n            int n = in.nextInt();\n            int k = in.nextInt();\n            \n            char[] arr = new char[n];\n            //slot all n into char array\n            String code = in.next();\n            for (int i = 0; i < n; i++) {\n                arr[i] = code.charAt(i);\n                \n            }\n            \n            //R, G, B cycle\n            int r = 0;\n            int g = 0;\n            int b = 0;\n            \n            for (int i = 0; i < k; i++) {\n                if (i % 3 == 0) {\n                    if (arr[i] == 'R') {g++; b++;}\n                    else if (arr[i] == 'G') {r++; b++;}\n                    else {r++; g++;} //if is 'B'\n                } else if (i % 3 == 1) {\n                    if (arr[i] == 'G') {g++; b++;}\n                    else if (arr[i] == 'B') {r++; b++;}\n                    else {r++; g++;} //if is 'R'\n                } else { //if mod 3 is 2\n                    if (arr[i] == 'B') {g++; b++;}\n                    else if (arr[i] == 'R') {r++; b++;}\n                    else {r++; g++;} //if is 'G'     \n                }\n            }\n            \n            //starting from kth position, if different then add 1, and check (j-k)th position\n            int rMin = r;\n            int gMin = g;\n            int bMin = b;\n            for (int j = k; j < n; j++) {\n                //R cycle\n                if ((j % 3 == 0 && arr[j] != 'R') ||  \n                    (j % 3 == 1 && arr[j] != 'G') ||\n                    (j % 3 == 2 && arr[j] != 'B')) {\n                    r++;\n                }\n                //R cycle \n                if (((j - k) % 3 == 0 && arr[j - k] != 'R') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'G') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'B')) {\n                    r--;\n                }\n                rMin = Math.min(r, rMin);\n                //G cycle\n                if ((j % 3 == 0 && arr[j] != 'G') ||  \n                    (j % 3 == 1 && arr[j] != 'B') ||\n                    (j % 3 == 2 && arr[j] != 'R')) {\n                    g++;\n                } \n                if (((j - k) % 3 == 0 && arr[j - k] != 'G') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'B') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'R')) {\n                    g--;\n                }      \n                gMin = Math.min(gMin, g);\n                //B cycle\n                if ((j % 3 == 0 && arr[j] != 'B') ||  \n                    (j % 3 == 1 && arr[j] != 'R') ||\n                    (j % 3 == 2 && arr[j] != 'G')) {\n                    b++;\n                }       \n                if (((j - k) % 3 == 0 && arr[j - k] != 'B') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'R') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'G')) {\n                    b--;\n                } \n                bMin = Math.min(bMin, b);\n                \n            }\n            \n            System.out.println(Math.min(Math.min(rMin, gMin), bMin));\n            \n        }\n        \n    } \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\n\t\tint n=Integer.parseInt(st.nextToken());\n\t\tint m=Integer.parseInt(st.nextToken());\n\t\tString a=\"\";\n\t\tString b=\"\";\n\t\tfor(int i=0;i<1129;i++) {\n\t\t\ta+=\"1\";\n\t\t\tb+=\"8\";\n\t\t}\n\t\ta+=\"9\";\n\t\tb+=\"1\";\n\t\t\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t}\n", "complexity": "constant"}
{"code": "        public static void main(String[] args) throws Exception {\n            BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n            PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n            int n = Integer.parseInt(bf.readLine());\n            StringTokenizer st = new StringTokenizer(bf.readLine());\n            Integer[] a = new Integer[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n            Arrays.sort(a);\n            int[] b = new int[n];\n            for(int i=0; i<n; i++) b[i] = a[i].intValue();\n            boolean diff = false;\n            boolean diff2 = false;\n            Set<Integer> vals = new HashSet<Integer>();\n            vals.add(b[0]);\n            int valval = 0;\n            for(int i=1; i<n; i++) {\n                vals.add(b[i]);\n                if(b[i] == b[i-1]) {\n                    if(!diff) {\n                        diff = true;\n                        valval = b[i];\n                    }\n                    else diff2 = true;\n                }\n            } \n            long sum = 0;\n            for(int i : b) sum += i;\n            sum -= 1L*n*(n-1)/2;\n\n            if(diff && !diff2) {\n                if(!vals.contains((valval-1)) && (valval > 0)) {\n                    if(sum%2 == 0) out.println(\"cslnb\"); else out.println(\"sjfnb\");\n                }\n                else out.println(\"cslnb\");\n            }\n            else if(diff2) out.println(\"cslnb\");\n            else if(sum%2 == 0) out.println(\"cslnb\"); else out.println(\"sjfnb\");\n            // int n = Integer.parseInt(st.nextToken());\n     \n            \n            out.close(); System.exit(0);\n        }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n=enter.nextInt();\n        int m=enter.nextInt();\n        long k=enter.nextLong();\n        arr=new long[n+1];\n        for (int i = 1; i <n+1 ; i++) {\n            arr[i]=enter.nextLong();\n        }\n        long[] summ=new long[n+1];\n        for (int i = 1; i <n+1 ; i++) {\n            summ[i]+=arr[i]+summ[i-1];\n        }\n\n        long[] best=new long[n+1];\n\n        for (int i = 1; i <n+1 ; i++) {\n            best[i]=Math.max(0, ((i-m>=0) ? best[i-m]+summ[i]-summ[i-m]-k:0));\n        }\n        long ans=best[1];\n\n        for (int i = 1; i <n+1 ; i++) {\n            ans=Math.max(ans,best[i]);\n            for (int j = 1; j <m ; j++) {\n                ans=Math.max(ans, ((i-j>=0) ? best[i-j] -k +summ[i]-summ[i-j]:0));\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[] ) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        long x = sc.nextLong();\n        long k = sc.nextLong();\n        if(x>0) {\n            long d= powmod(2,k,m);\n            long ans= mulmod(d,2,m)%m;\n            ans= mulmod(ans,x,m)%m;\n            ans++;\n            ans%=m;\n            ans= (ans-d+m)%m;\n            System.out.println(ans);\n        }\n        else\n            System.out.println(0);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] args) throws IOException, InterruptedException {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint x=sc.nextInt();\n\t\tint y=sc.nextInt();\n\t\tpair [] arr=new pair[x];\n\t\tfor(int i=0;i<x;i++) arr[i]=new pair(i, sc.nextInt(),0);\n\t\tfor(int i=0;i<x;i++) arr[i].y=sc.nextInt();\n\t\tArrays.sort(arr);\n\t\tPriorityQueue<Integer> qq=new PriorityQueue<>();\n\t\t//pw.println(Arrays.toString(arr));\n\t\tLong [] list=new Long [x];\n\t\tlong sum=0; \n\t\tfor(int i=0;i<x;i++) {\n\t\t\tpair w=arr[i];\n\t\t\tif(qq.size()<y) {\n\t\t\t\tqq.add(w.y);\n\t\t\t\tsum+=w.y;\n\t\t\t\tlist[w.i]=sum;\n\n\t\t\t}else if(!qq.isEmpty()) {\n\t\t\t\tsum+=w.y;\n\t\t\t\tlist[w.i]=sum;\n\t\t\t\tint first=qq.poll();\n\t\t\t\tif(w.y>first) {\n\t\t\t\t\tsum-=first;\n\t\t\t\t\tqq.add(w.y);\n\t\t\t\t}else {\n\t\t\t\t\tqq.add(first);\n\t\t\t\t\tsum-=w.y;\n\t\t\t\t}\n\t\t\t} else list[w.i]=(long) w.y;\n\t\t\t//pw.println(qq);\n\t\t}\n\t\tfor(Long w:list) pw.print(w+\" \"); \n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint a = input.nextInt();\n\t\tint b = input.nextInt();\n\t\tinput.close();\n\t\tfinal int mod = 998244353;\n\t\t\n\t\tint frac = multiply(a, inverse(b, mod), mod);\n\t\tint reverse = (mod+1-frac)%mod;\n\t\t\n\t\tint[] fracpower = new int[n+1];\n\t\tint[] reversepower = new int[n+1];\n\t\tfracpower[0] = 1;\n\t\treversepower[0] = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfracpower[i] = multiply(fracpower[i-1], frac, mod);\n\t\t\treversepower[i] = multiply(reversepower[i-1], reverse, mod);\n\t\t}\n\t\t\n\t\tint[][] dp1 = new int[n+1][n+1];\n\t\tdp1[2][1] = 1;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tif (j == 1) {\n\t\t\t\t\tdp1[i][j] = fracpower[i-1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp1[i][j] = multiply(dp1[i-1][j-1], fracpower[i-j], mod);\n\t\t\t\t}\n\t\t\t\tif (j == i-1) {\n\t\t\t\t\tdp1[i][j] += reversepower[i-1];\n\t\t\t\t\tdp1[i][j] %= mod;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp1[i][j] += multiply(dp1[i-1][j], reversepower[j], mod);\n\t\t\t\t\tdp1[i][j] %= mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[][] dp2 = new int[n+1][n+1];\n\t\tdp2[1][1] = 1;\n\t\tdp2[2][1] = 1;\n\t\tdp2[2][2] = 0;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tint val = 0;\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tdp2[i][j] = multiply(dp2[j][j], dp1[i][j], mod);\n\t\t\t\tval += dp2[i][j];\n\t\t\t\tval %= mod;\n\t\t\t}\n\t\t\tdp2[i][i] = (mod+1-val)%mod;\n\t\t}\n\t\t\n\t\t/*for (int i = 2; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tSystem.out.print(dp2[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}*/\n\t\t\n\t\tint[] EV = new int[n+1];\n\t\tEV[1] = 0;\n\t\tEV[2] = 1;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tint val = 0;\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tint r = j*(i-j) + (j*(j-1))/2 + EV[i-j] + EV[j];\n\t\t\t\tr %= mod;\n\t\t\t\tval += multiply(dp2[i][j], r, mod);\n\t\t\t\tval %= mod;\n\t\t\t}\n\t\t\tval += multiply((i*(i-1))/2, dp2[i][i], mod);\n\t\t\tval %= mod;\n\t\t\t\n\t\t\tint s = (mod+1-dp2[i][i])%mod;\n\t\t\tEV[i] = multiply(val, inverse(s, mod), mod);\n\t\t}\n\t\t\n\t\tSystem.out.println(EV[n]);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n\n        new Main().go();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int[] a = new int[n];\n        for(int i=0;i<n;i++) a[i] = Integer.parseInt(st.nextToken());\n        int ind = 0;\n        for(int i=0;i<n;i++){\n            if(a[i]==n){\n                ind = i;\n                break;\n            }\n        }\n        boolean ok = true;\n        for(int i=ind+1;i<n;i++) if(a[i]>a[i-1]) ok = false;\n        for(int i=ind-1;i>=0;i--) if(a[i]>a[i+1]) ok = false;\n        if(ok) System.out.println(\"YES\");\n        else System.out.println(\"NO\");\n        \n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n      FastReader sc = new FastReader();\n      int x= sc.nextInt();\n      int y= sc.nextInt();\n      int z= sc.nextInt();\n      int t1= sc.nextInt();\n      int t2= sc.nextInt();\n      int t3= sc.nextInt();\n      if(Math.abs(x-y)*t1 < (Math.abs(x-z)+Math.abs(x-y))*t2+3*t3 ) System.out.println(\"NO\");\n      else System.out.println(\"YES\");\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint num = sc.nextInt();\n\t\tint beacon[] = new int[1000001];\n\t\tint pos[] = new int[num];\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tint position = sc.nextInt();\n\t\t\tbeacon[position] = sc.nextInt();\n\t\t\tpos[i] = position;\n\t\t}\n\t\tint dp[] = new int[1000001];\n\t\tint max = 0;\n\t\tif (beacon[0] != 0)\n\t\t\tdp[0] = 1;\n\t\t\n\t\tfor (int i = 1; i <= 1000000; i++) {\n\t\t\tif (beacon[i] == 0) {\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t} \n\t\t\telse {\n\t\t\t\tint j = i - beacon[i] - 1;\n\t\t\t\tif (j < 0) {\n\t\t\t\t\tdp[i] = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\t\t\n\t\tSystem.out.println(num-max);\n\t}\n", "complexity": "linear"}
{"code": " public static void main(String args[])throws IOException\n  InputStreamReader read=new InputStreamReader(System.in);\n  BufferedReader in=new BufferedReader(read);\n  int i,k,n,v;\n  String a;\n  a=in.readLine();\n  for(i=0;i<a.length();i++)\n  {\n   if(a.charAt(i)==' ')\n   break;\n  }\n  n=Integer.parseInt(a.substring(0,i));\n  v=Integer.parseInt(a.substring(i+1));\n  k=v%n;\n  v=v/n;\n  if(k>0)\n  v++;\n  System.out.println(v);\n }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        new First().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) \n        FastReader sc = new FastReader(); \n        //PrintWriter out = new PrintWriter(System.out); \n        int n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tlong one = (long)Math.pow(2, k) - 1;\n\t\t\n\t\tlong[] arr = new long[n+1];\n\t\t\n\t\tarr[0] = 0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tarr[i] = sc.nextLong();\n\t\t\tarr[i] ^= arr[i-1];\n\t\t}\n\n\t\tMap<Long, Long> count = new HashMap<>();\n\n\t\tfor(int i=0;i<=n;i++){\n\t\t\tLong key = Math.min(arr[i], (arr[i]^one));\n\t\t\tLong val = count.get(key);\n\t\t\tif(val==null) val = 0L;\n\t\t\tcount.put(key, val+1);\n\t\t}\n\n\t\tlong num = n;\n\t\tlong ans = num*(num+1)/2;\n\t\t\n\t\tfor(Map.Entry<Long, Long> ent: count.entrySet()){\n\t\t\t\n\t\t\tLong cnt = ent.getValue();\n\t\t\t\n\t\t\tlong num1 = cnt/2;\n\t\t\tlong num2 = (cnt+1)/2;\n\t\t\t\n\t\t\tans -= ( (num1*(num1-1))/2 );\n\t\t\tans -= ( (num2*(num2-1))/2 );\n\t\t}\n\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int a[] = new int[n];\n        int b[] = new int[n];\n        for (int i = 0; i < n; i++) a[i] = sc.nextInt();\n        for (int i = 0; i < n; i++) b[i] = sc.nextInt();\n        int c[] = new int[2 * n];\n        c[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            c[i * 2] = a[i];\n            c[i * 2 - 1] = b[i];\n            if (a[i] == 1 || b[i] == 1) {\n                System.out.print(-1);\n                System.exit(0);\n            }\n        }\n        c[2 * n - 1] = b[0];\n        if (a[0] == 1 || b[0] == 1) {\n            System.out.print(-1);\n            System.exit(0);\n        }\n        System.out.println(bin_search(c, m));\n    }\n", "complexity": "nlogn"}
{"code": "\t\tpublic static void main(String args[])\n\t\t\tScanner scan=new Scanner(System.in);\n\t\t\tint n=scan.nextInt();\n\t\t\tint k=scan.nextInt();\n\t\t\tString t=scan.next();\n\t\t\tint mx=0;\n\t\t\tfor(int i=1;i<n;i++)\n\t\t\t{\n\t\t\t\tint gd=1;\n\t\t\t\tfor(int j=0;j<i;j++)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tif(t.charAt(j)!=t.charAt((n-i)+j))\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\tgd=0;\n\t\t\t\t\t\t// i think i can break here\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tif(gd==1){\n\t\t\t\t\tmx=i;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.print(t);\n\t\t\tfor(int i=2;i<=k;i++)\n\t\t\t{\n\t\t\t\tfor(int j=mx;j<n;j++)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.print(t.charAt(j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "complexity": "quadratic"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            String s2[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            int m=Integer.parseInt(s1[1]);\n            int a[]=new int[n];\n            int b[]=new int[n];\n            int c[]=new int[n];\n            int d[]=new int[n];\n            HashSet<Integer> hs=new HashSet<Integer>();\n            hs.add(0);\n            hs.add(m);\n            int max=0;\n            for(int i=0;i<n;i++)\n            {\n                  a[i]=Integer.parseInt(s2[i]);\n                  if(i%2==0)\n                   b[i]=1;\n                  hs.add(a[i]);\n            }\n            \n            c[0]=a[0];\n            for(int i=1;i<n;i++)\n            {\n                  if(b[i]==0)\n                   c[i]=c[i-1];\n                  else\n                   c[i]=c[i-1]+a[i]-a[i-1];\n            }\n            \n            if(b[n-1]==0)\n             d[n-1]=m-a[n-1];\n            for(int i=n-2;i>=0;i--)\n            {\n                  if(b[i]==1)\n                   d[i]=d[i+1];\n                  else\n                   d[i]=d[i+1]+a[i+1]-a[i];\n            }\n            \n            max=c[n-1];\n            if(b[n-1]==0)\n             max+=m-a[n-1];\n            //System.out.println(max);\n            for(int i=n-1;i>=0;i--)\n            {\n                  int u=a[i]-1;\n                  int v=a[i]+1;\n                  if(!hs.contains(u))\n                  {\n                        if(b[i]==0)\n                        {\n                             int r=1+m-a[i]-d[i]+c[i-1];\n                             max=Math.max(max,r);\n                        }\n                        else\n                        {\n                              int l=0;\n                              if(i>0)\n                               l=a[i-1];\n                              int r=c[i]-1+m-a[i]-d[i];\n                              max=Math.max(max,r);\n                        }\n                  }\n                  \n                  if(!hs.contains(v))\n                  {\n                        if(b[i]==0)\n                        {\n                           if(i==n-1)\n                           {\n                              int r=c[i]+1;\n                              max=Math.max(max,r);\n                           }\n                           else\n                           {\n                               int r=c[i]+1+m-a[i+1]-d[i+1];\n                               max=Math.max(max,r);\n                           }\n                        }\n                        else\n                        {\n                                if(i==n-1)\n                                {\n                                   int r=c[i]+m-a[i]-1;\n                                   max=Math.max(max,r);\n                                }\n                                else\n                                {\n                                    int r=c[i]+m-a[i+1]-d[i+1]+a[i+1]-1-a[i];  \n                                    max=Math.max(max,r);\n                                }\n                        }\n                  }\n            }\n            \n            System.out.println(max);\n      }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in =new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tarr[i] = in.nextInt();\n\t\tfor(int i = n-1; i > 0; i--)\n\t\t\tarr[i] -= arr[i-1];\n\t\tarr[0] = 0;\n\t\tArrays.sort(arr);\n\t\tlong sum = 0;\n\t\tfor(int i = n-k; i >= 0; i--)\n\t\t\tsum += arr[i];\n\t\tSystem.out.println(sum);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new cf1(),\"cf1\",1<<26).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n\n        Solver solver = new Solver();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String [] args){\n        new Solution().solve();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        long totalBlocks = 0;\n        long a[] = new long[n];\n        for(int i = 0; i < n; ++i) {\n            a[i] = sc.nextLong();\n            totalBlocks += a[i];\n        }\n\n        Arrays.sort(a);\n\n        long selected = 0;\n        for(int i = 0; i < n; ++i) {\n            if(a[i] > selected)\n                selected++;\n        }\n\n        long leftCols = a[n - 1] - selected;\n        long remBlocks = totalBlocks - leftCols - n;\n\n        System.out.print(remBlocks);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        // TODO code application logic here\n        \n        Scanner in = new Scanner(System.in);\n        \n        int x = in.nextInt() , y = in.nextInt();\n        \n        ArrayList<Passengers> list = new ArrayList<>();\n        \n        for(int i = 1 ; i <= x ; ++i){\n            list.add(new Passengers(in.nextInt(), in.nextInt()));\n        }\n        \n        int sum = 0 ;\n       for(int i = list.size() - 1 ; i >= 0 ; --i)\n       {\n          int s = y -  list.get(i).floor;\n          sum = sum + s ; \n          \n          if(sum < list.get(i).time)\n          {\n              sum = sum + ( list.get(i).time - sum);\n          }\n          \n          y = list.get(i).floor;\n       } \n        \n        \n       if( list.get(list.size() - 1).floor != 0){\n           sum = sum  + (list.get(0).floor);\n       }\n        System.out.println(sum);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n\tInputReader in = new InputReader (System.in);\n\tPrintWriter out = new PrintWriter (System.out);\n\n\tint n = in.nextInt();\n\tint s = in.nextInt();\n\tint deg[] = new int [n];\n\t\n\tfor (int i = 1; i < n; ++i) {\n\t    deg[in.nextInt() - 1] ++;\n\t    deg[in.nextInt() - 1] ++;\n\t}\n\n\tint l = 0;\n\tfor (int i = 0; i < n; ++i)\n\t    if (deg[i] == 1) l ++;\n\n\tout.println((double) 2 * s / l);\n\tout.close();\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    int n = Integer.parseInt(br.readLine());\n    StringTokenizer tok = new StringTokenizer(br.readLine());\n    int ax = Integer.parseInt(tok.nextToken());\n    int ay = Integer.parseInt(tok.nextToken());\n    tok = new StringTokenizer(br.readLine());\n    int bx = Integer.parseInt(tok.nextToken());\n    int by = Integer.parseInt(tok.nextToken());\n    tok = new StringTokenizer(br.readLine());\n    int cx = Integer.parseInt(tok.nextToken());\n    int cy = Integer.parseInt(tok.nextToken());\n    boolean ans = (bx < ax && cx < ax && by < ay && cy < ay) ||\n    (bx < ax && cx < ax && by > ay && cy > ay) ||\n    (bx > ax && cx > ax && by < ay && cy < ay) ||\n    (bx > ax && cx > ax && by > ay && cy > ay);\n    System.out.print(ans?\"YES\":\"NO\");\n  }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastReader in = new FastReader(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = in.nextInt(), k = in.nextInt(), N = (int) 5e6 + 1;\n        int left = 0, right = 0;\n        int a[] = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = in.nextInt();\n            if (a[i] == k) left++;\n        }\n        int f[] = new int[N + 1];\n        int ans = 0;\n        for (int i = n; i >= 1; i--) {\n            if (a[i] == k) left--;\n            f[a[i]]++;\n            f[a[i]] = max(f[a[i]], 1 + right);\n            ans = max(ans, f[a[i]] + left);\n            if (a[i] == k) right++;\n        }\n        pw.println(ans);\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Solve());\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastReader input = new FastReader();\n        int n = input.nextInt();\n        int[] arr = new int[n];\n        int max = 0;\n        int maxIndex = 0;\n        for(int i = 0;i < n;i++){\n            arr[i] = input.nextInt();\n            if(arr[i] > max){\n                max = arr[i];\n                maxIndex = i;\n            }\n        }\n        int j = maxIndex - 1;\n        int k = maxIndex + 1;\n        while (j >= 0 && k < n){\n            if(arr[j] > arr[k]){\n                if(arr[j] < max){\n                    max = arr[j];\n                    j--;\n                }\n                else {\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n            else{\n                if(arr[k] < max){\n                    max = arr[k];\n                    k++;\n                }\n                else{\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n        }\n        if(j >= 0){\n            while (j >= 0){\n                if(arr[j] < max){\n                    max = arr[j];\n                    j--;\n                }\n                else{\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n        }\n        if(k < n){\n            while (k < n){\n                if(arr[k] < max){\n                    max = arr[k];\n                    k++;\n                }\n                else{\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n        }\n        if(j == -1 && k == n){\n            System.out.println(\"YES\");\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int test = 1;\n        for (int ind = 0; ind < test; ind++) {\n          int [] a=new int[3];\n          a[0]=sc.nextInt();\n          a[1]=sc.nextInt();\n          a[2]=sc.nextInt();\n          Arrays.sort(a);\n          int k1=a[0];\n          int k2=a[1];\n          int k3=a[2];\n          if(k1==1 || k2==1 || k3==1){\n              out.println(\"YES\");\n          }\n          else if((k1==2 && k2==2)||(k2==2 && k3==2)){\n              out.println(\"YES\");\n            }\n            else if(k1==3 && k2==3 && k3==3){\n              out.println(\"YES\");\n          }\n          else if(k1==2 && k2==4 && k3==4){\n              out.println(\"YES\");\n          }\n          else\n              out.println(\"NO\");\n\n        }\n        out.flush();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n \n\t\tint n = in.nextInt();\n\t\tint q = in.nextInt();\n\t\t\n\t\tArrayDeque<Integer> dq = new ArrayDeque<>();\n\t\tint max = -1;\n\t\tfor(int i = 0; i < n; ++i) {\n\t\t\tint x = in.nextInt();\n\t\t\tdq.add(x);\n\t\t\tmax = Math.max(max, x);\n\t\t}\n\t\tArrayList<Pair> ans = new ArrayList<>();\n\t\twhile(dq.peekFirst() != max) {\n\t\t\tint a = dq.pollFirst();\n\t\t\tint b = dq.pollFirst();\n\t\t\tans.add(new Pair(a, b));\n\t\t\tif(a > b) {\n\t\t\t\tdq.addFirst(a);\n\t\t\t\tdq.addLast(b);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdq.addFirst(b);\n\t\t\t\tdq.addLast(a);\n\t\t\t}\n\t\t}\n\t\tArrayList<Integer> a = new ArrayList<>();\n\t\tdq.pollFirst();\n\t\tfor(int x : dq)\n\t\t\ta.add(x);\n\t\twhile(q --> 0) {\n\t\t\tlong m = in.nextLong() - 1;\n\t\t\tif(m < ans.size()) {\n\t\t\t\tSystem.out.println(ans.get((int)m).first + \" \" + ans.get((int)m).second);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint idx = (int)((m - ans.size()) % a.size());\n\t\t\t\tSystem.out.println(max + \" \" + a.get(idx));\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\n\t\tint n=Integer.parseInt(st.nextToken());\n\t\tint m=Integer.parseInt(st.nextToken());\n\t\tString a=\"\";\n\t\tString b=\"\";\n\t\tfor(int i=0;i<1129;i++) {\n\t\t\ta+=\"1\";\n\t\t\tb+=\"8\";\n\t\t}\n\t\ta+=\"9\";\n\t\tb+=\"1\";\n\t\t\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out));\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        // Move from both ends, Time limit exceeded on test 6\n        for (int i= 1; i<= m/2; i++) {\n            // String s = \"\";\n            int i2 = m -i + 1; // the other end of i\n            // i is left row, i2 is right row\n            for (int j = 1; j <= n ; j++) {\n                int j2 = n - j + 1;\n                // start with (i,j), then go thru all the cell with (,i) and (,i2)\n                pw.println(j + \" \" + i);\n                pw.println(j2+ \" \" + i2);\n                // s += j + \" \" + i + \"\\n\" + j2+ \" \" + i2 + \"\\n\";\n            }\n            // out.print(s);\n        }\n        \n        // if n is odd, there is one line in the middle\n        if (m % 2 == 1) {\n            int i2 = m /2 + 1; // this is the middle column\n            for (int j = 1; j <= n/2 ; j++) {\n                int j2 = n - j + 1;\n                // start with (i,j), then go thru all the cell with (,i) and (,i2)\n                pw.println(j + \" \" + i2);\n                pw.println(j2+ \" \" + i2);\n            }\n            if (n %2 == 1) {\n                int j = n /2 + 1;\n                pw.println(j + \" \" + i2);\n            }\n        }\n        pw.flush();\n        pw.close();\n    }    \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        // Scanner scan = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        int n = Integer.parseInt(bf.readLine());\n        int counter = 0;\n        for(int i=0; i<2*n/3; i++) System.out.println(\"0 \" + i);\n        for(int i=0; i<n-2*n/3; i++) System.out.println(\"3 \" + (2*i+1));\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        long totalBlocks = 0;\n        long a[] = new long[n];\n        for(int i = 0; i < n; ++i) {\n            a[i] = sc.nextLong();\n            totalBlocks += a[i];\n        }\n\n        Arrays.sort(a);\n\n        long selected = 0;\n        for(int i = 0; i < n; ++i) {\n            if(a[i] > selected)\n                selected++;\n        }\n\n        long leftCols = a[n - 1] - selected;\n        long remBlocks = totalBlocks - leftCols - n;\n\n        System.out.print(remBlocks);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint num = sc.nextInt();\n\t\tint beacon[] = new int[1000001];\n\t\tint pos[] = new int[num];\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tint position = sc.nextInt();\n\t\t\tbeacon[position] = sc.nextInt();\n\t\t\tpos[i] = position;\n\t\t}\n\t\tint dp[] = new int[1000001];\n\t\tint max = 1;\n\t\tif (beacon[0] != 0)\n\t\t\tdp[0] = 1;\n\t\t\n\t\tfor (int i = 1; i <= 1000000; i++) {\n\t\t\tif (beacon[i] == 0) {\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t} \n\t\t\telse {\n\t\t\t\tint j = i - beacon[i] - 1;\n\t\t\t\tif (j < 0) {\n\t\t\t\t\tdp[i] = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\t\t\n\t\tSystem.out.println(num-max);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        MyScanner scan = new MyScanner();\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n\n        int n = scan.nextInt();\n        int[] vals = new int[n];\n        for (int i = 0; i < n; i++) {\n            vals[i] = scan.nextInt();\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (solve(i, vals)) {\n                out.print('A');\n            } else {\n                out.print('B');\n            }\n        }\n\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Main m = new Main();\n        m.solve();\n        try {\n            m.out.close();\n        } catch (IOException e) {}\n    }\n\n    BufferedReader in;\n    BufferedWriter out;\n    StringTokenizer tokenizer;\n    public Main() {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        out = new BufferedWriter(new OutputStreamWriter(System.out));\n    }\n    public String n() {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            try {\n                tokenizer = new StringTokenizer(in.readLine());\n            } catch (IOException e) {}\n        }\n        return tokenizer.nextToken();\n    }\n    public int ni() {\n        return Integer.parseInt(n());\n    }\n    public long nl() {\n        return Long.parseLong(n());\n    }\n    public void write(String s) {\n        try {\n            out.write(s);\n        } catch (IOException e) {}\n    }\n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = Integer.parseInt(br.readLine());\n\n        int[] a = new int[n];\n        int[] b = new int[n];\n\n        StringTokenizer st = new StringTokenizer(br.readLine());\n\n        for (int i = 0; i < n; i++) {\n            a[i] = Integer.parseInt(st.nextToken());\n        }\n        st = new StringTokenizer(br.readLine());\n        for (int i = 0; i < n; i++) {\n            b[i] = Integer.parseInt(st.nextToken());\n        }\n\n        solve(n, a, b, out);\n        out.flush();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        int n = r.nextInt(); // duration of lecture\n        int k = r.nextInt(); // number of minutes keep mishka awake\n        int[] theorems = new int[n+1];\n        for(int i = 1; i <= n; i++){\n            theorems[i] = r.nextInt();\n        }\n        int[] mishka = new int[n+1];\n        for(int i = 1; i <= n; i++){\n            mishka[i] = r.nextInt();\n        }\n        int[] sums = new int[n+1];\n        for(int i = 1; i <= n; i++){\n            if(mishka[i] == 0){\n                sums[i] = sums[i-1] + theorems[i];\n            } else{\n                sums[i] = sums[i-1];\n            }\n        }\n        int max = 0;\n        for(int i = 1; i <= n-k+1; i++){\n            int sum = sums[i+k-1] - sums[i-1];\n            max = Math.max(max, sum);\n        }\n        int totalSum = 0;\n        for(int i = 1; i <= n; i++){\n            if(mishka[i] == 1){\n                totalSum += theorems[i];\n            }\n        }\n\n        pw.println(totalSum + max);\n\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tString n = br.readLine();\n\t\tint k = Integer.parseInt(br.readLine());\n\t\tint l = n.length();\n\t\t\n\t\tif(k == 0) {\n\t\t\tSystem.out.println(1);\n\t\t}else {\n\t\t\tint max = 1000;\n\t\t\tif (l <= 10) {\n\t\t\t\tmax = Integer.min(1000, Integer.parseInt(n, 2));\n\t\t\t}\n\n\t\t\tint[] steps = new int[max + 1];\n\t\t\t\t\t\n\t\t\tfor (int i = 2; i <= max; i++) {\n\t\t\t\tint ones = numberOfOnes(i);\n\t\t\t\tsteps[i] = 1 + steps[ones];\n\t\t\t}\n\n\t\t\tif (l <= 10) {\n\t\t\t\tint ans = 0;\n\t\t\t\tfor (int i = 1; i <= max; i++) {\n\t\t\t\t\tif (steps[i] == k) {\n\t\t\t\t\t\tans++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(ans);\n\t\t\t} else {\n\t\t\t\tint[][] C = binomial(max);\n\n\t\t\t\tint ans = 0;\n\t\t\t\tint count = 0;\n\n\t\t\t\tfor (int i = 0; i < l; i++) {\n\t\t\t\t\tif (n.charAt(i) == '1') {\n\t\t\t\t\t\tfor (int j = count; j < max; j++) {\n\t\t\t\t\t\t\tif (steps[j] == k - 1) {\n\t\t\t\t\t\t\t\tans = (ans + C[l - i - 1][j - count]) % mod;\n\t\t\t\t\t\t\t\tif (i == 0 && k == 1) {\n\t\t\t\t\t\t\t\t\tans = (ans + mod - 1) % mod;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tint ones = 0;\n\t\t\t\tfor (int i = 0; i < l; i++) {\n\t\t\t\t\tif (n.charAt(i) == '1') {\n\t\t\t\t\t\tones++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (steps[ones] == k-1) {\n\t\t\t\t\tans = (ans + 1) % mod;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(ans);\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        long n = in.nextLong(), m = in.nextLong();\n        out.print(m / n + (m % n == 0 ? 0 : 1));\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        solver s = new solver();\n        int t = 1;\n        while (t > 0) {\n            s.solve();\n            t--;\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n        solve(in, out);\n        in.close();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner input = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\n\t\tSystem.out.println(input.nextInt() / 2 + 1);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint k = Integer.parseInt(st.nextToken());\n\t\t\n\t\tint[] temp = new int[1000001];\n\t\t\n\t\tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\t\t\n\t\tfor (int i = 0; i < n; i++){\n\t\t\t\n\t\t\ttemp[Integer.parseInt(st1.nextToken())]++;\n\t\t}\n\t\t\n\t\tint b = k + 1;\n\t\t\n\t\tfor (int i = 1000000; i > 0; i--){\n\t\t\t\n\t\t\tif (temp[i] > 0){\n\t\t\t\tif (b <= k){\n\t\t\t\t\tn -= temp[i];\n\t\t\t\t}\n\t\t\t\tb = 1;\n\t\t\t}else{\n\t\t\t\tb++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(n);\n\t\t\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = nextInt();\n\t\tint[] arr = {0,1};\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tSystem.out.print(arr[i % 2]);\n\t\t}\n\t\tSystem.out.println();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) { new ayyyyyy(); }\n", "complexity": "nlogn"}
{"code": "public static void main(String[] args)\n\tScanner sc=new Scanner(System.in);\n\tint n=sc.nextInt();\n\tHashMap<Integer,Integer> h=new HashMap();\n\t//HashMap<Integer,Integer> h1=new HashMap();\n\tint[] a=new int[n];\n\tint x=sc.nextInt();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta[i]=sc.nextInt();\n\t\tif(h.get(a[i])==null)\n\t\t{\n\t\t\th.put(a[i], 1);\n\t\t\t//h1.put(a[i],i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(0);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint num=a[i]&x;\n\t\tif(num==a[i])\n\t\t\tcontinue;\n\t\tif(h.get(num)==null)\n\t\t\tcontinue;\n\t\t\n\t\telse\n\t\t{\n\t\t\t\n\t\t\tSystem.out.print(1);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint num=a[i]&x;\n\t\tif(num==a[i])\n\t\t\tcontinue;\n\t\tif(h.get(num)==null)\n\t\t\th.put(num, 1);\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(2);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tSystem.out.print(-1);\n\t\n     \n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "      public static void main(String[] args) {\n            InputStream inputStream = System.in;\n            OutputStream outputStream = System.out;\n            InputReader in = new InputReader(inputStream);\n            OutputWriter out = new OutputWriter(outputStream);\n            CChessboard solver = new CChessboard();\n            solver.solve(1, in, out);\n            out.close();\n      }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner read = new Scanner(System.in);\n        double a = (double)read.nextInt();\n        double v = (double)read.nextInt();\n        double l = (double)read.nextInt();\n        double d = (double)read.nextInt();\n        double w = (double)read.nextInt();\n        double t=0;\n        if(w>=v){\n            double d1=v*v/(2*a);\n            if(d1>l){\n                t+= Math.sqrt(2*l/a);\n            }\n            else{\n                t+= v/a + (l-d1)/v;\n            }\n        }\n        else{\n            double temp = (v-w)/a;\n            double d1 = v*v/(2*a);\n            double d2 = d - v*temp + a*temp*temp/2;\n            if(d1>d2){\n                double temp2 = Math.sqrt(2*a*d);\n                if(temp2<w){\n                    w=temp2;\n                    temp=(v-w)/a;\n                    t+= temp2/a;\n                }\n                else{\n                    double vx=Math.sqrt(v*v/2+a*d2);\n                    t+= (vx/a) + ((vx-w)/a);\n                }\n            }\n            else{\n                t+= (v/a) + ((d2-d1)/v) + (temp);\n            }\n            double d3 = d + w*temp + a*temp*temp/2;\n            if(d3>l){\n                t+= (-w+Math.sqrt(w*w+2*a*(l-d)))/a;\n            }\n            else{\n                t+= (temp) + ((l-d3)/v);\n            }\n        }\n        System.out.printf(\"%.6f\", t);\n        read.close();\n    }\n", "complexity": "constant"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            int m=Integer.parseInt(s1[1]);\n            int a[]=new int[n];\n            String s2[]=br.readLine().split(\" \");\n            long S=0;\n            for(int i=0;i<n;i++)\n            { a[i]=Integer.parseInt(s2[i]);  S+=(long)a[i]; }\n            \n            Arrays.sort(a);\n            m=a[n-1];\n            int last=1;\n            int t=1;\n            for(int i=1;i<n-1;i++)\n            {\n                  if(a[i]==last)\n                   t++;\n                  else\n                  {\n                        t++;\n                        last=last+1;\n                  }\n            }\n            if(last<m)\n            { t+=m-last; }\n            else\n             t++;\n            System.out.println(S-t);\n      }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(), m = sc.nextInt();\n\n        a = new int[101];\n        for (int i = 0; i < m; i++) {\n            int type = sc.nextInt();\n            a[type] = a[type] + 1;\n        }\n\n        int lo=1, hi=100, max=0;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo)/2;\n            if (check(n, mid)) {\n                max = mid;\n                lo = mid+1;\n            } else {\n                hi = mid -1;\n            }\n        }\n        System.out.println(max);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tString a = scan.next();\n\t\tString b = scan.next();\n\t\t\n\t\tint[][] mismatch = new int[26][26];\n\t\tfor(int i = 0; i < 26; i++) Arrays.fill(mismatch[i], -1);\n\t\tint[][] pair = new int[2][26];\n\t\tfor(int i = 0; i < 2; i++) Arrays.fill(pair[i], -1);\n\t\tint hd = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(a.charAt(i) != b.charAt(i)) {\n\t\t\t\thd++;\n\t\t\t\tmismatch[a.charAt(i)-'a'][b.charAt(i)-'a'] = i;\n\t\t\t\tpair[0][a.charAt(i)-'a'] = i;\n\t\t\t\tpair[1][b.charAt(i)-'a'] = i;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < 26; i++) {\n\t\t\tfor(int j = i+1; j < 26; j++) {\n\t\t\t\tif(mismatch[i][j] > -1 && mismatch[j][i] > -1) {\n\t\t\t\t\tSystem.out.println(hd-2);\n\t\t\t\t\tSystem.out.println((mismatch[i][j]+1)+\" \"+(mismatch[j][i]+1));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(a.charAt(i) != b.charAt(i)) {\n\t\t\t\t//try a gets b's letter\n\t\t\t\tif(pair[0][b.charAt(i)-'a'] > -1) {\n\t\t\t\t\tSystem.out.println(hd-1);\n\t\t\t\t\tSystem.out.println((i+1)+\" \"+(pair[0][b.charAt(i)-'a']+1));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(hd);\n\t\tSystem.out.println(\"-1 -1\");\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        T = sc.nextInt();\n\n        PrintWriter pw = new PrintWriter(System.out);\n        for (int i = 0; i < T; i++) {\n            int n = sc.nextInt();\n            int[] a = sc.nextIntArray(n);\n            int[] ans = solve(n, a);\n            StringJoiner j = new StringJoiner(\" \");\n            for (int each : ans) {\n                j.add(String.valueOf(each));\n            }\n            pw.println(j.toString());\n        }\n        pw.flush();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String...strings) throws Exception {\n\t\tString[] specs = reader.readLine().split(\" \");\n\t\t\n\t\tint x = Integer.parseInt(specs[0]);\n\t\tint y = Integer.parseInt(specs[1]);\n\t\tint z = Integer.parseInt(specs[2]);\n\t\tint t1 = Integer.parseInt(specs[3]);\n\t\tint t2 = Integer.parseInt(specs[4]);\n\t\tint t3 = Integer.parseInt(specs[5]);\n\t\t\n\t\treader.close();\n\t\tString ans = solve(x, y, z, t1, t2, t3);\n\t\twriter.append(ans);\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n", "complexity": "constant"}
{"code": "\t\t\t\t\t\t\t\t\t\t\t\tpublic static void main(String args[]) throws Exception\n\t\t\t\t\t\t\t\t\t\t\t\t\tnew Thread(null, new Solution1(),\"Solution1\",1<<26).start();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader lector = new BufferedReader(new InputStreamReader(System.in));\n\t\tint planet = Integer.parseInt(lector.readLine());\n\t\tint ini = Integer.parseInt(lector.readLine());\n\t\tdouble peso = ini;\n\t\tint[] desp = new int[planet];\n\t\tint[] ater = new int[planet];\n\t\tString[] temp = lector.readLine().split(\" \");\t\t\n\t\tfor(int i=0; i<planet; i++) {\n\t\t\tdesp[i] = Integer.parseInt(temp[i]);\n\t\t\tif(desp[i] == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\tlector.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttemp = lector.readLine().split(\" \");\t\t\n\t\tfor(int i=0; i<planet; i++) {\n\t\t\tater[i] = Integer.parseInt(temp[i]);\n\t\t\tif(ater[i] == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\tlector.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttemp = null;\n\t\tint i=planet-1;\n\t\tpeso = (peso*ater[0])/(ater[0]-1);\n\t\twhile(i>0) {\n\t\t\tpeso = (peso*desp[i])/(desp[i]-1);\n\t\t\tpeso = (peso*ater[i])/(ater[i]-1);\n\t\t\ti--;\n\t\t}\n\t\tpeso = (peso*desp[0])/(desp[0]-1);\n\t\tpeso = peso - ini;\n\t\tSystem.out.println(peso);\n\t\tlector.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Map<Integer,Integer> map = new HashMap();\n        map.put(0,1);\n        int n = nextInt();\n        int m = nextInt();\n        int index = -1;\n        int a[] = new int[n];\n        for(int i=0;i<n;i++){\n            a[i]=nextInt();\n            if(a[i]==m)\n                index=i;\n        }\n        int sum = 0;\n        for(int i=0;i<index;i++){\n            if (a[i]<m)\n                sum--;\n            else\n                sum++;\n            if (map.containsKey(sum)){\n                map.put(sum,map.get(sum)+1);\n            }else {\n                map.put(sum,1);\n            }\n        }\n        long ans = 0;\n        for(int i=index;i<n;i++){\n            if (a[i]<m)\n                sum--;\n            else if(a[i]>m)\n                sum++;\n            if (map.containsKey(sum))\n                ans+=map.get(sum);\n            if (map.containsKey(sum-1))\n                ans+=map.get(sum-1);\n        }\n        out.print(ans);\n        out.flush();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        HashSet<Integer> set = new HashSet<>();\n        for(int i = 0; i<n; i++){\n            int a = sc.nextInt();\n            if(a!=0){\n                set.add(a);\n            }\n        }\n        System.out.println(set.size());\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\n\n        int r = in.nextInt();\n        int c = in.nextInt();\n        boolean[][] m = new boolean[r + 1][c + 1];\n        boolean[][] inp = new boolean[r + 1][c + 1];\n        for (int i = 0; i < r; i++) {\n            String s = in.next();\n            //System.out.println(m[i]);\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '#') {\n                    m[i][j] = true;\n                    inp[i][j] = true;\n                }\n            }\n        }\n\n        for (int i = 0; i < r; i++) {\n            for (int j = 0; j < c; j++) {\n                if (canPress(i, j, r, c, inp)) {\n\n                    // make press\n                    for (int k = 0; k < 8; k++) {\n                        int xi = i + dx[k];\n                        int yi = j + dy[k];\n                        m[xi][yi] = false;\n                    }\n\n                }\n            }\n        }\n        boolean isLeftAny = false;\n        for (int i = 0; i < r && !isLeftAny; i++) {\n            for (int j = 0; j < c && !isLeftAny; j++) {\n                if (m[i][j]) {\n                    isLeftAny = true;\n                    break;\n                }\n            }\n        }\n        if(isLeftAny){\n            System.out.println(\"NO\");\n        }else{\n            System.out.println(\"YES\");\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) {\n        Scanner scan = new Scanner(System.in);\n        int n=scan.nextInt();\n        int m=scan.nextInt();\n        int[] game=new int[n];\n        int[] bill=new int[m];\n        for (int i = 0; i <n ; i++) {\n            game[i]=scan.nextInt();\n        }\n        for (int i = 0; i <m ; i++) {\n            bill[i]=scan.nextInt();\n        }\n        int i=0;\n        int j=0;\n        int ans=0;\n        while (i<m){\n            boolean f=true;\n            for (int k = j; k <n ; k++) {\n                if (bill[i]>=game[k]){\n                    ans++;\n                    i++;\n                    j=k+1;\n                    f=false;\n                    break;\n                }\n            }\n            if (f){\n                break;\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "linear"}
{"code": "\t\tpublic static void main(String []args)\n\t\t\tScanner sc=new Scanner(System.in);\n\t\t\tint n=sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tString s=sc.nextLine();\n\t\t\t//System.out.println(s);\n\t\t\tchar c[]=s.toCharArray();\n\t\t\tArrayList a =new ArrayList();\n\t\t\t\n\t\t\tfor(int i=0;i<c.length;i++)\n\t\t\t{\n\t\t\t\t//System.out.println(c[i]);\n\t\t\t\ta.add(c[i]);\n\t\t\t}\n\t\t\n\t\t\tint x=Collections.frequency(a,'0' );\n\t\t\tint y=Collections.frequency(a,'1');\n\t\t\t\n\t\t\t//System.out.println(x+ \"  \"+y );\n\t\t\tif(y==0 || y==1)\n\t\t\t{\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(y>=2)\n\t\t\t\t{\n\t\t\t\t\tString s1=\"1\";\n\t\t\t\t\tfor(int i=0;i<x;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\ts1=s1+\"0\";\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(s1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]){\n        out = new PrintWriter(System.out);\n        in = new InputReader();\n        new C();\n        out.flush(); out.close();\n    }   \n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        n = Integer.parseInt(st.nextToken());\n        int k = Integer.parseInt(st.nextToken());\n        int[] heat = new int[n];\n        st = new StringTokenizer(br.readLine());\n        for(int i = 0; i < n; i++){\n            heat[i] = Integer.parseInt(st.nextToken());\n        }\n        max = 0;\n        pre = new int[n + 1];\n        pre[0] = 0;\n        for(int i = 0; i < n; i++){\n            pre[i + 1] = pre[i] + heat[i];\n        }\n        for(int i = k; i <= n; i++){\n            findIntensity(i);\n        }\n        System.out.println(max);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException{\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int ok,ok2;\n        int va,vb;\n        va = 0;\n        vb = 0;\n        out.println(\"? \"+va+\" \"+vb);\n        out.flush();\n        ok = sc.nextInt();\n        for(int i=29;i>=0;i--){\n            if(ok==0){\n                va += (1<<i);\n                out.println(\"? \"+va+\" \"+vb);\n                out.flush();\n                ok2 = sc.nextInt();\n                if(ok2==1){\n                    va -= (1<<i);\n                }else{\n                    vb += (1<<i);\n                }\n            }else{\n                va += (1<<i);\n                vb += (1<<i);\n                out.println(\"? \"+va+\" \"+vb);\n                out.flush();\n                ok2 = sc.nextInt();\n                if(ok==ok2){\n                    vb -= (1<<i);\n                    out.println(\"? \"+va+\" \"+vb);\n                    out.flush();\n                    ok2 = sc.nextInt();\n                    if(ok2==1){\n                        va -= (1<<i);\n                    }else{\n                        vb += (1<<i);\n                    }\n                }else{\n                    if(ok==1){\n                        vb -= (1<<i);\n                        out.println(\"? \"+va+\" \"+vb);\n                        out.flush();\n                        ok = sc.nextInt();\n                    }\n                    else {\n                        va -= (1<<i);\n                        out.println(\"? \"+va+\" \"+vb);\n                        out.flush();\n                        ok = sc.nextInt();\n                    }\n                }\n            }\n        }\n        out.println(\"! \"+va+\" \"+vb);\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n        solve(in, out);\n        in.close();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        P1196D2 p = new P1196D2();\n        int q = multipleIndependent ? in.nextInt() : 1;\n        while (q-- > 0) {\n            p.run();\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new TaskA(),\"TaskA\",1<<26).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] aa = new int[1 + n];\n\t\tfor (int i = 1, a = 0; i <= n; i++)\n\t\t\taa[i] = a = (a + Integer.parseInt(st.nextToken())) % MD;\n\t\tint[] pp = new int[n];\n\t\tpp[0] = 1;\n\t\tfor (int i = 1, p = 1; i < n; i++) {\n\t\t\tpp[i] = p;\n\t\t\tp = p * 2 % MD;\n\t\t}\n\t\tint d = 0;\n\t\tlong ans = 0;\n\t\tfor (int i = n - 1; i >= 0; i--) {\t// rest at i\n\t\t\td = (d * 2 % MD + aa[n - 1 - i]) % MD;\t// rest again before n\n\t\t\tans = (ans + (long) (d + aa[n - i]) * pp[i]) % MD;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\t int n = scanner.nextInt();\n\t\t \n\t\t List<Integer> as = new LinkedList<>();\n\t\t int[] as2 = new int[n];\n\t\t \n\t\t for (int i = 0; i < n; i++) {\n\t\t\t int a = scanner.nextInt();\n\t\t\t as.add(a);\n\t\t\t as2[i] = a;\n\t\t }\n\t\t \n\t\t //System.out.println(solve(as));\n\t\t System.out.println(solve2(as2));\n\t\t\n\t\tscanner.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E solver = new E();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\tint platforms = input.nextInt();\n\t\tint in = input.nextInt();\n\t\tint[] cols = new int[platforms];\n\t\tint[] squares = new int[in];\n\t\t\n\t\tfor (int i = 0; i < in; i ++) {\n\t\t\tsquares[i] = input.nextInt();\n\t\t}\n\t\t\n\t\tboolean hi = false;\n\t\tint score = 0;\n\t\t\n\t\tfor (int i = 0; i < in; i ++) {\n\t\t\tcols[squares[i] - 1] ++;\n\t\t\thi = checkscore(cols);\n\t\t\tif (hi == true) {\n\t\t\t\thi = false;\n\t\t\t\tscore ++;\n\t\t\t\tfor (int j = 0; j < cols.length; j ++) {\n\t\t\t\t\tcols[j] --;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(score);\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new Main().solve();\n    }\n", "complexity": "linear"}
{"code": "", "complexity": "constant"}
{"code": "    public static void main(String args[])throws IOException\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        int m=sc.nextInt();\n        int req=n/m;\n        int arr[]=new int[n+1];\n        int size[]=new int[m];\n        List<Integer> list[]=new ArrayList[m];\n        for(int i=0;i<m;i++)\n        {\n            list[i]=new ArrayList<>();\n        }\n        for(int i=1;i<=n;i++)\n        {\n            arr[i]=sc.nextInt();\n            size[arr[i]%m]++;\n            list[arr[i]%m].add(i);\n        }\n        long tot=0;int x=0,y=0;\n        List<Integer> idx=new ArrayList<>();\n        for(int i=0;i < 2*m;i++)\n        {\n            //System.out.println(i+\" \"+size[i%m]);\n            if(size[i%m]>req)\n            {\n                for(int j=0;j<size[i%m]-req;j++)\n                {\n                    idx.add(list[i%m].get(j));\n                    y++;\n                    \n                }\n                size[i%m]=req;\n                //System.out.println(i+\" \"+x+\" \"+y);\n            }\n            else if(size[i%m]<req)\n            {\n                //System.out.println(idx+\" \"+i);\n                while(x!=y && size[i%m]<req)\n                {\n                    int num=arr[idx.get(x)];\n                    int gg=i-num%m;\n                    tot+=gg;\n                    arr[idx.get(x)]+=gg;\n                    x++;\n                    size[i%m]++;\n                }\n            }\n        }\n        System.out.println(tot);\n        for(int i=1;i<=n;i++)\n        {\n            System.out.print(arr[i]+\" \");\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t        \n\t\tint n = Integer.parseInt(st.nextToken());\n\t     \n\t\tlong[] myArray = new long[2 * n];\n\t        \n\t\t\tfor (int i = 0; i < n; i++)  {\n\t        \tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\t        \tmyArray[2 * i] = Long.parseLong(st1.nextToken()) * 2;\n\t        \tmyArray[2 * i + 1] = Long.parseLong(st1.nextToken()) * 2 + 1;\n\t        }  \n\t        \n\t        Arrays.sort(myArray);\n\t        long[] ans = new long[n + 1];\n\t        int cnt = 0;\n\t       \n\t        for (int i = 0; i < 2 * n - 1; i++)   {\n\t            if (myArray[i] % 2 == 0) cnt++; else cnt--;\n\t            ans[cnt] += (myArray[i + 1] + 1) / 2 - (myArray[i] + 1) / 2;\n\t        }   \n\t        \n\t        StringBuilder answer = new StringBuilder();\n\t        \n\t        for (int i = 1; i < n + 1; i++) {\n\t        \tanswer.append(ans[i]);\n\t        \tanswer.append(\" \");\n\t        }  \n\t        \n\t        System.out.println(answer);\n\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n \n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader inp = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Solver solver = new Solver();\n        solver.solve(inp, out);\n        out.close();\n \n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t StringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\tint previous = 0;\n\t\tint array[] = new int[n+1];\n\t\tint answer = 0;\n\t\t\n\t\tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarray[i] = Integer.parseInt(st1.nextToken());\n\t\t\tif(i % 2 == 0){\n\t\t\t\tanswer += (array[i] - previous);\n\t\t\t}\n\t\t\tprevious = array[i];\n\t\t}\n\t\t\n\t\tif(n % 2 == 0){\n\t\t\tanswer += (m - previous);\n\t\t}\n\t\tprevious = m;\n\t\tint max = Integer.MAX_VALUE;\n\t\t\n\t\twhile(n-- != 0){\n\t\t\tint temp = array[n];\n\t\t\tif(n%2 == 0){\n\t\t\t\tarray[n] = array[n+1] - (previous - array[n]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarray[n] = array[n+1] + (previous - array[n]);\n\t\t\t}\n\t\t\tprevious = temp;\n\t\t\tmax = Math.min(max, array[n]);\n\t\t}\n\t\tif(max>=-1){\n\t\t\tSystem.out.println(answer);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(answer - (max+1));\n\t\t}\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        N = sc.nextInt();\n        U = new int[N-1];\n        V = new int[N-1];\n        for (int i = 0; i < N - 1; i++) {\n            U[i] = sc.nextInt()-1;\n            V[i] = sc.nextInt()-1;\n        }\n        A = sc.nextIntArray(N, -1);\n\n        System.out.println(solve() ? \"Yes\" : \"No\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String [] args) throws IOException\n        PrintWriter pw=new PrintWriter(System.out);//use pw.println() not pw.write();\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st=new StringTokenizer(br.readLine());\n        /*\n        inputCopy\n5 3\nxyabd\noutputCopy\n29\ninputCopy\n7 4\nproblem\noutputCopy\n34\ninputCopy\n2 2\nab\noutputCopy\n-1\ninputCopy\n12 1\nabaabbaaabbb\noutputCopy\n1\n        */\n        int n=Integer.parseInt(st.nextToken());\n        int k=Integer.parseInt(st.nextToken());\n        st=new StringTokenizer(br.readLine());\n        String str=st.nextToken();\n        char [] arr=str.toCharArray();\n        Arrays.sort(arr);\n        int weight=arr[0]-96;\n        char a=arr[0];\n        int included=1;\n        for(int i=1;i<arr.length;++i)\n        {\n            if(included==k)\n                break;\n            char c=arr[i];\n            if(c-a<2)\n                continue;\n           \n            weight+=arr[i]-96;\n            ++included;\n            a=arr[i];\n            \n        }\n        if(included==k)\n            pw.println(weight);\n        else\n            pw.println(-1);\n        pw.close();//Do not forget to write it after every program return statement !!\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[])\n        Scanner sc=new Scanner(System.in);\n        String str=sc.next();\n        HashSet<Character> hs=new HashSet<>();\n        for(int i=0;i<str.length();i++)\n        {\n            hs.add(str.charAt(i));\n        }\n        if(hs.size()==1)\n        System.out.println(0);\n        else if(palin(str)==0)\n        System.out.println(str.length());\n        else\n        System.out.println(str.length()-1);\n    }\n", "complexity": "linear"}
{"code": "  public static void main (String[] args)\n    new CF111111  ();\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) {\n\t\n\tScanner sc = new Scanner(System.in);\n\tint n = sc.nextInt();\n\t//sc= new Scanner(System.in);\n\tString s = sc.next();\n\tStringBuilder sb = new StringBuilder(\"\");\n\tsb.append(s);\n\t\n    System.out.println(check(sb));\n\t\n\t\n\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DPairOfLines solver = new DPairOfLines();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main (String[] args) {\n\t    Scanner sc = new Scanner (System.in);\n\t    int n = sc.nextInt();\n\t    int a = sc.nextInt();\n\t    int b = sc.nextInt();\n\t    int c = sc.nextInt();\n\t    int ans = 0;\n\t    int t= sc.nextInt();\n\t    int arr[] = new int[n];\n\t    for(int i=0;i<n;i++){\n\t        int nn = sc.nextInt();\n\t        ans+=a;\n\t        if(b<c){\n\t            ans += (t-nn) * (c - b);\n\t        }\n\t    }\n\t    System.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FS in = new FS(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        \n        int n = in.nextInt();\n        Integer[] arr = new Integer[n];\n        int numZ = 0;\n        for(int i = 0; i < n; i++) {\n            arr[i] = in.nextInt();\n            if(arr[i] == 0) numZ++;\n        }\n        \n        Arrays.sort(arr);\n        \n        \n        if(numZ > 1) {\n            System.out.println(\"cslnb\");\n            return;\n        }\n        int numDup = 0;\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr[i];\n            if(i != 0) {\n                if(arr2[i] == arr2[i-1]) {\n                    arr2[i-1]--;\n                    numDup++;\n                }\n            }\n        }\n        \n        if(numDup > 1) {\n            System.out.println(\"cslnb\");\n            return;\n        }\n        \n        \n        for(int i = 0; i < n; i++) {\n            if(i != 0) {\n                if(arr2[i] == arr2[i-1]) {\n                    System.out.println(\"cslnb\");\n                    return;\n                }\n            }\n        }\n        long num = 0;\n        if(numDup == 1) num++;\n        for(int i = 0; i < n; i++) {\n            num += arr2[i]-i;\n        }\n        \n        if(num%2 == 0) {\n            System.out.println(\"cslnb\");\n        } else {\n            System.out.println(\"sjfnb\");\n        }\n        \n\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tif (stdin) {\n\t\t\tbr = new FastScanner();\n\t\t\tpw = new PrintWriter(new OutputStreamWriter(System.out));\n\t\t} else {\n\t\t\tbr = new FastScanner(filename + \".in\");\n\t\t\tpw = new PrintWriter(new FileWriter(filename + \".out\"));\n\t\t}\n\n\t\tSolver solver = new Solver();\n\t\tsolver.solve(br, pw);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tString[] s = br.readLine().trim().split(\" \");\n\t\tint n = Integer.parseInt(s[0]);\n\t\tint m = Integer.parseInt(s[1]);\n\t\tlong b[] = new long[n];\n\t\ts = br.readLine().trim().split(\" \");\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tb[i] = Integer.parseInt(s[i]);\n\t\t}\n\t\tlong g[] = new long[m];\n\t\ts = br.readLine().trim().split(\" \");\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tg[i] = Integer.parseInt(s[i]);\n\t\t}\n\t\tArrays.sort(b);\n\t\tArrays.sort(g);\n\t\tif(g[0] < b[n-1]) {\n\t\t\tSystem.out.println(\"-1\");\n\t\t}\n\t\telse if(g[0] == b[n-1]){\n\t\t\tlong ans = 0;\n\t\t\tfor(int i = 0; i < m; i++) {\n\t\t\t\tans += g[i];\n\t\t\t}\n\t\t\tfor(int i = 0; i < n-1; i++) {\n\t\t\t\tans += (m)*b[i];\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\n\t\t}\n\t\telse {\n\t\t\tlong ans = 0;\n\t\t\tfor(int i = 0; i < m; i++) {\n\t\t\t\tans += g[i];\n\t\t\t}\n\t\t\tfor(int i = 0; i < n-1; i++) {\n\t\t\t\tans += (m)*b[i];\n\t\t\t}\n\t\t\tans += b[n-1]-b[n-2];\n\t\t\tSystem.out.println(ans);\n\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        try {\n            new Main().solve();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner input = new Scanner(System.in);\n\t\tdouble n = input.nextInt();\n\t\tdouble k = input.nextInt();\n\t\tdouble red = 0;\n\t\tdouble green = 0;\n\t\tdouble blue = 0;\n\t\tdouble ans = 0;\n\t\tred = (2 * n) / k;\n\t\tgreen = (5 * n) / k;\n\t\tblue = (8 * n) / k;\n\n\t\tdouble red1 = Math.ceil(red) ;\n\t\tdouble green1 = Math.ceil(green);\n\t\tdouble blue1 = Math.ceil(blue);\n\n\t\tans+=red1;\n\t\tans+=green1;\n\t\tans+=blue1;\n\t\tDouble answer = new Double(ans);\n\t\tint finished = answer.intValue();\n\t\tSystem.out.println(finished);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new D().run();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n \n\t\tint n = in.nextInt();\n\t\tint q = in.nextInt();\n\t\t\n\t\tArrayDeque<Integer> dq = new ArrayDeque<>();\n\t\tint max = -1;\n\t\tfor(int i = 0; i < n; ++i) {\n\t\t\tint x = in.nextInt();\n\t\t\tdq.add(x);\n\t\t\tmax = Math.max(max, x);\n\t\t}\n\t\tArrayList<Pair> ans = new ArrayList<>();\n\t\twhile(dq.peekFirst() != max) {\n\t\t\tint a = dq.pollFirst();\n\t\t\tint b = dq.pollFirst();\n\t\t\tans.add(new Pair(a, b));\n\t\t\tif(a > b) {\n\t\t\t\tdq.addFirst(a);\n\t\t\t\tdq.addLast(b);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdq.addFirst(b);\n\t\t\t\tdq.addLast(a);\n\t\t\t}\n\t\t}\n\t\tArrayList<Integer> a = new ArrayList<>();\n\t\tdq.pollFirst();\n\t\tfor(int x : dq)\n\t\t\ta.add(x);\n\t\twhile(q --> 0) {\n\t\t\tlong m = in.nextLong() - 1;\n\t\t\tif(m < ans.size()) {\n\t\t\t\tSystem.out.println(ans.get((int)m).first + \" \" + ans.get((int)m).second);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint idx = (int)((m - ans.size()) % a.size());\n\t\t\t\tSystem.out.println(max + \" \" + a.get(idx));\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new C().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] aa = new int[n];\n\t\tint[] i1 = new int[n];\n\t\tint[] i2 = new int[n];\n\t\tint n1 = 0, n2 = 0, m2 = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\taa[i] = a;\n\t\t\tif (a == 1)\n\t\t\t\ti1[n1++] = i;\n\t\t\telse {\n\t\t\t\ti2[n2++] = i;\n\t\t\t\tm2 += a;\n\t\t\t}\n\t\t}\n\t\tif (m2 < (n2 - 1) * 2 + n1) {\n\t\t\tSystem.out.println(\"NO\");\n\t\t\treturn;\n\t\t}\n\t\tint m = n2 - 1 + n1;\n\t\tint d = n2 - 1 + Math.min(n1, 2);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tpw.println(\"YES \" + d);\n\t\tpw.println(m);\n\t\tfor (int i = 0; i + 1 < n2; i++) {\n\t\t\tpw.println((i2[i] + 1) + \" \" + (i2[i + 1] + 1));\n\t\t\taa[i2[i]]--; aa[i2[i + 1]]--;\n\t\t}\n\t\tif (n1 > 0) {\n\t\t\twhile (n2 > 0 && aa[i2[n2 - 1]] == 0)\n\t\t\t\tn2--;\n\t\t\tpw.println((i2[n2 - 1] + 1) + \" \" + (i1[n1 - 1] + 1));\n\t\t\taa[i2[n2 - 1]]--;\n\t\t\tn1--;\n\t\t}\n\t\tfor (int i = 0, j = 0; j < n1; j++) {\n\t\t\twhile (aa[i2[i]] == 0)\n\t\t\t\ti++;\n\t\t\tpw.println((i2[i] + 1) + \" \" + (i1[j] + 1));\n\t\t\taa[i2[i]]--;\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tint N = in.nextInt();\n\t\tStack<Integer> stack = new Stack<>();\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tint num = in.nextInt() % 2;\n\t\t\tif(stack.size() >= 1 && stack.lastElement() == num)\n\t\t\t\tstack.pop();\n\t\t\telse\n\t\t\t\tstack.add(num);\n\t\t}\n\t\t\n\t\tSystem.out.println(stack.size() <= 1 ? \"YES\" : \"NO\");\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n=sc.nextInt();\n\t\tint []a=new int [n];\n\t\tint max=0;\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=sc.nextInt();\n\t\tStack<Integer> s=new Stack<>();\n\t\tboolean f=true;\n\t\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\t\tmax=Math.max(max,a[i]);\n\t\t\t\t\tif(!s.isEmpty() && a[i]>s.peek())\n\t\t\t\t\t\tf=false;\n\t\t\t\t\ts.push(a[i]);\n\t\t\t\t\twhile(!s.isEmpty()) {\n\t\t\t\t\t\tint high=s.pop();\n\t\t\t\t\t\tif(s.isEmpty() || s.peek()!=high) {\n\t\t\t\t\t\t\ts.push(high);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts.pop();\n\t\t\t\t\t}\n\t\t\t\t//\tSystem.out.println(s+\" \"+max);\n\t\t\t\t}\n\t\t\t\t//System.out.println(f+\" \"+max);\n\t\t\t\tif(f && s.size()==0)\n\t\t\t\t\tout.println(\"YES\");\n\t\t\t\telse if(f && s.size()==1 && s.peek()==max)\n\t\t\t\t\tout.println(\"YES\");\n\t\t\t\telse\n\t\t\t\t\tout.println(\"NO\");\n\t\t out.flush();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint n = nextInt();\n\t\tint[] a = intArray(n);\n\t\t\n\t\tlong s = 0;\n\t\tfor (int x : a)\n\t\t\ts += x;\n\t\t\n\t\tlong m = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tm += a[i];\n\t\t\tif (m*2 >= s) {\n\t\t\t\tSystem.out.println(i+1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        int n = r.nextInt(); // duration of lecture\n        int k = r.nextInt(); // number of minutes keep mishka awake\n        int[] theorems = new int[n+1];\n        for(int i = 1; i <= n; i++){\n            theorems[i] = r.nextInt();\n        }\n        int[] mishka = new int[n+1];\n        for(int i = 1; i <= n; i++){\n            mishka[i] = r.nextInt();\n        }\n        int[] sums = new int[n+1];\n        for(int i = 1; i <= n; i++){\n            if(mishka[i] == 0){\n                sums[i] = sums[i-1] + theorems[i];\n            } else{\n                sums[i] = sums[i-1];\n            }\n        }\n        int max = 0;\n        for(int i = 1; i <= n-k+1; i++){\n            int sum = sums[i+k-1] - sums[i-1];\n            max = Math.max(max, sum);\n        }\n        int totalSum = 0;\n        for(int i = 1; i <= n; i++){\n            if(mishka[i] == 1){\n                totalSum += theorems[i];\n            }\n        }\n\n        pw.println(totalSum + max);\n\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new HamstersTigers();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Main().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws FileNotFoundException\n        new Main().solve();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tnew Main();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        Scanner input = new Scanner(System.in) ;\n\n        L = input.nextInt() ; String s = input.next() ;\n        arr = new int[L]; for (int i = 0 ; i < L ; i ++) {arr[i] = s.charAt(i) == 'H' ? 1 : 0 ;}\n\n        // want to find longest sequence of 1s\n        // then rotate to head\n        int count = 99999 ;\n        for (int A = 0; A < L ; A ++)\n        {\n            int[] tmp = new int[L] ; System.arraycopy(arr, 0, tmp, 0, arr.length);\n            int ans = 0 ;\n            for (int i = 0 ; i < L ; i ++)\n            {\n                if (tmp[i] == 1) continue ;\n                for (int j = L-1 ; j > i ; j --)\n                {\n                    if (tmp[j] == 0) continue ;\n                    ans ++ ;\n                    tmp[i] = 1 ; tmp[j] = 0 ;\n                    //System.out.println(\"SWAP \" + i + \" \" + j);\n                    //for (int k = 0 ; k < L ; k ++)\n                    //    System.out.print(arr[k]);\n                    //System.out.println(\"\");\n                    break;\n                }\n            }\n            count = Math.min(count,ans) ;\n            rotate() ;\n        }\n        // rotate until j is at the front\n        System.out.println(count);\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        char[] s = new char[n];\n        String line = in.next();\n        int ct=0,ht=0;\n        for(int i=0;i<n;i++) //count animals\n            if(line.charAt(i)=='T')\n                ct++;\n            else\n                ht++;\n        \n        int cnt = 1000000000;\n        int[] c = new int[2];\n        char[] cc = new char[2];\n        if(ct<ht)\n        {\n            c[0] = ct;\n            c[1] = ht;\n            cc[0] = 'T';\n            cc[1] = 'H';\n        }else{\n            c[0] = ht;\n            c[1] = ct;\n            cc[0] = 'H';\n            cc[1] = 'T';\n        }\n        \n        for(int i=0;i<n;i++)\n        {\n            int ptr = i;\n            for(int j=0;j<c[0];j++) //fill First\n            {\n                s[ptr] = cc[0];\n                ptr = (ptr+1)%n;\n            }\n            for(int j=0;j<c[1];j++) //fill Second\n            {\n                s[ptr] = cc[1];\n                ptr = (ptr+1)%n;\n            }\n            //check\n            int ch = 0;\n            for(int j=0;j<n;j++) //difference\n                if(s[j]!=line.charAt(j)&&s[j]==cc[0])\n                    ch++;\n            cnt = Math.min(cnt,ch);\n        }\n        \n        System.out.print(cnt);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws Exception{\n        int n = nextInt();\n        char[] c = nextString().toCharArray();\n        \n        int tc = 0, hc = 0;\n        for(int i = 0;i<c.length; i++){\n            if(c[i] == 'T')tc++; else hc++;\n        }\n//      char g = 'T';\n//      if(tc > hc){\n//          tc = hc;\n//          g = 'H';\n//      }\n        \n        int max = -1;\n        int pos = 0;\n        for(int i = 0; i<c.length; i++){\n            int a = 0;\n            for(int j = 0; j<tc;j++){\n                int k = i+j;\n                if(k>=n)k-=n;\n                if(c[k] == 'T'){\n                    a++;\n                }\n            }\n            if(a>max){\n                max = a;\n                pos = i;\n            }\n        }\n        int min1 = tc - max;\n        \n        max = -1;\n        pos = 0;\n        for(int i = 0; i<c.length; i++){\n            int a = 0;\n            for(int j = 0; j<hc;j++){\n                int k = i+j;\n                if(k>=n)k-=n;\n                if(c[k] == 'H'){\n                    a++;\n                }\n            }\n            if(a>max){\n                max = a;\n                pos = i;\n            }\n        }\n        int min2 = hc - max;\n        \n        out.println(Math.min(min1, min2));\n        out.flush();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        Tsk1.metod();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new InputStreamReader(System.in));\n        int n = sc.nextInt();\n        String s = sc.next();\n        sc.close();\n        \n        int cH = 0;\n        for (int i=0; i < s.length(); i++)\n            if (s.charAt(i) == 'H')\n                cH++;\n        \n        int best = cH;\n        \n        for (int st=0; st < s.length(); st++) {\n            int cur = st;\n            int cnt = cH;\n            for (int i=0; i < cH; i++) {\n                if (s.charAt(cur) == 'H')\n                    cnt--;\n                cur++;\n                if (cur == s.length()) cur = 0;\n            }\n            best = Math.min(best, cnt);\n        }\n        \n        System.out.println(best);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Abra().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int len = s.nextInt();\n        s.nextLine();\n        String l = s.nextLine();\n        char[] ca = l.toCharArray();\n        int h = 0;\n        for (char c : ca)\n            h += A(c);\n        int cur = h;\n        int i;\n        for (i = 0; i < h; i++)\n            cur -= A(ca[i]);\n        int best = cur;\n        while (i != h + len) {\n            cur -= A(ca[i % len]);\n            cur += A(ca[(i - h) % len]);\n            best = best > cur ? cur : best;\n            i++;\n        }\n        System.out.println(best);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Homyak().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String [] argv)\n\t\tString filePath=null;\n\t\tif(argv.length>0)filePath=argv[0];\n\t\tC c = new C(filePath);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.UK);\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tStreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tin.nextToken();\n\t\tint n = (int)in.nval;\n\t\tin.nextToken();\n\t\tString st = in.sval;\n\t\tchar[] a = new char[n];\n\t\tfor (int i = 0; i<n; i++)\n\t\t\ta[i] = st.charAt(i);\n\t\tint kH = 0;\n\t\tint kT = 0;\n\t\tfor (int i =0; i<n; i++)\n\t\t\tif (a[i] == 'T') kT++;\n\t\t\telse kH++;\n\t\tint kol = 0;\n\t\tint min = Integer.MAX_VALUE;\n\t\tint poz;\n\t\t\n\t\tfor (int i=0; i<n; i++)\n\t\t{\n\t\t\tkol = 0;\n\t\t\tif (a[i] == 'T') {\n\t\t\t\tfor (int j = 0; j<kT; j++){\n\t\t\t\t\tpoz = (i+j)%n;\n\t\t\t\t\tif (a[poz] == 'H') kol++;\n\t\t\t\t}\n\t\t\t\tif (kol < min) min = kol;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (int j = 0; j<kH; j++){\n\t\t\t\t\tpoz = (i+j)%n;\n\t\t\t\t\tif (a[poz] == 'T') kol++;\n\t\t\t\t}\n\t\t\t\tif (kol < min) min = kol;\n\t\t\t}\n\t\t}\n\t\tout.print(min);\n\t\tout.flush();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        new C().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        in = new StreamTokenizer(new InputStreamReader (System.in) );\n        br = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintStream(System.out);\n\n        readLine();\n        String s = readLine();\n        int n = s.length();\n        String kk = s;\n        int ans = n*100;\n        for (int tr=0; tr<n+2; tr++) {\n        \tString kk2 = \"\";\n        \tfor (int i=1; i<n; i++) kk2 = kk2 +kk.charAt(i);\n        \tkk2 = kk2 + kk.charAt(0);\n        \tkk = kk2;\n        \n        int cur = genans(kk);\n        //out.println(kk+\" \"+cur);\n        if (cur<ans) ans = cur;\n        }\n        \n        out.println(ans);\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        //final String FILENAME = \"jury\"; in = new Scanner (new File (FILENAME + \".in\")); out = new PrintWriter (new File(FILENAME + \".out\"));\n    //    in = new Scanner (System.in); out = new PrintWriter (System.out);\n        in = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n        st = new StringTokenizer(\" \");\n        new Main().run();\n        /*out = new PrintWriter (System.out);\n        final int NUMBER_OF_TESTS = 35;\n        for (int i = 1; i <= NUMBER_OF_TESTS; i++) {\n            Scanner test = new Scanner (new File (\"tests/\" + i + \".in\"));\n            Scanner right = new Scanner (new File (\"tests/\" + i + \".out\"));\n            String get_right = right.nextLine();\n            String get_test = new Main().run(test);\n            if (get_right.equals(get_test)) {\n                out.println(\"Test #\" + i + \": \" + \"OK!\");                \n            } else {\n                out.println(\"Test #\" + i + \": \" + \"ERROR!\");\n                out.println(\"Expected: \" + get_right);\n                out.println(\"Received: \" + get_test);\n                break;\n            }\n        }*/\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = nextInt();\n        char[] s = nextString().toCharArray();\n        int h = 0;\n        for (int i = 0; i < n; i++)\n            if (s[i] == 'H')\n                h++;\n        \n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int p = i, t = 0;\n            for (int j = 0; j < h; j++, p = (p+1)%n)\n                if (s[p] == 'T')\n                    t++;\n            ans = Math.min(ans, t);\n        }\n        \n        out.println(ans);\n        out.flush();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner cin = new Scanner(System.in);\n\t\tint n;\n\t\tn = cin.nextInt();\n\t\tString s = cin.next();\n\t\tint ans = n;\n\t\tint cntH = 0,cntT = 0;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(s.charAt(i)=='H')cntH++;\n\t\t}\n\t\tcntT = n - cntH;\n\t\tfor(int i=0;i+cntH<n;i++)\n\t\t{\n\t\t\tint tmp = 0;\n\t\t\tfor(int j=i;j<i+cntH;j++)\n\t\t\t\tif(s.charAt(j)=='T')tmp++;\n\t\t\tif(ans>tmp)ans = tmp;\n\t\t}\n\t\tfor(int i=0;i+cntT<n;i++)\n\t\t{\n\t\t\tint tmp = 0;\n\t\t\tfor(int j=i;j<i+cntT;j++)\n\t\t\t\tif(s.charAt(j)=='H')tmp++;\n\t\t\tif(ans>tmp)ans = tmp;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(new C()).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tif (_READ_FROM_FILE)\n\t\t\tSystem.setIn(new FileInputStream(\"in.in\"));\n\t\tin = new Scanner(System.in);\n\t\tcore();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Solution().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tBufferedReader in = new BufferedReader( new InputStreamReader(System.in));\n\t\tint ans = 1000;\n\t\tin.readLine();\n\t\tString s = in.readLine();\n\t\tint H = 0;\n\t\tfor(int i =0; i < s.length(); i++)\n\t\t\tif( s.charAt(i) == 'H') H++;\n\n\t\t\n\t\tfor(int i = 0; i < s.length(); i++)\n\t\t{\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < H; j++)\n\t\t\t\tif( s.charAt( (i +j) % s.length()) =='T') count ++;\n\t\t\tans = Math.min ( ans, count);\n\t\t}\n\t\tSystem.out.println(ans);\n\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t\t\t\t} catch (SecurityException e) {}\n\t\t\t\t\tnew Main().run();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1L << 24).start(); \n\t}\n\n\tBufferedReader in;\n\tPrintWriter out;\n\tStringTokenizer st = new StringTokenizer(\"\");\n\t\n\tint N;\n\tint[] a;\n\tint[] b;\n\tint[] c;\n\t\n\tint T, H;\n\t\n\tvoid run() throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tN = nextInt();\n\t\tchar[] s = nextToken().toCharArray();\n\t\ta = new int [N];\n\t\t\n\t\tH = 0;\n\t\tT = 0;\n\t\t\n\t\tfor (int i = 0; i < s.length; i++) {\n\t\t\ta[i] = s[i] == 'T' ? 1 : 0;\n\t\t\tif (s[i] == 'T')\n\t\t\t\tT++;\n\t\t\telse\n\t\t\t\tH++;\n\t\t}\n\t\t\n\t\tif (T == 1 || H == 1) {\n\t\t\tout.println(0);\n\t\t\tout.close();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tb = Arrays.copyOf(a, a.length);\n\t\tc = Arrays.copyOf(a, a.length);\n\t\tsort(c);\n\t\t\n\t\tint ans = 100000000;\n\t\tfor (int o = 0; o < N; o++) {\n\t\t\tfor (int i = 0; i < N; i++)\n\t\t\t\tb[(i + o) % N] = a[i];\n\t\t\tint cur = 0;\n\t\t\tfor (int i = 0; i < N; i++)\n\t\t\t\tif (b[i] != c[i])\n\t\t\t\t\tcur++;\n\t\t\tans = min(ans, cur / 2);\n\t\t}\n\t\t\n\t\tout.println(ans);\n\t\t\n\t\tout.close();\n\t}\n\t\n\tString nextToken() throws IOException {\n\t\twhile (!st.hasMoreTokens()) {\n\t\t\tst = new StringTokenizer(in.readLine());\n\t\t}\n\t\t\n\t\treturn st.nextToken();\n\t}\n\t\n\tint nextInt() throws IOException {\n\t\treturn Integer.parseInt(nextToken());\n\t}\n\t\n\tlong nextLong() throws IOException {\n\t\treturn Long.parseLong(nextToken());\n\t}\n\t\n\tdouble nextDouble() throws IOException {\n\t\treturn Double.parseDouble(nextToken());\n\t}\n\t\n\tString nextLine() throws IOException {\n\t\tst = new StringTokenizer(\"\");\n\t\treturn in.readLine();\n\t}\n\t\n\tboolean EOF() throws IOException {\n\t\twhile (!st.hasMoreTokens()) {\n\t\t\tString s = in.readLine();\n\t\t\t\n\t\t\tif (s == null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tst = new StringTokenizer(s);\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n}\n", "complexity": "linear"}
{"code": "    public static void main( String[] args ) throws IOException {\n        new Thread( new C43() ).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew C().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n            br = new BufferedReader(new InputStreamReader(System.in));\n            pw = new PrintWriter(System.out);\n        \n        new Solution().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(new BufferedInputStream(System.in));\n\n\t\tint numAnimals = sc.nextInt();\n\t\tString positions = sc.next();\n\n\t\tint numTigers = 0;\n\t\tint numHamsters = 0;\n\t\tfor(int i = 0; i < positions.length(); i++) {\n\t\t\tif(positions.charAt(i) == 'T') {\n\t\t\t\tnumTigers++;\n\t\t\t} else {\n\t\t\t\tnumHamsters++;\n\t\t\t}\n\t\t}\n\n\t\tint minDifference = Integer.MAX_VALUE;\n\n\t\tStringBuilder tigerChars = new StringBuilder(1000);\n\t\tStringBuilder hamsterChars = new StringBuilder(1000);\n\t\tfor(int i = 0; i < numHamsters; i++) {\n\t\t\thamsterChars.append('H');\n\t\t}\n\t\tStringBuilder remainingTigerChars = new StringBuilder(1000);\n\t\tfor(int i = 0; i < numTigers; i++) {\n\t\t\tremainingTigerChars.append('T');\n\t\t}\n\n\t\tfor(int i = 0; i <= numTigers; i++) {\n\t\t\tStringBuilder generated = new StringBuilder();\n\t\t\tgenerated.append(tigerChars);\n\t\t\tgenerated.append(hamsterChars);\n\t\t\tgenerated.append(remainingTigerChars);\n\t\t\t\n\t\t\t//System.out.println(generated);\n\n\t\t\tif(remainingTigerChars.length() >= 1) {\n\t\t\t\tremainingTigerChars.deleteCharAt(remainingTigerChars.length() - 1);\n\t\t\t}\n\t\t\ttigerChars.append('T');\n\n\t\t\tint diffCount = stringDiffCount(positions, generated.toString());\n\t\t\tif(diffCount < minDifference) {\n\t\t\t\tminDifference = diffCount;\n\t\t\t}\n\t\t}\n\n\t\t//System.out.println(\"\");\n\n\t\thamsterChars = new StringBuilder(1000);\n\t\ttigerChars = new StringBuilder(1000);\n\t\tfor(int i = 0; i < numTigers; i++) {\n\t\t\ttigerChars.append('T');\n\t\t}\n\t\tStringBuilder remainingHamsterChars = new StringBuilder(1000);\n\t\tfor(int i = 0; i < numHamsters; i++) {\n\t\t\tremainingHamsterChars.append('H');\n\t\t}\n\n\t\tfor(int i = 0; i <= numHamsters; i++) {\n\t\t\tStringBuilder generated = new StringBuilder();\n\t\t\tgenerated.append(hamsterChars);\n\t\t\tgenerated.append(tigerChars);\n\t\t\tgenerated.append(remainingHamsterChars);\n\n\t\t\t//System.out.println(generated);\n\n\t\t\tif(remainingHamsterChars.length() >= 1) {\n\t\t\t\tremainingHamsterChars.deleteCharAt(remainingHamsterChars.length() - 1);\n\t\t\t}\n\t\t\thamsterChars.append('H');\n\n\t\t\tint diffCount = stringDiffCount(positions, generated.toString());\n\t\t\tif(diffCount < minDifference) {\n\t\t\t\tminDifference = diffCount;\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(minDifference / 2);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int[] a=new int[1010];\n        while(in.hasNext()){\n            int n=in.nextInt();\n            String s=in.next();\n            int sum=0;\n            for(int i=0;i<n;++i){\n                if(s.charAt(i)=='H'){\n                    a[i]=1;\n                    ++sum;\n                }\n                else a[i]=0;\n            }\n            int min=10010;\n            for(int i=0;i<n-sum;++i){\n                int count=0;\n                for(int j=i+sum;j<n;++j){\n                    if(a[j]==1)++count;\n                }\n                for(int j=0;j<i;++j){\n                    if(a[j]==1)++count;\n                }\n                if(count<min)min=count;\n            }\n            sum=n-sum;\n            for(int i=0;i<n-sum;++i){\n                int count=0;\n                for(int j=i+sum;j<n;++j){\n                    if(a[j]==0)++count;\n                }\n                for(int j=0;j<i;++j){\n                    if(a[j]==0)++count;\n                }\n                if(count<min)min=count;\n            }\n            System.out.println(min);\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        ProblemC problem = new ProblemC();\n        problem.solve();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = Integer.parseInt(sc.nextLine());\n        String s = sc.nextLine();\n\n        int k = 0;\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == 'H') {\n                k++;\n            }\n        }\n\n        s = s + s.substring(0, k);\n        String ss = \"\";\n\n        int max = 0;\n        for (int i = 0; i < s.length() - k; i++) {\n            ss = s.substring(i, i + k);\n            int count = 0;\n            for (int j = 0; j < ss.length(); j++) {\n                if (ss.charAt(j) == 'H') {\n                    count++;\n                }\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n        \n        System.out.println(k - max);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\t// 1 = H, 0 = T\n\t\t\n\t\tint n = in.nextInt();\n\t\tString line = in.next();\n\t\tint h = 0;\n\t\tfor (int i = 0; i < line.length(); i++) {\n\t\t\tif(line.charAt(i)=='H') h++;\n\t\t}\n\t\tline = line + line;\n\t\t\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint ans = 0;\n\t\t\tfor (int j = i; j < i+h; j++) {\n\t\t\t\tif(line.charAt(j)!='H') ans++;\n\t\t\t}\n\t\t\tif(min>ans) min = ans;\n\t\t}\n\t\t\n\t\tout.print(min);\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tin.close();\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException\n\t\tHamstersAndTigers t = new HamstersAndTigers();\n\t\tt.solve();\n\t\tt.finalize();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tint size= Integer.parseInt(r.readLine());\n\t\tString line = r.readLine();\n\t\t\n\t\tint counter =0;\n\t\tfor (int i = 0; i < line.length(); i++) {\n\t\t\tif(line.charAt(i)=='H')counter++;\n\t\t}\n\t\t\n\t\tint minimum = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i < line.length(); i++) {\n\t\t\tif(line.charAt(i)=='H'){\n\t\t\t\tint current = 0;\n\t\t\t\tfor (int j = i; j < i+counter; j++) {\n\t\t\t\t\tif(line.charAt(j%line.length())=='T')current++;\n\t\t\t\t}\n\t\t\t\tminimum = Math.min(current, minimum);\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(minimum);\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String [] args) throws Exception {\n\t\tif (args.length > 0) local = true;\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        //final String FILENAME = \"jury\"; in = new Scanner (new File (FILENAME + \".in\")); out = new PrintWriter (new File(FILENAME + \".out\"));\n        in = new Scanner (System.in); out = new PrintWriter (System.out);\n        new Main().run();\n        /*out = new PrintWriter (System.out);\n        final int NUMBER_OF_TESTS = 35;\n        for (int i = 1; i <= NUMBER_OF_TESTS; i++) {\n            Scanner test = new Scanner (new File (\"tests/\" + i + \".in\"));\n            Scanner right = new Scanner (new File (\"tests/\" + i + \".out\"));\n            String get_right = right.nextLine();\n            String get_test = new Main().run(test);\n            if (get_right.equals(get_test)) {\n                out.println(\"Test #\" + i + \": \" + \"OK!\");                \n            } else {\n                out.println(\"Test #\" + i + \": \" + \"ERROR!\");\n                out.println(\"Expected: \" + get_right);\n                out.println(\"Received: \" + get_test);\n                break;\n            }\n        }*/\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int number = in.nextInt();\n        String s = in.next();\n        int cH = 0;\n        int n = s.length();\n        for (int i = 0 ; i < n ; i++)\n            if (s.charAt(i) == 'H') cH++;\n        String ss = \"\";\n        for (int i = 0 ; i < cH ; i++)\n            ss += \"H\";\n        for (int i = 0 ; i < n - cH ; i++)\n            ss += \"T\";\n        int res = Integer.MAX_VALUE;\n        for (int i = 0 ; i < n ; i++) {\n            int cur = countDifference(ss , s);\n            res = Math.min(res , cur);\n            ss = ss.substring(1) + ss.charAt(0);\n        }\n        System.out.println(res);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tint n = nextInt();\n\t\tbyte s[] = nextStr().getBytes();\n\t\t\n\t\tint res = f(s, n);\n\t\tfor (int i=1; i<n; i++){\n\t\t\tbyte c = s[0];\n\t\t\tfor (int j=0; j<n-1; j++)\n\t\t\t\ts[j] = s[j+1];\n\t\t\ts[n-1] = c;\n\t\t\tres = Math.min(res, f(s, n));\n\t\t}\n\t\t\n\t\tout.println(res);\n\t\tout.flush();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = Integer.parseInt(br.readLine());\n\n        int[] a = new int[n];\n        int[] b = new int[n];\n\n        StringTokenizer st = new StringTokenizer(br.readLine());\n\n        for (int i = 0; i < n; i++) {\n            a[i] = Integer.parseInt(st.nextToken());\n        }\n        st = new StringTokenizer(br.readLine());\n        for (int i = 0; i < n; i++) {\n            b[i] = Integer.parseInt(st.nextToken());\n        }\n\n        solve(n, a, b, out);\n        out.flush();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "public class Test { public static void main(String[] args)\n{\nScanner sc = new Scanner(System.in);\nint n= sc.nextInt();\nint x= (int)Math.sqrt(n) ;\nint a[] = new int[n+5];\nfor(int i=1,o=n,j;i<=n;i+=x)\nfor(j=(int)Math.min(i+x-1,n);j>=i;a[j--]=o--);\nfor(int i=1;i<=n;i++)System.out.print(a[i]+\" \");\nSystem.out.println();\n\n\n} \n}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tString s = sc.next();\n\n\t\tStringBuilder ans = new StringBuilder();\n\t\tint count = 0;\n\t\tint open = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (s.charAt(i) == '(') {\n\t\t\t\tans.append(\"(\");\n\t\t\t\tcount++;\n\t\t\t\topen++;\n\t\t\t} else {\n\t\t\t\tans.append(\")\");\n\t\t\t\topen--;\n\t\t\t}\n\t\t\tif (count == k / 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (open > 0) {\n\t\t\tans.append(\")\");\n\t\t\topen--;\n\t\t}\n\t\tSystem.out.println(ans.toString());\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) {\n        Scanner scan = new Scanner(System.in);\n        int n=scan.nextInt();\n        int m=scan.nextInt();\n        int[] game=new int[n];\n        int[] bill=new int[m];\n        for (int i = 0; i <n ; i++) {\n            game[i]=scan.nextInt();\n        }\n        for (int i = 0; i <m ; i++) {\n            bill[i]=scan.nextInt();\n        }\n        int i=0;\n        int j=0;\n        int ans=0;\n        while (i<m){\n            boolean f=true;\n            for (int k = j; k <n ; k++) {\n                if (bill[i]>=game[k]){\n                    ans++;\n                    i++;\n                    j=k+1;\n                    f=false;\n                    break;\n                }\n            }\n            if (f){\n                break;\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "linear"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            String s2[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            int m=Integer.parseInt(s1[1]);\n            int a[]=new int[n];\n            int b[]=new int[n];\n            int c[]=new int[n];\n            int d[]=new int[n];\n            HashSet<Integer> hs=new HashSet<Integer>();\n            hs.add(0);\n            hs.add(m);\n            int max=0;\n            for(int i=0;i<n;i++)\n            {\n                  a[i]=Integer.parseInt(s2[i]);\n                  if(i%2==0)\n                   b[i]=1;\n                  hs.add(a[i]);\n            }\n            \n            c[0]=a[0];\n            for(int i=1;i<n;i++)\n            {\n                  if(b[i]==0)\n                   c[i]=c[i-1];\n                  else\n                   c[i]=c[i-1]+a[i]-a[i-1];\n            }\n            \n            if(b[n-1]==0)\n             d[n-1]=m-a[n-1];\n            for(int i=n-2;i>=0;i--)\n            {\n                  if(b[i]==1)\n                   d[i]=d[i+1];\n                  else\n                   d[i]=d[i+1]+a[i+1]-a[i];\n            }\n            \n            max=c[n-1];\n            if(b[n-1]==0)\n             max+=m-a[n-1];\n            //System.out.println(max);\n            for(int i=n-1;i>=0;i--)\n            {\n                  int u=a[i]-1;\n                  int v=a[i]+1;\n                  if(!hs.contains(u))\n                  {\n                        if(b[i]==0)\n                        {\n                             int r=1+m-a[i]-d[i]+c[i-1];\n                             max=Math.max(max,r);\n                        }\n                        else\n                        {\n                              int l=0;\n                              if(i>0)\n                               l=a[i-1];\n                              int r=c[i]-1+m-a[i]-d[i];\n                              max=Math.max(max,r);\n                        }\n                  }\n                  \n                  if(!hs.contains(v))\n                  {\n                        if(b[i]==0)\n                        {\n                           if(i==n-1)\n                           {\n                              int r=c[i]+1;\n                              max=Math.max(max,r);\n                           }\n                           else\n                           {\n                               int r=c[i]+1+m-a[i+1]-d[i+1];\n                               max=Math.max(max,r);\n                           }\n                        }\n                        else\n                        {\n                                if(i==n-1)\n                                {\n                                   int r=c[i]+m-a[i]-1;\n                                   max=Math.max(max,r);\n                                }\n                                else\n                                {\n                                    int r=c[i]+m-a[i+1]-d[i+1]+a[i+1]-1-a[i];  \n                                    max=Math.max(max,r);\n                                }\n                        }\n                  }\n            }\n            \n            System.out.println(max);\n      }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t StringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\tint previous = 0;\n\t\tint array[] = new int[n+1];\n\t\tint answer = 0;\n\t\t\n\t\tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarray[i] = Integer.parseInt(st1.nextToken());\n\t\t\tif(i % 2 == 0){\n\t\t\t\tanswer += (array[i] - previous);\n\t\t\t}\n\t\t\tprevious = array[i];\n\t\t}\n\t\t\n\t\tif(n % 2 == 0){\n\t\t\tanswer += (m - previous);\n\t\t}\n\t\tprevious = m;\n\t\tint max = Integer.MAX_VALUE;\n\t\t\n\t\twhile(n-- != 0){\n\t\t\tint temp = array[n];\n\t\t\tif(n%2 == 0){\n\t\t\t\tarray[n] = array[n+1] - (previous - array[n]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarray[n] = array[n+1] + (previous - array[n]);\n\t\t\t}\n\t\t\tprevious = temp;\n\t\t\tmax = Math.min(max, array[n]);\n\t\t}\n\t\tif(max>=-1){\n\t\t\tSystem.out.println(answer);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(answer - (max+1));\n\t\t}\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[])\n        Scanner sc=new Scanner(System.in);\n        String str=sc.next();\n        HashSet<Character> hs=new HashSet<>();\n        for(int i=0;i<str.length();i++)\n        {\n            hs.add(str.charAt(i));\n        }\n        if(hs.size()==1)\n        System.out.println(0);\n        else if(palin(str)==0)\n        System.out.println(str.length());\n        else\n        System.out.println(str.length()-1);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n=sc.nextInt();\n        int arr[]=new int[n];\n        for (int i=0;i<n;i++)\n        {\n            arr[i]=sc.nextInt();\n        }\n        for (int i=0;i<n;i++)\n        {\n            if (arr[i]>=0)\n            {\n                arr[i]=-arr[i]-1;\n            }\n        }\n        if (n%2!=0)\n        {\n            int min=0;\n            for (int i=1;i<n;i++)\n            {\n                if (arr[i]<arr[min])\n                    min=i;\n            }\n            arr[min]=-arr[min]-1;\n        }\n        for (int x:arr)\n        {\n            System.out.print(x + \" \");\n        }\n\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\t int array[]=new int[n];\n\t\t int max=Integer.MAX_VALUE;\n\t\t int index=0;\n\t\t for(int i=0;i<n;i++)\n\t\t {\n\t\t\t int k=sc.nextInt();\n\t\t\t array[i]=k;\n\t\t\t if(array[i]>=0)\n\t\t\t {\n\t\t\t\t array[i]=-array[i]-1;\n\t\t\t }\n\t\t\t if(array[i]<max)\n\t\t\t {\n\t\t\t\t max=array[i];\n\t\t\t\t index=i;\n\t\t\t\t \n\t\t\t }\n\t\t }\n\t\t if(n%2!=0)\n\t\t {\n\t\t\t array[index]=-array[index]-1;\n\t\t }\n\t\t for(int i=0;i<n;i++)\n\t\t {\n\t\t\t System.out.print(array[i]+\" \" );\n\t\t }\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i] = in.nextInt();\n\t\t}\n\t\tif (n % 2 == 0) {\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (arr[i] >= 0) {\n\t\t\t\t\tarr[i] = -1*arr[i]-1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint max = Integer.MIN_VALUE;\n\t\t\tint maxIndex = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tint elem = arr[i];\n\t\t\t\tif (elem < 0) {\n\t\t\t\t\telem = -1*elem-1;\n\t\t\t\t}\n\t\t\t\tif (elem > max) {\n\t\t\t\t\tmax = elem;\n\t\t\t\t\tmaxIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (i == maxIndex) {\n\t\t\t\t\tif (arr[i] < 0) {\n\t\t\t\t\t\tarr[i] = -1*arr[i]-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (arr[i] >= 0) {\n\t\t\t\t\t\tarr[i] = -1*arr[i]-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < n ;i++) {\n\t\t\tsb.append(arr[i] + \" \");\n\t\t\t\n\t\t}\n\t\tSystem.out.println(sb);\n\n\t}\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    CBanhMi solver = new CBanhMi();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) { new B(); IOUtils.exit(); }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[] ) throws Exception {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t    PrintWriter w = new PrintWriter(System.out);\n\t        \n\t    StringTokenizer st1 = new StringTokenizer(br.readLine());\n\t    n = ip(st1.nextToken());\n\t    a = ip(st1.nextToken());\n\t    b = ip(st1.nextToken());\n\t    \n\t    g = new ArrayList[n];\n\t    visited = new boolean[n];\n\t    ans = new int[n];\n\t    p = new int[n];\n\t    orig = new int[n];\n\t    \n\t    StringTokenizer st2 = new StringTokenizer(br.readLine());\n\t    for(int i=0;i<n;i++){\n\t    \tp[i] = ip(st2.nextToken());\n\t    \torig[i] = p[i];\n\t    \tg[i] = new ArrayList<Integer>();\n\t    }\n\t    \n\t    Arrays.sort(p);\n\t    \n\t    boolean impossible = false;\n\t    \n\t    for(int i=0;i<n;i++){\n\t    \tint i1 = Arrays.binarySearch(p, a-p[i]);\n\t    \tint i2 = Arrays.binarySearch(p, b-p[i]);\n\t    \tif(i1 < 0 || i1 >= n)\ti1 = -1;\n\t    \tif(i2 < 0 || i2 >= n)\ti2 = -1;\n\t    \t\n\t    \tif(i1 == -1 && i2 != -1) //if only (b-x) present then both must belong to set 1\n\t    \t\tg[i].add(i2);\n\t    \t\n\t    \telse if(i1 != -1 && i2 == -1) //if only (a-x) present then both must belong to set 0\n\t    \t\tg[i].add(i1);\n\t    \t\n\t    \telse if(i1 != -1 && i2 != -1){ //both present hence all 3 should be in same set,doesn't matter which\n\t    \t\tg[i].add(i1);\n\t    \t\tg[i].add(i2);\n\t    \t}\n\t    \telse{ //if none present then not possible to be in any set\n\t    \t\timpossible = true;\n\t    \t\tbreak;\n\t    \t}\n\t    }\n\t   \n\t    if(impossible){//if any element without both a-x and b-x found\n\t    \tSystem.out.println(\"NO\");\n\t    \treturn;\n\t    }\n\t    \n\t    //Edge between a and b means they must be present in same set\n\t    //ans[i] =0 or ans[i] =1 means it must be compulsory be present in that set\n\t    //ans[i] = -1 means no restrictions on it's set number\n\t    \n\t    LinkedList<Integer>\tq = new LinkedList();//Queue\n\t    for(int i=0;i<n;i++){\n\t    \t\n\t    \tif(visited[i] == false){\n\t    \t\t\n\t    \t\tArrayList<Integer>\tcurq = new ArrayList<Integer>();      //contains indices of all nodes in this connected component\n\t    \t\t\n\t    \t\tcurq.add(i);\n\t    \t\tq.add(i);\n\t    \t\tvisited[i] = true;\n\t    \n\t    \t\twhile(!q.isEmpty()){\n\t    \t\t\tint curr = q.remove();\n\t    \t\t\tint s = g[curr].size();\n\t    \t\t\tfor(int j=0;j<s;j++){\n\t    \t\t\t\tif(!visited[g[curr].get(j)]){\n\t    \t\t\t\t\tvisited[g[curr].get(j)] = true;\n\t    \t\t\t\t\tcurq.add(g[curr].get(j));\n\t    \t\t\t\t\tq.add(g[curr].get(j));\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t}\n\t    \n\t    \t\tboolean  found = true;\n\t    \t\t\n    \t\t\tint s = curq.size();\n\t    \t\tint temp[] = new int[s];\n    \t\t\tfor(int j=0;j<s;j++)\n    \t\t\t\ttemp[j] = p[curq.get(j)];\n    \t\t\tArrays.sort(temp);\n    \t\t\t\n    \t\t\tint anss = -1;\n    \t\t\t\n\t    \t\tfor(int j=0;j<s;j++){\n\t    \t\t\tint i3 = Arrays.binarySearch(temp, a - temp[j]);\n\t    \t\t\tif(i3 < 0 || i3 >= n){\n\t   \t\t\t\t\tfound = false;\n\t   \t\t\t\t\tbreak;\n\t   \t\t\t\t}\n\t   \t\t\t}\n\t    \t\t\t\n\t    \t\tif(!found){\n\t    \t\t\tfound = true;\n\t    \t\t\t\t\n\t    \t\t\tfor(int j=0;j<s;j++){\n\t\t    \t\t\tint i3 = Arrays.binarySearch(temp, b - temp[j]);\n\t\t   \t\t\t\tif(i3 < 0 || i3 >= n){\n\t\t   \t\t\t\t\tfound = false;\n\t\t   \t\t\t\t\tbreak;\n\t\t   \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t\t\n\t    \t\t\tif(found)\n\t    \t\t\t\tanss = 1;\n\t    \t\t\telse{\n\t    \t\t\t\timpossible = true;\n\t    \t\t\t\tbreak;\n\t    \t\t\t}\n\t    \t\t\t\t    \t\t\t\n\t    \t\t}\n\t    \t\telse\n\t    \t\t\tanss = 0;\n\t    \t\t\n\t    \t\tfor(int j=0;j<s;j++)\n\t    \t\t\tans[curq.get(j)] = anss;\n\t    \t\n\t    \t}\n\t    \t\n\t    \t\n\t    }\n\t    \n\t    if(!impossible){\n\t    \tw.println(\"YES\");\n    \t\tfor(int i=0;i<n;i++){\n    \t\t\tint i1 = Arrays.binarySearch(p, orig[i]);\n    \t\t\tif(ans[i1] == -1)\tans[i1] = 1;\n    \t\t\tw.print(ans[i1] + \" \");\n    \t\t}\n    \t\tw.println();\n    \t}\n\t    else\n\t    \tw.println(\"NO\");\n\t    \n\t    w.close(); \n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputReader in = new StreamInputReader(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\trun(in, out);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputUtil in = new InputUtil(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n\n        PrintWriter out = new PrintWriter(System.out);\n        Scanner in = new Scanner();\n        int n = in.nextInt();\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int[] data = new int[n];\n        int[]u = new int[n];\n        int[]s = new int[n];\n        HashMap<Integer, Integer> map = new HashMap();\n        \n        for(int i = 0; i < n; i++){\n            u[i] = i;\n            data[i] = in.nextInt();\n            map.put(data[i], i);\n        }        \n        boolean ok = true;\n        boolean[]check = new boolean[n];\n        for(int i = 0; i < n; i++){\n            if(map.containsKey(a - data[i])){\n                u[find(i, u)]= u[find(map.get(a- data[i]), u)];\n                s[i] |= 1;\n            }\n            if(map.containsKey(b - data[i])){\n                u[find(i, u)]= u[find(map.get(b- data[i]), u)];\n                s[i] |= 2;\n            }\n            \n        }\n        int[]g = new int[n];\n        Arrays.fill(g,3);\n        for(int i = 0;  i< n; i++){\n            if(s[i] == 0){\n                ok = false;\n                break;\n            }\n            g[find(i, u)] &= s[i];\n            if(g[find(i,u)] == 0){\n                ok = false;\n                break;\n            }\n        }\n        //System.out.println(Arrays.toString(g));\n        if(ok){\n            out.println(\"YES\");\n            for(int i = 0; i < n; i++){\n                if((g[find(i,u)] & 1) == 0){\n                    out.print(1 + \" \");\n                }else{\n                    out.print(0 + \" \");\n                }\n            }\n        }else{\n            out.println(\"NO\");\n        }\n\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tn = scan.nextInt();\n\t\ta = scan.nextInt();\n\t\tb = scan.nextInt();\n\t\t\n\t\tboolean[] where = new boolean[n];\n\t\tindexmap = new HashMap<Integer,Integer>();\n\t\tused = new HashSet<Integer>();\n\t\tnums = new HashSet<Integer>();\n\t\t\n\t\tif (a==b)\n\t\t\tb = 0;\n\t\t\n\t\tfor (int i = 0; i<n; i++) {\n\t\t\tint x = scan.nextInt();\n\t\t\tnums.add(x);\n\t\t\tindexmap.put(x,i);\n\t\t}\n\t\tscan.close();\n\t\t\n\t\tfor (int x : nums) {\n\t\t\tif (used.contains(x))\n\t\t\t\tcontinue;\n\t\t\tcgroup = new HashSet<Integer>();\n\t\t\tcgroup.add(x);\n\t\t\tg = -1;\n\t\t\trefg = -1;\n\t\t\tref = -1;\n\t\t\tused.add(x);\n\t\t\tif (!spawn(x,a,b) || !spawn(x,b,a)) {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (cgroup.size()%2==1 && ref == -1) {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tboolean w = true;\n\t\t\t\tif (g == a)\n\t\t\t\t\tw = false;\n\t\t\t\tfor (int k : cgroup) {\n\t\t\t\t\twhere[indexmap.get(k)] = w;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"YES\");\n\t\tfor (int i = 0; i<where.length; i++)\n\t\t\tif (where[i])\n\t\t\t\tSystem.out.print(\"1 \");\n\t\t\telse\n\t\t\t\tSystem.out.print(\"0 \");\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new B().solve();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        long a = in.nextLong();\n        long b = in.nextLong();\n        long[] x = new long[n];\n        for (int i = 0; i < n; i++) {\n            x[i] = in.nextLong();\n        }\n\n        Map<Long,Integer> idxmap = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            idxmap.put(x[i], i);\n        }\n        if (a == b) {\n            solve1(x, a, idxmap, out);\n            return;\n        }\n\n        int[] mark = new int[n];\n        Arrays.fill(mark, -1);\n        boolean isok = true;\n        for (int i = 0 ; i < n ; i++) {\n            if (mark[i] != -1) {\n                continue;\n            }\n            long w = x[i];\n            long aw = a - w;\n            long bw = b - w;\n            if (idxmap.containsKey(aw) && idxmap.containsKey(bw)) {\n                continue;\n            } else if (idxmap.containsKey(bw)) {\n                long w1 = w;\n                long w2 = bw;\n                while (true) {\n                    if (!idxmap.containsKey(w1) || !idxmap.containsKey(w2)) {\n                        break;\n                    }\n                    int i1 = idxmap.get(w1);\n                    int i2 = idxmap.get(w2);\n                    if (mark[i1] == 0 || mark[i2] == 0) {\n                        isok = false;\n                    }\n                    mark[i1] = 1;\n                    mark[i2] = 1;\n                    if (w1 + a - b == w2) {\n                        break;\n                    }\n                    w1 += (a - b);\n                    w2 += (b - a);\n                }\n            } else if (idxmap.containsKey(aw)){\n                long w1 = w;\n                long w2 = aw;\n                while (true) {\n                    if (!idxmap.containsKey(w1) || !idxmap.containsKey(w2)) {\n                        break;\n                    }\n                    int i1 = idxmap.get(w1);\n                    int i2 = idxmap.get(w2);\n                    if (mark[i1] == 1 || mark[i2] == 1) {\n                        isok = false;\n                    }\n                    mark[i1] = 0;\n                    mark[i2] = 0;\n                    if (w1 + b - a == w2) {\n                        break;\n                    }\n                    w1 += (b - a);\n                    w2 += (a - b);\n                }\n            }\n        }\n        for (int i = 0 ; i < n ; i++) {\n            if (mark[i] == -1) {\n                isok = false;\n                break;\n            }\n        }\n        if (isok) {\n            printAnswer(mark, out);\n        } else {\n            out.println(\"NO\");\n        }\n        out.flush();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CF_468B().solve();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n\n        Scanner in = new Scanner(new BufferedInputStream(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(\n                new OutputStreamWriter(System.out)));\n\n        while (in.hasNext()) {\n            int n = in.nextInt(), a = in.nextInt(), b = in.nextInt(), c = 0;\n            int[] p = new int[n];\n\n            TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();\n            for (int i = 0; i < n; i++) {\n                p[i] = in.nextInt();\n                map.put(p[i], i);\n            }\n            \n            if (a > b) {\n                int t = b;\n                b = a;\n                a = t;\n                c = 1;\n            }\n\n            boolean ok = true;\n            int[] cls = new int[n];\n            while (ok && map.size() > 0) {\n                Entry<Integer, Integer> last = map.lastEntry();\n                int v = last.getKey();\n                int idx = last.getValue();\n                if (map.containsKey(a - v)) {\n                    cls[idx] = 0;\n                    cls[map.get(a - v)] = 0;\n                    map.remove(v);\n                    map.remove(a -v);\n                } else if (map.containsKey(b - v)) {\n                    cls[idx] = 1;\n                    cls[map.get(b - v)] = 1;\n                    map.remove(v);\n                    map.remove(b -v);\n                } else \n                    ok = false;\n            }\n\n            if (!ok)\n                System.out.println(\"NO\");\n            else {\n                System.out.println(\"YES\");\n                for (int j = 0; j < cls.length; j++) {\n                    if (j != 0)\n                        System.out.print(\" \");\n                    System.out.print(c ^ cls[j]);\n                }\n                System.out.println();\n            }\n            out.flush();\n        }\n        in.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringBuilder qq = new StringBuilder();\n\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tString y[] = in.readLine().split(\" \");\n\t\tint n = Integer.parseInt(y[0]);\n\t\tint a = Integer.parseInt(y[1]);\n\t\tint b = Integer.parseInt(y[2]);\n\n\t\tint arr[] = new int[n];\n\t\tHashMap<Integer, Integer> mp = new HashMap();\n\t\ty = in.readLine().split(\" \");\n\t\tboolean flag = true;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i] = Integer.parseInt(y[i]);\n\t\t\tif (arr[i] >= a && arr[i] >= b) {\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\tmp.put(arr[i], i);\n\t\t}\n\n\t\tif (!flag) {\n\t\t\tSystem.out.println(\"NO\");\n\t\t\treturn;\n\t\t}\n\t\tboolean ch[] = new boolean[n];\n\t\tint ans[] = new int[n];\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint k = i;\n\n\t\t\twhile (true&&!ch[k]) {\n\t\t\t\t\n\t\t\t\tif (mp.containsKey(a - arr[k]) && !ch[mp.get(a - arr[k])]\n\t\t\t\t\t\t&& mp.containsKey(b - arr[k])\n\t\t\t\t\t\t&& !ch[mp.get(b - arr[k])]) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (mp.containsKey(a - arr[k])\n\t\t\t\t\t\t&& !ch[mp.get(a - arr[k])]) {\n\t\t\t\t\t//System.out.println(arr[k]);\n\t\t\t\t\tch[k] = true;\n\t\t\t\t\tans[k] = 0;\n\t\t\t\t\tch[mp.get(a - arr[k])] = true;\n\t\t\t\t\tans[mp.get(a - arr[k])] = 0;\n\t\t\t\t\tint s = b - (a - arr[k]);\n\t\t\t\t\tif (mp.containsKey(s)) {\n\t\t\t\t\t\tk = mp.get(s);\n\t\t\t\t\t} else\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t} else if (mp.containsKey(b - arr[k])\n\t\t\t\t\t\t&& !ch[mp.get(b - arr[k])]) {\n\t\t\t\t\tans[k] = 1;\n\t\t\t\t\tans[mp.get(b - arr[k])] = 1;\n\t\t\t\t\tch[k] = true;\n\t\t\t\t\tch[mp.get(b - arr[k])] = true;\n\n\t\t\t\t\tint s = a - (b - arr[k]);\n\t\t\t\t\tif (mp.containsKey(s)) {\n\t\t\t\t\t\tk = mp.get(s);\n\t\t\t\t\t} else\n\t\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t// System.out.println(arr[i] + \" \" + i);\n\t\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tqq.append(\"YES\\n\");\n\t\tfor (int i = 0; i < ans.length; i++) {\n\t\t\tqq.append(ans[i] + \" \");\n\t\t}\n\t\tSystem.out.println(qq);\n\n\t}\n", "complexity": "linear"}
{"code": "", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputReader r = new InputReader(System.in);\n        n = r.nextInt();\n        a = r.nextInt();\n        b = r.nextInt();\n        int[] list = new int[n];\n        for (int i = 0; i < n; i++) {\n            list[i] = r.nextInt();\n            arr.add(list[i]);\n        }\n        for (int x : arr) {\n            if (!visited.contains(x)) {\n                if (arr.contains(a - x) && arr.contains(b - x))\n                    continue;\n                if (arr.contains(a - x) || arr.contains(b - x)) {\n                    dfs(x, -1, 1);\n                } else {\n                    System.out.println(\"NO\");\n                    System.exit(0);\n                }\n            }\n        }\n        PrintWriter out = new PrintWriter(System.out);\n        out.println(\"YES\");\n        for (int i = 0; i < list.length; i++) {\n            if (result.get(list[i]) == null)\n                out.println(0);\n            else\n                out.println(result.get(list[i]));\n        }\n        out.close();\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{\n        BufferedReader buf =new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st =new StringTokenizer(buf.readLine());\n        n=parseInt(st.nextToken());\n        a=parseInt(st.nextToken());\n        b=parseInt(st.nextToken());\n        st =new StringTokenizer(buf.readLine());\n        array=new int[n];\n        original=new int [n];\n        for (int i=0;i<n;i++){\n            array[i]=parseInt(st.nextToken());\n            original[i]=array[i];\n        }\n        Arrays.sort(array);\nfor (int i=0;i<n;i++){\n    int k= Arrays.binarySearch(array,a-array[i]);\n    if (k>=0){\n        graphA.put(array[i],array[k]);\n        graphA.put(array[k],array[i]);\n    }\n}\nfor (int i=0;i<n;i++){\n    int k= Arrays.binarySearch(array,b-array[i]);\n    if (k>=0){\n        graphB.put(array[i],array[k]);\n        graphB.put(array[k],array[i]);\n    }\n    }\n\n\nfor (int i=0;i<n;i++){\n    Integer j=graphA.get(array[i]);\n    if (j!=null){\n        if (graphB.containsKey(array[i]) && graphB.containsKey(j)){\n            graphA.remove(array[i]);\n            graphA.remove(j);\n        }\n        else if (graphB.containsKey(array[i]) && !graphB.containsKey(j)){\n            \n            graphB.remove(graphB.get(array[i]));\n            graphB.remove(array[i]);\n        }\n        else if (!graphB.containsKey(array[i]) && graphB.containsKey(j)){\n            graphB.remove(graphB.get(j));\n            graphB.remove(j);\n        }\n        \n    }\n    \n}\n\nint [] res=new int [n];\nfor (int i=0;i<n;i++){\n    if (graphA.containsKey(original[i]))res[i]=0;\n    else if (graphB.containsKey(original[i])) res[i]=1;\n    else {\n        System.out.println(\"NO\");\n        return;\n    }\n}\nSystem.out.println(\"YES\");\nfor (int k:res)System.out.print(k+\" \");\n}\n", "complexity": "linear"}
{"code": "\tpublic static void main( String args[])\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n ; \n\t\t\n\t\tn = sc.nextInt();\n\t\ta = sc.nextInt();\n\t\tb = sc.nextInt();\n\t\t\n\t\thm = new HashMap<Integer,Integer>();\n\t\tarray = new int[n];\n\t\tmarked = new boolean[n];\n\t\t\n\t\tfor( int i = 0 ; i < n ; ++i )\n\t\t{\n\t\t\tarray[i] = sc.nextInt();\n\t\t\thm.put( array[i] , i );\n\t\t}\n\t\t\n\t\tif( a == b)\n\t\t{\n\t\t\tboolean flag = true ;\n\t\t\tfor( int i = 0 ; i < n ; ++i )\n\t\t\t\tif( !hm.containsKey( a - array[i]))\n\t\t\t\t\tflag = false; \n\t\t\t\n\t\t\tif( !flag) \n\t\t\t\tSystem.out.println( \"NO\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\tfor( int i = 0 ; i < n ; ++i)\n\t\t\t\t\tSystem.out.print(\"0 \");\n\t\t\t}\n\t\t}\n\t\t\n\t\telse\n\t\t{\n\t\t\t\n\t\t\tans = new int[n];\n\t\t\t\n\t\t\tfor( int i = 0 ; i < n ; ++i )\n\t\t\tif( marked[i] ) continue; \n\t\t\t\n\t\t\telse  // hadle odd , even and single self loops\n\t\t\t{\n\t\t\t\tif( hm.containsKey(a - array[i]) && !hm.containsKey(b - array[i]))\n\t\t\t\t{\n\t\t\t\t\tpropagateA(i);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse if( !hm.containsKey(a - array[i]) && hm.containsKey(b - array[i]))\n\t\t\t\t{\n\t\t\t\t\t// propagate b\n\t\t\t\t\tpropagateB(i);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse if(!hm.containsKey(a - array[i]) && !hm.containsKey(b - array[i]))\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfor( int i = 0 ; i < n ; ++i )\n\t\t\t\tif( marked[i] ) continue; \n\t\t\t\t\n\t\t\t\telse  // handle doule self loops , cycles\n\t\t\t\t{\n\t\t\t\t\t\tstart(i);\n\t\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"YES\");\n\t\t\tfor( int i = 0 ; i < n; ++i)\n\t\t\t\tSystem.out.print(ans[i] + \" \");\n\t\t\tSystem.exit(0);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tint n = readInt();\n\t\ta = readInt();\n\t\tb = readInt();\n\t\tts = new TreeSet<Integer>();\n\t\tint[] table = new int[n];\n\t\tfor(int i = 0; i<n; i++){\n\t\t\ttable[i] = readInt();\n\t\t\tts.add(table[i]);\n\t\t}\n\t\tA = new HashSet<Integer>();\n\t\tB = new HashSet<Integer>();\n\t\tnoAns = false;\n\t\tfor(Integer cur:ts){\n\t\t\tboolean fitsA = false;\n\t\t\tboolean fitsB = false;\n\t\t\tif(A.contains(cur) || B.contains(cur)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(ts.contains(a-cur)){\n\t\t\t\tfitsA = true;\n\t\t\t}\n\t\t\tif(ts.contains(b-cur)){\n\t\t\t\tfitsB = true;\n\t\t\t}\n\t\t\tif(fitsA && fitsB){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(!(fitsA || fitsB)){\n\t\t\t\tnoAns = true;\n\t\t\t}\n\t\t\telse if(fitsA){\n\t\t\t\ttour(cur, false);\n\t\t\t}\n\t\t\telse if(fitsB){\n\t\t\t\ttour(cur, true);\n\t\t\t}\n\t\t}\n\t\tfor(Integer cur:ts){\n\t\t\tif(A.contains(cur) || B.contains(cur)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tA.add(cur);\n\t\t\t}\n\t\t}\n\t\tif(!noAns){\n\t\t\tSystem.out.println(\"YES\");\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(int i = 0; i< n; i++){\n\t\t\t\tif(A.contains(table[i])){\n\t\t\t\t\tsb.append(\"0\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsb.append(\"1\");\n\t\t\t\t}\n\t\t\t\tsb.append(\" \");\n\t\t\t}\n\t\t\tSystem.out.println(sb);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) \n\t\tFileInputStream in = null;\n      \tFileOutputStream out = null;\n\t\tPrintStream ps = null ;\n\t\tInputStream is = null ;\n\t\ttry \n\t\t{\n         \tis = new FileInputStream(\"file.in\");\n         \tout = new FileOutputStream(\"file.out\");\n\t\t\tps = new PrintStream(out);\n        }\n\t\tcatch ( Exception e )\n\t\t{}\n\n        AB sd = new AB(System.in, System.out);\n        sd.solve();\n\t\ttry\n\t\t{\n        if (is != null) \n\t\t{\n\t      is.close();\n\t    }\n       \tif (out != null) {\n           \tout.close();\n       \t}\n\t\tif (ps != null) {\n           \tps.close();\n         }\n      \t}catch (Exception e){}\n\n\t\t//SquareDetector sd = new SquareDetector(System.in, System.out);\n        //sd.solve();\n    }\n}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) {\n        int N, a, b;\n        N = in.nextInt();\n        int[] label;\n        a = in.nextInt();\n        b = in.nextInt();\n        if (a < b) {\n            label = new int[] {0, 1};\n        } else {\n            int tmp = a;\n            a = b;\n            b = tmp;\n            label = new int[] {1, 0};\n        }\n        Node[] nodes = new Node[N];\n        for (int i = 0; i < N; i++) {\n            nodes[i] = new Node(in.nextInt());\n        }\n        TreeSet<Node> ts = new TreeSet<>();\n        for (int i = 0; i < N; i++) {\n            ts.add(nodes[i]);\n        }\n        while (!ts.isEmpty()) {\n            Node n = ts.first();\n            Node an = new Node(a - n.p);\n            Node bn = new Node(b - n.p);\n            SortedSet<Node> ats = ts.tailSet(an);\n            SortedSet<Node> bts = ts.tailSet(bn);\n            Node an2 = ats.isEmpty() ? null : ats.first();\n            Node bn2 = bts.isEmpty() ? null : bts.first();\n            Node n2 = null;\n            int l = 0;\n            if (bn2 != null && bn2.equals(bn)) {\n                n2 = bn2;\n                l = label[1];\n            } else if (an2 != null && an2.equals(an)) {\n                n2 = an2;\n                l = label[0];\n            } else {\n                NO();\n            }\n            if (!n.equals(n2)) {\n                ts.remove(n);\n                n.res = l;\n            }\n            ts.remove(n2);\n            n2.res = l;\n        }\n        out.println(\"YES\");\n        for (int i = 0; i < nodes.length; i++) {\n            if (i != 0) out.print(\" \");\n            out.print(nodes[i].res);\n        }\n        out.println();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new ProblemB3();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew B().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\twriter = new PrintWriter(System.out);\n\t\tpineapple();\n\t\treader.close();\n\t\twriter.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tMyScanner in = new MyScanner();\n\n\t\tint N = in.nextInt();\n\t\tint a = in.nextInt();\n\t\tint b = in.nextInt();\n\n\t\tint[] vals = new int[N];\n\t\tHashMap<Integer, Integer> val2Ind = new HashMap<Integer, Integer>();\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tvals[i] = in.nextInt();\n\t\t\tval2Ind.put(vals[i], i);\n\t\t}\n\n\t\tint[] setAssignment = new int[N];\n\t\tint[] friendA = new int[N];\n\t\tint[] friendB = new int[N];\n\t\tArrays.fill(setAssignment, -1);\n\t\tArrays.fill(friendA, -1);\n\t\tArrays.fill(friendB, -1);\n\n\t\t// Mark partners\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tInteger friendAInd = val2Ind.get(a - vals[i]);\n\t\t\tif (friendAInd != null) {\n\t\t\t\tfriendA[i] = friendAInd;\n\t\t\t}\n\n\t\t\tInteger friendBInd = val2Ind.get(b - vals[i]);\n\t\t\tif (friendBInd != null) {\n\t\t\t\tfriendB[i] = friendBInd;\n\t\t\t}\n\t\t}\n\n\t\t// Find those with only one friend\n\t\tQueue<Integer> toProc = new ArrayDeque<Integer>();\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tint friends = 0;\n\t\t\tif (friendA[i] != -1) {\n\t\t\t\tfriends++;\n\t\t\t}\n\t\t\tif (friendB[i] != -1) {\n\t\t\t\tfriends++;\n\t\t\t}\n\t\t\tif (friends == 1) {\n\t\t\t\ttoProc.add(i);\n\t\t\t}\n\t\t}\n\n\t\t// Process the one frienders\n\t\twhile (!toProc.isEmpty()) {\n\n\t\t\tint ind = toProc.poll();\n\n\t\t\tif (setAssignment[ind] != -1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (friendA[ind] != -1) {\n\n\t\t\t\tint other = friendA[ind];\n\t\t\t\tif (setAssignment[other] == -1) {\n\t\t\t\t\tsetAssignment[ind] = 0;\n\t\t\t\t\tsetAssignment[other] = 0;\n\t\t\t\t\t// Check other's friend\n\t\t\t\t\tif (friendB[other] != -1) {\n\t\t\t\t\t\tint otherOther = friendB[other];\n\t\t\t\t\t\tfriendB[otherOther] = -1;\n\t\t\t\t\t\ttoProc.add(otherOther);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\telse if (friendB[ind] != -1) {\n\n\t\t\t\tint other = friendB[ind];\n\t\t\t\tif (setAssignment[other] == -1) {\n\t\t\t\t\tsetAssignment[ind] = 1;\n\t\t\t\t\tsetAssignment[other] = 1;\n\t\t\t\t\t// Check other's friend\n\t\t\t\t\tif (friendA[other] != -1) {\n\t\t\t\t\t\tint otherOther = friendA[other];\n\t\t\t\t\t\tfriendA[otherOther] = -1;\n\t\t\t\t\t\ttoProc.add(otherOther);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t}\n\t\t\n\t\t\n\t\t// Process those with two friends\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\t\n\t\t\tif(setAssignment[i] != -1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif(friendA[i] == -1 && friendB[i] == -1) {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Only possibility should now be that both friends are possible\n\t\t\tsetAssignment[i] = 0;\n\t\t\tsetAssignment[friendA[i]] = 0;\n\t\t}\n\t\t\n\t\t// Print the result\n\t\tSystem.out.println(\"YES\");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tsb.append(setAssignment[i]);\n\t\t\tsb.append(\" \");\n\t\t}\n\t\tsb.deleteCharAt(sb.length() - 1);\n\t\tSystem.out.println(sb);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new ProblemB();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n        writer = new PrintWriter(System.out);\n        pineapple();\n        reader.close();\n        writer.close();\n    }\n", "complexity": "linear"}
{"code": "public static void main(String[] args) throws IOException\n    input.init(System.in);\n    PrintWriter out = new PrintWriter(System.out);\n    int n = input.nextInt(), a = input.nextInt(), b = input.nextInt();\n    Num[] data = new Num[n];\n    for(int i = 0; i<n; i++) data[i] = new Num(input.nextInt(), i);\n    int[] res = new int[n];\n    Arrays.fill(res,-1);\n    Arrays.sort(data);\n    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n    for(int i = 0; i<n; i++)\n        map.put(data[i].x, data[i].i);\n    boolean good = true;\n    for(int i = 0; i<n; i++)\n    {\n        if(res[data[i].i] != -1) continue;\n        int val = data[i].x;\n        if(!map.containsKey(a-val) && !map.containsKey(b-val))\n        {\n            good = false;\n            break;\n        }\n        if(!map.containsKey(a-val))\n        {\n            int other = map.get(b-val);\n            if(res[other] == 0)\n            {\n                good = false;\n                break;\n            }\n            res[other] = res[data[i].i] = 1;\n        }\n        else if(!map.containsKey(b-val))\n        {\n            int other = map.get(a-val);\n            if(res[other] == 1)\n            {\n                good = false;\n                break;\n            }\n            res[other] = res[data[i].i] = 0;\n        }\n        else\n        {\n            int cur = data[i].i;\n            int otherB = map.get(b-val), otherA = map.get(a-val);\n            if(b > a && res[otherB] != 0)\n            {\n                res[cur] = res[otherB] = 1;\n            }\n            else if(a>b && res[otherA] != 1)\n            {\n                res[cur] = res[otherA] = 0;\n            }\n            else if(b > a && res[otherA] != 1)\n            {\n                res[cur] = res[otherA] = 0;\n            }\n            else if(a > b && res[otherB] != 0)\n            {\n                res[cur] = res[otherB] = 1;\n            }\n            else if(b == a)\n            {\n                res[cur] = res[otherA] = 0;\n            }\n            else\n            {\n                good = false;\n                break;\n            }\n        }\n    }\n    if(good)\n    {\n        out.println(\"YES\");\n        for(int x: res) out.print(x+\" \");\n    }\n    else\n        out.println(\"NO\");\n    \n    out.close();\n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().solve();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Pr468B().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(new BufferedInputStream(System.in));\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(\n\t\t\t\tnew OutputStreamWriter(System.out)));\n\n\t\twhile (in.hasNext()) {\n\t\t\tint n = in.nextInt(), a = in.nextInt(), b = in.nextInt(), c = 0;\n\t\t\tint[] p = new int[n];\n\n\t\t\tTreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tp[i] = in.nextInt();\n\t\t\t\tmap.put(p[i], i);\n\t\t\t}\n\t\t\t\n\t\t\tif (a > b) {\n\t\t\t\tint t = b;\n\t\t\t\tb = a;\n\t\t\t\ta = t;\n\t\t\t\tc = 1;\n\t\t\t}\n\n\t\t\tboolean ok = true;\n\t\t\tint[] cls = new int[n];\n\t\t\twhile (ok && map.size() > 0) {\n\t\t\t\tEntry<Integer, Integer> last = map.lastEntry();\n\t\t\t\tint v = last.getKey();\n\t\t\t\tint idx = last.getValue();\n\t\t\t\tif (map.containsKey(a - v)) {\n\t\t\t\t\tcls[idx] = 0;\n\t\t\t\t\tcls[map.get(a - v)] = 0;\n\t\t\t\t\tmap.remove(v);\n\t\t\t\t\tmap.remove(a -v);\n\t\t\t\t} else if (map.containsKey(b - v)) {\n\t\t\t\t\tcls[idx] = 1;\n\t\t\t\t\tcls[map.get(b - v)] = 1;\n\t\t\t\t\tmap.remove(v);\n\t\t\t\t\tmap.remove(b -v);\n\t\t\t\t} else \n\t\t\t\t\tok = false;\n\t\t\t}\n\n\t\t\tif (!ok)\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\tfor (int j = 0; j < cls.length; j++) {\n\t\t\t\t\tif (j != 0)\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\tSystem.out.print(c ^ cls[j]);\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\tout.flush();\n\t\t}\n\t\tin.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args){\n\t\tnew Thread(null, new B(), \"\", 128 * (1L << 20)).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n\n\tScanner scanner = new Scanner(System.in);\n\ttry {\n\t    n = scanner.nextInt();\n\t    a = scanner.nextInt();\n\t    b = scanner.nextInt();\n\t    initNodes(scanner);\n\t    calculate();\n\t} finally {\n\t    scanner.close();\n\t}\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n\n        int n = nextInt();\n        int a = nextInt();\n        int b = nextInt();\n        List<Integer> nums = nextInts(n);\n        solve(a, b, nums);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint n = sc.nextInt();\n\t\tint a = sc.nextInt();\n\t\tint b = sc.nextInt();\n\n\t\tint[] numbers = new int[n];\n\t\tfor (int i = 0; i < numbers.length; i++) {\n\t\t\tnumbers[i] = sc.nextInt();\n\t\t}\n\n\t\tHashSet<Integer> hs = new HashSet<Integer>();\n\t\tfor (int i = 0; i < numbers.length; i++) {\n\t\t\ths.add(numbers[i]);\n\t\t}\n\n\t\tint[] belongs = new int[n];\n\t\tfor (int i = 0; i < belongs.length; i++) {\n\t\t\tbelongs[i] = -1;\n\t\t}\n\n\t\tHashMap<Integer, Integer> numberToIndex = new HashMap<Integer, Integer>();\n\t\tfor (int i = 0; i < numbers.length; i++) {\n\t\t\tnumberToIndex.put(numbers[i], i);\n\t\t}\n\n\t\tboolean possible = true;\n\n\t\tList<List<Integer>> layers = getLayers(numbers, a, b);\n\t\tfor (List<Integer> layer : layers) {\n\n\t\t\tif (layer.size() == 0) {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint starting = -1;\n\t\t\tfor (int j = 0; j < layer.size(); j++) {\n\t\t\t\tint cur = layer.get(j);\n\n\t\t\t\tint nei = 0;\n\t\t\t\tif (hs.contains(a - cur)) {\n\t\t\t\t\tnei++;\n\t\t\t\t}\n\n\t\t\t\tif (hs.contains(b - cur)) {\n\t\t\t\t\tnei++;\n\t\t\t\t}\n\n\t\t\t\tif (nei == 1 || (a == b && nei == 2)) {\n\t\t\t\t\tstarting = j;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (starting == -1)\n\t\t\t\tthrow new Error();\n\n\t\t\tint c = layer.get(starting);\n\t\t\tHashSet<Integer> layerset = new HashSet<Integer>(layer);\n\t\t\twhile (true) {\n\n\t\t\t\tif (layerset.contains(c) && layerset.contains(a - c)) {\n\t\t\t\t\tbelongs[numberToIndex.get(c)] = 0;\n\t\t\t\t\tbelongs[numberToIndex.get(a - c)] = 0;\n\t\t\t\t\tlayerset.remove(c);\n\t\t\t\t\tlayerset.remove(a - c);\n\t\t\t\t\tc = b - (a - c);\n\t\t\t\t} else if (layerset.contains(c) && layerset.contains(b - c)) {\n\t\t\t\t\tbelongs[numberToIndex.get(c)] = 1;\n\t\t\t\t\tbelongs[numberToIndex.get(b - c)] = 1;\n\t\t\t\t\tlayerset.remove(c);\n\t\t\t\t\tlayerset.remove(b - c);\n\t\t\t\t\tc = a - (b - c);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\tprintResult(belongs);\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new B().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tnew Main().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastInputReader in = new FastInputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Main e = new Main();  \n        e.work();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\twriter = new PrintWriter(System.out);\n\t\tpineapple();\n\t\treader.close();\n\t\twriter.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]){\n        FastScanner in = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = in.nextInt();\n        int a = in.nextInt();\n        int b = in.nextInt();\n        boolean change = false;\n        if(a > b){\n            int t = a;\n            a = b;\n            b = t;\n            change = true;\n        }\n        boolean[] inb = new boolean[n];\n        int[] numbers = new int[n];\n        TreeMap<Integer, Integer> num = new TreeMap<Integer, Integer>();\n        for(int i = 0; i < n; i++){\n            num.put(in.nextInt(), i);\n        }\n        boolean hasAns = true;\n        while(!num.isEmpty()){\n            Entry<Integer, Integer> last = num.lastEntry();\n            int key = last.getKey();\n            if(num.containsKey(a - key)){\n                num.remove(key);\n                num.remove(a - key);\n            } else if(num.containsKey(b - key)){\n                inb[num.get(key)] = true;\n                inb[num.get(b - key)] = true;\n                num.remove(key);\n                num.remove(b - key);\n            } else{\n                hasAns = false;\n                break;\n            }\n        }\n        if(hasAns){\n            out.println(\"YES\");\n            for(int i = 0; i < n && !change; i++){\n                if(inb[i]){\n                    out.print(\"1\");\n                } else{\n                    out.print(\"0\");\n                }\n                if(i != n - 1){\n                    out.print(\" \");\n                }\n            }\n            for(int i = 0; i < n && change; i++){\n                if(inb[i]){\n                    out.print(\"0\");\n                } else{\n                    out.print(\"1\");\n                }\n                if(i != n - 1){\n                    out.print(\" \");\n                }\n            }\n        } else{\n            out.println(\"NO\");\n        }\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Main e = new Main();  \n        e.work();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{\n        BufferedReader buf =new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st =new StringTokenizer(buf.readLine());\n        n=parseInt(st.nextToken());\n        a=parseInt(st.nextToken());\n        b=parseInt(st.nextToken());\n        st =new StringTokenizer(buf.readLine());\n        array=new int[n];\n        original=new int [n];\n        for (int i=0;i<n;i++){\n            array[i]=parseInt(st.nextToken());\n            original[i]=array[i];\n        }\n        Arrays.sort(array);\nfor (int i=0;i<n;i++){\n    int k= Arrays.binarySearch(array,a-array[i]);\n    if (k>=0){\n        graphA.put(array[i],array[k]);\n        graphA.put(array[k],array[i]);\n    }\n}\nfor (int i=0;i<n;i++){\n    int k= Arrays.binarySearch(array,b-array[i]);\n    if (k>=0){\n        graphB.put(array[i],array[k]);\n        graphB.put(array[k],array[i]);\n    }\n    }\n\n\nfor (int i=0;i<n;i++){\n    Integer j=graphA.get(array[i]);\n    if (j!=null){\n        if (graphB.containsKey(array[i]) && graphB.containsKey(j)){\n            graphA.remove(array[i]);\n            graphA.remove(j);\n        }\n        else if (graphB.containsKey(array[i]) && !graphB.containsKey(j)){\n            \n            graphB.remove(graphB.get(array[i]));\n            graphB.remove(array[i]);\n        }\n        else if (!graphB.containsKey(array[i]) && graphB.containsKey(j)){\n            graphB.remove(graphB.get(j));\n            graphB.remove(j);\n        }\n        \n    }\n    \n}\n\nint [] res=new int [n];\nfor (int i=0;i<n;i++){\n    if (graphA.containsKey(original[i]))res[i]=0;\n    else if (graphB.containsKey(original[i])) res[i]=1;\n    else {\n        System.out.println(\"NO\");\n        return;\n    }\n}\nSystem.out.println(\"YES\");\nfor (int k:res)System.out.print(k+\" \");\n}\n", "complexity": "linear"}
{"code": "  public static void main(String [] args) throws IOException {\n    // makes the reader and writer\n    BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n    PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n    \n    // read in n,a,b,ints\n    StringTokenizer st = new StringTokenizer(f.readLine());\n    int n = Integer.parseInt(st.nextToken());\n    int a = Integer.parseInt(st.nextToken());\n    int b = Integer.parseInt(st.nextToken());\n    st = new StringTokenizer(f.readLine());\n    HashMap<Integer,Integer> in = new HashMap<Integer,Integer>();\n    int[][] locs = new int[n][2];\n    for (int i=0;i<n;i++) {\n      int num = Integer.parseInt(st.nextToken());\n      locs[i] = new int[]{num,i};\n      in.put(num,i);\n    }\n    \n    // use greedy\n    boolean ok = true;\n    int swap = 0;\n    if (a>b) {swap = 1;\n      int t = a;\n      a = b;\n      b = t;\n    }\n    Arrays.sort(locs,new Comparator<int[]>() {\n      public int compare(int[] a, int[] b) {\n        return (new Integer(a[0])).compareTo(b[0]);\n      }\n    });\n    int[] inB = new int[n];\n    for (int[] i: locs) {\n      if (in.containsKey(b-i[0])) {\n        inB[i[1]] = 1-swap;\n        in.remove(b-i[0]);\n      } else if (in.containsKey(a-i[0])) {\n        inB[i[1]] = swap;\n        in.remove(a-i[0]);\n      } else ok = false;\n    }\n\n    // write to out\n    StringBuffer p = new StringBuffer();\n    for (int i=0;i<n-1;i++) {\n      p.append(inB[i]);\n      p.append(\" \");\n    }\n    p.append(inB[n-1]);\n    if (ok) {\n      out.println(\"YES\");\n      out.println(p.toString());\n    } else {\n      out.println(\"NO\");\n    }\n    \n    // cleanup\n    out.close();\n    System.exit(0);\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        char[] line = br.readLine().toCharArray();\n        int n = line.length;\n\n        int l = 0;\n        ArrayList<Node> groups = new ArrayList<>();\n        Node node = new Node(line[0], 1);\n        groups.add(node);\n        for (int i = 1; i < n; i++) {\n            if (line[i] == groups.get(l).letter) {\n                groups.get(l).count++;\n            } else {\n                node = new Node(line[i], 1);\n                groups.add(node);\n                l++;\n            }\n        }\n\n        int moves = 0;\n        ArrayList<Node> temp = new ArrayList<>();\n        while (groups.size() > 1) {\n            moves++;\n\n            l = groups.size();\n            groups.get(0).count--;\n            groups.get(l - 1).count--;\n            for (int i = 1; i < l - 1; i++) {\n                groups.get(i).count -= 2;\n            }\n\n            int p;\n            for (p = 0; p < l; p++) {\n                if (groups.get(p).count > 0) {\n                    temp.add(groups.get(p));\n                    break;\n                }\n            }\n            int lTemp = temp.size();\n            for (p++; p < l; p++) {\n                if (groups.get(p).count <= 0) {\n                    continue;\n                }\n                if (groups.get(p).letter == temp.get(lTemp - 1).letter) {\n                    temp.get(lTemp - 1).count += groups.get(p).count;\n                } else {\n                    temp.add(groups.get(p));\n                    lTemp++;\n                }\n            }\n\n            groups.clear();\n            groups.addAll(temp);\n            temp.clear();\n        }\n\n        System.out.println(moves);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\t int n = scanner.nextInt();\n\t\t \n\t\t List<Integer> as = new LinkedList<>();\n\t\t int[] as2 = new int[n];\n\t\t \n\t\t for (int i = 0; i < n; i++) {\n\t\t\t int a = scanner.nextInt();\n\t\t\t as.add(a);\n\t\t\t as2[i] = a;\n\t\t }\n\t\t \n\t\t //System.out.println(solve(as));\n\t\t System.out.println(solve2(as2));\n\t\t\n\t\tscanner.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        if(((m + 1) / 60 < a) || ((m + 1) / 60 == a && (m + 1) % 60 <= b)) {\n            out(0, 0);\n            System.exit(0);\n        }\n        for(int i = 2; i <= n; i++) {\n            int x = sc.nextInt();\n            int y = sc.nextInt();\n\n            int bb = b + 2 * m + 2;\n            int aa = a + bb / 60;\n            bb %= 60;\n\n            if((aa < x) || (aa == x && bb <= y)) {\n                b = b + m + 1;\n                a = a + b / 60;\n                b %= 60;\n                out(a, b);\n                System.exit(0);\n            }\n            a = x;\n            b = y;\n        }\n        b = b + m + 1;\n        a = a + b / 60;\n        b = b % 60;        \n        out(a, b);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n        long n = Long.parseLong(st.nextToken()) , m = Long.parseLong(st.nextToken());\n        \n        long sum = 0;\n        \n        for(int i=0;i<m;i++){\n        \tStringTokenizer st1 = new StringTokenizer(br.readLine());\n            sum+= n* Long.parseLong(st1.nextToken());\n            Long a= Long.parseLong(st1.nextToken());\n            if(a < 0){\n                if(n % 2 == 0)\n                    sum += n*n / 4*a;\n                else{\n                    sum += (n/2) * (n/2+1) * a;\n                }\n            }\n            else\n                sum += (a*(n) * (n-1) / 2);\n            \n        }\n        System.out.println((double)sum/n);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new SequenceTransformation().solve();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n        solve(in, out);\n        in.close();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        long size = scan.nextLong();\n        int numberOfSpecial = scan.nextInt();\n        long pageSize = scan.nextLong();\n\n        long[] specialItemsArray = new long[numberOfSpecial];\n        for (int i = 0; i < numberOfSpecial; i++) {\n            specialItemsArray[i] = scan.nextLong();\n        }\n\n        int totalRemoved = 0;\n        int step = 0;\n\n        long currentPageIndex = BigDecimal.valueOf(specialItemsArray[0]).divide(BigDecimal.valueOf(pageSize),2, RoundingMode.UP).setScale(0, RoundingMode.CEILING).longValue();\n        int specialItemArrayIndex = 1;\n\n        while (specialItemArrayIndex < numberOfSpecial) {\n            long pageIndex = BigDecimal.valueOf(specialItemsArray[specialItemArrayIndex] - totalRemoved).divide(BigDecimal.valueOf(pageSize),2,RoundingMode.UP).setScale(0, RoundingMode.CEILING).longValue();\n            if (currentPageIndex != pageIndex) {\n                step++;\n                totalRemoved = specialItemArrayIndex;\n                currentPageIndex =  BigDecimal.valueOf(specialItemsArray[specialItemArrayIndex] - totalRemoved).divide(BigDecimal.valueOf(pageSize),2,RoundingMode.UP).setScale(0, RoundingMode.CEILING).longValue();\n            }\n            specialItemArrayIndex++;\n        }\n\n\n        System.out.println(step + 1);\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        \n        long n = sc.nextLong();\n        int m = sc.nextInt();\n        long k = sc.nextLong();\n        long[] p = new long[m];\n        long del = 0;\n        long nb = 1;\n        int op = 0;\n        for(int i=0;i<m;i++) p[i] = sc.nextLong();\n        for(int i=1;i<m;i++){\n            if(page(p[i]-del,k)!=page(p[i-1]-del,k)){\n                \n                del += nb;\n                nb = 1;\n                op++;\n                \n            }else{\n                nb++;\n                \n            }\n        }\n        if(nb!=0) op++;\n        \n        System.out.println(op);\n        \n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(null,null,\"BaZ\",1<<25)\n        {\n            public void run()\n            {\n                try\n                {\n                    solve();\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint Q = readInt();\n\t\twhile(Q-- > 0) {\n\t\t\tlong n = readLong(), m = readLong(), k = readLong();\n\t\t\tif(Math.max(n, m) > k) println(-1);\n\t\t\telse {\n\t\t\t\tlong ans = k;\n\t\t\t\tif(n%2 != k%2) ans--;\n\t\t\t\tif(m%2 != k%2) ans--;\n\t\t\t\tprintln(ans);\n\t\t\t}\n\t\t}\n\t\texit();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n, k;\n        n = sc.nextInt();\n        k = sc.nextInt();\n\n        int a = (n - k) / 2;\n\n        StringBuilder s = new StringBuilder();\n\n        int i;\n        while (s.length() < n) {\n            i = 0;\n            while (i < a && s.length() < n) {\n                s.append(\"0\");\n                i++;\n            }\n            if (s.length() < n) s.append(\"1\");\n        }\n\n        System.out.println(s);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n        solve(in, out);\n        in.close();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "  public static void main (String[] args)\n    new CF111111  ();\n  }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine());\n        StringTokenizer st;\n        for(int z=0;z<t;z++){\n            st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            st = new StringTokenizer(br.readLine());\n            int min=1;\n            int max=1;\n            for(int i=0;i<n;i++){\n                int k = Integer.parseInt(st.nextToken());\n                if(max<k){\n                    min = max;\n                    max = k;\n                }else if(min<k){\n                    min = k;\n                }\n            }\n            int res = Math.min(n-2,min-1);\n            System.out.println(res);\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n;\n        n = sc.nextInt();\n        int[] arr = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        int min = 1000000000, temp;\n\n        for (int i = 0; i < n; i++) {\n            temp = arr[i] / Math.max(i, n - 1 - i);\n            if (temp < min)\n                min = temp;\n//            System.out.println(i + \" \" + temp);\n        }\n\n        System.out.println(min);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        Scanner stdin = new Scanner(System.in);\n        /*int n = stdin.nextInt();\n        for(int i = 0; i < n; i++)\n        {\n        \ttest(stdin);\n        }*/\n        test(stdin);\n        stdin.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint a1 = Integer.parseInt(st.nextToken());\n\t\tint a2 = Integer.parseInt(st.nextToken());\n\t\tint a3 = Integer.parseInt(st.nextToken());\n\t\tint a4 = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[10];\n\t\taa[0] = aa[1] = aa[2] = aa[3] = a1;\n\t\taa[4] = aa[5] = aa[6] = a2;\n\t\taa[7] = aa[8] = a3;\n\t\taa[9] = a4;\n\t\tint[][] ww = new int[10][4];\n\t\tww[0][0] = 1;\n\t\tww[1][1] = 1;\n\t\tww[2][2] = 1;\n\t\tww[3][3] = 1;\n\t\tww[4][0] = ww[4][1] = 2;\n\t\tww[5][1] = ww[5][2] = 2;\n\t\tww[6][2] = ww[6][3] = 2;\n\t\tww[7][0] = ww[7][1] = ww[7][2] = 3;\n\t\tww[8][1] = ww[8][2] = ww[8][3] = 3;\n\t\tww[9][0] = ww[9][1] = ww[9][2] = ww[9][3] = 4;\n\t\tchar[][] cc = new char[4][n + 8];\n\t\tfor (int k = 0; k < 4; k++) {\n\t\t\tchar[] c_ = cc[k];\n\t\t\tbr.readLine().getChars(0, n, c_, 4);\n\t\t\tc_[0] = c_[1] = c_[2] = c_[3]\n\t\t\t\t= c_[n + 4] = c_[n + 5] = c_[n + 6] = c_[n + 7] = '.';\n\t\t}\n\t\tint[][][][] dp = new int[5][5][5][5];\n\t\tint[][][][] dq = new int[5][5][5][5];\n\t\tfill(dp, INF);\n\t\tdp[4][4][4][4] = 0;\n\t\tint[] hh = new int[4];\n\t\tfor (int i = 0; i < n + 4; i++) {\n\t\t\tfor (int h0 = 0; h0 <= 4; h0++)\n\t\t\t\tfor (int h1 = 0; h1 <= 4; h1++)\n\t\t\t\t\tfor (int h2 = 0; h2 <= 4; h2++)\n\t\t\t\t\t\tfor (int h3 = 0; h3 <= 4; h3++)\n\t\t\t\t\t\t\tfor (int s = 0; s < 10; s++) {\n\t\t\t\t\t\t\t\thh[0] = h0;\n\t\t\t\t\t\t\t\thh[1] = h1;\n\t\t\t\t\t\t\t\thh[2] = h2;\n\t\t\t\t\t\t\t\thh[3] = h3;\n\t\t\t\t\t\t\t\tfor (int k = 0; k < 4; k++) {\n\t\t\t\t\t\t\t\t\tint h = ww[s][k];\n\t\t\t\t\t\t\t\t\tif (hh[k] < h) {\n\t\t\t\t\t\t\t\t\t\twhile (h < 4 && cc[k][i + h] == '.')\n\t\t\t\t\t\t\t\t\t\t\th++;\n\t\t\t\t\t\t\t\t\t\thh[k] = h;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tint x = dp[h0][h1][h2][h3] + aa[s];\n\t\t\t\t\t\t\t\tif (dp[hh[0]][hh[1]][hh[2]][hh[3]] > x)\n\t\t\t\t\t\t\t\t\tdp[hh[0]][hh[1]][hh[2]][hh[3]] = x;\n\t\t\t\t\t\t\t}\n\t\t\tfill(dq, INF);\n\t\t\tfor (int h0 = 1; h0 <= 4; h0++) {\n\t\t\t\thh[0] = h0 < 4 || cc[0][i + 4] == '*' ? h0 - 1 : 4;\n\t\t\t\tfor (int h1 = 1; h1 <= 4; h1++) {\n\t\t\t\t\thh[1] = h1 < 4 || cc[1][i + 4] == '*' ? h1 - 1 : 4;\n\t\t\t\t\tfor (int h2 = 1; h2 <= 4; h2++) {\n\t\t\t\t\t\thh[2] = h2 < 4 || cc[2][i + 4] == '*' ? h2 - 1 : 4;\n\t\t\t\t\t\tfor (int h3 = 1; h3 <= 4; h3++) {\n\t\t\t\t\t\t\thh[3] = h3 < 4 || cc[3][i + 4] == '*' ? h3 - 1 : 4;\n\t\t\t\t\t\t\tint x = dp[h0][h1][h2][h3];\n\t\t\t\t\t\t\tif (dq[hh[0]][hh[1]][hh[2]][hh[3]] > x)\n\t\t\t\t\t\t\t\tdq[hh[0]][hh[1]][hh[2]][hh[3]] = x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[][][][] tmp = dp; dp = dq; dq = tmp;\n\t\t}\n\t\tSystem.out.println(dp[4][4][4][4]);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) {\n\t    Scanner sc = new Scanner (System.in);\n\t    int n = sc.nextInt();\n\t    int a = sc.nextInt();\n\t    int b = sc.nextInt();\n\t    int c = sc.nextInt();\n\t    int ans = 0;\n\t    int t= sc.nextInt();\n\t    int arr[] = new int[n];\n\t    for(int i=0;i<n;i++){\n\t        int nn = sc.nextInt();\n\t        ans+=a;\n\t        if(b<c){\n\t            ans += (t-nn) * (c - b);\n\t        }\n\t    }\n\t    System.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        int result = 1;\n        int thomasSum = 0;\n        StringTokenizer stk;\n        stk = new StringTokenizer(br.readLine());\n        int first = Integer.parseInt(stk.nextToken());\n        int second = Integer.parseInt(stk.nextToken());\n        int third = Integer.parseInt(stk.nextToken());\n        int fourth = Integer.parseInt(stk.nextToken());\n        thomasSum = first + second + third + fourth;\n        int tmp;\n        for (int i = 1; i < n; i++) {\n            stk = new StringTokenizer(br.readLine());\n            first = Integer.parseInt(stk.nextToken());\n            second = Integer.parseInt(stk.nextToken());\n            third = Integer.parseInt(stk.nextToken());\n            fourth = Integer.parseInt(stk.nextToken());\n            tmp = first + second + third + fourth;\n            if (tmp > thomasSum)\n                result++;\n        }\n        System.out.println(result);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] ar = new int[200];\n\t\t\n\t\tString str = in.next();\n\t\tfor(int i = 0; i < str.length(); i++)\n\t\t\tar[ str.charAt(i) ]++;\n\t\t\t\n\t\tint ans = 100000;\n\t\t\n\t\tfor(int i = 'A'; i < 'A' + m; i++)\n\t\t\tans = Math.min(ans, ar[i]);\n\t\tans *= m;\n\t\t\n\t\tSystem.out.println(ans);\n\t\t\n\t\tin.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Solve());\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new TaskA(),\"TaskA\",1<<26).start();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[])\n        Reader sc=new Reader();\n        PrintWriter out=new PrintWriter(System.out);\n        int n=sc.i();\n        String s1=sc.s();\n        String s2=sc.s();\n        int pos1=-1;\n        int pos2=-1;\n        int arr[][][]=new int[100][100][2];\n        for(int i=0;i<n;i++)\n        {\n            if(s1.charAt(i)!=s2.charAt(i))\n            {\n                if(arr[s2.charAt(i)-97][s1.charAt(i)-97][0]==1)\n                {\n                    pos2=i;\n                    pos1=arr[s2.charAt(i)-97][s1.charAt(i)-97][1];\n                    break;\n                }\n                arr[s1.charAt(i)-97][s2.charAt(i)-97][0]=1;\n                arr[s1.charAt(i)-97][s2.charAt(i)-97][1]=i;\n            }\n        }\n        int ham=0;\n        for(int i=0;i<n;i++)\n        {\n            if(s1.charAt(i)!=s2.charAt(i))\n            ham++;\n        }\n        if(pos1!=-1&&pos2!=-1)\n        {\n            System.out.println(ham-2);\n            System.out.println(pos1+1+\" \"+(pos2+1));\n            System.exit(0);\n        }\n        \n        int arr1[][]=new int[100][2];\n        int arr2[][]=new int[100][2];\n        for(int i=0;i<n;i++)\n        {\n            if(s1.charAt(i)!=s2.charAt(i))\n            {\n                if(arr1[s1.charAt(i)-97][0]==1)\n                {\n                    pos2=i;\n                    pos1=arr1[s1.charAt(i)-97][1];\n                    break;\n                }\n                if(arr2[s2.charAt(i)-97][0]==1)\n                {\n                    pos2=i;\n                    pos1=arr2[s2.charAt(i)-97][1];\n                    break;\n                }\n                arr1[s2.charAt(i)-97][0]=1;\n                arr1[s2.charAt(i)-97][1]=i;\n                arr2[s1.charAt(i)-97][0]=1;\n                arr2[s1.charAt(i)-97][1]=i;\n            }\n        }\n        if(pos1!=-1&&pos2!=-1)\n        {\n            System.out.println(ham-1);\n            System.out.println(pos1+1+\" \"+(pos2+1));\n            System.exit(0);\n        }\n        System.out.println(ham);\n        System.out.println(pos1+\" \"+pos2);\n    }\n", "complexity": "linear"}
{"code": "\t\t\t\t\t\t\t\t\t\t\t\tpublic static void main(String args[]) throws Exception\n\t\t\t\t\t\t\t\t\t\t\t\t\tnew Thread(null, new Solution1(),\"Solution1\",1<<26).start();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tString a = scan.next();\n\t\tString b = scan.next();\n\t\t\n\t\tint[][] mismatch = new int[26][26];\n\t\tfor(int i = 0; i < 26; i++) Arrays.fill(mismatch[i], -1);\n\t\tint[][] pair = new int[2][26];\n\t\tfor(int i = 0; i < 2; i++) Arrays.fill(pair[i], -1);\n\t\tint hd = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(a.charAt(i) != b.charAt(i)) {\n\t\t\t\thd++;\n\t\t\t\tmismatch[a.charAt(i)-'a'][b.charAt(i)-'a'] = i;\n\t\t\t\tpair[0][a.charAt(i)-'a'] = i;\n\t\t\t\tpair[1][b.charAt(i)-'a'] = i;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < 26; i++) {\n\t\t\tfor(int j = i+1; j < 26; j++) {\n\t\t\t\tif(mismatch[i][j] > -1 && mismatch[j][i] > -1) {\n\t\t\t\t\tSystem.out.println(hd-2);\n\t\t\t\t\tSystem.out.println((mismatch[i][j]+1)+\" \"+(mismatch[j][i]+1));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(a.charAt(i) != b.charAt(i)) {\n\t\t\t\t//try a gets b's letter\n\t\t\t\tif(pair[0][b.charAt(i)-'a'] > -1) {\n\t\t\t\t\tSystem.out.println(hd-1);\n\t\t\t\t\tSystem.out.println((i+1)+\" \"+(pair[0][b.charAt(i)-'a']+1));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(hd);\n\t\tSystem.out.println(\"-1 -1\");\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        // Scanner scan = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        int n = Integer.parseInt(bf.readLine());\n        int counter = 0;\n        for(int i=0; i<2*n/3; i++) System.out.println(\"0 \" + i);\n        for(int i=0; i<n-2*n/3; i++) System.out.println(\"3 \" + (2*i+1));\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FS in = new FS(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        \n        int n = in.nextInt();\n        Integer[] arr = new Integer[n];\n        int numZ = 0;\n        for(int i = 0; i < n; i++) {\n            arr[i] = in.nextInt();\n            if(arr[i] == 0) numZ++;\n        }\n        \n        Arrays.sort(arr);\n        \n        \n        if(numZ > 1) {\n            System.out.println(\"cslnb\");\n            return;\n        }\n        int numDup = 0;\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr[i];\n            if(i != 0) {\n                if(arr2[i] == arr2[i-1]) {\n                    arr2[i-1]--;\n                    numDup++;\n                }\n            }\n        }\n        \n        if(numDup > 1) {\n            System.out.println(\"cslnb\");\n            return;\n        }\n        \n        \n        for(int i = 0; i < n; i++) {\n            if(i != 0) {\n                if(arr2[i] == arr2[i-1]) {\n                    System.out.println(\"cslnb\");\n                    return;\n                }\n            }\n        }\n        long num = 0;\n        if(numDup == 1) num++;\n        for(int i = 0; i < n; i++) {\n            num += arr2[i]-i;\n        }\n        \n        if(num%2 == 0) {\n            System.out.println(\"cslnb\");\n        } else {\n            System.out.println(\"sjfnb\");\n        }\n        \n\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        new temp().solve();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Thread(null, new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tnew Main().solve();\n\t\t\t}\n\t\t}, \"1\", 1 << 26).start();\n\t\t//new Main().solve();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        ACodehorsesTShirts solver = new ACodehorsesTShirts();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        int n = nextInt();\n        int a[] = new int[9];\n        int b[] = new int[9];\n        for(int i=0;i<n;i++){\n            String s = next();\n            if(s.equals(\"M\")){\n                a[0]++;\n            }else if (s.equals(\"L\")){\n                a[1]++;\n            }\n            else if (s.equals(\"XL\")){\n                a[2]++;\n            }\n            else if (s.equals(\"XXL\")){\n                a[3]++;\n            }\n            else if (s.equals(\"XXXL\")){\n                a[4]++;\n            }\n            else if (s.equals(\"S\")){\n                a[5]++;\n            }\n            else if (s.equals(\"XS\")){\n                a[6]++;\n            }\n            else if (s.equals(\"XXS\")){\n                a[7]++;\n            }\n            else if (s.equals(\"XXXS\")){\n                a[8]++;\n            }\n        }\n        for(int i=0;i<n;i++){\n            String s = next();\n            if(s.equals(\"M\")){\n                b[0]++;\n            }else if (s.equals(\"L\")){\n                b[1]++;\n            }\n            else if (s.equals(\"XL\")){\n                b[2]++;\n            }\n            else if (s.equals(\"XXL\")){\n                b[3]++;\n            }\n            else if (s.equals(\"XXXL\")){\n                b[4]++;\n            }\n            else if (s.equals(\"S\")){\n                b[5]++;\n            }\n            else if (s.equals(\"XS\")){\n                b[6]++;\n            }\n            else if (s.equals(\"XXS\")){\n                b[7]++;\n            }\n            else if (s.equals(\"XXXS\")){\n                b[8]++;\n            }\n        }\n\n        int ans = 0;\n        ans+=Math.abs(a[2]-b[2]);\n        ans+=Math.abs(a[3]-b[3]);\n        ans+=Math.abs(a[4]-b[4]);\n        int max = Math.abs(a[0]-b[0]);\n        max = max(max,Math.abs(a[1]-b[1]));\n        max = max(max,Math.abs(a[5]-b[5]));\n        ans+=max;\n        out.print(ans);\n        out.flush();\n    }\n", "complexity": "linear"}
{"code": "", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tString[] sizes = {\"XXXS\", \"XXS\", \"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\", \"XXXL\"};\n\t\tint n = in.nextInt();\n\t\tHashMap<String, Integer> a = new HashMap<>();\n\t\tHashMap<String, Integer> b = new HashMap<>();\n\t\tfor (String s : sizes) {\n\t\t\ta.put(s, 0);\n\t\t\tb.put(s, 0);\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString s = in.next();\n\t\t\ta.put(s, a.get(s) + 1);\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString s = in.next();\n\t\t\tb.put(s, b.get(s) + 1);\n\t\t}\n\t\tfor (String s : sizes) {\n\t\t\tint cut = Math.min(a.get(s), b.get(s));\n\t\t\ta.put(s, a.get(s) - cut);\n\t\t\tb.put(s, b.get(s) - cut);\n\t\t}\n\t\tint changes = 0;\n\t\tfor (String s : sizes)\n\t\t\tchanges += a.get(s);\n\t\tSystem.out.println(changes);\n\t}\n", "complexity": "linear"}
{"code": "  public static void main (String[] argv) \n\t  new Main();\n  } \n", "complexity": "linear"}
{"code": "    public static void main(String[] Args)   {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        String s0 = sc.nextLine();\n        int s = 0; // S\n        int m = 0;\n        int l = 0;\n        int s1 = 0;\n        int l1 = 0;\n        int s2 = 0;\n        int l2 = 0;\n        int s3 = 0;\n        int l3 = 0;\n        for (int i = 0; i < n; i++)  {\n            s0 = sc.nextLine();\n            if (s0.charAt(0) == 'S') s++;\n            if (s0.charAt(0) == 'M') m++;\n            if (s0.charAt(0) == 'L') l++;\n            if (s0.charAt(0) == 'X' && s0.length() == 2 && s0.charAt(s0.length() - 1) == 'S') s1++;\n            if (s0.charAt(0) == 'X' && s0.length() == 3 && s0.charAt(s0.length() - 1) == 'S') s2++;\n            if (s0.charAt(0) == 'X' && s0.length() == 4 && s0.charAt(s0.length() - 1) == 'S') s3++;\n            if (s0.charAt(0) == 'X' && s0.length() == 2 && s0.charAt(s0.length() - 1) == 'L') l1++;\n            if (s0.charAt(0) == 'X' && s0.length() == 3 && s0.charAt(s0.length() - 1) == 'L') l2++;\n            if (s0.charAt(0) == 'X' && s0.length() == 4 && s0.charAt(s0.length() - 1) == 'L') l3++;\n        }    \n        int rs = 0; // S\n        int rm = 0;\n        int rl = 0;\n        int rs1 = 0;\n        int rl1 = 0;\n        int rs2 = 0;\n        int rl2 = 0;\n        int rs3 = 0;\n        int rl3 = 0;\n        for (int i = 0; i < n; i++)  {\n            s0 = sc.nextLine();\n            if (s0.charAt(0) == 'S') rs++;\n            if (s0.charAt(0) == 'M') rm++;\n            if (s0.charAt(0) == 'L') rl++;\n            if (s0.charAt(0) == 'X' && s0.length() == 2 && s0.charAt(s0.length() - 1) == 'S') rs1++;\n            if (s0.charAt(0) == 'X' && s0.length() == 3 && s0.charAt(s0.length() - 1) == 'S') rs2++;\n            if (s0.charAt(0) == 'X' && s0.length() == 4 && s0.charAt(s0.length() - 1) == 'S') rs3++;\n            if (s0.charAt(0) == 'X' && s0.length() == 2 && s0.charAt(s0.length() - 1) == 'L') rl1++;\n            if (s0.charAt(0) == 'X' && s0.length() == 3 && s0.charAt(s0.length() - 1) == 'L') rl2++;\n            if (s0.charAt(0) == 'X' && s0.length() == 4 && s0.charAt(s0.length() - 1) == 'L') rl3++;\n        }     \n        int ans = Math.abs(s1 - rs1) + Math.abs(s2 - rs2) + Math.abs(s3 - rs3) + (Math.abs(s - rs) + Math.abs(l - rl) + Math.abs(m - rm))/2;\n        System.out.println(ans);\n            \n   }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter printer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint nE = Integer.parseInt(reader.readLine());\n\n\t\tint[][] cnt = new int[][] { { 0, 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };\n\n\t\tfor (int i = 0; i < nE; i++) {\n\t\t\tString nxt = reader.readLine();\n\t\t\tif (nxt.equals(\"S\")) {\n\t\t\t\tcnt[0][0]++;\n\t\t\t}\n\t\t\tif (nxt.equals(\"M\")) {\n\t\t\t\tcnt[0][1]++;\n\t\t\t}\n\t\t\tif (nxt.equals(\"L\")) {\n\t\t\t\tcnt[0][2]++;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XS\")) {\n\t\t\t\tcnt[1][0]++;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XL\")) {\n\t\t\t\tcnt[1][1]++;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XXS\")) {\n\t\t\t\tcnt[2][0]++;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XXL\")) {\n\t\t\t\tcnt[2][1]++;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XXXS\")) {\n\t\t\t\tcnt[3][0]++;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XXXL\")) {\n\t\t\t\tcnt[3][1]++;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < nE; i++) {\n\t\t\tString nxt = reader.readLine();\n\t\t\tif (nxt.equals(\"S\")) {\n\t\t\t\tcnt[0][0]--;\n\t\t\t}\n\t\t\tif (nxt.equals(\"M\")) {\n\t\t\t\tcnt[0][1]--;\n\t\t\t}\n\t\t\tif (nxt.equals(\"L\")) {\n\t\t\t\tcnt[0][2]--;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XS\")) {\n\t\t\t\tcnt[1][0]--;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XL\")) {\n\t\t\t\tcnt[1][1]--;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XXS\")) {\n\t\t\t\tcnt[2][0]--;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XXL\")) {\n\t\t\t\tcnt[2][1]--;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XXXS\")) {\n\t\t\t\tcnt[3][0]--;\n\t\t\t}\n\t\t\tif (nxt.equals(\"XXXL\")) {\n\t\t\t\tcnt[3][1]--;\n\t\t\t}\n\t\t}\n\n\t\tint ans = 0;\n\t\tfor (int i = 1; i <= 3; i++) {\n\t\t\tans += Math.abs(cnt[i][0]);\n\t\t}\n\n\t\tint max = 0;\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tmax = Math.max(max, Math.abs(cnt[0][i]));\n\t\t}\n\t\tans += max;\n\t\tprinter.println(ans);\n\t\tprinter.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(reader.readLine());\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\n        String input;\n        for (int i = 0; i < n; i++) {\n            input = reader.readLine();\n            if (map.containsKey(input)) {\n                map.put(input, map.get(input) + 1);\n            } else {\n                map.put(input, 1);\n            }\n        }\n        int change = 0;\n        for (int i = 0; i < n; i++) {\n            input = reader.readLine();\n            if (map.containsKey(input)) {\n                map.put(input, map.get(input) - 1);\n            } else {\n                map.put(input, -1);\n            }\n        }\n        for (int x : map.values()) {\n            change += Math.abs(x);\n        }\n        System.out.println(change/2);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint N = Integer.parseInt(br.readLine());\n\t\tString[] s = {\"XXXS\", \"XXS\", \"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\", \"XXXL\"};\n\t\tint[] size = new int[9];\n\t\tfor(int i=0; i<N; i++){\n\t\t\tString c = br.readLine();\n\t\t\tfor(int j=0; j<9; j++){\n\t\t\t\tif(s[j].equals(c)){\n\t\t\t\t\tsize[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0; i<N; i++){\n\t\t\tString c = br.readLine();\n\t\t\tfor(int j=0; j<9; j++){\n\t\t\t\tif(s[j].equals(c)){\n\t\t\t\t\tsize[j]--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i=0; i<9; i++){\n\t\t\tif(size[i]>0)\n\t\t\t\tsum += size[i];\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws IOException {\n        FastReader in = new FastReader();\n        OutputStream outputStream = System.out;\n        PrintWriter out = new PrintWriter(outputStream);\n        Task.solve(in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tint n=ni();\n\t\tMap<String, Integer> hola=new HashMap<String,Integer>();\n\t\thola.put(\"S\", 0);\n\t\thola.put(\"XS\", 0);\n\t\thola.put(\"XXS\", 0);\n\t\thola.put(\"XXXS\", 0);\n\t\thola.put(\"M\", 0);\n\t\thola.put(\"L\", 0);\n\t\thola.put(\"XL\", 0);\n\t\thola.put(\"XXL\", 0);\n\t\thola.put(\"XXXL\", 0);\n\t\tfor(int i=0; i<n; i++)\n\t\t{\n\t\t\tString te=ns();\n\t\t\thola.put(te,hola.get(te)+1);\n\t\t}\n\t\tfor(int i=0; i<n; i++)\n\t\t{\n\t\t\tString te=ns();\n\t\t\thola.put(te,hola.get(te)-1);\n\t\t}\n\t\tint ans=0;\n\t\tfor(int te:hola.values())\n\t\t{\n\t\t\tans+=max(te,0);\n\t\t}\n\t\tpr(ans);\n\t\tSystem.out.print(output);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew TaskA(System.in, System.out);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new Main().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 28).start();\n        else new Main().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(null,null,\"_\",1<<25)\n        {\n            public void run()\n            {\n                try\n                {\n                    solve();\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner s=new Scanner(System.in);\n\t\tint n=s.nextInt();\n\t\tint[] arr1=new int[9];\n\t\tint[] arr2=new int[9];\n\t\tString ss;\n\t\ts.nextLine();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tss=s.nextLine();\n\t\t\tif(ss.equals(\"M\"))\n\t\t\t\tarr1[0]++;\n\t\t\telse if(ss.equals(\"S\"))\n\t\t\t\tarr1[1]++;\n\t\t\telse if(ss.equals(\"L\"))\n\t\t\t\tarr1[2]++;\n\t\t\telse if(ss.equals(\"XS\"))\n\t\t\t\tarr1[3]++;\n\t\t\telse if(ss.equals(\"XL\"))\n\t\t\t\tarr1[4]++;\n\t\t\telse if(ss.equals(\"XXS\"))\n\t\t\t\tarr1[5]++;\n\t\t\telse if(ss.equals(\"XXL\"))\n\t\t\t\tarr1[6]++;\n\t\t\telse if(ss.equals(\"XXXS\"))\n\t\t\t\tarr1[7]++;\n\t\t\telse if(ss.equals(\"XXXL\"))\n\t\t\t\tarr1[8]++;\n\t\t}\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tss=s.nextLine();\n\t\t\tif(ss.equals(\"M\"))\n\t\t\t\tarr2[0]++;\n\t\t\telse if(ss.equals(\"S\"))\n\t\t\t\tarr2[1]++;\n\t\t\telse if(ss.equals(\"L\"))\n\t\t\t\tarr2[2]++;\n\t\t\telse if(ss.equals(\"XS\"))\n\t\t\t\tarr2[3]++;\n\t\t\telse if(ss.equals(\"XL\"))\n\t\t\t\tarr2[4]++;\n\t\t\telse if(ss.equals(\"XXS\"))\n\t\t\t\tarr2[5]++;\n\t\t\telse if(ss.equals(\"XXL\"))\n\t\t\t\tarr2[6]++;\n\t\t\telse if(ss.equals(\"XXXS\"))\n\t\t\t\tarr2[7]++;\n\t\t\telse if(ss.equals(\"XXXL\"))\n\t\t\t\tarr2[8]++;\n\t\t}\t\n\t\tint min;\n\t\tfor(int i=0;i<9;i++)\n\t\t{\n\t\t\tif(arr1[i]<arr2[i])\n\t\t\t\tmin=arr1[i];\n\t\t\telse\n\t\t\t\tmin=arr2[i];\n\t\t\tarr1[i]-=min;\n\t\t\tarr2[i]-=min;\n\t\t}\n\t\tint sum=0;\n\t\tfor(int i=0;i<9;i++)\n\t\t{\n\t\t\tsum+=arr1[i];\n\t\t}\n\t\tSystem.out.println(sum);\n\t\t//System.out.println(Arrays.toString(arr2));\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        \n        PrintWriter out = new PrintWriter(System.out);\n        \n        int[][] d = new int[5][3];\n        int[][] d2 = new int[5][3];\n        \n        int N = Integer.parseInt(br.readLine());\n        for (int i = 0; i < N; i++) {\n            String r = br.readLine();\n            int len = r.length();\n            int fin = 0;\n            if(r.charAt(r.length()-1) == 'S')\n                fin = 0;\n            if(r.charAt(r.length()-1) == 'M')\n                fin = 1;\n            if(r.charAt(r.length()-1) == 'L')\n                fin = 2;\n            d[len][fin]++;\n        }\n        \n        for (int i = 0; i < N; i++) {\n            String r = br.readLine();\n            int len = r.length();\n            int fin = 0;\n            if(r.charAt(r.length()-1) == 'S')\n                fin = 0;\n            if(r.charAt(r.length()-1) == 'M')\n                fin = 1;\n            if(r.charAt(r.length()-1) == 'L')\n                fin = 2;\n            d2[len][fin]++;\n        }\n        \n        int ans = 0;\n        for (int i = 0; i < d.length; i++) {\n            int sum = 0;\n            int sum2 = 0;\n            for (int j = 0; j < d[0].length; j++) {\n                sum += d[i][j];\n                sum2 += d2[i][j];\n                ans += Math.max(0, d2[i][j] - d[i][j]);\n            }\n            \n        }\n        System.out.println(ans);\n        out.close();\n    }    \n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws Throwable {\n        MyScanner sc=new MyScanner();\n        PrintWriter pw=new PrintWriter(System.out);\n\n        int n=sc.nextInt();\n\n        String [] s={\"M\",\"L\",\"S\",\"XL\",\"XS\",\"XXL\",\"XXS\",\"XXXL\",\"XXXS\"};\n        int [] cnt=new int [9];\n        for(int i=0;i<n;i++){\n            String t=sc.next();\n            for(int j=0;j<9;j++)\n                if(t.equals(s[j]))\n                    cnt[j]++;\n        }\n        for(int i=0;i<n;i++){\n            String t=sc.next();\n            for(int j=0;j<9;j++)\n                if(t.equals(s[j]))\n                    cnt[j]--;\n        }\n        for(int i=0;i<9;i++)\n            cnt[i]=Math.abs(cnt[i]);\n        int ans=0;\n        for(int i=0;i<9;i++)\n            ans+=cnt[i];\n        pw.println(ans/2);\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new Main(),\"Main\",1<<26).start();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n     \n        BufferedReader sc= new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(sc.readLine().split(\" \")[0]);\n        ArrayList<String> tshr = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            tshr.add(sc.readLine());\n        }\n        for (int i = 0; i < n; i++) {\n            tshr.remove(sc.readLine());\n        }\n        System.out.println(tshr.size());\n        \n        \n        \n        \n        \n        \n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tHashMap<String, Integer> map1 = new HashMap<>(), map2 = new HashMap<>(); int N = readInt();\n\t\tfor(int i = 1; i<=N; i++) {\n\t\t\tString s = read(); if(!map1.containsKey(s)) map1.put(s, 1); else map1.put(s, map1.get(s)+1);\n\t\t}\n\t\tint tot = 0; for(int i = 1; i<=N; i++) {\n\t\t\tString s = read(); if(!map2.containsKey(s)) map2.put(s, 1); else map2.put(s, map2.get(s)+1);\n\t\t}\n\t\tfor(String s : map2.keySet()) {\n\t\t\ttot += Math.max(0, map2.get(s) - (map1.containsKey(s) ? map1.get(s) : 0));\n\t\t}\n\t\tprintln(tot); exit();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{\n        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n        int n=Integer.parseInt(in.readLine());\n        int[] S=new int[4];\n        int[] L=new int[4];\n        int m=0;\n        for(int i=0;i<n;i++){\n            String s=in.readLine();\n            if(s.charAt(s.length()-1)=='L'){\n                L[s.length()-1]++;\n            }\n            if(s.charAt(s.length()-1)=='S'){\n                S[s.length()-1]++;\n            }\n            if(s.charAt(s.length()-1)=='M'){\n                m++;\n            }\n        }\n        for(int i=0;i<n;i++){\n            String s=in.readLine();\n            if(s.charAt(s.length()-1)=='L'){\n                L[s.length()-1]--;\n            }\n            if(s.charAt(s.length()-1)=='S'){\n                S[s.length()-1]--;\n            }\n            if(s.charAt(s.length()-1)=='M'){\n                m--;\n            }\n        }\n        int count=0;\n        for(int i=0;i<=3;i++){\n            if(S[i]>0){\n                count+=S[i];\n            }\n            if(L[i]>0){\n                count+=L[i];\n            }\n        }\n        if(m>0){\n            count+=m;\n        }\n        System.out.println(count);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner scanner=new Scanner(System.in);\n        int n=scanner.nextInt();\n        ArrayList<String> list1=new ArrayList<String>();\n        ArrayList<String> list2=new ArrayList<String>();\n        for (int i=0; i<n; i++){\n            String s=scanner.next();\n            list1.add(s);\n        }\n        for (int i=0; i<n; i++){\n            String s=scanner.next();\n            list2.add(s);\n        }\n        for (int i=0; i<list1.size(); i++){\n            for (int j=0; j<list2.size(); j++){\n                if (list1.get(i).equals(list2.get(j))){\n                    list1.remove(i);\n                    list2.remove(j);\n                    i--;\n                    break;\n                }\n            }\n        }\n        System.out.println(list1.size());\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint n = nextInt();\n\t\tString[]a = new String[n], b = new String[n];\n\t\tMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = next();\n\t\t\tif (!map.containsKey(a[i]))\n\t\t\t\tmap.put(a[i], 0);\n\t\t\tmap.put(a[i], map.get(a[i])+1);\n\t\t}\n\t\tint  ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tb[i] = next();\n\t\t\tif (!map.containsKey(b[i]))\n\t\t\t\tans++;\n\t\t\telse {\n\t\t\t\tmap.put(b[i], map.get(b[i])-1);\n\t\t\t\tif (map.get(b[i])==0)\n\t\t\t\t\tmap.remove(b[i]);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFA();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] z){\n        StreamTokenizer st = new StreamTokenizer(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        Scanner s = new Scanner(System.in);\n        int a = s.nextInt(), o=0;\n        String i = \"\";\n        ArrayList<String> l1 = new ArrayList<>(), l2 = new ArrayList<>();\n        for(int q=0; q<a; q++){\n            l1.add(s.next());\n        }\n        for(int q=0; q<a; q++){\n            i = s.next();\n            if(l1.contains(i)) l1.remove(i);\n            else l2.add(i);\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n\n        for(int q=0; q<l1.size(); q++){\n            if(l1.get(q).charAt(l1.get(q).length()-1)!=l2.get(q).charAt(l2.get(q).length()-1)) o++;\n        }\n        System.out.println(o);\n        pw.flush();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tJS in = new JS();\n\t\tint n = in.nextInt();\n\t\tint m1 = 0;\n\t\tint s1 = 0;\n\t\tint l1 = 0;\n\t\tint ss1 = 0;\n\t\tint sss1 = 0;\n\t\tint ssss1 = 0;\n\t\tint ll1 = 0;\n\t\tint lll1 = 0;\n\t\tint llll1 = 0;\n\t\t\n\t\tint m2 = 0;\n\t\tint s2 = 0;\n\t\tint l2 = 0;\n\t\tint ss2 = 0;\n\t\tint sss2 = 0;\n\t\tint ssss2 = 0;\n\t\tint ll2 = 0;\n\t\tint lll2 = 0;\n\t\tint llll2 = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tString s = in.next();\n\t\t\tif(s.equals(\"S\")) s1++;\n\t\t\telse if(s.equals(\"M\"))m1++;\n\t\t\telse if(s.equals(\"L\"))l1++;\n\t\t\telse if(s.equals(\"XS\")) ss1++;\n\t\t\telse if(s.equals(\"XXS\")) sss1++;\n\t\t\telse if(s.equals(\"XXXS\")) ssss1++;\n\t\t\telse if(s.equals(\"XL\")) ll1++;\n\t\t\telse if(s.equals(\"XXL\")) lll1++;\n\t\t\telse if(s.equals(\"XXXL\")) llll1++;\n\t\t}\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tString s = in.next();\n\t\t\tif(s.equals(\"S\")) s2++;\n\t\t\telse if(s.equals(\"M\"))m2++;\n\t\t\telse if(s.equals(\"L\"))l2++;\n\t\t\telse if(s.equals(\"XS\")) ss2++;\n\t\t\telse if(s.equals(\"XXS\")) sss2++;\n\t\t\telse if(s.equals(\"XXXS\")) ssss2++;\n\t\t\telse if(s.equals(\"XL\")) ll2++;\n\t\t\telse if(s.equals(\"XXL\")) lll2++;\n\t\t\telse if(s.equals(\"XXXL\")) llll2++;\n\t\t}\n\t\t\n\t\tint res = 0;\n\t\tint res1 = 0;\n\n\t\t\n\t\tres1 += Math.abs(m2-m1);\n\t\tres1 += Math.abs(s2-s1);\n\t\tres1 += Math.abs(l2-l1);\n\t\tres += res1/2;\n\t\tres1 = 0;\n\t\t\n\t\tres1 += Math.abs(ss2-ss1);\n\t\tres1 += Math.abs(ll2-ll1);\n\t\tres += res1/2;\n\t\tres1 = 0;\n\t\t\n\t\tres1 += Math.abs(sss2-sss1);\n\t\tres1 += Math.abs(lll2-lll1);\n\t\tres += res1/2;\n\t\tres1 = 0;\n\t\t\n\t\tres1 += Math.abs(ssss2-ssss1);\n\t\tres1 += Math.abs(llll2-llll1);\n\t\tres += res1/2;\n\t\tres1 = 0;\n\t\tSystem.out.println(res);\n\t\t\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) { new utkarsh().run(); }\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tArrayList<String> s1=new ArrayList<String> ();\n\t\tArrayList<String> s2=new ArrayList<String> ();\n\t\t\tArrayList<String> s3=new ArrayList<String> ();\n\t\t\tint i;\n\t\tfor(i=0;i<n;i++)\n\t\ts1.add(sc.next());\n\t\t\n\t\tfor(i=0;i<n;i++)\n\t\ts2.add(sc.next());\n\t\ts3.addAll(s2);\n\t\tfor(i=0;i<n;i++)\n\t\t{\n\t\t\tif(s2.contains(s1.get(i)))\n\t\t\ts3.remove(s1.get(i));\n\t\t\t\n\t\t\t\n\t\t}\n\tSystem.out.println(s3.size());\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        // Scanner scan = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        int n = Integer.parseInt(bf.readLine());\n        ArrayList<String> s1 = new ArrayList<String>();\n        ArrayList<String> s2 = new ArrayList<String>();\n        for(int i=0; i<n; i++) s1.add(bf.readLine());\n        for(int i=0; i<n; i++) s2.add(bf.readLine());\n\n        Map<String, Integer> mp1 = new HashMap<String, Integer>();\n        Map<String, Integer> mp2 = new HashMap<String, Integer>();\n        for(String s : s1) mp1.put(s, 0);\n        for(String s : s1) mp1.put(s, mp1.get(s)+1);\n        for(String s : s2) mp2.put(s, 0);\n        for(String s : s2) mp2.put(s, mp2.get(s)+1);\n        for(String s : mp1.keySet()) {\n          while(mp1.get(s) > 0) {\n            if(mp2.containsKey(s)) {\n\n              if(mp2.get(s) > 0) {\n                mp1.put(s, mp1.get(s)-1);\n                mp2.put(s, mp2.get(s)-1);\n              }\n              else break;\n            }\n            else break;\n          }\n\n        }\n        for(String s : mp2.keySet()) {\n          while(mp2.get(s) > 0) {\n            if(mp1.containsKey(s)) {\n\n              if(mp1.get(s) > 0) {\n                mp2.put(s, mp2.get(s)-1);\n                mp1.put(s, mp1.get(s)-1);\n              }\n              else break;\n            }\n            else break;\n          }\n\n        }\n        long sum = 0;\n        for(String s : mp1.keySet()) sum += mp1.get(s);\n        out.println(sum);\n        //out.println(mp1.keySet().size());\n      //  out.close();\n\n        // StringTokenizer st = new StringTokenizer(bf.readLine());\n        // int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n        // int n = Integer.parseInt(st.nextToken());\n        // int n = scan.nextInt();\n\n        out.close(); System.exit(0);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int N = in.nextInt();\n        HashMap<String, Integer> map = new HashMap<>();\n        for(int i=0; i<N; i++){\n            String str = in.next();\n            if(map.get(str)==null){\n                map.put(str, 0);\n            }\n            map.put(str, map.get(str)+1);\n        }\n\n        HashMap<String, Integer> map2 = new HashMap<>();\n        for(int i=0; i<N; i++){\n            String str = in.next();\n            if(map.get(str)!=null){\n                if(map.get(str)==1)\n                    map.remove(str);\n                else\n                    map.put(str, map.get(str)-1);\n            }\n            else{\n                if(map2.get(str)==null){\n                    map2.put(str, 0);\n                }\n                map2.put(str, map2.get(str)+1);\n            }\n        }\n        int[] count= {0};\n\n        map2.forEach((key, value)->{\n                count[0] += value;\n                });\n\n        System.out.println(count[0]);\n\n        //M, XS, XXS, XXXS, L, XL, XXl, XXXL\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().solve();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException \n\t\tScanner sc = new Scanner();\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n=sc.nextInt();\n\t\tArrayList<String>p=new ArrayList<>();\n\t\tArrayList<String>ne=new ArrayList<>();\n\t\tfor(int i=0;i<n;i++)\n\t\t\tp.add(sc.nextLine());\n\t\tfor(int i=0;i<n;i++)\n\t\t{\t\n\t\t\tString t=sc.nextLine();\n\t\t\tif(p.contains(t))\n\t\t\t\tp.remove(t);\n\t\t\telse\n\t\t\t\tne.add(t);\n\t\t}\n\t\tCollections.sort(p);\n\t\tCollections.sort(ne);\n\t\tint ans=0;\n\t\tfor(int i=0;i<ne.size();i++)\n\t\t{\n\t\t\tans+=sol(ne.get(i),p.get(i));\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tpw.close();    \n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tin=new InputReader(System.in);\n\t    w=new PrintWriter(System.out);\n\n\t   int n=ni();\n\t   HashMap<String,Integer> hm=new HashMap<String,Integer>();\n\t   for(int i=0;i<n;i++)\n\t   {\n\t\t   String s=ns();\n\t\t   if(hm.containsKey(s))\n\t\t\t   hm.put(s,hm.get(s)+1);\n\t\t   else\n\t\t\t   hm.put(s,1);\n\t   }\n\t    \n\t   int ans=0;\n\t   for(int i=0;i<n;i++)\n\t   {\n\t\t   String s=ns();\n\t\t   if(hm.containsKey(s))\n\t\t   {\n\t\t\t   if(hm.get(s)==1)\n\t\t\t\t   hm.remove(s);\n\t\t\t   else\n\t\t\t\t   hm.put(s,hm.get(s)-1);\n\t\t   }\n\t\t   else\n\t\t   {\n\t\t\t   ans++;\n\t\t\t/*   if(s.length()==1)\n\t\t\t   {\n\t\t\t\t   if(s.equals(\"M\"))\n\t\t\t\t   {\n\t\t\t\t\t   if(hm.containsKey(\"S\"))\n\t\t\t\t\t   {\n\t\t\t\t\t\t   if(hm.get(\"S\")==1)\n\t\t\t\t\t\t\t   hm.remove(\"S\");\n\t\t\t\t\t\t   else\n\t\t\t\t\t\t\t   hm.put(s,hm.get(\"S\")-1);\n\t\t\t\t\t   }\n\t\t\t\t\t   else if(hm.containsKey(\"L\"))\n\t\t\t\t\t   {\n\t\t\t\t\t\t   if(hm.get(\"L\")==1)\n\t\t\t\t\t\t\t   hm.remove(\"L\");\n\t\t\t\t\t\t   else\n\t\t\t\t\t\t\t   hm.put(s,hm.get(\"L\")-1);\n\t\t\t\t\t   }\n\t\t\t\t   }\n\t\t\t\t   else if()\n\t\t\t\t   \n\t\t\t   }*/\n\t\t   }\n\t   }\n\t   w.print(ans);\n       w.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String [] args) throws IOException{\n\t\tInputReader in = new InputReader(\"cfedu46a.in\");\n\t\t\n\t\tint [] arr = new int[9];\n\t\tint [] arr2 = new int[9];\n\t\tint [] size = {4, 3, 2, 1, 1, 1, 2, 3, 4};\n\t\tint n = in.nextInt();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tString s = in.next();\n\t\t\tswitch(s.length()){\n\t\t\t\tcase 1: \n\t\t\t\t\tif(s.charAt(0) == 'S')\n\t\t\t\t\t\tarr[3]++;\n\t\t\t\t\tif(s.charAt(0) == 'M')\n\t\t\t\t\t\tarr[4]++;\n\t\t\t\t\tif(s.charAt(0) == 'L')\n\t\t\t\t\t\tarr[5]++;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif(s.charAt(s.length() - 1) == 'S'){\n\t\t\t\t\t\tarr[3 - (s.length() - 1)]++;\n\t\t\t\t\t}\n\t\t\t\t\tif(s.charAt(s.length() - 1) == 'L'){\n\t\t\t\t\t\tarr[5 + (s.length() - 1)]++;\n\t\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tString s = in.next();\n\t\t\tswitch(s.length()){\n\t\t\t\tcase 1: \n\t\t\t\t\tif(s.charAt(0) == 'S')\n\t\t\t\t\t\tarr2[3]++;\n\t\t\t\t\tif(s.charAt(0) == 'M')\n\t\t\t\t\t\tarr2[4]++;\n\t\t\t\t\tif(s.charAt(0) == 'L')\n\t\t\t\t\t\tarr2[5]++;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif(s.charAt(s.length() - 1) == 'S'){\n\t\t\t\t\t\tarr2[3 - (s.length() - 1)]++;\n\t\t\t\t\t}\n\t\t\t\t\tif(s.charAt(s.length() - 1) == 'L'){\n\t\t\t\t\t\tarr2[5 + (s.length() - 1)]++;\n\t\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\tint cnt = 0;\n\t\tfor(int i = 0; i < 9; i++){\n\t\t\tif(arr[i] == arr2[i])\n\t\t\t\tcontinue;\n\t\t\telse{\n\t\t\t\tcnt += (arr2[i] - arr[i] > 0? arr2[i] - arr[i]: 0);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(cnt);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false);\n        st     = null;\n        solve();\n        reader.close();\n        writer.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        fileIOMode = args.length > 0 && args[0].equals(\"!\");\n        if (fileIOMode) {\n            in = new BufferedReader(new FileReader(\"a.in\"));\n            out = new PrintWriter(\"a.out\");\n        } else {\n            in = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n        }\n        tokenizer = new StringTokenizer(\"\");\n\n        new Thread(new A()).start();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        ArrayList<String> a = new ArrayList<>();\n        for(int i = 0; i<n; i++)\n            a.add(sc.next());\n        int count = 0;\n        for(int i = 0; i<n; i++) {\n            String b = sc.next();\n            int idx = a.indexOf(b);\n            if(idx!=-1)\n                a.remove(idx);\n            else\n                count++;\n        }\n        System.out.println(count);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[])\n        Scanner ex=new Scanner(System.in);\n        int n=ex.nextInt();\n        String a[]=new String[n];\n        String b[]=new String[n];\n        for(int i=0;i<n;i++)\n        a[i]=ex.next();\n        for(int i=0;i<n;i++)\n        b[i]=ex.next();\n        String valid[]={\"S\",\"M\",\"L\",\"XS\",\"XL\",\"XXS\",\"XXL\",\"XXXS\",\"XXXL\"};\n        int ai[]=new int[9];\n        int bi[]=new int[9];\n        for(int i=0;i<n;i++)\n        {\n            for(int j=0;j<9;j++)\n            {\n                if(a[i].equals(valid[j]))\n                ai[j]++;\n                if(b[i].equals(valid[j]))\n                bi[j]++;\n            }\n        }\n        int ans=0;\n        for(int i=0;i<9;i++)\n        {\n            if(ai[i]>bi[i])\n            ans=ans+ai[i]-bi[i];\n        }\n        System.out.println(ans);\n    }\n", "complexity": "linear"}
{"code": "\t\tpublic static void main(String[] args) throws IOException \n\t\t\t\t\n\t\t\t\tScanner sc=new Scanner(System.in);\n\t\t\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\t\t\tint n=sc.nextInt();\n\t\t\t\tString []a=new String[n];\n\t\t\t\tString []b=new String[n];\n\t\t\t\t\n\t\t\t\tTreeMap<String,Integer> map1=new TreeMap(),map2=new TreeMap();\n\t\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\t{\n\t\t\t\t\tString s=sc.next();\n\t\t\t\t\tmap1.put(s, map1.getOrDefault(s, 0)+1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\t{\n\t\t\t\t\tString s=sc.next();\n\t\t\t\t\tmap2.put(s, map2.getOrDefault(s, 0)+1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tint ans=0;\n\t\t\t\tfor(String s:map2.keySet())\n\t\t\t\t{\n\t\t\t\t\tint cnt=map1.getOrDefault(s, 0);\n\t\t\t\t\tans+=Math.max(0, map2.get(s)-cnt);\n\t\t\t\t}\n\t\t\t\tpw.println(ans);\n\t\t\t\tpw.close();\n\t\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tString a = scan.next();\n\t\tString b = scan.next();\n\t\tchar last = b.charAt(0);\n\t\tString ans = \"\"+a.charAt(0);\n\t\tfor(int i = 1;i<a.length();i++){\n\t\t\tif(a.charAt(i)>=last)break;\n\t\t\tans+=a.charAt(i);\n\t\t}\n\t\tans+=last;\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = nextInt();\n\t\tint[] arr = {0,1};\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tSystem.out.print(arr[i % 2]);\n\t\t}\n\t\tSystem.out.println();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)throws IOException\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tint n = Integer.parseInt(br.readLine());\n\t\t\n\t\tint arr[] = new int [n];\n\t\t\n\t\tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\n\t\tfor(int i = 0 ; i < n ; i++)\n\t\t{\n\t\t\tarr[i] = Integer.parseInt(st1.nextToken());\n\t\t}\n\t\t\n\t\tint max = -1;\n\t\tboolean flag = true;\n\t\t\n\t\tfor(int i = 0 ; i < n ; i++)\n\t\t{\n\t\t\tif(arr[i] > max+1)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tout.println(i+1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax = Math.max(max, arr[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(flag)\n\t\t\tout.println(-1);\n\t\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "public static void main(String[] args)\n\tScanner sc=new Scanner(System.in);\n\tint n=sc.nextInt();\n\tHashMap<Integer,Integer> h=new HashMap();\n\t//HashMap<Integer,Integer> h1=new HashMap();\n\tint[] a=new int[n];\n\tint x=sc.nextInt();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta[i]=sc.nextInt();\n\t\tif(h.get(a[i])==null)\n\t\t{\n\t\t\th.put(a[i], 1);\n\t\t\t//h1.put(a[i],i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(0);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint num=a[i]&x;\n\t\tif(num==a[i])\n\t\t\tcontinue;\n\t\tif(h.get(num)==null)\n\t\t\tcontinue;\n\t\t\n\t\telse\n\t\t{\n\t\t\t\n\t\t\tSystem.out.print(1);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint num=a[i]&x;\n\t\tif(num==a[i])\n\t\t\tcontinue;\n\t\tif(h.get(num)==null)\n\t\t\th.put(num, 1);\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(2);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tSystem.out.print(-1);\n\t\n     \n}\n", "complexity": "linear"}
{"code": "public static void main(String[] args)\n\tScanner sc=new Scanner(System.in);\n\tint n=sc.nextInt();\n\tHashMap<Integer,Integer> h=new HashMap();\n\t//HashMap<Integer,Integer> h1=new HashMap();\n\tint[] a=new int[n];\n\tint x=sc.nextInt();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\ta[i]=sc.nextInt();\n\t\tif(h.get(a[i])==null)\n\t\t{\n\t\t\th.put(a[i], 1);\n\t\t\t//h1.put(a[i],i);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(0);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint num=a[i]&x;\n\t\tif(num==a[i])\n\t\t\tcontinue;\n\t\tif(h.get(num)==null)\n\t\t\tcontinue;\n\t\t\n\t\telse\n\t\t{\n\t\t\t\n\t\t\tSystem.out.print(1);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint num=a[i]&x;\n\t\tif(num==a[i])\n\t\t\tcontinue;\n\t\tif(h.get(num)==null)\n\t\t\th.put(num, 1);\n\t\telse\n\t\t{\n\t\t\tSystem.out.print(2);\n\t\t\tSystem.exit(0);\n\t\t}\n\t}\n\tSystem.out.print(-1);\n\t\n     \n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws IOException {\n        /*\ninputCopy\n4\n2 1 2 1\noutputCopy\n4\ninputCopy\n5\n0 -1 -1 -1 -1\noutputCopy\n4\n*/\n        PrintWriter pw = new PrintWriter(System.out);\n        FastReader fr = new FastReader();\n        int n=fr.i();\n        int [] arr=new int[n];\n        fr.scanIntArr(arr);\n        int min=Integer.MAX_VALUE;\n        int max=Integer.MIN_VALUE;\n        long sum=0;\n        if(n==1)\n        {\n            pw.println(arr[0]);\n            pw.flush();\n            pw.close();\n            return;\n        }\n        for(int i=0;i<n;++i)\n        {\n            if(arr[i]<min)\n                min=arr[i];\n            if(arr[i]>max)\n                max=arr[i];\n            sum+=Math.abs(arr[i]);\n        }\n        if(min>0)\n        {\n            sum-=2*min;\n        }\n        if(max<0)\n        {\n            sum+=2*max;\n        }\n        pw.println(sum);\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int n = sc.nextInt();\n        int best = 1;\n        int bestTime = Integer.MAX_VALUE;\n        for(int i=0;i<n;i++) {\n            int time;\n            int a = sc.nextInt();\n            time = (a%n==0 || a%n<=i) ? a/n : (a+n)/n;\n            if(time < bestTime) {\n                best = i + 1;\n                bestTime = time;\n            }\n        }\n\n        pw.println(best);\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Main m = new Main();\n        m.solve();\n        try {\n            m.out.close();\n        } catch (IOException e) {}\n    }\n\n    BufferedReader in;\n    BufferedWriter out;\n    StringTokenizer tokenizer;\n    public Main() {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        out = new BufferedWriter(new OutputStreamWriter(System.out));\n    }\n    public String n() {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            try {\n                tokenizer = new StringTokenizer(in.readLine());\n            } catch (IOException e) {}\n        }\n        return tokenizer.nextToken();\n    }\n    public int ni() {\n        return Integer.parseInt(n());\n    }\n    public long nl() {\n        return Long.parseLong(n());\n    }\n    public void write(String s) {\n        try {\n            out.write(s);\n        } catch (IOException e) {}\n    }\n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n\tInputReader in = new InputReader (System.in);\n\tPrintWriter out = new PrintWriter (System.out);\n\n\tint n = in.nextInt();\n\tint s = in.nextInt();\n\tint deg[] = new int [n];\n\t\n\tfor (int i = 1; i < n; ++i) {\n\t    deg[in.nextInt() - 1] ++;\n\t    deg[in.nextInt() - 1] ++;\n\t}\n\n\tint l = 0;\n\tfor (int i = 0; i < n; ++i)\n\t    if (deg[i] == 1) l ++;\n\n\tout.println((double) 2 * s / l);\n\tout.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] cc = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tcc[i] = Integer.parseInt(st.nextToken());\n\t\tst = new StringTokenizer(br.readLine());\n\t\tint[] aa = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\taa[i] = Integer.parseInt(st.nextToken()) - 1;\n\t\tint[] used = new int[n];\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (used[i] == 2)\n\t\t\t\tcontinue;\n\t\t\tint j = i;\n\t\t\twhile (used[j] == 0) {\n\t\t\t\tused[j] = 1;\n\t\t\t\tj = aa[j];\n\t\t\t}\n\t\t\tif (used[j] == 1) {\n\t\t\t\tint c = cc[j];\n\t\t\t\twhile (used[j] == 1) {\n\t\t\t\t\tused[j] = 2;\n\t\t\t\t\tc = Math.min(c, cc[j]);\n\t\t\t\t\tj = aa[j];\n\t\t\t\t}\n\t\t\t\tans += c;\n\t\t\t}\n\t\t\tj = i;\n\t\t\twhile (used[j] == 1) {\n\t\t\t\tused[j] = 2;\n\t\t\t\tj = aa[j];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner s = new Scanner(System.in);\n        int rem[] = new int[3];\n\t\t\n\t\tArrays.fill(rem,-1);\n\t\trem[0] = 0;\n        char ch[] = s.next().toCharArray();\n\t\tint n = ch.length;\n \t\tlong dp[] = new long[n];\n\n        int sum = 0;\n\t\t\n        for(int i=0;i<ch.length;i++){\n\t\t   sum = sum + (ch[i]-48);\n\t\t   if(rem[sum%3] != -1)\n\t\t\t    if(i>0){\n\t\t\t\t\tdp[i] = Math.max(dp[i-1],dp[rem[sum%3]]+1);}\n\t\t\t\telse\n\t\t\t\t\tdp[i] = 1;\n\t       else\n\t\t\t   if(i>0)\n\t\t\t\t   dp[i] = dp[i-1];\n\t\t\t   \n\t\t   \n\t\t   rem[sum%3] = i;\n\t\t   sum = sum%3;\n\t\t   \n\t\t}\t\t\n\t\t \n\n            System.out.println(dp[n-1]);\t\t\t\n\t\t\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        \n        FastReader in = new FastReader();\n        \n        long n = in.nextLong();\n        long m = in.nextLong();\n        long a = in.nextLong();\n        long b = in.nextLong();\n        long total = 0;\n        \n        long val =(n%m);\n        if (n%m != 0){\n            \n            long x = (val)*b;\n            long y = (m-val)*a;\n            \n            total = Math.min(x, y);\n        }\n        System.out.println(Math.abs(total));\n        \n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader lector = new BufferedReader(new InputStreamReader(System.in));\n\t\tint planet = Integer.parseInt(lector.readLine());\n\t\tint ini = Integer.parseInt(lector.readLine());\n\t\tdouble peso = ini;\n\t\tint[] desp = new int[planet];\n\t\tint[] ater = new int[planet];\n\t\tString[] temp = lector.readLine().split(\" \");\t\t\n\t\tfor(int i=0; i<planet; i++) {\n\t\t\tdesp[i] = Integer.parseInt(temp[i]);\n\t\t\tif(desp[i] == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\tlector.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttemp = lector.readLine().split(\" \");\t\t\n\t\tfor(int i=0; i<planet; i++) {\n\t\t\tater[i] = Integer.parseInt(temp[i]);\n\t\t\tif(ater[i] == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\tlector.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttemp = null;\n\t\tint i=planet-1;\n\t\tpeso = (peso*ater[0])/(ater[0]-1);\n\t\twhile(i>0) {\n\t\t\tpeso = (peso*desp[i])/(desp[i]-1);\n\t\t\tpeso = (peso*ater[i])/(ater[i]-1);\n\t\t\ti--;\n\t\t}\n\t\tpeso = (peso*desp[0])/(desp[0]-1);\n\t\tpeso = peso - ini;\n\t\tSystem.out.println(peso);\n\t\tlector.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new cf1(),\"cf1\",1<<26).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new cf1(),\"cf1\",1<<26).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader lector = new BufferedReader(new InputStreamReader(System.in));\n\t\tint planet = Integer.parseInt(lector.readLine());\n\t\tint ini = Integer.parseInt(lector.readLine());\n\t\tdouble peso = ini;\n\t\tint[] desp = new int[planet];\n\t\tint[] ater = new int[planet];\n\t\tString[] temp = lector.readLine().split(\" \");\t\t\n\t\tfor(int i=0; i<planet; i++) {\n\t\t\tdesp[i] = Integer.parseInt(temp[i]);\n\t\t\tif(desp[i] == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\tlector.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttemp = lector.readLine().split(\" \");\t\t\n\t\tfor(int i=0; i<planet; i++) {\n\t\t\tater[i] = Integer.parseInt(temp[i]);\n\t\t\tif(ater[i] == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\tlector.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\ttemp = null;\n\t\tint i=planet-1;\n\t\tpeso = (peso*ater[0])/(ater[0]-1);\n\t\twhile(i>0) {\n\t\t\tpeso = (peso*desp[i])/(desp[i]-1);\n\t\t\tpeso = (peso*ater[i])/(ater[i]-1);\n\t\t\ti--;\n\t\t}\n\t\tpeso = (peso*desp[0])/(desp[0]-1);\n\t\tpeso = peso - ini;\n\t\tSystem.out.println(peso);\n\t\tlector.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]){\n     Scanner sc=new Scanner(System.in);\n    int n=sc.nextInt();\n    int a[]=new int[n];\n    for(int i=0;i<n;i++)\n    a[i]=sc.nextInt();\n    Arrays.sort(a);\n    //boolean \n    int t=1,c=0;\n    for(int i=1;i<n;i++){\n        if(a[i]==a[i-1])\n        {\n            if(i-2>=0&&a[i-2]==a[i-1]-1){\n                System.out.println(\"cslnb\");\n                return;\n            }\n            c++;\n        }\n        if(a[i]==a[i-1]&&a[i]==0){\n        System.out.println(\"cslnb\");\n        return;\n        }\n    }\n    if(c>1)\n    {\n        System.out.println(\"cslnb\");\n        return;\n    }\n    for(int i=0;i<n;i++){\n        if((a[i]-i)%2!=0)\n        t=t^1;\n    }\n    if(t==1)\n    System.out.println(\"cslnb\");\n    else\n    System.out.println(\"sjfnb\");\n    \n    \n    \n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]){\n        out = new PrintWriter(System.out);\n        in = new InputReader();\n        new C();\n        out.flush(); out.close();\n    }   \n", "complexity": "linear"}
{"code": "        public static void main(String[] args) throws Exception {\n            BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n            PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n            int n = Integer.parseInt(bf.readLine());\n            StringTokenizer st = new StringTokenizer(bf.readLine());\n            Integer[] a = new Integer[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n            Arrays.sort(a);\n            int[] b = new int[n];\n            for(int i=0; i<n; i++) b[i] = a[i].intValue();\n            boolean diff = false;\n            boolean diff2 = false;\n            Set<Integer> vals = new HashSet<Integer>();\n            vals.add(b[0]);\n            int valval = 0;\n            for(int i=1; i<n; i++) {\n                vals.add(b[i]);\n                if(b[i] == b[i-1]) {\n                    if(!diff) {\n                        diff = true;\n                        valval = b[i];\n                    }\n                    else diff2 = true;\n                }\n            } \n            long sum = 0;\n            for(int i : b) sum += i;\n            sum -= 1L*n*(n-1)/2;\n\n            if(diff && !diff2) {\n                if(!vals.contains((valval-1)) && (valval > 0)) {\n                    if(sum%2 == 0) out.println(\"cslnb\"); else out.println(\"sjfnb\");\n                }\n                else out.println(\"cslnb\");\n            }\n            else if(diff2) out.println(\"cslnb\");\n            else if(sum%2 == 0) out.println(\"cslnb\"); else out.println(\"sjfnb\");\n            // int n = Integer.parseInt(st.nextToken());\n     \n            \n            out.close(); System.exit(0);\n        }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[])throws IOException\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tString s1 = br.readLine();\n\t\tString s2 = br.readLine();\n\t\tint i=0;\n\t\tchar c1,c2;\n\t\tint cost = 0;\n\t\twhile(i<n)\n\t\t{\n\t\t\tc1 = s1.charAt(i);\n\t\t\tc2 = s2.charAt(i);\n\t\t\tif(c1 != c2)\n\t\t\t{\n\t\t\t\tif((i+1)<n && s1.charAt(i+1) != s2.charAt(i+1) && s1.charAt(i) != s1.charAt(i+1))\n\t\t\t\t{\n\t\t\t\t\tcost +=1;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcost +=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(cost);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Main().solve();\n    }\n", "complexity": "linear"}
{"code": "\t\tpublic static void main(String []args)\n\t\t\tScanner sc=new Scanner(System.in);\n\t\t\tint n=sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tString s=sc.nextLine();\n\t\t\t//System.out.println(s);\n\t\t\tchar c[]=s.toCharArray();\n\t\t\tArrayList a =new ArrayList();\n\t\t\t\n\t\t\tfor(int i=0;i<c.length;i++)\n\t\t\t{\n\t\t\t\t//System.out.println(c[i]);\n\t\t\t\ta.add(c[i]);\n\t\t\t}\n\t\t\n\t\t\tint x=Collections.frequency(a,'0' );\n\t\t\tint y=Collections.frequency(a,'1');\n\t\t\t\n\t\t\t//System.out.println(x+ \"  \"+y );\n\t\t\tif(y==0 || y==1)\n\t\t\t{\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(y>=2)\n\t\t\t\t{\n\t\t\t\t\tString s1=\"1\";\n\t\t\t\t\tfor(int i=0;i<x;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\ts1=s1+\"0\";\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(s1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        long[] a = new long[n];\n        for(int i=0;i<n;i++) a[i] = sc.nextLong();\n        long[] p = new long[n];\n        p[n-1] = a[n-1];\n        for(int i=n-2;i>=0;i--){\n            if(a[i]<p[i+1]) p[i] = p[i+1]-1;\n            else p[i] = a[i];\n        }\n        long max = p[0];\n        long res = p[0] - a[0];\n        for(int i=1;i<n;i++){\n            if(max < p[i]) max = p[i];\n            res += max - a[i];\n        }\n        System.out.println(res);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\t BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t int n = Integer.parseInt(br.readLine());\n\t\t HashMap<Double,Integer>h = new HashMap<>();\n\t\t double [] temp = new double[n];\n\t\t int m = 0;\n\t\t for(int i=0;i<n;i++) {\n\t\t\t String l = br.readLine();\n\t\t\t int[] x = new int[4];\n\t\t\t int k=0;\n\t\t\t boolean t = false;\n\t\t\t for(int j=0;j<l.length();j++) {\n\t\t\t\t if(l.charAt(j)=='(' || l.charAt(j)=='+' || l.charAt(j)==')' || l.charAt(j)=='/')\n\t\t\t\t\t x[k++] = j;\n\t\t\t }\n\t\t\t double a = Integer.parseInt(l.substring(x[0]+1,x[1]));\n\t\t\t double b = Integer.parseInt(l.substring(x[1]+1, x[2]));\n\t\t\t double c = Integer.parseInt(l.substring(x[3]+1));\n\t\t\t temp[m++] = (a+b)/c;\n\t\t\t //System.out.print((a+b)/c + \" \");\n\t\t\tif(h.containsKey((a+b)/c))\n\t\t\t\t\th.put((a+b)/c, h.get((a+b)/c)+1);\n\t\t\telse\n\t\t\t\th.put((a+b)/c, 1);\n\t\t }\n\t\t //System.out.println(h);\n\t\t for(int i=0;i<n;i++) {\n\t\t\t System.out.print(h.get(temp[i]) + \" \");\n\t\t }\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        S = sc.next();\n\n        System.out.println(solve());\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String str[]) throws Exception{\n        Scanner sc = new Scanner(System.in);\n        BufferedWriter output = new BufferedWriter(\n                new OutputStreamWriter(System.out));\n        int t = sc.nextInt();\n        while(t-->0){\n            int n = sc.nextInt();\n            if((n%2==0 && Math.pow(n/2,0.5)%1.0==0) || (n%4==0 && Math.pow(n/4,0.5)%1.0==0) )  output.write(\"YES\\n\");\n            else {\n                output.write(\"NO\\n\");\n            }\n        }\n        output.flush();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception { new B().run(); }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n       \n        int tc = sc.ni();\n        for (int rep = 0; rep < tc; rep++) {\n            pw.println(solve(sc,pw));\n            //solve(sc,pw);\n        }\n        \n        \n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "\t\tpublic static void main(String[] args) {\n\t\t\tScanner sc=new Scanner(System.in);\n\t\t    int t=0;\n\t\t    if(sc.hasNextInt()) {\n\t\t    \tt=sc.nextInt();\n\t\t    }\n\t\t    while(t>0) {\n\t\t    \tt--;\n\t\t\t\t int n=sc.nextInt();\n\t\t\t\t String ans=\"NO\";\n\t\t\t\t if(n%2==0) {\n\t\t\t\t\t int p=n/2;\n\t\t\t\t\t if(Math.ceil(Math.sqrt((double)p)) == Math.floor(Math.sqrt((double)p))){\n\t\t\t\t\t\t ans=\"YES\";\n\t\t\t\t\t }\n\t\t\t\t\t else {\n\t\t\t\t\t\t if(n%4==0) {\n\t\t\t\t\t\t\t p=n/4;\n\t\t\t\t\t\t\t if(Math.ceil(Math.sqrt((double)p)) == Math.floor(Math.sqrt((double)p))){\n\t\t\t\t\t\t\t\t ans=\"YES\";\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t }\n\t\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t System.out.println(ans);\n\t\t    }\n\t\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader fin = new BufferedReader(new InputStreamReader(System.in));\n\t\tint t = Integer.parseInt(fin.readLine());\n\t\tStringBuilder fout = new StringBuilder();\n\t\tHashSet<Integer> dict = new HashSet<Integer>();\n\t\tint pointer = 1;\n\t\tint area = 0;\n\t\twhile(area >= 0) {\n\t\t\tarea = (pointer * pointer) * 2;\n\t\t\tdict.add(area);\n\t\t\tpointer ++;\n\t\t}\n\t\tpointer = 1;\n\t\tarea = 0;\n\t\twhile(area >= 0) {\n\t\t\tarea = (pointer * pointer) * 4;\n\t\t\tdict.add(area);\n\t\t\tpointer ++;\n\t\t}\n\t\twhile(t-- > 0) {\n\t\t\tint n = Integer.parseInt(fin.readLine());\n\t\t\tif(dict.contains(n)) {\n\t\t\t\tfout.append(\"YES\\n\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfout.append(\"NO\\n\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.print(fout);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tReader sc=new Reader();\n\t\tStringBuilder finalAnswer=new StringBuilder();\n\t\t//finalAnswer.append(1).append('\\n');\n\t\tint t=sc.nextInt();\n\t\twhile(t-->0) {\n\t\t\tint count=0;\n\t\t\tint n=sc.nextInt();\n\t\t\tif(n==2 || n==4) {\n\t\t\t\tfinalAnswer.append(\"YES\").append('\\n');\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(n%2==0 && count==0){\n\t\t\t\tn/=2;\n\t\t\t\tif((int)Math.sqrt(n)*(int)Math.sqrt(n)==n) {\n\t\t\t\t\tfinalAnswer.append(\"YES\").append('\\n');\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tn*=2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(n%4==0 && count==0) {\n\t\t\t\tn/=4;\n\t\t\t\tif((int)Math.sqrt(n)*(int)Math.sqrt(n)==n) {\n\t\t\t\t\tfinalAnswer.append(\"YES\").append('\\n');\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count==0){\n\t\t\t\tfinalAnswer.append(\"NO\").append('\\n');\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(finalAnswer);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        sc = new Scanner(System.in);\n        out = new PrintWriter(System.out);\n        int t = 1;\n        if (true) {\n            t = sc.nextInt();\n        }\n        for(int i=0; i<t; i++) {\n            new Main().solve();\n        }\n        out.flush();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args){\n        int t=r.nextInt();\n        for (int v=0;v<t;v++){\n            int n=r.nextInt();\n            if (n%2==1){\n                pw.println(\"NO\");\n            }\n            else{\n                int x=n/2;\n                boolean check=false;\n                for (int i=1;i<=(int)Math.sqrt(x)+1;i++){\n                    if (i*i*2==x||i*i==x){\n                        pw.println(\"YES\");check=true;break;\n                    }\n                }\n                if (!check){\n                    pw.println(\"NO\");\n                }\n            }\n\n\n        }\n        pw.close();\n\n\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t    FastScanner fs=new FastScanner();\n\t    int t=fs.nextInt();\n\t    while(t-->0) {\n\t    \tdouble n=fs.nextInt();\n\t    \tif(isp(n/2)||isp(n/4)) {\n\t    \t\tSystem.out.println(\"YES\");\n\t    \t}\n\t    \telse System.out.println(\"NO\");\n\t    }\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        int test = f.nextInt();\n\n//        System.out.println(MAX_N);\n\n        TreeSet<Integer> set = new TreeSet<>();\n        for(int i = 1 ; i <= MAX_N ; i++) {\n            set.add(i*i*2);\n            set.add(i*i*4);\n        }\n\n//        System.out.println(set);\n\n        for(int t = 1 ; t <= test ; t++) {\n            int n = f.nextInt();\n            if(set.contains(n)) {\n                sb.append(\"YES\").append(\"\\n\");\n            }\n            else {\n                sb.append(\"NO\").append(\"\\n\");\n            }\n\n        }\n        System.out.println(sb);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main (final String[] args) throws IOException {\n\t\t//goal is to always be higher\n\t\tSet<Integer> poss = new HashSet<>();\n\t\tfor (int i = 1; 2 * (i*i) <= 1000000000; ++i) {\n\t\t\tposs.add(2 * (i*i));\n\t\t\tposs.add(4 * (i*i));\n\t\t}\n\t\tint t = si();\n\t\tfor (int i = 0; i < t; ++i) {\n\t\t\tint n = si();\n\t\t\tif (poss.contains(n)) System.out.println(\"YES\");\n\t\t\telse System.out.println(\"NO\");\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n        // Start writing your solution here. -------------------------------------\n\n\n\n        /*fac = new long[nn + 1];\n        fac[1] = 1;\n        for(int i = 2; i <= nn; i++)\n            fac[i] = fac[i - 1] * i % MOD;*/\n\n\n        /*pow2 = new long[nn + 1];\n        pow2[0] = 1L;\n        for(int i = 1; i <= nn; i++)\n            pow2[i] = pow2[i - 1] * 2L;*/\n\n\n        /*inv = new long[nn + 1];\n        inv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            inv[i] = (MOD - MOD / i) * inv[(int)(MOD % i)] % MOD;*/\n\n        /*facInv = new long[nn + 1];\n        facInv[0] = facInv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            facInv[i] = facInv[i - 1] * inv[i] % MOD;*/\n\n\n        /*numOfDiffDiv = new int[nn + 1];\n        for(int i = 2; i <= nn; i++)\n            if(numOfDiffDiv[i] == 0)\n                for(int j = i; j <= nn; j += i)\n                    numOfDiv[j] ++;*/\n\n        /*numOfDiv = new int[nn + 1];\n        numOfDiv[1] = 1;\n        for(int i = 2; i <= nn; i++) {\n            for(int j = 2; j * j <= i; j++) {\n                if(i % j == 0) {\n                    numOfDiv[i] = numOfDiv[i / j] + 1;\n                    break;\n                }\n            }\n        }*/\n\n        //primes = sieveOfEratosthenes(100001);\n\n        /*\n        int t = 1;\n        //t = sc.ni();\n        while(t-- > 0) {\n            //boolean res = solve();\n            //out.println(res ? \"YES\" : \"NO\");\n            long res = solve();\n            out.println(res);\n        }*/\n\n\n        int t = 1, tt = 0;\n        t = sc.ni();\n        for(int i = 1; i <40000; i++) squares.add(i * i);\n        while(tt++ < t) {\n            boolean res = solve();\n            //out.println(\"Case #\" + tt + \": \" + res);\n            out.println(res ? \"YES\" : \"NO\");\n        }\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        sc = new FastScanner();\n        pw = new PrintWriter(System.out);\n        \n\n\n        int Q = sc.ni();\n        for (int q = 0; q < Q; q++) {\n            int N = sc.ni();\n            String ans = \"NO\";\n            if (N%2==0 && isSquare(N/2))\n                ans = \"YES\";\n            if (N%4==0 && isSquare(N/4))\n                ans = \"YES\";\n            pw.println(ans);\n        }\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner fs=new FastScanner();\n\t\tint T=fs.nextInt();\n\t\tfor (int tt=0; tt<T; tt++) {\n\t\t\tint n=fs.nextInt();\n\t\t\tboolean isEven=n%2==0;\n\t\t\twhile (n%2==0) n/=2;\n\t\t\tif (isSquare(n) && isEven) {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        init_io();\n        int t = nint();\n        while(t-- > 0) {\n            int N = nint();\n            if (N % 2 != 0) {\n                out.println(\"NO\"); continue;\n            }\n            N /= 2;\n            int sqrt = (int)(Math.round(Math.sqrt(N)));\n            int sqrt2 = (int)(Math.round(Math.sqrt(N/2)));\n            if (sqrt * sqrt == N || sqrt2 * sqrt2 * 2 == N) {\n                out.println(\"YES\");\n            }\n            else {\n                out.println(\"NO\");\n            }\n        }\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        fs=new FastScanner();\n        int t = fs.nextInt();\n        while (t-->0)\n            solve();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tMyScanner in = new MyScanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tBPhoenixAndPuzzle solver = new BPhoenixAndPuzzle();\n\t\tint testCount = Integer.parseInt(in.next());\n\t\tfor (int i = 1; i <= testCount; i++)\n\t\t\tsolver.solve(i, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new CF_1515_B().run();}catch(Exception e){e.printStackTrace();System.exit(1);}}}, \"1\", 1 << 28).start();\n        else new CF_1515_B().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n//        Scanner scan = new Scanner(System.in);\n//for (int i = 1; i <= 10; i++) {\n//    System.out.println(i + \" \" + divisors(i).toString());\n//}   \n        int tc = sc.ni();\n        for (int rep = 0; rep < tc; rep++) {\n            long n = sc.nl();\n            if (n % 2 == 1) {\n                pw.println(\"NO\");\n            }\n            else {\n                n/= 2;\n                if (perfectSquare(n)) {\n                    pw.println(\"YES\");\n                }\n                else if (n % 2 == 0 && perfectSquare(n/2)) {\n                    pw.println(\"YES\");\n                }\n                else {\n                    pw.println(\"NO\");\n                }\n            }\n        }\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) {\n    InputReader in = new InputReader(System.in);\n    PrintWriter out = new PrintWriter(System.out);\n    Solver1515B solver = new Solver1515B();\n    int n = in.nextInt();\n    for (int i = 0; i < n; i++) {\n      solver.solve(i, in, out);\n    }\n    out.close();\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] havish) throws Exception{\n\t\t// TODO Auto-generated method stub\n \t\tsc = new MyScanner();\n \t\tout = new PrintWriter(System.out);\n \t\tint t = sc.nextInt();\n \t\tfor(int i = 0;i<t;i++){\n \t\t\tint n  =sc.nextInt();\n \t\t\tif (n%2== 1)\n \t\t\t\tout.println(\"NO\");\n \t\t\telse{\n\n \t\t\t\twhile(n%2 == 0){\n \t\t\t\t\tn/=2;\n \t\t\t\t}\n \t\t\t\tverdict(isSquare(n) || isSquare(2*n));\n \t\t\t\t\n\n \t\t\t}\n \t\t}\n \t\tout.close();\n \t\t\n \t}\n", "complexity": "linear"}
{"code": "    public static void main(String[]args)throws IOException\n        boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n        if(oj){sc=new AnotherReader();out=new PrintWriter(System.out);}\n        else{sc=new AnotherReader(100);out=new PrintWriter(\"output.txt\");}\n        int t=1;\n        t=ni();\n        while(t-- > 0) {process();}\n        out.flush();out.close();  \n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {new TimePass().run();}\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) throws IOException\n\t\tfinal long mod=(long) (1e9+7);  \n\t\tReader s=new Reader();\n\t\t  PrintWriter pt=new PrintWriter(System.out);\n\t\t  \n//\t\t  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\t  int T=s.nextInt();\n//\t\t  int T=Integer.parseInt(br.readLine());\n//\t\t  int T=1;\n\t\t  while(T-->0)\n\t\t  {\n\t\t        long n=s.nextInt();\n\t\t        long sq1=n/2;\n\t\t        \n\t\t        long sq2=n/4;\n\t\t        \n\t\t        if(isPerfectSquare(sq1)&&sq1*2==n||isPerfectSquare(sq2)&&sq2*4==n)\n\t\t        \tpt.println(\"YES\");\n\t\t        else\n\t\t        \tpt.println(\"NO\");\n\t\t        \n\t\t        \n\t\t        \n\t\t  }\n\t\t  pt.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        in = new FastReader();\n        out = new PrintWriter(System.out);\n\n        int t = 1;\n        t = in.nextInt();\n        while (t-- > 0) {\n            solve();\n        }\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\n        int i,N;\n\n        int T=Integer.parseInt(br.readLine().trim());\n        StringBuilder sb=new StringBuilder();\n\n        while (T-->0)\n        {\n            N=Integer.parseInt(br.readLine().trim());\n\n            boolean flag=false;\n            int sqrt=(int) Math.sqrt(N/2);\n            if(sqrt*sqrt==N/2&&N%2==0) flag = true;\n\n            sqrt=(int) Math.sqrt(N/4);\n            if(sqrt*sqrt==N/4&&N%4==0) flag = true;\n\n            sb.append(flag?\"YES\\n\":\"NO\\n\");\n        }\n        System.out.println(sb);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\tBufferedReader f = new BufferedReader(new InputStreamReader(System.in));\t\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tStringTokenizer st = new StringTokenizer(f.readLine());\n\n\t\tint T = Integer.parseInt(st.nextToken());\n\t\t\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tst = new StringTokenizer(f.readLine());\n\t\t\tint n = Integer.parseInt(st.nextToken());\n\t\t\tint sqrt = (int)Math.sqrt(n);\n\t\t\tint sqrt2 = (int)Math.sqrt(n/2);\n\t\t\tif (sqrt*sqrt == n && sqrt%2 == 0) {\n\t\t\t\tout.println(\"YES\");\n\t\t\t} else if (2*sqrt2*sqrt2 == n) {\n\t\t\t\tout.println(\"YES\");\n\t\t\t} else {\n\t\t\t\tout.println(\"NO\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        BPhoenixAndPuzzle solver = new BPhoenixAndPuzzle();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        StringBuilder ans = new StringBuilder();\n        int t = ri();\n//        int t=1;\n        while (t-- > 0)\n        {\n            long n=rl();\n            if(n%2==1)\n            {\n                ans.append(\"NO\\n\");\n                continue;\n            }\n\n            if(n%4==0)\n            {\n                long val = n/4;\n\n                long sq = (long) Math.sqrt(val);\n                if(sq*sq == val)\n                {\n                    ans.append(\"YES\\n\");\n                    continue;\n                }\n            }\n            if(n%2==0)\n            {\n                long val = n/2;\n                long sq = (long) Math.sqrt(val);\n                if(sq*sq == val)\n                {\n                    ans.append(\"YES\\n\");\n                    continue;\n                }\n            }\n            ans.append(\"NO\\n\");\n\n        }\n        out.print(ans.toString());\n        out.flush();\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n//        Scanner scan = new Scanner(System.in);\n        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));\n//        int t = scan.nextInt();\n        int t= Integer.parseInt(br.readLine());\n        while (t-->0)\n        {\n            String[] s1= br.readLine().split(\" \");\n            int n= Integer.parseInt(s1[0]);\n//            Integer[] a= new Integer[n];\n//            String[] s2= br.readLine().split(\" \");\n//            long sum=0;\n//            for (int i=0;i<n;i++){\n//                a[i]= Integer.parseInt(s2[i]);\n//                sum+= Math.abs(a[i]);\n//            }\n\n            int x= 1;\n            boolean ans=true;\n            while (n%2==0){\n                x*=2;\n                n/=2;\n            }\n            if (x==1) ans= false;\n            int z= (int)Math.sqrt(n);\n            if (z*z!=n) ans= false;\n\n            if (ans) System.out.println(\"YES\");\n            else System.out.println(\"NO\");\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n        FastScanner in = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        int t = in.nextInt(), tt = 0;\n        while(t-->0) { \n        \tint n = in.nextInt();\n        \tif(n%2!=0) out.println(\"NO\");\n        \telse{\n        \t\tn/=2;\n        \t\tif(Math.sqrt(n)==Math.ceil(Math.sqrt(n))) out.println(\"YES\");\n        \t\telse{\n        \t\t\tif(n%2!=0) out.println(\"NO\");\n        \t\t\telse{\n        \t\t\t\tn/=2;\n            \t\tif(Math.sqrt(n)==Math.ceil(Math.sqrt(n))) out.println(\"YES\");\n            \t\telse out.println(\"NO\");\n        \t\t\t}\n        \t\t}\n    \t    }\n    \t\t//tt++; out.println(\"Case #\"+tt+\": \"+ans);\n        }\n        out.flush();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().solve();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\treadInput();\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader sc = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Solver solver = new Solver();\n\t\tint t = sc.nextInt();\n//        int t = 1;\n        while (t-- != 0) {\n            solver.solve(sc, out);\n        }\n        out.close();\n\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner sc = new FastScanner();\n\t\tint T = sc.nextInt();\n\t\twhile(T-->0) {\n\t\t\tint n = sc.nextInt();\n\t\t\tif(n % 2 == 0 && issq(n/2)) {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t}\n\t\t\telse if(n % 4 == 0 && issq(n/4)) {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t}\n\t\t}\n\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException, FileNotFoundException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\t//BufferedReader in = new BufferedReader(new FileReader(\"two\"));\n\n\t\tHashSet<Integer> good = new HashSet<>();\n\t\tint i=1;\n\t\tfor (; i<= (int)(1e9);) {\n\t\t\ti <<= 1;\n\t\t\tgood.add(i);\n\t\t}\n\t\t\n\t\tfor (i=3; i*i*2 <= (int)(1e9); i++) {\n\t\t\tgood.add(i*i*2);\n\t\t}\n\t\t\n\t\tint beg = 4;\n\t\tfor (i=3; beg + i*4 <= (int)(1e9); i+=2) {\n\t\t\tgood.add(beg + i*4);\n\t\t\tbeg += i*4;\n\t\t}\n\t\t\n\t\tint t = Integer.parseInt(in.readLine());\n\t\twhile (t-- > 0) {\n\t\t\tint n = Integer.parseInt(in.readLine());\n\t\t\tif (good.contains(n)) {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        \n        var sc = new Scanner(System.in);\n        var pw = new PrintWriter(System.out);\n        \n        int T = Integer.parseInt(sc.next());\n        for(int t = 0; t < T; t++){\n            int n = Integer.parseInt(sc.next());\n            boolean ok = false;\n            if(n%2 == 0){\n                int a = n/2;\n                int b = (int) Math.sqrt(a);\n                if(b*b == a){\n                    ok = true;\n                }\n            }\n            if(n%4 == 0){\n                int a = n/4;\n                int b = (int) Math.sqrt(a);\n                if(b*b == a){\n                    ok = true;\n                }\n            }\n            if(ok){\n                pw.println(\"YES\");\n            }else{\n                pw.println(\"NO\");\n            }\n        }\n        pw.flush();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint t = input.nextInt();\n\t\tfor(int test = 0; test < t; test++){\n\t\t\tint n = input.nextInt();\n\t\t\tif(n % 2 == 0){\n\t\t\t\tif(Math.sqrt(n / 2) == (int)(Math.sqrt(n / 2))){\n\t\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\t}else if(n % 4 == 0 && Math.sqrt(n / 4) == (int)(Math.sqrt(n / 4))){\n\t\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        int t=sc.nextInt();\n        while(t-->0)\n        {\n            int n=sc.nextInt();\n            if(n%2==1)\n            {\n                System.out.println(\"NO\");\n                continue;\n            }\n            // squares of 2\n            int num=n/2;\n            int root = (int)Math.sqrt(num);\n            if(root*root==num)\n            {\n                System.out.println(\"YES\");\n                continue;\n            }\n            // squares of 4\n            if(n%4!=0)\n            {\n                System.out.println(\"NO\");\n                continue;\n            }\n            num = n/4;\n            root = (int) Math.sqrt(num);\n            if(root*root==num)\n            {\n                System.out.println(\"YES\");\n            }\n            else\n            {\n                System.out.println(\"NO\");\n            }\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args){\n\n        Scanner in = new Scanner(System.in);\n\n        int t = in.nextInt();\n        while(t > 0){\n            t --;\n            int n = in.nextInt();\n            if(n % 2 != 0){\n                System.out.println(\"NO\");\n                continue;\n            }\n            int a = n / 2;\n            int x = (int)Math.sqrt(a);\n            if(x * x == a || (x + 1) * (x + 1) == a){\n                System.out.println(\"YES\");\n                continue;\n            }\n            a = n / 4;\n            if(n % 4 != 0){\n                System.out.println(\"NO\");\n                continue;\n            }\n            x = (int)Math.sqrt(a);\n            if(x * x == a || (x + 1) * (x + 1) == a){\n                System.out.println(\"YES\");\n                continue;\n            }\n            System.out.println(\"NO\");\n\n\n\n        }\n\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        BPhoenixAndPuzzle solver = new BPhoenixAndPuzzle();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tPrintWriter out=new PrintWriter(System.out);\n    \tScanner s=new Scanner(System.in);  \n    \tint t=s.nextInt();\n    \tfor(int tt=0;tt<t;tt++) {\n    \t\tlong n=s.nextInt();\n    \t\tlong x=(long)Math.sqrt(n/2);\n    \t\tlong y=(long)Math.sqrt(n/4);\n    \t\tif(x*x*2==n || y*y*4==n) {\n    \t\t\tout.println(\"YES\");\n    \t\t}else {\n    \t\t\tout.println(\"NO\");\n    \t\t}\n    \t}\n    \tout.close();\n\t    s.close();\n\t}\n", "complexity": "linear"}
{"code": "", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\t/**/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/b.in\"))));\n\t\t/**/\n\t\t\n\t\tint t = sc.nextInt();\n\t\tfor (int z = 0; z < t; ++z) {\n\t\t\tint n = sc.nextInt();\n\t\t\tif (n%2==1) {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tn/=2;\n\t\t\tint sqrt = (int)Math.sqrt(n);\n\t\t\tif (sqrt*sqrt==n) {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (n%2==1) {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tn/=2;\n\t\t\tsqrt = (int)Math.sqrt(n);\n\t\t\tif (sqrt*sqrt==n) {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastReader sc=new FastReader();\n        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));\n        \n//        ArrayList<Integer> prime=getPrimeSieve();\n        int t=sc.nextInt();\n        int po=0;\n        \n        dirs=new HashMap<>();\n        dirs.put('U', new ArrayList<>());\n        dirs.get('U').addAll(Arrays.asList('U','R','D','L'));\n        dirs.put('L', new ArrayList<>());\n        dirs.get('L').addAll(Arrays.asList('L','U','R','D'));\n        dirs.put('D', new ArrayList<>());\n        dirs.get('D').addAll(Arrays.asList('D','L','U','R'));\n        dirs.put('R', new ArrayList<>());\n        dirs.get('R').addAll(Arrays.asList('R','D','L','U'));\n//        \n        outer:while(t-- >0) {\n        \tpo++;\n        \tint n=sc.nextInt();\n        \tint x=(int) Math.sqrt(n/2);\n        \tint y=(int) Math.sqrt(n/4);\n        \t\n        \tif(x*x*2 == n || y*y*4==n)\n        \t\tbw.append(\"YES\\n\");\n        \telse {\n        \t\tbw.append(\"NO\\n\");\n        \t}\n//        \tint x=sc.nextInt();\n//        \tInteger[] arr=new Integer[n];\n//        \tlong sum=0;\n//        \t\n//        \tfor(int i=0;i<n;i++) {\n//        \t\tarr[i]=sc.nextInt();\n//        \t\tsum+=arr[i];\n//        \t}\n//        \t\n//        \tif(sum==x) {\n//    \t\t\tbw.append(\"NO\\n\");\n//    \t\t\tcontinue outer;\n//        \t}\n//\n//        \tArrays.sort(arr,Collections.reverseOrder());\n//        \t\n//        \tsum=0;\n//        \tfor(int i=0;i<n-1;i++) {\n//        \t\tsum+=arr[i];\n//        \t\t\n//        \t\tif(sum==x) {\n//        \t\t\tint temp=arr[i];\n//        \t\t\tarr[i+1]=arr[i];\n//        \t\t\tarr[i]=temp;\n//            \t\tsum=sum-arr[i+1]+arr[i];\n//        \t\t}\n//        \t}\n//        \tbw.append(\"YES\\n\");\n        \t\n//        \tfor(int i=0;i<n;i++) {\n//        \t\tbw.append(arr[i]+\" \");\n//        \t}\n//        \tbw.append(\"\\n\");\n//        \tbw.append(\"Case #\"+po+\": \"+0+\"\\n\");\n        }\n        bw.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws IOException {\n        Scan input=new Scan();\n        StringBuilder ans=new StringBuilder(\"\");\n        int test=input.scanInt();\n//        boolean sq[]=new boolean[1000000005];\n//        for(int i=1;i*i<sq.length;i++) {\n//            sq[i*i]=true;\n//        }\n        for(int tt=1;tt<=test;tt++) {\n            int n=input.scanInt();\n            if(n%2==1) {\n                ans.append(\"NO\\n\");\n                continue;\n            }\n            n/=2;\n            double sq=Math.sqrt(n);\n            if(Math.floor(sq)==Math.ceil(sq)) {\n                ans.append(\"YES\\n\");\n                continue;\n            }\n            if(n%2==1) {\n                ans.append(\"NO\\n\");\n                continue;\n            }\n            n/=2;\n            sq=Math.sqrt(n);\n            if(Math.floor(sq)==Math.ceil(sq)) {\n                ans.append(\"YES\\n\");\n                continue;\n            }\n            ans.append(\"NO\\n\");\n        }\n        System.out.println(ans);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        int t = sc.nextInt();\n        Set<Long> square = new HashSet<>();\n        for (long i = 1; i <= (long) 1e5; i++) square.add(i * i);\n        while (t-- > 0) {\n            long n = sc.nextLong();\n            if ((n % 2 ==0 && square.contains(n / 2))|| (n % 4 == 0 &&square.contains(n / 4))) {\n                out.println(\"YES\");\n            } else {\n                out.println(\"NO\");\n            }\n        }\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFA();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt(), d = s.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = s.nextInt();\n\t\t}\n\t\tArrays.sort(arr);\n\t\tint count = 0;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tint dist = arr[i] - arr[i - 1];\n\t\t\tif(dist > 2 * d){\n\t\t\t\tcount += 2;\n\t\t\t}else if(dist == 2 * d){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\tSystem.out.println(count + 2);\n\n\t}\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) {\n    new Thread(null, new Runnable() {\n      @Override\n      public void run() {\n        long start = System.currentTimeMillis();\n        String debug = args.length > 0 ? args[0] : null;\n        if (debug != null) {\n          try {\n            is = java.nio.file.Files.newInputStream(java.nio.file.Paths.get(debug));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n        reader = new java.io.BufferedReader(new java.io.InputStreamReader(is), 32768);\n        solve();\n        out.flush();\n        tr((System.currentTimeMillis() - start) + \"ms\");\n      }\n    }, \"\", 64000000).start();\n  }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = sc.nextInt(), d = sc.nextInt();\n\t\tint [] a = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\tTreeSet<Integer> set = new TreeSet<>();\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tint tmp = a[i] - d;\n\t\t\tif(i == 0 || tmp > a[i-1] && tmp - a[i-1] >= d)\n\t\t\t\tset.add(tmp);\n\t\t\ttmp = a[i] + d;\n\t\t\tif(i == n-1 || tmp < a[i+1] && a[i+1] - tmp >= d)\n\t\t\t\tset.add(tmp);\n \t\t}\n\t\tout.println(set.size());\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int n = sc.nextInt();\n        int d = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < arr.length; i++) {\n            set.add(arr[i]+d);\n            set.add(arr[i]-d);\n        }\n\n        int cnt = 0;\n        for (int loc: set) {\n            int minDist = (int)2e9;\n            for (int i = 0; i < n; i++) {\n                minDist = Math.min(minDist, Math.abs(arr[i]-loc));\n            }\n\n            if(minDist == d)\n                cnt++;\n        }\n\n        pw.println(cnt);\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\tint d = in.nextInt();\n\t\tint ans=2;\n\t\t\n\t\tint[] a = new int[n];\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i] = in.nextInt();\n\t\t\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tif(a[i]-a[i-1]>2*d)\n\t\t\t{\n\t\t\t\tans += 2;\n\t\t\t}\n\t\t\telse if(a[i]-a[i-1]==2*d)\n\t\t\t\tans += 1;\n\t\t}\n\t\t\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new A().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint[] cities = new int[n];\n\t\tint d = input.nextInt();\n\t\tfor (int i = 0; i<n; i++) {\n\t\t\tcities[i] = input.nextInt();\n\t\t}\n\t\tint possibilities = 0;\n\t\tArrayList<Integer> newHotels = new ArrayList<Integer>();\n\t\tfor (int i = 0; i<n; i++) {\n\t\t\tint plusD = cities[i]+d;\n\t\t\tif (newHotels.indexOf(cities[i]+d)==-1 && minDist(plusD,cities)==d) {\n\t\t\t\tpossibilities++;\n\t\t\t\tnewHotels.add(cities[i]+d);\n\t\t\t}\n\t\t\tif (newHotels.indexOf(cities[i]-d)==-1 && minDist(cities[i]-d,cities)==d) {\n\t\t\t\tpossibilities++;\n\t\t\t\tnewHotels.add(cities[i]-d);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(possibilities);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = nextInt();\n        int d = nextInt();\n        int ans = 2;\n        int b[] = new int [n];\n        Arrays.sort(b);\n        for (int i = 0; i < n; i++) {\n            b[i] = nextInt();\n        }\n        for (int i = 1; i < n; i++) {\n            if (b[i] - b[i - 1] >= d * 2) {\n                ans++;\n            }\n            if (b[i] - b[i - 1] > d * 2) {\n                ans++;\n            }\n        }\n        pw.println(ans);\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        // Scanner scan = new Scanner(System.in);\n        // PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        // int n = Integer.parseInt(bf.readLine());\n        StringTokenizer st = new StringTokenizer(bf.readLine());\n        // int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n        int n = Integer.parseInt(st.nextToken());\n        int d = Integer.parseInt(st.nextToken());\n        st = new StringTokenizer(bf.readLine());\n        int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n        int ans = 2;\n        for(int i=0; i<n-1; i++) {\n          int diff = a[i+1]-a[i];\n          if(diff == 2*d) ans++;\n          else if(diff > 2*d) ans += 2;\n\n        }\n        System.out.println(ans);\n        // int n = scan.nextInt();\n\n        // out.close(); System.exit(0);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner in = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n//        FastScanner in = new FastScanner(\"input.txt\");\n//        PrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n        new Task().solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint n = nextInt();\n\t\tint d = nextInt();\n\t\tint[]x = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tx[i] = nextInt();\n\t\t}\n\t\tint ans = 2;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif (x[i]-x[i-1]==2*d)\n\t\t\t\tans++;\n\t\t\telse if (x[i]-x[i-1] > 2*d)\n\t\t\t\tans += 2;\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new Main(),\"Main\",1<<26).start();\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    TaskA solver = new TaskA();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        Scan scan = new Scan();\n        int n = scan.scanInt();\n        long d = scan.scanLong();\n        long a[]=new long[n];\n        for(int i=0;i<n;i++){\n            a[i]=scan.scanLong();\n        }\n        Arrays.sort(a);\n        int count=0;\n        for(int i=0;i<n-1;i++){\n            if((a[i+1]-d)>(a[i]+d)){\n                count+=2;\n            }else if((a[i+1]-d)==(a[i]+d)){\n                count++;\n            }\n        }\n        count+=2;\n        System.out.println(count);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) { new utkarsh().run(); }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        try (InputProvider input = new InputProvider(System.in);\n             PrintWriter output = new PrintWriter(System.out)) {\n            new Main().solve(input, output);\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc=new Scanner(System.in);\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\tint ans=0;\n\t\tint n=sc.nextInt(),d=sc.nextInt();\n\t\tTreeSet<Integer> set=new TreeSet();\n\t\tint []x=new int [n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tx[i]=sc.nextInt();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tint x1=x[i]+d;\n\t\t\tif (ok(x,d,x1))\n\t\t\t\tset.add(x1);\n\t\t\tx1=x[i]-d;\n\t\t\tif (ok(x,d,x1))\n\t\t\t\tset.add(x1);\n\t\t\t\n\t\t\t\n\t\t}\n\t\tpw.println(set.size());\n\t\t\t\n\t\t\n\t\tpw.close();\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n    public static void main(String[] args) {\n        new Thread(null,new Main(),\"Main\",1<<26).start();\n\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tint d =sc.nextInt();\n\t\tint[] hotels = new int[n];\n\t\tfor (int i = 0; i < hotels.length; i++) {\n\t\t\thotels[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 0; i < hotels.length-1; i++) {\n\t\t\tint one = hotels[i];\n\t\t\tint two = hotels[i+1];\n\t\t\tdouble mid = (two-one)*1.0/2.0;\n\t\t\tif(mid==d) {\n\t\t\t\tcount++;\n//\t\t\t\tSystem.out.println(\"hello\"+\" \"+i+\" \"+(i+1));\n\t\t\t}\n\t\t\telse if(mid>d) {\n//\t\t\t\tSystem.out.println(\"hello2\"+\" \"+i+\" \"+(i+1));\n\t\t\t\tcount+=2;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcount+=2;\n\t\tSystem.out.println(count);\n\t\t\n\t\t\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew TaskA(System.in, System.out);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        InputReader in = new InputReader(System.in);\n        OutputWriter out = new OutputWriter(System.out);\n         int n = in.nextInt();\n         int d = in.nextInt();\n         int[]a = new int[n];\n         int ans=2;\n\n         for (int i =0;i<n;i++)\n         {\n             a[i] = in.nextInt();\n\n         }\n         for (int i =0;i<n-1;i++)\n         {\n\n             if (a[i+1]-a[i]==2*d)\n                 ans++;\n             if (a[i+1]-a[i]>2*d)\n                 ans+=2;\n         }\n         out.printLine(ans);\n        out.flush();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws java.lang.Exception{\n        new lets_do().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=scan.nextInt(), k=scan.nextInt();\n\t\tint[] a=new int[n];\n\t\tfor(int i=0;i<n;i++) a[i]=scan.nextInt();\n\t\tint res=2;\n\t\tfor(int i=0;i<n-1;i++) {\n\t\t\tif(a[i+1]-a[i]>2*k) res+=2;\n\t\t\telse if(a[i+1]-a[i]==2*k) res++;\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Thread(null, new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tnew Main().solve();\n\t\t\t}\n\t\t}, \"1\", 1 << 26).start();\n\t\t//new Main().solve();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new Main().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 28).start();\n        else new Main().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new A(), \"_cf\", 1 << 28).start();}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int d = sc.nextInt();\n        int[] locs = new int[n];\n        for (int i = 0; i < n; i++) {\n            locs[i] = sc.nextInt();\n        }\n        Arrays.sort(locs);\n        int count = 2;\n        for (int i = 0; i < locs.length-1; i++) {\n            if(locs[i+1]-locs[i]==2*d){\n                count++;\n            }else if(locs[i+1]-locs[i]>2*d){\n                count+=2;\n            }\n        }\n        System.out.println(count);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        long d = s.nextLong();\n        long[] arr = new long[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = s.nextLong();\n        }\n        Arrays.sort(arr);\n        long ans  = 2;\n        for (int i = 0; i < n - 1; i++) {\n            if(arr[i + 1] - arr[i] > 2 * d){\n                ans += 2;\n            }else if(arr[i + 1] - arr[i] == 2 * d){\n                ans += 1;\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws Throwable {\n        MyScanner sc=new MyScanner();\n        PrintWriter pw=new PrintWriter(System.out);\n\n        int n=sc.nextInt();\n        int d=sc.nextInt();\n        int [] a=new int [n];\n        for(int i=0;i<n;i++)\n            a[i]=sc.nextInt();\n        int ans=2;\n        for(int i=0;i<n-1;i++){\n            if(a[i+1]-a[i]<2*d)\n                continue;\n            if(a[i+1]-a[i]==2*d)\n                ans++;\n            else\n                ans+=2;\n        }\n        pw.println(ans);\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTask solver = new Task();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n\n        Scanner reader = new Scanner(System.in);\n        int n = reader.nextInt();\n        long d = reader.nextLong();\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = reader.nextInt();\n        Arrays.sort(a);\n        int ans = 2;\n        for(int i = 0; i < n - 1; i++){\n            if(a[i + 1] - a[i] > 2 * d) {\n                ans += 2;\n            }\n            else if(a[i + 1] - a[i] == 2 * d)\n                ans++;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = in.nextInt();\n        int d = in.nextInt();\n\n        int[] a = in.arrayInt(n);\n\n        int count = 2;\n\n        for(int i = 0 ;i < n-1; i++) {\n            if( a[i+1] - a[i] == 2 * d )\n                count += 1;\n            if( a[i+1] - a[i] > 2 * d)\n                count += 2;\n        }\n\n        out.println(count);\n\n\n\n        log.flush();\n        in.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "linear"}
{"code": "    public static void main(String[] z) throws Exception {\n        PrintWriter pw = new PrintWriter(System.out);\n        Scanner s = new Scanner(System.in);\n        int a = ni(), b=ni(), o=2;\n        m = new int[a];\n        for(int q=0; q<a; q++) m[q] = ni();\n        Arrays.sort(m);\n        for(int q=1; q<a; q++){\n            if(m[q]-m[q-1]==b*2) o++;\n            else if(m[q]-m[q-1]>b*2) o+=2;\n        }\n        System.out.println(o);\n        pw.flush();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(null,null,\"_\",1<<25)\n        {\n            public void run()\n            {\n                try\n                {\n                    solve();\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew ProblemA().run();\n\t}\n", "complexity": "linear"}
{"code": "\t\tpublic static void main(String[] args)\n\t\t\tInputReader in = new InputReader(System.in);\n\t\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\t\n\t\t\t//Code starts..\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tint n = in.nextInt();\n\t\t\tlong d = in.nextInt();\n\t\t\tlong[] a = new long[n];\n\t\t\tfor(int i=0; i<n; i++)\n\t\t\t\ta[i] = in.nextLong();\n\t\t\t\n\t\t\t\n\t\t\tint ans = 0;\n\t\t\t//ans++;\n\t\t\tHashSet<Long> set = new HashSet<>();\n\t\t\t/*set.add(a[0]-d);\n\t\t\tif(Math.abs(a[0]+d-a[1])>=d)\n\t\t\t{\n\t\t\t\tans++;\n\t\t\t\tset.add(a[0]+d);\n\t\t\t}\n\t\t\t\n\t\t\t*/\n\t\t\tfor(int i=1; i<n; i++)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t//pw.println(a[i]+\" \"+a[i-1]);\n\t\t\t\t\n\t\t\t\tlong dis = (long) Math.abs(a[i]-a[i-1]);\n\t\t\t\t//pw.println(dis);\n\t\t\t\tif(dis==2*d)\n\t\t\t\t\tans++;\n\t\t\t\t\n\t\t\t\tif(dis-(long)2*d>0)\n\t\t\t\t\tans += 2;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tpw.println(ans+2);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t//Code ends....\n\t\t\t\n\t\t\tpw.flush();\n\t\t\tpw.close();\n\t\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n\t// write your code here\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = reader.readLine().split(\" \");\n        int n = Integer.parseInt(s[0]);\n        int d = Integer.parseInt(s[1]);\n\n        List<Integer> list = new ArrayList<>();\n        s = reader.readLine().split(\" \");\n        for (int i = 0; i < n; i++) {\n            list.add(Integer.parseInt(s[i]));\n        }\n\n        HashSet<Integer> set = new HashSet<>();\n        for (Integer i : list) {\n            set.add(i - d);\n            set.add(i + d);\n        }\n\n        HashSet<Integer> set2 = new HashSet<>();\n\n        for (Integer i : set) {\n            for (Integer x : list) {\n                if (Math.abs(i - x) < d) {\n                    set2.add(i);\n            }\n            }\n        }\n\n        set.removeAll(set2);\n        System.out.println(set.size());\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);PrintWriter pw = new PrintWriter(System.out);\n        int n=sc.nextInt(),d=sc.nextInt();int[] a = new int[n];int ans=2;a[0]=sc.nextInt();\n        for (int i=1;i<n;i++){\n            a[i]=sc.nextInt();\n            if (a[i]-a[i-1]==2*d)ans++;\n            else if (a[i]-a[i-1]>2*d)ans+=2;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception { new A().run(); }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint n = in.nextInt();\n\t\tlong d = in.nextLong();\n\t\tlong[]a = new long[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i] = in.nextLong();\n\t\tint ans = 1;\n\t\tfor(int i=0;i<n-1;i++)\n\t\t{\n\t\t\tlong x = a[i+1]-a[i];\n\t\t\tif(x==2*d)\n\t\t\t\tans++;\n\t\t\telse if(x>2*d)\n\t\t\t\tans+=2;\n\t\t\t//System.out.println(ans);\n\t\t}\n\t\tans++;\n\t\tpw.print(ans);\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint N = readInt(), D = readInt(); long arr[] = new long[N+2]; arr[0] = -3000000000L; arr[N+1] = -arr[0];\n\t\tfor(int i = 1; i<=N; i++) arr[i] = readInt();\n\t\tint cnt = 1; if(Math.abs(arr[2]-(arr[1] + D)) >= D) cnt++; for(int i = 2; i<=N; i++) {\n\t\t\tif(Math.abs(arr[i-1]-(arr[i] - D)) > D) cnt++;\n\t\t\tif(Math.abs(arr[i+1]-(arr[i] + D)) >= D) cnt++;\n\t\t}\n\t\tprintln(cnt); exit();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        // TODO Auto-generated method stub\n        new Main().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[])\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();   \n        \n        int odd = -1;\n        int even = -1;\n        int oc = 0;\n        int ec = 0;\n        \n        for(int i=0;i < n;i++)\n        {\n            if(scan.nextInt() % 2 == 0)\n            {\n                ec++;\n                even = i+1;\n            }\n            else\n            {\n                oc++;\n                odd = i+1;\n            }\n        }\n        \n        if(ec == 1)\n            System.out.println(even);\n        else\n            System.out.println(odd);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tList<Integer> list = new ArrayList<Integer>(), list2;\n\t\tfor (; n-- > 0;) {\n\t\t\tlist.add(scan.nextInt());\n\t\t}\n\t\tlist2 = new ArrayList<Integer>(list);\n\t\tCollections.sort(list2, new Comparator<Integer>() {\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\treturn o1 % 2 - o2 % 2;\n\t\t\t}\n\t\t});\n\t\tSystem.out.println(list.indexOf(list2.get(list2.get(1) % 2 > 0 ? 0\n\t\t\t\t: list2.size() - 1)) + 1);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A25().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew R025A().process();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args){\n\t\n    try{\n\t\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      int i, n, temp=1;\n      String str = \"\";\n      int[] arr;\n      int r;\n      \n      while (temp!= '\\n'){\n\t\ttemp = System.in.read();\n\t\t//if (temp=='\\n')\n\t\t\t//break;\n\t\tstr = str.concat(Character.toString((char)temp));\n      }\n\t  str = str.replaceAll(\"[^0-9]\", \"\");\n      n = Integer.parseInt(str);\n      temp=1;\n      str=\"\";\n      \n      arr = new int[n];\n      \n      for (i=0;i<n;i++){\n\t\twhile (temp!=' ' && temp!=-1){\n\t\t\ttemp = System.in.read();\n\t\t\t//if (temp==' ' || temp==-1)\n\t\t\t\t//break;\n\t\t\tstr = str.concat(Character.toString((char)temp));\n\t\t}\n\t\tstr = str.replaceAll(\"[^0-9]\", \"\");\n\t\tarr[i] = Integer.parseInt(str);\n\t\tstr=\"\";\n\t\ttemp=1;\n      }\n      \n\t  r=(arr[2]%2);\n      if ((arr[0]%2)==(arr[1]%2)){\n\t\tr=(arr[0]%2);\n      }\n      \n      for (i=0;i<n;i++){\n\t\tif ((arr[i]%2)!=r){\n\t\t\tSystem.out.println(i+1);\n\t\t\tbreak;\n\t\t}\n      }\n      \n\t}catch (Exception e){\n\t\tSystem.out.println(\"OH NOES \" + e);\n\t}\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new a()).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        try\n        {\n            BufferedReader in = new BufferedReader(\n                new InputStreamReader(System.in));\n            String str = in.readLine();\n            int n = Integer.parseInt(str);\n            int odd = -1, even = -1, odds = 0, evens = 0;\n            //while (n-- > 0)\n            //{\n                str = in.readLine();\n                String[] numbers = str.split(\" \");\n                int index = 1;\n                for (String number: numbers)\n                {\n                    int i = Integer.parseInt(number);\n                    if (i % 2 == 0)\n                    {\n                        ++evens;\n                        if (even == -1)\n                            even = index;\n                    }\n                    else\n                    {\n                        ++odds;\n                        if (odd == -1)\n                            odd = index;\n                    }\n                    ++index;\n                }\n            //}\n            \n            System.out.println((evens > odds ? odd : even));\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew A().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        br.readLine();\n        String[] ss = br.readLine().split(\" \");\n        int n = ss.length;\n        int[] a = new int[n];\n        for (int i = 0; i < n; ++i)\n            a[i] = Integer.parseInt(ss[i]);\n        for (int i = 0; i < n; ++i) {\n            boolean ok = true;\n            for (int j = 0; j < n; ++j)\n                if (j != i && a[j] % 2 == a[i] % 2)\n                    ok = false;\n            if (ok)\n                System.out.println(i + 1);\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] nums = new int[n];\n        int kisu = 0;\n        int gusu = 0;\n        for(int i = 0 ; i < n ; i++){\n            nums[i] = sc.nextInt();\n            if(nums[i] % 2 == 0)gusu++;\n            if(nums[i] % 2 == 1)kisu++;\n        }\n        int ans = -1;\n        if(gusu == 1){\n            for(int i = 0 ; i < n ; i++){\n                if(nums[i]%2 == 0){\n                    ans = i+1;\n                    break;\n                }\n            }\n        }\n        else{\n            for(int i = 0 ; i < n ; i++){\n                if(nums[i]%2 == 1){\n                    ans = i+1;\n                    break;\n                }\n            }\n            \n        }\n        System.out.println(ans);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter writer = new PrintWriter(System.out);\n\t\tint n = Integer.parseInt(reader.readLine());\n\t\tString [] split = reader.readLine().split(\"\\\\s+\");\n\t\tint value;\n\t\tint [] count = new int[2];\n\t\tint [] pos = new int[2];\n\t\tfor(int i = 0; i < split.length; i++){\n\t\t\tvalue = Integer.parseInt(split[i]);\n\t\t\tcount[value % 2] ++;\n\t\t\tpos[value % 2] = i + 1;\n\t\t}\n\t\twriter.println((count[0] == 1) ? pos[0] : pos[1]);\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (s.hasNext()) {\n            int n = s.nextInt();\n            int[] a = new int[n];\n            int odd = 0;\n            int even = 0;\n            int po = -1;\n            int ev = -1;\n            for(int i=0;i<n;i++){\n                a[i] = s.nextInt();\n                if(a[i] % 2 == 0) {\n                    even ++;\n                    ev = i + 1;\n                } else {\n                    odd++;\n                    po = i + 1;\n                }\n            }\n            if(odd == 1) {\n                System.out.println(po);\n            }else{\n                System.out.println(ev);\n            }\n        }\n    }\n", "complexity": "linear"}
{"code": "public static void main(String[] args) throws Exception {\nin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\nout = new PrintWriter(System.out);\nint n = nextInt();\nbyte f = (byte)nextInt();\nbyte s = (byte)nextInt();\nbyte t = (byte)nextInt();\nboolean bf = false;\nboolean bs = false;\nboolean bt = false;\nif((f&1) == 0){bf = true;}\nif((s&1) == 0){bs = true;}\nif((t&1) == 0){bt = true;}\n//System.out.println(bf+\"\"+bs+\"\"+bt);\nif((!bf)&&bs&&bt){System.out.println(1);return;}\nif(bf&&(!bs)&&bt){System.out.println(2);return;}\nif(bf&&bs&&(!bt)){System.out.println(3);return;}\nif(bf&&!bs&&!bt){System.out.println(1);return;}\nif(!bf&&bs&&!bt){System.out.println(2);return;}\nif(!bf&&!bs&&bt){System.out.println(3);return;}\nfor(int i = 4; i<=n; i++){\nbyte g = (byte) nextInt();\nif(((g+f)&1) == 1){System.out.println(i); return;}\n}\n\n\n\nout.flush();\n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(new Solution()).run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main (String [] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader (new InputStreamReader (System.in));\n\t\tdo {\n\t\t\tint n = Integer.parseInt (br.readLine ());\n\t\t\t//args;\n\t\t\tint [] ns = new int [(args = br.readLine ().split (\" \")).length];\n\t\t\tint evenCount = 0, oddCount = 0, evI = 1, oddI = 1;\n\t\t\tfor (int i = 0; i < ns.length; i++) {\n\t\t\t\tif ((ns [i] = Integer.parseInt (args [i])) % 2 == 0) {\n\t\t\t\t\tevenCount ++;\n\t\t\t\t\tevI = i;\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\toddCount ++;\n\t\t\t\t\toddI = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (evenCount == 1) System.out.println (evI + 1);\n\t\t\telse System.out.println (oddI + 1);\n\t\t} while (br.ready ());\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        // TODO code application logic here\n        try\n        {\n            Parserdoubt pd=new Parserdoubt(System.in);\n            int t=pd.nextInt();\n            int inde=0,indo=0,o=0,e=0;\n            for(int i=0;i<t;i++)\n            {\n                if(pd.nextInt()%2==0)\n                {\n                    inde=i;\n                    e++;\n                }\n                else\n                {\n                    o++;\n                    indo=i;\n                }\n            }\n            if(o==1)\n            {\n                System.out.println(indo+1);\n            }\n            else\n            {\n                System.out.println(inde+1);\n            }\n        }\n        catch(Exception e){}\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args){\n\t  Scanner in = new Scanner(System.in);\n\t  int n = in.nextInt();\n\t  int a[] = new int[100];\n\t  for (int i = 0;i<n;i++) a[i] = in.nextInt()%2;\n\t  if (a[0]==a[1] || a[0]==a[2]){\n\t\t  for (int i = 1;i<n;i++)\n\t\t\t  if (a[i] != a[0]) {\n\t\t\t\t  System.out.println(i+1);\n\t\t\t\t  break;\n\t\t\t  }\n\t  } else{\n\t\t  System.out.println(1);\n\t  }\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) throws Exception {\n\t\tBufferedReader stdin =\n\t\t\tnew BufferedReader(new InputStreamReader(System.in));\n\t\tString line;\n\t\t\tline = stdin.readLine();\n\t\t\tint n = Integer.parseInt(line);\n\t\t\tline = stdin.readLine();\n\t\t\tList even = new ArrayList();\n\t\t\tList odd = new ArrayList();\n\t\t\tString[] kk = line.split(\" \");\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tif(Integer.parseInt(kk[i])%2==0)\n\t\t\t\t\teven.add(i);\n\t\t\t\telse\n\t\t\t\t\todd.add(i);\n\t\t\t}\n\t\t\tif(even.size()==1)\n\t\t\t\tSystem.out.println((Integer)even.get(0)+1);\n\t\t\telse\n\t\t\t\tSystem.out.println((Integer)odd.get(0)+1);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tArrayList<Integer> p = new ArrayList<Integer>();\n\t\tArrayList<Integer> o = new ArrayList<Integer>();\n\t\t\n\t\tint n = nextInt();\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tint a = nextInt();\n\t\t\tif (a % 2 == 0) p.add(i+1);\n\t\t\telse o.add(i+1);\n\t\t}\n\t\t\n\t\tif (p.size() < o.size()) out.println(p.get(0));\n\t\telse out.println(o.get(0));\n\n\t\tout.flush();\n\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tint n = nextInt();\n\t\tint[] c = new int[2];\n\t\tint[] f = new int[2];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint x = nextInt(), p = x%2;\n\t\t\tif (c[p]++ == 0) f[p] = i+1;\n\t\t}\n\t\tout.println(c[0] == 1 ? f[0] : f[1]);\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint a1 = 0, a2 = 0;\n\t\tint n1 = 0, n2 = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tint c = sc.nextInt();\n\t\t\tif (c % 2 == 1) {\n\t\t\t\ta1 = i;\n\t\t\t\tn1++;\n\t\t\t} else {\n\t\t\t\ta2 = i;\n\t\t\t\tn2++;\n\t\t\t}\n\t\t}\n\t\tif (n1 == 1) {\n\t\t\tSystem.out.println(a1);\n\t\t} else {\n\t\t\tSystem.out.println(a2);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) throws Exception\n    new IQTest().run();\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew R025A().process();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tString[] number = new String[n];\n\t\tsc.nextLine();\n\t\tString l = sc.nextLine();\n\t\tnumber = l.split(\" \");\n\t\tint oe = 1;\n\t\tif((Integer.valueOf(number[0])%2 +\n\t\t   Integer.valueOf(number[1])%2 +\n\t\t   Integer.valueOf(number[2])%2) > 1) {\n\t\t\toe = 0;\n\t\t}\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif((Integer.valueOf(number[i])%2)==oe) {\n\t\t\t\tSystem.out.println(i+1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        ProblemA f = new ProblemA();\n        f.solve();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)throws IOException {\n\t\tnew A().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tnew Thread(null, new A(), \"\", 1 << 20).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String []args)throws Exception\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        int n=0;\n        n=Integer.parseInt(br.readLine());\n        String inp=\"\";\n        inp=br.readLine();\n        int no[]=new int[n];\n        String tinp[]=inp.split(\" \");\n        for(int i=0;i<n;i++)\n        {\n            no[i]=Integer.parseInt(tinp[i]);\n        }\n        int eve=0,odd=0;\n        for(int i=0;i<3;i++)\n        {\n            int rem=no[i]%2;\n            if(rem==0)\n                eve++;\n            else\n                odd++;\n        }\n               if(eve>1)\n               {\n                   for(int i=0;i<n;i++)\n                   {\n                       if(no[i]%2==1)\n                       {\n                           System.out.println(i+1);\n                           break;\n                       }\n                   }\n               }\n               else\n               {\n                     for(int i=0;i<n;i++)\n                      {\n                          if(no[i]%2==0)\n                          {\n                           System.out.println(i+1);\n                           break;\n                          }\n                      }\n            \n               }\n                \n\n}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    int[] arr = new int[n];\n    for (int i = 0; i < n; ++i) {\n        arr[i] = scanner.nextInt();\n    }\n    boolean isOdd = false;\n    if ((arr[0] % 2 == 0 && arr[1] % 2 == 0) || (arr[0] % 2 == 0 && arr[2] % 2 == 0)\n        || (arr[1] % 2 == 0 && arr[2] % 2 == 0)) {\n        isOdd = true;\n    }\n    if (isOdd) {\n        for (int i = 0; i < n; ++i) {\n        if (arr[i] % 2 == 1) {\n            System.out.println(i + 1);\n            break;\n        }\n        }\n    } else {\n        for (int i = 0; i < n; ++i) {\n        if (arr[i] % 2 == 0) {\n            System.out.println(i + 1);\n            break;\n        }\n        }\n    }\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        \n        int numberEntries = scan.nextInt();\n        scan.nextLine();\n        String[] numbers = scan.nextLine().split(\" \");\n        numbers = parity(numbers);\n        int evenOdd = evenOdd(parity);\n       \n        for (int i = 0; i < parity.length; i++) {\n            if (parity[i] == evenOdd) {\n                System.out.println(i + 1);\n                System.exit(0);\n            }\n        }\n            \n        \n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        // TODO code application logic here\n        \n        Scanner in=new Scanner(System.in);\n         int n=in.nextInt();\n         \n        if(n>=3&&n<=100)\n        {\n        int num[]=new int[n];\n        for(int i=0;i<n;i++)\n        {\n            num[i]=in.nextInt();\n        }\n        int even=0,odd=0,ceven=0,codd=0;\n        for(int i=0;i<n;i++)\n        {\n            if(num[i]%2==0)\n            {\n                even++;\n                ceven=i+1;\n                \n            }\n            else\n            {\n                odd++;\n                codd=i+1;\n            }\n        }\n        if(odd==1)\n        {\n            System.out.println(\"\"+codd);\n        }\n        else\n        {\n            System.out.println(\"\"+ceven);\n        }\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        //System.setIn(new FileInputStream(\"1\"));\n        in = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n\n        solve();\n\n        in.close();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        n = s.nextInt();\n        \n        int[] nums = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            nums[i] = s.nextInt();\n        }\n        \n        \n        int ei = -1;\n        int oi = -1;\n        int ecnt = 0;\n        int ocnt = 0;\n        for (int i = 0; i < n; i++) {\n            if(nums[i] % 2 == 0){\n                ei = i;\n                ecnt++;\n            }else{\n                oi = i;\n                ocnt++;\n            }\n        }\n        if(ecnt == 1){\n            System.out.println(ei+1);\n        }else{\n            System.out.println(oi+1);\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Main iq = new Main();\n        Scanner sc = new Scanner(System.in);\n        int n;\n        n = sc.nextInt();\n        int[] naturalNumbers = new int[n];\n        for (int i = 0; i < naturalNumbers.length; i++) {\n            naturalNumbers[i] = sc.nextInt();\n        }\n        System.out.println(iq.diffInEvenness(n, naturalNumbers));          \n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws Exception {\n        Iq.metod();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tArrayList<Integer> e=new ArrayList<Integer>();\n\t\tArrayList<Integer> o=new ArrayList<Integer>();\n\t\tint size=sc.nextInt();\n\t\tfor(int w=0;w<size;w++)\n\t\t{\n\t\t\tint x=sc.nextInt();\n\t\t\tif(x%2==0)e.add(w+1);\n\t\t\telse o.add(w+1);\n\t\t}\n\t\tif(e.size()==1)System.out.println(e.get(0));\n\t\telse System.out.println(o.get(0));\n\t\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new TaskA()).start();\n//\t\tnew Template().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String s = in.readLine();\n        String[] p = in.readLine().split(\" \");\n        List<Integer> a = new ArrayList<Integer>();\n        for (String k : p) {\n            a.add(Integer.parseInt(k));\n        }\n        int n = a.size();\n        int c1 = 0;\n        int c2 = 0;\n        int c1p = 0;\n        int c2p = 0;\n        for (int i = 0; i < n; i++) {\n            if (a.get(i) % 2 == 0) {\n                c1++;\n                c1p = i;\n            } else {\n                c2++;\n                c2p = i;\n            }\n        }\n        if (c1 < c2) {\n            System.out.println(c1p + 1);\n        }  else {\n            System.out.println(c2p + 1);\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        int i,j,k;\n        int counter[] = new int[2];\n        int a[] = new int[200];\n        int needed;\n        \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        \n        int N = Integer.parseInt(br.readLine());\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        \n        for (i=1;i<=N;i++) {\n            a[i] = Integer.parseInt(st.nextToken());\n            counter[a[i]%2]++;\n        }\n        \n        if (counter[0] == 1) {\n            needed = 0;\n        } else {\n            needed = 1;\n        }\n        \n        for (i=1;i<=N;i++) {\n            if (a[i]%2 == needed) {\n                System.out.println(i);\n                return;\n            }\n        }\n        \n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint a[] = new int[n];\n\t\tfor(int i=0;i<n;i++) a[i] = in.nextInt()%2;\n\t\t\n\t\tint z = 0;\n\t\tfor(int i=0;i<n;i++) z+=(a[i] == 0)?1:0;\n\t\tif (z == 1) z = 0;\n\t\telse z = 1;\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t\tif (a[i] == z){\n\t\t\t\tSystem.out.println(i+1);\n\t\t\t\tbreak;\n\t\t\t}\n\t}\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) {\n    Scanner scan = new Scanner(System.in);\n    int n = scan.nextInt();\n    int[] a = new int[n];\n    for(int i = 0; i < n; i++)\n      a[i] = scan.nextInt();\n    for(int i = 0; i < n; i++) {\n      boolean x = a[i] % 2 == 0;\n      int c = 0;\n      for(int j = 0; j < n; j++) {\n        if(x != (a[j] % 2 == 0))\n          c++;\n      }\n      if(c == n-1) {\n        System.out.println(i+1);\n        break;\n      }\n    }\n  }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        Scanner sc = new Scanner(new InputStreamReader(System.in));\n        int n = sc.nextInt(),even = 0,odd = 0,evI = 0,OdI = 0;      \n        for (int i = 0; i < n; i++) {\n            if(sc.nextInt()%2 == 1){\n                odd++;\n                OdI = i+1;\n            }else{\n                even++;\n                evI = i+1; \n            }\n        }\n        if(even < odd)\n            System.out.println(evI);\n        else\n            System.out.println(OdI);\n        \n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tint nums = Integer.parseInt(reader.readLine());\n\t\t\n\t\tString line = reader.readLine();\n\t\tint[] ar = new int[nums];\n\t\tString[] par = line.split(\" \");\n\t\t\n\t\tfor(int i=0; i<nums; i++){\n\t\t\tar[i] = Integer.parseInt(par[i]);\n\t\t}\n\t\tA a = new A();\n\t\t\n\t\tSystem.out.print(a.getDif(ar));\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException\t{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] list = new int[n];\n\t\tfor(int i = 0; i < list.length; i++)\n\t\t\tlist[i] = Integer.parseInt(st.nextToken());\n\t\tint odd = 0;\n\t\tint even = 0;\n\t\tfor(int x: list)\n\t\t\tif(x%2==1)\t{\n\t\t\t\todd++;\n\t\t\t}\n\t\t\telse\t{\n\t\t\t\teven++;\n\t\t\t}\n\t\tfor(int i = 1; i <= list.length; i++)\t{\n\t\t\tif(list[i-1]%2==1 && odd == 1)\t{\n\t\t\t\tSystem.out.println(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if(list[i-1]%2 == 0 && even == 1){\n\t\t\t\tSystem.out.println(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(new IQTest()).start();\n    }\n", "complexity": "linear"}
{"code": "        public static void main(String[] args) throws IOException {\n            new A();\n        }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) \n        FastReader sc=new FastReader();\n\t\tint n=sc.nextInt();\n\t\tPair arr[]=new Pair[n];\n\t\tPair pref[]=new Pair[n];\n\t\tPair suff[]=new Pair[n];\n\t\tfor( int i=0;i<n;i++)\n\t\t{\n\t\t\tlong u=sc.nextLong();\n\t\t\tlong v=sc.nextLong();\n\t\t\tarr[i]=new Pair(u,v);\n\t\t\tpref[i]=new Pair(0,0);\n\t\t\tsuff[i]=new Pair(0,0);\n\t\t}\n\t\tpref[0].x=arr[0].x;\n\t\tpref[0].y=arr[0].y;\n\t\tfor( int i=1;i<n;i++)\n\t\t{\n\t\t\tpref[i].x=(long)Math.max(pref[i-1].x,arr[i].x);\n\t\t\tpref[i].y=(long)Math.min(pref[i-1].y,arr[i].y);\n\t\t}\n\t\tsuff[n-1].x=arr[n-1].x;\n\t\tsuff[n-1].y=arr[n-1].y;\n\t\tfor( int i=n-2;i>=0;i--)\n\t\t{\n\t\t\tsuff[i].x=(long)Math.max(suff[i+1].x,arr[i].x);\n\t\t\tsuff[i].y=(long)Math.min(suff[i+1].y,arr[i].y);\n\t\t}\n\t\tlong max=Long.MIN_VALUE;\n\t\tlong ans=0;\n\t\t\n\t\tfor( int i=0;i<n;i++)\n\t\t{\n\t\t\tlong val=Long.MAX_VALUE;\n\t\t\tlong val1=Long.MAX_VALUE;\n\t\t\t\n\t\t\tif(i!=0&&i!=n-1)\n\t\t\t{\n\t\t\t\t val=(long)Math.min(pref[i-1].y,suff[i+1].y)-(long)Math.max(pref[i-1].x,suff[i+1].x);\n\t\t\t\t \n\t\t\t}\n\t\t\telse if(i!=n-1)\n\t\t\t{\n\t\t\t\tval=suff[i+1].y-suff[i+1].x;\n\t\t\t}\n\t\t\telse\n\t\t\t\tval=pref[i-1].y-pref[i-1].x;\n\t\t\t\n\t\t\tans=val;\n\t\t\tif(ans<0)\n\t\t\t\tans=0;\n\t\t\tmax=(long)Math.max(ans,max);\n\t\t}\n\t\tSystem.out.println(max);\n     \n       \n\t\t\n\t\t\n\t\t\n    } \n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tScanner input =new Scanner(System.in);\n\t\tint a = input.nextInt();\n\t\tint b = input.nextInt();\n\t\tchar[] s1 =new char[a];\n\t\ts1 = input.next().toCharArray();\n\t\t\n\t\tchar[] s2 = new char[b];\n\t\ts2 = input.next().toCharArray();\n\t    boolean condition = false;\n\t    for(int i=0; i<a;i++){\n\t    \tif(s1[i]=='*'){\n\t    \t\tcondition= true;\n\t    \t\tbreak;\n\t    \t}\n\t    }\n\t   \n\t    if(!condition){\n\t    \tif(match(s1,s2)){\n\t    \t\tSystem.out.println(\"YES\");\n\t    \t\t\n\t    \t}\n\t    \telse\n\t    \t\tSystem.out.println(\"NO\");\n\t       return;\n\t    }\n\t    else{\n\t    \tint i=0;\n\t    \tif(s1.length-1>s2.length){\n\t    \t\tSystem.out.println(\"NO\");\n\t    \t\treturn;\n\t    \t}\n\t    \twhile(i<s1.length && i<s2.length && s1[i]==s2[i]){\n\t    \t\ti++;\n\t    \t}\n\t    \tint j=s2.length-1;\n\t    \tint k = s1.length-1;\n\t    \twhile(j>=0 && k>=0 &&  s1[k]==s2[j] && i<=j){\n\t    \t\tj--;\n\t    \t\tk--;\n\t    \t}\n\t    \t//System.out.println(i);\n\t    \tif(i==k && i>=0 && i<s1.length && s1[i]=='*' ){\n\t    \t\tSystem.out.println(\"YES\");\n\t    \t\treturn;\n\t    \t}\n\t    \tSystem.out.println(\"NO\");\n\t    }\n\t\t\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        int n = in.nextInt(),ans=Integer.MAX_VALUE,t=0;\n        String x = in.next();\n        for (int i = 0; i < n; i++) {\n            if(x.charAt(i)=='-')t--;\n            else t++;\n            ans=Math.min(ans,t);\n        }\n           if(ans <= 0) \n               System.out.println(Math.abs(ans)+t);\n           else \n               System.out.println(t);\n    }\n", "complexity": "linear"}
{"code": "        public static void main(String[] args) {\n            Scanner input = new Scanner(System.in);\n            n = input.nextInt() ;\n            s = input.next() ;\n            a = s.toCharArray();\n            for(int i = 0 ; i < 200 ; ++i) {\n                int cur = i ;\n                boolean fl = true ;\n                for(int j = 0 ; j < n ; ++j) {\n                    if(a[j] == '+')\n                        ++cur ;\n                    else\n                        --cur ;\n                    if(cur < 0)\n                        fl = false ;\n                }\n                if(fl) {\n                    System.out.print(cur);\n                    return ;\n                }\n            }\n        }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile(sc.hasNext()) {\n\t\t\tint n=sc.nextInt();\n\t\t\tString s=sc.next();\n\t\t\tint sum=0;\n\t\t\tfor(int i=0;i<s.length();i++) {\n\t\t\t\tif(s.charAt(i)=='+') {\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\t\t\t\tif(s.charAt(i)=='-'&&sum!=0) {\n\t\t\t\t\tsum--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry (BufferedReader r = new BufferedReader(new InputStreamReader(System.in))) {\n\t\t\tfinal String[] line = r.readLine().split(\" \");\n\t\t\tfinal int N = Integer.parseInt(line[0]), P = Integer.parseInt(line[1]);\n\t\t\tfinal String[] numS = r.readLine().split(\" \");\n\t\t\tif (numS.length != N) throw new IllegalArgumentException();\n\t\t\tfinal int[] n = new int[N];\n\t\t\tint sum1 = 0, sum2 = 0;\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tn[i] = Integer.parseInt(numS[i]) % P;\n\t\t\t\tsum2 += n[i];\n\t\t\t\tif (sum2 >= P) sum2 -= P;\n\t\t\t}\n\t\t\tint max = sum2;\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tsum1 += n[i];\n\t\t\t\tif (sum1 >= P) sum1 -= P;\n\t\t\t\tsum2 -= n[i];\n\t\t\t\tif (sum2 < 0) sum2 += P;\n\t\t\t\tfinal int s = sum1 + sum2;\n\t\t\t\tif (s > max) max = s;\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int N = in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < N; i++) {\n            String str = in.nextLine();\n            if (str.indexOf(\"R\") == 0 && str.indexOf(\"R\") + 1 < str.indexOf(\"C\") && isNum(str.charAt(1))) {\n                int row = Integer.parseInt(str.substring(str.indexOf(\"R\") + 1, str.indexOf(\"C\")));\n                int col = Integer.parseInt(str.substring(str.indexOf(\"C\") + 1));\n                System.out.println(convertRC(row, col));\n            } else {\n                String row = \"\";\n                int j = 0;\n                while (str.charAt(j) >= 'A' && str.charAt(j) <= 'Z') {\n                    row += str.charAt(j);\n                    j++;\n                }\n                int num = Integer.parseInt(str.substring(j));\n                System.out.println(convertAB(row, num));\n            }\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t} catch (SecurityException e) {\n\t\t}\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tnew Main().run();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}.start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Spreadsheets()).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n//\t\tin = new Scanner(System.in);\n\t\tout = new PrintWriter(System.out);\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tint n = new Integer(in.readLine());\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString s = in.readLine();\n\t\t\tint x = 0;\n\t\t\twhile (s.charAt(x) - 'A' >= 0 && s.charAt(x) - 'Z' <= 0) x++;\n\t\t\tint y = s.length() - 1;\n\t\t\twhile (s.charAt(y) - '0' >= 0 && s.charAt(y) - '9' <= 0) y--;\n\n\t\t\tif (x > y) {\n\t\t\t\tint k = 1;\n\t\t\t\tint a = 1;\n\t\t\t\tfor (int j = 1; j < x; j++) {\n\t\t\t\t\tk *= 26;\n\t\t\t\t\ta += k;\n\t\t\t\t}\n\t\t\t\tfor (int j = 0; j < x; j++) {\n\t\t\t\t\ta += k*(s.charAt(j) - 'A');\n\t\t\t\t\tk /= 26;\n\t\t\t\t}\n\t\t\t\tint b = Integer.parseInt(s.substring(x));\n\t\t\t\tout.println(\"R\" + b + \"C\" + a);\n\t\t\t} else {\n\t\t\t\twhile (s.charAt(x) - '0' >= 0 && s.charAt(x) - '9' <= 0) x++;\n\t\t\t\tint b = Integer.parseInt(s.substring(1, x));\n\t\t\t\tint a = Integer.parseInt(s.substring(x + 1));\n\t\t\t\tint num = 0;\n\t\t\t\tint k = 1;\n\t\t\t\twhile (a >= k) {\n\t\t\t\t\ta -= k;\n\t\t\t\t\tk *= 26;\n\t\t\t\t}\n\t\t\t\tk /= 26;\n\t\t\t\twhile (k > 0) {\t\n\t\t\t\t\tout.print((char)('A' + (a/k)));\n\t\t\t\t\ta %= k;\n\t\t\t\t\tk /= 26;\n\t\t\t\t}\n\t\t\t\tout.println(b);\n\t\t\t}\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String...args) {\n\t\tnew B().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new B().solve();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(new Runnable() {\n            \n            @Override\n            public void run() {\n                new Solution();\n            }\n        }).start();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws InterruptedException {\n        Thread thread = new Thread(new Main());\n        thread.start();\n        thread.join();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new B()).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Thread(new Trains1_2()).run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t(new Thread(new Solution())).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Solution();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tString s;\n\t\tint i,j;\n\t\tfor(i=0;i<n;i++)\n\t\t{\n\t\t\ts = sc.next();\n\t\t\tj = 0;\n\t\t\tboolean ok;\n                        while((s.charAt(j)>='A')&&(s.charAt(j)<='Z')) j++;\n                        while((j<s.length())&&(s.charAt(j)>='0')&&(s.charAt(j)<='9')) j++;\n                        if (j==s.length()) ok = true; else ok = false;\n                        String s1=\"\",s2=\"\";\n                        if (ok)\n                        {\n                        \tj = 0;\n                        \twhile((s.charAt(j)>='A')&&(s.charAt(j)<='Z')) \n                        \t{\n                        \t\ts1 += s.charAt(j);\n                        \t\tj++;\n                        \t}\n                        \twhile(j<s.length()) \n                        \t{\n                        \t\ts2 += s.charAt(j);\n                        \t\tj++;\n                        \t}\n                        \tint v = 0,p = 1;\n                        \tfor(j=s1.length()-1;j>=0;j--)\n                        \t{\n                        \t\tv += p*(s1.charAt(j)-'A'+1);\n                        \t\tp*=26;\n                        \t}\n                        \tSystem.out.println(\"R\"+s2+\"C\"+v);\n                        } else\n                        {\n                        \tj = 1;\n                        \twhile((s.charAt(j)>='0')&&(s.charAt(j)<='9'))\n                        \t{\n                        \t\ts1 += s.charAt(j);\n                        \t\tj++;\n                        \t}\n                        \tj++;\n                        \twhile(j<s.length())\n                        \t{\n                        \t\ts2 += s.charAt(j);\n                        \t\tj++;\n                        \t}\n\t\t\t\tInteger a = new Integer(s2);\n                        \tString s3=\"\";\n                        \tint d;\n                        \twhile(a > 0)\n                        \t{\n                        \t\td = a%26; a/=26;\n                        \t\tif (d==0) {d=26; a--;} \n                        \t\ts3 = Character.toUpperCase(Character.forDigit(9+d,36)) + s3;          \n                        \t}\n                        \tSystem.out.println(s3+s1);\n                        }\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = Integer.parseInt(sc.nextLine());\n        String code = \"\";\n        \n\n    for (int i = 0; i < n; i++) {\n        long chResult = 0;\n        long chResult1 = 0;\n        long nResult = 0;\n        long nResult1 = 0;\n        boolean t = false;\n        boolean k = false;\n        code = sc.nextLine();\n\n        for (int j = 0; j < code.length(); j++) {\n            char c = code.charAt(j);\n            if (('Z' - c) < 33) {\n                if (t) {\n                    chResult1 = chResult;\n                    chResult = 0;\n                    t = false;\n                    k = true;\n                }\n                chResult = chResult * 26 + (26 - ('Z' - c));\n            } else {\n                t = true;\n                if (k) {\n                    nResult1 = nResult;\n                    nResult = 0;\n                    k = false;\n                }\n                nResult = nResult * 10 + (9 - ('9' - c));\n            }\n\n        }\n\n        if (chResult1 == 0) {\n            System.out.println(\"R\" + nResult + \"C\" + chResult);\n        } else {\n            System.out.println(convert(nResult) + nResult1);\n        }\n\n    }\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception\n        new Main();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Round1B().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner (System.in);\n        Pattern rc_style = Pattern.compile(\"R[0-9]+C[0-9]+\");\n        int n = input.nextInt();\n        while(n-- > 0) {\n            String str = input.next();\n            Matcher m = rc_style.matcher(str);\n            if (m.matches()) {\n                String nums[] = str.split(\"[RC]\");\n                String row = nums[1];\n                String col = nums[2];\n                String buffer = \"\";\n                int col_num = Integer.valueOf(col);\n                while(col_num > 0) {\n                    if (col_num % 26 > 0) {\n                        buffer += (char)(col_num % 26 + 'A' - 1);\n                        col_num /= 26;\n                    } else {\n                        buffer += 'Z';\n                        col_num /= 26;\n                        col_num--;\n                    }\n                }\n                for (int i = buffer.length() - 1; i >= 0; --i) {\n                    System.out.print(buffer.charAt(i));\n                }\n                System.out.println(row);\n            } else {\n                String col = str.split(\"[0-9]+\")[0];\n                String row = str.split(\"[A-Z]+\")[1];\n\n                int col_num = 0;\n                int shift = 1;\n                for (int i = col.length() - 1; i >= 0; --i){\n                    col_num += (int)(col.charAt(i) - 'A' + 1) * shift;\n                    shift *= 26;\n                }\n                System.out.println(\"R\" + row + \"C\" + col_num);\n            }\n        }\n    }\n", "complexity": "linear"}
{"code": "public static void main(String[] args) throws IOException {       \n    new Thread(new Main()).start();      \n}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew B().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scn = new Scanner(System.in);\n\t\t\n\t\tint t = scn.nextInt();\n\t\twhile(t-- >0){\n\t\t\tString str = scn.next();\n\t\t\tPattern p = Pattern.compile(\"R[0-9]+C[0-9]+\");\n\t\t\tMatcher m = p.matcher(str);\n\t\t\tif (m.matches()){\n\t\t\t\tString nums[] = str.split(\"[RC]\");\n\t\t\t\tString first = nums[1];\n\t\t\t\tString second = nums[2];\n\t\t\t\t\n\t\t\t\tString ans = \"\";\n\t\t\t\tlong num = Integer.parseInt(second);\n\t\t\t\twhile(num >0){\n\t\t\t\t\tif (num % 26 > 0){\n\t\t\t\t\t\tans += (char)(num%26+'A'-1);\n\t\t\t\t\t\tnum/=26;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans += 'Z';\n\t\t\t\t\t\tnum/=26;\n\t\t\t\t\t\tnum--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int i = ans.length()-1; i>=0;--i){\n\t\t\t\t\tSystem.out.print(ans.charAt(i));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(first);\n\t\t\t} else {\n\t\t\t\tString first = str.split(\"[0-9]+\")[0];\n\t\t\t\tString second = str.split(\"[A-Z]+\")[1];\n\t\t\t\tSystem.out.print(\"R\"+second);\n\t\t\t\t\n\t\t\t\tlong num = 0, pow = 1;\n\t\t\t\tfor (int i = first.length()-1; i>=0; --i){\n\t\t\t\t\tnum += (long)(first.charAt(i)-'A'+1) * pow;\n\t\t\t\t\tpow*=26;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"C\"+num);\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "        public static void main(String[] args){\n                new Thread(new b()).start();\n        }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n\tScanner input = new Scanner(System.in);\n\tPattern rc_style = Pattern.compile(\"R[0-9]+C[0-9]+\");\n\tint n = input.nextInt();\n\n\twhile(n-- > 0) {\n\t    String str = input.next();\n\t    Matcher m = rc_style.matcher(str);\n\n\t    if(m.matches()) {\n\t\tString nums[] = str.split(\"[RC]\");\n\t\tString row = nums[1];\n\t\tString col = nums[2];\n\t\t\n\t\tString buffer = \"\";\n\t\tint col_num = Integer.valueOf(col);\n\t\twhile(col_num > 0) {\n\t\t    if(col_num % 26 > 0) {\n\t\t\tbuffer += (char)(col_num % 26 + 'A' - 1);\n\t\t\tcol_num /= 26;\n\t\t    } else {\n\t\t\tbuffer += 'Z';\n\t\t\tcol_num /= 26;\n\t\t\tcol_num--;\n\t\t    }\n\t\t}\n\n\t\tfor(int i = buffer.length() - 1; i >= 0; i--)\n\t\t    System.out.print(buffer.charAt(i));\n\t\t\n\t\tSystem.out.println(row);\n\n\t    } else {\n\t\tString col = str.split(\"[0-9]+\")[0];\n\t\tString row = str.split(\"[A-Z]+\")[1];\n\n\t\tint col_num = 0;\n\t\tint shift = 1;\n\t\tfor(int i = col.length() - 1; i >= 0; i--) {\n\t\t    col_num += (int) (col.charAt(i) - 'A' + 1) * shift;\n\t\t    shift *= 26;\n\t\t}\n\n\t\tSystem.out.println(\"R\" + row + \"C\" + col_num);\n\t    }\n\t}\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws Exception{\n        Scanner in = new Scanner(System.in);\n        int cases = in.nextInt();\n        for(int i = 0;i<cases;i++){\n            String str = in.next();\n            if(str.charAt(0)=='R' && str.charAt(1)>='0'&&str.charAt(1)<='9' && str.indexOf('C')!=-1){\n                System.out.println(toA(str));\n            }\n            else System.out.println(toB(str));\n        }\n        \n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String arg[])throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tint t = Integer.parseInt(in.readLine());\n\t\tPattern p1 = Pattern.compile(\"R\\\\d+C\\\\d+\");\n\t\tPattern p2 = Pattern.compile(\"\\\\d+\");\n\t\tfor(int i=0;i<t;i++){\n\t\t\tString input = in.readLine();\n\t\t\tMatcher m1 = p1.matcher(input);\n\t\t\tMatcher m2 = p2.matcher(input);\n\t\t\tif(m1.matches()){\n\t\t\t\tString result = \"\";\n\t\t\t\tif(m2.find()){\n\t\t\t\t\tresult = m2.group();\n\t\t\t\t}\n\t\t\t\tif(m2.find()){\n\t\t\t\t\tresult = encode(Long.parseLong(m2.group()))+result;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString result = \"R\";\n\t\t\t\tif(m2.find()){\n\t\t\t\t\tresult += m2.group();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tresult += \"C\";\n\t\t\t\tSystem.out.println(result+decode(input.replaceAll(m2.group(),\"\")));\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Round1B().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main( String[] args ) throws FileNotFoundException {\n        in = new Scanner( System.in );\n        int tn = in.nextInt();\n        for ( int i = 0; i < tn; i ++ ) {\n            String s = in.next();\n        /*for ( int i = 1; i <= 100; i ++ ) {\n            for ( int j = 1; j <= 100; j ++ ) {\n                String s = \"R\" + i + \"C\" + j;\n            for ( char j = 'A'; j <= 'Z'; j ++ ) {\n            String s = j + \"\" + i;\n                System.out.println( s );*/\n            char[] c = s.toCharArray();\n            boolean second = true;\n            second &= c[0] == 'R';\n            int r = s.indexOf( \"C\" );\n            if ( r > 0 ) {\n                second &= isNumber( s.substring( 1, r ) ) && isNumber( s.substring( r + 1 ) );\n            } else {\n                second = false;\n            }\n            if ( second ) {\n                System.out.println( toLetters( s.substring( r + 1 ) ) + s.substring( 1, r ) );\n            } else {\n                r = 0;\n                while ( c[r] >= 'A' && c[r] <= 'Z' ) {\n                    r ++;\n                }\n                System.out.println( \"R\" + s.substring( r ) + \"C\" + fromLetters( s.substring( 0, r ) ) );\n            }\n             \n        }\n    }\n\n    private static int fromLetters( String s ) {\n        int r = 0;\n        int l = s.length();\n        for ( int i = 0; i < l; i ++ ) {\n            r = r * 26 + s.charAt( i ) - 'A';\n        }\n        r ++;\n        for ( int i = 1, c = 26; i < l; i ++, c *= 26 ) {\n            r += c;\n        }\n        return r;\n    }\n\n    private static String toLetters( String s ) {\n        int x = new Integer( s ) - 1;\n        int c = 26;\n        int l = 1;\n        while ( true ) {\n            if ( x < c ) {\n                String r = \"\";\n                for ( int i = 0; i < l; i ++ ) {\n                    r = ( char ) ( 'A' + x % 26 ) + r;\n                    x /= 26;\n                }\n                return r;\n            }\n            x -= c;\n            c *= 26;\n            l ++;\n        }\n    }\n\n    private static boolean isNumber( String s ) {\n        try {\n            int x = new Integer( s );\n        } catch ( NumberFormatException e ) {\n            return false;\n        }\n        return true;\n    }\n}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException \n\t\t// TODO Auto-generated method stub\n//\t\tBufferedReader input = new BufferedReader(new FileReader(\"input.txt\"));\n//\t\tPrintWriter output = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter output = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tStreamTokenizer in = new StreamTokenizer(input);\n\t\tin.nextToken();\n\t\tint n = (int)in.nval;\n\t\t\n\t\tfor (int i = 0; i < 26; i++) \n\t\t{\n\t\t\tval.put((char)('A' + i), i + 1);\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < 26; i++) \n\t\t{\n\t\t\tch.put(i + 1, (char)('A' + i));\n\t\t}\n\t\t\n\t\tinput.readLine();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ts = input.readLine();\n\t\t\tint cpos;\n\t\t\tif( ((cpos = s.indexOf('C')) > 1) && (isDigit(s.charAt(cpos - 1))) ) \n\t\t\t{\n\t\t\t\toutput.println(RCtoAB(cpos)); \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toutput.println(ABtoRC(cpos));\n\t\t\t}\n\t\t}\n\t\t\n\t\toutput.close();\n\t\tinput.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\t\t\n\t\tint n=1;\n\t\t\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in), 50);\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tn = Integer.valueOf(input.readLine());\n\t\t\t\n\t\t\tif (! ((1 <= n) && (n <= Math.pow(10, 5)))) {\n\t\t\t\tformatError();\n\t\t\t}\n\t\t\t\n\t\t\tPattern typeOne = Pattern.compile(\"^([A-Z]+)([0-9]+)$\");\n\t\t\tPattern typeTwo = Pattern.compile(\"^R([0-9]+)C([0-9]+)$\");\n\t\t\tfor (int i=0; i < n; i++) {\n\t\t\t\tString line = input.readLine();\n\t\t\t\tMatcher matchOne = typeOne.matcher(line);\n\t\t\t\tif (matchOne.find()) {\n\t\t\t\t\tSystem.out.println(convertOneToTwo(matchOne.group(2), matchOne.group(1)));\n\t\t\t\t} else {\n\t\t\t\t\tMatcher matchTwo = typeTwo.matcher(line);\n\t\t\t\t\tif (matchTwo.find()) {\n\t\t\t\t\t\tSystem.out.println(convertTwoToOne(matchTwo.group(1), matchTwo.group(2)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tformatError();\t\t\n\t\t} \n\t\t\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tint n = nextInt();\n\t\t\n\t\tString S;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tS = nextToken();\n\t\t\t\n\t\t\tint f = 0;\n\t\t\tif (S.charAt(0) == 'R' && S.charAt(1) >= '1' && S.charAt(1) <= '9'){\n\t\t\t\tfor (int j = 2; j < S.length(); j++) {\n\t\t\t\t\tif (S.charAt(j) >= 'A' && S.charAt(j) <= 'Z'){\n\t\t\t\t\t\tf = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (f == 0){\n\t\t\t\tString T1 = \"\";\n\t\t\t\tString ans = \"R\";\n\t\t\t\t\n\t\t\t\tint j;\n\t\t\t\t\n\t\t\t\tfor (j = 0; S.charAt(j) >= 'A' && S.charAt(j) <= 'Z'; j++) {\n\t\t\t\t\tT1 += S.charAt(j);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tans += S.substring(j, S.length()) + \"C\";\n\t\t\t\t\n\t\t\t\tint len = j;\n\t\t\t\t\n\t\t\t\tj--;\n\t\t\t\t\n\t\t\t\tint p = 1;\n\t\t\t\tint z = 0;\n\t\t\t\tfor (;  j >= 0; j--) {\n\t\t\t\t\tz += (S.charAt(j) - 'A') * p;\n\t\t\t\t\tp *= 26;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp = 1;\n\t\t\t\tfor (int k = 0; k < len; k++) {\n\t\t\t\t\tz += p;\n\t\t\t\t\tp *= 26;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tans += z;\n\t\t\t\t\n\t\t\t\tout.println(ans);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tString T1 = \"\";\n\t\t\t\tString ans = \"\";\n\t\t\t\t\n\t\t\t\tint j;\n\t\t\t\tfor (j = 1; S.charAt(j) != 'C'; j++) {\n\t\t\t\t\tans += S.charAt(j);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tT1 = S.substring(j + 1, S.length());\n\t\t\t\tint z = Integer.parseInt(T1);\n\t\t\t\tint p = 1;\n\t\t\t\tint len = 0;\n\t\t\t\t\n\t\t\t\twhile (p <= z){\n\t\t\t\t\tz -= p;\n\t\t\t\t\tp *= 26;\n\t\t\t\t\tlen++;\n\t\t\t\t}\n\t\t\t\tp /= 26;\n\t\t\t\t\n\t\t\t\tT1 = \"\";\n\t\t\t\t\n\t\t\t\tfor (int k = len - 1; k >= 0; k--) {\n\t\t\t\t\tint l = z / p;\n\t\t\t\t\t\n\t\t\t\t\tT1 += (char)(z / p + 'A');\n\t\t\t\t\t\n\t\t\t\t\tz -= l * p;\n\t\t\t\t\t\n\t\t\t\t\tp /= 26;\t\n\t\t\t\t}\n\t\t\t\tans = T1 + ans;\n\t\t\t\t\n\t\t\t\tout.println(ans);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//2\n\t\t//R23C55\n\t\t//BC23\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        MSpreadSheet sh = new MSpreadSheet();\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        int i = 0;\n        while(i<n)\n        {\n            sh.solve(s.next());\n            i++;\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tnew Thread(new Solution()).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main (String[] args) throws IOException {\n        BufferedReader b = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(b.readLine());\n        while (n-- > 0) {\n            String s = b.readLine();\n            if (s.matches(\"^[A-Z]+[0-9]+$\")) {\n                System.out.println(toRC(decodeCR(s)));\n            } else {\n                System.out.println(toCR(decodeRC(s)));\n            }\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int testCount = in.nextInt();\n        for (int test = 0; test < testCount; test++) {\n            String src = in.next();\n            if (src.matches(\"^R\\\\d+C\\\\d+$\")) {\n                Pattern p = Pattern.compile(\"\\\\d+\");\n                Matcher m = p.matcher(src);\n                m.find();\n                int r = Integer.parseInt(m.group(0));\n                m.find();\n                int c = Integer.parseInt(m.group(0));\n                System.out.println(toBase26(c) + r);\n            } else {\n                Pattern p = Pattern.compile(\"[A-Z]+\");\n                Matcher m = p.matcher(src);\n                m.find();\n                String c = m.group(0);\n                p = Pattern.compile(\"\\\\d+\");\n                m = p.matcher(src);\n                m.find();\n                int r = Integer.parseInt(m.group(0));\n                System.out.println(\"R\" + r + \"C\" + toBase10(c));\n            }\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws InterruptedException {\n        Thread thread = new Thread(new ProbB());\n        thread.start();\n        thread.join();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        pw = new PrintWriter(new OutputStreamWriter(System.out));\n        br = new BufferedReader(new InputStreamReader(System.in));\n        (new Thread(new Round1TaskB())).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString s = br.readLine();\n\t\t\tif ((s.charAt(0) == 'R') && \n\t\t\t\t(s.charAt(1) >= '0' && s.charAt(1) <= '9') &&\n\t\t\t\t(s.indexOf('C') != -1)) {\n\t\t\t\t\n\t\t\t\tSystem.out.println(toXC(fromRC(s)));\n\t\t\t} else {\n\t\t\t\tSystem.out.println(toRC(fromXC(s)));\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new SpreadSheet().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException { //1-checker 2-console\n        //if (args.length==2) open(args[0], args[1], true, false); else open (\"input.txt\", \"output.txt\", true, false);\n        open (\"input.txt\", \"output.txt\", false, true);\n        char[] alph = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n        Pattern pat = Pattern.compile(\"[A-Z]+[\\\\d]+\");\n        Matcher mat;\n        boolean b ;\n        String  s;\n        int index, coef, row, col;\n        int n = nextInt();\n        String[] tmp;\n        char[] c;\n        for (int i=0; i<n; i++)\n        {\n            s = nextLine();\n            c = s.toCharArray();\n            mat = pat.matcher(s);\n            b = mat.matches();\n            if (b)\n            {\n                \n                index = c.length-1;\n                coef = 1;\n                row = 0;\n                while (c[index]>='0' && c[index]<='9')\n                {\n                    row += (c[index]-'0')*coef;\n                    coef*=10;\n                    index--;\n                }\n                coef = 1;\n                col = 0;\n                while (index>=0)\n                {\n                    /*if (coef!=1)*/ col += (Arrays.binarySearch(alph, c[index]))*coef;\n                    //else col += (Arrays.binarySearch(alph, c[index]))*coef;\n                    coef*=26;\n                    index--;\n                }\n                out.println(\"R\"+row+\"C\"+col);\n            }\n            else\n            {\n                tmp = s.split(\"R|C\");\n                //out.print(tmp.length);\n                //row = Integer.parseInt(tmp[1]);\n                col = Integer.parseInt(tmp[2]);\n                char[] temp = new char[10];\n                int len = 0;\n                int v = 0;\n                while (col>0)\n                {\n                    index = col%26;\n                    if (index==0)\n                        { index=26;\n                          v = 1;\n                        }\n                    else v = 0;\n                    /*if (len==0)*/ temp[len]=alph[index];\n                    //else temp[len]=alph[index-1];\n                    col = (col/26) - v;\n                    len++;\n                }\n                for (int j=len-1; j>=0; j--)\n                {\n                    out.print(temp[j]);\n                }\n                out.println(tmp[1]);\n            }\n        }\n        close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(\n\t\t\t\tSystem.in)));\n\t\tint nc = sc.nextInt();\n\t\twhile (nc-- > 0) {\n\t\t\tString s = sc.next();\n\t\t\tStringTokenizer st = new StringTokenizer(s, \"0123456789\");\n\t\t\tif (st.countTokens() > 1) {\n\t\t\t\tint k = s.indexOf('C');\n\t\t\t\tint r = Integer.parseInt(s.substring(1, k));\n\t\t\t\tint c = Integer.parseInt(s.substring(k + 1));\n\t\t\t\tint len = 1;\n\t\t\t\tint p = 26;\n\t\t\t\twhile (c > p) {\n\t\t\t\t\tc -= p;\n\t\t\t\t\tlen++;\n\t\t\t\t\tp *= 26;\n\t\t\t\t}\n\t\t\t\tString col = Integer.toString(--c, 26).toUpperCase();\n\t\t\t\twhile (col.length() < len)\n\t\t\t\t\tcol = \"0\" + col;\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tfor (int i = 0; i < col.length(); i++) {\n\t\t\t\t\tif (col.charAt(i) < 'A') {\n\t\t\t\t\t\tsb.append((char) (col.charAt(i) - '0' + 'A'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsb.append((char) (col.charAt(i) + 10));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.printf(\"%s%d\\n\", sb.toString(), r);\n\t\t\t} else {\n\t\t\t\tint k = 0;\n\t\t\t\twhile (s.charAt(k) > '9')\n\t\t\t\t\tk++;\n\t\t\t\tchar[] col = s.substring(0, k).toCharArray();\n\t\t\t\tint r = Integer.parseInt(s.substring(k));\n\t\t\t\tint c = 1;\n\t\t\t\tint p = 26;\n\t\t\t\tint cnt = 1;\n\t\t\t\twhile (cnt++ < col.length) {\n\t\t\t\t\tc += p;\n\t\t\t\t\tp *= 26;\n\t\t\t\t}\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tfor (int i = 0; i < col.length; i++) {\n\t\t\t\t\tif (s.charAt(i) < 'K') {\n\t\t\t\t\t\tsb.append((char) ('0' + col[i] - 'A'));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsb.append((char) (col[i] - 10));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc += Integer.parseInt(sb.toString(), 26);\n\t\t\t\tSystem.out.printf(\"R%dC%d\\n\", r, c);\n\t\t\t}\n\t\t}\n\t\tSystem.out.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t} catch (SecurityException e) {\n\t\t}\n\t\tnew Main().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew SpreadSheet().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Problem01B().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tlong n = scanner.nextLong();\n\t\tlong m = scanner.nextLong();\n\t\tlong[] people = new long[(int) (n+m)];\n\t\tint[] taxiDrivers = new int[(int) (n+m)];\n\t\t\n\t\tfor(int i = 0;i< (n+m); i++) {\n\t\t\tpeople[i] = scanner.nextLong();\n\t\t}\n\t\t\n\t\tfor(int i = 0;i< (n+m); i++) {\n\t\t\ttaxiDrivers[i] = scanner.nextInt();\n\t\t}\n\t\t\n\t\tint lastTaxiDriverIndex = -1;\n\t\tlong[] riderCountArray = new long[(int) (m)];\n\t\tlong[] a1 = new long[(int)n];\n\t\tlong[] b1 = new long[(int)m];\n\t\t\n\t\tint j=0, k=0;\n\t\tfor(int i = 0;i< (n+m); i++) {\t\n\t\t\tif(taxiDrivers[i] == 0) {\n\t\t\t\ta1[j] = people[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse  {\n\t\t\t\tb1[k] = people[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint l = 0, q=0;\n\t\tfor(int i=0;i<j;i++) {\n\t\t\twhile ((l<m-1 && m>1) && Math.abs(a1[i] - b1[l]) > Math.abs(a1[i] - b1[l+1])) {\n\t\t\t\tl++; \n\t\t\t}\n\t\t\t\n\t\t\triderCountArray[l]++;\t\n\t\t}\n\t\t\n\t\tfor(int i = 0;i< (m); i++) {\n\t\t\tSystem.out.print(riderCountArray[i]+\" \");\n\t\t}\n\t} \n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] P = new int[n];\n        int[] check=new int[n];\n        for (int i = 1; i < n; i++) {\n\n            P[i] = scanner.nextInt();\n            P[i]--;\n            check[P[i]]++;\n        }\n        int[] leaves = new int[n];\n\n\n        for (int i=0;i<n;i++) {\n            if(check[i]==0){\n                leaves[P[i]]++;\n            }\n        }\n\n\n        for (int i = 0; i < n; i++) {\n\n            if (check[i]>0&&leaves[i]<3) {\n                System.out.println(\"No\");\n                return;\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        HashSet<Integer> set = new HashSet<>();\n        for(int i = 0; i<n; i++){\n            int a = sc.nextInt();\n            if(a!=0){\n                set.add(a);\n            }\n        }\n        System.out.println(set.size());\n    }\n", "complexity": "linear"}
{"code": "public static void main(String[] args){\n Scanner s= new Scanner(System.in);\n int n=s.nextInt();StringBuilder sb=new StringBuilder();\n long[] a=new long[n/2];\n for(int i=0;i<n/2;i++){\n                  a[i]=s.nextLong();\n }int j=0;long[] a2=new long[n/2];long[] a1=new long[n/2];\n a1[j]=a[a.length-1]/2;\n a2[j]=a[a.length-1]-a[a.length-1]/2;\n for(int i=(n-1)/2-1;i>=0;i--){\n //    a1[j]=a[i]/2;a2[j++]=a[i]-a[i]/2;\n    long n1=a1[j];\n    if((a[i]-n1)<a2[j]){\n      a2[j+1]=a2[j++];a1[j]=a[i]-a2[j];                      \n     }else{a1[++j]=n1;a2[j]=a[i]-n1;}\n }int k=0;//int[] ans=new int[2*n];\n for(int i=(n-1)/2;i>=0;i--)\n   sb.append(a1[i]+\" \");\n  for(int i=0;i<n/2;i++)\n    sb.append(a2[i]+\" \");\n            System.out.println(sb.toString());     \n}\n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws IOException\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();int sum=1;\n        for(int i=1;i<=n;i++)\n        {\n            sum=sum+(4*(i-1));\n        }\n        System.out.println(sum);\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) {\n    int n = in.nextInt();\n    int m = in.nextInt();\n    long boyMax = 0;\n    int NBoyMax = 0;\n\n    long sweets = 0;\n    TreeSet<Long> boyMember = new TreeSet<>();\n    for (int i = 0; i < n; i++) {\n      long input = in.nextLong();\n      boyMember.add(input);\n      if (boyMax < input) {\n        boyMax = input;\n        NBoyMax = 1;\n      } else if (boyMax == input) NBoyMax++;\n      sweets += (input * m);\n    }\n\n    long smallestGirl = (long) 1e8 + 1;\n    long sum = 0;\n    for (int i = 0; i < m; i++) {\n      long input = in.nextLong();\n      sum += input;\n      if (smallestGirl > input) smallestGirl = input;\n    }\n\n    if (smallestGirl < boyMember.last()) {\n      out.println(-1);\n    } else if (smallestGirl == boyMember.last()) {\n      sweets += sum - boyMember.last() * m;\n      out.println(sweets);\n    } else {\n\n      if (NBoyMax > 1) {\n        sweets += sum - boyMember.last() * m;\n        out.println(sweets);\n      } else {\n        Object[] boyList = boyMember.toArray();\n        if (boyList.length > 1) {\n          long boy = 0;\n          boy = (long)boyList[boyList.length - 2];\n          sweets += (sum - smallestGirl - boyMember.last() * (m - 1));\n          sweets += (smallestGirl - boy);\n          out.println(sweets);\n        } else {\n          out.println(-1);\n        }\n      }\n    }\n\n    in.close();\n    out.close();\n  }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n    \tint n = sc.nextInt();\n    \tint k = sc.nextInt();\n    \tchar str[][] = new char[5][n];\n        for(int i = 0;i < 4;i ++){\n        \tfor(int j = 0;j < n;j ++)\n                str[i][j] = '.';\n        }\n        if(k % 2 == 0){\n            k /= 2;\n            for(int i = 1;i <= 2;i++){\n                for(int j = 1;j <= k;j++)\n                     str[i][j] = '#'; \n            }\n        }\n        else{\n            str[1][n / 2] = '#';\n            if(k != 1){\n                int tmp = n / 2;\n                if(k <= n - 2){\n                    for(int i = 1;i<= (k - 1) / 2;i++){\n                        str[1][i] = '#';\n                        str[1][n - 1 - i] = '#';\n                    }\n                }\n                else{\n                    for(int i = 1;i <= n - 2;i++) str[1][i] = '#';\n                    k -= n - 2;\n                    for(int i = 1;i <= k/2;i++){\n                        str[2][i] = '#';\n                        str[2][n - 1 - i]='#';\n                    }\n                }\n     \n            }\n        }\n        System.out.println(\"YES\");\n        for(int i = 0;i < 4;i ++){\n        \tSystem.out.println(str[i]);\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new First().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new First().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String [] args) throws IOException\n        PrintWriter pw=new PrintWriter(System.out);//use pw.println() not pw.write();\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st=new StringTokenizer(br.readLine());\n        /*\n        inputCopy\n5 3\nxyabd\noutputCopy\n29\ninputCopy\n7 4\nproblem\noutputCopy\n34\ninputCopy\n2 2\nab\noutputCopy\n-1\ninputCopy\n12 1\nabaabbaaabbb\noutputCopy\n1\n        */\n        int n=Integer.parseInt(st.nextToken());\n        int k=Integer.parseInt(st.nextToken());\n        st=new StringTokenizer(br.readLine());\n        String str=st.nextToken();\n        char [] arr=str.toCharArray();\n        Arrays.sort(arr);\n        int weight=arr[0]-96;\n        char a=arr[0];\n        int included=1;\n        for(int i=1;i<arr.length;++i)\n        {\n            if(included==k)\n                break;\n            char c=arr[i];\n            if(c-a<2)\n                continue;\n           \n            weight+=arr[i]-96;\n            ++included;\n            a=arr[i];\n            \n        }\n        if(included==k)\n            pw.println(weight);\n        else\n            pw.println(-1);\n        pw.close();//Do not forget to write it after every program return statement !!\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String [] args) throws IOException\n        PrintWriter pw=new PrintWriter(System.out);//use pw.println() not pw.write();\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st=new StringTokenizer(br.readLine());\n        /*\n        inputCopy\n5 3\nxyabd\noutputCopy\n29\ninputCopy\n7 4\nproblem\noutputCopy\n34\ninputCopy\n2 2\nab\noutputCopy\n-1\ninputCopy\n12 1\nabaabbaaabbb\noutputCopy\n1\n        */\n        int n=Integer.parseInt(st.nextToken());\n        int k=Integer.parseInt(st.nextToken());\n        st=new StringTokenizer(br.readLine());\n        String str=st.nextToken();\n        char [] arr=str.toCharArray();\n        Arrays.sort(arr);\n        int weight=arr[0]-96;\n        char a=arr[0];\n        int included=1;\n        for(int i=1;i<arr.length;++i)\n        {\n            if(included==k)\n                break;\n            char c=arr[i];\n            if(c-a<2)\n                continue;\n           \n            weight+=arr[i]-96;\n            ++included;\n            a=arr[i];\n            \n        }\n        if(included==k)\n            pw.println(weight);\n        else\n            pw.println(-1);\n        pw.close();//Do not forget to write it after every program return statement !!\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) {\n\t\n\tScanner sc = new Scanner(System.in);\n\tint n = sc.nextInt();\n\t//sc= new Scanner(System.in);\n\tString s = sc.next();\n\tStringBuilder sb = new StringBuilder(\"\");\n\tsb.append(s);\n\t\n    System.out.println(check(sb));\n\t\n\t\n\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastReader in = new FastReader(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = in.nextInt(), k = in.nextInt(), N = (int) 5e6 + 1;\n        int left = 0, right = 0;\n        int a[] = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = in.nextInt();\n            if (a[i] == k) left++;\n        }\n        int f[] = new int[N + 1];\n        int ans = 0;\n        for (int i = n; i >= 1; i--) {\n            if (a[i] == k) left--;\n            f[a[i]]++;\n            f[a[i]] = max(f[a[i]], 1 + right);\n            ans = max(ans, f[a[i]] + left);\n            if (a[i] == k) right++;\n        }\n        pw.println(ans);\n        pw.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) {\n\t\tScanner in=new Scanner(System.in);\n\t\tString str=in.next();\n\t\tint cnt=0;\n\t\tfor(int i=0;i<str.length();++i) {\n\t\t\tif(str.charAt(i)=='1') {\n\t\t\t\t++cnt;\n\t\t\t}\n\t\t}\n\t\tint i=0;\n\t\tfor(;i<str.length();++i) {\n\t\t\tif(str.charAt(i)=='0') {\n\t\t\t\tSystem.out.print(\"0\");\n\t\t\t}\n\t\t\telse if(str.charAt(i)=='2') {\n\t\t\t\twhile(cnt-->0) {//\n\t\t\t\t\tSystem.out.print(\"1\");\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"2\");\n\t\t\t}\n\t\t}\n\t\twhile(cnt-->0) {\n\t\t\tSystem.out.print(\"1\");\n\t\t}\n\t\tin.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        // TODO code application logic here\n        \n        Scanner in = new Scanner(System.in);\n        \n        int x = in.nextInt() , y = in.nextInt();\n        \n        ArrayList<Passengers> list = new ArrayList<>();\n        \n        for(int i = 1 ; i <= x ; ++i){\n            list.add(new Passengers(in.nextInt(), in.nextInt()));\n        }\n        \n        int sum = 0 ;\n       for(int i = list.size() - 1 ; i >= 0 ; --i)\n       {\n          int s = y -  list.get(i).floor;\n          sum = sum + s ; \n          \n          if(sum < list.get(i).time)\n          {\n              sum = sum + ( list.get(i).time - sum);\n          }\n          \n          y = list.get(i).floor;\n       } \n        \n        \n       if( list.get(list.size() - 1).floor != 0){\n           sum = sum  + (list.get(0).floor);\n       }\n        System.out.println(sum);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n    int n=in.nextInt();\n    int a[]=new int[1000002];\n    int dp[]=new int[1000002],ans=0;\n    for(int i=0;i<n;i++){a[in.nextInt()]=in.nextInt();}\n    dp[0]=a[0]==0?0:1;\n    for(int i=1;i<1000002;i++){\n    if(a[i]==0){dp[i]=dp[i-1];}\n    else{\n    if(a[i]>=i){dp[i]=1;}\n    else{\n    dp[i]=dp[i-a[i]-1]+1;\n    }}\n    if(dp[i]>=ans)ans=dp[i];\n    }\n        System.out.println(n-ans);\n    }}\nclass FastReader\n    {\n        BufferedReader br;\n        StringTokenizer st;\n \n        public FastReader()\n        {\n            br = new BufferedReader(new\n                     InputStreamReader(System.in));\n        }\n \n        String next()\n        {\n            while (st == null || !st.hasMoreElements())\n            {\n                try\n                {\n                    st = new StringTokenizer(br.readLine());\n                }\n                catch (IOException  e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n \n        int nextInt()\n        {\n            return Integer.parseInt(next());\n        }\n \n        long nextLong()\n        {\n            return Long.parseLong(next());\n        }\n \n        double nextDouble()\n        {\n            return Double.parseDouble(next());\n        }\n \n        String nextLine()\n        {\n            String str = \"\";\n            try\n            {\n                str = br.readLine();\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n            return str;\n        }\n}\n\n", "complexity": "linear"}
{"code": "\tpublic static void main(String [] args) {\n\t\tScanner kb = new Scanner(System.in);\n\t\tint num = kb.nextInt();\n\t\t\n\t\tint[] beacons = new int[1000002];\n\t\tfor (int i=0; i<num; i++) {\n\t\t\tbeacons[kb.nextInt()] = kb.nextInt();\n\t\t}\n\t\t\n\t\tint [] dp = new int[1000002];\n\t\tint max = 0;\n\t\tif (beacons[0] != 0)\n\t\t\tdp[0] = 1;\n\t\t\n\t\tfor (int i=1; i<dp.length; i++) {\n\t\t\tif (beacons[i] == 0) {\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t} else {\n\t\t\t\tint index = i-1-beacons[i];\n\t\t\t\tif (index<0)\n\t\t\t\t\tdp[i] = 1;\n\t\t\t\telse\n\t\t\t\t\tdp[i] = 1 + dp[index];\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t\t//if (i<11)\n\t\t\t\t//System.out.println(i +\" is \"+dp[i]);\n\t\t}\n\t\t\n\t\tSystem.out.println(num-max);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint num = sc.nextInt();\n\t\tint beacon[] = new int[1000001];\n\t\tint pos[] = new int[num];\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tint position = sc.nextInt();\n\t\t\tbeacon[position] = sc.nextInt();\n\t\t\tpos[i] = position;\n\t\t}\n\t\tint dp[] = new int[1000001];\n\t\tint max = 0;\n\t\tif (beacon[0] != 0)\n\t\t\tdp[0] = 1;\n\t\t\n\t\tfor (int i = 1; i <= 1000000; i++) {\n\t\t\tif (beacon[i] == 0) {\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t} \n\t\t\telse {\n\t\t\t\tint j = i - beacon[i] - 1;\n\t\t\t\tif (j < 0) {\n\t\t\t\t\tdp[i] = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\t\t\n\t\tSystem.out.println(num-max);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint num = sc.nextInt();\n\t\tint beacon[] = new int[1000001];\n\t\tint pos[] = new int[num];\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tint position = sc.nextInt();\n\t\t\tbeacon[position] = sc.nextInt();\n\t\t\tpos[i] = position;\n\t\t}\n\t\tint dp[] = new int[1000001];\n\t\tint max = 1;\n\t\tif (beacon[0] != 0)\n\t\t\tdp[0] = 1;\n\t\t\n\t\tfor (int i = 1; i <= 1000000; i++) {\n\t\t\tif (beacon[i] == 0) {\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t} \n\t\t\telse {\n\t\t\t\tint j = i - beacon[i] - 1;\n\t\t\t\tif (j < 0) {\n\t\t\t\t\tdp[i] = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\t\t\n\t\tSystem.out.println(num-max);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n=sc.nextInt(),k=sc.nextInt();\n\t\tchar []s=sc.next().toCharArray();\n\t\tif(canWinFromOneMove(s, k)) {\n\t\t\tSystem.out.println(\"tokitsukaze\");\n\t\t\treturn;\n\t\t}\n\t\tint []suff=new int [n+1];\n\t\tsuff[n-1]=1;\n\t\tfor(int i=n-2;i>=0;i--) {\n\t\t\tsuff[i]=1+(s[i+1]==s[i]?suff[i+1]:0);\n\t\t}\n\t\tfor(int i=n-2;i>=0;i--)\n\t\t\tsuff[i]=Math.max(suff[i], suff[i+1]);\n\t\tint max=0,curr=0;\n\t\tboolean draw=false;\n\t\tint ones=0;\n\t\tfor(int i=0;i+k<=n;i++) {\n\t\t\t\n\t\t\t// one\n\t\t\tint prefix=ones==i?k+ones:max;\n\t\t\tint suffix=i+k==n?k:s[i+k]=='1' && suff[i+k]==n-(i+k)?k+suff[i+k]:suff[i+k];\n\t\t\tchar first=i==0?'1':s[0],last=i+k==n?'1':s[n-1];\n\t\t\tboolean zero=first==last && prefix+suffix+k>=n || Math.max(prefix, suffix)+k>=n;\n\t\t\t// zero\n\t\t\t prefix=ones==0?k+ones:max;\n\t\t\t suffix=i+k==n?k:s[i+k]=='0' && suff[i+k]==n-(i+k)?k+suff[i+k]:suff[i+k];\n\t\t\t first=i==0?'0':s[0];\n\t\t\t last=i+k==n?'0':s[n-1];\n\t\t\tboolean one=first==last && prefix+suffix+k>=n || Math.max(prefix, suffix)+k>=n;\n\t\t\tif(!zero || !one) {\n//\t\t\t\tSystem.err.println(i+1);\n\t\t\t\tdraw=true;\n\t\t\t}\n\t\t\tif(s[i]=='1')\n\t\t\t\tones++;\n\t\t\tif(i>0 && s[i]==s[i-1] )\n\t\t\t\tcurr++;\n\t\t\telse\n\t\t\t\tcurr=1;\n\t\t\tmax=Math.max(max, curr);\n\t\t}\n\t\tout.println(draw?\"once again\":\"quailty\");\n\t\tout.close();\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]){\n        out = new PrintWriter(System.out);\n        in = new InputReader();\n        new C();\n        out.flush(); out.close();\n    }   \n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        FastPrinter out = new FastPrinter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) {\n        new Thread(null, new Main(), \"Main\", 1 << 28).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tScanner s = new Scanner(System.in);\n\t\tBufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tint n = Integer.parseInt(f.readLine());\n\t\tchar[] a = f.readLine().toCharArray();\n\t\tint difTypes = 0;\n\t\tTreeSet<Character> types = new TreeSet<Character>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(!types.contains(a[i])) {\n\t\t\t\ttypes.add(a[i]);\n\t\t\t}\n\t\t}\n\t\tint i = 0, j = 0;\n\t\tdifTypes = types.size();\n\t\tint curTypes = 0;\n\t\tint min = Integer.MAX_VALUE;\n\t\tTreeSet<Character> has = new TreeSet<Character>();\n\t\tHashMap<Character, Integer> freq = new HashMap<Character, Integer>();\n\t\twhile(i < n && j < n) {\n//\t\t\tSystem.out.println(i + \" \" + j);\n\t\t\thas.add(a[j]);\n\t\t\tif(!freq.containsKey(a[j])) {\n\t\t\t\tfreq.put(a[j], 1);\n\t\t\t} else {\n\t\t\t\tfreq.put(a[j], freq.get(a[j])+1);\n\t\t\t}\n\t\t\tj++;\n\t\t\tcurTypes = has.size();\n\t\t\tif(curTypes == difTypes) min = Math.min(min, j-i);\n//\t\t\tSystem.out.println(freq.toString());\n//\t\t\tSystem.out.println(curTypes);\n//\t\t\tSystem.out.println();\n\t\t\twhile(i < n && has.size() == difTypes) {\n\t\t\t\tint Freq = freq.get(a[i]);\n//\t\t\t\tSystem.out.println(Freq);\n\t\t\t\tif(Freq - 1 == 0) {\n\t\t\t\t\thas.remove(a[i]);\n\t\t\t\t\tfreq.put(a[i], freq.get(a[i])-1);\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfreq.put(a[i], freq.get(a[i])-1);\n\t\t\t\ti++;\n\t\t\t\tif(curTypes == difTypes) min = Math.min(min, j-i);\n\t\t\t}\n\t\t\tcurTypes = has.size();\n\t\t}\n//\t\tif(curTypes == difTypes) min = Math.min(min, j-i);\n\t\tSystem.out.println(min);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{           \t\n    \t InputReader in = new InputReader(System.in);       \n    \tPrintWriter pw=new PrintWriter(System.out);   \n    \t\n    \t\n    \t//int t=in.readInt();\n        //while(t-->0)\n        //{\n    \t\n        int n=in.readInt();\n    \t//long n=in.readLong();\n    \t/*int a[]=new int[n];\n    \tfor(int i=0;i<n;i++)\n    \t{\n    \t\ta[i]=in.readInt();\n    \t}*/\n    \tString a=in.readString();\n    \tchar c[]=a.toCharArray();\n    \tHashSet<Character>ht=new HashSet<Character>();\n    \tDeque<Character>q=new LinkedList<Character>();\n    \tHashSet<Character>hs=new HashSet<Character>();\n    \tHashMap<Character,Integer>hm=new HashMap<Character,Integer>();\n    \tfor(int i=0;i<n;i++)\n    \t{\n    \t\tht.add(c[i]);\n    \t}\n    \tint t=ht.size();\n    \tq.addLast(c[0]);\n    \ths.add(c[0]);\n    \thm.put(c[0],1);\n    \tint ans=Integer.MAX_VALUE;\n    \tif(hs.size()==t)\n\t\t{   \t\t\t\n\t\t\tans=min(ans,q.size());\n\t\t}\n    \t\n    \tfor(int i=1;i<n;i++)\n    \t{\n    \t\tq.addLast(c[i]);\n\t\t\ths.add(c[i]);\n\t\t\tif(hm.containsKey(c[i]))\n\t\t\t{\n\t\t\t\tint x=hm.get(c[i]);\n\t\t\t\thm.put(c[i],x+1);\n\t\t\t}\n\t\t\telse\n\t\t\t\thm.put(c[i],1);\n    \t\twhile(hs.size()==t)\n    \t\t{   \t\t\t\n    \t\t\tans=min(ans,q.size());\n    \t\t\tchar ch=q.peekFirst();\n    \t\t\tint x=hm.get(ch);\n    \t\t\tif(x==1)\n    \t\t\t\tbreak;\n    \t\t\telse\n    \t\t\t\t{\n    \t\t\t\thm.put(ch, x-1);\n    \t\t\t\tq.pollFirst();\n    \t\t\t\t}\n    \t\t\t\n    \t\t}\n    \t\t    \t\t\t\n    \t\t\n    \t}\n\t\tpw.println(ans);\t     \t\n    \t\n    \t//}\n    \t\n    \tpw.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastScanner in = new FastScanner();\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint n = in.nextInt();\n\t\tchar[] s = in.next().toCharArray();\n\t\tfreq = new HashMap<Character, Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tchar c = s[i];\n\t\t\tif(!freq.containsKey(c))\n\t\t\t\tfreq.put(c, 0);\n\t\t}\n\t\t\n\t\tint k = freq.size();\n\t\tint l = 0, r = 0, best = n;\n\t\tinc(s[0]);\n\t\t\n\t\twhile(r < n) {\n\t\t\tif(unique == k) { // got all, move left\n\t\t\t\tbest = Math.min(best, r+1-l);\n\t\t\t\tdec(s[l++]);\n\t\t\t}\n\t\t\telse { // advance r\n\t\t\t\tif(++r == n)\n\t\t\t\t\tbreak;\n\t\t\t\tinc(s[r]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpw.println(best);\n\t\t\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew C().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        int n=Integer.parseInt(br.readLine());\n        String input=br.readLine();\n        Set<Character> set = new HashSet<Character>();\n        for(int i=0;i<input.length();i++){\n            set.add(input.charAt(i));\n        }\n        StringBuilder sb= new StringBuilder();\nfor(char x:set){\n    sb.append(x);\n}\n        String substring1=sb.toString();\n//        //System.out.println(substring1);\n//        int[] count= new int[52];\n//        int[] b= new int[52];\n//\n//        char k;\n//        for(int i=0;i<substring1.length();i++){\n//            k=substring1.charAt(i);\n//            //System.out.println((int)'a');\n//            count[(k-'A')]++;\n//\n//        }\n//        for(int i=0;i<52;i++){\n//          b[i]=count[i];\n//\n//            //System.out.println(\"count \"+count[i]);\n//        }\n//        int answer=set.size();\n//\n//\n//        for(int i=0;i<input.length();i++){\n//\n//        }\n//        System.out.println(answer);\n//\n        //System.out.println(\"WAIT\");\n        System.out.println(solve(input,substring1).length());\n        pw.close();\n        br.close();\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String[] arg) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    int n = Integer.valueOf(in.readLine());\n    char[] s = in.readLine().toCharArray();\n    int i = 0, j = 0;\n    int[] ct = new int[256];\n    Set<Character> all = new HashSet<>();\n    for (char c : s) {\n      all.add(c);\n    }\n    int total = 0, res = Integer.MAX_VALUE;\n    while (j < s.length) {\n      while (total < all.size() && j < s.length) {\n        if (ct[s[j]] == 0) {\n          total++;\n        }\n        ct[s[j]]++;\n        j++;\n      }\n      res = Math.min(res, j - i);\n      while (total == all.size() && i < s.length) {\n        ct[s[i]]--;\n        if (ct[s[i]] == 0) {\n          total--;\n        }\n        i++;\n        if (total == all.size()) {\n          res = Math.min(res, j - i);\n        }\n      }\n    }\n    System.out.println(res);\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tint n=sc.nextInt();char[] arr=sc.next().toCharArray();int[] sum=new int[123];int[][] pre=new int[123][n+1];\n\t\tchar[] a=new char[n+1];\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\ta[i]=arr[i-1];\n\t\t}\n\t\tboolean[] v=new boolean[123];\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tsum[a[i]]++;v[a[i]]=true;\n\t\t\tfor(int j=65;j<=90;j++)\n\t\t\t{\n\t\t\t\tpre[j][i]=sum[j];\n\t\t\t}\n\t\t\tfor(int j=97;j<=122;j++)\n\t\t\t{\n\t\t\t\tpre[j][i]=sum[j];\n\t\t\t}\n\t\t}\n\t\tlong min=Integer.MAX_VALUE;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tint low=0,high=n-i+1;boolean got=false;\n\t\t\twhile(low<high)\n\t\t\t{\n\t\t\t\tint mid=(low+high)>>1;\n\t\t\t\tboolean curr=true;\n\t\t\t\tfor(int j=65;j<=90;j++)\n\t\t\t\t{\n\t\t\t\t\tif(v[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tif(pre[j][i+mid]-pre[j][i-1]<=0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurr=false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int j=97;j<=122;j++)\n\t\t\t\t{\n\t\t\t\t\tif(v[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tif(pre[j][i+mid]-pre[j][i-1]<=0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurr=false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(curr)\n\t\t\t\t{\n\t\t\t\t\tgot=true;\n\t\t\t\t\thigh=mid;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlow=mid+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(got)\n\t\t\t{\n\t\t\t\tmin=Math.min(min,(i+low)-i+1);\n\t\t\t}\n\t\t}\n\t\tout.println(min);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tn = nextInt();\n\t\tint ans = n, cc, cur = 0;\n\t\ta = new int [52];\n\t\tchar[] c = next().toCharArray();\n\t\tint l = 0, len = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (Character.isUpperCase(c[i])) {\n\t\t\t\tcur = 26 + c[i] - 'A';\n\t\t\t} else\n\t\t\t\tcur = c[i] - 'a';\n\t\t\tif (a[cur] == 0) {\n\t\t\t\ta[cur]++;\n\t\t\t\tlen++;\n\t\t\t\tans = i - l + 1;\n\t\t\t} else {\n\t\t\t\ta[cur]++;\n\t\t\t\tfor (; l < i; ++l) {\n\t\t\t\t\tif (Character.isUpperCase(c[l])) {\n\t\t\t\t\t\tcc = 26 + c[l] - 'A';\n\t\t\t\t\t} else\n\t\t\t\t\t\tcc = c[l] - 'a';\n\t\t\t\t\t\n\t\t\t\t\tif (a[cc] > 1) {\n\t\t\t\t\t\t--a[cc];\n\t\t\t\t\t} else break;\n\t\t\t\t}\n\t\t\t\tif (i - l + 1 < ans) {\n\t\t\t\t\tans = i - l + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t/*int l = 0, r = n - 1;\n\t\tfor (l = 0; l < n; ++l) {\n\t\t\tif (Character.isUpperCase(c[l])) {\n\t\t\t\tif (a[26 + c[l] - 'A'] > 1) {\n\t\t\t\t\ta[26 + c[l] - 'A']--;\n\t\t\t\t} else break;\n\t\t\t} else {\n\t\t\t\tif (a[c[l] - 'a'] > 1) {\n\t\t\t\t\ta[c[l] - 'a']--;\n\t\t\t\t} else break;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfor (r = n - 1; r >= 0; --r) {\n\t\t\tif (Character.isUpperCase(c[r])) {\n\t\t\t\tif (a[26 + c[r] - 'A'] > 1) {\n\t\t\t\t\ta[26 + c[r] - 'A']--;\n\t\t\t\t} else break;\n\t\t\t} else {\n\t\t\t\tif (a[c[r] - 'a'] > 1) {\n\t\t\t\t\ta[c[r] - 'a']--;\n\t\t\t\t} else break;\n\t\t\t\t\n\t\t\t}\n\t\t}*/\n\t\tpw.print(ans);\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]){\n\t\tInputReader in = new InputReader(System.in);\n\t\tOutputStream outputStream = System.out;\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\t//----------My Code----------\n\t\tint n=in.nextInt();\n\t\tint l=0,r=0;\n\t\tString s=in.nextLine();\n\t\tHashSet<Character> size=new HashSet<>();\n\t\tfor(int i=0;i<n;i++){\n\t\t\tchar p=s.charAt(i);\n\t\t\tsize.add(p);\n\t\t}\n\t\tint chk=size.size();\n\t\tHashMap<Character, Integer> hm=new HashMap<>();\n\t\tint ans=Integer.MAX_VALUE;\n\t\twhile(l<n){\n\t\t\tif(hm.size()<chk && r<n){\n\t\t\t\tchar p=s.charAt(r);\n\t\t\t\tif(hm.containsKey(p)){\n\t\t\t\t\thm.put(p, hm.get(p)+1);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\thm.put(p, 1);\n\t\t\t\t}\n\t\t\t\tr++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tchar p=s.charAt(l);\n\t\t\t\tif(hm.get(p)==1){\n\t\t\t\t\thm.remove(p);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\thm.put(p, hm.get(p)-1);\n\t\t\t\t}\n\t\t\t\tl++;\n\t\t\t}\n\t\t\tif(hm.size()==chk){\n\t\t\t\tans=Math.min(ans, r-l);\n\t\t\t}\n\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\t\t//---------------The End------------------\n \n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in=new Scanner(new BufferedInputStream(System.in));\n\tint n=in.nextInt();\n\tchar b[]=in.next().toCharArray();\n\tint bb[]=new int [b.length];\n\n\tint Mark[]=new int [26*2+1];\n\tint Mark1[]=new int [26*2+1];\n\n\tint ans=0;\n\tfor(int i=0;i<b.length;i++){\n\t\tchar f=b[i];\n\t\tint a;\n\t\tif(f>='a'&&f<='z')\n\t\t\ta=f-'a';\n\t\telse  a=f-'A'+26;\n\t\tbb[i]=a;\n\t\tif(Mark1[a] == 0){\n\t\t\tans++;\n\t\t\tMark1[a]=1;}\n\t \n}\n//\tSystem.out.println(ans);\n\tint i;\n    // int L ,R ,nowsum ,Ans;\n   int  L = 0 ,nowsum = 0 ,Ans = n,R = 0;\n     //找到LR\n     for(i = 0 ;i < n ;i ++)\n     {\n         if(Mark[bb[i]]==0) nowsum ++;\n           Mark[bb[i]] ++;\n           if(nowsum == ans) \n           {\n              R = i;\n              break;\n           }\n        \n     }\n//     System.out.println(\"r\"+R);\n     Ans = R - L + 1; \n     for(i = L ;i < n ;i ++)\n     {\n       \n        if((--Mark[bb[i]])==0)\n        {\n           int ok = 0;\n           for(int j = R + 1 ;j < n ;j ++)\n           {\n              \n          \n                 Mark[bb[j]] ++;\n                 if(bb[j] == bb[i])\n                 {\n                    ok = 1;\n                    R = j;\n                    break;\n                 }\n              \n           }\n           if(ok==0) break;\n        }\n        if(Ans > R - i) Ans = R - i;\n     }\n    \t System.out.println(Ans);\n\t \n\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        CIO io = new CIO();\n        try {\n            Csolver solver = new Csolver(io);\n            solver.solve();\n        } finally {\n            io.close();\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter w = new PrintWriter(System.out);\n\n        //SWEEP LINE BABYY\n        \n        int n = Integer.parseInt(r.readLine());\n        \n        char[] pokemans = r.readLine().toCharArray();\n        \n        int[] counts = new int[52];\n        boolean[] exists = new boolean[52];\n        \n        for (int i = 0; i < pokemans.length; i++) {\n            exists[index(pokemans[i])] = true;\n        }\n        \n        int left = 0, right = 0;\n        counts[index(pokemans[0])] = 1;\n        \n        int answer = 1000000000;\n        \n        while (left < n && right < n) {\n            if (!valid(counts, exists)) {\n                //move right\n                right++;\n                if (right < n)\n                counts[index(pokemans[right])]++;\n            } else {\n                answer = Math.min(answer, right - left + 1);\n                left++;\n                if (left - 1 >= 0)\n                counts[index(pokemans[left - 1])]--;\n            }\n        }\n        \n        w.println(answer);\n        w.flush();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        in = new FastReader(System.in);\n        out = new PrintWriter(System.out);\n        solve();\n        out.flush();\n        out.close();\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)\n        Main m = new Main();\n        m.foo();\n        m.out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception{\n        int N = Integer.parseInt(br.readLine());\n        char[] A = br.readLine().toCharArray();\n\n        HashSet<Character> cndD = new HashSet<Character>();\n        for(int i = 0; i < N; i++){\n            cndD.add(A[i]);\n        }\n\n        int cnt = cndD.size();\n\n        int a = 0;\n        int b = 0;\n\n        int ans = (1 << 30);\n        HashMap<Character, Integer> d = new HashMap<Character, Integer>();\n        while(b < N){\n            if(d.containsKey(A[b])){\n                if(A[a] == A[b]){\n                    a++;\n                    while(d.get(A[a]) > 1){\n                        d.put(A[a], d.get(A[a])-1);\n                        a++;\n                    }\n                } else{\n                    d.put(A[b], d.get(A[b])+1);\n                }\n            } else{\n                d.put(A[b], 1);\n            }\n            if(d.size() == cnt){\n                ans = Math.min(b-a+1, ans);\n            }\n            b++;\n        }\n\n        pw.print(ans + \"\\n\");\n        pw.close();\n        br.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n        int n = Integer.parseInt(reader.readLine());\n        char[] ch = reader.readLine().toCharArray();\n\n        LinkedList<Integer>[] p = new LinkedList[52];\n\n        for (int i = 0; i < 52; i++) {\n            p[i] = new LinkedList<>();\n        }\n\n        int[] fc = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            int cc = f(ch[i]);\n            p[cc].add(i);\n            fc[i] = cc;\n        }\n        int en = 0;\n        for (int i = 0; i < 52; i++) {\n            if (p[i].size() > 0) en = Math.max(en, p[i].poll());\n        }\n\n        int mx = en + 1;\n\n        for (int i = 0; i < n; i++) {\n            if (p[fc[i]].size() == 0) break;\n            en = Math.max(en, p[fc[i]].poll());\n            mx = Math.min(mx, en - i);\n        }\n\n        System.out.println(mx);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint n = nextInt();\n\t\tchar[]a = next().toCharArray();\n\t\tint[]cnt = new int[256];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcnt[a[i]]++;\n\t\t}\n\t\tint alldiff = 0;\n\t\tfor (int i = 0; i < 256; i++) {\n\t\t\tif (cnt[i] > 0)\n\t\t\t\talldiff++;\n\t\t}\n\t\tArrays.fill(cnt, 0);\n\t\tint diff = 0, right = -1, ans = n+5;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (right < i) {\n\t\t\t\tcnt[a[i]]++;\n\t\t\t\tdiff = 1;\n\t\t\t\tright = i;\n\t\t\t}\n\t\t\twhile (right < n-1 && diff < alldiff) {\n\t\t\t\tright++;\n\t\t\t\tcnt[a[right]]++;\n\t\t\t\tif (cnt[a[right]]==1)\n\t\t\t\t\tdiff++;\n\t\t\t}\n\t\t\tif (diff==alldiff && right-i+1 < ans) {\n\t\t\t\tans = right-i+1;\n\t\t\t}\n\t\t\tcnt[a[i]]--;\n\t\t\tif (cnt[a[i]]==0)\n\t\t\t\tdiff--;\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        (new Main()).run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = in();\n        String s = next();\n        int total = 0;\n        int[] seq = new int[n];\n        boolean[] c = new boolean[100000];\n        for (int i = 0; i < n; i++) {\n            seq[i] = s.charAt(i);\n            if (!c[seq[i]]) {\n                total++;\n                c[seq[i]] = true;\n            }\n        }\n\n        Arrays.fill(id, -1);\n        int best = Integer.MAX_VALUE;\n        TreeSet<Integer> q = new TreeSet<Integer>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return id[o1] - id[o2];\n            }\n        });\n        for (int i = 0; i < n; i++) {\n            q.remove(seq[i]);\n            id[seq[i]] = i;\n            q.add(seq[i]);\n            if (q.size() == total) {\n                //System.out.println(\"best: i=\" + i + \" id=\" + id[q.first()]);\n                best = Math.min(best, i - id[q.first()] + 1);\n            }\n            //System.out.println(\"i=\"+i+\" \" +q.toString());\n        }\n\n        System.out.println(best);\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastReader in = new FastReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        solve(in, out);\n        out.flush();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tSolver solver = new Solver();\n\t\tsolver.solve(in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tin.nextLine();\n\t\tString s = in.nextLine();\n\n\t\tHashMap<Integer, Integer> seen = new HashMap<>();\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tCharacter c = s.charAt(i);\n\t\t\tint ci = (int) c.charValue();\n\t\t\t// System.out.println(ci);\n\t\t\tseen.put(ci, seen.get(ci) == null ? 1 : seen.get(ci) + 1);\n\t\t}\n\n\t\tHashMap<Integer, Integer> sub = new HashMap<Integer, Integer>();\n\t\tint start = 0;\n\t\tint min = 10000000;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tCharacter c = s.charAt(i);\n\t\t\tint ci = (int) c.charValue();\n\n\t\t\tsub.put(ci, sub.get(ci) == null ? 1 : sub.get(ci) + 1);\n\t\t\t\n\t\t\twhile(sub.size() == seen.size()) {\n\t\t\t\tmin = Math.min(min, i - start + 1);\n\t\t\t\tc = s.charAt(start);\n\t\t\t\tstart ++;\n\t\t\t\tci = (int) c.charValue();\n\t\t\t\tif( sub.get(ci) == 1) \n\t\t\t\t\tsub.remove(ci);\n\t\t\t\telse\n\t\t\t\t\tsub.put(ci, sub.get(ci) - 1);\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.print(min);\n\n\t\t// System.out.println( seen_all_at - begin + 1);\n\n\t\tin.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tInputReader in=new InputReader(System.in);\n\t\tOutputWriter out=new OutputWriter(System.out);\n\t\tint n=in.readInt();\n\t\tString s=in.readString();\n\t\tint low[]=new int[26];\n\t\tint upper[]=new int[26];\n\t\tboolean islow[]=new boolean[26];\n\t\tboolean isupper[]=new boolean[26];\n\t\tArrays.fill(low,Integer.MAX_VALUE);\n\t\tArrays.fill(upper, Integer.MAX_VALUE);\n\t\t\n\t\tint ans[]=new int[n];\n\t\tint finalsans=Integer.MAX_VALUE;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint c=s.charAt(i);\n\t\t\tif(c>='a'&&c<='z'){\n\t\t\t\tislow[c-'a']=true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tisupper[c-'A']=true;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tfor(int i=n-1;i>=0;i--){\n\t\t\tint c=s.charAt(i);\n\t\t\t\n\t\t\tif(c>='a'&&c<='z'){\n\t\t\t\tlow[c-'a']=i;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tupper[c-'A']=i;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tfor(int j=0;j<26;j++){\n\t\t\t\tif(islow[j]==true){\n\t\t\t\t\tans[i]=Math.max(ans[i], low[j]);\n\t\t\t\t}\n\t\t\t}\n          for(int j=0;j<26;j++){\n        \t  if(isupper[j]==true){\n        \t\t  ans[i]=Math.max(ans[i], upper[j]);\n\t\t\t\t}\n\t\t\t}\n          \n          finalsans=Math.min(ans[i]-i+1, finalsans);\n\t\t}\n\t\t\n\n\t\tSystem.out.println(finalsans);\n\t\t\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFile inputFile = new File(\"entradaC\");\n\t\tif (inputFile.exists())\n\t\t\tSystem.setIn(new FileInputStream(inputFile));\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringBuilder out = new StringBuilder();\n\t\tString line = \"\";\n\t\twhile ((line = in.readLine()) != null) {\n\t\t\tint n = Integer.parseInt(line);\n\t\t\tchar[] p = in.readLine().toCharArray();\n\t\t\tHashMap<Character, Integer> dif = new HashMap<>();\n\t\t\tfor (int i = 0; i < p.length; i++)\n\t\t\t\tdif.put(p[i], 0);\n\t\t\tint ndif = dif.size();\n\t\t\tint head = 0, tail = 0, cnt = 0, ans = Integer.MAX_VALUE, cur;\n\t\t\twhile (head < n) {\n\t\t\t\tcur = dif.get(p[head]);\n\t\t\t\tif (cur == 0)\n\t\t\t\t\tcnt++;\n\t\t\t\tdif.put(p[head], cur + 1);\n\t\t\t\thead++;\n\t\t\t\tif (cnt == ndif)\n\t\t\t\t\tans = Math.min(ans, head - tail);\n\t\t\t\twhile (tail < head && cnt == ndif) {\n\t\t\t\t\tcur = dif.get(p[tail]);\n\t\t\t\t\tif (cur == 1)\n\t\t\t\t\t\tcnt--;\n\t\t\t\t\tdif.put(p[tail], cur - 1);\n\t\t\t\t\ttail++;\n\t\t\t\t\tif (cnt == ndif)\n\t\t\t\t\t\tans = Math.min(ans, head - tail);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ndif == 1)\n\t\t\t\tans = 1;\n\t\t\tout.append(ans + \"\\n\");\n\n\t\t}\n\t\tSystem.out.print(out);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextInt();\n\t\tk = 0;\n\t\t\n\t\tString line = sc.nextLine();\n\t\t\n\t\tArrayList<Character> poks = new ArrayList<Character>();\n\t\tboolean ex[] = new boolean[256];\n\t\t\n\t\tfor(int i=0; i<n; i++)\n\t\t{\n\t\t\tif(!ex[line.charAt(i)])\n\t\t\t{\n\t\t\t\tex[line.charAt(i)] = true;\n\t\t\t\tpoks.add(line.charAt(i));\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tint l = 0;\n\t\tint r = 0;\n\t\tint dist = 1;\n\t\tint occ[] = new int[256];\n\t\tocc[line.charAt(0)] = 1;\n\t\t\n\t\tint min = n;\n\t\twhile(r < n)\n\t\t{\n\t\t\tif(dist == poks.size())\n\t\t\t\tmin = Math.min(min, r - l + 1);\n\t\t\tif(l < r && dist == poks.size())\n\t\t\t{\n\t\t\t\t\n\t\t\t\tocc[line.charAt(l)]--;\n\t\t\t\tif(occ[line.charAt(l)] == 0)\n\t\t\t\t\tdist--;\n\t\t\t\tl++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(r < n-1){\n\t\t\t\tocc[line.charAt(r+1)]++;\n\t\t\t\tif(occ[line.charAt(r+1)] == 1)\n\t\t\t\t\tdist++;\n\t\t\t}\n\t\t\tr++;\n\t\t}\n\t\tSystem.out.println(min);\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n//     Test.testing();\n        ConsoleIO io = new ConsoleIO();\n        new Main(io).solve();\n        io.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner sc = new Scanner(System.in);\n\t\tN = sc.nextInt();\n\t\ts = sc.next();\n\t\tint size = 1;\n\t\twhile(size <= N) size*=2;\n\t\tval = new long[size*2];\n\t\tsetup(0,N-1,0);\n\n\t\tlong toFind = query(0,N-1,0,N-1,0);\n\t\tlong ans = 1L<<29;\n\t\tfor(int i = 0; i < N; i++)\n\t\t\tans = Math.min(ans,binarySearch(i,toFind));\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tint n = Integer.parseInt(in.readLine());\n\t\tchar[] s = in.readLine().toCharArray();\n\t\tHashSet<Character> all = new HashSet<Character>();\n\t\tfor (char c : s)\n\t\t\tall.add(c);\n\t\tint totalCount = all.size();\n\t\tHashMap<Character, Integer> cnts = new HashMap<Character, Integer>();\n\t\tint ans = Integer.MAX_VALUE;\n\t\tint x = 0;\n\t\tfor (int y = 0; y < n; ++y) {\n\t\t\tif (!cnts.containsKey(s[y]))\n\t\t\t\tcnts.put(s[y], 0);\n\t\t\tcnts.put(s[y], cnts.get(s[y]) + 1);\n\t\t\tif (cnts.size() < totalCount)\n\t\t\t\tcontinue;\n\t\t\twhile (cnts.get(s[x]) > 1) {\n\t\t\t\tcnts.put(s[x], cnts.get(s[x]) - 1);\n\t\t\t\t++x;\n\t\t\t}\n\t\t\tans = Math.min(ans, y - x + 1);\n\t\t}\n\t\tout.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        Scanner scanner = new Scanner(System.in);\n\n        int n = scanner.nextInt();\n\n        char[] s = scanner.next().toCharArray();\n\n        int[][] r = new int[n][54];\n\n        Set<Character> chars = new HashSet<>();\n\n        for (int i= 0 ;i < n; ++ i)chars.add(s[i]);\n\n        List<Character> all = new ArrayList<>();\n\n        for (Character c: chars)all.add(c);\n\n        for (int i = n - 1; i >= 0; -- i){\n            for (int j = 0;j < 54; ++ j){\n                if (i == n - 1){\n                    r[i][j] = -1;\n                }else {\n                    r[i][j] = r[i + 1][j];\n                }\n            }\n            r[i][getCode(s[i])] = i;\n        }\n\n        int res = n;\n\n\n        for (int i =0; i < n; ++ i){\n            int mx = 1;\n            boolean fl = false;\n            for (Character c: all){\n                if (r[i][getCode(c)] == -1){\n                    fl = true;\n                    break;\n                }\n                mx = Math.max(mx, r[i][getCode(c)] - i + 1);\n            }\n            if (fl){\n                System.out.println(res);\n                return;\n            }\n            res = Math.min(res, mx);\n        }\n        System.out.println(res);\n\n        scanner.close();\n        //reader.close();\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String... args) throws Exception {\n    br = new BufferedReader(new InputStreamReader(System.in));\n    pw = new PrintWriter(new BufferedOutputStream(System.out));\n    new P701A().run();\n    br.close();\n    pw.close();\n    System.err.println(\"\\n[Time : \" + (System.currentTimeMillis() - startTime) + \" ms]\");\n  }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t// TODO Auto-generated method stub\n\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(in.readLine());\n\t\tString in1 = in.readLine();\n\t\tString store = \"\";\n\t\tHashSet<Character> contain = new HashSet<Character>();\n\t\tfor(int i = 0; i < n;i++){\n\t\t\tif(!contain.contains(in1.charAt(i))){\n\t\t\t\tstore += in1.charAt(i);\n\t\t\t\tcontain.add(in1.charAt(i));\n\t\t\t}\n\t\t}\n\t\tint[] index = new int[store.length()];\n\t\tfor(int i = 0; i < store.length(); i++){\n\t\t\tindex [i] = -1;\n\t\t}\n\t\tHashSet<Integer> index2 = new HashSet<Integer>();\n\t\tArrayList<Integer> index3 = new ArrayList<Integer>();\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint index4 = store.indexOf(in1.charAt(i));\n\t\t\tif(index[index4] == -1){\n\t\t\t\tindex[index4] = i;\n\t\t\t\tindex2.add(i);\n\t\t\t\tindex3.add(i);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tindex2.remove(index[index4]);\n\t\t\t\tindex2.add(i);\n\t\t\t\tindex3.add(i);\n\t\t\t\tindex[index4] = i;\n\t\t\t}\n\t\t\tif(index2.size() == index.length){\n\t\t\t\twhile(!index2.contains(index3.get(0))){\n\t\t\t\t\tindex3.remove(0);\n\t\t\t\t}\n\t\t\t\tmin = Math.min(min, i - index3.get(0)+ 1);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t    int n = ip.i() ;\n\t    TreeMap<Character,Integer> map = new TreeMap<Character,Integer>() ;\n\t    TreeSet<Character> set = new TreeSet<Character>() ;\n\t    char c[] = ip.S().toCharArray() ;\n\t    for(char t : c)\n\t    \tset.add(t) ;\n\t    int size = set.size() ;\n\t    for(int i=0 ; i<size ; i++)\n\t    \tmap.put(set.pollFirst(),i) ;\n\t    int a[] = new int[n] ;\n\t    for(int i=0 ; i<n ; i++)\n\t    \ta[i]=map.get(c[i]) ;\n\t    int erl[][] = new int[size][n] ;\n\t    for(int i=0 ; i<size ; i++)\n\t    \tfor(int j=n-1 ; j>=0 ; j--)\n\t    \t\terl[i][j]=(a[j]==i) ? j : (j==n-1 ? -1 : erl[i][j+1]) ;\n\t    long min = Long.MAX_VALUE ;\n\t    for(int i=0 ; i<n ; i++){\n\t    \tlong maxt = Long.MIN_VALUE ;\n\t    \tfor(int j=0 ; j<size ; j++)\t\t\n\t    \t\tif(erl[j][i]!=-1)\n\t    \t\t\tmaxt = Long.max(maxt,(erl[j][i]-i+1)) ;\n\t    \t\telse{\n\t    \t\t\tmaxt = Long.MAX_VALUE ;\n\t    \t\t\tbreak ;\n\t    \t\t}\n\t    \tmin = Long.min(min,maxt) ;\t    \t\n\t    }\n\t    op.print(min) ;\n\t\tFinish() ;\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tnew Main().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n\tBufferedReader in =\n\t    new BufferedReader(new InputStreamReader(System.in));\n\tint n = Integer.parseInt(in.readLine());\n\tchar[] ps = in.readLine().toCharArray();\n\tHashMap<Character, TreeSet<Integer>> locs =\n\t    new HashMap<Character, TreeSet<Integer>>();\n\tHashSet<Character> poks = new HashSet<Character>();\n\tint lastNew = n;\n\tfor (int i = 0; i < n; i++) {\n\t    if (!poks.contains(ps[i])) {\n\t\tpoks.add(ps[i]);\n\t\tlocs.put(ps[i], new TreeSet<Integer>());\n\t\tlastNew = i;\n\t    }\n\t    locs.get(ps[i]).add(i);\n\t}\n\tint max = lastNew;\n\tint minRange = max+1;\n\tfor (int min = 0; min < n; min++) {\n\t    char pAtMin = ps[min];\n\t    Integer nextInd = locs.get(pAtMin).higher(min);\n\t    if (nextInd == null) break;\n\t    max = Math.max(max, nextInd);\n\t    minRange = Math.min(minRange, max-min);\n\t}\n\tSystem.out.println(minRange);\n    }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) throws IOException {\n    init();\n    new ProblemC().run();\n    out.flush();\n    out.close();\n  }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        solve();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) {\n\t\tKattio sc = new Kattio(System.in);\n\t\tint n = sc.getInt();\n\t\tString s = sc.getWord();\n\t\tint[] found = new int['z' + 1];\n\t\tint amount = 0;\n\t\tfor(int i = 0; i<s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(found[c] == 0) amount++;\n\t\t\tfound[c]++;\n\t\t}\n\t\tint contains[] = new int['z' + 1];\n\t\tint min = n;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tint in = 0;\n\t\twhile(true) {\n\t\t\tif(in<amount) {\n\t\t\t\tif(end == n) break;\n\t\t\t\tchar c = s.charAt(end);\n\t\t\t\tif(contains[c] == 0) in++;\n\t\t\t\tcontains[c]++;\n\t\t\t\tend++;\n\t\t\t} else {\n\t\t\t\tif(min>end-start) min = end-start;\n\t\t\t\tchar c = s.charAt(start);\n\t\t\t\tif(contains[c] == 1) in--;\n\t\t\t\tcontains[c]--;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(min);\n\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n\n        String s = \"\";\n        while (s.length() == 0) {\n            s = sc.nextLine();\n        }\n        char[] pokemons = s.toCharArray();\n\n        Set<Character> pokemonTypes = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            pokemonTypes.add(pokemons[i]);\n        }\n\n        int types = pokemonTypes.size();\n\n        int l = 0;\n        int r = 0;\n        int min = n;\n        Map<Character, Integer> currentPokemons = new HashMap<>();\n\n\n        while (r < n) {\n            while (currentPokemons.size() < types && r < n) {\n                char pokemon = pokemons[r++];\n                currentPokemons.merge(pokemon, 1, (a, b) -> a + b);\n            }\n            min = Math.min(r - l, min);\n\n            while (currentPokemons.size() == types) {\n                char pokemon = pokemons[l++];\n                if (currentPokemons.get(pokemon) == 1) {\n                    currentPokemons.remove(pokemon);\n                } else {\n                    min = Math.min(r - l, min);\n                    currentPokemons.put(pokemon, currentPokemons.get(pokemon) - 1);\n                }\n            }\n        }\n\n        min = Math.min(min, r - l + 1);\n        min = Math.max(min, types);\n\n        System.out.println(min);\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws IOException {\n        new Main();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]){\n\t\tint n = in.nextInt();\n\t\tString s = in.next();\n\t\tif(n==1)\n\t\t\tSystem.out.println(\"1\");\n\t\telse{\n\t\t\tint j=0,i=1,ans=s.length();\n\t\t\tint h[]=new int[128];\n\t\t\th[(int)s.charAt(0)]=1;\n\t\t\twhile(i<n){\n\t\t\t\tif(h[(int)s.charAt(i)]==0)\n\t\t\t\t\tans = i-j+1;\n\t\t\t\th[(int) s.charAt(i)]++;\n\t\t\t\twhile(j<i && h[(int)s.charAt(j)]>1){\n\t\t\t\t\th[(int)s.charAt(j)]--;\n\t\t\t\t\tj++;\n\t\t\t\t\tans = Math.min(ans, i-j+1);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        MyInputReader in = new MyInputReader(System.in);\n        HashMap<Character, Integer> m = new HashMap<Character, Integer>();\n        int n = in.nextInt();\n        char[] s = in.next().toCharArray();\n\n        for (int i = 0; i < n; i++) {\n            m.put(s[i], 0);\n        }\n        int mx = m.size();\n        int start = 0;\n        int end = 0;\n        int min = Integer.MAX_VALUE;\n        int cur = 0;\n        while (end < n) {\n            while (end < n && cur != mx) {\n                int x = m.get(s[end]);\n                if (x == 0) {\n                    cur += 1;\n                }\n                m.put(s[end], x + 1);\n                end += 1;\n            }\n            while (start <= end && cur == mx) {\n                int x = m.get(s[start]);\n                m.put(s[start], x - 1);\n                if (x - 1 == 0) {\n                    cur -= 1;\n                }\n                start += 1;\n            }\n            min = Math.min(min, end - start + 1);\n        }\n        System.out.println(min);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        int N = sc.nextInt();\n        String S = sc.next();\n        HashSet<Character> unique = new HashSet<>();\n        for(char c : S.toCharArray()){\n            unique.add(c);\n        }\n        int number = unique.size();\n\n        Hashtable<Character, Integer> indexes = new Hashtable<>();\n        TreeSet<Integer> tree = new TreeSet<>();\n\n        int min = N+1;\n        int total = 0;\n        for(int i = 0; i<N; i++){\n            char c = S.charAt(i);\n            if(!indexes.containsKey(c)){\n                total++;\n                indexes.put(c, i);\n                tree.add(i);\n            }\n            else{\n                int old = indexes.get(c);\n                indexes.put(c, i);\n                tree.remove(old);\n                tree.add(i);\n            }\n\n            if(total == number){\n                int dist = tree.last() - tree.first() + 1;\n                min = Math.min(dist, min);\n            }\n        }\n\n        System.out.println(min);\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] aa = new int[1 + n];\n\t\tfor (int i = 1, a = 0; i <= n; i++)\n\t\t\taa[i] = a = (a + Integer.parseInt(st.nextToken())) % MD;\n\t\tint[] pp = new int[n];\n\t\tpp[0] = 1;\n\t\tfor (int i = 1, p = 1; i < n; i++) {\n\t\t\tpp[i] = p;\n\t\t\tp = p * 2 % MD;\n\t\t}\n\t\tint d = 0;\n\t\tlong ans = 0;\n\t\tfor (int i = n - 1; i >= 0; i--) {\t// rest at i\n\t\t\td = (d * 2 % MD + aa[n - 1 - i]) % MD;\t// rest again before n\n\t\t\tans = (ans + (long) (d + aa[n - i]) * pp[i]) % MD;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String [] argv) throws IOException\n\t\tBufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n\t\tMain ma=new Main();\n\t\tString[] l1=in.readLine().split(\" \");\n\t\tint n=Integer.parseInt(l1[0]);\n\t\tint q=Integer.parseInt(l1[1]);\n\t\tString[] ar=in.readLine().split(\" \");\n\t\tint a1=Integer.parseInt(ar[0]);\n\t\tint b1=Integer.parseInt(ar[1]);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tma.l.add(Integer.parseInt(ar[i]));\n\t\t}\n\t\tint m=ma.l.findmax();\n\t\tint[][] pair=new int[n][2];\n\t\tint t=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(ma.l.start.data==m)\n\t\t\t\tbreak;\n\t\t\tma.l.myfunc();\n\t\t\tpair[t][0]=ma.l.start.data;\n\t\t\tpair[t][1]=ma.l.start.next.data;\n\t\t\tt++;\n\t\t}\n\t\tint rl[]=new int[n];\n\t\tnode temp=ma.l.start;\n\t\tfor(int i=0;i<n;i++){\n\t\t\trl[i]=temp.data;\n\t\t\ttemp=temp.next;\n\t\t}\n\t\tfor(int i=0;i<q;i++){\n\t\t\tlong a=Long.parseLong(in.readLine());\n\t\t\tif(a==1){\n\t\t\t\tSystem.out.println(a1 + \" \" + b1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a<=t+1){\n\t\t\t\t\tSystem.out.println(pair[(int)(a-2)][0]+\" \"+pair[(int)(a-2)][1]);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif((a-t)%(n-1)==0){\n\t\t\t\t\t\tSystem.out.println(rl[0]+\" \"+rl[n-1]);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println(rl[0]+\" \"+rl[(int)((a-t)%(n-1))]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[])throws IOException\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        int m=sc.nextInt();\n        int req=n/m;\n        int arr[]=new int[n+1];\n        int size[]=new int[m];\n        List<Integer> list[]=new ArrayList[m];\n        for(int i=0;i<m;i++)\n        {\n            list[i]=new ArrayList<>();\n        }\n        for(int i=1;i<=n;i++)\n        {\n            arr[i]=sc.nextInt();\n            size[arr[i]%m]++;\n            list[arr[i]%m].add(i);\n        }\n        long tot=0;int x=0,y=0;\n        List<Integer> idx=new ArrayList<>();\n        for(int i=0;i < 2*m;i++)\n        {\n            //System.out.println(i+\" \"+size[i%m]);\n            if(size[i%m]>req)\n            {\n                for(int j=0;j<size[i%m]-req;j++)\n                {\n                    idx.add(list[i%m].get(j));\n                    y++;\n                    \n                }\n                size[i%m]=req;\n                //System.out.println(i+\" \"+x+\" \"+y);\n            }\n            else if(size[i%m]<req)\n            {\n                //System.out.println(idx+\" \"+i);\n                while(x!=y && size[i%m]<req)\n                {\n                    int num=arr[idx.get(x)];\n                    int gg=i-num%m;\n                    tot+=gg;\n                    arr[idx.get(x)]+=gg;\n                    x++;\n                    size[i%m]++;\n                }\n            }\n        }\n        System.out.println(tot);\n        for(int i=1;i<=n;i++)\n        {\n            System.out.print(arr[i]+\" \");\n        }\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new EhabAndAComponentChoosingProblem().solve();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tnew a().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tint n = nextInt(),\n\t\t\tk = nextInt(),\n\t\t\ta[] = new int[n];\n\n\t\tint s = 0;\n\t\tfor (int i=2; i<=n; i++)\n\t\t\tif (prime(i))\n\t\t\t\ta[s++] = i;\n\t\t\n\t\tint m = 0;\n\t\tfor (int i=2; i<s; i++)\n\t\t\tfor (int j=i-1; j>0; j--)\n\t\t\t\tif (a[i] == a[j]+a[j-1]+1){\n\t\t\t\t\tm++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\n\t\tif (m >= k) out.println(\"YES\");\n\t\telse out.println(\"NO\");\n\t\tout.flush();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBitSet primes = primes(1001);\n\t\tint N = sc.nextInt();\n\t\tint K = sc.nextInt();\n\t\tint count = 0;\n\t\tfor (int i = 2; i <= N; ++i) {\n\t\t\tif (!primes.get(i)) continue;\n\t\t\tint res = i - 1;\n\t\t\tboolean found = false;\n\t\t\tfor (int j = 2; j <= i / 2; ++j) {\n\t\t\t\tif (primes.get(j) && primes.nextSetBit(j + 1) == res - j) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) {\n\t\t\t\t++count;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count >= K ? \"YES\" : \"NO\");\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tboolean submit = true;\t\t\n\t\tScanner sc = submit ? new Scanner(System.in) : new Scanner(new File(\"A.in\"));\n\t\twhile(sc.hasNext()) {\n\t\t\tint n = sc.nextInt(), k = sc.nextInt();\n\t\t\tboolean p[] = sieveOfEratosthenes(1001);\n\t\t\tArrayList<Integer> nolds = new ArrayList<Integer>();\n\t\t\t\t\t\n\t\t\tfor(int i = 0, prev = 0; i < p.length; i++) {\n\t\t\t\tif(p[i]) {\n\t\t\t\t\tnolds.add(prev+i + 1);\n\t\t\t\t\tprev = i;\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//System.out.println(nolds);\n\t\t\t\n\t\t\tint c = 0;\n\t\t\tfor(int i : nolds)\n\t\t\t\tif(i >= 2 && i <= n && p[i])\n\t\t\t\t\tc++;\n\t\t\t\n\t\t\tSystem.out.println(c >= k ? \"YES\" : \"NO\");\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException\n        new Main().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[])\n\t\tboolean[] b = new boolean[11000];\n\t\tArrays.fill(b, true);\n\t\tb[0] = b[1] = false;\n\n\t\tfor(int i=2;i < b.length;i++)\n\t\t{\n\t\t\tif(!b[i])\n\t\t\t\tcontinue;\n\n\t\t\tfor(int j=2;i*j<b.length;j++)\n\t\t\t\tb[i*j] = false;\n\t\t}\n\n\t\tint[] p = new int[11000];\n\t\tint pn = 0;\n\n\t\tfor(int i=0;i < b.length;i++)\n\t\t{\n\t\t\tif(b[i])\n\t\t\t\tp[pn++] = i;\n\t\t}\n\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint n = scan.nextInt();\n\t\tint k = scan.nextInt();\n\n\t\tint rtn = 0;\n\n\t\t\n\t\tfor(int j=0;p[j] <= n;j++)\n\t\t{\n\t\t\t//Try to make sum\n\t\t\tfor(int h=0;h <= j;h++)\n\t\t\t{\n\t\t\t\tif(p[h] + p[h+1] + 1 == p[j])\n\t\t\t\t{\n\t\t\t\t\trtn++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(rtn >= k ? \"YES\" : \"NO\");\n\t\t\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int N = s.nextInt();\n        int K = s.nextInt();\n\n        int[] primes = getPrimesFast(N);\n        Set<Integer> ints = new HashSet<Integer>();\n        for(int i=0;i<primes.length;i++) {\n            ints.add(primes[i]);\n        }\n\n        for(int i=1;i<primes.length;i++) {\n            ints.remove(primes[i] + primes[i-1]+1);\n        }\n\n        boolean res = primes.length - ints.size() >= K;\n        System.out.print(res?\"YES\":\"NO\");\n        \n    }\n", "complexity": "linear"}
{"code": "public static void main(String []  args){\n\nArrayList<Integer> numb=new ArrayList<Integer>();\nScanner br1 = new Scanner(System.in);\nint n=br1.nextInt();\nint steps=br1.nextInt();\n//if(n>2)numb.add(2);\nif(n>=3)numb.add(3);\nfor(int j=4;j<=n;j++){\nif(chekprime(j)==0){\n\nnumb.add(j);\n//System.out.println(j);\n}\n\n}\nint counter =0;\nfor(int give=0;give<numb.size();give++)\n{if(\"YES\".equals(sumup(numb, 2, numb.get(give)))){\n counter++;\n// System.out.println(numb.get(give)+\"ksjdfskldfgaskldfgasklfgaskldfgaklsfgasdklfgaskldfgaskldfgasdklfg\");\n }\n\n\n\n}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        //System.setIn(new FileInputStream(\"1\"));\n        in = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n        \n        int n = nextInt(), k = nextInt();\n        int[] primes = new int[n + 1];\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 0) {\n                primes[i] = 1;\n                for (int j = i * 2; j <= n; j += i)\n                    primes[j] = 2;\n            }\n        }\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        HashSet<Integer> p = new HashSet<Integer>(), v = new HashSet<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 1) {\n                res.add(i);\n                p.add(i);\n            }\n        }\n        int c = 0;\n        if (res.size() >= 3) {\n            for (int i = 2; i < res.size(); i++) {\n                int zz = res.get(i - 2) + res.get(i - 1) + 1;\n                if (p.contains(zz))\n                    v.add(zz);\n            }\n            c = v.size();\n        }\n        if (c >= k) {\n            out.println(\"YES\");\n        } else {\n            out.println(\"NO\");\n        }\n        in.close();\n        out.close();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tnew Solution().solve();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\t(new Noldbach()).main();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String [] args) throws IOException\n\t\tnew Thread(null, new A(), \"\", 1 << 20).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint k=sc.nextInt();\n\t\tboolean[] sieve=new boolean[1001];\n\t\tsieve[2]=false;\n\t\tArrayList<Integer> primes=new ArrayList<Integer>();\n\t\tfor(int x=2;x<1001;x++)\n\t\t\tif(!sieve[x])\n\t\t\t{\n\t\t\t\tprimes.add(x);\n\t\t\t\tfor(int y=x;y<1001;y+=x)\n\t\t\t\t\tsieve[y]=true;\n\t\t\t}\n\t\tint sum=0;\n\t\tfor(int x=2;x<=n;x++)\n\t\t{\n\t\t\tif(primes.contains(x))\n\t\t\t{\n\t\t\tint need=x-1;\n\t\t\tfor(int y=0;y<primes.size()-1;y++)\n\t\t\t{\n\t\t\t\tif(primes.get(y)+primes.get(y+1)==need)\n\t\t\t\t{\n\t\t\t\t\tsum++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\tif(sum==k)break;\n\t\t}\n\t\tif(sum==k)System.out.println(\"YES\");\n\t\telse System.out.println(\"NO\");\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t(new Thread(new Solution())).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        try{\n            Locale.setDefault(Locale.US);\n        } catch (Exception e)\n        {\n            \n        }\n        new Thread(new Main()).start();\n        //new Thread(null, new Main(), \"1\", 1<<25).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner lee = new Scanner(System.in);\t\n\n\t\tfor(int i=2; i*i<=MAX; i++)\n\t\t{\n\t\t    if(!P.get(i))\n\t\t    {\n\t\t    \tfor(int j=i+i; j<=MAX; j+=i)\n\t\t    \t\tP.set(j);\n\t\t    }\n\t\t}\n\t\t\n\t\tint n, k, c;\n\t\t\n\t\tn = lee.nextInt();\n\t\tk = lee.nextInt();\n\t\t\n\t\tc = 0;\n\t\t\n\t\tfor(int i=2; i<=n; i++)\n\t\t{\n\t\t\tif(Noldbach(i))\n\t\t\t\tc++;\n\t\t\t\n\t\t\tif(c == k)\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(c == k)\n\t\t\tSystem.out.println(\"YES\");\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new TaskA()).start();\n//\t\tnew Template().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t} catch (SecurityException e) {\n\t\t}\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tnew Main().run();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}.start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Scanner entrada = new Scanner (System.in);\n        int Primos []= {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,\n                71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,\n                151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,\n                233,239,\n                241,\n                251,\n                257,\n                263,\n                269,\n                271,\n                277,\n                281,\n                283,\n                293,\n                307,\n                311,\n                313,\n                317,\n                331,\n                337,\n                347,\n                349,\n                353,\n                359,\n                367,\n                373,\n                379,\n                383,\n                389,\n                397,\n                401,\n                409,\n                419,\n                421,\n                431,\n                433,\n                439,\n                443,\n                449,\n                457,\n                461,\n                463,\n                467,\n                479,\n                487,\n                491,\n                499,\n                503,\n                509,\n                521,\n                523,\n                541,\n                547,\n                557,\n                563,\n                569,\n                571,\n                577,\n                587,\n                593,\n                599,\n                601,\n                607,\n                613,\n                617,\n                619,\n                631,\n                641,\n                643,\n                647,\n                653,\n                659,\n                661,\n                673,\n                677,\n                683,\n                691,\n                701,\n                709,\n                719,\n                727,\n                733,\n                739,\n                743,\n                751,\n                757,\n                761,\n                769,\n                773,\n                787,\n                797,\n                809,\n                811,\n                821,\n                823,\n                827,\n                829,\n                839,\n                853,\n                857,\n                859,\n                863,\n                877,\n                881,\n                883,\n                887,\n                907,\n                911,\n                919,\n                929,\n                937,\n                941,\n                947,\n                953,\n                967,\n                971,\n                977,\n                983,\n                991,\n                997\n                };\n        boolean sw=true;\n        int Indices [] = new int [Primos.length];\n        int cantidad = 0;\n        for(int i=0;i<Primos.length-1 && sw;i++)\n        {\n            int suma=Primos[i]+Primos[i+1]+1;\n            int posicion = Arrays.binarySearch(Primos,suma);\n            if(posicion>-1)\n                Indices[posicion]=1;\n        }\n        while(entrada.hasNextInt())\n        {\n            int N = entrada.nextInt();\n            int K = entrada.nextInt();\n            int contador=0;\n            for(int i=0;Primos[i]<=N && i<Primos.length-1;i++)\n                contador+=Indices[i];\n            if(contador>=K)\n                System.out.println(\"YES\");\n            else\n                System.out.println(\"NO\");\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args){\n        new Thread(new A()).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new Scanner(System.in);\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\n\t\tboolean[] p = new boolean[n + 5];\n\t\tint[] pp = new int[n + 5];\n\t\tint ind = 0;\n\t\tArrays.fill(p, true);\n\t\tp[0] = false;\n\t\tp[1] = false;\n\t\tfor (int i = 2; i < n + 5; i++)\n\t\t\tif (p[i]) {\n\t\t\t\tpp[ind++] = i;\n\t\t\t\tfor (int j = 2*i; j < n + 5; j += i) p[j] = false;\n\t\t\t}\n//\t    for (int i = 0; i < 30; i++) if (p[i]) out.println(i);\n\t\t\n\t\tboolean[] b = new boolean[n + 1];\n\t\tfor (int i = 0; i < ind - 1; i++)\n\t\t\tif (pp[i] + pp[i + 1] + 1 <= n && p[pp[i] + pp[i + 1] + 1]) b[pp[i] + pp[i + 1] + 1] = true;\n\t\t\n\t\tint kol = 0;\n\t\tfor (int i = 2; i <= n; i++)\t\n\t\t\tif (b[i]) kol++;\n\n\t\tif (kol >= k) out.println(\"YES\");\n\t\telse out.println(\"NO\");\n\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args){\n\ttry{\n\t    BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));\n\t    String[] tmp=reader.readLine().split(\" \");\n\t    int n=Integer.parseInt(tmp[0]);\n\t    int k=Integer.parseInt(tmp[1]);\n\t    boolean[] m=getPrime(n);\n\t    ArrayList<Integer> prime=new ArrayList<Integer>();\n\t    for(int i=0;i<m.length;i++){\n\t\tif(m[i])prime.add(i);\n\t    }\n\t    int sum=0;\n\t    for(int i=2;i<=n;i++){\n\t\tif(m[i]){\n\t\t    for(int j=0;j<prime.size()-1;j++){\n\t\t\tif(i==prime.get(j)+prime.get(j+1)+1){\n\t\t\t    sum++;\n\t\t\t    break;\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t    if(sum>=k){\n\t\tSystem.out.println(\"YES\");\n\t    }else{\n\t\tSystem.out.println(\"NO\");\n\t    }\n\t}catch(IOException e){\n\t    e.printStackTrace();\n\t}\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args){\n        Locale.setDefault(Locale.US);\n        new A().exe();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Problem17A().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Solution();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(new ProblemaNoldbaha()).start();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main (String[] args) throws IOException {\n        BitSet b = new BitSet(1001);\n        BitSet p = primes(1001);\n        for (int i = 0; i < ps.length - 1; i++) {\n            b.set(ps[i] + ps[i+1] + 1);\n        }\n        int n = sc.nextInt(), k = sc.nextInt();\n        for (int x = 0; x <= n; x++) {\n            if (b.get(x) && p.get(x)) k--;\n        }\n        System.out.println(k > 0 ? \"NO\" : \"YES\");\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists()) {\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t\t}\n\t\t} catch (SecurityException e) {\n\t\t}\n\t\t\n\t\tnew Main().run();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Naldbah().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tScanner sc = new Scanner(System.in);\n                int n = sc.nextInt(), k = sc.nextInt(), kol = 0, prev;\n                boolean ok;\n                ArrayList<Integer> al = new ArrayList<Integer>();\n                al.add(2);\n                prev = 2;\n                for(int i=3;i<=n;i+=2)\n                {\n                \tok = true;\n                \tfor(Integer x: al) \n                \tif (i%x == 0)\n                \t{\n                \t\tok = false;\n                \t\tbreak;\n                \t}\n                \tif (ok) \n                \t{\n                \t\tfor(Integer x: al)\n                \t\tif (ok) \n                \t\t{\n                \t\t\tprev = x; \n                \t\t\tok = false;\n                \t\t} else\n                \t\t{\n\t                \t\tif (x + prev + 1 == i) \n\t                \t\t{\n\t                \t\t\tkol++;\n\t                \t\t\tbreak;\n\t                \t\t}\n\t                \t\tif (x + prev + 1 > i) break;\n\t                \t\tprev = x;\n                \t\t}\n                \t\tal.add(i);\n                \t}\n                }\n                if (kol >= k) System.out.print(\"YES\"); else System.out.print(\"NO\");\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint k = scan.nextInt()-1;\n\t\tPrimeGen p = new PrimeGen(n);\n\t\tList<Integer> prims = new ArrayList<Integer>();\n\t\tfor(int i = 2; i <= n; i++){\n\t\t\tif(p.isPrime(i)>0){\n\t\t\t\tprims.add(i);\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < prims.size() - 1; i++){\n\t\t\tint c = prims.get(i) + prims.get(i+1) + 1;\n\t\t\tif(c <= n && p.isPrime(c)>0){\n\t\t\t\tsum ++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum>=k?\"YES\":\"NO\");\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        ProblemA f = new ProblemA();\n        f.solve();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String [] args) throws Exception {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\t\n\t\tfor (int i=0;i<prime.length-1;i++) {\n\t\t\tif ((prime[i]+prime[i+1]+1) > n || k == 0)\n\t\t\t\tbreak;\n\t\t\tif (isPrime(prime[i]+prime[i+1]+1))\n\t\t\t\tk--;\n\t\t}\n\t\t\n\t\tif (k == 0)\n\t\t\toutnl(\"YES\");\n\t\telse\n\t\t\toutnl(\"NO\");\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint k=sc.nextInt();\n\t\tboolean[] sieve=new boolean[1001];\n\t\tsieve[2]=false;\n\t\tArrayList<Integer> primes=new ArrayList<Integer>();\n\t\tfor(int x=2;x<1001;x++)\n\t\t\tif(!sieve[x])\n\t\t\t{\n\t\t\t\tprimes.add(x);\n\t\t\t\tfor(int y=x;y<1001;y+=x)\n\t\t\t\t\tsieve[y]=true;\n\t\t\t}\n\t\tint sum=0;\n\t\tfor(int x=2;x<=n;x++)\n\t\t{\n\t\t\tif(primes.contains(x))\n\t\t\t{\n\t\t\tint need=x-1;\n\t\t\tfor(int y=0;y<primes.size()-1;y++)\n\t\t\t{\n\t\t\t\tif(primes.get(y)+primes.get(y+1)==need)\n\t\t\t\t{\n\t\t\t\t\tsum++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\tif(sum==k)break;\n\t\t}\n\t\tif(sum==k)System.out.println(\"YES\");\n\t\telse System.out.println(\"NO\");\n\t\t\n\t}\n", "complexity": "linear"}
{"code": "public static void main(String[] args) throws IOException {       \n   new Thread(new Main()).start();\n//  new Main().run();\n}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s = new String(in.readLine());\n        String[] t=s.split(\" \");\n        int n = Integer.parseInt(t[0]);\n        int k = Integer.parseInt(t[1]);\n        boolean[] prime=new boolean[n+1];\n        for (int i=2;i<Math.sqrt(n);i++) {\n        \tfor (int j=i+i;j<=n;j=j+i) {\n        \t\tprime[j]=true;\n        \t}\n        }\n        int size=0;\n        for (int i=2;i<=n;i++) {\n        \tif (!prime[i]) {\n        \t\tsize++;\n        \t}\n        }\n        int[] pn=new int[size];\n        int index=0;\n        for (int i=2;i<=n;i++) {\n        \tif (!prime[i]) {\n        \t\tpn[index]=i;\n        \t\tindex++;\n        \t}        \t\n        }\n        for (int i=2;i<size;i++) {\n        \tfor (int j=0;j<i;j++) {\n        \t\tif (pn[i]==pn[j]+pn[j+1]+1) {\n//       \t\t\tSystem.out.println(pn[i]+\"=\"+pn[j]+\"+\"+pn[j+1]+\"+1\");\n        \t\t\tk--;\n        \t\t}\n        \t}\n        }\n        if (k<=0) {\n        \tSystem.out.println(\"YES\");\n        } else {\n        \tSystem.out.println(\"NO\");\n        }\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tint n = nextInt(), k = nextInt();\n\t\tint MAX = n, nprimes = 0;\n\t\tint[] primes = new int[MAX];\n\t\tboolean[] isPrime = new boolean[MAX+1];\n\t\tArrays.fill(isPrime, true);\n\t\tisPrime[0] = false;\n\t\tisPrime[1] = false;\n\t\tfor (int i = 2; i <= MAX; i++) if (isPrime[i]) {\n\t\t\tprimes[nprimes++] = i;\n\t\t\tfor (int j = i + i; j <= MAX; j += i) isPrime[j] = false;\n\t\t}\n\t\tprimes[nprimes] = Integer.MAX_VALUE;\n\t\t\n\t\tHashSet<Integer> h = new HashSet<Integer>();\n\t\tfor (int i = 1; i < nprimes; i++) {\n\t\t\tint x = primes[i-1] + primes[i] + 1;\n\t\t\tif (x > n) break;\n\t\t\tif (isPrime[x]) h.add(x);\n\t\t}\n\t\t\n\t\tout.println(h.size() >= k ? \"YES\" : \"NO\");\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint k = scan.nextInt()-1;\n\t\tPrimeGen p = new PrimeGen(n);\n\t\tList<Integer> prims = new ArrayList<Integer>();\n\t\tfor(int i = 2; i <= n; i++){\n\t\t\tif(p.isPrime(i)>0){\n\t\t\t\tprims.add(i);\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < prims.size() - 1; i++){\n\t\t\tint c = prims.get(i) + prims.get(i+1) + 1;\n\t\t\tif(c <= n && p.isPrime(c)>0){\n\t\t\t\tsum ++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum>=k?\"YES\":\"NO\");\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Solution();\n\t}\n", "complexity": "linear"}
{"code": "  public static void main(String args[]) throws Exception \n   \n   new Main().work();\n  } \n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tnew Beta17PA().solve();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n        (new Thread(new Solution())).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main( String[] args )\n\t\tint n = in.nextInt(), k = in.nextInt(), count = 0;\n\t\tboolean[] isP = new boolean[n+1];\n\t\tfor( int i = 2; i <= n; i++ ) isP[i] = true;\n\t\tArrayList<Integer> primes = new ArrayList<Integer>();\n\t\tfor( int i = 2; i <= n; i++ ) if( isP[i] )\n\t\t{\n\t\t\tprimes.add(i);\n\t\t\tif( i <= Math.sqrt(n) ) for( int j = 2*i; j <= n; j += i ) isP[j] = false;\n\t\t}\n\t\tfor( int i = 0; i < primes.size()-1; i++ )\n\t\t{\n\t\t\tint sum = primes.get(i)+primes.get(i+1)+1;\n\t\t\tif( sum<=n && isP[sum] ) count++;\n\t\t}\n\t\tif( count>=k ) System.out.println( \"YES\" );\n\t\telse System.out.println( \"NO\" );\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tadj = new ArrayList[n];\n\t\tfor (int i = 0; i < adj.length; ++i) {\n\t\t\tadj[i] = new ArrayList<>();\n\t\t}\n\t\tfor (int i = 1; i < n; ++i) {\n\t\t\tint p = sc.nextInt()-1;\n\t\t\tadj[p].add(i);\n\t\t\tadj[i].add(p);\n\t\t}\n\t\tnum = new int[n+1];\n\t\tdfs(0, -1);\n\t\tfor (int i = 1; i < num.length; ++i) {\n\t\t\tnum[i] += num[i-1];\n\t\t}\n\t\tint cur = 1;\n\t\tfor (int i = 0; i < num.length; ++i) {\n\t\t\twhile(cur <= num[i]){\n\t\t\t\tout.print(i + \" \");\n\t\t\t\t++cur;\n\t\t\t}\t\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception\n    \tFastReader in=new FastReader();\n    \tPrintWriter pw=new PrintWriter(System.out);\n    \tint n=in.nextInt();\n    \tlong ans=0;\n    \tfor(int i=2;2*i<=n;i++)\n    \t{\n    \t\tans+=i*(n/i-1);\n    \t}\n    \tans*=4;\n    \tpw.print(ans);\n    \tpw.flush();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tString n = br.readLine();\n\t\tint k = Integer.parseInt(br.readLine());\n\t\tint l = n.length();\n\t\t\n\t\tif(k == 0) {\n\t\t\tSystem.out.println(1);\n\t\t}else {\n\t\t\tint max = 1000;\n\t\t\tif (l <= 10) {\n\t\t\t\tmax = Integer.min(1000, Integer.parseInt(n, 2));\n\t\t\t}\n\n\t\t\tint[] steps = new int[max + 1];\n\t\t\t\t\t\n\t\t\tfor (int i = 2; i <= max; i++) {\n\t\t\t\tint ones = numberOfOnes(i);\n\t\t\t\tsteps[i] = 1 + steps[ones];\n\t\t\t}\n\n\t\t\tif (l <= 10) {\n\t\t\t\tint ans = 0;\n\t\t\t\tfor (int i = 1; i <= max; i++) {\n\t\t\t\t\tif (steps[i] == k) {\n\t\t\t\t\t\tans++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(ans);\n\t\t\t} else {\n\t\t\t\tint[][] C = binomial(max);\n\n\t\t\t\tint ans = 0;\n\t\t\t\tint count = 0;\n\n\t\t\t\tfor (int i = 0; i < l; i++) {\n\t\t\t\t\tif (n.charAt(i) == '1') {\n\t\t\t\t\t\tfor (int j = count; j < max; j++) {\n\t\t\t\t\t\t\tif (steps[j] == k - 1) {\n\t\t\t\t\t\t\t\tans = (ans + C[l - i - 1][j - count]) % mod;\n\t\t\t\t\t\t\t\tif (i == 0 && k == 1) {\n\t\t\t\t\t\t\t\t\tans = (ans + mod - 1) % mod;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tint ones = 0;\n\t\t\t\tfor (int i = 0; i < l; i++) {\n\t\t\t\t\tif (n.charAt(i) == '1') {\n\t\t\t\t\t\tones++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (steps[ones] == k-1) {\n\t\t\t\t\tans = (ans + 1) % mod;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(ans);\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "       public static void main(String args[]){\n              Scanner sc = new Scanner(System.in);\n              int n = sc.nextInt();\n              int ans = 0;\n              for(int i = 1; i <= n; i++){\n                     ans += ((i*2) <= n) ? i : n-i+1;\n              }\n              System.out.println(ans);\n       }\n", "complexity": "linear"}
{"code": "  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n\t int[][] x = new int [200010][10];\n     String a = sc.nextLine(); \n     String b = sc.nextLine(); \n \t  int n = a.length();\n\t  int m = b.length();\n       for (int i = 1; i <= m; i++) {\n         for (int j = 0; j < 2; j++) {\n           x[i][j] = x[i - 1][j];\n         }\n         ++x[i][b.charAt(i - 1) - '0'];\n       }\n       long res = 0;\n        for (int i = 0, c; i < n; i++) {\n          c = a.charAt(i) - '0';\n           for (int j = 0; j < 2; j++) {\n             res += Math.abs(c - j) * (x[m - n + i + 1][j] - x[i][j]);\n           }\n        }\n         System.out.println(res);\n  }\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new TaskB(),\"TaskB\",1<<26).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString  a = sc.nextLine(), b = sc.nextLine();\n\t\tlong sum = 0;\n\t\tint frequency[][] = new int[200010][2];\n\t\tfor (int i = 1; i <= b.length(); i++) {\n\t        for (int j = 0; j < 2; j++)\n\t            frequency[i][j] = frequency[i - 1][j];\n\t        frequency[i][Character.getNumericValue((b.charAt(i - 1)))]++;\n\t    }\n\t   \n\t    for (int i = 0; i < a.length(); i++) {\n\t        int c = Character.getNumericValue(a.charAt(i));\n\t        for (int j = 0; j < 2; j++) {\n\t        \tint flippingTerm = Math.abs(c - j);\n\t        \tint endOfWindowValue = frequency[b.length() - a.length() + i + 1][j];\n\t        \tint startOfWindowOffset = frequency[i][j];\n\t            sum += flippingTerm * (endOfWindowValue - startOfWindowOffset);\n\t        }\n\t    }\n\t\tSystem.out.println(sum);\n\t\tsc.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\t// your code goes here\n\t\tScanner sc=new Scanner(System.in);\n\t\tString a=sc.next();\n\t\tString b=sc.next();\n\t\tint m=a.length();\n\t\tint n=b.length();\n\t\tint[] zero=new int[n];\n\t\tint[] one=new int[n];\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(i==0)\n\t\t\t{\n\t\t\t\tif(b.charAt(i)=='0')\n\t\t\t\tzero[i]++;\n\t\t\t\telse\n\t\t\t\tone[i]++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tzero[i]=zero[i-1];\n\t\t\t\tone[i]=one[i-1];\n\t\t\t\tif(b.charAt(i)=='0')\n\t\t\t\tzero[i]++;\n\t\t\t\telse\n\t\t\t\tone[i]++;\n\t\t    }\n\t\t}\n\t\t\n\n\t\tlong res=0;\n\t\tfor(int i=0;i<m;i++)\n\t\t{\n\t\tint x=n-m+i;\n\t\tif(a.charAt(i)=='0')\n\t\tres+=one[x];\n\t\telse\n\t\tres+=zero[x];\n\t\tif(i>0)\n\t\t{\n\t\t\tif(a.charAt(i)=='0')\n\t\t\tres-=one[i-1];\n\t\t\telse\n\t\t\tres-=zero[i-1];\n\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws IOException {\n        if (args.length > 0) {\n            setIn(new FileInputStream(args[0] + \".inp\"));\n            setOut(new PrintStream(args[0] + \".out\"));\n        }\n        Main solver = new Main();\n        solver.out.flush();  //  could be replace with a method, but nah, this is just competitive programming :p\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint n = i(), k = i(), cnt = 0;\n\t\tint[] a = new int[n+1];\n\t\tfor (int i=1; i<=n; i++){\n\t\t\ta[i] = i();\n\t\t\tif (e[a[i]] == 0)\n\t\t\t\tcnt++;\n\t\t\te[a[i]]++;\n\t\t}\n\t\tif (k > cnt){\n\t\t\tpw.println(\"-1 -1\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif (cnt == n){\n\t\t\tpw.print(\"1 \" + k);\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif (k == 1){\n\t\t\tpw.println(\"1 1\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tArrays.fill(e, 0);\n\t\tint i = 1, j = 0, unik = 0, start = 0, end = 0, len = n, m = 0;\n\n\n\t\tif (e[a[i]] == 0){\n\t\t\tunik++;\n\t\t}\n\t\te[a[i]]++;\n\t\twhile (i+1<=n && a[i+1] == a[i]){\n\t\t\ti = i+1;\n\t\t}\t\t\n\t\t\n\t\tj = i+1;\n\t\t\n\t\twhile (j <= n){\n\t\t\tif (e[a[j]] == 0){\n\t\t\t\tunik++;\n\t\t\t\tif (unik == k){\n\t\t\t\t\twhile (e[a[i]] > 1){\n\t\t\t\t\t\te[a[i]]--;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\twhile (i+1<=n && a[i+1] == a[i]){\n\t\t\t\t\t\t\ti = i+1;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\tm = j - i + 1;\n\t\t\t\t\tif (m < len){\n\t\t\t\t\t\tstart = i; end = j; len = m;\n\t\t\t\t\t\tif (m == k)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\twhile (i <=n && unik == k){\n\t\t\t\t\t\te[a[i]]--;\n\t\t\t\t\t\tif (e[a[i]] == 0)\n\t\t\t\t\t\t\tunik--;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (i+1<=n && a[i+1] == a[i]){\n\t\t\t\t\t\t\ti = i+1;\n\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\te[a[j]]++;\n\t\t\twhile (j+1<=n && a[j+1] == a[j]){\n\t\t\t\tj++;\n\t\t\t}\t\t\t\n\t\t\tj++;\n\n\t\t}\n\t\tpw.println(start + \" \" + end);\t\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\t/*\n\t\tif ( k == 1 ){ \n\t\t\tSystem.out.println(\"1 1\"); return;\n\t\t}\n\t\t*/\n\t\tint last[] = new int[100001];\n\t\tint distinct = 0;\n\t\tfor ( int i = 0 ; i < n ; ++i ) {\n\t\t\tint t = in.nextInt();\n\t\t\tif ( last[t] == 0 ) ++distinct;\n\t\t\tlast[t] = i+1;\n\t\t\tif ( distinct == k ) {\n\t\t\t\tint min = i+1;\n\t\t\t\tfor ( int j = 0 ; j < last.length ; ++j ) {\n\t\t\t\t\tif ( last[j] != 0 ) min = min>last[j]?last[j]:min;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(min+\" \"+(i+1)); return;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"-1 -1\"); \n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tst = new StringTokenizer(\"\");\n\t\tout = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tint n = nextInt();\n\t\tint k = nextInt();\n\t\tint [] a = new int [n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tset.add(a[i]);\n\t\t\tif(set.size()==k){\n\t\t\t\tSet<Integer> set2 = new HashSet<Integer>();\n\t\t\t\tfor (int j = i; j >= 0; j--) {\n\t\t\t\t\tset2.add(a[j]);\n\t\t\t\t\tif(set2.size()==k){\n\t\t\t\t\t\tout.print((j+1)+\" \"+(i+1));\n\t\t\t\t\t\tout.close();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.print(\"-1 -1\");\t\t\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Array().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew B().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] arr = in.readLine().split(\" \");\n\t\tint n = i(arr[0]);\n\t\tint k = i(arr[1]);\n\t\tint[] A = new int[n];\n\t\tarr = in.readLine().split(\" \");\n\t\tfor(int i=0; i<n; i++)\n\t\t\tA[i] = i(arr[i]);\n\t\t\n\t\tint st = 0;\n\t\tint cnt = 0;\n\t\tint[] cnts = new int[100*100*10+1];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tcnts[A[i]]++;\n\t\t\tif(cnts[A[i]] == 1) cnt++;\n\t\t\telse while(cnts[A[st]] > 1) {\n\t\t\t\tcnts[A[st]]--;\n\t\t\t\tst++;\n\t\t\t}\n\t\t\tif(cnt == k) {\n\t\t\t\tSystem.out.println((st+1)+\" \"+(i+1));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(-1+\" \"+-1);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int distinct = sc.nextInt();\n        HashMap<Integer, Integer> set = new HashMap<Integer, Integer>();\n        int[] ar = new int[n];\n        for (int i = 0; i < n; i++) {\n            ar[i] = sc.nextInt();\n            if (set.containsKey(ar[i])) {\n                set.put(ar[i], set.get(ar[i])+1);\n            } else {\n                set.put(ar[i], 1);\n            }\n            if (set.size() == distinct) {\n                int st = 0;\n                for (int j = 0; j < i; j++) {\n                    st=j;\n                    if (set.get(ar[j]) > 1) {\n                        set.put(ar[j], set.get(ar[j]) - 1);\n                    } else {\n                        break;\n                    }\n                }\n                System.out.println((st + 1) + \" \" + (i + 1));\n                return;\n            }\n        }\n        System.out.println(\"-1 -1\");\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scr = new Scanner(System.in);\n\t\tint n = scr.nextInt();\n\t\tint k = scr.nextInt();\n\t\t\n\t\tint[] a = new int[n+1];\t\t\n\t\tint[] d = new int[100001];\n\t\t\n\t\tint tk = 0;\n\t\tint l = 1;\n\t\tint r = -1;\n\t\tboolean find = false;\n\t\tfor (int i = 1; i <= n; i++){\n\t\t\ta[i] = scr.nextInt();\n\t\t\tif (d[a[i]] == 0){\n\t\t\t\td[a[i]] = 1;\n\t\t\t\ttk++;\n\t\t\t\tif ((!find) && (tk == k)){\n\t\t\t\t\tfind = true;\n\t\t\t\t\tr = i;\n\t\t\t\t} // if \n\t\t\t} // if\n\t\t} // for\n\t\t\n\t\t\n\t\tif (r > 0) {\n\t\t\tint[] cd = new int[100001];\n\t\t\ttk = 0;\n\t\t\tfind = false;\n\t\t\tfor (int j = r; j >= l; j--){\n\t\t\t\tif(cd[a[j]] == 0){\n\t\t\t\t\tcd[a[j]] = 1;\n\t\t\t\t\ttk++;\n\t\t\t\t\tif ((!find) && (tk == k)){\n\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\tl = j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // if\n\t\t\t\t} // if\n\t\t\t} // for\n\t\t\tSystem.out.println(l + \" \" + r);\n\t\t} // if\n\t\telse {\n\t\t\tSystem.out.println(\"-1 -1\");\n\t\t}\t\t\t\n\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew B().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\ttime = System.currentTimeMillis();\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tn = Integer.parseInt(st.nextToken());\n\t\tk = Integer.parseInt(st.nextToken());\n\t\ta = new int[n];\n\t\tst = new StringTokenizer(br.readLine());\n\t\tfor(int i = 0; i < n; i++) \n\t\t\ta[i] = Integer.parseInt(st.nextToken());\n\t\tint end = end();\n\t\tif(end < 0) System.out.println(\"-1 -1\");\n\t\telse System.out.println((start(end) + 1) + \" \" + (end + 1));\n\t\tbr.close();\n\t\tSystem.exit(0);\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        int n = nextInt();\n        int k = nextInt();\n        int[] a = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = nextInt();\n        }\n        Set<Integer> set_1 = new HashSet<Integer>();\n        for (int i = 1; i <= n; i++) {\n            set_1.add(a[i]);\n            if (set_1.size() == k) {\n                Set<Integer> set_2 = new HashSet<Integer>();\n                for (int j = i; j >= 1; j--) {\n                    set_2.add(a[j]);\n                    if (set_2.size() == k) {\n                        out.print(j + \" \" + i);\n                        out.close();\n                        return;\n                    }\n                }\n            }\n        }\n        out.print(\"-1 -1\");\n        out.close();\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        new B().solve();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        HashSet<Integer> set = new HashSet<>();\n        int n = nextInt();\n        int k = nextInt();\n        int[] m = new int[n];\n        int[] d = new int[n];\n        for(int i = 0;i < n;i++) m[i] = nextInt();\n        int l = -1;\n        int r = -1;\n        for(int i = 0;i < n;i++) {\n            set.add(m[i]);\n            d[i] = set.size();\n            if(d[i] == k) {\n                r = i;\n                break;\n            }\n        }\n        if(r == -1) {\n            out.println(\"-1 -1\");\n            return;\n        }\n\n        for(int i = r;i >= 0;i--) {\n            set.remove(m[i]);\n            if(set.size() == 0) {\n                l = i;\n                break;\n            }\n        }\n        out.println((l+1)+\" \"+(r+1));\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        int n = nextInt();\n        int k = nextInt();\n        int[] a = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = nextInt();\n        }\n        Set<Integer> set_1 = new HashSet<Integer>();\n        for (int i = 1; i <= n; i++) {\n            set_1.add(a[i]);\n            if (set_1.size() == k) {\n                Set<Integer> set_2 = new HashSet<Integer>();\n                for (int j = i; j >= 1; j--) {\n                    set_2.add(a[j]);\n                    if (set_2.size() == k) {\n                        out.print(j + \" \" + i);\n                        out.close();\n                        return;\n                    }\n                }\n            }\n        }\n        out.print(\"-1 -1\");\n        out.close();\n\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new B().run();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a[] = new int[100004];\n        int b[] = new int[100004];\n        int n, m, ans = 0, dau, cuoi=-1;\n        n = sc.nextInt();\n        m = sc.nextInt();\n        for(int i=0;i<100004;i++) a[i] = 0;\n        for(int i=0;i<n;i++){\n            b[i] = sc.nextInt();\n            if(a[b[i]]==0){\n                a[b[i]] = 1;\n                ans++;\n                if(ans==m){\n                    cuoi = i+1;\n                    break;\n                }\n            }\n        }\n        for(int i=cuoi-1;i>=00;i--){\n            if(a[b[i]]==1){\n                a[b[i]] = 0;\n                ans--;\n                if(ans==0){\n                    System.out.println((i+1)+\" \"+cuoi);\n                    System.exit(0);\n                }\n            }\n        }\n        System.out.println(\"-1 -1\");\n    }\n", "complexity": "linear"}
{"code": "            public static void main(String[] args) throws IOException {\n                try {\n                    \n                       int n = nextInt();\n                       int k = nextInt();\n                       int[] a = new int[n];\n                       int[] d = new int[n];\n                       int[] dr = new int[n];\n                       boolean used[] = new boolean[100001];\n                       a[0] = nextInt();\n                       used[ a[0] ] = true;\n                       d[0] = 1;\n                       for(int i = 1; i < n; i++)\n                       {\n                           a[i] = nextInt();\n                           if(!used[ a[i] ])\n                           {\n                               used[ a[i] ] = true;\n                               d[i] = d[i - 1] + 1;\n                           }\n                           else\n                           {\n                               d[i] = d[i - 1];\n                           }\n                       }\n                       Arrays.fill(used, false);\n\n                       \n                       int r = Arrays.binarySearch(d, k);\n                       \n                       if(r < 0)\n                       {\n                           pw.println(\"-1 -1\");\n                           return;\n                       }\n        \n                       while( r > 0 && d[r] == d[r - 1] )\n                           r--;\n                       \n                       used[ a[r] ] = true;\n                       dr[r] = 1;\n                       for(int i = r - 1; i >= 0; i--)\n                       {\n                           if(!used[ a[i] ])\n                           {\n                               used[ a[i] ] = true;\n                               dr[i] = dr[i + 1] + 1;\n                           }\n                           else\n                           {\n                               dr[i] = dr[i + 1];\n                           }\n                       }\n        \n                       \n                       \n                       int l = 0;\n        \n                       while(l < n - 1 && dr[l] == dr[l + 1] && r - l >= k)\n                           l++;\n                       \n                       \n                       pw.println(l + 1 + \" \" + (r + 1));\n                }\n                finally {\n                    pw.close();\n                }\n            }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws NumberFormatException,\n        Solver solver = new Solver();\n        solver.open();\n        long time = System.currentTimeMillis();\n        solver.solve();\n        if (!\"true\".equals(System.getProperty(\"ONLINE_JUDGE\"))) {\n            System.out.println(\"Spent time: \"\n                    + (System.currentTimeMillis() - time));\n        }\n        solver.close();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int k = scan.nextInt();\n        int res = -1;\n        int[] arr = new int[n];\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = scan.nextInt();\n        }\n        BitSet bits = new BitSet();\n        int count = 0;\n        int end = -1;\n        for (int i = 0; i < arr.length; i++) {\n            if (!bits.get(arr[i])) {\n                bits.set(arr[i]);\n                count++;\n                if (count == k) {\n                    end = i;\n                    break;\n                }\n            }\n        }\n        if (end == -1) {\n            System.out.print(\"-1 -1\");\n            return;\n        }\n        bits = new BitSet();\n        count = 0;\n        int start = end;\n        while (start >= 0) {\n            if (!bits.get(arr[start])) {\n                bits.set(arr[start]);\n                count++;\n                if (count == k) {\n                    break;\n                }\n            }\n            start--;\n        }\n        System.out.println((start + 1) + \" \" + (end + 1));\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String []args) throws IOException{\n\t\tPrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tMyReader reader = new MyReader(new InputStreamReader(System.in));\n\t\tint n = reader.nextInt();\n\t\tint k = reader.nextInt();\n\t\tint []a = new int[n];\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\ta[i] = reader.nextInt();\n\t\tint j = 0;\n\t\tHashMap<Integer,Integer> map = new HashMap<>();\n\t\tfor (int i = 0; i < n; ++i){\n\t\t\tif (map.containsKey(a[i]))\n\t\t\t\tmap.put(a[i], map.get(a[i])+1);\n\t\t\telse{\n\t\t\t\tmap.put(a[i], 1);\n\t\t\t\tif (map.size()==k) { j = i+1; break; }\n\t\t\t}\n\t\t}\n\t\tif (map.size()<k){\n\t\t\tSystem.out.println(\"-1 -1\");\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 0; i < n; ++i){\n\t\t\tif (map.get(a[i])==1){\n\t\t\t\tSystem.out.println(i+1 + \" \" + j);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmap.put(a[i], map.get(a[i])-1);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String args[]) throws IOException{\n\t\tScanner sc=new Scanner();\n\t\tN=sc.nextInt();\n\t\tK=sc.nextInt();\n\t\tfor(int i=0;i<N;i++)\n\t\t\tarray[i]=sc.nextInt();\n\t\tTreeMap<Integer,Integer> map=new TreeMap<Integer,Integer>();\n\t\tboolean flag=false;\n\t\tfor(int i=0;i<N;i++){\n\t\t\tif (!map.containsKey(array[i])){\n\t\t\t\tmap.put(array[i], i);\n\t\t\t\tif (map.size()==K){\n\t\t\t\t\tflag=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tmap.put(array[i], i);\n\t\t}\n\t\tif (!flag)\n\t\t\tSystem.out.println(\"-1 -1\");\n\t\telse{\n\t\t\tSet<Integer> s=map.keySet();\n\t\t\tint l=Integer.MAX_VALUE;\n\t\t\tint r=Integer.MIN_VALUE;\n\t\t\tfor(int k: s){\n\t\t\t\tint tmp=map.get(k);\n\t\t\t\tl=Math.min(l, tmp);\n\t\t\t\tr=Math.max(r, tmp);\n\t\t\t}\n\t\t\tSystem.out.println((l+1)+\" \"+(r+1));\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        if (ONLINE_JUDGE){\n            in = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n        }else{\n            in = new BufferedReader(new FileReader(\"input.txt\"));\n            out = new PrintWriter(\"output.txt\");\n        }\n        new CodeForces().runIt();\n        out.flush();\n        out.close();\n        return;\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new stub().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tParser p = new Parser(System.in);\n\t\tPrintWriter pw= new PrintWriter(System.out);\n\n\t\tint n = p.nextInt();\n\t\tint k = p.nextInt();\n\n\t\tint[] a = p.nextIntArray(n);\n\t\tint [] pos = new int[100001];\n\t\tArrays.fill(pos,-1);\n\t\tint cnt = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tint e = a[i];\n\t\t\tif( pos[e] == -1 ){\n\t\t\t\t++cnt;\n\t\t\t}\n\t\t\tpos[e] = i;\n\t\t\tif( cnt == k){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif( cnt < k){\n\t\t\tpw.println(\"-1 -1\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tint min = 1000000;\n\t\tint max = -1;\n\t\tfor(int i=0; i<100001; ++i){\n\t\t\tif(pos[i] != -1 && pos[i] < min ){\n\t\t\t\tmin = pos[i];\n\t\t\t}\n\t\t\tif( pos[i] > max){\n\t\t\t\tmax = pos[i];\n\t\t\t}\n\t\t}\n\t\t++min;\n\t\t++max;\n\n\t\tpw.println(min+\" \"+max);\n\t\tpw.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new B().run();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a[] = new int[100004];\n        int b[] = new int[100004];\n        int n, m, ans = 0, dau, cuoi=-1;\n        n = sc.nextInt();\n        m = sc.nextInt();\n        for(int i=0;i<100004;i++) a[i] = 0;\n        for(int i=0;i<n;i++){\n            b[i] = sc.nextInt();\n            if(a[b[i]]==0){\n                a[b[i]] = 1;\n                ans++;\n                if(ans==m){\n                    cuoi = i+1;\n                    break;\n                }\n            }\n        }\n        for(int i=cuoi-1;i>=00;i--){\n            if(a[b[i]]==1){\n                a[b[i]] = 0;\n                ans--;\n                if(ans==0){\n                    System.out.println((i+1)+\" \"+cuoi);\n                    System.exit(0);\n                }\n            }\n        }\n        System.out.println(\"-1 -1\");\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tStreamInputReader in = new StreamInputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        new CF224B().solve();\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        in = new Scanner(System.in);\n        int n = in.nextInt();\n        int k = in.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n        }\n        int i = 0;\n        while (i + 1 < n && a[i + 1] == a[0]) {\n            i++;\n        }\n        int left = i;\n        TreeMap<Integer, Integer> used = new TreeMap<Integer, Integer>();\n        for (; i < n; i++) {\n            put(used, a[i]);\n            if (used.size() == k) {\n                while (used.get(a[left]) > 1) {\n                    remove(used, a[left]);\n                    left++;\n                }\n                System.out.println(left + 1 + \" \" + (i + 1));\n                return;\n            }\n        }\n        System.out.println(\"-1 -1\");\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Thread(new Code()).start();\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException \n\t\tnew B();\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        nextLine(br);\n        int n = nextInt();\n        int k = nextInt();\n        int[] a = new int[n];\n        nextLine(br);\n        for (int i = 0; i < n; i++) a[i] = nextInt();\n        \n        int bp = 0, fp = 0, count = 0;\n        boolean good = false;\n        int[] mark = new int[100001];\n        for (fp = 0; fp < n; fp++)\n        {\n            if (mark[a[fp]] == 0)\n            {\n                count++;\n            }\n            mark[a[fp]]++;\n            if (count == k)\n            {\n                good = true;\n                break;\n            }\n        }\n        if (!good)\n        {\n            System.out.println(\"-1 -1\");\n            return;\n        }\n        for (bp = 0; bp < fp; bp++)\n        {\n            if (mark[a[bp]] > 1)\n            {\n                mark[a[bp]]--;\n            }\n            else break;\n        }\n        System.out.println((bp+1) + \" \" + (fp+1));\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputReader in = new InputReader();\n        int n = in.nextInt();\n        int k = in.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++)\n            a[i] = in.nextInt();\n        if (k > n) {\n            System.out.println(-1 + \" \" + -1);\n            return;\n        }\n        int[] v = new int[100010];\n        int cnt = 0;\n        for (int i = 0; i < k; i++) {\n            if (v[a[i]] == 0) {\n                cnt++;\n            }\n            v[a[i]]++;\n\n        }\n        int i = k;\n        while (cnt < k && i < n) {\n            if (v[a[i]] == 0) {\n                cnt++;\n            }\n            v[a[i]]++;\n            i++;\n        }\n        if (cnt != k) {\n            System.out.println(-1 + \" \" + -1);\n        } else {\n            int st = 0;\n            while (st < n && st < i && v[a[st]] > 1) {\n                v[a[st]]--;\n                st++;\n            }\n            System.out.println((st+1) + \" \" + (i));\n        }\n    }\n", "complexity": "linear"}
{"code": "public static void main(String[] args) {\n    Scanner sc=new Scanner(System.in);\n    int n=sc.nextInt();\n    int k=sc.nextInt();\n    int a[]=new int[n+1];\n    boolean used[]=new boolean[100009];\n    for (int i = 1; i <=n; i++) {\n        a[i]=sc.nextInt();\n    }\n    int cnt=0;\n    int id=0;\n    for (int i = 1; i <=n; i++) {\n        if(!used[a[i]]){\n            cnt++;\n        used[a[i]]=true;\n        }\n        if(cnt==k){\n            id=i;\n            break;\n        }\n    }\n    boolean x[]=new boolean[100005];\n    int y=0;\n    int id1=0;\n    if(id==0){\n        System.out.println(-1+\" \"+-1);\n            return;\n    }\n    for (int i =id; i >=1; i--) {\n        if(!x[a[i]]){\n            y++;\n            x[a[i]]=true;\n        }\n        if(y==k){\n            id1=i;\n            break;\n        }\n    }\n    System.out.println(id1+\" \"+id);\n}\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n//\t\tSystem.setIn(new FileInputStream(\"b.in\"));\n\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tString[] parts = bf.readLine().trim().split(\"[ ]+\");\n\t\tint N = Integer.parseInt(parts[0]);\n\t\tint K = Integer.parseInt(parts[1]);\n\t\t\n\t\tint[] nums = new int[N];\n\t\tint idx = 0;\n\t\t\n\t\tString line = bf.readLine();\n\t\tfor(int i = 0; i < line.length(); i++) {\n\t\t\tchar c = line.charAt(i);\n\t\t\tif(c == ' ') idx++;\n\t\t\telse {\n\t\t\t\tint d = c - '0';\n\t\t\t\tnums[idx] = 10 * nums[idx] + d;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint from = -1, to = -1;\n\t\tHashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tInteger q = count.get(nums[i]);\n\t\t\t\n\t\t\tif(q == null) count.put(nums[i], 1);\n\t\t\telse count.put(nums[i], q + 1);\n\t\t\t\n\t\t\tif(count.size() == K) {\n\t\t\t\tto = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(count.size() < K) {\n\t\t\tSystem.out.println(\"-1 -1\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor(from = 0; from <= to; from++) {\n\t\t\tInteger q = count.get(nums[from]);\n\t\t\t\n\t\t\tif(q == 1) count.remove(nums[from]);\n\t\t\telse count.put(nums[from], q - 1);\n\t\t\t\n\t\t\tif(count.size() < K) break;\n\t\t}\n\t\t\n\t\tSystem.out.println((from + 1) + \" \" + (to + 1));\n\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n, k;\n        n = nextInt();\n        k = nextInt();\n        HashSet<Integer> hs = new HashSet<Integer>();\n        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n\n        int[] ar = new int[n];\n        int ii = 0, jj = -1;\n        for (int i = 0; i < n; i++) {\n            ar[i] = nextInt();\n\n            Integer iii = hm.get(ar[i]);\n            if(iii!=null)\n            hm.put(ar[i], ++iii); else hm.put(ar[i], 1);\n            hs.add(ar[i]);\n            if (hs.size() == k) {\n                jj = i;\n                break;\n            }\n        }\n        if (jj == -1) {\n            System.out.println(-1 + \" \" + (-1));\n            System.exit(0);\n        }\n        for (int i = 0; i < ar.length; i++) {\n            Integer iii = hm.get(ar[i]);\n            if (iii != null && iii - 1 > 0) {\n                hm.put(ar[i], --iii);\n                ii++;\n            } else {\n                break;\n            }\n        }\n        System.out.println((ii+1) + \" \" + (jj+1));\n\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tInputReader myScanner = new InputReader();\n\t\tint n = myScanner.nextInt(), k = myScanner.nextInt();\n\t\tmyScanner.hasNext();\n\t\tint all[] = new int[n];\n\t\tboolean numbers[] = new boolean[100100];\n\t\tint diff[] = new int[n];\n\t\tall[0] = myScanner.nextInt();\n\t\tdiff[0] = 1;\n\t\tnumbers[all[0]] = true;\n\t\tint r = -1;\n\t\tif (k == 1)\n\t\t\tr = 1;\n\t\tfor (int i = 1; i < all.length; i++) {\n\t\t\tall[i] = myScanner.nextInt();\n\t\t\tdiff[i] = diff[i - 1];\n\t\t\tif (!numbers[all[i]]) {\n\t\t\t\tif (r == -1 && diff[i] + 1 == k)\n\t\t\t\t\tr = i + 1;\n\t\t\t\tnumbers[all[i]] = true;\n\t\t\t\tdiff[i]++;\n\t\t\t}\n\t\t}\n\t\tif (r == -1)\n\t\t\tSystem.out.println(-1 + \" \" + -1);\n\t\telse {\n\t\t\tnumbers = new boolean[100010];\n\t\t\tint l = 0, cnt = 1;\n\t\t\tnumbers[all[r - 1]] = true;\n\t\t\tif (k == 1)\n\t\t\t\tSystem.out.println(1 + \" \" + 1);\n\t\t\telse {\n\t\t\t\tfor (int i = r - 2; i >= 0; i--) {\n\t\t\t\t\tif (!numbers[all[i]]) {\n\t\t\t\t\t\tnumbers[all[i]] = true;\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t}\n\t\t\t\t\tif (cnt == k) {\n\t\t\t\t\t\tl = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(l + \" \" + r);\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) throws Exception {\n        Parserdoubt2333 s = new Parserdoubt2333(System.in);\n        \n        int n = s.nextInt();\n        int k = s.nextInt();\n        int a[] = new int[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = s.nextInt();\n            \n        }\n        \n        TreeMap<Integer, Integer> tree = new TreeMap<Integer,Integer>();\n        \n        int left = 0;\n        int right = 0;\n        \n        for (right = 0; right < a.length; right++) {\n            if(tree.containsKey(a[right]))\n                tree.put(a[right], tree.get(a[right]) + 1);\n            else \n                tree.put(a[right],1);\n            if(tree.size() == k)\n                break;\n        }\n        \n        if(tree.size() < k){\n            System.out.println(\"-1 -1\");\n            return ;\n        }\n//      System.out.println(right);\n        for (left = 0; left < a.length; left++) {\n            int val = tree.get(a[left]);\n            val--;\n            if(val > 0)\n                tree.put(a[left],val);\n            if(val == 0)\n                break;\n            \n        }\n        left++;\n        right++;\n        System.out.println(left + \" \"+right);\n    }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        \n        int n = s.nextInt();\n        int k = s.nextInt();\n        int[] nums = new int[100000 + 10];\n        \n        int first = -1, last = -1;\n        Set<Integer> dif = new TreeSet<Integer>();\n        \n        s.nextLine();\n        for (int i = 0; i < n; i++) {\n            nums[i] = s.nextInt();\n            dif.add(nums[i]);\n            if (dif.size() == k) {\n                last = i;\n                break;\n            }\n        }\n\n        dif.clear();\n\n        for (int i = last; i >= 0; i--) {\n            dif.add(nums[i]);\n            if (dif.size() == k) {\n                first = i;\n                break;\n            }\n        }\n        \n        if (last == -1)\n            System.out.print(\"-1 -1\");\n        else\n            System.out.print(Integer.toString(first + 1) + \" \"  + Integer.toString(last + 1));\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n//\t\tScanner scan = new Scanner(System.in);\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n  = Integer.parseInt(st.nextToken());\n\t\tint k  = Integer.parseInt(st.nextToken());\n\t\tst = new StringTokenizer(br.readLine());\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0 ; i  <n;i++)\n\t\t\ta[i] = Integer.parseInt(st.nextToken());\n\t\t\n\t\tint l = 0, r = 0;\n\t\tint[] t = new int[100001];\n\t\tint kk = 0;\n\t\tint min = 1 << 25 , ll =-1 , rr = -1;\n\t\twhile(r < n)\n\t\t{\n\t\t\tint x = a[r++];\n\t\t\tt[x]++;\n\t\t\tif(t[x] == 1)\n\t\t\t\tkk++;\n\t\t\twhile(r < n && kk < k)\n\t\t\t{\n\t\t\t\tx = a[r++];\n\t\t\t\tt[x]++;\n\t\t\t\tif(t[x] == 1)\n\t\t\t\t\tkk++;\n\t\t\t}\n\t\t\twhile(kk == k && l < r)\n\t\t\t{\n\t\t\t\tx = a[l];\n\t\t\t\tif(t[x] == 1)\n\t\t\t\t\tbreak;\n\t\t\t\tt[x]--;\n\t\t\t\tl++;\n\t\t\t}\n\t\t\tif(kk == k)\n\t\t\t{\n\t\t\t\tint m = r-l+1;\n\t\t\t\tif(m < min)\n\t\t\t\t{\n\t\t\t\t\tll = l+1;\n\t\t\t\t\trr = r;\n\t\t\t\t\tmin = m;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ll +\" \"+rr);\n\t}\n", "complexity": "linear"}
{"code": "public static void main(String[] args)\n    Scanner input = new Scanner(System.in);\n    int n = input.nextInt(), k = input.nextInt();\n    int[] data = new int[n];\n    for(int i = 0; i<n; i++)\n        data[i] = input.nextInt();\n    int[] freq = new int[100001];\n    int count = 0;\n    for(int i = 0; i<n; i++)\n    {\n        if(freq[data[i]] == 0)\n            count++;\n        freq[data[i]]++;\n    }\n    if(count<k)\n        System.out.println(\"-1 -1\");\n    \n    else\n    {\n        int start = 0;\n        for(int i = 0; i<n; i++)\n        {\n            //System.out.println(i + \" \" + count + \" \" + freq[data[i]]);\n            if(count > k)\n            {\n                freq[data[i]]--;\n                if(freq[data[i]] == 0)\n                    count--;\n            }\n            else\n            {\n                if(freq[data[i]] > 1)\n                {\n                    freq[data[i]]--;\n                }\n                else\n                {\n                    start = i;\n                    break;\n                }\n            }\n        }\n        int end = n-1;\n        for(int i = n-1; i>=0; i--)\n        {\n            if(freq[data[i]] == 1)\n            {\n                end = i;\n                break;\n            }\n            else\n                freq[data[i]]--;\n\n        }\n        start++;\n        end++;\n        if(start<= end)\n        System.out.println(start + \" \" + end);\n        else\n            System.out.println(-1 + \" \" + -1);\n    }\n}\n", "complexity": "linear"}
{"code": "    public static void main(String args[]) throws Exception {\n        int n = nextInt();\n        long k = nextInt();\n        long a[] = new long[n + 1];\n        Map<Long, Long> drb = new HashMap<Long, Long>();\n        int elso = 1;\n        long sk = 0;\n        long sm = 0;\n        long minjo = Long.MAX_VALUE;\n        long minjoh = Long.MAX_VALUE;\n        Vector<long[]> ret = new Vector<long[]>();\n        for (int i = 1; i <= n; i++) {\n            a[i] = nextInt();\n            if (/*a[i - 1] <= a[i]*/true) {\n                sm += a[i];\n                if (drb.containsKey(a[i])) {\n                    drb.put(a[i], drb.get(a[i]) + 1);\n                } else {\n                    drb.put(a[i], (long) 1);\n                    sk++;\n                }\n                while (sk > k || drb.get(a[elso]) > 1) {\n                    long s = drb.get(a[elso]);\n                    if (s == 1) {\n                        drb.remove(a[elso]);\n                        sk--;\n                    } else {\n                        drb.put(a[elso], s - 1);\n                    }\n                    sm -= a[elso];\n                    elso++;\n                }\n                if (sk == k) {\n                    if (minjo > sm) {\n                        minjo = sm;\n                        ret.clear();\n                        minjoh = i - elso;\n                    }\n                    if (minjo == sm) {\n                        if (minjoh > i - elso) {\n                            ret.clear();\n                            minjoh = i - elso;\n                        }\n                        ret.add(new long[]{elso, i});\n                    }\n                }\n            } else {\n                elso = i;\n                drb.clear();\n                drb.put(a[i], (long) 1);\n                sk = 1;\n                sm = a[i];\n                if (k == 1) {\n                    if (minjo > sm) {\n                        minjo = sm;\n                        ret.clear();\n                    }\n                    if (minjo == sm) {\n                        ret.add(new long[]{elso, i});\n                    }\n                }\n            }\n        }\n\n        for (long[] r : ret) {\n            System.out.print(r[0] + \" \");\n            System.out.print(r[1] + \" \");\n            break;\n        }\n        if (ret.size() == 0) {\n            System.out.print(-1 + \" \");\n            System.out.print(-1 + \" \");\n        }\n    }\n", "complexity": "linear"}
{"code": "", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(f.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint k = Integer.parseInt(st.nextToken());\n\t\tint[] array = new int[n];\n\t\tint[] visited = new int[100002];\n\t\tst = new StringTokenizer(f.readLine());\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarray[i] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tint count = 0;\n\t\tint begin = array[0];\n\t\twhile(count<n && array[count] == begin){\n\t\t\tcount++;\n\t\t}\n\t\tcount--;\n\t\tint kcount = 1;\n\t\tvisited[array[count]]++;\n\t\tint bindex = count;\n\t\tboolean good=true;\n\t\tcount++;\n\t\twhile(kcount<k){\n\t\t\tif(count==n){\n\t\t\t\tSystem.out.println(\"-1 -1\");\n\t\t\t\tgood=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(visited[array[count]]==0){\n\t\t\t\tkcount++;\n\t\t\t}\n\t\t\tvisited[array[count]]++;\n\t\t\tcount++;\n\t\t}\n\t\tif(good&&k!=1){\n\t\tfor(int i=bindex;i<count;i++){\n\t\t\tif(visited[array[i]]==1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbindex++;\n\t\t\tvisited[array[i]]--;\n\t\t}\n\t\tfor(int i=count-1;i>bindex;i--){\n\t\t\tif(visited[array[i]]==1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount--;\n\t\t\tvisited[array[i]]--;\n\t\t}\n\t\t}\n\t\tif(k==1){\n\t\t\tSystem.out.println(\"1 1\");\n\t\t}\n\t\telse if(good){\n\t\t\tSystem.out.println(bindex+1+\" \"+count);\n\t\t}\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        new Array().run();\n    }\n", "complexity": "linear"}
{"code": " public static void main(String[] args) throws IOException {\n\tScanner sc = new Scanner(System.in);\n\tint n  =sc.nextInt();\n\tadj=new ArrayList[n+1];\n\tdist = new int[n+1];\n\tvisitParent = new boolean[n+1];\n\tfor(int i=0;i<=n;i++) adj[i]=new ArrayList<Integer>();\n\tint max=0;\n\t//first contribution\n\tfor(int i=1;i<n;i++){\n\t\tint u = sc.nextInt(),v=sc.nextInt();\n\t\tadj[u].add(v);\n\t\tadj[v].add(u);\n\t}\n\tdist[1]=0;\n\tdfs(1,1);\n System.out.println(ans);\n \n \n }\n", "complexity": "linear"}
{"code": "    public static void main(String[] args) {\n        FastReader input = new FastReader();\n        int n = input.nextInt();\n        int[] arr = new int[n];\n        int max = 0;\n        int maxIndex = 0;\n        for(int i = 0;i < n;i++){\n            arr[i] = input.nextInt();\n            if(arr[i] > max){\n                max = arr[i];\n                maxIndex = i;\n            }\n        }\n        int j = maxIndex - 1;\n        int k = maxIndex + 1;\n        while (j >= 0 && k < n){\n            if(arr[j] > arr[k]){\n                if(arr[j] < max){\n                    max = arr[j];\n                    j--;\n                }\n                else {\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n            else{\n                if(arr[k] < max){\n                    max = arr[k];\n                    k++;\n                }\n                else{\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n        }\n        if(j >= 0){\n            while (j >= 0){\n                if(arr[j] < max){\n                    max = arr[j];\n                    j--;\n                }\n                else{\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n        }\n        if(k < n){\n            while (k < n){\n                if(arr[k] < max){\n                    max = arr[k];\n                    k++;\n                }\n                else{\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n        }\n        if(j == -1 && k == n){\n            System.out.println(\"YES\");\n        }\n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint a[]=new int[200005];\n\t\tfor (int i=1;i<=n;i++) \n\t\ta[i]=sc.nextInt();\n\t\tfor (int i=2;i<n;i++) \n\t\tif (a[i-1]>a[i]&&a[i]<a[i+1]) {\n\t\t\tSystem.out.println(\"NO\");\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(\"YES\");\n\t}\n", "complexity": "linear"}
{"code": "    public static void main(String[] args)throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int[] a = new int[n];\n        for(int i=0;i<n;i++) a[i] = Integer.parseInt(st.nextToken());\n        int ind = 0;\n        for(int i=0;i<n;i++){\n            if(a[i]==n){\n                ind = i;\n                break;\n            }\n        }\n        boolean ok = true;\n        for(int i=ind+1;i<n;i++) if(a[i]>a[i-1]) ok = false;\n        for(int i=ind-1;i>=0;i--) if(a[i]>a[i+1]) ok = false;\n        if(ok) System.out.println(\"YES\");\n        else System.out.println(\"NO\");\n        \n    }\n", "complexity": "linear"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\t// FileWriter f = new FileWriter(\"C:\\\\Users\\\\Hp\\\\Desktop\\\\out.txt\");\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint sum = n;\n\n\t\tfor (long i = 0; i < 1e5; i++) {\n\t\t\tif (i * (i + 1) / 2 - (n - i) == k) {\n\t\t\t\tSystem.out.println(n - i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = sc.nextInt(), k = sc.nextInt();\n        long rhs = 2l * (n + k);\n        for (int x = 1; ; x++) {\n            long lhs = 1l * x * x + 3l * x;\n            if (rhs == lhs) {\n                out.println(n - x);\n                break;\n            }\n        }\n        out.flush();\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader sc = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(1, sc, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        n = in.nextLong();\n        k = in.nextLong();\n        long ans = n - TernarySearch(0, n);\n        pw.println(ans);\n        pw.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        long n = in.nextInt();\n        long k = in.nextInt();\n        long ans = (-3 + (long)Math.sqrt(9+8*(n+k)))/2;\n        System.out.println(n-ans);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        BSportMafia solver = new BSportMafia();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        BSportMafia solver = new BSportMafia();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        st = new StringTokenizer(reader.readLine());\n        long n = Long.parseLong(st.nextToken());\n        long k = Long.parseLong(st.nextToken());\n        long put = (-3 + (long)Math.sqrt((long)9 + 8 * k + 8 * n)) / 2;\n        long eat = n - put;\n        writer.write(Long.toString(eat));\n        writer.newLine();\n        writer.flush();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st=new StringTokenizer(br.readLine());\n\t\tlong n=Long.parseLong(st.nextToken());\n\t\tlong k=Long.parseLong(st.nextToken());\n\t\t\n\t\tlong ans=((-3-(long)Math.sqrt(9+4*(1*2*(n+k))))/2);\n\t\tlong ans1=((-3+(long)Math.sqrt(9+4*(1*2*(n+k))))/2);\n\t\tif(ans>0)\n\t\t\tSystem.out.println(n-ans);\n\t\telse{\n\t\t\tSystem.out.println(n-ans1);\n\t\t}\n\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){ \n\t\tScanner ak=new Scanner(System.in);\n\t\tlong n,k,x;\n\t\tn=ak.nextLong();\n\t\tk=ak.nextLong();\n\t\tx=(long)((-3+Math.sqrt(9+8*(n+k)))/2);\n\t\tSystem.out.println(n-x);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew candies().run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[])throws Exception\n        new Thread(null,new templ(),\"templ\",1<<27).start();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// BufferedReader bin = new BufferedReader(new FileReader(\"cactus.in\"));\n\t\tBufferedReader bin = new BufferedReader(\n\t\t\t\tnew InputStreamReader(System.in));\n\t\tSportMafia l = new SportMafia();\n\t\tl.readData(bin);\n\t\tl.calculate();\n\t\tl.printRes();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(System.out);\n        int n = nextInt();\n        int k = nextInt();\n        long l = -1;\n        long r = 100000;\n        while(l != r - 1) {\n            long mid = (l + r) / 2;\n            if (mid * (mid + 1) / 2 - (n - mid) > k) r = mid;\n            else l = mid;\n        }\n        pw.println(n - l);\n        pw.close();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    long n = in.nextLong();\n    long k = in.nextLong();\n\n    long res = solve(n, k);\n    System.out.println(res);\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) \n        FastReader sc = new FastReader(); \n        //PrintWriter out = new PrintWriter(System.out); \n        double n = (double)sc.nextLong();\n        double k = (double)sc.nextLong();\n        \n        double div = 9+8*n+8*k;\n        double ss = Math.sqrt(div);\n        //System.out.println(ss);\n\n        ss =  (ss-3)/2;\n        System.out.println( (int)(n-ss) );\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n        n = sc.nextInt();\n        k = sc.nextInt();\n        long l = 0;\n        long r = n + 1;\n        while (l + 1 != r) {\n            long m = (r + l) / 2;\n            if (check(m))\n                l = m;\n            else\n                r = m;\n        }\n        pw.print(l * (l + 1L) / 2L - k);\n        pw.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tlong x =sc.nextInt();\n\t\tlong y =sc.nextInt();\n\t\tlong m = (-3+Math.round(Math.sqrt(9+8*(x+y))))/2;\n\t\tlong e = x-m;\n\t\tpw.println(e);\n\t\tpw.flush();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        BSportivnayaMafiya solver = new BSportivnayaMafiya();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tSolver solver = new Solver();\n\t\tscan = new FastReader();\n\t\tout = new PrintWriter(System.out);\n\t\tint testCases = 1;\n\t\tfor(int i = 1; i <= testCases; i++) {\n//\t\t\tout.print(\"Case #\" + i + \": \");\n\t\t\tsolver.solve();\t\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().solve();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tJS scan = new JS();\n\t\tlong n = scan.nextInt();\n\t\tlong put = 1;\n\t\tlong k = scan.nextInt();\n\t\tlong have = 0;\n\t\tlong moves = 0;\n\t\twhile(have < k) {\n\t\t\thave += put;\n\t\t\tput++;\n\t\t\tmoves++;\n\t\t}\n\t\t\n\t\tlong ans = 0;\n\t\tmoves += have-k;\n\t\tans += have-k;\n\t\tlong lo = 0;\n\t\tlong hi = n-moves;\n\t\tlong bs = 0;\n\t\twhile(lo <= hi) {\n\t\t\t//could she have eaten mid candies?\n\t\t\tlong mid = (lo+hi)/2;\n\t\t\tlong left = (n-moves)-mid+put-1;\n\t\t\tlong rr = tri(left)-tri(put);\n\t\t\t\n\t\t\tif(rr <= mid) {\n\t\t\t\tbs = mid;\n\t\t\t\thi = mid-1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlo = mid+1;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans+bs);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tStringTokenizer st = new StringTokenizer(sc.nextLine());\n\t\tlong n = Integer.parseInt(st.nextToken());\n\t\tlong k = Integer.parseInt(st.nextToken());\n\t\tlong put = n / 2;\n\t\tlong lower = 0;\n\t\tlong upper = n;\n\t\twhile (put * (put + 1) / 2 - (n - put) != k) {\n\t\t\tif (put * (put + 1) / 2 - (n - put) > k) {\n\t\t\t\tupper = put - 1;\n\t\t\t\tput = (lower + upper) / 2;\n\t\t\t} else {\n\t\t\t\tlower = put + 1;\n\t\t\t\tput = (lower + upper) / 2;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(n - put);\n\n\t\tsc.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        \n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long k = sc.nextLong();\n       \n        long ans = (long) ((java.lang.Math.sqrt((9+(8*(n+k))))-3)/2);\n        System.out.println(n-ans);\n        \n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception{\n        FastReader sc=new FastReader(); \n        OutputStream outputStream = System.out;\n        PrintWriter out = new PrintWriter(outputStream);\n        Main mm=new Main();\n        long n=sc.nextLong();\n        long k=sc.nextLong();\n        long l=0;\n        long r=1000000000;\n        long ans=-1;\n        while(l<=r) {\n            long mid=(l+r)/2;\n            if(n-mid<=0) {\n                r=mid-1;\n            }\n            else {\n                long temp=(n-mid)*(n-mid+1)-(2*mid);\n                if(temp==2*k) {\n                    ans=mid;\n                    break;\n                }\n                else if(temp<2*k) {\n                    r=mid-1;\n                }\n                else if(temp>2*k) {\n                    l=mid+1;\n                }\n            }\n        }\n        System.out.println(ans);\n    }  \n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new B().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        long n = scan.nextLong();\n        long k = scan.nextLong();\n        long D = 9 + 4 * (2 * k + 2 * n);\n        long y = (- 3 + (long)Math.sqrt(D)) / 2;\n        System.out.println(n - y);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws IOException {\n        if (args.length > 0) {\n            setIn(new FileInputStream(args[0] + \".inp\"));\n            setOut(new PrintStream(args[0] + \".out\"));\n        }\n        Main solver = new Main();\n        solver.out.flush();  //  could be replace with a method, but nah, this is just competitive programming :p\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\n        String[] in = reader.readLine().split(\" \");\n        long n = Long.parseLong(in[0]);\n        long k = Long.parseLong(in[1]);\n        long D = 9 + 8*k + 8*n;\n        long m = (long) ((-3 + Math.sqrt(D))/2);\n        writer.write((n - m) + \"\");\n        writer.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputReader in = new InputReader();\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\t\n\t\tlong numCandies = 1;\n\t\tint turns = 1, add = 2;\n\t\twhile (numCandies < k) {\n\t\t\t++turns;\n\t\t\tnumCandies += add++;\n\t\t}\n\t\tint res = 0;\n\t\tif (numCandies > k) {\n\t\t\tturns += (numCandies-k);\n\t\t\tres += (numCandies-k);\n\t\t\tnumCandies = k;\n\t\t}\n\t\t\n\t\tif (turns == n) {\n\t\t\tSystem.out.println(res);\n\t\t}\n\t\telse {\n\t\t\twhile (turns != n) {\n\t\t\t\tres += add;\n\t\t\t\tturns += add++ + 1;\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t}\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException\n        Reader in = new Reader();\n//        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        long n = in.nextLong();\n        long k = in.nextLong();\n        long val = 2 * n + 2 * k;\n        long D = 9 + 4 * val;\n        long sqrtD = (long)Math.sqrt((double)D);\n        double r1 = (-3 + sqrtD) / 2;\n        long r1DAsh = (long)r1;\n        System.out.println(n - r1DAsh);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew B().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc =new Scanner(System.in);\n\t\tlong n = sc.nextLong(), k = sc.nextLong();\n\t\tlong ans = 0, sum = 0;\n\t\twhile(ans < n) {\n\t\t\tif(sum - (n-ans) == k) break;\n\t\t\tans++;\n\t\t\tsum += ans;\n\t\t}\n\t\tsc.close();\n\t\tSystem.out.println(n-ans);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tFastReader fr =new FastReader();\n\n\t\tPrintWriter op =new PrintWriter(System.out);\n\n\t\tlong n =fr.nextLong() ,k =fr.nextLong() ,d =(long)Math.sqrt(9l+8l*(n+k)) ;\n\n\t\td -= 3l ;\td /=2l ;op.println(n-d) ;\n\n\t\top.flush();\top.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n=sc.nextInt(),k=sc.nextInt();\n\t\tfor(int x=0;;x++) {\n\t\t\tif(2*1L*x+x*1L*(x+1)==2L*(k+n)) {\n\t\t\t\tout.println(n-x);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tout.close();\n\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        BSportMafia solver = new BSportMafia();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new TaskB().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputReader sc = new InputReader(System.in);\n        \n           prime  = new boolean[n + 1];\nsieve();\n                prime[1] = false;\n         \n          \n             long n = sc.nl();\n             long k = sc.nl();\n             long b = 2*n + 3;\n             long c = n*n - 2*k + n;\n             long q1 = (b + (long)Math.sqrt(b*b - 4*c))/2;\n             long q2 = (b - (long)Math.sqrt(b*b - 4*c))/2;\n             if(q1 >= q2 && q1 <= n)\n                 w.println(q1);\n             else\n                 w.println(q2);\n                 \n                \n       \n             \n       w.close();\n        \n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String [] arg) throws Throwable {\n\t\tint n = nextInt();\n\t\tint k = nextInt();\n\t\t\n\t\tlong ate = 0;\n\t\tlong ans = -1;\n\t\tfor (long i = 1; ans < 0; ++i) {\n\t\t\tlong test = (i * (i+1)) / 2;\n\t\t\tif (test < k) continue;\n\t\t\t\n\t\t\tlong adding_moves = i;\n\t\t\tlong eating_moves = n-i;\n\t\t\tif (test - eating_moves == k) ans = eating_moves;\n\t\t}\n\t\tSystem.out.println(ans);\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner(System.in);\n        PrintWriter printer = new PrintWriter(System.out);\n        long n = scanner.nextLong();\n        long k = scanner.nextLong();\n        long l = 1;\n        long r = n;\n        while(true){\n            long m = (l + r) / 2;\n            long x = (m * (m + 1)) / 2;\n            x -= n - m;\n            if (x == k) {\n                printer.println(n - m);\n                break;\n            } else if (x < k) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        printer.flush();\n        printer.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\n\tReader.init(System.in);\n\tPrintWriter out=new PrintWriter(System.out);\n\tlong n=Reader.nextInt();\n\tlong k=Reader.nextLong();\n\tlong v=8*n+8*k+4;\n\tlong v2=(long) Math.sqrt(v);\n\tlong v3=2*n+2;\n\t//long v4=(v3+v2)/2;\n\tlong v5=(v3-v2)/2;\n\tout.println(v5);\n\t\n\t\n\t\n\t\n\t\n\tout.flush();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter writer = new PrintWriter(System.out);\n        StringTokenizer st = new StringTokenizer(reader.readLine());\n        long n = Integer.parseInt(st.nextToken());\n        long k = Integer.parseInt(st.nextToken());\n        long l = 0;\n        long r = n;\n        while(l <= r){\n            long min = (l + r) / 2;\n            if((min * (min + 1) / 2 - (n - min) == k)){\n                System.out.println(n - min);\n                return;\n            }\n            else if((min * (min + 1) / 2 - (n - min) > k)){\n                r = min - 1;\n            }\n            else{\n                l = min + 1;\n            }\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception{\n        //MScanner sc = new MScanner(\"chess.in\");\n        MScanner sc = new MScanner(System.in);\n        PrintWriter pw=new PrintWriter(System.out);\n        int n=sc.nextInt();\n        //int[]in=new int[n];for(int i=0;i<n;i++)in[i]=sc.nextInt();\n        int k=sc.nextInt();\n        int x=(-3+(int)Math.sqrt(9+4*1.0*(2*k*1.0+2*n*1.0)))/2;\n        pw.println(n-x);\n        pw.flush();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tint a = sc.nextInt();\n\t\tint b = sc.nextInt();\n\t\tint i = 0;\n\t\tint cont = 0;\n\t\twhile(cont<b) {\n\t\t\ti++;\n\t\t\tcont+=i;\n\t\t}\n\t\t\n\t\tif(i+cont-b==a) {\n\t\t\tSystem.out.println(cont-b);\n\t\t}else {\n\t\t\twhile(i+cont-b!=a) {\n\t\t\t\ti++;\n\t\t\t\tcont+=i;\n\t\t\t}\n\t\t\tSystem.out.println(cont-b);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException\n        Reader z = new Reader();\n        long n=z.nextLong(), k=z.nextLong(), x;\n        x=9L+8L*(k+n);\n        x=(long) Math.sqrt(x);\n        x=(x-3)/2;\n        System.out.println(n-x);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tlong n = in.nextLong();\n\t\tlong k = in.nextLong();\n\t\tdouble tmp = Math.sqrt(9 + 8*(n+k));\n\t\tif(Math.ceil(tmp)-tmp<0.001)\n\t\t\ttmp = Math.ceil(tmp);\n\t\t\n\t\tlong root = (long)tmp;\n\t\tlong x = (-3+root)/2;\n\t\tSystem.out.println(n-x);\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    long  n,k;\n    Scanner s= new Scanner(System.in);\n\tn=s.nextInt();\n\tk=s.nextInt();\n\tSystem.out.println((int)(n-((-3+Math.sqrt(9+8*(n+k)))/2)));  \n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner s=new Scanner(System.in);\n\t\t\n\t\tdouble n=s.nextLong();\n\t\tdouble k=s.nextLong();\n\t\t\n\t\tdouble num=(-3+Math.sqrt(9+8*(n+k)))/2;\n\t\t\n\t\tSystem.out.println((long)(n-num));\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tString[] split = br.readLine().split(\" \");\n\t\t\n\t\tlong n = Long.parseLong(split[0]);\n\t\tlong k = Long.parseLong(split[1]);\n\t\t\n\t\tlong left = -1;\n\t\tlong right = n + 1;\n\t\t\n\t\twhile(right - left >= 2) {\n\t\t\tlong mid = (left + right) / 2; // 10\n\t\t\t// if(mid > n) {\n\t\t\t\t// right = mid;\n\t\t\t\t// continue;\n\t\t\t// }\n\t\t\t\n\t\t\tlong newN = n - mid; //-5\n\t\t\tlong temp = newN * (newN + 1) / 2; //10\n\t\t\t\n\t\t\tlong eh = temp - k - mid;\n\t\t\t\n\t\t\tif(eh == 0) {\n\t\t\t\tpw.println(mid);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(eh < 0)\n\t\t\t\tright = mid;\n\t\t\telse\n\t\t\t\tleft = mid;\n\t\t}\n\t\t\n\t\tpw.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[])throws IOException{\n \n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\tScanner in=new Scanner(System.in);\tStringBuilder out=new StringBuilder();\n \n\t\tlong n=in.nextLong(),\n\t\t\t k=in.nextLong();\n\n\t\tlong a=1,\n\t\t\t b=3,\n\t\t\t c=-2*(n+k);\n\t\t\n\t\tlong r1=(-b+(long)Math.sqrt(b*b-4*a*c))/(2*a);\n\t\tlong r2=(-b-(long)Math.sqrt(b*b-4*a*c))/(2*a);\n\n\t\tSystem.out.println(n-Math.max(r1, r2));\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\t// your code goes here\n\t\tFastReader sc=new FastReader();\n\t\tlong n=sc.L();\n\t\tlong k=sc.L();\n\t\tlong x=8*(n+k);\n\t\tx+=9;\n\t\tx=(long)Math.sqrt(x)-3;\n\t\tx/=2;\n\t\t\n\t\tSystem.out.println(n-x);\n\t }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tlong n = sc.nextInt(), k = sc.nextInt();\n\t\t\n\t\t\n\t\tlong start = 1, end = n;\n\t\t\n\t\twhile(start <= end) {\n\t\t\tlong mid = (start + end) >> 1;\n\t\t\tif(calc(mid) - (n - mid) == k) {\n\t\t\t\tSystem.out.println(n - mid);\n\t\t\t\treturn;\n\t\t\t} else if (calc(mid) - (n - mid) > k) {\n\t\t\t\tend = mid - 1;\n\t\t\t} else {\n\t\t\t\tstart = mid + 1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        SimpleScanner scanner = new SimpleScanner(System.in);\n        PrintWriter writer = new PrintWriter(System.out);\n\n        int n = scanner.nextInt();\n        int k = scanner.nextInt();\n        int l = 0;\n        int r = n;\n        int ans = 0;\n        while (l <= r) {\n            int eat = (l + r) >> 1;\n            int lastPut = n - eat;\n            long totalPut = (long) (lastPut + 1) * lastPut / 2;\n            long remain = totalPut - eat;\n            if (remain == k) {\n                ans = eat;\n                break;\n            } else if (remain > k)\n                l = eat + 1;\n            else\n                r = eat - 1;\n        }\n        writer.println(ans);\n\n        writer.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\tint n = sc.nextInt();\n\tint k = sc.nextInt();\n        int ans = 0;\n        long x = n;\n        x = x*(x+1)/2;\n        while (x!=k) {\n            x-=n;\n            n--;\n            ans++;\n            k++;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        scanner = new FastScanner();\n        long n = scanner.nextInt();\n        long k = scanner.nextInt();\n\n        if (sum(n) == k) {\n            System.out.println(0);\n            return;\n        }\n\n        long s = 0;\n        long e = n + 1;\n        while (s < e - 1) {\n            long m = (s + e) / 2;\n            long put = sum(n - m);\n            long candiesLeft = put - m;\n            if (candiesLeft == k) {\n                System.out.println(m);\n                return;\n            }\n            if (candiesLeft > k) {\n                s = m;\n            } else {\n                e = m;\n            }\n        }\n    }\n", "complexity": "logn"}
{"code": "      public static void main(String args[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         int K = Integer.parseInt(st.nextToken());\n         //bin search\n         //ugh I'm shafting\n         long x = (long)N;\n         long low = 0L;\n         long high = N;\n         while(low != high)\n         {\n            x = (low+high+1)/2;\n            long add = (x*(x+1))/2;\n            long y = N-x;\n            if(add-y > K)\n               high = x;\n            else if(add-y == K)\n            {\n               System.out.println(y);\n               break;\n            }\n            else\n               low = x;\n         }\n         //run time?\n      }\n", "complexity": "logn"}
{"code": "        public static void main(String[] args) throws Exception {\n            BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n            PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n            // int n = Integer.parseInt(bf.readLine());\n            StringTokenizer st = new StringTokenizer(bf.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int k = Integer.parseInt(st.nextToken());\n            \n            for(int i=0; i<100000; i++) {\n              long mult = 1L*i*(i+1)/2;\n              long b = 1L*mult - k;\n              if(i+b == n*1L) {\n                out.println(b);\n                out.close(); System.exit(0);\n              }\n            }\n            //out.println(count);\n            out.close(); System.exit(0);\n        }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        boolean local = System.getProperty(\"ONLINE_JUDGE\") == null;\n        boolean async = false;\n\n        Charset charset = Charset.forName(\"ascii\");\n\n        FastIO io = local ? new FastIO(new FileInputStream(\"D:\\\\DATABASE\\\\TESTCASE\\\\Code.in\"), System.out, charset) : new FastIO(System.in, System.out, charset);\n        Task task = new Task(io, new Debug(local));\n\n        if (async) {\n            Thread t = new Thread(null, task, \"dalt\", 1 << 27);\n            t.setPriority(Thread.MAX_PRIORITY);\n            t.start();\n            t.join();\n        } else {\n            task.run();\n        }\n\n        if (local) {\n            io.cache.append(\"\\n\\n--memory -- \\n\" + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) >> 20) + \"M\");\n        }\n\n        io.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Main(), \"Check2\", 1 << 28).start();// to increse stack size in java\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        FastReader in = new FastReader();\n        long n = in.nextInt();\n        long k = in.nextInt();\n        long left = 0, right = n;\n        while (left <= right) {\n            long middle = (left+right)/2;\n            if (ok(n, k, middle)) right = middle-1;\n            else left=middle+1;\n        }\n        System.out.println(left);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\t\n\t\tint next = 1;\n\t\tint current = 0;\n\t\tint result = 0;\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(current < k) {\n\t\t\t\tcurrent += next++;\n\t\t\t} else {\n\t\t\t\tcurrent--;\n\t\t\t\tresult++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(result);\n\t\t\n\t\tsc.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[])\n        Scanner ex=new Scanner(System.in);\n        int n=ex.nextInt();\n        int k=ex.nextInt();\n        int x=(int)((Math.sqrt(9.0+8.0*((double)n+(double)k))-3.0)/2.0);\n        System.out.println(n-x);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tFastReader reader = new FastReader();\n\t\tPrintWriter writer = new PrintWriter(System.out);\n\n\t\tlong n = reader.nextLong();\n\t\tlong k = reader.nextLong();\n\n\t\tlong s=0;\n\t\tlong e=n;\n\n\t\tlong ans = -1;\n\t\twhile (s<=e) {\n\t\t\tlong m = (s+e)/2;\n\t\t\tlong temp = ((n-m)*(n-m+1))/2 - m;\n\n\t\t\tif (temp < k) \n\t\t\t\te = m-1;\n\t\t\telse if (temp > k)\n\t\t\t\ts = m+1;\n\t\t\telse {\n\t\t\t\tans = m;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\n\t\twriter.println(ans);\n\t\twriter.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new B().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\n        long N,K,tmp,ans=0;\n\n        String s[]=br.readLine().trim().split(\" \");\n        N=Long.parseLong(s[0]);\n        K=Long.parseLong(s[1]);\n\n        long l=1,r=N,mid;\n\n        while(l<=r)\n        {\n            mid=(l+r)/2;\n\n            tmp=mid*(mid+1)/2;\n            tmp-=N;\n            tmp+=mid;\n\n            if(tmp==K)\n            {\n                ans=N-mid;\n                break;\n            }\n            else if(tmp>K)\n                r=mid-1;\n            else\n                l=mid+1;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long n = in.nextLong();\n        long k = in.nextLong();\n        long disc = (long)(Math.sqrt(9 - 4 * (-2 * n - 2 * k)));\n        long x = (-3 + disc) / 2;\n        System.out.println(n - x);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer tokenizer = new StringTokenizer(reader.readLine());\n        int n = Integer.parseInt(tokenizer.nextToken());\n        int k = Integer.parseInt(tokenizer.nextToken());\n        System.out.println((int)(n-(-3.0+Math.sqrt(9.0+8.0*(n+k)))/2.0));\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        BSportMafia solver = new BSportMafia();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        FastReader input = new FastReader();\n        long n = input.nextLong();\n        long K = input.nextLong();\n        long root = (long) Math.sqrt(8 * (K+n) + 9);\n        if (root * root != 8 * (K+n) + 9){\n            root++;\n            if (root * root != 8 * (K+n) + 9) root -= 2;\n        }\n        System.out.println(n - (root - 3) / 2);\n        \n        \n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        InputStreamReader r = new InputStreamReader(System.in);\n        BufferedReader f = new BufferedReader(r);\n\n        Scanner sc = new Scanner(System.in);\n        long n=sc.nextLong();\n        long m=sc.nextLong();\n        long sum=0;\n        if(n==1){\n\n        }else {\n            for (long i = 1; i <= n; i++) {\n                sum += i;\n                if (sum - (n - i) == m) {\n                    sum = n - i;\n                    break;\n                }\n            }\n        }\n        System.out.println(sum);\n\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        //FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        int lo=0;\n        int hi=n;\n        int ans=0;\n        while (lo<=hi){\n            int mid=lo+hi>>1;\n            long rem= n-mid;\n            rem*=(rem+1);\n            rem/=2;\n            rem-=mid;\n            //pw.println(rem+\" \"+mid+\" \"+k);\n            if (rem==k){\n                ans=mid;\n                break;\n            }\n            else if (rem>k){\n                lo=mid+1;\n            }\n            else hi=mid-1;\n        }\n        pw.println(ans);\n        pw.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskBR574D2 solver = new TaskBR574D2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] input = br.readLine().split(\" \");\n        int N = Integer.valueOf(input[0]);\n        int K = Integer.valueOf(input[1]);\n        long sum = 0;\n        for(int i = 0; i < N; i++){\n            if(sum - (N - i) == K){\n                System.out.println(Integer.valueOf(N-i));\n                return;\n            }\n            sum += (i+1);\n        }\n        System.out.println(\"0\");\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner sc = new FastScanner();\n\t\tPrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tlong left = 0;\n\t\tlong right = n;\n\t\tlong mid = left+right/2;\n\t\twhile(left<=right) {\n\t\t\tmid = (left+(right))/2;\n\t\t\tif(((mid+1)*mid)/2-(n-mid)==k) {\n\t\t\t\tpw.println(n-mid);\n\t\t\t\tpw.close();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(((mid+1)*mid)/2-(n-mid)>k) {\n\t\t\t\tright = mid-1;\n\t\t\t}\n\t\t\telse left = mid+1;\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[])throws Exception {\n        double n,k;\n        n=sc.nextDouble();\n        k=sc.nextDouble();\n        double ans=0;\n        ans=Math.sqrt(2.25+2*(n+k))-1.5;\n        System.out.printf(\"%.0f\\n\",n-ans);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        doTask();\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner input = new Scanner(System.in);\n\n\t\tint n = input.nextInt();\n\t\tint k = input.nextInt();\n\n\t\tlong ate = n - binSearchPuts(n, k);\n\t\tSystem.out.println(ate);\n\t}\n", "complexity": "logn"}
{"code": "  public static void main(String... args) throws Exception {\n    br = new BufferedReader(new InputStreamReader(System.in));\n    pw = new PrintWriter(new BufferedOutputStream(System.out));\n    new P1177B().run();\n    br.close();\n    pw.close();\n    System.err.println(\"\\n[Time : \" + (System.currentTimeMillis() - startTime) + \" ms]\");\n    long gct = 0, gcc = 0;\n    for (GarbageCollectorMXBean garbageCollectorMXBean : ManagementFactory.getGarbageCollectorMXBeans()) {\n      gct += garbageCollectorMXBean.getCollectionTime();\n      gcc += garbageCollectorMXBean.getCollectionCount();\n    }\n    System.err.println(\"[GC time : \" + gct + \" ms, count = \" + gcc + \"]\");\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner in = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        new Main().run(in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String s[]){\n\t\tScanner sc = new Scanner(System.in);\n\t\t\tlong n = sc.nextLong();\n\t\t\tString st = String.valueOf(n);\n\t\t\tif(st.length()==1){\n\t\t\t\tSystem.out.println(n);\n\t\t\t}else{\n\t\t\t\tlong val = 1;\n\t\t\t\tlong prev=9;\n\t\t\t\tlong total=9;\n\t\t\t\tlong late=9;\n\t\t\t\tfor(int i=2;i<=12;i++){\n\t\t\t\t\tval*=10;\n\t\t\t\t\t\n\t\t\t\t\ttotal+=i*(val*9);\n\t\t\t\t\tif(n<=total){\n\t\t\t\t\t\tlong diff = n-late;\n\t\t\t\t\t\tlong div = diff/i;\n\t\t\t\t\t\tlong mod = diff%i;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(mod==0){\n\t\t\t\t\t\t\tprev+=div;\n\t\t\t\t\t\t\tSystem.out.println((prev)%10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tprev+=div+1;\n\t\t\t\t\t\t\tString fg = String.valueOf(prev);\n\t\t\t\t\t\t\tSystem.out.println(fg.charAt((int)mod-1));\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprev+=(9*val);\n\t\t\t\t\tlate=total;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\t\t\t\n\t\t\n\t\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n\n        Scanner in = new Scanner(System.in);\n        // Scanner in = new Scanner(new File(\"input.txt\"));\n        System.out.println(solve(in.nextLong()));\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        long b=0;long p=1;\n        Scanner s=new Scanner(System.in);\n        long m=s.nextLong();\n        long x=1;\n        do{\n            p=(m+b)/x;\n            b=10*b+10;\n            x++;\n        }while(p/(long)Math.pow(10, x-1)!=0);\n        rest :\n        x--;b=b/10-1;\n        b=x*p-b;\n        b=m-b;\n        b=x-b-1;\n        p/=(long)Math.pow(10, b);\n        p%=10;\n        System.out.println(p);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t    Scanner sc =new Scanner(System.in);\n\t    long n=sc.nextLong();\n\t    long x=1;\n\t    long ar=0;\n\t    tag:for(long i=1;;i++)\n\t    {\n\t        ar+=9*i*x;\n\t        if(ar>=n)\n\t        {\n\t            long d = n - (ar-9*i*x);\n\t            long ans = x+d/i;\n\t            long p=d%i;\n\t            if(p==0)\n\t            {\n\t                p=i;\n\t                ans--;\n\t            }\n\t            p=i-p;\n\t            p++;\n\t            long fns=0;\n\t            //System.out.println(ans);\n\t            while(p!=0)\n\t            {\n\t                fns=ans%10;\n\t                ans/=10;\n\t                p--;\n\t            }\n\t            System.out.println(fns);\n\t            \n\t            break tag;\n\t        }\n\t        x*=10;\n\t    }\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {      //threading has been used to increase the stack size.\n\n        new Thread(null, null, \"Vengeance\", 1 << 25)  //the last parameter is stack size desired.\n        {\n            public void run() {\n                try {\n                    double s = System.currentTimeMillis();\n                    MainSolution();\n                    //pl((\"\\nExecution Time : \" + ((double) System.currentTimeMillis() - s) / 1000) + \" s\");\n                    pw.flush();\n                    pw.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        long k=in.nextLong();\n        long[] end=new long[12];\n        end[0]=-1;\n        for (int i=1; i<end.length; i++) {\n        \tend[i]=(i*(long)(Math.pow(10,i)));\n        \tend[i]-=(((long)(Math.pow(10,i))-1)/9);\n        }\n        //System.out.println(Arrays.toString(end));\n        int st=0;//st=1 {0,9}; st=2 {10, 189}; st=3 {190-2889}; st=4 {2890-38889}\n       \tfor (int i=1; i<end.length; i++) {\n       \t\tif (k>=end[i-1]+1 && k<=end[i]) st=i;\n       \t}\n       \t//System.out.println(\"st \" + st);\n       \tlong diff=k-end[st-1];\n       \tlong mod=((diff+st-1)%st);\n       \t//System.out.println(mod);\n       \tlong digit=-1;\n\n       \tint addOn=0;\n       \tif (mod==0) addOn=1;\n       \tif (mod==st-1) addOn=-1;\n       \tdigit=(diff/(st*(long)(Math.pow(10,st-1-mod))));\n       \tdigit+=addOn;\n       \tdigit%=10;\n       \tSystem.out.println(digit);\n       \t//98888888889\n       \t//98888888879\n       \t//1088888888889\n       \t//1088888888878\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]){\n        Scanner scanner = new Scanner(System.in);\n        long  k = scanner.nextLong();\n        //int k =21;\n        long sum = 0;\n        long i=1;\n        while(true){\n            long interval = 9 * exponential(10,i-1) * i;\n            if(sum + interval >= k){\n                break;\n            } else {\n                i++;\n                sum += interval;\n            }\n        }\n        long t = k-sum;\n        long targetNumber = exponential(10, i-1) + (t-1)/i;\n        String s = \"\" + targetNumber;\n        int hedef = (int)((t-1)%i);\n        System.out.println(s.charAt(hedef));\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\ttry (Scanner sc = new Scanner(System.in)) {\n\t\t\t\n\t\t\tlong k = sc.nextLong();\n\t\t\tint pow = 1;\n\t\t\t\n\t\t\twhile ((long) ((Math.pow(10, pow) - Math.pow(10, pow - 1)) * pow) < k) {\n\t\t\t\tk -= (long) ((Math.pow(10, pow) - Math.pow(10, pow - 1)) * pow);\n\t\t\t\tpow++;\n\t\t\t}\n\t\t\t// System.out.println(k + \" \" + pow);\n\t\t\t\n\t\t\tk--;\n\t\t\tlong n = (long) Math.pow(10, pow - 1) + k / pow;\n\t\t\tk %= pow;\n\t\t\t// System.out.println(k + \" \" + n);\n\t\t\t\n\t\t\tSystem.out.println(String.valueOf(n).charAt((int) k));\n\t\t\t\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner sc=new FastScanner();\n        long K = sc.nextLong();\n        long nums = 9;\n        int digits = 1;\n        while (K > nums*digits) {\n        \tK -= nums*digits;\n        \tnums *= 10;\n        \tdigits++;\n        }\n        long removal = (K-1)/digits;\n        int pos = (int)((K-1)%digits);\n        long base = (long)Math.pow(10,digits-1);\n        String num = Long.toString(base+removal);\n        System.out.println(num.charAt(pos));\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n        prepareIO(false);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        long n = sc.nextLong();\n\n        getLen(n);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        long k = scan.nextLong();\n\n        long digits = 1;\n        long counter = 9L;\n\n        while(k > counter * digits) {\n            k -= counter * digits;\n            counter *= 10;\n            digits++;\n        }\n\n        long num = (long)(Math.ceil((double)k/digits));\n        String s = String.valueOf((long)Math.pow(10,digits-1) - 1 + num );\n\n        System.out.println(s.charAt((int)((k+digits-1)%digits)));\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        long k = Long.parseLong(br.readLine());\n        long temp = 9 * (int)Math.pow(10,0);\n        int count = 0;\n        long initial = 0;\n        while(k > temp) {\n            count++;\n            initial = temp;\n            temp += 9 * (long)Math.pow(10,count)*(count+1);\n        }\n        long index = (k-initial-1)%(count+1);\n        long num = (long)Math.pow(10,count) + (k-initial-1)/(count+1);\n        System.out.println((num+\"\").charAt((int)index));\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long k = in.nextLong();\n        long t = 1;\n        long l = 1;\n        if(k <= 9) {\n            System.out.print(k);\n            System.exit(0);\n        }\n        long x = 9;\n        while(true) {\n            ++l;\n            t *= 10;\n            x += 9 * l * t;\n            if(x >= k) {\n                break;\n            }\n        }\n        if(x == k) {\n            System.out.print(9);\n            System.exit(0);\n        }\n        x -= 9 * l * t;\n        long a = (k - x) / l;\n        if((k - x) % l == 0) {\n            x = t + a - 1;\n            System.out.print(x % 10);\n        } else {\n            k -= (x + a * l);\n            x = t + a;\n            String s = Long.toString(x);\n            System.out.print(s.charAt((int)k - 1));\n        }\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) throws Exception {\n    Scanner sc = new Scanner(System.in);\n    PrintWriter out = new PrintWriter(System.out);\n\n    long k = sc.nextLong();\n    if (k == 1) {\n      System.out.println(1);\n      return;\n    }\n    long lo = 1, hi = k, res = 1;\n    while(lo <= hi) {\n      long mid = lo + hi >> 1L;\n      if(cnt(mid) < k) {\n        res = mid;\n        lo = mid + 1;\n      } else {\n        hi = mid - 1;\n      }\n    }\n\n    ArrayList<Integer> digits = new ArrayList<>();\n    long tmp = res;\n    while (tmp > 0) {\n      digits.add((int)(tmp % 10));\n      tmp /= 10;\n    }\n//    System.err.println(\"RES \" + res);\n//    System.err.println(\"DIGITS \" + digits);\n//    System.err.println(\"Cnt Res \" + cnt(res));\n    Collections.reverse(digits);\n    out.println(digits.get((int)(k - cnt(res) - 1)));\n    out.flush();\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        long index = scanner.nextLong();\n        solution1(index);\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]){\n\n        PrintWriter out = new PrintWriter(System.out);\n        Reader in = new Reader();\n        long k = in.nextLong();\n        if(k<10){\n            System.out.println(k);\n            return;\n        }\n        long sum = 0;\n        long cur = 9;\n        long prev = 0;\n        int count = 1;\n        while(k>cur){\n            k= k - cur;\n            sum  = sum + cur/count;\n            prev = cur;\n            cur = 9*(count+1)*(long)Math.pow(10,count);\n            count++;\n        }\n\n        long num = k/(count);\n        sum = sum + num;\n\n        if(k%count == 0){\n            System.out.println(sum%10);\n        }\n        else{\n            sum++;\n            k = k%(count);\n            String str = String.valueOf(sum);\n            System.out.println(str.charAt((int)k-1));\n        }\n\n\n\n\n\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "      public static void main(String args[])throws IOException\n         Reader ob=new Reader();\n        Writer out=new Writer(System.out);\n        Random oo=new Random();\n        long k=ob.nL(),ans=0,p=9,num=0;\n        for(int i=1;i<18;i++)\n        {\n            if(num+i*p<k)\n            {\n                num+=i*p;p*=10;\n                ans=0;\n                for(int j=0;j<i;j++)\n                ans=9+ans*10;\n            }\n            else\n            {\n                long left=k-num;\n                long r=left/i;\n                left-=r*i;\n                ans+=r;\n                if(left>0)\n                {\n                 String s=Long.toString(ans+1);\n                \n                out.pln(s.charAt((int)left-1));\n            }\n            else\n            {\n                \n                String s=Long.toString(ans);\n                \n                out.pln(s.charAt(i-1-(int)left));\n            }\n                break;\n            }\n            \n        }\nout.flush();\n}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        FastScanner in = new FastScanner();\n        long []a = new long[16];\n        a[0] = 0;\n        for(int i=1; i<16; ++i)\n            a[i] = a[i-1]+((9*(long)Math.pow(10, i-1))*i);\n        long N = in.nextLong();\n        int pos = 0;\n        for(int i=0; i<16; ++i){\n            if(N<=a[i]){\n                pos = i;\n                break;\n            }\n        }\n        if(pos==1){\n            System.out.println(N);\n            System.exit(0);\n        }\n        long prev = a[pos-1];\n        long curr = N;\n        long rem = curr - prev;\n        long ans = 0;\n        for(int i=1; i<pos; ++i){\n            ans = ans*10 + 9;\n        }\n        long g = (rem+(pos-1))/pos;\n        long take = (rem+(pos-1))%pos;\n        long number = ans + g;\n        String str = Long.toString(number);\n        System.out.println(str.charAt((int)take));\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args){\n\n        Scanner sc=new Scanner(System.in);\n        long k,c,n,d;\n        c=1;\n        d=9;\n        n=1;\n        k= sc.nextLong();\n        while(k>(c*d)) {\n            k-=(c*d);\n            n*=10;\n            d*=10;\n            c++;\n        }\n        n+=(k-1)/c;\n        char[] num = String.valueOf(n).toCharArray();\n        System.out.println(num[(int)((k-1)%c)]);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc=new Scanner(System.in);\n\t\tBigInteger k=sc.nextBigInteger();\n\t\t\n\t\t\n\t\tBigInteger i=new BigInteger(\"0\");\n\t\tint d=0;\n\t\t\n\t\tBigInteger a=new BigInteger(\"0\");\n\t\twhile(i.compareTo(k)!=1)\n\t\t{\n\t\t\tif(i.compareTo(k)==0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\td++;\n\t\t\t\tBigInteger temp=new BigInteger(\"0\");\n\t\t\t\tfor(int j=0;j<d;j++)\n\t\t\t\t{\n\t\t\t\t\ttemp=temp.multiply(new BigInteger(\"10\")).add(new BigInteger(\"9\"));\n\t\t\t\t}\n\t\t\t\ti=i.add(new BigInteger(Integer.toString(d)).multiply(temp.subtract(a)));\n\t\t\t\t//i=i+d*(temp-a);\n\t\t\t\ta=temp;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t//System.out.println(a) ;\n\t\tBigInteger b=a.divide(new BigInteger(\"10\"));\n\t\tBigInteger t=b;\n\t\tBigInteger l=t;\n\t\t//System.out.println(b);\n\t\tint dig=0;\n\t\n\t\tif(b.equals(new BigInteger(\"0\")))\n\t\t{\n\t\t\tdig=0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(b.compareTo(new BigInteger(\"0\"))==1)\n\t\t\t{\n\t\t\t\tdig++;\n\t\t\t\tb=b.divide(new BigInteger(\"10\"));\n\t\t\t}\n\t\t}\n\t\t\n\t\t//System.out.println(dig);\n\t\tint flag=dig+1;\n\t\tBigInteger num=new BigInteger(\"0\");\n\t\tb=t;\n\t\twhile(b.compareTo(new BigInteger(\"0\"))==1)\n\t\t{\n\t\t\t//System.out.println(\"sun\");\n\t\t\tBigInteger rev=b.divide(new BigInteger(\"10\"));\n\t\t\tnum=num.add(new BigInteger(Integer.toString(dig)).multiply(b.subtract(rev)));\n\t\t\t//num+=(b-rev)*dig;\n\t\t\tb=b.divide(new BigInteger(\"10\"));\n\t\t\tdig--;\n\t\t\t\n\t\t}\n\t\t//System.out.println(num);\n\t\t//System.out.println(t);\n\t\tBigInteger net=k.subtract(num);\n\t\tBigInteger div=net.divide(new BigInteger(Integer.toString(flag)));\n\t\tint q;\n\t\tif(net.mod(new BigInteger(Integer.toString(flag))).equals(new BigInteger(\"0\")))\n\t\t{\n\t\t\t//System.out.println(\"s\");\n\t\t\t//System.out.println();\n\t\t\tq=0;\n\t\t\tt=t.add(div);\n\t\t\tSystem.out.println(t.mod(new BigInteger(\"10\")));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//System.out.println(div);\n\t\t\t//System.out.println(flag);\n\t\t\t//System.out.println(net);\n\t\t\tBigInteger r=div.multiply(new BigInteger(Integer.toString(flag)));\n\t\t\tr=net.subtract(r);\n\t\t\t//q=Integer.toString(net%flag).length();\n\t\t\t\n\t\t\t//System.out.println(q);\n\t\t\t//System.out.println(t);\n\t\t\t//System.out.println(pig);\n\t\t\t//System.out.println(w);\n\t\t\tt=t.add(div.add(new BigInteger(\"1\")));\n\t\t\t//System.out.println(r);\n\t\t\tl=t;\n\t\t\tint pig=0;\n\t\t\twhile(t.compareTo(new BigInteger(\"0\"))==1)\n\t\t\t{\n\t\t\t\tpig++;\n\t\t\t\tt=t.divide(new BigInteger(\"10\"));\n\t\t\t}\n\t\t\t//System.out.println(pig);\n\t\t\tBigInteger p=new BigInteger(Integer.toString(pig));\n\t\t\tBigInteger rem=p.subtract(r);\n\t\t\t//System.out.println(l);\n\t\t\twhile(rem.compareTo(new BigInteger(\"0\"))==1)\n\t\t\t{\n\t\t\t\tl=l.divide(new BigInteger(\"10\"));\n\t\t\t\trem=rem.subtract(new BigInteger(\"1\"));\n\t\t\t}\n\t\t\t//System.out.println(l);\n\t\t\t//System.out.println(r);\n\t\t\t//System.out.println(c);\n\t\t\t//int f=t/w;\n\t\t\t//System.out.println(f);\n\t\t\tSystem.out.println(l.mod(new BigInteger(\"10\")));\n\t\t}\n\t\t\n\t\t\n\t\t\n\n\t}\n", "complexity": "logn"}
{"code": "        public static void main(String[] args){\n     \n            Scanner sc=new Scanner(System.in);\n            long k,c,n,d;\n            c=1;\n            d=9;\n            n=1;\n            k= sc.nextLong();\n            while(k>(c*d)) {\n                k-=(c*d);\n                n*=10;\n                d*=10;\n                c++;\n            }\n            n+=(k-1)/c;\n            char[] num = String.valueOf(n).toCharArray();\n            System.out.println(num[(int)((k-1)%c)]);\n        }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        long n = Long.parseLong(r.readLine());\n        if (n < 10) {\n            System.out.print(n);\n            return;\n        }\n        \n        int len = 1;\n        long edge = 10;\n        long prev = 0;\n        long prepow = 0;\n        while (edge - 1 < n) {\n            prepow = (long)Math.pow(10, len);\n            long pow = prepow * 10;\n            prev = edge;\n            edge = edge + (pow - prepow) * (len + 1);\n            len += 1;\n        }\n\n        long b = n - prev;\n        long c = b / len;\n        int rem = (int)(b % len);\n        String s = Long.toString(prepow + c).charAt(rem) + \"\";\n\n        System.out.print(s);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tFastReader sc = new FastReader();\n\t\tOutputStream outputstream = System.out;\n\t\tPrintWriter out = new PrintWriter(outputstream);\n\n\t\tlong n = sc.nextLong();\n\t\tlong[] arr = new long[14];\n\t\tfor(int i = 1; i <= 13; i++){\n\t\t\tarr[i] = (long)Math.pow(10, i)-(long)Math.pow(10, i-1);\n\t\t}\n\t\tlong total = 0;\n\t\tfor(int i = 1; i <= 13; i++){\n\t\t\tif(total+(long)i*arr[i]>=n){\n\t\t\t\tlong ans = n-total;\n\t\t\t\tlong rest = ans;\n\t\t\t\tif(ans%i!=0){\n\t\t\t\t\tans /= i;\n\t\t\t\t\tans++;\n\t\t\t\t} else {\n\t\t\t\t\tans /= i;\n\t\t\t\t}\n\t\t\t\tans += (long)Math.pow(10, i-1)-1;\n\t\t\t\tString str = Long.toString(ans);\n\t\t\t\tint ind = (rest%i==0) ? i-1 : (int)(rest%i)-1;\n\t\t\t\tout.println(str.charAt(ind));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal = total+(long)i*arr[i];\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws IOException {\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        long k=Long.parseLong(br.readLine());\n        long ans=9*(int)Math.pow(10,0);\n        int c=0;\n        long start=0;\n        while(k>ans) {\n            c++;\n            start=ans;\n            ans+=9*(long)Math.pow(10,c)*(c+1);\n\n        }\n        long ms=(k-start-1)%(c+1);\n        long a=(long)Math.pow(10,c)+(k-start-1)/(c+1);\n        System.out.println((a+\"\").charAt((int)ms));\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer token = new StringTokenizer(\"\");\n        String temp[] = br.readLine().split(\" \");\n        long pos = Long.parseLong(temp[0]);\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n        if (pos<10)\n        {\n            out.println(pos);\n        }\n        else\n        {\n            out.println(findDigitSequence(pos));\n        }\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        long k = Long.parseLong(br.readLine());\n        long temp = 9 * (int)Math.pow(10,0);\n        int count = 0;\n        long initial = 0;\n        while(k > temp) {\n            count++;\n            initial = temp;\n            temp += 9 * (long)Math.pow(10,count)*(count+1);\n        }\n        long index = (k-initial-1)%(count+1);\n        long num = (long)Math.pow(10,count) + (k-initial-1)/(count+1);\n        System.out.println((num+\"\").charAt((int)index));\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String... args) throws Exception {\n    br = new BufferedReader(new InputStreamReader(System.in));\n    pw = new PrintWriter(new BufferedOutputStream(System.out));\n    new P1177B().run();\n    br.close();\n    pw.close();\n    System.err.println(\"\\n[Time : \" + (System.currentTimeMillis() - startTime) + \" ms]\");\n    long gct = 0, gcc = 0;\n    for (GarbageCollectorMXBean garbageCollectorMXBean : ManagementFactory.getGarbageCollectorMXBeans()) {\n      gct += garbageCollectorMXBean.getCollectionTime();\n      gcc += garbageCollectorMXBean.getCollectionCount();\n    }\n    System.err.println(\"[GC time : \" + gct + \" ms, count = \" + gcc + \"]\");\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastReader sc = new FastReader();\n\t\t// int t = sc.nextInt();\n\t\t// while (t-- > 0) {\n\t\tlong n = sc.nextLong();\n\n\t\tif (n < 10) {\n\t\t\tSystem.out.println(n);\n\t\t\treturn;\n\t\t} else {\n\t\t\tlong sum = 0;\n\t\t\tlong cur = 9;\n\t\t\tlong prev = 0;\n\t\t\tint count = 1;\n\n\t\t\twhile (n > cur) {\n\t\t\t\tn -= cur ;\n\t\t\t\tsum += cur / count;\n\t\t\t\tprev = cur;\n\t\t\t\tcur = 9 * (count + 1) * (long)Math.pow(10, count);\n\t\t\t\tcount ++;\n\t\t\t}\n\n\t\t\tsum = sum + (n / count);\n\n\t\t\tif (n % count == 0) {\n\t\t\t\tSystem.out.println(sum % 10);\n\t\t\t} else {\n\t\t\t\tsum++;\n\t\t\t\tn = n % count;\n\t\t\t\tString s = String.valueOf(sum);\n\t\t\t\tSystem.out.println(s.charAt((int)n - 1));\n\t\t\t}\n\t\t\t// }\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        \n//      String fileName = \"C://Users/user/eclipse-workspace/algo/example.txt\";\n//      String outFile = \"C://Users/user/eclipse-workspace/algo/example-out.txt\";\n//      String fileName = \"C://Users/user/eclipse-workspace/algo/A-small-practice.in\";\n//      String outFile = \"C://Users/user/eclipse-workspace/algo/A-small-out.txt\";\n//      String fileName = \"C://Users/user/eclipse-workspace/algo/A-large-practice.in\";\n//      String outFile = \"C://Users/user/eclipse-workspace/algo/A-large-out.txt\";\n//      String fileName = \"/Users/mobike/IdeaProjects/algo/B-small-practice.in\";\n//      String outFile = \"/Users/mobike/IdeaProjects/algo/B-small-out.txt\";\n//      String fileName = \"/Users/mobike/IdeaProjects/algo/B-large-practice.in\";\n//      String outFile = \"/Users/mobike/IdeaProjects/algo/B-large-out.txt\";\n//      String fileName = \"C://Users/user/eclipse-workspace/algo/C-small-practice.in\";\n//      String outFile = \"C://Users/user/eclipse-workspace/algo/C-small-out.txt\";\n//      String fileName = \"C://Users/user/eclipse-workspace/algo/D-small-practice.in\";\n//      String outFile = \"C://Users/user/eclipse-workspace/algo/D-small-out.txt\";\n//      String fileName = \"C://Users/user/eclipse-workspace/algo/D-large-practice.in\";\n//      String outFile = \"C://Users/user/eclipse-workspace/algo/D-large-out.txt\";\n\n        Scanner scanner = new Scanner(System.in);\n\n//        int T = scanner.nextInt();\n//        for (int i = 1; i <= T; i++) {\n            CodeForces jam = new CodeForces();\n            jam.run(scanner);\n//        }\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n//\t\tBufferedReader br = new BufferedReader(new FileReader(\"F:/books/input.txt\"));\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tLong n = Long.parseLong(br.readLine());\n\t\tlong[] p = new long[15];\n\t\tint i;\n\t\tp[0]=1;\n\t\tfor(i=1;i<15;p[i]=p[i-1]*10,i++);\n\t\tfor(i=1;i*p[i-1]*9L<n;n-=i*p[i-1]*9L,i++);\n\t\tn--;\n\t\tint v = (int) (n%i);\n\t\tn/=i;\n\t\tn+=p[i-1];\n\t\tString s = n.toString();\n\t\tSystem.out.println(s.charAt(v));\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tinitReader(System.in);\n\n\n//\t\tint T = nextInt();\n//\t\tfor (int i = 1; i <= T; i++)\n\t\t\tsolve();\n\n\t\tpw.flush();\n\t}\n", "complexity": "logn"}
{"code": "  public static void main(String[] args){ new Main(); }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args){\n\n        Scanner sc=new Scanner(System.in);\n        long k,c,n,d;\n        c=1;\n        d=9;\n        n=1;\n        k= sc.nextLong();\n        while(k>(c*d)) {\n            k-=(c*d);\n            n*=10;\n            d*=10;\n            c++;\n        }\n        n+=(k-1)/c;\n        char[] num = String.valueOf(n).toCharArray();\n        System.out.println(num[(int)((k-1)%c)]);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong k = sc.nextLong();\n\t\tgetResult(k);\n\t\tsc.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args){\n\n        Scanner sc=new Scanner(System.in);\n        long k,c,n,d;\n        c=1;\n        d=9;\n        n=1;\n        k= sc.nextLong();\n        while(k>(c*d)) {\n            k-=(c*d);\n            n*=10;\n            d*=10;\n            c++;\n        }\n        n+=(k-1)/c;\n        char[] num = String.valueOf(n).toCharArray();\n        System.out.println(num[(int)((k-1)%c)]);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        long K = Long.valueOf(br.readLine());\n        long n = 0;\n        long k = 0; //len * Math.pow(10, len) * 0.9;\n        long len = 0;\n        while(true){\n            len++;\n            long preK = k;\n            long preN = n;\n            k += len * Math.pow(10, len) * 0.9;\n            n += Math.pow(10, len) * 0.9;\n            if(K < k) {\n                k = preK;\n                n = preN;\n                break;\n            }\n        }\n        long step = len - 1;\n        while(true){\n            while(k <= K){\n                long preK = k;\n                long preN = n;\n                if(step == 0){\n                    k += len;\n                    n++;\n                }else{\n                    k += len * Math.pow(10, step) * 0.9;\n                    n += Math.pow(10, step) * 0.9;\n                }\n                if(k == K || (k >= K && k - K < len)){\n                    //System.out.println(k);\n                    //System.out.println(n);\n                    String nStr = Long.toString(n);\n                    System.out.println(nStr.charAt(nStr.length() - (int)(k-K) - 1));\n                    return;\n                }\n                if(K < k){\n                    k = preK;\n                    n = preN;\n                    break;\n                }\n            }\n            step--;\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Reader in = new Reader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        BDigitsSequenceHardEdition solver = new BDigitsSequenceHardEdition();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n       Scanner sc = new Scanner(System.in);\n       long n = sc.nextLong();\n       long itrIdx = 0;\n       long itr = 0;\n       long num = 0;\n       while(itrIdx < n){\n           itrIdx += (itr+1)*(Math.pow(10,itr+1) - Math.pow(10,itr));\n           num+= (Math.pow(10,itr+1) - Math.pow(10,itr));\n           itr++;\n       }\n\n        itrIdx -= itr*(Math.pow(10,itr)-Math.pow(10,itr-1));\n        num -= (Math.pow(10,itr)-Math.pow(10,itr-1));\n        long lastNum = num + ((n-itrIdx)/itr);\n        long lastNumIndex = itrIdx + (itr* (lastNum-num));\n\n        if(lastNumIndex == n){\n            lastNumIndex = lastNumIndex-itr;\n            lastNum -=1;\n        }\n\n        String nextNum = String.valueOf(lastNum+=1);\n        System.out.println(nextNum.charAt((int) (n-lastNumIndex-1)));\n\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n       Scanner sc = new Scanner(System.in);\n       long n = sc.nextLong();\n       long itrIdx = 0;\n       long itr = 0;\n       long num = 0;\n       while(itrIdx < n){\n           itrIdx += (itr+1)*(Math.pow(10,itr+1) - Math.pow(10,itr));\n           num+= (Math.pow(10,itr+1) - Math.pow(10,itr));\n           itr++;\n       }\n\n        itrIdx -= itr*(Math.pow(10,itr)-Math.pow(10,itr-1));\n        num -= (Math.pow(10,itr)-Math.pow(10,itr-1));\n        long lastNum = num + ((n-itrIdx)/itr);\n        long lastNumIndex = itrIdx + (itr* (lastNum-num));\n\n        if(lastNumIndex == n){\n            lastNumIndex = lastNumIndex-itr;\n            lastNum -=1;\n        }\n\n        String nextNum = String.valueOf(lastNum+=1);\n        System.out.println(nextNum.charAt((int) (n-lastNumIndex-1)));\n\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException\n\t\tnew Berland().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner s = new Scanner(System.in);\n\t\tlong k = s.nextLong();\n\t\t\n\t\tlong dp[] = new long[13];\n\t\tlong x = 9; int i = 1;\n\t\t\n\t\tlong ansx = 0; int ansi = 0;\n\t\tfor(; i < 13; i++) {\n\t\t\tdp[i] = dp[i - 1] + x * i;\n\t\t\tx *= 10;\n\t\t\tif(k <= dp[i]) {\n\t\t\t\tansx = x;\n\t\t\t\tansi = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(dp[i] > 1000000000000l) break;\n\t\t}\n\t\t\n\t\tif(ansi < 2) {\n\t\t\tSystem.out.println(k);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tk -= dp[ansi - 1];\n\t\t\n\t\t//System.out.println(k);\n\t\t\n\t\tlong st = (long)Math.pow(10, ansi - 1);\n\t\t\n\t\tlong div = (k / ansi);\n\t\tif(k % ansi == 0) div--;\n\t\t\n\t\tk -= div * ansi;\n\t\t\n\t\t//System.out.println(k);\n\t\tSystem.out.println(findKthDigit(st + div, k));\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) \n\t\tlong k = (new Scanner(System.in)).nextLong();\n\n\t\t//k = 56\n\t\t//League 1: 0 - 9\n\t\t//League 2: 10 - 99\n\t\t//League 3: 100 - 999..\n\t\t//System.out.println(\"k = \"+k);\n\t\tlong league = 1;\n\t\tlong irrelevancy = 0;\n\t\twhile(true)\n\t\t{\t\n\t\t\tirrelevancy += league * (Math.pow(10, league) - Math.pow(10, league-1));\n\t\t\tif(k > irrelevancy)\n\t\t\t\tleague ++;\n\t\t\t//league = 1 : k = 56 > 9\n\t\t\t//league = 2 : k = 56 < 99\n\t\t\t//therefore league = 2\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\t//System.out.println(\"League = \"+league);\n\t\tirrelevancy = 0;\n\t\tfor(long i=1; i<league; i++)\n\t\t\tirrelevancy += i * (Math.pow(10, i) - Math.pow(10, i-1));\n\n\t\t//irrelevancy = 1 * (10^1 - 10^0) = 9\n\n\t\tlong modified_k = k - irrelevancy;\n\n\t\t//modified_k = 56 - 9 = 47\n\t\t//System.out.println(\"modified k = \"+ modified_k);\n\t\tlong number = (long)(Math.pow(10, league-1)) - 1 + modified_k / league;\n\t\t//System.out.println(\"number = \"+number);\n\n\t\tif(modified_k % league == 0)\n\t\t\tSystem.out.println(number % 10);\n\t\telse\n\t\t{\n\t\t\tnumber ++;\n\t\t\tlong position_of_digit = (long)(modified_k % league);\n\t\t\t//System.out.println(position_of_digit);\n\t\t\t//number = 24\n\t\t\t//position_of_digit = 47 % 2 = 1\n\t\t\tSystem.out.println((Long.toString(number)).charAt((int)position_of_digit-1));\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tinitReader(System.in);\n\n\n//\t\tint T = nextInt();\n//\t\tfor (int i = 1; i <= T; i++)\n\t\t\tsolve();\n\n\t\tpw.flush();\n\t}\n", "complexity": "logn"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            long k=Long.parseLong(br.readLine());\n            long l=1,h=1000000000000l;\n            long p[]=new long[13];\n            for(int i=1;i<=12;i++)\n            {\n                  long ll=9*i;\n                  p[i]=ll*(long)Math.pow(10,i-1);\n                  p[i]+=p[i-1];\n            }\n            while(h-l>1)\n            {\n                  long mid=(l+h)/2;\n                  long num=(long)(Math.log(mid)/Math.log(10));\n                  long l1=p[(int)num]+(num+1)*(mid-(long)Math.pow(10,num));\n                  long l2=p[(int)num]+(num+1)*(mid-(long)Math.pow(10,num)+1);\n                  if(k<=l1)\n                   h=mid;\n                  else if(k>l2)\n                   l=mid;\n                  else\n                  { l=mid; h=mid; }\n            }\n            \n            if(h-l==1)\n            { \n                long num=(long)(Math.log(h)/Math.log(10));\n                long l1=p[(int)num]+(num+1)*(h-(long)Math.pow(10,num));\n                long l2=p[(int)num]+(num+1)*(h-(long)Math.pow(10,num)+1);\n                if(k>l1 && k<=l2)\n                { l=h; }\n            }\n            \n            long n=(long)(Math.log(l)/Math.log(10));\n            long u=p[(int)n]+(n+1)*(l-(long)Math.pow(10,n));\n            k-=u;\n            String ss=String.valueOf(l);\n            //System.out.println(l+\" \"+k);\n            System.out.println(ss.charAt((int)(k-1)));\n      }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tlong inputNum = 0;\n\t\tString finalResult = \"\";\n\n\t\tinputNum = scanner.nextLong();\n\t\tlong upperLimitResult = 0;\n\t\tlong lowerLimitResult = 0;\n\t\tint multiplier = 0;\n\t\tdo {\n\t\t\tmultiplier++;\n\t\t\tlowerLimitResult = upperLimitResult;\n\t\t\tupperLimitResult += 9 * Math.pow(10, multiplier - 1) * (multiplier);\n\t\t} while (inputNum > upperLimitResult);\n\t\tlong remainderFromLowerRange = inputNum - lowerLimitResult;\n\t\tlong repititions = 0;\n\t\tif (multiplier > 1)\n\t\t\trepititions = (remainderFromLowerRange - 1 > 0 ? remainderFromLowerRange - 1 : 0) / multiplier;\n\t\tlong currentNumber = (long) (Math.pow(10, multiplier - 1) + repititions);\n\t\tremainderFromLowerRange = remainderFromLowerRange - repititions * multiplier;\n\t\tlong digitIndex = remainderFromLowerRange < multiplier ? multiplier - remainderFromLowerRange\n\t\t\t\t: remainderFromLowerRange % multiplier;\n\n\t\tif (multiplier == 1) {\n\t\t\tfinalResult = (remainderFromLowerRange % 10) + \"\";\n\t\t} else {\n\t\t\tint charToGet = (int) ((multiplier - 1) - digitIndex);\n\t\t\tfinalResult = (currentNumber + \"\").charAt(charToGet) + \"\";\n\t\t}\n\t\tSystem.out.print(finalResult);\n\t\tscanner.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[])\n        FastReader input=new FastReader();\n        PrintWriter out=new PrintWriter(System.out);\n        int T=1;\n        while(T-->0)\n        {\n            long k=input.nextLong();\n            long v=9;\n            long s=0;\n            int x=1;\n            while(true)\n            {\n                if(s+v*x>k)\n                {\n                    break;\n                }\n                s+=v*x;\n                v*=10;\n                x++;\n            }\n            if(s==k)\n            {\n                out.println(9);\n            }\n            else\n            {\n                long d=k-s;\n                long u=d/x;\n                long rem=d%x;\n                long nu=(long)Math.pow(10,x-1);\n                nu+=u;\n                if(rem==0)\n                {\n                    nu--;\n                    out.println(nu%10);\n                }\n                else\n                {\n                    String str=String.valueOf(nu);\n                    out.println(str.charAt((int)(rem-1)));\n                }\n            }\n        }\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        long k = rl(), n = -1;\n        for (long l = 0, r = k; l <= r; ) {\n            long m = l + (r - l) / 2;\n            if (f(m) < k) {\n                n = m + 1;\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        k -= f(n - 1);\n        char[] s = Long.toString(n).toCharArray();\n        prln(s[(int) k - 1]);\n        close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong k = scan.nextLong();\n\t\tlong k2 = k - 10;\n\t\tint cont = 1, pos;\n\t\tString out; //System.out.println(getString((int)k));\n\t\t\n\t\tif(k <= 9)\n\t\t\tSystem.out.println(k);\n\t\telse {\n\t\t\tcont++;\n\t\t\twhile(k2 >= cont*(long)(Math.pow(10, cont)-Math.pow(10, cont-1))) {\n\t\t\t\tk2 -= cont*(long)(Math.pow(10, cont)-Math.pow(10, cont-1));\n\t\t\t\tcont++;\n\t\t\t}\n\t\t\tpos = (int)(k2%cont);\n\t\t\tk2 /= cont;\n\t\t\tk2 += (long)Math.pow(10, cont-1);\n\t\t\tout = String.valueOf(k2);\n\t\t\tSystem.out.println(out.charAt(pos));\n\t\t}\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong k=sc.nextLong();\n\t\tlong bi=bin(k);\n\t\tString str=bi+\"\";\n\t\tSystem.out.println(str.charAt((int) diff));\n\t\t\n\t\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long index = in.nextLong();\n        if (index < 10) {\n            //one digit\n            System.out.println(index);\n        } else if (index < 190) {\n            //two digits\n            solve(2, index, 10, 10);\n\n        } else if (index < 2890) {\n            //three digits \n            solve(3, index, 190, 100);\n\n        } else if (index < 38890) {\n            //four digits \n            solve(4, index, 2890, 1000);\n\n            //start changing ------------------------------------------------------------\n        } else if (index < 488890) {\n            //five digits \n            solve(5, index, 38890, 10000);\n\n        } else if (index < 5888890) {\n            //six digits \n            solve(6, index, 488890, 100000);\n\n        } else if (index < 68888890) {\n            //seven digits \n            solve(7, index, 5888890, 1000000);\n\n        } else if (index < 788888890) {\n            //eight digits \n            solve(8, index, 68888890, 10000000);\n\n        } else if (index < 8888888890l) {\n            //nign digits \n            solve(9, index, 788888890, 100000000);\n\n        } else if (index < 98888888890l) {\n            //ten digits \n            solve(10, index, 8888888890l, 1000000000);\n\n        } else {\n            solve(11, index, 98888888890l, 10000000000l);\n\n        }\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException{\n        FastReader in = new FastReader();\n        double digit = in.nextDouble();\n        double temp = digit;\n        long[] seq = new long[13];\n        for(int i = 1; i<13; i++){\n            seq[i] = (9* (long)Math.pow(10,i-1)) * (i) +seq[i-1];\n        }\n        int power = 0;\n        for(int i = 0; i< 13; i++){\n            if(temp-seq[i] >0){\n                continue;\n            }\n            else{\n                power = i;\n                break;\n            }\n        }\n        long place = (long) Math.ceil(digit - seq[power-1]);\n        place = (long)Math.ceil(place/power);\n        if((digit - seq[power-1])%power>0){\n            place++;\n        }\n\n        long num = (long) (place + Math.pow(10,power-1)-1);\n        String num2 = Long.toString(num);\n        long end =  seq[power-1] + place*power;\n        long answer = (long)(power-(end - digit));\n        //System.out.println(\"Digit is at the \" + power + \" power\");\n        //System.out.println(\"Digit is at the \" + place + \" number of the sequence\");\n        //System.out.println(\"Number is \" + num);\n        //System.out.println(\"Digit is at the \" + answer+  \" in that number\");\n        //System.out.println(\"Answer is \" + num2.charAt((int)answer-1));\n        System.out.println(num2.charAt((int)answer-1));\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        FastReader in = new FastReader();\n\n        int q = 1;\n\n        while (q-- > 0) {\n            long k;\n            k = in.nextLong();\n            Query(k);\n        }\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new Main().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 28).start();\n        else new Main().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tlong k = input.nextLong();\n\t\tSystem.out.println(result(k));\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\tlong flag,flag1,flag2,temp,temp2,temp1,count,counter,l;\n\t\tHashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();\n\t\t/*\n\t\t    if(hm.containsKey(z))\n\t\t        hm.put(z,hm.get(z)+1);\n\t\t    else\n\t\t        hm.put(z,1);\n\t\t */       \n        ArrayList<Integer> arr=new ArrayList<Integer>();\n        HashSet<Integer> set=new HashSet<Integer>();\n        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();\n        \n        \n       //for(i=1;i<200;i++)\n       //{\n        long k=in.nl();\n\t\ttemp=9;l=1;temp2=0;\n\t\twhile(true)\n\t\t{   if(k<=temp2+temp*l)\n\t\t        {k-=temp2;break;}\n\t\t    else\n\t\t    {   temp2+=temp*l;\n\t\t        temp*=10;\n\t\t        l++;\n\t\t    }      \n\t\t}\n\t\tlong z=((k-1)/l);\n\t\t//out.println(i+\":- \"+l+\" \"+((k-1)/l)+\"  \"+(k%l==0?l:k%l));\n\t\tlong no=(long)Math.pow(10,(l-1))+z;\n\t\t//out.println(no);\n\t\tint index=(int)(k%l==0?l:k%l)-1;\n\t\tString p=Long.toString(no);\n\t\t//out.println(p+\" \"+index);\n\t\tout.println(p.charAt(index));\n       //}\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n\n        Scanner s = new Scanner(System.in);\n        long k = s.nextLong();\n        if (k<=9)\n            System.out.println(k);\n        else\n        {\n\n            int c = 1;\n            while(k>c*((Math.pow(10,c)) - Math.pow(10,c-1)))\n            {\n                k-=c*((Math.pow(10,c)) - Math.pow(10,c-1));\n//                System.out.println(k + \" hello \" + c);\n                c++;\n            }\n//            System.out.println(\"k is \" + k);\n            long mo = k%c;\n\n//            System.out.println(\"mo is \" + mo);\n            k = k/c;\n\n            if (mo == 0) {\n                mo = c;\n                k--;\n            }\n            mo--;\n//            k = Math.max(k-1,0);\n//            System.out.println(\"k/c is \" + k);\n            long j = (long) (Math.pow(10,c-1) + k);\n\n            String j1 = \"\" + j;\n//            System.out.println(\"j1 is \" + j1);\n//            System.out.println(\"final ans= \" + j1.charAt((int)mo));\n//            System.out.println();\n            System.out.println(j1.charAt((int)mo));\n        }\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        long k = new Scanner(System.in).nextLong();\n        long i = 1,t=0, c = 9,digits = 0,l=0,k2=k;\n        while(t<k){\n            l = t;\n            t += i*c;\n            i++;\n            c*=10;\n            digits++;\n        }\n        k = k-l;\n        long lastNumber = (long)Math.pow(10,digits-1)-1;\n        long p = k/digits,q=k%digits;\n        long finalNumber =lastNumber+p;\n        if(q!=0){\n            finalNumber++;\n        }\n            k = k-digits*p;\n            if(k<=0)\n                k+=digits;\n        String ans = \"\"+finalNumber;\n        int index = (int)(k-1);\n        print(\"\"+ans.charAt(index));\n    }   \n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tFastReader sc = new FastReader();\n\t\tOutputStream outputstream = System.out;\n\t\tPrintWriter out = new PrintWriter(outputstream);\n\n\t\tlong n = sc.nextLong();\n\t\tlong[] arr = new long[14];\n\t\tfor(int i = 1; i <= 13; i++){\n\t\t\tarr[i] = (long)Math.pow(10, i)-(long)Math.pow(10, i-1);\n\t\t}\n\t\tlong total = 0;\n\t\t/*for(int i = 1; i <= 13; i++) out.print(arr[i] + \" \");\n\t\tout.println();*/\n\t\tfor(int i = 1; i <= 13; i++){\n\t\t\tif(total+(long)i*arr[i]>=n){\n\t\t\t\tlong ans = n-total;\n\t\t\t\tlong rest = ans;\n\t\t\t\t//System.out.println(rest);\n\t\t\t\tif(ans%i!=0){\n\t\t\t\t\tans /= i;\n\t\t\t\t\tans++;\n\t\t\t\t} else {\n\t\t\t\t\tans /= i;\n\t\t\t\t}\n\t\t\t\tans += (long)Math.pow(10, i-1)-1;\n\t\t\t\tString str = Long.toString(ans);\n\t\t\t\tint ind = (rest%i==0) ? i-1 : (int)(rest%i)-1;\n\t\t\t\t//System.out.println(ind);\n\t\t\t\tout.println(str.charAt(ind));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal = total+(long)i*arr[i];\n\t\t\t//System.out.println(total);\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(System.out);\n\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            long k=Long();\n            Solution sol=new Solution(out);\n            sol.solution(k);\n        }\n        out.flush();\n\n    }\n", "complexity": "logn"}
{"code": "", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException  {\n\t\tBufferedReader inputs = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tlong indexPosition = Long.parseLong(inputs.readLine());\n\t\t\n\t\tinputs.close();\n\t\t\n\t\t//Isolate possible combinations so that all further numbers will have the same length.\n\t\tint tenFactor = 0;\n\t\tlong lowerBound = 1;\n\t\tlong upperBound = (long) (Math.pow(10, 12));\n\t\tlong lowerIndexBound = 1;\n\t\tlong redIndex = 0;\n\t\tredIndex += indexPosition;\n\t\t\n\t\twhile(redIndex > 0) {\n\t\t\tredIndex -= (long) (9*Math.pow(10, tenFactor)*(tenFactor + 1));\n\t\t\tif(redIndex <= 0) { //Stage 1: Completed Successfully.\n\t\t\t\tlowerBound = (long) (Math.pow(10, tenFactor));\n\t\t\t\tupperBound = (long) (Math.pow(10, tenFactor + 1) - 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tlowerIndexBound += (long) (9*Math.pow(10, tenFactor)*(tenFactor + 1));\n\t\t\ttenFactor++;\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(custBinSearch(lowerBound, upperBound, lowerIndexBound, tenFactor, indexPosition));\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong tc;\n\t\ttc = sc.nextLong();\n\t\tSystem.out.println(solve(1, 1, tc));\n\t\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long N = in.nextLong();\n        long answer = solve(N, 0, 1, 1);\n        System.out.println(answer);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        long b=0;long p=1;\n        Scanner s=new Scanner(System.in);\n        long m=s.nextLong();\n        long x=1;\n        do{\n            p=(m+b)/x;\n            b=10*b+10;\n            x++;\n        }while(p/(long)Math.pow(10, x-1)!=0);\n        rest :\n        x--;b=b/10-1;\n        b=x*p-b;\n        b=m-b;\n        b=x-b-1;\n        p/=(long)Math.pow(10, b);\n        p%=10;\n        System.out.println(p);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        D solver = new D();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tinit();\n\t\tint N = ONE_TEST_CASE ? 1 : sc.nextInt();\n\t\tIOUtils.run(N);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Test4().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        while (T-- > 0) {\n            int n = sc.nextInt();\n            BigInteger k = sc.nextBigInteger();\n            int ans = ss(n, k);\n            if (ans == -1) {\n                System.out.println(\"NO\");\n            } else {\n                System.out.println(\"YES \" + ans);\n            }\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new TaskD().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) {\n        Scanner sca = new Scanner(System.in);\n        long k,n;\n        long ans;\n        long[] pw = new long[33];\n        pw[1]=4;\n        pw[0]=1;\n        for(int i=2;i<=31;i++)\n            pw[i]=pw[i-1]<<2;\n        int t;\n        t = sca.nextInt();\n        for(int cas=1;cas<=t;cas++) {\n            n = sca.nextLong();\n            k = sca.nextLong();\n            ans = n;\n            long last, path = 1;\n            for (int i = 0; ; i++) {\n                if ((pw[i + 1] - 1) / 3 > k) {\n                    ans -= i;\n                    last = k - (pw[i] - 1) / 3;\n                    break;\n                }\n                path *= 2;\n            }\n            long sp = path * 2 - 1;\n            if (ans < 0 || (ans == 0 && last > 0)) {\n                System.out.println(\"NO\");\n                continue;\n            }\n            BigInteger sq = BigInteger.valueOf(path).multiply(BigInteger.valueOf(path)).subtract(BigInteger.valueOf(sp));\n            if (ans == 1 && sq.compareTo(BigInteger.valueOf(last))==-1 && last < sp) {\n                System.out.println(\"NO\");\n                continue;\n            } else if (ans == 1 && last >= sp) {\n                ans--;\n            }\n            System.out.println(\"YES \"+ans);\n        }\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tprocess();\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new D().run(); }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        try (Input input = new StandardInput(); PrintWriter writer = new PrintWriter(System.out)) {\n            long[] s = new long[40];\n            for (int i = 1; i < s.length; i++) {\n                s[i] = 1 + 4 * s[i - 1];\n                if (i >= 32) {\n                    s[i] = Long.MAX_VALUE;\n                }\n            }\n            Function<Integer, Long> getS = (i) -> (i < s.length) ? s[i] : Long.MAX_VALUE;\n            int t = input.nextInt();\n            testCase:\n            for (int tt = 0; tt < t; tt++) {\n                int n = input.nextInt();\n                long k = input.nextLong();\n                long kk = 1;\n                BigInteger maxDivisions = BigInteger.ZERO;\n                for (int division = 1; division <= n; division++) {\n                    long needToDivide = (1L << division) - 1;\n                    if (needToDivide > k) {\n                        writer.println(\"NO\");\n                        continue testCase;\n                    }\n                    k -= needToDivide;\n                    maxDivisions = maxDivisions.add(BigInteger.valueOf(kk).multiply(BigInteger.valueOf(getS.apply(n - division))));\n                    if (maxDivisions.compareTo(BigInteger.valueOf(k)) >= 0) {\n                        writer.println(\"YES \" + (n - division));\n                        continue testCase;\n                    }\n                    kk += (1L << division + 1);\n                }\n                writer.println(\"NO\");\n            }\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new Solution(),\"Main\",1<<26).start();\n    }    public void run() {\n      InputReader sc  = new InputReader(System.in);\n      PrintWriter out = new PrintWriter(System.out);\n      int t1 = sc.nextInt();\n      while(t1-->0)\n      {\n        int n = sc.nextInt();\n        long k = sc.nextLong();\n        if(n>31)\n        {\n            out.println(\"YES \"+(n-1));\n            continue;\n        }\n        int steps = bsearch(n,k);\n        if(steps==0)\n        {\n            if(k==0)\n                out.println(\"YES \"+n);\n            else\n                out.println(\"NO\");\n        }\n        if(valid(n,k,steps))\n        {\n            out.println(\"YES \"+(n-steps));\n        }\n        else\n        {\n            out.println(\"NO\");\n        }\n      }\n      out.close();\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n        prepareIO(false);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastIO io = new FastIO(System.in, System.out);\n\t\tsolve(io);\n\t\tio.flush();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        DOlyaIMagicheskiiKvadrat solver = new DOlyaIMagicheskiiKvadrat();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DOlyaAndMagicalSquare solver = new DOlyaAndMagicalSquare();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n//        System.err.println(f(1));\n\n\n//        System.err.println(f(4));\n        int tc = sc.nextInt();\n        out: while(tc-->0){\n            long n = sc.nextInt();\n\n            long k = sc.nextLong();\n            if(n >= 32){\n                pw.println(\"YES \" + (n-1));\n                continue;\n            }\n\n            long steps = 0;\n            for (int i = 1;; i++) {\n                long cnt = ((1l<<(i+1))-1);\n                steps += ((1l<<(i))-1);\n                if(steps > k)\n                    break;\n                if(steps > f(n))\n                    break;\n//                long rem = k-((1<<i)-1);\n                long rem = k-steps;\n//                System.err.println(\"steps:\" + steps + \" cnt:\" + cnt + \" f:\"  + f(n-i));\n//                System.err.println(\"rem: \" + (f(n) - steps - cnt*f(n-i)));\n                if(rem <= f(n) - steps - cnt*f(n-i)){\n                    pw.println(\"YES \" + (n-i));\n                    continue out;\n                }\n            }\n\n            pw.println(\"NO\");\n        }\n\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastIO io = new FastIO(System.in, System.out);\n\t\tsolve(io);\n\t\tio.flush();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Solution solution = new  Solution();\n        solution.solve();\n    }\n", "complexity": "logn"}
{"code": "  public static void main (String[] argv)\n\t  new Main();\n  } \n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new OlyaAndMagicalSquare().solve();\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        ConsoleIO io = new ConsoleIO(new InputStreamReader(System.in), new PrintWriter(System.out));\n\n//        String fileName = \"C-large-practice\";\n//        ConsoleIO io = new ConsoleIO(new FileReader(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + fileName + \".in\"), new PrintWriter(new File(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + fileName + \".out\")));\n\n        new Main(io).solve();\n//        new Main(io).solveLocal();\n\n        io.close();\n    }\n", "complexity": "logn"}
{"code": "      public static void main(String hi[]) throws Exception\n         long[] dp = new long[32];\n         for(int i=1; i <= 31; i++)\n            dp[i] = 1+4*dp[i-1];\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));\n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int T = Integer.parseInt(st.nextToken());\n         StringBuilder sb = new StringBuilder();\n         matcha:while(T-->0)\n         {\n            st = new StringTokenizer(infile.readLine());\n            int N = Integer.parseInt(st.nextToken());\n            long K = Long.parseLong(st.nextToken());\n            if(N >= 32 || K == 1)\n               sb.append(\"YES \"+(N-1)+\"\\n\");\n            else if(dp[N] == K)\n               sb.append(\"YES 0\\n\");\n            else if(dp[N] < K)\n               sb.append(\"NO\\n\");\n            else\n            {\n               long total = 3L;\n               long length = 2;\n               for(int res=N-1; res >= 0; res--)\n               {\n                  long min = 1+3*dp[N-1-res];\n                  long max = min+dp[N-1];\n                  long cansplit = total-2*length+1;\n                  max += dp[res]*cansplit;\n                  if(min <= K && K <= max)\n                  {\n                     sb.append(\"YES \"+res+\"\\n\");\n                     continue matcha;\n                  }\n                  length <<= 1;\n                  total *= 4;\n               }\n               sb.append(\"NO\\n\");\n            }\n         }\n         System.out.print(sb);\n      }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) { new utkarsh().run(); }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint q = sc.nextInt();\n\t\tlong[] d = new long[30];\n\t\td[0] = 1;\n\t\tfor(int i=1;i<30;i++) d[i] = d[i-1]*4;\n\t\tfor(int z=0;z<q;z++){\n\t\t    long r = 0;\n\t\t    long n = sc.nextLong();\n\t\t    long k = sc.nextLong();\n\t\t    long c = 1;\n\t\t    while(k>0&&n>=1){\n\t\t        if(k<=r) {\n\t\t            k=0;\n\t\t            break;\n\t\t        }\n\t\t        n--;\n\t\t        k-=c;\n\t\t        if(k<=0) break;\n\t\t        \n\t\t        \n\t\t        if(n>30) {\n\t\t            k=0;\n\t\t            break;\n\t\t        }\n\t\t        for(int i=0;i<(int)n;i++){\n\t\t            r += d[i]*(c*2-1);\n\t\t            if(k<=r) {\n\t\t                k=0;\n\t\t                break;\n\t\t            }\n\t\t        }\n\t\t        if(k<=r) {\n\t\t            k=0;\n\t\t            break;\n\t\t        }\n\t\t        c*=2;\n\t\t        c++;\n\t\t    }\n\t\t    if(k==0) System.out.println(\"YES \"+n);\n\t\t    else System.out.println(\"NO\");\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew B2().run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        bf = new BufferedReader(new InputStreamReader(System.in));\n        // Scanner scan = new Scanner(System.in);\n        out = new PrintWriter(new OutputStreamWriter(System.out));\n        n = Integer.parseInt(bf.readLine());\n        a = new int[n];\n        Arrays.fill(a, Integer.MAX_VALUE);\n        if((n/2) % 2 != 0) {\n          out.println(\"! \" + (-1));\n          out.flush();\n          out.close(); System.exit(0);\n        }\n\n        ask(0);\n        ask(opp(0));\n\n        int low = 0;\n        int high = opp(0);\n        while(true) {\n          int test = (low + high)/2;\n          ask(test);\n          ask(opp(test));\n          int l_1 = a[low];\n          int l_2 = a[test];\n          int r_1 = a[opp(low)];\n          int r_2 = a[opp(test)];\n          if(1L*(l_1 - r_1)*(l_2 - r_2) < 0L) {\n            high = test;\n          }\n          else low = test;\n        }\n\n        // StringTokenizer st = new StringTokenizer(bf.readLine());\n        // int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n        // int n = Integer.parseInt(st.nextToken());\n        // int n = scan.nextInt();\n\n        //out.close(); System.exit(0);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        in = new FastScanner(System.in);\n        n = in.nextInt();\n        int a = query(1);\n        if(((a % 2)+2) % 2== 1){\n            System.out.println(\"! -1\");\n            return;\n        }\n        if(a == 0){\n            System.out.println(\"! 1\");\n            return;\n        }\n        bins(1 , n/2 + 1 , a , -a);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        BTheHat solver = new BTheHat();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        MyInput in = new MyInput(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        BTheHat solver = new BTheHat();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tin = new FS();\n\t\tif(!debug) N = in.nextInt();\n\t\telse N = inp.length;\n\t\tint x = solve(0, N/2-1, N/2, N-1);\n\t\tout.println(\"! \"+(x+1));\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tMyScanner sc = new MyScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint N = sc.nextInt();\n\t\tif (N / 2 % 2 == 1) {\n\t\t\toutput(-1, out);\n\t\t} else {\n\t\t\tint half = N / 2;\n\t\t\tint l = 1, r = half;\n\t\t\tint first = query(half, out, sc);\n\t\t\tint next = query(2 * half, out, sc);\n\t\t\tif (first == next) {\n\t\t\t\toutput(half, out);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tboolean less = first < next;\n\t\t\twhile (l + 1 < r) {\n\t\t\t\tint med = (l + r) / 2;\n\t\t\t\tfirst = query(med, out, sc);\n\t\t\t\tnext = query(med + half, out, sc);\n\t\t\t\tif (first == next) {\n\t\t\t\t\toutput(med, out);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (first < next == less) {\n\t\t\t\t\tr = med;\n\t\t\t\t} else {\n\t\t\t\t\tl = med + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\toutput(l, out);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTask solver = new Task();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tcin = new Scanner(System.in);\n\t\tn = cin.nextInt();\n\t\ta = new int[MAXN];\n\t\tused = new boolean[MAXN];\n\t\tif(n % 4 != 0) {\n\t\t\tSystem.out.println(\"! -1\\n\");\n\t\t\tSystem.out.flush();\n\t\t\tcin.close();\n\t\t\treturn;\n\t\t}\n\t\tint l = 1, r = n / 2, mid;\n\t\twhile(l <= r) {\n\t\t\tmid = (l + r) / 2;\n\t\t\tint x = Q(mid);\n\t\t\tif(Q(l) * x < 0) {\n\t\t\t\tr = mid - 1;\n\t\t\t} else if(x * Q(r) < 0) {\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"! -1\\n\");\n\t\tSystem.out.flush();\n\t\tcin.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)throws IOException\n        PrintWriter out= new PrintWriter(System.out);\n        Reader sc=new Reader();\n        int n=sc.i();\n        System.out.println(\"? \"+1);\n        int a=sc.i();\n        System.out.println(\"? \"+(1+n/2));\n        int b=sc.i();\n        if(a==b)\n        {\n            System.out.println(\"! \"+1);\n            System.exit(0);\n        }\n        int inv=0;\n        if(a>b)\n        inv=1;\n        \n        int low=2;\n        int high=n/2;\n        int q=0;\n        while(low<=high)\n        {\n            if(q==60)\n            break;\n            int mid=(low+high)/2;\n            System.out.println(\"? \"+mid);\n            a=sc.i();\n            System.out.println(\"? \"+(mid+n/2));\n            b=sc.i();\n            if(a==b)\n            {\n                System.out.println(\"! \"+mid);\n                System.exit(0);\n            }\n            else if(a<b)\n            {\n                if(inv==0)\n                low=mid+1;\n                else\n                high=mid-1;\n            }\n            \n            else\n            {\n                if(inv==0)\n                high=mid-1;\n                else\n                low=mid+1;\n            }\n            q++;\n        }\n        System.out.println(\"! -1\");\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter printer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint N = Integer.parseInt(reader.readLine());\n\t\tprinter.println(\"? 1\");\n\t\tprinter.flush();\n\t\tint v1 = Integer.parseInt(reader.readLine());\n\n\t\tprinter.println(\"? \" + (1 + N / 2));\n\t\tprinter.flush();\n\t\tint v2 = Integer.parseInt(reader.readLine());\n\n\t\tif ((v1 + v2) % 2 != 0) {\n\t\t\tprinter.println(\"! -1\");\n\t\t\tprinter.close();\n\t\t\treturn;\n\t\t}\n\n\t\tif (v1 == v2) {\n\t\t\tprinter.println(\"! 1\");\n\t\t\tprinter.close();\n\t\t\treturn;\n\t\t}\n\t\tboolean less = v1 < v2;\n\n\t\tint low = 1;\n\t\tint high = (1 + N / 2);\n\n\t\twhile (low != high) {\n\t\t\tint mid = (low + high) >> 1;\n\n\t\t\tprinter.println(\"? \" + mid);\n\t\t\tprinter.flush();\n\t\t\tint r1 = Integer.parseInt(reader.readLine());\n\n\t\t\tint q2 = (mid + N / 2);\n\t\t\tif (q2 > N) {\n\t\t\t\tq2 -= N;\n\t\t\t}\n\t\t\tprinter.println(\"? \" + q2);\n\t\t\tprinter.flush();\n\t\t\tint r2 = Integer.parseInt(reader.readLine());\n\n\t\t\tif (r1 == r2) {\n\t\t\t\tprinter.println(\"! \" + mid);\n\t\t\t\tprinter.close();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (r1 < r2 == less) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\tprinter.println(\"! \" + low);\n\t\tprinter.close();\n\t\treturn;\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int n = sc.nextInt();\n        int half = n/2;\n        pw.println(\"? 1\");\n        pw.flush();\n        int a = sc.nextInt();\n        pw.println(\"? \" + (1+half));\n        pw.flush();\n        int b = sc.nextInt();\n        if(a - b == 0){\n            pw.println(\"! 1\");\n        }\n        else\n        if((a - b)%2 != 0)\n        {\n            pw.println(\"! -1\");\n        }else{\n            boolean greater = a > b;\n            int lo = 1;\n            int hi = half;\n\n            boolean ans = false;\n            while(lo <= hi){\n                int mid = (lo + hi) /2;\n                pw.println(\"? \" + mid);\n                pw.flush();\n                a = sc.nextInt();\n                pw.println(\"? \" + (mid+half));\n                pw.flush();\n                b = sc.nextInt();\n\n                if(a == b){\n                    pw.println(\"! \" + mid);\n                    ans = true;\n                    break;\n                }\n\n                if(a > b != greater){\n                    hi = mid-1;\n                }else{\n                    lo = mid+1;\n                    greater = a>b;\n                }\n            }\n\n            if(!ans){\n                pw.println(\"! -1\");\n            }\n\n        }\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n    \t\n\t\t\n//    \tFastScanner fs = new FastScanner();\n//    \tPrintWriter out = new PrintWriter(System.out);\n    \t\t\n    \tint tt = 1;\n    \twhile(tt-->0) {\n    \t\t\n    \t\n    \t\tn = fs.nextInt();\n    \t\tint l = 1, r = 1 + n/2;\n    \t\t\n    \t\td = getB(l);\n    \t\tif(d%2!=0) {\n    \t\t\tout.println(\"! -1\");\n    \t\t\tout.flush();\n    \t\t\treturn;\n    \t\t}\n    \t\t\n    \t\tif(d==0) {\n    \t\t\tout.println(\"! 1\");\n    \t\t\tout.flush();\n    \t\t\treturn;\n    \t\t}\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\twhile(l<r) {\n    \t\t\tint mid = (l+r)/2;\n    \t\t\tif(check(mid)) {\n    \t\t\t\tl = mid + 1;\n    \t\t\t}\n    \t\t\telse {\n    \t\t\t\tr = mid;\n    \t\t\t}\n    \t\t\tint f = 1;\n    \t\t}\n    \t\t\n    \t\t\n    \t\tout.println(\"! \"+l);\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t}\n    \t\n    \tout.close();\n    \t\t\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n\n        Solver solver = new Solver();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    OutputWriter out = new OutputWriter(outputStream);\n    TaskB solver = new TaskB();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n//        InputReader in = new InputReader(new FileInputStream(\"input.txt\"));\n//        PrintWriter out = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\"milkvisits.out\")));\n//\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n\n        int n = in.nextInt();\n        if (n / 2 % 2 != 0) {\n            out.println(\"! -1\");\n            out.flush();\n            out.close();\n            return;\n        }\n\n        int[] a = new int[n];\n        Arrays.fill(a, Integer.MAX_VALUE);\n\n        int l1 = 0;\n        int r1 = l1 + n / 2;\n\n        int l2 = r1;\n        int r2 = n;\n\n        int ans = -1;\n\n        while (true) {\n            getValue(in, out, a, l1);\n            getValue(in, out, a, r1);\n\n            getValue(in, out, a, l2);\n            getValue(in, out, a, r2 % n);\n\n            if (a[l1] == a[l2]) {\n                ans = l1;\n                break;\n            }\n            if (a[r1] == a[r2 % n]) {\n                ans = r1;\n                break;\n            }\n\n            int m1 = (l1 + r1) / 2;\n            getValue(in, out, a, m1);\n\n            int m2 = (l2 + r2) / 2;\n            getValue(in, out, a, m2);\n\n            if (a[m1] == a[m2]) {\n                ans = m1;\n                break;\n            }\n\n            if ((a[l1] <= a[m1] && a[l2] <= a[m2]) || (a[l1] >= a[m1] && a[l2] >= a[m2])) {\n                if (a[l1] <= a[l2] && a[m1] >= a[m2]) {\n                    r1 = m1;\n                    r2 = m2;\n                    continue;\n                }\n\n                if (a[l1] >= a[l2] && a[m1] <= a[m2]) {\n                    r1 = m1;\n                    r2 = m2;\n                    continue;\n                }\n            }\n\n            if (a[l1] <= a[m1] && a[l2] >= a[m2] && a[l1] <= a[l2] && a[m1] >= a[m2]){\n                r1 = m1;\n                r2 = m2;\n                continue;\n            }\n\n            if (a[l1] >= a[m1] && a[l2] <= a[m2] && a[l1] >= a[l2] && a[m1] <= a[m2]){\n                r1 = m1;\n                r2 = m2;\n                continue;\n            }\n\n            l1 = m1;\n            l2 = m2;\n        }\n        out.println(\"! \" + (ans + 1));\n\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DEhabIEsheOdnaOcherednayaZadachaNaXor solver = new DEhabIEsheOdnaOcherednayaZadachaNaXor();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int cura = 0,curb = 0;\n        int ver;\n        System.out.println(\"? 0 0\");\n        System.out.flush();\n        ver = sc.nextInt();\n        for(int i=29;i>=0;i--){\n            System.out.println(\"? \"+(cura+(1<<i))+\" \"+curb);\n            System.out.flush();\n            int temp1 = sc.nextInt();\n            System.out.println(\"? \"+cura+\" \"+(curb+(1<<i)));\n            System.out.flush();\n            int temp2 = sc.nextInt();\n            if(temp1!=temp2){\n                if(temp2==1){\n                    cura += (1<<i);\n                    curb += (1<<i);\n                }\n            }\n            else{\n                if(ver==1) cura += (1<<i);\n                if(ver==-1) curb += (1<<i);\n                \n                ver = temp1;\n            }\n        }\n        System.out.println(\"! \"+cura+\" \"+curb);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException{\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int ok,ok2;\n        int va,vb;\n        va = 0;\n        vb = 0;\n        out.println(\"? \"+va+\" \"+vb);\n        out.flush();\n        ok = sc.nextInt();\n        for(int i=29;i>=0;i--){\n            if(ok==0){\n                va += (1<<i);\n                out.println(\"? \"+va+\" \"+vb);\n                out.flush();\n                ok2 = sc.nextInt();\n                if(ok2==1){\n                    va -= (1<<i);\n                }else{\n                    vb += (1<<i);\n                }\n            }else{\n                va += (1<<i);\n                vb += (1<<i);\n                out.println(\"? \"+va+\" \"+vb);\n                out.flush();\n                ok2 = sc.nextInt();\n                if(ok==ok2){\n                    vb -= (1<<i);\n                    out.println(\"? \"+va+\" \"+vb);\n                    out.flush();\n                    ok2 = sc.nextInt();\n                    if(ok2==1){\n                        va -= (1<<i);\n                    }else{\n                        vb += (1<<i);\n                    }\n                }else{\n                    if(ok==1){\n                        vb -= (1<<i);\n                        out.println(\"? \"+va+\" \"+vb);\n                        out.flush();\n                        ok = sc.nextInt();\n                    }\n                    else {\n                        va -= (1<<i);\n                        out.println(\"? \"+va+\" \"+vb);\n                        out.flush();\n                        ok = sc.nextInt();\n                    }\n                }\n            }\n        }\n        out.println(\"! \"+va+\" \"+vb);\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main( String[] args ) {\n        Scanner in = new Scanner( System.in );\n\tint a = 0, b = 0;\n\tSystem.out.println( \"? 0 0 \" );\n\tSystem.out.flush();\n\tint c = in.nextInt();\n\tfor ( int i = 29; i >= 0; i-- ) {\n\t    System.out.println( \"? \" + ( a + ( 1 << i ) ) + \" \" + b );\n\t    System.out.flush();\n\t    int q1 = in.nextInt();\n\t    System.out.println( \"? \" + a + \" \" + ( b + ( 1 << i ) ) );\n\t    System.out.flush();\n\t    int q2 = in.nextInt();\n\t    if ( q1 == q2 ) {\n\t\tif ( c == 1 )\n\t\t    a += ( 1 << i );\n\t\telse if ( c == -1 )\n\t\t    b += ( 1 << i );\n\t\tc = q1;\n\t    }\n\t    else if ( q1 == -1 ) {\n\t\ta += ( 1 << i );\n\t\tb += ( 1 << i );\n\t    }\n\t    else if ( q1 == -2 )\n\t\treturn;\n\t}\n\tSystem.out.println( \"! \" + a + \" \" + b );\n\tSystem.out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main( String[] args ) {\n        Scanner in = new Scanner( System.in );\n\tint a = 0, b = 0;\n\tSystem.out.println( \"? 0 0 \" );\n\tSystem.out.flush();\n\tint c = in.nextInt();\n\tfor ( int i = 29; i >= 0; i-- ) {\n\t    System.out.println( \"? \" + ( a + ( 1 << i ) ) + \" \" + b );\n\t    System.out.flush();\n\t    int q1 = in.nextInt();\n\t    System.out.println( \"? \" + a + \" \" + ( b + ( 1 << i ) ) );\n\t    System.out.flush();\n\t    int q2 = in.nextInt();\n\t    if ( q1 == q2 ) {\n\t\tif ( c == 1 )\n\t\t    a += ( 1 << i );\n\t\telse if ( c == -1 )\n\t\t    b += ( 1 << i );\n\t\tc = q1;\n\t    }\n\t    else if ( q1 == -1 ) {\n\t\ta += ( 1 << i );\n\t\tb += ( 1 << i );\n\t    }\n\t    else if ( q1 == -2 )\n\t\treturn;\n\t}\n\tSystem.out.println( \"! \" + a + \" \" + b );\n\tSystem.out.flush();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) throws IOException {\n    try (EhabAndAnotherAnotherXorProblem instance = new EhabAndAnotherAnotherXorProblem()) {\n      instance.solve();\n    }\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long n = in.nextLong();\n        long s = in.nextLong(); // number\n         // level -- > (n + 8) / 9 * 9; --- > s\n        long i = (s/10+1)*10 ;\n        if (n<10||n-sd(n+\"\")<s) {\n            System.out.println(0);\n            return;\n        }\n        while(!(i-sd(i+\"\")>=s)){\n        i+=10;\n        \n        }\n        System.out.println(n-i+1);\n       \n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        PrintWriter out = new PrintWriter(System.out);\n        long n = Long.parseLong(st.nextToken());\n        long s = Long.parseLong(st.nextToken());\n        \n        int r = 0 ;\n        \n        long l = 0L ;\n        long u = n ;\n        \n        if(  (l-sumDigits(l)< s )  && (u-sumDigits(u)< s ) )\n        {\n            out.println(0);\n            out.flush();\n            out.close();\n            return ;\n        }\n        \n        long specified = 0L ;\n        while( true )\n        {\n            long m = (l + u) / 2L ;\n            \n            if( ( m - sumDigits(m) ) >= s && ( (m-1) - sumDigits(m-1) ) < s  )\n            {\n                specified = m ;\n                break ;\n            }\n            \n            if( l > u  )\n                break ;\n            \n            else\n            {\n                if( ( m - sumDigits(m) ) >= s )\n                    u = m-1 ;\n                else\n                    l = m+1 ;\n            }\n        }\n        \n        out.println( n-specified+1 );\n        out.flush();\n        out.close();\n        \n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tlong s = sc.nextLong();\n\t\tlong i;\n\t\tfor(i =s ; i-sum(i+\"\")<s;i++)\n\t\t\tif(i%10==0)i+=9;\n\t\tSystem.out.println(Math.max(0, n-i+1));\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInitData();\n\t\tGetAns();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew C();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        atskb solver = new atskb();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        MyScanner in = new MyScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        Task solver = new Task();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tlong n = scanner.nextLong();\n\t\tlong s = scanner.nextLong();\n\t\tlong l = 1;\n\t\tlong r = Long.MAX_VALUE;\n\t\tlong index = 0;\n\t\twhile(l <= r) {\n\t\t\tlong mid = (l + r) / 2;\n\t\t\tif(mid - get(mid) >= s) {\n\t\t\t\tindex = mid;\n\t\t\t\tr = mid - 1;\n\t\t\t}else{\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(Math.max(0, n-index+1));\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tlong n = sc.nextLong();\n\t\tLong S = sc.nextLong();\n\t\t\n\t\tlong l = 0;\n\t\tlong h = n;\n\t\t\n\t\tlong ans = n;\n\t\t\n\t\twhile(l <= h) {\n\t\t\tlong mid = (l + h) / 2;\n\t\t\tlong t = mid;\n\t\t\tlong sum = 0;\n\t\t\t\n\t\t\twhile(t > 0) {\n\t\t\t\tsum += t % 10;\n\t\t\t\tt /= 10;\n\t\t\t}\n\t\t\t\n\t\t\tif(mid - sum < S) {\n\t\t\t\tans = mid;\n\t\t\t\tl = mid + 1;\n\t\t\t}else\n\t\t\t\th = mid - 1;\n\t\t}\n\t\t\n\t\tout.println(n - ans);\n\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long s = sc.nextLong();\n        \n        BigInteger k = findFirst(BigInteger.valueOf(s));\n        if (BigInteger.valueOf(n).compareTo(k) >= 0)\n        {\n            System.out.println(n - k.longValue() + 1);\n        }\n        else\n        {\n            System.out.println(\"0\");\n        }\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tlong s  = sc.nextLong();\n\t\t\n\t\tlong m = s;\n\t\t\n\t\twhile(m-digitAdd(m)<s && m<=n){\n\t\t\tm++;\n\t\t}\n\t\tSystem.out.println(Math.max(n-m+1, 0));\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n , s , ans = 0;\n\t\tn = scan.nextLong();\n\t\ts = scan.nextLong();\n\t\tlong current = s;\n\t\twhile (current <= n && current <= s + 20 * 9) {\n\t\t\t// current - sum(current) >= s\n\t\t\tlong temp = sum(current);\n\t\t\tif (current - temp >= s) {\n\t\t\t\tans ++;\n\t\t\t}\n\t\t\tcurrent ++;\n\t\t}\n\t\tif (current <= n) {\n\t\t\tans += (n - current + 1);\n\t\t}\n\t\tSystem.out.println(ans);\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tlong n = Long.parseLong(st.nextToken());\n\t\tlong s = Long.parseLong(st.nextToken());\n\t\tlong posible = binarySearch(n,s);\n\t\tlong dig, answer;\n\t\tlong i, cmed;\n\t\tfor (i = posible; i >= 0; i--) {\n\t\t\tdig = 0;\n\t\t\tcmed = i;\n\t\t\twhile (cmed > 0) {\n\t\t\t\tdig = dig+cmed%10;\n\t\t\t\tcmed/=10;\n\t\t\t}\n\t\t\tif (i-dig < s) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tanswer = n-i;\n\t\tSystem.out.println(answer);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(in.readLine());\n        long n = Long.parseLong(st.nextToken());\n        long s = Long.parseLong(st.nextToken());\n        long i = (s / 10 + 1) * 10;\n        if (n < 10 || n - sd(n + \"\") < s) {\n            System.out.println(0);\n            return;\n        }\n        while (!(i - sd(\"\"+i) >= s)) {\n            i += 10;\n        }\n        System.out.println(n - i + 1);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tlong s = scan.nextLong();\n\t\tlong ans = 0;\n\t\tlong l = 0;\n        long r = n;\n        while (l <= r) {\n            // Key is in a[lo..hi] or not present.\n            long mid = l + (r - l) / 2;\n            if(isReallyBig(mid, s)){\n            \tans = mid;\n            \tr = mid-1;\n            }\n            else l = mid+1;\n        }\n        if(ans == 0) System.out.println(ans);\n        else\n        \tSystem.out.println(n-ans+1);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Thread(null, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\n\t\t//new Main().soln();\n\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n\t}, \"1\", 1 << 26).start();\n\t\tnew Main().soln();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        InputReader in = new InputReader(System.in);\n        PrintWriter w = new PrintWriter(System.out);\n        long n = in.nextLong();\n        s = in.nextLong();\n        long l = 0, h = n;\n        while (l < h) {\n            long mid = (l + h ) / 2;\n           // System.out.println(\"mid is : \" + mid);\n           // System.out.println(\"high is : \" + h);\n            //System.out.println(\"low is : \" + l);\n            if (Ok(mid))\n                h = mid;\n            else\n                l = mid + 1;\n        }\n        if (Ok(h))\n            w.println(n - h + 1);\n        else\n            w.println(n - h);\n\n        w.close();\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        try {\n            Locale.setDefault(Locale.US);\n        } catch (Exception e) {\n        }\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){new C817().run();}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tString[] line = in.readLine().split(\"\\\\s+\");\n\t\t\n\t\tlong n = Long.parseLong(line[0]);\n\t\t\n\t\tlim = Long.parseLong(line[1]);\n\t\n\t\t\n\t\tlong pos = -1;\n\t\t\n\t\tfor(int i=61; i>=0; i--) {\n\t\t\t\n\t\t\tlong shift = (long) Math.pow(2, i);\n\t\t\t\n\t\t\tif(pos + shift - sumOfDigits(pos + shift) < lim) {\n\t\t\t\tpos += shift;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpos++;\n\t\t\n\t\tif(pos <= n && pos- sumOfDigits(pos) >= lim) {\n\t\t\tSystem.out.println(n - pos + 1);\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(0);\n\t\t}\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[])\n        FastReader r = new FastReader();\n        long n = r.nextLong();\n        long s=  r.nextLong();\n        System.out.println(bigNumCount(n,s));\n    }\n", "complexity": "logn"}
{"code": "\t\tpublic static void main(String args[])throws IOException{\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tOutputStream out=new BufferedOutputStream(System.out);\n\t\tString s[]=br.readLine().trim().split(\"\\\\ \");\n\t\tBigInteger a1=new BigInteger(s[0]);\n\t\tBigInteger a=new BigInteger(s[0]);\n\t\tString q=a.toString();\n\t\tString q1=q.substring(q.length()-1, q.length());\n\t\ta=a.subtract(new BigInteger(q1));\n\t\t//System.out.println(a.toString());\n\t\tBigInteger c=new BigInteger(\"1\");\n\t\tBigInteger b=new BigInteger(s[1]);\n\t\tint z=check(a,a.toString(),b);\n\t\tif(z==1)\n\t\t{\n\t\t\tout.write(\"0\".getBytes());\n\t\t\tout.flush();\n\t\t\t//System.out.println(\"jwefcyuwe\");\n\t\t\treturn;\n\t\t}\n\t\twhile(a.compareTo(c)>0)\n\t\t{\n\t\t\tBigInteger d=a;\n\t\t\tif(d.subtract(c).compareTo(new BigInteger(\"9\"))==-1)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBigInteger mid=a;\n\t\t\t\tmid=mid.add(c);\n\t\t\t\tmid=mid.divide(new BigInteger(\"2\"));\n\t\t\t\t//System.out.println(mid.toString());\n\t\t\t\tif(check(mid,mid.toString(),b)==1)\n\t\t\t\t{\n\t\t\t\t\tc=mid;\n\t\t\t\t\tc=c.add(new BigInteger(\"1\"));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ta=mid;\n\t\t\t\t\t\n\t\t\t\t\t//System.out.println(a.toString());\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t q=a.toString();\n\t\t q1=q.substring(q.length()-1, q.length());\n\t\ta=a.subtract(new BigInteger(q1));\n\t\tBigInteger ans=a1.subtract(a);\n\t\tans=ans.add(new BigInteger(\"1\"));\n\t\tout.write(ans.toString().getBytes());\n\t\t//System.out.print(\"sfvlksfv\");\n\t\t\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        long n = Long.parseLong(st.nextToken()),\n            s = Long.parseLong(st.nextToken());\n        long m = s;\n        while (m-f(m)<s && m<=n) m++;\n        System.out.println(Math.max(n-m+1, 0));\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C3().run(); }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] in = br.readLine().split(\" \");\n\t\tlong n = Long.parseLong(in[0]), s = Long.parseLong(in[1]);\n\t\tSolver solver = new Solver(n, s);\n\t\tSystem.out.println(solver.solve());\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tlong s = sc.nextLong();\n\t\tsc.close();\n\t\tlong count = 0;\n\t\tlong i = s;\n\t\tfor(; i < s+200 && i <= n; i++) {\n\t\t\tif(realbig(i,s)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(i <= n) {\n\t\t\tcount+=n-i+1;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputReader sc=new InputReader(System.in);\n\t\tlong n=sc.nextLong();\n\t\tlong s=sc.nextLong();\n\t\t\n\t\tlong start=0,end=n;\n\t\twhile(start<end)\n\t\t{\n\t\t\tlong mid=(start+end)/2;\n\t\t\tif(func(mid)>=s)\n\t\t\t\tend=mid;\n\t\t\telse \n\t\t\t\tstart=mid+1;\n\t\t}\n\t\tif(func(start)>=s)\n\t\t\tSystem.out.println(n-start+1);\n\t\telse\n\t\t\tSystem.out.println(0);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C().run(); }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tlong n = scn.nextLong();\n\t\tlong s = scn.nextLong();\n\n\t\tlong lo = 0;\n\t\tlong hi = n ;\n\t\twhile(lo<=hi)\t\n\t\t{\n\t\t\tlong mid=(lo+hi)/2; \n\t\t\tif(check(mid, s))// no's greater thn this grtr\n\t\t\t{\n\t\t\t\thi=mid-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlo=mid+1;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tif(check(lo, s))\n\t\t{\n\t\tSystem.out.println(n-lo+1);\n\t\t}\n\t\telse // could check initially too\n\t\t{\n\t\t\tSystem.out.println(\"0\");\n\t\t\t\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tlong s = scan.nextLong();\n\t\tlong ans = 0;\n\t\tif (s > n)\n\t\t{\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tif (n > s+200)\n\t\t{\n\t\t\tans += n-(s+200);\n\t\t\tn = s+200;\n\t\t}\n\t\tfor (long i = s; i <= n; i++)\n\t\t{\n\t\t\tchar[] num = (\"\"+i).toCharArray();\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < num.length; j++)\n\t\t\t\tsum += num[j] - '0';\n\t\t\tif (i - sum >= s)\n\t\t\t\tans++;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]){\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\tInputReader ip=new InputReader(System.in);\n\t\t\n\t\tlong n;\n\t\tn=ip.nextLong();\n\t\ts=ip.nextLong();\n\n\t\tif(s>n){\n\t\t\tpw.println(\"0\");\n\t\t}\n\t\telse{\n\t\t\tlong l=0,r=n;\n\t\t\tboolean possible=false;\n\t\t\tlong mid=0;\n\t\t\tint it=100;\n\t\t\twhile(it-->0){\n\t\t\t\tmid = (l+r)/2;\n\t\t\t\tif(check(mid)){\n\t\t\t\t\tr=mid;\n\t\t\t\t\tpossible = true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tl=mid+1;\n\t\t\t\t}\n\t\t//\t\tpw.println(mid);\n\t\t//\t\tpw.println(l+\" \"+r);\n\t\t\t}\n\t\t\tif(possible){\n\t\t\t\tpw.println(n-l+1);\n\t\t\t}\t\n\t\t\telse{\n\t\t\t\tpw.println(\"0\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tpw.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tlong n = scanner.nextLong();\n\t\tlong s = scanner.nextLong();\n\t\tlong l = 0, r = n + 1;\n\t\twhile(r - l > 1) {\n\t\t\tlong mid = (l + r) / 2;\n\t\t\tlong k = mid, sum = 0;\n\t\t\twhile(k != 0) {\n\t\t\t\tsum += k % 10;\n\t\t\t\tk /= 10;\n\t\t\t}\n\t\t\tif(mid - sum >= s) r = mid; else l = mid;\n\t\t}\n\t\tSystem.out.print(n - r + 1);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]) {\n\t\tInputReader in = new InputReader(System.in);\n\t\tOutputStream outputStream = System.out;\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\t/*------------------------------My Code starts here------------------------------*/\n\t\tlong n=in.nextLong(),s=in.nextLong();\n\t\tlong x=BS(0,n,s);\n\t\tout.print(n-x+1);\n\t\tout.close();\n\t\t/*------------------------------The End------------------------------------------*/\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws IOException {\n        in = new Reader();\n        out = new PrintWriter(System.out);\n        long n = in.nextLong();\n        long s = in.nextLong();\n        long low = 0, mid = 0, high = n;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (func(mid, s)) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        out.println(n - low + 1);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)  {\n        new Thread(null, new main(), \"Check2\", 1<<26).start();// to increse stack size in java\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    try(BufferedReader in = new BufferedReader(new InputStreamReader(System.in))){\n      String[] str = in.readLine().split(\" \");\n      BigInteger n = new BigInteger(str[0]);\n      BigInteger s = new BigInteger(str[1]);\n\n      BigInteger left = BigInteger.ONE;\n      BigInteger right = new BigInteger(n.toString()).add(BigInteger.TEN);\n\n      BigInteger TWO = BigInteger.ONE.add(BigInteger.ONE);\n\n      BigInteger t;\n\n      while(right.subtract(left).compareTo(BigInteger.ONE)>0){\n        t = left.add(right.subtract(left).divide(TWO));\n        if(check(t, s)){\n          right = t;\n        }else{\n          left = t;\n        }\n      }\n      BigInteger result = n.subtract(right).add(BigInteger.ONE);\n      if (result.compareTo(BigInteger.ZERO)<=0) {\n        System.out.println(0);\n      }else{\n        System.out.println(result);\n      }\n\n    }catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Thread(null, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tnew C817().run();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1 << 26).start();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong N = sc.nextLong(), S = sc.nextLong();\n\t\tlong lo = 0, hi = N;\n\t\tlong pivot = 0;\n\t\twhile (lo <= hi) {\n\t\t\tlong mid = lo + (hi - lo) / 2;\n\t\t\tint sumOfDigits = 0;\n\t\t\tlong saveMid = mid;\n\t\t\twhile (saveMid > 0) {\n\t\t\t\tsumOfDigits += saveMid % 10;\n\t\t\t\tsaveMid /= 10;\n\t\t\t}\n\t\t\tif (mid - sumOfDigits < S) {\n\t\t\t\tpivot = mid;\n\t\t\t\tlo = mid + 1;\n\t\t\t} else\n\t\t\t\thi = mid - 1;\n\t\t}\n\n\t\tSystem.out.println(N - pivot);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                try{\n                    solve();\n                    w.close();\n                }\n                catch(Exception e){\n                    e.printStackTrace();\n                }\n            }\n        }, \"1\", 1 << 26).start();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner ob = new Scanner(System.in);\n\t\tlong n = ob.nextLong();\n\t\tlong s = ob.nextLong();\n\t\tlong l = 1;\n\t\tlong r = n;\n\t\twhile(l<=r){\n\t\t\tlong mid = (l + r)/2;\n\t\t\tif(reallybignumber(mid,s)){\n\t\t\t\tr = mid-1;\n\t\t\t}else{\n\t\t\t\tl = mid +1;\n\t\t\t}\n\t\t}\n\t\t/******long l1 = l;\n\t\t***while(l1<=n) {\n\t\t\tSystem.out.print(l1 + \" \");\n\t\t\tl1++;\n\t\t}*/////////\n\t\tSystem.out.println(n-l+1);\n\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        // PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n        // \"output.txt\")));\n        PrintWriter out = new PrintWriter(System.out);\n        Scanner in = new Scanner();\n        long n = in.nextLong();\n        long s = in.nextLong();\n        if (s == 0) {\n            out.println(n);\n        } else {\n            String N = \"\" + n;\n            dp = new long[N.length()][163][2][2];\n            long re = 0;\n            for (int i = 1; i < 163 && i <= n; i++) {\n                long tmp = s + i;\n                if (tmp <= n) {\n                    String S = \"\" + tmp;\n                    while(S.length() < N.length()){\n                        S = '0' + S;\n                    }\n                    for (long[][][] a : dp) {\n                        for (long[][] b : a) {\n                            for (long[] c : b) {\n                                Arrays.fill(c, -1);\n                            }\n                        }\n                    }\n                    re += cal(0, i, 0, 0, N, S);\n                }\n            }\n            out.println(re);\n        }\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastInput in = new FastInput(inputStream);\n        FastOutput out = new FastOutput(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Thread(null, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\n\t\t//new Main().soln();\n\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n\t}, \"1\", 1 << 26).start();\n\t\tnew Main().soln();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tlong n = scan.nextLong();\n\t\tlong s = scan.nextLong();\n\t\tlong low = 0;\n\t\tlong high = n + 1;\n\t\twhile (high-low>1) {\n\t\t\tlong sum = 0;\n\t\t\tlong mid = (high + low) / 2;\n\t\t\tlong value = findSum(mid, sum);\n\t\t\tif (mid - value >= s)\n\t\t\t\thigh = mid;\n\t\t\telse\n\t\t\t\tlow = mid;\n\t\t}\n\t\t\n\t\tSystem.out.println(n - high + 1);\n\n\t\tscan.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint t = 1;\n\t\tfor(int zxz=0;zxz<t;zxz++){\n\t\t\t// my code starts here\n\t\t\tlong n = in.nextLong();\n\t\t\tlong s = in.nextLong();\n\t\t\tlong start=0,end=n;\n\t\t\tlong ans=n+1;\n\t\t\twhile(start<=end){\n\t\t\t\tlong mid = start+(end-start)/2;\n\t\t\t\tif(mid-digitSum(mid)>=s){\n\t\t\t\t\tans = mid;\n\t\t\t\t\tend = mid-1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstart=mid+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(n-ans+1);\n\t\t\t// my code ends here\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tlong n = Long.parseLong(st.nextToken());\n\t\tlong s = Long.parseLong(st.nextToken());\n\t\tint d = 9 * 18;\n\t\tlong cnt;\n\t\tif (n >= s + d) {\n\t\t\tcnt = n - s - d;\n\t\t\tfor (long x = s; x <= s + d; x++)\n\t\t\t\tif (check(x, s))\n\t\t\t\t\tcnt++;\n\t\t} else {\n\t\t\tcnt = 0;\n\t\t\tfor (long x = s; x <= n; x++)\n\t\t\t\tif (check(x, s))\n\t\t\t\t\tcnt++;\n\t\t}\n\t\tSystem.out.println(cnt);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] arg) {\n        new C817().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)\n        setup();\n        xuly();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(in.readLine());\n        long s = Long.parseLong(st.nextToken());\n        long n = Long.parseLong(st.nextToken());\n        BSearch2(1, s, n);\n        if (sum == 0) System.out.println(\"0\");\n        else System.out.println(s - sum + 1);\n\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws InterruptedException{\n\t\tFastScanner scan = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tlong n = scan.nextLong(), s = scan.nextLong();\n\t\tlong lo = 1, hi = n+1;\n\t\tfor(int bs = 0; bs < 100; bs++) {\n\t\t\tlong mid = (lo+hi)>>1;\n\t\t\tlong mid2 = mid;\n\t\t\tlong c = 0;\n\t\t\twhile(mid > 0) {\n\t\t\t\tc += mid%10;\n\t\t\t\tmid /= 10;\n\t\t\t}\n\t\t\tif(mid2-c < s) lo = mid2;\n\t\t\telse hi = mid2;\n\t\t}\n\t\tout.println(n-lo);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] arg) throws IOException {\n\t\tnew C().run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        // TODO code application logic here\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        long n, s;\n\n        String arr[] = br.readLine().split(\" \");\n\n        n = Long.parseLong(arr[0]);\n        s = Long.parseLong(arr[1]);\n\n        long l = 1;\n        long h = n;\n\n        while (l < h) {\n            long mid = (l + h) / 2;\n            if (greater(mid, s)) {\n                h = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n\n        System.out.println(greater(h, s) ? n - h + 1 : 0);\n\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[])throws IOException{\n\t\t new Solution().solve();\n\t\t out.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tlong n = sc.nextLong(), s = sc.nextLong();\n\t\tcreate(UPPER, n);\n\t\tlong ans = 0;\n\t\tfor(int sod = 1; sod <= 162; ++sod)\n\t\t{\n\t\t\tcreate(LOWER, s + sod);\n\t\t\tprepMemo(sod);\n\t\t\tans += dp(63, 0, sod);\n\t\t}\n\t\t\n\t\t\n\t\tout.println(ans);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint t = 1;\n\t\tfor(int zxz=0;zxz<t;zxz++){\n\t\t\t// my code starts here\n\t\t\tlong n = in.nextLong();\n\t\t\tlong s = in.nextLong();\n\t\t\tlong start=s,end=n;\n\t\t\tlong ans=n+1;\n\t\t\twhile(start<=end){\n\t\t\t\tlong mid = start+(end-start)/2;\n\t\t\t\tif(mid-digitSum(mid)>=s){\n\t\t\t\t\tans = mid;\n\t\t\t\t\tend = mid-1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstart=mid+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(n-ans+1);\n\t\t\t// my code ends here\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws IOException {\n        Main solver;\n        if (!\"true\".equals(System.getProperty(\"ONLINE_JUDGE\"))) {\n            solver = new Main(\"input.txt\");\n        } else {\n            solver = new Main();\n        }\n        solver.solve();\n        solver.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tlong n = nextLong();\n\t\tlong s = nextLong();\n\t\tlong ans = 0;\n\t\tif (s+200 <= n)\n\t\t\tans += n - (s+200) + 1;\n\t\tfor (long i = s; i < s+200; i++) {\n\t\t\tif (i <= n && i-sumDigits(i) >= s) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tpw.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[])\n\t\tnew Thread(null, new TestClass(),\"TESTCLASS\",1<<18).start();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\t//Scanner sc=new Scanner(System.in);\n\t\tin=new InputReader(System.in);\n\t\tout=new PrintWriter(System.out);\n\t\tString n1=in.readString();\n\t\tString s1=in.readString();\n\t\tlong s=Long.parseLong(s1);\n\t\tlong n=Long.parseLong(n1);\n\t\t\n\t\tlong l=s-1;\n\t\tlong r=n+1;\n\t\tHashSet<Long> hset=new HashSet<>();\n\t\tlong last=-1;\n\t\twhile(l<r)\n\t\t{\n\t\t\tlong mid=(l+r)/2;\n\t\t\tlong sum=0;\n\t\t\tif(hset.contains(mid))\n\t\t\t\tbreak;\n\t\t\tString d=String.valueOf(mid);\n\t\t\tfor(int i=0;i<d.length();i++)\n\t\t\t{\n\t\t\t\tsum=sum+(d.charAt(i)-'0');\n\t\t\t}\n\t\t\t//debug(sum);\n\t\t\thset.add(mid);\n\t\t\t\n\t\t\tif(mid-sum>=s)\n\t\t\t{\n\t\t\t\tlast=mid;\n\t\t\t\tr=mid;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tl=mid;\n\t\t\t}\n\t\t}\n\t\tif(last==-1)\n\t\t\tout.println(\"0\");\n\t\telse\n\t\t{\n\t\t\tout.println(n-last+1);\n\t\t}\n\t\tout.close();\n\t\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStream inputStream = System.in;\n//        InputStream inputStream = new FileInputStream(\"dijkstra.in\");\n        OutputStream outputStream = System.out;\n//        OutputStream outputStream = new FileOutputStream(\"dijkstra.out\");\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Answer solver = new Answer();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)throws IOException {\n\t\tReader.init(System.in);\n\t\tlong n=Reader.nextLong();\n\t\ts=Reader.nextLong();\n\t\tlong lo=1,hi=n,mid;\n\t\twhile(lo<hi){\n\t\t\tmid=(lo+hi)/2;\n\t\t\tif(diff(mid)>=s)\n\t\t\t\thi=mid;\n\t\t\telse\n\t\t\t\tlo=mid+1;\n\t\t}\n\t\tif(diff(lo)>=s)\n\t\t\tSystem.out.println(n-lo+1);\n\t\telse\n\t\t\tSystem.out.println(0);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[] ) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    \tString s[] = in.readLine().split(\" \");\n    \tlong n = Long.parseLong(s[0]);\n    \tlong k = Long.parseLong(s[1]);\n    \tlong x = bs(n,k);\n    \tout.println(n-x+1);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner in = new Scanner(System.in);\n\t\tlong n = Long.parseLong(in.next());\n\t\tlong s = Long.parseLong(in.next());\n\t\tif(!check(n, s)){\n\t\t\tSystem.out.println(0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong min = 1;\n\t\t\tlong max = n;\n\t\t\twhile(min != max)\n\t\t\t{\n\t\t\t\tlong mid = (min + max) / 2;\n\t\t\t\tif(check(mid, s))\n\t\t\t\t{\n\t\t\t\t\tmax = mid;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmin = mid + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//System.out.println(\"found: \" + min);\n\t\t\tSystem.out.println((n - min + 1));\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) \n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long s = sc.nextLong();\n        \n        int r = 0 ;\n        \n        long l = 0L ;\n        long u = n ;\n        \n        if(  (l-sumDigits(l)< s )  && (u-sumDigits(u)< s ) )\n        {\n            System.out.println(0);\n            return ;\n        }\n        \n        long specified = 0L ;\n        while( true )\n        {\n            long m = (l + u) / 2L ;\n            \n            if( ( m - sumDigits(m) ) >= s && ( (m-1) - sumDigits(m-1) ) < s  )\n            {\n                specified = m ;\n                break ;\n            }\n            \n            if( l > u  )\n                break ;\n            \n            else\n            {\n                if( ( m - sumDigits(m) ) >= s )\n                    u = m-1 ;\n                else\n                    l = m+1 ;\n            }\n        }\n        \n        System.out.println( n-specified+1 );\n        \n        \n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\t// Main solver = new Main(\"input.txt\");\n\t\tMain solver = new Main();\n\t\tsolver.solve();\n\t\tsolver.close();\n\t}\n", "complexity": "logn"}
{"code": "\t        \t\t        public static void main(String[] args) {\n\t        \t\t        \tInputReader(System.in);\n\t        \t\t    \t\tpw = new PrintWriter(System.out); \n\t        \t\t            new Thread(null ,new Runnable(){\n\t        \t\t               public void run(){\n\t        \t\t                   try{\n\t        \t\t                       solve();\n\t        \t\t                       pw.close();\n\t        \t\t                   } catch(Exception e){\n\t        \t\t                       e.printStackTrace();\n\t        \t\t                   }\n\t        \t\t               }\n\t        \t\t           },\"1\",1<<26).start();\n\t        \t\t       }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tlong n = in.nextLong();\n\t\tlong s = in.nextLong();\n\t\t\n\t\tif(diff(n) < s) {\n\t\t\tSystem.out.println(0);\n\t\t\tout.close();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlong lo = 1;\n\t\tlong hi = n;\n\t\twhile(lo < hi) {\n\t\t\tlong mid = lo + (hi - lo) / 2;\n\t\t\tif(diff(mid) >= s)\n\t\t\t\thi = mid;\n\t\t\telse\n\t\t\t\tlo = mid + 1;\n\t\t}\n\t\tSystem.out.println(n - lo + 1);\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tlong s = scan.nextLong();\n\t\tscan.close();\n\t\tlong start = s - s % 10;\n\t\twhile (start <= n && !isBig(start, s)) {\n\t\t\tstart += 10;\n\t\t}\n\t\tif (start > n) {\n\t\t\tSystem.out.println(0);\n\t\t} else {\n\t\t\tSystem.out.println(n - start + 1);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n       Scanner scanner = new Scanner(System.in);\n\n       long n =   scanner.nextLong();\n       long s =   scanner.nextLong();\n       long myLong = s;\n       long count =0;\n      while(true){\n    \t  if(myLong>n){\n    \t\t  break;\n    \t  }\n    \t  char[] num = (\"\"+myLong).toCharArray();\n\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < num.length; j++)\n\t\t\t\tsum += num[j] - '0';\n    \t\n    \t  if(myLong- sum>=s){\n    \t\t  //count++;\n    \t\t  break;\n    \t  }\n    \t  \n    \t  myLong++;\n      }\n      System.out.println(Math.max(n-myLong+1,0));\n        scanner.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t@SuppressWarnings(\"resource\")\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong(); // max\n\t\tlong s = sc.nextLong(); // differential\n\t\tlong bigNums = 0;\n\t\tlong inARow = 0;\n\t\tfor (long i = s; i <= n; i++) {\n\t\t\tif (inARow == 9) {\n\t\t\t\tbigNums += (n - i+1);\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tif (i >= s + digitSum(i)) {\n\t\t\t\t\tbigNums++;\n\t\t\t\t\tinARow++;\n\t\t\t\t} else {\n\t\t\t\t\tinARow = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(bigNums);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tlong s = scan.nextLong();\n\t\tlong ans = 0;\n\t\tif (s > n)\n\t\t{\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tif (n > s+200)\n\t\t{\n\t\t\tans += n-(s+200);\n\t\t\tn = s+200;\n\t\t}\n\t\tfor (long i = s; i <= n; i++)\n\t\t{\n\t\t\tchar[] num = (\"\"+i).toCharArray();\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < num.length; j++)\n\t\t\t\tsum += num[j] - '0';\n\t\t\tif (i - sum >= s)\n\t\t\t\tans++;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) throws IOException {\n    if (DEBUG) {\n      generate();\n    }\n    Solver solver = new Solver();\n    solver.readData();\n    solver.solveAndPrint();\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        n = cin.nextLong(); m = cin.nextLong(); k = cin.nextLong();\n        l = (k - 1)*(n / k) + n % k;\n        if(m <= l) {\n            System.out.println(m);\n        }\n        else {\n            t = n / k;\n            u = m - l;\n            ans = (0 + (t - u) * (k - 1) + n % k) % Mod;\n            ans = (ans + ((k)*((multi_mod(2, u + 1) - 2 + Mod) % Mod)) % Mod) % Mod;\n            System.out.println(ans);\n        }\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tlong s=0,mod=1000000009;\n\t\tint n=sc.nextInt(),m=sc.nextInt(),k=sc.nextInt(),c=n/k;\n\t\tif(m<=c*(k-1)+(n%k))System.out.println(m);\n\t\telse {\n\t\t\tint a=m-c*(k-1)-(n%k);\n\t\t\tlong l=0,pase=0;\n\t\t\t//System.out.println(a);\n\t\t\tlong pot=BigInteger.valueOf(2).modPow(BigInteger.valueOf(a), BigInteger.valueOf(mod)).longValue();\n\t\t\tpot=(2*(pot-1))%mod;\n\t\t\t/*System.out.println(pot);\n\t\t\tSystem.out.println(k);*/\n\t\t\tSystem.out.println(((pot*k)%mod+(m-a*k))%mod);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tnew TaskC().solve(in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMScanner sc = new MScanner();\n\t\tout = new PrintWriter(System.out);\n\n\t\tlong N = sc.nextLong();\n\t\tlong M = sc.nextLong();\n\t\tlong K = sc.nextLong();\n\t\t\n\t\tif(M<=N-N/K)\n\t\t\tout.println(M);\n\t\telse{\n\t\t\tlong ans = (fastModExpo(2,M-(N-N%K)/K*(K-1)-N%K+1,mod)-2)*K+M-(M-(N-N%K)/K*(K-1)-N%K)*K;\n\t\t\tout.println((mod+ans)%mod);\n\t\t}\t\t\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        final Scanner reader = new Scanner(new InputStreamReader(debugMode ? System.in : new FileInputStream(FILE_IN)));\n        final PrintWriter writer = new PrintWriter(debugMode ? System.out : new FileOutputStream(FILE_OUT));\n\n//        final long start = System.currentTimeMillis();\n        solveTheProblem(reader, writer);\n//        System.out.println(System.currentTimeMillis() - start);\n\n        reader.close();\n        writer.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(f.readLine());\n        long n = Long.parseLong(st.nextToken());\n        long m = Long.parseLong(st.nextToken());\n        long k = Long.parseLong(st.nextToken());\n        long d = n-m;\n        n -= d*k;\n        if (n <= 0)\n        {\n            System.out.println(m);\n            return;\n        }\n        long sum = (n%k) + d*(k-1);\n        sum += 2*k*(pow(2,n/k)-1);\n        sum %= mod;\n        System.out.println(sum);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().main();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tint n=nextInt();\n\t\tint m=nextInt();\n\t\tint k=nextInt();\n\t\tint wa=n-m;\n\t\tif(n/k<=wa){\n\t\t\tSystem.out.println(m);\n\t\t}else{\n\t\t\tint notFull=wa;\n\t\t\tint full=n/k-wa;\n\t\t\tlong res=1;\n\t\t\tint power=full+1;\n\t\t\tint mod=1000000009;\n\t\t\tlong powTwo=2;\n\t\t\twhile(power>0){\n\t\t\t\tif((power&1)==1){\n\t\t\t\t\tres=(res*powTwo)%mod;\n\t\t\t\t}\n\t\t\t\tpower>>=1;\n\t\t\t\tpowTwo=(powTwo*powTwo)%mod;\n\t\t\t}\n\t\t\tres=(((res-2+mod)%mod)*k)%mod;\n\t\t\tres=((res+notFull*(k-1))%mod+n%k)%mod;\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tlong n = in.nextInt();\n\t\tlong m = in.nextInt();\n\t\tlong k = in.nextInt();\n\t\t\n\t\tlong low = Math.min(n - (k * (n - m)), m);\n\t\t\n\t\tif(low < 0)\n\t\t{\n\t\t\tlow = 0;\n\t\t}\n\t\t\n\t\tlong result = 0;\n\t\tif(low >= k)\n\t\t{\n\t\t\tlong b = low / k;\n\t\t\t\n\t\t\tresult += fastExp(2, b + 1);\n\t\t\tresult -= 2;\n\t\t\tif(result < 0)\n\t\t\t{\n\t\t\t\tresult += MOD;\n\t\t\t}\n\t\t\t\n\t\t\tresult *= k;\n\t\t\tresult %= MOD;\n\t\t}\n\t\t\n\t\tresult += low % k;\n\t\tresult %= MOD;\n\t\t\n\t\tresult += m - low;\n\t\tresult %= MOD;\n\t\t\n//\t\tSystem.out.println(low);\n\t\t\n\t\tSystem.out.println(result);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 29);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        if (ONLINE_JUDGE){\n            System.out.println();\n            in = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n        }else{\n            in = new BufferedReader(new FileReader(\"input.txt\"));\n            out = new PrintWriter(System.out);\n            //out = new PrintWriter(\"output.txt\");\n        }\n        new CodeForces().runIt();\n        out.flush();\n        out.close();\n        return;\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        InputReader in = new InputReader(System.in);\n        int n = in.readInt();\n        int m = in.readInt();\n        int k = in.readInt();\n        long wrong = n - m;\n        long c = wrong * (k) + k - 1;\n        long xk = n - c;\n        if (xk <= 0)\n            System.out.println((n - wrong) % 1000000009);\n        else {\n            long x = (long) Math.ceil(xk / (k * 1.0));\n            long power = Long.parseLong((BigInteger.valueOf(2).modPow(\n                    BigInteger.valueOf(x + 1), BigInteger.valueOf(1000000009))\n                    .subtract(BigInteger.valueOf(2))) + \"\");\n            power += 1000000009;\n            power %= 1000000009;\n            long first = (power * k) % 1000000009;\n            // System.out.println(first);\n            first += (n - x * k - wrong);\n            System.out.println(first % 1000000009);\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().main();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tnew A().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputStreamReader in = new InputStreamReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF338A o = new CF338A(); o.main(); o.flush();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tst = new StringTokenizer(rd.readLine());\n\t\tn = Long.parseLong(st.nextToken());\n\t\tm = Long.parseLong(st.nextToken());\n\t\tk = Long.parseLong(st.nextToken());\n\t\tlong s = n - m;\n\t\ts = Math.min(s, m / (k - 1));\n\t\ts = Math.min(s, n / k);\n\t\tlong score = 0;\n\t\tscore = (s * (k - 1))%P;\n\t\tlong n1 = n - k * s, m1 = m - (k - 1) * s;\n\t\tsc = 0;\n\t//\trec(n, m);\n\t//\tSystem.out.println(sc);\n\t\tif (m1 == n1) {\n\t\t\tscore = (score + full(m1)) % P;\n\t\t\tSystem.out.println(score);\n\t\t\treturn;\n\t\t}\n\t\t\tscore = (score + m1) % P;\n\t\t\tSystem.out.println(score);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputReader r = new InputReader(System.in);\n        int n = r.nextInt();\n        int m = r.nextInt();\n        int k = r.nextInt();\n        int buckets = n / k;\n        int rem = n - buckets * k;\n        long low = 0, high = buckets, itr = 30;\n        while (itr-- > 0) {\n            long mid = (low + high) / 2;\n            long correct = mid * k + rem + (buckets - mid) * (k - 1);\n            if (correct < m)\n                low = mid;\n            else\n                high = mid;\n        }\n        long pow = (pow(2, high + 1) - 2 + mod) % mod;\n        pow *= k;\n        pow %= mod;\n        long res = m - (high * k) + pow + 10 * mod;\n        res %= mod;\n        System.out.println(res);\n    }\n", "complexity": "logn"}
{"code": "public static void main(String[] args) throws IOException\n    //Scanner input = new Scanner(new File(\"input.txt\"));\n    //PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n  input.init(System.in);\n  PrintWriter out  = new PrintWriter((System.out));\n  \n  int n = input.nextInt(), m = input.nextInt(), k = input.nextInt();\n  long border = n-n/k;\n  if(m<=border) out.println(m);\n  else\n  {\n      long count = m- border;\n      long first = ((pow(2, count+1) + mod - 2)*k)%mod;\n      first += m - k*count;\n      out.println(first%mod);\n  }\n  \n  out.close();\n}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tReader in = new Reader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        ProblemA problem = new ProblemA();\n        problem.solve();\n        problem.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] args) throws IOException\n\t\tScanner in = new Scanner(System.in);\n\t    long n = in.nextInt();\n\t\tlong m = in.nextInt();\n\t\tlong k = in.nextInt();\n\n\t\tlong w = n-m;\n\n\t\tlong c = w*k;\n\t\tif(c >= n)\n\t\t{\n\t\t\tSystem.out.println(m);\n\t\t\treturn;\n\t\t}\n\n\t\tlong rem = n-c;\n\t\tlong h = rem/k;\n\n\t\tlong p = power(2, h+1);\n\t\tp -= 2;\n\t\tp += MOD;\n\t\tp %= MOD;\n\t\tp *= k;\n\t\tp %= MOD;\n\n\t\tlong point = p + m - (h*k) % MOD;\n\t\tpoint += MOD;\n\t\tpoint %= MOD;\n\n\t\tSystem.out.println(point);\n\n\n\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Parser in = new Parser(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String args[]){\n\t\t\n\t\tScanner in= new Scanner(System.in);\n\t\tlong n = in.nextInt();\n\t\tlong m=in.nextInt();\n\t\tlong k=in.nextInt();\n\t\t\n\t\tlong x = n-m;\n\t\tlong y=n/k;\n\t\tif(x>=y)\n\t\t\tSystem.out.println(m);\n\t\telse\n\t\t{\n\t\t\tlong t= y-x;\n\t\t\tlong ans=0;\n\t\t\tans+=k*(pow(t+1)-2);\n\t\t\tans%=1000000009;\n\t\t\tans+=m-t*k;\n\t\t\tans%=1000000009;\n\t\t\tif(ans<0)\n\t\t\t\tans+=1000000009;\n\t\t\tSystem.out.println(ans);\n\t\t\t\n\t\t}\n\t\t\t\n\t\t\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew A();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew A().run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args){\n        new ProblemA();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        uu.s1();\n        uu.out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] argv)\n\t\t//String filePath=\"input.txt\";\n        String filePath=null;\n        if(argv.length>0)filePath=argv[0];\n\t\tnew C(filePath);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.UK);\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\t\t(new A()).run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner reader = new Scanner(System.in);\n\t\tlong n = reader.nextInt();\n\t\tlong m = reader.nextInt();\n\t\tlong k = reader.nextInt();\n\t\t\n\t\tlong r = (n + k - 1)/k;\n\t\t\n\t\tlong longDrops = n%k;\n\t\t\n\t\tif(longDrops == 0){\n\t\t\tlong d = m - (r * (k-1));\n\t\t\t\n\t\t\tif(d <= 0){\n\t\t\t\tSystem.out.println(m);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tlong sum = (fastExpo(2,d+1)-2) * k + (m - d*k);\n\t\t\tSystem.out.println((sum+MOD)%MOD);\n\t\t}else{\n\t\t\tlong d = (m-longDrops*r) - (r-1)*(k-longDrops-1);\n\t\t\t\n\t\t\tif(d <= 0){\n\t\t\t\tSystem.out.println(m);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tlong sum = (fastExpo(2,d+1)-2) * k + (m - d*k);\n\t\t\tSystem.out.println((sum+MOD)%MOD);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    FastIO in = new FastIO(), out = in;\n    n = in.nextLong();\n    m = in.nextLong();\n    k = in.nextLong();\n    mod = (long)1e9 + 9;\n    long x = m - (n-n%k)/k * (k-1) - n%k;\n    if(x < 0) x = 0;\n    long ans = (pow(2,x+1)-2)*k + m-x*k;\n    ans = ((ans%mod)+mod)%mod;\n    out.println(ans);\n    out.close();\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tin = new Scanner(System.in);\n\t\tnew A().run();\n\t\tin.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew CF().solveIO();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew A().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new A().run(); }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        st = new StringTokenizer(\"\");\n        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int n = nextInt();\n        int m = nextInt();\n        int k = nextInt();\n        int mod = (int) (1e9+9);\n        int correct = n - n / k;\n        int carry = n % k;\n        long ans;\n        if(correct >= m){\n            ans = m;\n        }else{\n            m -= correct;\n            int block = n / k;\n            BigInteger pow = BigInteger.valueOf(2).modPow(BigInteger.valueOf(m + 1), BigInteger.valueOf(mod));\n            ans = (pow.longValue() - 2 + mod) % mod;\n            ans = (ans * (long) k) % mod;\n            ans = (ans + (long)(block - m)* (long)(k-1) + carry) % mod;\n        }\n        System.out.println(ans);\n        \n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputReader in = new InputReader(System.in);\n\t\tlong n = in.nextLong();\n\t\tlong m = in.nextLong();\n\t\tlong k = in.nextLong();\n\t\t\n\t\tlong ans = 0;\n\t\t\n\t\tlong t = (k - 1) * (n - m);\n\t\t\n\t\tif (t <= m) {\n\t\t\tn -= k * (n - m);\n\t\t\t\n\t\t\tlong g = n / k;\n\t\t\t\n\t\t\tans = 2 * k * (powmod(g) - 1) + n % k;\n\t\t\t\n\t\t\tans = (ans + t) % MOD;\n\t\t}\n\t\telse {\n\t\t\tans = m;\n\t\t}\n\t\t\n\t\tSystem.out.println(ans % MOD);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        long n = in.nextInt();\n        long correct = in.nextInt();\n        long k = in.nextInt();\n        long wrong = n - correct;\n        long set = wrong * k + k - 1;\n        if (set >= n) {\n            out.println(correct);\n        } else {\n            long needExtraCorrect = n - (wrong * k + k - 1);\n            long firstSet = needExtraCorrect + k - 1;\n            long otherSet = correct - firstSet;\n\n            long firstDouble = firstSet / k;\n            otherSet += firstSet % k;\n            long[][] mat = new long[][]{ {2, 2*k}, {0, 1}};\n            long[][] A = pow(mat, firstDouble, MOD);\n            long score = (A[0][1] + otherSet) % MOD;\n            out.println(score);\n        }\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n//\t\tlong a = 2;\n//\t\tint q = nextInt();\n//\t\tlong sum = a;\n//\t\tint s = q;\n//\t\tfor (int i = 2; i <= s; i++) {\n//\t\t\ta = a*2+2;\n//\t\t\tsum += a;\n//\t\t}\n//\t\tSystem.out.println(sum);\n//\t\tSystem.out.println((4*((long)Math.pow(2, s)-1)-2*s));\n\t\tint n = nextInt();\n\t\tint m = nextInt();\n\t\tint k = nextInt();\n\t\tlong t = (long)(n-m) * k;\n\t\tint mod = (int) (1e9+9);\n\t\tlong ans = 0;\n\t\tint x = m / (k-1);\n\t\tif (m % (k-1) != 0)\n\t\t\tx++;\n\t\tif (n-m < x-1) {\n\t\t\tint s = (int) (n - t);\n\t\t\tint cnt = s / k;\n\t\t\tans = BigInteger.valueOf(2).modPow(BigInteger.valueOf(cnt+1), BigInteger.valueOf(mod)).longValue();\n\t\t\tans = (ans-2+mod) % mod;\n//\t\t\tans = ans * 4 % mod;\n//\t\t\tans = (ans-2*cnt+2*mod) % mod;\n\t\t\tans = ans * k % mod;\n\t\t\tans = (ans+(long)(k-1) * (n-m) % mod) % mod;\n\t\t\tans = (ans+s % k) % mod;\n\t\t}\n\t\telse\n\t\t\tans = m;\n\t\tSystem.out.println(ans);\n\t\tpw.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tnew Thread(null, new _____A(), \"\", 128 * (1L << 20)).start();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tin = new Scanner(System.in);\n\t\tnew A().run();\n\t\tin.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFC();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan=new Scanner(System.in);\n\t\tlong n=scan.nextLong(), k=scan.nextLong();\n\t\tif(n==0) {\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tlong x=2*n-1;\n\t\tlong e=exp(2,k);\n\t\tSystem.out.println((x%MOD*e%MOD+1)%MOD);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Main().run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws Exception{\n        FastInput fi = new FastInput(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        x = fi.nextLong();\n        k = fi.nextLong();\n\n        if(x == 0) {\n            System.out.println(0);\n            return;\n        }\n\n//        System.out.println(pow(2, k+1));\n        long q1 = (pow(2, k+1) * (x%MOD)) % MOD;\n        long q2 = pow(2, k);\n        long q3 = 1;\n//        System.out.println(q1);\n//        System.out.println(q2);\n//        System.out.println(q3);\n\n\n        long exp = (q1-q2 + MOD + MOD)%MOD;\n        exp = (exp + q3)%MOD;\n\n//        exp = (exp*2)%MOD;\n\n        pw.println(exp);\n\n        pw.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        init(System.in);\n        BigInteger x = new BigInteger(next());\n        if (x.compareTo(BigInteger.ZERO) == 0) {\n            System.out.println(0);\n            return;\n        }\n        BigInteger k = new BigInteger(next());\n        BigInteger mod = new BigInteger(\"1000000007\");\n        BigInteger two = BigInteger.ONE.add(BigInteger.ONE);\n        BigInteger ans = two.modPow(k, mod);\n        ans = ans.multiply(two.multiply(x).subtract(BigInteger.ONE)).add(BigInteger.ONE).mod(mod);\n        System.out.println(ans);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new C().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        if(args.length>0 && args[0].equalsIgnoreCase(\"d\")) {\n            DEBUG_FLAG = true;\n        }\n        InputReader in = new InputReader();\n        PrintWriter out = new PrintWriter(System.out);\n        int t = 1;//in.nextInt();\n        long start = System.nanoTime();\n        while(t-- >0) {\n            new test().solve(in, out);\n        }\n        long end = System.nanoTime();\n        debug(\"\\nTime: \" + (end-start)/1e6 + \" \\n\\n\");\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    String[] strs = reader.readLine().split(\" \");\n    long x = Long.parseLong(strs[0]);\n    long k = Long.parseLong(strs[1]);\n    long twoPK = modPow(2, k);\n    long twoPK_1 = (twoPK * 2) % mod;\n    long res = ((twoPK_1 * (x % mod)) % mod - (twoPK - 1) + mod) % mod;\n    System.out.println(x == 0? x: res);\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t(new A992()).run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws IOException\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        \n        long N,K,ans;\n        \n        //System.out.println(); //comment this line\n        String s[]=br.readLine().trim().split(\" \");\n        \n        N=Long.parseLong(s[0]);\n        K=Long.parseLong(s[1]);\n        \n        BigInteger bi=new BigInteger(N+\"\");\n        BigInteger a=new BigInteger(N+\"\");\n        BigInteger two=new BigInteger(2+\"\");\n        \n        if(N==0)\n        {\n            System.out.println(0);\n            System.exit(0);\n        }\n        if(K==0)\n        {\n            a=a.multiply(two);\n            a=a.mod(m);\n            \n            System.out.println(a);\n            System.exit(0);\n        }\n        \n        long p=pow(2,K);\n        \n        BigInteger p2=new BigInteger(p+\"\");\n        BigInteger tmp=p2.subtract(BigInteger.ONE);\n        tmp=tmp.mod(m);\n        \n        p2=p2.multiply(two);\n        p2=p2.mod(m);\n        \n        a=a.multiply(p2);\n        a=a.mod(m);\n        \n        a=a.subtract(tmp);\n        a=a.mod(m);\n        \n        if(!(a.signum()==1)&&!(a.signum()==0))\n        a.add(m);\n        \n        System.out.println(a);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew C().run();\n\t}\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) throws java.lang.Exception{\n  \n    A driver = new A(true);\n    driver.run();\n    driver.closeResources();\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) \n        Scanner sc = new Scanner(System.in);\n        BigInteger x = sc.nextBigInteger();\n        BigInteger k = sc.nextBigInteger();\n        BigInteger zero = new BigInteger(\"0\");\n        BigInteger one = new BigInteger(\"1\");\n        BigInteger two = new BigInteger(\"2\");\n        BigInteger modulo = new BigInteger(\"1000000007\");\n        BigInteger ans = two.modPow(k.add(one),modulo);\n        ans = ans.multiply(x);\n        ans = ans.subtract(two.modPow(k,modulo));\n        ans = ans.add(one);\n        ans = ans.mod(modulo);\n        if (x.equals(zero))\n        {\n         System.out.println(0);\n         }\n         else\n         {\n        System.out.println(ans);\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) { new utkarsh().run(); }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new C(), \"_cf\", 1 << 28).start();}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        solver.withProcedure(() -> {\n            String[] input = solver.readString().split(\" \");\n            BigInteger x = new BigInteger(input[0]);\n            BigInteger k = new BigInteger(input[1]);\n\n            if (x.compareTo(BigInteger.ZERO) == 0) {\n                solver.println(\"\" + 0);\n                return;\n            }\n\n            BigInteger two = BigInteger.valueOf(2);\n\n            BigInteger mm = BigInteger.valueOf(m);\n            BigInteger binpowedK = two.modPow(k, mm);\n            BigInteger binpowedKPlusOne = two.modPow(k.add(BigInteger.ONE), mm);\n\n            BigInteger res = binpowedKPlusOne.multiply(x).subtract(binpowedK.subtract(BigInteger.ONE)).mod(mm);\n\n            if (res.compareTo(BigInteger.ZERO) < 0) {\n                res = BigInteger.ZERO;\n            }\n\n            solver.println(\"\" + res);\n        }).solve();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tJS scan = new JS();\n\t\tlong n = scan.nextLong();\n\t\tlong k = scan.nextLong();\n\t\tif(n == 0) {\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tif(k == 0) {\n\t\t\tlong ans = (n%m)*(2%m)%m;\n\t\t\tSystem.out.println(ans%m);\n\t\t\treturn;\n\t\t}\n\t\t//System.out.println(2+\" \"+(k+1)+\" \"+m);\n\t\tlong coeff = power(2L, k+1, m);\n\t\t//System.out.println(coeff);\n\t\tlong r = (coeff%m)*(n%m)%m;\n\t\t//System.out.println(r);\n\t\tlong x = power(2L, k, m)%m-1;\n\t\tif(x < 0) x += m;\n\t\tlong ans = r-x;\n\t\tif(ans < 0) ans += m;\n\t\tSystem.out.println(ans%m);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new Solution1().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastReader in = new FastReader(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n\n        long mod = (long) 1e9 + 7;\n\n        long xx = in.nextLong(), kk = in.nextLong();\n\n        if(xx == 0){\n            pw.println(0); pw.close();\n            return;\n        }\n\n        BigInteger x = BigInteger.valueOf(xx), k = BigInteger.valueOf(kk);\n\n       // long a = bigMod(2, k+1, mod );long b = bigMod(2, k, mod);\n\n        BigInteger MOD = BigInteger.valueOf(mod);\n        BigInteger a = BigInteger.valueOf(2).modPow(BigInteger.valueOf(kk+1), MOD);\n        BigInteger b = BigInteger.valueOf(2).modPow(BigInteger.valueOf(kk), MOD);\n\n\n        BigInteger s = (a.multiply(x)).mod(MOD);\n        s = s.subtract(b.mod(MOD));\n        s = s.add(BigInteger.ONE);\n        s = s.mod(MOD);\n        s = s.add(MOD);\n        s = s.mod(MOD);\n\n       // debug(a, b, x);\n\n       // long s = ((a * x) % mod - b % mod + 1 + mod) % mod;\n\n        pw.println(s);\n\n\n        pw.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong x = scan.nextLong();\n\t\tlong k = scan.nextLong();\n\t\tif(x == 0)\n\t\t{\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tx = x%mod;\n\t\tlong power = pow(2,k + 1)%mod;\n\t\tpower = (power*x)%mod;\n\t\tlong num = (pow(2,k) - 1 + mod)%mod;\n\t\tlong ans = (power - num + mod)%mod;\n\t\tSystem.out.println((ans));\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new cf3(),\"cf3\",1<<26).start();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        _992C solver = new _992C();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\t\tpublic static void main(String[] args) throws IOException \n\t\t\tScanner sc=new Scanner(System.in);\n\t\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\t\tlong x=sc.nextLong(),k=sc.nextLong();\n\t\t\tif(x==0)\n\t\t\t{\n\t\t\t\tSystem.out.println(0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif(k==0)\n\t\t\t{\n\t\t\t\tpw.println((2*x)%mod);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tpw.close();return;\n\t\t\t}\n\t\t\t\n\t\t\tlong ans=2*x-1;\n\t\t\tans=ans%mod;\n\t\t\t\n\t\t\tlong b=powMod(k,2);\n\t\t\tans=((ans*b)+1)%mod;\n\t\t\t\n\t\t\t\n\t\t\tpw.println(ans);\n\t\t\t\n\t\t\tpw.close();\n\t\t\n\t\t\t\n\t\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception{\n\t\tScanner scan=new Scanner(System.in);\n\t\tlong x=scan.nextLong(), k=scan.nextLong();\n\t\tlong MOD = 1000000007;\n\t\tif(x==0){\n\t\t\tSystem.out.println(\"0\");\n\t\t\treturn;\n\t\t}\n\t\tx %= MOD;\n\t\tlong ans= (((new myC()).fastPow(2L, k+1)*x)%MOD - (new myC()).fastPow(2L, k) + MOD + 1)% MOD;\n\t\tans %= MOD;\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter printer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tStringTokenizer inputData = new StringTokenizer(reader.readLine());\n\t\tlong st = Long.parseLong(inputData.nextToken());\n\t\tif(st == 0) {\n\t\t\tprinter.println(0);\n\t\t\tprinter.close();\n\t\t\treturn;\n\t\t}\n\t\tst %= MOD;\n\t\tlong years = Long.parseLong(inputData.nextToken());\n\t\tlong[][] res = exp(years);\n\t\tlong ans = (res[0][0] * st % MOD * 2 % MOD + res[0][1] * (-1 + MOD) % MOD) % MOD;\n\t\tprinter.println(ans);\n\t\tprinter.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Solver solver = new Solver();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new Main(),\"Main\",1<<26).start();\n    }\n", "complexity": "logn"}
{"code": "\t    public static void main(String[] args) throws Exception {\n\t\t\tnew Thread(null, new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnew main().run();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, \"1\", 1 << 26).start();\n\n\t\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tlong x = in.nextLong();\n\t\tlong k = in.nextLong();\n\t\t\n\t\tif(x==0)\n\t\t\tpw.println(0);\n\t\telse\n\t\t{\n\t\t\tlong mul = modularExponentiation(2L, k, mod);\n\t\t\tx = (x%mod * 2L%mod)%mod;\n\t\t\tx = (x%mod - 1L%mod + mod)%mod;\n\t\t\tx = (x%mod * mul%mod)%mod;\n\t\t\tx = (x%mod + 1%mod)%mod; \n\t\t\tpw.print(x);\n\t\t}\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        ConsoleIO io = new ConsoleIO(new InputStreamReader(System.in), new PrintWriter(System.out));\n\n//        String fileName = \"C-large\";\n//        ConsoleIO io = new ConsoleIO(new FileReader(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + fileName + \".in\"), new PrintWriter(new File(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + fileName + \".out\")));\n\n        new Main(io).solve();\n//        new Main(io).solveLocal();\n\n        io.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\tScanner scan=new Scanner(System.in);\n\t\tlong x=scan.nextLong();\n\t\tlong k=scan.nextLong();\n\t\tlong MOD=1000000007;\n\t\tif(x==0){System.out.println(0);return;}\n\t\tx%=MOD;\n\t\tlong a=(new Num()).pow(2L,k+1);\n\t\tlong b=(new Num()).pow(2L,k);\n\t\tlong res=(a*x)%MOD-b+1;\n\t\tif(res<0){res+=MOD;}\n\t\tSystem.out.println(res%MOD);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBigInteger x=in.RB(),k=in.RB();\n\t\tif(k.equals(BigInteger.ZERO))System.out.println(x.multiply(tow).mod(mod));\n\t\telse if(x.equals(BigInteger.ZERO))System.out.println(0);\n\t\telse {\n\t\t\tBigInteger x1=tow.multiply(x).subtract(BigInteger.ONE);\n\t\t\tx1=x1.mod(mod);\n\t\t\tBigInteger x2=pow(tow,k);\n\t\t\tx2=x2.mod(mod);\n\t\t\tSystem.out.println(x1.multiply(x2).add(BigInteger.ONE).mod(mod));\n\t\t\t\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args []){\n        long x = nextLong();\n        long a = 2, b = nextLong(), c = 1000000000+7;\n        long res = 1;\n        a %= c;\n        if (x==0){\n            out.println(0);\n            out.flush();\n            return;\n        }\n        for (; b != 0; b /= 2) {\n            if (b % 2 == 1)\n                res = (res * a) % c;\n            a = (a * a) % c;\n        }\n        BigInteger r = new BigInteger(String.valueOf(res));\n        BigInteger y = new BigInteger(String.valueOf(x));\n        BigInteger ans = y.multiply(new BigInteger(\"2\")).subtract(new BigInteger(\"1\")).multiply(r).add(new BigInteger(\"1\")).mod(new BigInteger(String.valueOf(c)));\n        out.println(ans);\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner input = new FastScanner(System.in);\n\t\t\n\t\tlong x = input.nextLong();\n\t\tlong k = input.nextLong();\n\t\t\n\t\tlong[][] matrix = {\n\t\t\t{2, MOD - 1},\n\t\t\t{0, 1}\n\t\t};\n\t\t\n\t\tif (x == 0)\n\t\t\tSystem.out.println(0);\n\t\telse if (k == 0) {\n\t\t\tSystem.out.println((x * 2) % MOD);\n\t\t} else {\n\t\t\tx %= MOD;\n\t\t\tmatrix = matrixexpo(k, matrix);\n\t\t\tlong low = (x * matrix[0][0] + matrix[0][1]) % MOD;\n\t\t\tlong hi = x * mathpow(k, 2) % MOD;\n\t\t\tSystem.out.println((low + hi) % MOD);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] z) throws Exception{\n        Scanner s = new Scanner(System.in);\n        long a = s.nextLong(), b=s.nextLong(), c=(a*2-1)%mod, i=binpow(2,b)%mod;\n        System.out.println(a<1 ? a : (c*i+1)%mod);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        CNastyaAndAWardrobe solver = new CNastyaAndAWardrobe();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong x = scan.nextLong();\n\t\tlong k = scan.nextLong();\n\t\tlong v = 1000000007L;\n\t\tif(x>0){\n\t\t\tlong p = ((2*x)-1)%v;\n\t\t\tlong a = ans(2L,k,v);\n\t\t\tlong b = (p*a)%v;\n\t\t\tSystem.out.println((b+1)%v);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(0);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException\n        new A().solve();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\t\tScanner sc =  new Scanner(System.in) ;\n\n\t\tlong x = sc.nextLong() ; \n\t\tlong k = sc.nextLong() ; \n\t\tif(x==0)\n\t\t{System.out.println(0); return ;}\n\t\tif(k==0)\n\t\t{System.out.println((2l*x)%mod);return ;}\t\n\n\n\t\tlong m=pow(2,k);\n\n\n\t\tlong a = 2l*(x%mod)*(m%mod);\n\n\n\t\ta = a-m+1 ;\n\n\t\ta=a%mod ; \n\t\tif(a<0)a=(a%mod + mod) % mod;\n\n\t\tSystem.out.println(a);\n\n\n\n\n\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        // Scanner scan = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        // int n = Integer.parseInt(bf.readLine());\n        StringTokenizer st = new StringTokenizer(bf.readLine());\n        // int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n\n        long n = Long.parseLong(st.nextToken());\n        long k = Long.parseLong(st.nextToken());\n        int mod = 1000000007;\n\n        if(n == 0) {\n          out.println(0);\n          out.close(); System.exit(0);\n        }\n        n %= mod;\n\n        long ans = exp(2, (int)((k+1) % (mod-1)), mod);\n        ans = (1L*ans * n) % mod;\n        ans = ans + mod + 1 - exp(2, (int)((k) % (mod-1)), mod);\n        ans %= mod;\n        out.println(ans);\n        // int n = scan.nextInt();\n\n        out.close(); System.exit(0);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {new ModifyLongest().run();}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\t\ttok = new StringTokenizer(\"\");\n\t\tMain main = new Main();\n\t\tmain.solve();\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException \n//\tSystem.out.println(power(2,9,1000000007));\n\tlong x=l();\n\tlong k=l();\nif(x!=0)\n{\n\tlong f=x%1000000007;\n\tlong s=(f*power(2,k+1,1000000007))%1000000007;\n\t//out.println(s);\n\tlong e=\t(power(2,k,1000000007)-1)%1000000007;\n\t//out.println(e);\n\tlong ans=(s-e+1000000007)%1000000007;\n\t\n\tout.println(ans);\n\t\n}\nelse\n{\n\tout.println(0);\n}\n\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)\n        in = new InputReader(System.in);\n        out = new PrintWriter(System.out);    \n        \n        long x = in.nextLong();\n        long k = in.nextLong();\n        \n        if(x == 0){\n            out.println(0);\n        }\n        else{\n        \n        long mul = pow(2, k + 1, mod);\n        x %= mod;\n        mul = (mul * x) % mod;\n        long sub = pow(2, k, mod);\n        sub = (sub - 1 + mod) % mod;\n        mul = (mul - sub + mod) % mod;\n        out.println(mul);\n        }\n        \n        out.close(); \n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C().run(); }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tlong x = s.nextLong(), k = s.nextLong() + 1, mod = (long)Math.pow(10, 9) + 7;\n\t\tlong ans;\n\t\tif(x == 0){\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n//\t\tif(x != 0){\n\t\t\tans = ((power(2, k % (mod - 1), mod) % mod) * (x % mod)) % mod; \n\t/*\t}else{\n\t\t\tans = 0;\n\t\t}\n\t\t*/ans = (ans - power(2, (k - 1) % (mod - 1), mod) % mod + 2 * mod) % mod;\n\t\tSystem.out.println((ans + 1) % mod);\n\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        CNastyaAndAWardrobe solver = new CNastyaAndAWardrobe();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s=br.readLine().split(\" \");\n\t\tBigInteger x = new BigInteger(s[0]);\n\t\tBigInteger k = new BigInteger(s[1]);\n\n\t\tBigInteger mod = new BigInteger(String.valueOf((int) (Math.pow(10, 9) + 7)));\n\n\t\tBigInteger two = new BigInteger(\"2\");\n\t\tBigInteger interm = two.modPow(k, mod);\n\n\t\tBigInteger res = interm.multiply(two.multiply(x).subtract(BigInteger.ONE)).add(BigInteger.ONE).mod(mod);\n\n\t\tif(x.equals(BigInteger.ZERO)) {\n\t\t\tSystem.out.println(\"0\");\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n    public static void main(String[] args) {\n        new Thread(null,new Main(),\"Main\",1<<26).start();\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ScanReader in = new ScanReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        C489 solver = new C489();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    Scanner in = new Scanner(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    TaskC solver = new TaskC();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Solver().run(1);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tBigInteger x = new BigInteger(sc.next());\n\t\tBigInteger k = new BigInteger(sc.next());\n\n\t\tBigInteger mod = new BigInteger(String.valueOf((int) (Math.pow(10, 9) + 7)));\n\n\t\tBigInteger two = new BigInteger(\"2\");\n\t\tBigInteger interm = two.modPow(k, mod);\n\n\t\tBigInteger res = interm.multiply(x).add(interm.multiply(x)).subtract(interm).add(BigInteger.ONE).mod(mod);\n\n\t\tif(x.equals(BigInteger.ZERO)) {\n\t\t\tSystem.out.println(\"0\");\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Nas solver = new Nas();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new Main().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 26).start();\n        else new Main().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n    \t\n    \tsolveQ3();\n    \n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner sc=new Scanner(System.in);\n\t\tlong x=sc.nextLong();\n\t\tlong k=sc.nextLong();\n\t\tlong mod=1000000007;\n\t\tif(k==0 || x==0)\n\t\t\tSystem.out.println((2*x)%mod);\n\t\telse\n\t\t{\tlong answer=1;\n\t\t\tanswer+=(power(2,k,mod))*(((2*x)-1)%mod);\n\t\t\tSystem.out.println(answer%mod);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)\n        new Main().solve();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws IOException\n        Scanner in=new Scanner(System.in);\n        PrintWriter out=new PrintWriter(System.out);\n        long x=in.nextLong();\n        long k=in.nextLong();\n        \n        long ans=mod_exp(2,k+1);\n        ans*=(x%mod);\n        ans%=mod;\n        ans-=mod_exp(2,k);\n        ans%=mod;\n        ans++;\n        ans%=mod;\n        if(ans<0)\n            ans+=mod;\n        if(x==0)\n            ans=0;\n        out.println(ans);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        CNastyaAndAWardrobe solver = new CNastyaAndAWardrobe();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n//        Scanner sc = new Scanner(new FileInputStream(\"Test.in\"));\n        PrintWriter pw = new PrintWriter(System.out);\n//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"Test.out\"));\n//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"Test.in\"));\n        Runtime runtime = Runtime.getRuntime();\n        long usedMemoryBefore = runtime.totalMemory() - runtime.freeMemory();\n        TIME_START = System.currentTimeMillis();\n        Task t = new Task();\n        t.solve(sc, pw);\n        TIME_END = System.currentTimeMillis();\n        long usedMemoryAfter = runtime.totalMemory() - runtime.freeMemory();\n        pw.close();\n        System.out.println(\"Memory increased:\" + (usedMemoryAfter-usedMemoryBefore) / 1000000 );\n        System.out.println(\"Time used: \" + (TIME_END - TIME_START) + \".\");\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tJS in = new JS();\n\t\tx = in.nextLong();\n\t\tk = in.nextLong();\n\t\t\n\t\tif(x==0) {\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlong c = pow(2,k);\n\t\tif(c==0) c = mod;\n\t\tlong sub = c-1;\n\t\t\n\t\tlong low = ((c*(x%mod))%mod - sub);\n\t\twhile(low < 0) low += mod;\n\t\tlong res = ((low*2)%mod + sub)%mod;\n\t\t\n\t\tSystem.out.println(res);\n\t\t\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(in.readLine());\n\t\t\n\t\tlong x = Long.parseLong(st.nextToken());\n\t\tif(x == 0){\n\t\t\tSystem.out.println(0);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\tfinal long k = Long.parseLong(st.nextToken());\t\n\t\tx = x%M;\n\t\t\n\t\tlong ans = (exp(2, k+1)*x - (exp(2, k) - 1))%M;\n\t\tif(ans < 0) ans += M;\n\t\tSystem.out.println(ans);\n\t\t/*\n\t\tfor(long i = 1234567890; i < 1234567999; i++){\n\t\t\tans = (exp(2, i+1)*x - (exp(2, i) - 1))%M;\n\t\t\tif(ans < 0) ans += M;\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t\t/*\n\t\tSystem.out.println((k-1)/2);\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(exp(2, k));\n\t\tSystem.out.println(exp(2, k+1));\n\t\t*/\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        long beginTime = System.nanoTime();\n        InputStream is = DEBUG ? new FileInputStream(\"resources/codeforcesedu43/ProblemC-1.in\") : System.in;\n        try (Scanner scanner = new Scanner(new BufferedReader(new InputStreamReader(is)))) {\n            long x = scanner.nextLong();\n            long k = scanner.nextLong();\n            if (x != 0) {\n                x = (2 * x - 1) % MODULUS;\n                long twoPowK = modularPow(2, k, MODULUS);\n                x = (x * twoPowK + 1) % MODULUS;\n            }\n            System.out.println(x % 1000000007);\n        }\n        System.err.println( \"Done in \" + ((System.nanoTime() - beginTime) / 1e9) + \" seconds.\");\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s=br.readLine().split(\" \");\n\t\tBigInteger x = new BigInteger(s[0]);\n\t\tBigInteger k = new BigInteger(s[1]);\n\n\t\tBigInteger mod = new BigInteger(String.valueOf((int) (Math.pow(10, 9) + 7)));\n\n\t\tBigInteger two = new BigInteger(\"2\");\n\t\tBigInteger interm = two.modPow(k, mod);\n\n\t\tBigInteger res = interm.multiply(x).add(interm.multiply(x)).subtract(interm).add(BigInteger.ONE).mod(mod);\n\n\t\tif(x.equals(BigInteger.ZERO)) {\n\t\t\tSystem.out.println(\"0\");\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        long x = scanner.nextLong();\n        long k = scanner.nextLong();\n        if (x==0) {\n            System.out.println(\"0\");\n            return;\n        }\n        BigInteger M = BigInteger.valueOf(1000_000_000L+7);\n        BigInteger modus = BigInteger.valueOf(x).multiply(BigInteger.valueOf(2)).subtract(BigInteger.ONE).mod(M);\n        BigInteger operandi = BigInteger.valueOf(2).modPow(BigInteger.valueOf(k), M);\n        BigInteger result = modus.multiply(operandi).mod(M).add(BigInteger.ONE).mod(M);\n        System.out.println(result);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner in = new FastScanner();\n\t    \n\t\tlong x = in.nextLong(), k = in.nextLong();\n\t\t\n\t\tlong mod = 1000000007;\n\t\t\n\t\tlong one = pow(2,k,mod);\n\t\t\n\t\tone %= mod;\n\t\t\n\t\tlong two = (2*x)%mod-1;\n\t\t\n\t\ttwo %= mod;\n\t\t\n\t\tlong ans = (one*two)%mod+1;\n\t\t\n\t\tans %= mod;\n\t\t\n\t\tif(ans<0)\n\t\t\tans += mod;\n\t\t\n\t\tif(x==0)\n\t\t\tSystem.out.println(\"0\");\n\t\telse\n\t\t\tSystem.out.println(ans);\n\t        \n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tlong x = s.nextLong(), k = s.nextLong();\n\t\tif (x == 0) {\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tlong max = x % mod;\n\t\tlong temp = power(2, k, mod);\n\t\ttemp %= mod;\n\t\tmax = (max % mod) * (temp % mod);\n\t\tmax %= mod;\n\t\tlong min = max % mod;\n\t\tmin = mod(min - (temp - 1));\n\t\tmin %= mod;\n\t\tlong num = mod(max - min + 1);\n\t\tlong n = num % mod;\n\t\tn = (n % mod) * (min % mod + max % mod);\n\t\tn = n % mod;\n\t\tn %= mod;\n\t\tlong ans = n % mod * modInverse(num, mod);\n\t\tSystem.out.println(ans % mod);\n\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        long x = sc.nextLong(), k = sc.nextLong();\n        if(x == 0)\n            out.println(0);\n        else\n            out.println(((x % MOD * 2 - 1 + MOD) % MOD * modPow(2, k) % MOD + 1) % MOD);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "  public static void main (String[] argv) \n\t  new Main();\n  } \n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args)\n\t\tlong x=nl(),k=nl();\n\t\tif(x==0)\n\t\t{\n\t\t\tpr(0);\n\t\t\texit();\n\t\t}\n\t\tx%=mod;\n\t\tpr((((x*powm(2,k+1,mod))%mod-powm(2,k,mod)+1)%mod+mod)%mod);\n\t\tSystem.out.print(output);\n\t}\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    new Thread(null, new Runnable() {\n      @Override\n      public void run() {\n        long start = System.currentTimeMillis();\n        String debug = args.length > 0 ? args[0] : null;\n        if (debug != null) {\n          try {\n            is = java.nio.file.Files.newInputStream(java.nio.file.Paths.get(debug));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n        reader = new java.io.BufferedReader(new java.io.InputStreamReader(is), 32768);\n        solve();\n        out.flush();\n        tr((System.currentTimeMillis() - start) + \"ms\");\n      }\n    }, \"\", 64000000).start();\n  }\n", "complexity": "logn"}
{"code": "\t\tpublic static void main(String[] args) throws Exception \n\t\t\tnew Thread(null, new Runnable() \n\t\t\t{\n\t\t\t\tpublic void run() \n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// new CODEFORCES().soln();\n\t\t\t\t\t} catch (Exception e)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, \"1\", 1 << 26).start();\n\t\t\tnew template().soln();\n\t\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        OJ = System.getProperty(\"ONLINE_JUDGE\") != null;\n        C solution = new C(System.out);\n        if (OJ) {\n            reader = new BufferedReader(new InputStreamReader(System.in));\n            solution.run();\n        } else {\n            reader = new BufferedReader(new FileReader(new File(C.class.getName() + \".txt\")));\n            long timeout = System.currentTimeMillis();\n            while (solution.hasNext()) {\n                solution.run();\n                solution.println();\n                solution.println(\"----------------------------------\");\n            }\n            solution.println(\"time: \" + (System.currentTimeMillis() - timeout));\n        }\n        solution.close();\n        reader.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException{\n        // TODO Auto-generated method stub\n        Scanner sc=new Scanner(System.in);  \n        Main mm=new Main(); \n        long x=sc.nextLong();\n            long k=sc.nextLong();\n            if(x==0) {\n                System.out.println(0);\n            }\n            else {\n            long temp=mm.power(2, k, 1000000007);\n            long temp1=(2*x-1)%(1000000007);\n            long temp3=(temp1*temp)%(1000000007);\n            System.out.println((temp3+1)%1000000007);\n            }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n            long x = in.nextLong();\n            long k = in.nextLong();\n            long mod = (long)1e9+7l;\n            //out.println(mod);\n            long mul1 = 1;\n            long mul2 = 2*x-1;\n            mul2 = mul2%mod;\n            long pow = k;\n            long to = 2;\n            while(pow>0l){\n                if(pow%2l==1l){\n                    mul1 = mul1*to;\n                    mul1%=mod;\n                }\n                to=to*to;\n                to%=mod;\n                pow = pow/2l;\n            }\n            mul1 = mul1*mul2;\n            mul1%=mod;\n            mul1+=1;\n            if(x!=0)\n            out.println(mul1%mod);\n            else\n            out.println(0);\n        \n        out.close();    \n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[])\n        Scanner ex=new Scanner(System.in);\n        long x=ex.nextLong();\n        long k=ex.nextLong();\n        long mod=1000000007;\n        if(k==0)\n        System.out.println((2*x)%mod);\n        else if(x==0)\n        System.out.println(\"0\");\n        else\n        {\n            long pow=power(2,k);\n            long pow1=(2*pow)%mod;\n            long ans=(pow1*(x%mod))-pow+1;\n            if(ans<0)\n            ans=ans+mod;\n            ans=ans%mod;\n            System.out.println(ans);\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in), 1024 * 48);\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n        String str = br.readLine();\n        StringTokenizer st = new StringTokenizer(str, \" \");\n        long x = Long.parseLong(st.nextToken());\n        long k = Long.parseLong(st.nextToken());\n        if (x == 0) {\n            bw.write(0 + \"\\n\");\n        } else {\n            int power = power(k, 1000000007);\n            long answer = (((power * 2) % 1000000007) * (x % 1000000007)) % 1000000007;\n            answer -= power - 1;\n            answer = (answer + 1000000007) % 1000000007;\n            bw.write(answer + \"\\n\");\n        }\n        bw.flush();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\tScanner scan=new Scanner(System.in);\n\t\tlong x=scan.nextLong();\n\t\tlong k=scan.nextLong();\n\t\tlong MOD=1000000007;\n\t\tif(x==0){System.out.println(0);return;}\n\t\tx %= MOD;\n\t\tlong a=pow(2L,k+1);\n\t\tlong b=pow(2L,k);\n\t\tlong res=(a*x)%MOD-b+1;\n\t\tif(res<0){res+=MOD;}\n\t\tSystem.out.println(res%MOD);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        // PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n        // \"output.txt\")));\n\n        Scanner in = new Scanner();\n        int n = in.nextInt();\n        int minX = -1;\n        int start = 1;\n        int end = n;\n        c = 0;\n        while (start <= end) {\n            int mid = (start + end) >> 1;\n            c = increaseC(c);\n            System.out.println(\"? \" + mid + \" 1 \" + n + \" \" + n);\n            System.out.flush();\n\n            int v = in.nextInt();\n            if (v == 2) {\n                minX = mid;\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        //System.out.println(\"Minx \" + minX);\n        int maxX = -1;\n        start = minX;\n        end = n;\n        while (start <= end) {\n            int mid = (start + end) >> 1;\n            c = increaseC(c);\n            System.out.println(\"? \" + minX + \" 1 \" + mid + \" \" + n);\n            System.out.flush();\n            int v = in.nextInt();\n            if (v == 2) {\n                maxX = mid;\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        // System.out.println(\"Maxx \" + maxX);\n        int minY = -1;\n        start = 1;\n        end = n;\n        while (start <= end) {\n            int mid = (start + end) >> 1;\n            c = increaseC(c);\n            System.out.println(\"? \" + minX + \" \" + mid + \" \" + maxX + \" \" + n);\n            System.out.flush();\n\n            int v = in.nextInt();\n            if (v == 2) {\n                minY = mid;\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        // System.out.println(\"MinY \" + minY);\n        int maxY = -1;\n        start = minY;\n        end = n;\n        while (start <= end) {\n            int mid = (start + end) >> 1;\n            c = increaseC(c);\n            System.out.println(\"? \" + minX + \" \" + minY + \" \" + maxX + \" \" + mid);\n            System.out.flush();\n\n            int v = in.nextInt();\n            if (v == 2) {\n                maxY = mid;\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        // System.out.println(\"MaxY \" + maxY);\n        int middleMinX = maxX;\n        start = minX;\n        end = maxX;\n        while (start <= end) {\n            int mid = (start + end) >> 1;\n            c = increaseC(c);\n            System.out.println(\"? \" + minX + \" \" + minY + \" \" + mid + \" \" + maxY);\n            System.out.flush();\n\n            int v = in.nextInt();\n            if (v == 1) {\n                middleMinX = mid;\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        //System.out.println(\"MiddleMinX \" + middleMinX);\n        int middleMaxX = -1;\n        start = middleMinX + 1;\n        end = maxX;\n        while (start <= end) {\n            int mid = (start + end) >> 1;\n            c = increaseC(c);\n            System.out.println(\"? \" + mid + \" \" + minY + \" \" + maxX + \" \" + maxY);\n            System.out.flush();\n\n            int v = in.nextInt();\n            if (v == 1) {\n                middleMaxX = mid;\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n\n        // System.out.println(\"MiddleMaxX \" + middleMaxX);\n        if (middleMaxX == -1) {\n            int middleMinY = -1;\n            start = minY;\n            end = maxY;\n            while (start <= end) {\n                int mid = (start + end) >> 1;\n                c = increaseC(c);\n                System.out.println(\"? \" + minX + \" \" + minY + \" \" + maxX + \" \" + mid);\n                System.out.flush();\n\n                int v = in.nextInt();\n                if (v == 1) {\n                    middleMinY = mid;\n                    end = mid - 1;\n                } else {\n                    start = mid + 1;\n                }\n            }\n            //System.out.println(\"MiddleMinY \" + middleMinY);\n            int middleMaxY = -1;\n            start = middleMinY + 1;\n            end = maxY;\n            while (start <= end) {\n                int mid = (start + end) >> 1;\n                c = increaseC(c);\n                System.out.println(\"? \" + minX + \" \" + mid + \" \" + maxX + \" \" + maxY);\n                System.out.flush();\n\n                int v = in.nextInt();\n                if (v == 1) {\n                    middleMaxY = mid;\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            //System.out.println(\"MiddleMaxY \" + middleMaxY);\n            if (minX == maxX) {\n                System.out.println(\"! \" + minX + \" \" + minY + \" \" + maxX + \" \" + middleMinY + \" \" + minX + \" \" + middleMaxY + \" \" + maxX + \" \" + maxY);\n                System.out.flush();\n            } else {\n                int[] a = calX(minX, maxX, minY, middleMinY, in);\n                int[] b = calX(minX, maxX, middleMaxY, maxY, in);\n                check(a);\n                check(b);\n                System.out.println(\"! \" + a[0] + \" \" + minY + \" \" + a[1] + \" \" + middleMinY + \" \" + b[0] + \" \" + middleMaxY + \" \" + b[1] + \" \" + maxY);\n                System.out.flush();\n            }\n        } else if (minY == maxY) {\n            System.out.println(\"! \" + minX + \" \" + minY + \" \" + middleMinX + \" \" + maxY + \" \" + middleMaxX + \" \" + minY + \" \" + maxX + \" \" + maxY);\n            System.out.flush();\n        } else {\n            int[] a = calY(minX, middleMinX, minY, maxY, in);\n            int[] b = calY(middleMaxX, maxX, minY, maxY, in);\n            check(a);\n            check(b);\n            System.out.println(\"! \" + minX + \" \" + a[0] + \" \" + middleMinX + \" \" + a[1] + \" \" + middleMaxX + \" \" + b[0] + \" \" + maxX + \" \" + b[1]);\n            System.out.flush();\n        }\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 29);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\t/**/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/b.in\"))));\n\t\t/**/\n\t\t\n\t\tint n = sc.nextInt();\n\t\tint l1 = 1;\n\t\tint r1 = n;\n\t\tint b1 = 1;\n\t\tint t1 = n;\n\t\tint min = b1;\n\t\tint max = t1;\n\t\twhile (min != max) {\n\t\t\tint mid = (min+max)/2;\n\t\t\tSystem.out.println(\"? \"+l1+\" \"+b1+\" \"+r1+\" \"+mid);\n\t\t\tSystem.out.flush();\n\t\t\tif (sc.nextInt() >= 1)\n\t\t\t\tmax = mid;\n\t\t\telse\n\t\t\t\tmin = mid+1;\n\t\t}\n\t\tt1 = min;\n\t\tmin = l1;\n\t\tmax = r1;\n\t\twhile (min != max) {\n\t\t\tint mid = (min+max)/2;\n\t\t\tSystem.out.println(\"? \"+l1+\" \"+b1+\" \"+mid+\" \"+t1);\n\t\t\tSystem.out.flush();\n\t\t\tif (sc.nextInt() >= 1)\n\t\t\t\tmax = mid;\n\t\t\telse\n\t\t\t\tmin = mid+1;\n\t\t}\n\t\tr1 = min;\n\t\tmin = b1;\n\t\tmax = t1;\n\t\twhile (min != max) {\n\t\t\tint mid = (min+max+1)/2;\n\t\t\tSystem.out.println(\"? \"+l1+\" \"+mid+\" \"+r1+\" \"+t1);\n\t\t\tSystem.out.flush();\n\t\t\tif (sc.nextInt() >= 1)\n\t\t\t\tmin = mid;\n\t\t\telse\n\t\t\t\tmax = mid-1;\n\t\t}\n\t\tb1 = min;\n\t\tmin = l1;\n\t\tmax = r1;\n\t\twhile (min != max) {\n\t\t\tint mid = (min+max+1)/2;\n\t\t\tSystem.out.println(\"? \"+mid+\" \"+b1+\" \"+r1+\" \"+t1);\n\t\t\tSystem.out.flush();\n\t\t\tif (sc.nextInt() >= 1)\n\t\t\t\tmin = mid;\n\t\t\telse\n\t\t\t\tmax = mid-1;\n\t\t}\n\t\tl1 = min;\n\t\tint l2 = 1;\n\t\tint r2 = n;\n\t\tint b2 = 1;\n\t\tint t2 = n;\n\t\tmin = b2;\n\t\tmax = t2;\n\t\twhile (min != max) {\n\t\t\tint mid = (min+max+1)/2;\n\t\t\tSystem.out.println(\"? \"+l2+\" \"+mid+\" \"+r2+\" \"+t2);\n\t\t\tSystem.out.flush();\n\t\t\tif (sc.nextInt() >= 1)\n\t\t\t\tmin = mid;\n\t\t\telse\n\t\t\t\tmax = mid-1;\n\t\t}\n\t\tb2 = min;\n\t\tmin = l2;\n\t\tmax = r2;\n\t\twhile (min != max) {\n\t\t\tint mid = (min+max+1)/2;\n\t\t\tSystem.out.println(\"? \"+mid+\" \"+b2+\" \"+r2+\" \"+t2);\n\t\t\tSystem.out.flush();\n\t\t\tif (sc.nextInt() >= 1)\n\t\t\t\tmin = mid;\n\t\t\telse\n\t\t\t\tmax = mid-1;\n\t\t}\n\t\tl2 = min;\n\t\tmin = b2;\n\t\tmax = t2;\n\t\twhile (min != max) {\n\t\t\tint mid = (min+max)/2;\n\t\t\tSystem.out.println(\"? \"+l2+\" \"+b2+\" \"+r2+\" \"+mid);\n\t\t\tSystem.out.flush();\n\t\t\tif (sc.nextInt() >= 1)\n\t\t\t\tmax = mid;\n\t\t\telse\n\t\t\t\tmin = mid+1;\n\t\t}\n\t\tt2 = min;\n\t\tmin = l2;\n\t\tmax = r2;\n\t\twhile (min != max) {\n\t\t\tint mid = (min+max)/2;\n\t\t\tSystem.out.println(\"? \"+l2+\" \"+b2+\" \"+mid+\" \"+t2);\n\t\t\tSystem.out.flush();\n\t\t\tif (sc.nextInt() >= 1)\n\t\t\t\tmax = mid;\n\t\t\telse\n\t\t\t\tmin = mid+1;\n\t\t}\n\t\tr2 = min;\n\t\tSystem.out.println(\"! \"+l1+\" \"+b1+\" \"+r1+\" \"+t1+\" \"+l2+\" \"+b2+\" \"+r2+\" \"+t2);\n\t\tSystem.out.flush();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n\n        n = nextLong();\n\n        rect1 = find();\n        rect2 = find();\n        print(\"! \" + arr(rect1) + \" \"\n                   + arr(rect2));\n        System.out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        //new Thread(null, new _Solution(), \"\", 128 * (1L << 20)).start();\n        new B().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\n\t\tTask task = new Task();\n\t\ttask.solve(in, out);\n\t\tout.close();\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\n\t\tTask task = new Task();\n\t\ttask.solve(in, out);\n\t\tout.close();\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew B();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tFasterScanner s = new FasterScanner();\n\t\tint test = 1;\n\t\ttestloop: while (test-- > 0) {\n\t\t\tint n = s.nextInt();\n\t\t\tint left = 1;\n\t\t\tint right = n;\n\t\t\tint x[][] = new int[2][2];\n\t\t\tint y[][] = new int[2][2];\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right) / 2;\n\t\t\t\tquery(1, mid, 1, n);\n\t\t\t\tint ans = s.nextInt();\n\t\t\t\tif (ans < 2) {\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tright = mid;\n\t\t\t\t}\n\t\t\t}\n\t\t\tx[0][0] = left;\n\t\t\tleft = 1;\n\t\t\tright = n;\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right) / 2;\n\t\t\t\tquery(1, mid, 1, n);\n\t\t\t\tint ans = s.nextInt();\n\t\t\t\tif (ans < 1) {\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tright = mid;\n\t\t\t\t}\n\t\t\t}\n\t\t\tx[0][1] = left;\n\t\t\tleft = 1;\n\t\t\tright = n;\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right + 1) / 2;\n\t\t\t\tquery(mid, n, 1, n);\n\t\t\t\tint ans = s.nextInt();\n\t\t\t\tif (ans < 2) {\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tleft = mid;\n\t\t\t\t}\n\t\t\t}\n\t\t\tx[1][0] = left;\n\t\t\tleft = 1;\n\t\t\tright = n;\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right + 1) / 2;\n\t\t\t\tquery(mid, n, 1, n);\n\t\t\t\tint ans = s.nextInt();\n\t\t\t\tif (ans < 1) {\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tleft = mid;\n\t\t\t\t}\n\t\t\t}\n\t\t\tx[1][1] = left;\n\t\t\t// System.out.println(Arrays.deepToString(x));\n\n\t\t\tleft = 1;\n\t\t\tright = n;\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right) / 2;\n\t\t\t\tquery(1, n, 1, mid);\n\t\t\t\tint ans = s.nextInt();\n\t\t\t\tif (ans < 2) {\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tright = mid;\n\t\t\t\t}\n\t\t\t}\n\t\t\ty[0][0] = left;\n\t\t\tleft = 1;\n\t\t\tright = n;\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right) / 2;\n\t\t\t\tquery(1, n, 1, mid);\n\t\t\t\tint ans = s.nextInt();\n\t\t\t\tif (ans < 1) {\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tright = mid;\n\t\t\t\t}\n\t\t\t}\n\t\t\ty[0][1] = left;\n\t\t\tleft = 1;\n\t\t\tright = n;\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right + 1) / 2;\n\t\t\t\tquery(1, n, mid, n);\n\t\t\t\tint ans = s.nextInt();\n\t\t\t\tif (ans < 2) {\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tleft = mid;\n\t\t\t\t}\n\t\t\t}\n\t\t\ty[1][0] = left;\n\t\t\tleft = 1;\n\t\t\tright = n;\n\t\t\twhile (left < right) {\n\t\t\t\tint mid = (left + right + 1) / 2;\n\t\t\t\tquery(1, n, mid, n);\n\t\t\t\tint ans = s.nextInt();\n\t\t\t\tif (ans < 1) {\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tleft = mid;\n\t\t\t\t}\n\t\t\t}\n\t\t\ty[1][1] = left;\n//\t\t\tSystem.out.println(Arrays.deepToString(x));\n//\t\t\tSystem.out.println(Arrays.deepToString(y));\n\t\t\t\n\t\t\tint x11 = 0, x12 = 0, y11 = 0, y12 = 0;\n\t\t\tint x21 = 0, x22 = 0, y21 = 0, y22 = 0;\n\t\t\tfor (int x1 = 0; x1 < 2; x1++) {\n\t\t\t\tx11 = x[1][x1];\n\t\t\t\tx21 = x[1][1 - x1];\n\t\t\t\tfor (int x2 = 0; x2 < 2; x2++) {\n\t\t\t\t\tx12 = x[0][x2];\n\t\t\t\t\tx22 = x[0][1 - x2];\n\t\t\t\t\tif (x11 > x12)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (x21 > x22)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int y1 = 0; y1 < 2; y1++) {\n\t\t\t\t\t\ty11 = y[1][y1];\n\t\t\t\t\t\ty21 = y[1][1 - y1];\n\t\t\t\t\t\tfor (int y2 = 0; y2 < 2; y2++) {\n\t\t\t\t\t\t\ty12 = y[0][y2];\n\t\t\t\t\t\t\ty22 = y[0][1 - y2];\n\t\t\t\t\t\t\tif (y11 > y12)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tif (y21 > y22)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tquery(x11, x12, y11, y12);\n\t\t\t\t\t\t\tint ans1 = s.nextInt();\n\n\t\t\t\t\t\t\tquery(x21, x22, y21, y22);\n\t\t\t\t\t\t\tint ans2 = s.nextInt();\n\t\t\t\t\t\t\tif (ans1 == 1 && ans2 == 1) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"! \" + x11 + \" \" + y11 + \" \" + x12 + \" \" + y12 + \" \" + x21 + \" \"\n\t\t\t\t\t\t\t\t\t\t+ y21 + \" \" + x22 + \" \" + y22);\n\t\t\t\t\t\t\t\tSystem.out.flush();\n\t\t\t\t\t\t\t\tbreak testloop;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args){\n        new Thread(null, new B(), \"\", MAX_STACK_SIZE * (1L << 20)).start();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Template(), \"\", 1l * 200 * 1024 * 1024).start();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner qwe = new Scanner(System.in);\n\t\t\n\t\tint n = qwe.nextInt();\n\t\t\n\t\t//! x11 y11 x12 y12 x21 y21 x22 y22\" \n\t\t\n\t\t\n\t\t\n\t\tint x11 = bins(true,1,2,n,qwe,true);\n\t\tint y11 = bins(true,1,2,n,qwe,false);\n\t\tint x12 = bins(false,0,1,n,qwe,true);\n\t\tint y12 = bins(false,0,1,n,qwe,false);\n\t\tint x21 = bins(true,0,1,n,qwe,true);\n\t\tint y21 = bins(true,0,1,n,qwe,false);\n\t\tint x22 = bins(false,1,2,n,qwe,true);\n\t\tint y22 = bins(false,1,2,n,qwe,false);\n\t\t\n\t\tint[] xsl = {x11,x21};\n\t\tint[] xsr = {x12,x22};\n\t\tint[] ysl = {y11,y21};\n\t\tint[] ysr = {y12,y22};\n\t\t\n\t\t\n\t\tint[] ans = new int[8];\n\t\t\n\t\tfor(int xpl = 0; xpl < 2; xpl++){\n\t\t\tfor(int xpr = 0; xpr < 2; xpr++)\n\t\t\t\tfor(int ypl = 0; ypl < 2; ypl++){\n\t\t\t\t\tfor(int ypr = 0; ypr < 2; ypr++){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(xsl[xpl] <= xsr[xpr] && xsl[1-xpl] <= xsr[1-xpr] && ysl[ypl] <= ysr[ypr] && ysl[1-ypl] <= ysr[1-ypr]){\n\t\t\t\t\t\t\tSystem.out.printf(\"? %d %d %d %d\",xsl[xpl],ysl[ypl],xsr[xpr],ysr[ypr]);\n\t\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\t\tSystem.out.flush();\n\t\t\t\t\t\t\tint response1 = qwe.nextInt();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tSystem.out.printf(\"? %d %d %d %d\",xsl[1-xpl],ysl[1-ypl],xsr[1-xpr],ysr[1-ypr]);\n\t\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\t\tSystem.out.flush();\n\t\t\t\t\t\t\tint response2 = qwe.nextInt();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(response1 == 1 && response2 == 1){\n\t\t\t\t\t\t\t\tans = new int[]{xsl[xpl],ysl[ypl],xsr[xpr],ysr[ypr],xsl[1-xpl],ysl[1-ypl],xsr[1-xpr],ysr[1-ypr]};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tSystem.out.printf(\"! %d %d %d %d %d %d %d %d\",ans[0],ans[1],ans[2],ans[3],ans[4],ans[5],ans[6],ans[7]);\n\t\tSystem.out.println();\n\t\tSystem.out.flush();\n\t\t\n\t\tqwe.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        (new Main()).run();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    QuickScanner in = new QuickScanner(inputStream);\n    QuickWriter out = new QuickWriter(outputStream);\n    TaskB solver = new TaskB();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "logn"}
{"code": "   public static void main(String[] args)throws IOException{\n      f = new BufferedReader(new InputStreamReader(System.in));\n      out = new PrintWriter(System.out);\n      \n      int n = Integer.parseInt(f.readLine());\n      \n      \n      int l;\n      int r;\n      int mid;\n      int ans;\n      \n      \n      l = 1;\n      r = n;\n      ans = -1;\n      //see if you can draw vertical line between them\n      \n      while(l <= r){\n         mid = l + (r-l)/2;\n         if(mid == n) break;\n         \n         int il = query(1,1,n,mid);\n         int ir = query(1,mid+1,n,n);\n         \n         if(il == 1 && ir == 1){\n            ans = mid;\n            break;\n         }\n         \n         if(il > ir){\n            r = mid-1;\n         } else {\n            l = mid+1;\n         }\n      }\n      \n      int x11 = -1;\n      int y11 = -1;\n      int x12 = -1;\n      int y12 = -1;\n      int x21 = -1;\n      int y21 = -1;\n      int x22 = -1;\n      int y22 = -1;\n      if(ans == -1){\n         //find horizontal line\n         l = 1;\n         r = n;\n         ans = -1;\n      \n         while(l <= r){\n            mid = l + (r-l)/2;\n         \n         \n            int il = query(1,1,mid,n);\n            int ir = query(mid+1,1,n,n);\n         \n            if(il == 1 && ir == 1){\n               ans = mid;\n               break;\n            }\n         \n            if(il > ir){\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n      \n         int bar = ans;\n         \n                  //find top line of top block\n         l = 1;\n         r = bar;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(mid,1,bar,n);\n            if(i == 1){\n               ans = mid;\n               l = mid+1;\n            } else {\n               r = mid-1;\n            }\n         }\n         \n         x11 = ans;\n         \n         //find bottom line of top block\n         l = 1;\n         r = bar;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,1,mid,n);\n            if(i == 1){\n               ans = mid;\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n         \n         x12 = ans;\n         \n         //find left of top block\n         \n         l = 1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,mid,bar,n);\n            \n            if(i == 1){\n               ans = mid;\n               l = mid+1;\n            } else {\n               r = mid-1;\n            }\n         }\n         \n         y11 = ans;\n         \n         //find right of top block\n         l = 1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,1,bar,mid);\n            \n            if(i == 1){\n               ans = mid;\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n         \n         y12 = ans;\n         \n         \n         \n         \n         \n         //find top line of bottom block\n         l = bar+1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(mid,1,n,n);\n            if(i == 1){\n               ans = mid;\n               l = mid+1;\n            } else {\n               r = mid-1;\n            }\n         }\n         \n         x21 = ans;\n         \n         //find bottom line of bottom block\n         l = bar+1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(bar+1,1,mid,n);\n            if(i == 1){\n               ans = mid;\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n         \n         x22 = ans;\n         \n         //find left of bottom block\n         \n         l = 1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(bar+1,mid,n,n);\n            \n            if(i == 1){\n               ans = mid;\n               l = mid+1;\n            } else {\n               r = mid-1;\n            }\n         }\n         \n         y21 = ans;\n         \n         //find right of bottom block\n         l = 1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(bar+1,1,n,mid);\n            \n            if(i == 1){\n               ans = mid;\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n         \n         y22 = ans;\n         \n         \n         \n         \n         \n       \n      } else {\n         //ans is the vertical line between\n         int bar = ans;\n         //find left line of left block\n         l = 1;\n         r = bar;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,mid,n,bar);\n            if(i == 1){\n               ans = mid;\n               l = mid+1;\n            } else {\n               r = mid-1;\n            }\n         }\n         \n         y11 = ans;\n         \n         //find right line of left block\n         l = 1;\n         r = bar;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,1,n,mid);\n            if(i == 1){\n               ans = mid;\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n         \n         y12 = ans;\n         \n         //find top of left block\n         \n         l = 1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(mid,1,n,bar);\n            \n            if(i == 1){\n               ans = mid;\n               l = mid+1;\n            } else {\n               r = mid-1;\n            }\n         }\n         \n         x11 = ans;\n         \n         //find bottom of left block\n         l = 1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,1,mid,bar);\n            \n            if(i == 1){\n               ans = mid;\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n         \n         x12 = ans;\n         \n         \n         \n         \n         \n         //find left line of right block\n         l = bar+1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,mid,n,n);\n            if(i == 1){\n               ans = mid;\n               l = mid+1;\n            } else {\n               r = mid-1;\n            }\n         }\n         \n         y21 = ans;\n         \n         //find right line of right block\n         l = bar+1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,bar+1,n,mid);\n            if(i == 1){\n               ans = mid;\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n         \n         y22 = ans;\n         \n         //find top of right block\n         \n         l = 1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(mid,bar+1,n,n);\n            \n            if(i == 1){\n               ans = mid;\n               l = mid+1;\n            } else {\n               r = mid-1;\n            }\n         }\n         \n         x21 = ans;\n         \n         //find bottom of right block\n         l = 1;\n         r = n;\n         ans = -1;\n         while(l <= r){\n            mid = l + (r-l)/2;\n            \n            int i = query(1,bar+1,mid,n);\n            \n            if(i == 1){\n               ans = mid;\n               r = mid-1;\n            } else {\n               l = mid+1;\n            }\n         }\n         \n         x22 = ans;\n         \n      \n      }\n      \n      out.println(\"! \" + x11 + \" \" + y11 + \" \" + x12 + \" \" + y12 + \" \" + x21 + \" \" + y21 + \" \" + x22 + \" \" + y22);\n      \n      \n      \n      \n      out.close();\n   }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew BT().run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB_cf371 solver = new TaskB_cf371();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tans = new int[8];\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tSystem.out.println(\"?\"+\"1 1 \"+n+\" \"+n);\n\t\tSystem.out.flush();\n\t\tint q = Integer.parseInt(br.readLine());\n\t\tcut(n);\n\t\tSystem.out.print(\"! \");\n\t\tfor(int i=0 ; i<8 ; i++)\tSystem.out.print(ans[i]+\" \");\n\t\tSystem.out.println();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new Scanner(System.in);\n        out = new PrintWriter(System.out);\n        n = in.nextInt() + 1;\n        first = new int[]{0, 0, n, n};\n        second = new int[]{0, 0, n, n};\n        for (int i = 0; i < first.length; i++) {\n            boolean inc = i < 2;\n            search(first, i, inc, false);\n            if (!inc) {\n                first[i] += 1;\n            }\n        }\n\n        for (int i = 0; i < second.length; i++) {\n            boolean inc = i < 2;\n            search(second, i, inc, true);\n            if (!inc) {\n                second[i] += 1;\n            }\n        }\n        String s = \"!\";\n        for (int i = 0; i < 4; i++) {\n            s += \" \" + second[i];\n        }\n        for (int i = 0; i < 4; i++) {\n            s += \" \" + first[i];\n        }\n        out.println(s);\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint n = nextInt();\n\t\tint left = 0, right = n;\n\t\tint x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, x4 = 0, y4 = 0;\n\t\twhile (right-left > 1) {\n\t\t\tint mid = (left+right) >> 1;\n\t\t\tSystem.out.println(\"? \"+1+\" \"+1+\" \"+mid+\" \"+n);\n\t\t\tint ans = nextInt();\n\t\t\tif (ans==2)\n\t\t\t\tright = mid;\n\t\t\telse\n\t\t\t\tleft = mid;\n\t\t}\n\t\tx4 = right;\n\t\tleft = 0;\n\t\tright = n;\n\t\twhile (right-left > 1) {\n\t\t\tint mid = (left+right) >> 1;\n\t\t\tSystem.out.println(\"? \"+1+\" \"+1+\" \"+mid+\" \"+n);\n\t\t\tint ans = nextInt();\n\t\t\tif (ans >= 1)\n\t\t\t\tright = mid;\n\t\t\telse\n\t\t\t\tleft = mid;\n\t\t}\n\t\tx2 = right;\n\t\tleft = 1;\n\t\tright = n+1;\n\t\twhile (right-left > 1) {\n\t\t\tint mid = (left+right) >> 1;\n\t\t\tSystem.out.println(\"? \"+mid+\" \"+1+\" \"+n+\" \"+n);\n\t\t\tint ans = nextInt();\n\t\t\tif (ans >= 1)\n\t\t\t\tleft = mid;\n\t\t\telse\n\t\t\t\tright = mid;\n\t\t}\n\t\tx3 = left;\n\t\tleft = 1;\n\t\tright = n+1;\n\t\twhile (right-left > 1) {\n\t\t\tint mid = (left+right) >> 1;\n\t\t\tSystem.out.println(\"? \"+mid+\" \"+1+\" \"+n+\" \"+n);\n\t\t\tint ans = nextInt();\n\t\t\tif (ans >= 2)\n\t\t\t\tleft = mid;\n\t\t\telse\n\t\t\t\tright = mid;\n\t\t}\n\t\tx1 = left;\n\t\t\n\t\tleft = 0;\n\t\tright = n;\n\t\twhile (right-left > 1) {\n\t\t\tint mid = (left+right) >> 1;\n\t\t\tSystem.out.println(\"? \"+1+\" \"+1+\" \"+n+\" \"+mid);\n\t\t\tint ans = nextInt();\n\t\t\tif (ans>=2)\n\t\t\t\tright = mid;\n\t\t\telse\n\t\t\t\tleft = mid;\n\t\t}\n\t\ty4 = right;\n\t\tleft = 0;\n\t\tright = n;\n\t\twhile (right-left > 1) {\n\t\t\tint mid = (left+right) >> 1;\n\t\t\tSystem.out.println(\"? \"+1+\" \"+1+\" \"+n+\" \"+mid);\n\t\t\tint ans = nextInt();\n\t\t\tif (ans >= 1)\n\t\t\t\tright = mid;\n\t\t\telse\n\t\t\t\tleft = mid;\n\t\t}\n\t\ty2 = right;\n\t\tleft = 1;\n\t\tright = n+1;\n\t\twhile (right-left > 1) {\n\t\t\tint mid = (left+right) >> 1;\n\t\t\tSystem.out.println(\"? \"+1+\" \"+mid+\" \"+n+\" \"+n);\n\t\t\tint ans = nextInt();\n\t\t\tif (ans >= 1)\n\t\t\t\tleft = mid;\n\t\t\telse\n\t\t\t\tright = mid;\n\t\t}\n\t\ty3 = left;\n\t\tleft = 1;\n\t\tright = n+1;\n\t\twhile (right-left > 1) {\n\t\t\tint mid = (left+right) >> 1;\n\t\t\tSystem.out.println(\"? \"+1+\" \"+mid+\" \"+n+\" \"+n);\n\t\t\tint ans = nextInt();\n\t\t\tif (ans >= 2)\n\t\t\t\tleft = mid;\n\t\t\telse\n\t\t\t\tright = mid;\n\t\t}\n\t\ty1 = left;\n\t\tif (y3 <= y2 && x3 <= x2) {\n\t\t\tSystem.out.println(\"! \"+x3+\" \"+y3+\" \"+x2+\" \"+y2+\" \"+x1+\" \"+y1+\" \"+x4+\" \"+y4);\n\t\t\treturn;\n\t\t}\n\n\t\tSystem.out.println(\"? \"+x1+\" \"+y1+\" \"+x2+\" \"+y2);\n\t\tint ans1 = nextInt();\n\t\tSystem.out.println(\"? \"+x3+\" \"+y3+\" \"+x4+\" \"+y4);\n\t\tint ans2 = nextInt();\n\t\tif (ans1==1 && ans2==1) {\n\t\t\tSystem.out.println(\"! \"+x1+\" \"+y1+\" \"+x2+\" \"+y2+\" \"+x3+\" \"+y3+\" \"+x4+\" \"+y4);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tSystem.out.println(\"? \"+x1+\" \"+y3+\" \"+x2+\" \"+y4);\n\t\tans1 = nextInt();\n\t\tSystem.out.println(\"? \"+x3+\" \"+y1+\" \"+x4+\" \"+y2);\n\t\tans2 = nextInt();\n\t\tif (ans1==1 && ans2==1) {\n\t\t\tSystem.out.println(\"! \"+x1+\" \"+y3+\" \"+x2+\" \"+y4+\" \"+x3+\" \"+y1+\" \"+x4+\" \"+y2);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tSystem.out.println(\"? \"+x1+\" \"+y1+\" \"+x4+\" \"+y2);\n\t\tans1 = nextInt();\n\t\tSystem.out.println(\"? \"+x3+\" \"+y3+\" \"+x2+\" \"+y4);\n\t\tans2 = nextInt();\n\t\tif (ans1==1 && ans2==1) {\n\t\t\tSystem.out.println(\"! \"+x1+\" \"+y1+\" \"+x4+\" \"+y2+\" \"+x3+\" \"+y3+\" \"+x2+\" \"+y4);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tSystem.out.println(\"? \"+x1+\" \"+y3+\" \"+x2+\" \"+y2);\n\t\tans1 = nextInt();\n\t\tSystem.out.println(\"? \"+x3+\" \"+y1+\" \"+x4+\" \"+y4);\n\t\tans2 = nextInt();\n\t\tif (ans1==1 && ans2==1) {\n\t\t\tSystem.out.println(\"! \"+x1+\" \"+y3+\" \"+x2+\" \"+y2+\" \"+x3+\" \"+y1+\" \"+x4+\" \"+y4);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\n\t\tpw.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tnew Main().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tlong k = sc.nextLong();\n\t\tif ((k - 1) * k / 2 + 1 < n) {\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\tlong left = 0;\n\t\tlong right = k;\n\t\twhile (left < right) {\n\t\t\tlong m = (left + right) / 2;\n\t\t\tif (k * (k - 1)/2 - (k - m) * (k - m - 1) / 2 +1 < n)\n\t\t\t\tleft = m + 1;\n\t\t\telse\n\t\t\t\tright = m;\n\t\t}\n\t\tSystem.out.println(left);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] args){\n\t\ttry (Scanner s = new Scanner(System.in)){\n\t\t\tfinal long n = s.nextLong();\n\t\t\tfinal long k = s.nextLong();\n\t\t\tSystem.out.println(howMany(n, k));\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t(new Main()).solve();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Problem2().run();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args) {\n    new My().go();\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tlong N = sc.nextLong();\n\t\tlong K = sc.nextLong();\n\n\t\tif (N == 1) {\n\t\t\tout.println(0);\n\t\t} else if (N <= K) {\n\t\t\tout.println(1);\n\t\t} else if (N > ((K - 1) * (K)) / 2 + 1) {\n\t\t\tout.println(-1);\n\t\t} else {\n\n\t\t\tlong lo = 1;\n\t\t\tlong hi = Math.max(K - 2, 1);\n\n\t\t\tlong big = ((K - 2) * (K - 1)) / 2;\n\n\t\t\tlong prevmid = -1;\n\n\t\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\t\tlong mid = (lo + hi) / 2;\n\n\t\t\t\t// K = 5\n\t\t\t\t// Start = K-2;\n\t\t\t\t// 1 = K-2;\n\t\t\t\t// 2 = K-3... etc.\n\n\t\t\t\tlong tmp = ((K - 2 - mid) * (K - 2 - mid + 1)) / 2;\n\t\t\t\t//System.out.println(mid + \" \" + big + \" \" + tmp);\n\n\t\t\t\tif (K + big - tmp > N) {\n\t\t\t\t\thi = mid;\n\t\t\t\t} else if (K + big - tmp < N) {\n\t\t\t\t\tlo = mid;\n\t\t\t\t\tif (prevmid == mid)\n\t\t\t\t\t\tlo++;\n\t\t\t\t\tlo = Math.min(lo, hi);\n\t\t\t\t\tprevmid = mid;\n\t\t\t\t} else {\n\t\t\t\t\tlo = mid;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println((long) lo + 1);\n\t\t}\n\t\tsc.close();\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main (String[] argv) {\n        Scanner in = new Scanner(System.in);\n        long n = in.nextLong();\n        long k = in.nextLong();\n        long max = ((k*(k-1))/2L)+1L;\n        long ans = -1;\n        if (n == 1) {\n            System.out.println(0);\n            return;\n        }\n        if (max < n) {\n            ans = -1;\n        } else if (max == n) {\n            ans = k-1;\n        } else {\n            if (k >= n) {\n                ans = 1;\n            } else {\n                long low = 1;\n                long high = k-1;\n                while (high > low+1) {\n                    long mid = (low+high)/2;\n                    long sum = (((mid+(k-1)) * (k-mid)) / 2) + 1;\n                    if (sum >= n) {\n                        low = mid;\n                    } else {\n                        high = mid;\n                    }\n                }\n                ans = (k - low);\n            }\n        }\n        System.out.println(ans);\n        return;\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tdoIt();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P287B().run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        long n = in.nextLong();\n        long k = in.nextLong();\n\n        if (n == 1) {\n            System.out.println(0);\n            return;\n        }\n        if (k >= n) {\n            System.out.println(1);\n            return;\n        }\n\n        long total = (k + 2) * (k - 1) / 2 - (k - 2);\n        if (total < n) {\n            System.out.println(-1);\n            return;\n        }\n\n        int i = 2, j = (int) k;\n        while (i <= j) {\n            int m = (i + j) / 2;\n            total = (k + m) * (k - m + 1) / 2 - (k - m);\n            if (total == n) {\n                System.out.println(k - m + 1);\n                return;\n            }\n            if (total < n)\n                j = m - 1;\n            else\n                i = m + 1;\n        }\n        System.out.println(k-i+2);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong() - 1, k = sc.nextLong() - 1;\n\n        int a = 0;\n        if ((k + 1) * k / 2 < n) {\n            System.out.println(-1);\n            return;\n        }\n        while (n > 0 && k > 0) {\n            long min = go(n, k);\n            a += (k - min + 1);\n            n -= (k + min) * (k - min + 1) / 2;\n            k = Math.min(min - 1, n);\n        }\n\n        if (n == 0)\n            System.out.println(a);\n        else\n            System.out.println(-1);\n\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tlong k = sc.nextLong();\n\t\tsc.close();\n\n\t\tif (k * (k - 1) / 2 + 1 < n) {\n\t\t\tSystem.out.println(-1);\n\t\t} else {\n\t\t\tlong l = -1, r = k;\n\t\t\twhile (r - l > 1) {\n\t\t\t\tlong m = (r + l) / 2;\n\t\t\t\tif (cantidadPosible(k, m) >= n) {\n\t\t\t\t\tr = m;\n\t\t\t\t} else {\n\t\t\t\t\tl = m;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(r);\n\t\t}\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tlong k = scan.nextLong();\n\t\tlong total = k * (k - 1) / 2 + 1;\n\t\tif (total < n) {\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlong left = total - n;\n\t\tlong low = 1;\n\t\tlong high = k - 1;\n\t\twhile (low < high) {\n\t\t\tlong mid = (low + high) / 2;\n\t\t\tlong temp = mid * (mid + 1) / 2;\n\t\t\tif (temp < left) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\tlong temp = low * (low + 1) / 2;\n\t\tif (temp == left) {\n\t\t\tSystem.out.println(k - 1 - low);\n\t\t} else {\n\t\t\tSystem.out.println(k - low);\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) \n        Scanner scan = new Scanner(System.in);\n        \n        \n        long n = scan.nextLong();\n        long k = scan.nextLong();\n        if(n==1)\n        {\n            System.out.print(\"0\");\n            return;\n        }\n        if(n<=k) \n        {\n            System.out.print(\"1\");\n            return;\n        }\n        long d = 9-4*(2*n-k*k+k);\n        if(d<0) \n        {\n            System.out.print(\"-1\");\n            return;\n        }\n        double a = ((3+Math.sqrt(d)) / 2) ;\n            if(a>=1)\n                System.out.println(Math.max(2, k-(long)a+1));\n            else\n            System.out.println(-1);\n        \n        \n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long k = sc.nextLong();\n        if (n == 1) {\n            System.out.println(0);\n        } else if (n <= k) {\n            System.out.println(1);\n        } else {\n            n--;\n            k--;\n            BigInteger K = BigInteger.valueOf(k);\n            BigInteger N = BigInteger.valueOf(n);\n            BigInteger high = BigInteger.valueOf(k + 1);\n            BigInteger low = BigInteger.valueOf(1);\n            BigInteger mid;\n            while (low.compareTo(high) < 0) {\n                mid = low.add(high.subtract(low).shiftRight(1));\n                BigInteger elemCnt = K.subtract(mid).add(BigInteger.ONE);\n                BigInteger sum = elemCnt.multiply(\n                        mid.shiftLeft(1).add(elemCnt.subtract(BigInteger.ONE)))\n                        .shiftRight(1);\n                if (sum.compareTo(N) > 0) {\n                    low = mid.add(BigInteger.valueOf(1));\n                } else {\n                    high = mid;\n                }\n            }\n            BigInteger elemCnt = K.subtract(low).add(BigInteger.ONE);\n            BigInteger sum = elemCnt.multiply(\n                    low.shiftLeft(1).add(elemCnt.subtract(BigInteger.ONE)))\n                    .shiftRight(1);\n            BigInteger rem = N.subtract(sum);\n            if (rem.equals(BigInteger.ZERO)) {\n                System.out.println(elemCnt);\n            } else if (rem.compareTo(low) < 0) {\n                System.out.println(elemCnt.add(BigInteger.ONE));\n            } else {\n                System.out.println(-1);\n            }\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedInputStream(System.in));\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        long n = in.nextLong() - 1;\n        long k = in.nextLong() - 1;\n        if (k * (k + 1) / 2 < n) out.println(-1);\n        else if (n == 0) out.println(0);\n        else if (n < k) out.println(1);\n        else {\n            long t = binSearch(n, k, 1, k);\n            long ans = k - t + 1;\n            if (k * (k + 1) / 2 - t * (t - 1) / 2 != n) ans++;\n            out.println(ans);\n        }\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\t\n\t\t\tString[] param = br.readLine().split(\" \");\n\t\t\tlong n = Long.parseLong(param[0])-1;\n\t\t\tlong k = Long.parseLong(param[1])-1;\n\t\t\tlong max = k*(k+1)/2;\n\t\t\tlong answer;\n\t\t\tif (n > max) answer = -1;\n\t\t\telse {\n\t\t\t\tlong margin = max - n;\n\t\t\t\tlong m = Math.max(0,(long)Math.floor((1.0+Math.sqrt(1+8*margin))/2.0)-1);\n\t\t\t\tlong min = m*(m+1)/2;\n\t\t\t\twhile (min <= margin) { m++; min = m*(m+1)/2; }\n\t\t\t\tanswer = k - m + 1;\n\t\t\t}\n\t\t\tpw.println(answer);\n\t\t\t\n\t\t\tpw.close();\n\t\t\tbr.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn;\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        n=in.nextLong();\n        k=in.nextLong();\n        n--;\n        k--;\n        if(k*(k+1)/2<n)\n            ans=-1;\n        else\n            ans=binsearch(0, k);\n        System.out.println(ans);            \n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException,\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong(), k = sc.nextLong();\n\t\t// BufferedReader rd = new BufferedReader(new\n\t\t// InputStreamReader(System.in));\n\t\t// StringTokenizer t = new StringTokenizer(rd.readLine(), \" \");\n\t\t// int n = Integer.parseInt(rd.readLine());\n\t\tif (n == 1) {\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tif (n <= k) {\n\t\t\tSystem.out.println(1);\n\t\t\treturn;\n\t\t}\n\t\tlong seg = (((k + 1) * (k) / 2) - 1);\n\t\tseg += (2 - k);\n\t\tif (seg < n) {\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\t// long sum = k;\n\t\t// long out = 0l;\n\t\tlong s = 1, f = k;\n\t\tlong mid = (s + f) / 2;\n\t\twhile (s + 1 < f) {\n\t\t\tlong seg_m = (((mid + k - 1) * (k - mid) / 2));\n\t\t\t// seg += (2 - mid);\n\t\t\t// long sum_m = seg - seg_m;\n\t\t\tif (seg_m >= n - 1) {\n\t\t\t\t// if (n - mid < out || out == 0) {\n\t\t\t\t// out = n - mid - 1;\n\t\t\t\t// }\n\t\t\t\ts = mid;\n\t\t\t} else\n\t\t\t\tf = mid;\n\t\t\tmid = (s + f) / 2;\n\t\t}\n\t\t// for (long i = k - 1; sum < n && i >= 2; i--) {\n\t\t// sum += i - 1;\n\t\t// out++;\n\t\t// // if (sum >= n)\n\t\t// // break;\n\t\t// }\n\t\tSystem.out.println(k - s);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tFastScanner sc = new FastScanner();\n\t\tlong n = sc.nextLong() - 1;\n\t\tlong k = sc.nextInt() - 1;\n\t\t\n\t\tif(n==0){\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}else if(n <= k){\n\t\t\tSystem.out.println(1);\n\t\t\treturn;\n\t\t}else if(n > k*(k+1)/2){\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//n > k, and there exists a subset (1..k) = n\n\t\t//goal : sum( subset of (1...k) ) = n\n\t\t//obs: if exists a soln, it's always possible to push everything to the right-> t + left...k\n\t\t//so that t + left...k = n, so we just have to find the smallest left such that left..k <= n\n\t\tlong rightSum = k*(k+1)/2;\n\t\tlong lo = 1;\n\t\tlong hi = k;\n\t\twhile(lo < hi){\n\t\t\tlong mid = lo + (hi-lo+1)/2;\n\t\t\tlong val = rightSum - mid*(mid-1)/2;\n\t\t\t\n\t\t\tif(val <= n){\n\t\t\t\thi = mid -1;\n\t\t\t}else{\n\t\t\t\tlo = mid;\n\t\t\t}\n\t\t}\n\t\t//now lo points to the greatest left for which left..k > n\n\t\t//so lo+1 points to the smallest left for which left..k <= n\n\t\t//we still have an extra 't' to the left\n\t\tif(rightSum - (lo+1)*(lo)/2 == n){\n\t\t\tSystem.out.println(k - (lo+1) + 1);\n\t\t}else{\n\t\t\tSystem.out.println(1 + (k - (lo+1) + 1));\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] args) throws IOException\n\t\tScanner in = new Scanner(System.in);\n\n\t\tlong n = in.nextLong();\n\t\tlong k = in.nextLong();\n\t\tif(n == 1)\n\t\t{\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tif(n <= k)\n\t\t{\n\t\t\tSystem.out.println(1);\n\t\t\treturn;\n\t\t}\n\n\t\tlong lb = 2, ub = k;\n\t\tlong sum = ((k)*(k-1))/2;\n\t\tif(sum+1 < n)\n\t\t{\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\twhile(ub - lb > 1)\n\t\t{\n\t\t\tlong mid = (lb+ub)/2;\n\t\t\tlong s = ((mid-1)*(mid-2))/2;\n\t\t\tif(n - (sum-s+1) < 0)\n\t\t\t\tlb = mid;\n\t\t\telse\n\t\t\t\tub = mid;\n\t\t}\n\n\t\tlong rem = n - (sum - ((ub-1)*(ub-2))/2 + 1);\n\t\tlong res = k - ub + 1;\n\t\tif(rem == 0)\n\t\t{\n\t\t\tSystem.out.println(res);\n\t\t\treturn;\n\t\t}\n\t\trem++;\n\t\tif(!(rem >= 2 && rem < ub))\n\t\t{\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(res+1);\n\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Thread(new B()).start();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner sc = new Scanner(System.in);\n  \t\tBigInteger bi1 = sc.nextBigInteger();\n  \t\tBigInteger bi2 = sc.nextBigInteger();\n\t\tBigInteger i,n=bi2;\n\t\tBigInteger i2=BigInteger.valueOf(1);\n\t\tBigInteger sum=BigInteger.valueOf(0);\n\t\tif(bi1.compareTo(bi2)<0){\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\telse if( bi1.compareTo(bi2) == 0 )\n\t\t{\n\t\t\tSystem.out.println(1);\n\t\t\treturn;\n\t\t}\n\t\tbi2=((n.multiply(n.add(BigInteger.valueOf(1)))).divide(BigInteger.valueOf(2))).subtract(n.subtract(BigInteger.valueOf(1)));\n\t\tif(bi1.compareTo(bi2)>0)\n\t\t\tSystem.out.println(-1);\n\t\telse{\n\t\t\tSystem.out.println(bs(BigInteger.valueOf(0),n.add(BigInteger.valueOf(-2)),n,bi1));\n\t\t}\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tPipes pipes = new Pipes();\n\t\tpipes.solve();\n\t\tpipes.print();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tStringTokenizer sc = new StringTokenizer(br.readLine());\n\t\tn = Long.parseLong(sc.nextToken()) - 1;\n\t\tk = Long.parseLong(sc.nextToken()) - 1;\n\t\tif (n == 0)\n\t\t\tout.println(0);\n\t\telse if (sum(1) < n)\n\t\t\tout.println(-1);\n\t\telse {\n\t\t\tlong lo = 1;\n\t\t\tlong hi = k;\n\t\t\tlong mid;\n\t\t\twhile (lo < hi) {\n\t\t\t\tmid = (lo + hi) / 2;\n\t\t\t\tlong sum = sum(mid);\n\t\t\t\tif (n - sum < 0)\n\t\t\t\t\tlo = mid + 1;\n\t\t\t\telse if (n - sum < mid) {\n\t\t\t\t\thi = mid;\n\t\t\t\t} else\n\t\t\t\t\thi = mid - 1;\n\t\t\t}\n\t\t\tout.println((k - lo + 1) + (n - sum(lo) == 0 ? 0 : 1));\n\t\t}\n\t\tbr.close();\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\n\t\tboolean showLineError = true;\n\t\tif (showLineError) {\n\t\t\tsolve();\n\t\t\tout.close();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tsolve();\n\t\t\t} catch (Exception e) {\n\t\t\t} finally {\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner scan=new Scanner(System.in);\n        long n=scan.nextLong(),k=scan.nextLong();\n        if(n>((k-2)*(k-1))/2+k){\n            System.out.println(\"-1\");\n        }\n else if(n==1){\n            System.out.println(\"0\");\n\n }\n else if(n<=k&&n>1){\n            System.out.println(\"1\");\n }\n else{\n            n-=k;\n            long start=k-2;\n            long x;\n            long left=1,right=k-2;\n           // System.out.println(left+\" \"+right);\n            while(left<=right){\n            x=(left+right)/2;\n            //    System.out.println(x);\n                \n            if(n>cumSum(x, start)){\n            left=x+1;\n          //  System.out.println(\"if\");\n            }\n else if(n<cumSum(x-1, start)){\n right=x-1;\n            //    System.out.println(\"else if\");\n }\n else{\n                System.out.println(1+x);\n                break;\n }\n            }\n\n\n }\n\n    }\n", "complexity": "logn"}
{"code": "    public static void main (String[] args) throws IOException {\n        boolean online = \"true\".equals(System.getProperty(\"ONLINE_JUDGE\"));\n        if (online) {\n            in = new InputReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n        }\n        else {\n            in = new InputReader(new FileReader(\"input.txt\"));\n            out = new PrintWriter(new File(\"output.txt\"));\n        }\n        \n        new Solution().run();\n        \n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]) throws IOException\n        Scanner c=new Scanner(System.in);\n        PrintWriter out=new PrintWriter(System.out);\n        long N=c.nextLong()-1;\n        long K=c.nextLong()-1;\n        long tot=(K*(K+1))/2;\n        //System.out.println(tot);\n        if(N>tot)\n            {\n            System.out.println(-1);\n            return;\n            }\n        long lo=1;\n        long hi=K;\n        while(hi-lo>=10)\n            {\n            long mid=(hi+lo)/2;\n            //maximum outlets using mid pipes\n            long sum=(mid*(mid-1))/2;\n            long left=mid*K-sum;\n            if(left>=N)\n                hi=mid+1;\n            else\n                lo=mid-1;\n            }\n        for(int num=(int)lo-1000;num<lo+1000;num++)\n            {\n            if(num>=0)\n                {\n                long sum=((long)num*(num-1))/2;\n                long left=(long)num*K-sum;\n                if(left>=N)\n                    {\n                    System.out.println(num);\n                    return;\n                    }\n                }\n            }\n        out.close();\n        }\n", "complexity": "logn"}
{"code": "   public static void main(String[] args) {\n      new Main().run();\n   }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Scanner scan = new Scanner(System.in);\n        BigInteger n = new BigInteger(scan.next());\n        BigInteger k = new BigInteger(scan.next());\n        BigInteger a = k.subtract(bi(1));\n        BigInteger lim = k.multiply(a).divide(bi(2));\n        lim = lim.add(bi(1));\n        //System.out.println(\"lim: \"+lim);\n        if (n.compareTo(lim)>0){\n            System.out.println(-1);\n        }\n        else {\n            if (n.equals(1)){\n                System.out.println(0);\n            }\n            else {\n                BigInteger remain2 = lim.subtract(n).add(bi(1));\n                remain2 = remain2.multiply(bi(2));\n                //System.out.println(remain2);\n                double temp = remain2.doubleValue();\n                //System.out.println(temp);\n                long flr = (long)Math.sqrt(temp);\n                //System.out.println(flr);\n                BigInteger flr2 = bi(flr);\n                BigInteger rnd2 = remain2.subtract(flr2.multiply(flr2));\n                long rnd = remain2.longValue()-flr*flr;\n                //System.out.println(\"rnd \"+rnd);\n                /*\n                if (rnd<=flr){\n                    System.out.println(k.intValue()-flr);\n                }\n                else {\n                    System.out.println(k.intValue()-(flr+1));\n                }\n                */\n                if (rnd2.compareTo(flr2)<=0){\n                    System.out.println(k.subtract(flr2) );\n                }\n                else {\n                    System.out.println(k.subtract(flr2.add(bi(1) ) ) );\n                }\n            }\n        }\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main (String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tlong n = in.nextLong();\n\t\tlong k = in.nextLong();\n\t\tlong upn = k;\n\t\tlong tmp=upn;\n\t\tif(n==1){\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tif(n<=k){\n\t\t\tSystem.out.println(1);\n\t\t\treturn;\n\t\t}\n\t\t//---\n\t\tif(!bS(n, k, upn)){\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\tboolean flag = false;\n\t\t\twhile(bS(n, k, upn)){\n\t\t\t\ttmp = upn;\n\t\t\t\tflag = true;\n\t\t\t\tupn=5*upn/6;\n\t\t\t\tif(tmp==upn)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong ans = tmp;\n\t\t\tif(!flag)\n\t\t\t\tupn=0;\n\t\t\tfor(int i = (int)tmp;i>=upn;i--){\n\t\t\t\tif(bS(n, k, i)){\n\t\t\t\t\tans=i;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main ( String[] args ) throws Exception { (new Main()).solve(); }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String args[]){\n        Scanner input = new Scanner(System.in);\n        long n = input.nextLong();\n        long k = input.nextLong();\n        System.out.println(solve(n, k));\n        input.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        String[] info = s.split(\" \");\n        long n = Long.parseLong(info[0]);\n        long k = Long.parseLong(info[1]);\n        sc.close();\n\n        long maximum = k * (k - 1) / 2 + 1;\n        if (n == 1)\n            System.out.println(0);\n        else if (n > maximum)\n            System.out.println(-1);\n        else {\n            long left = 0, right = k - 1;\n            while (left + 1 < right) {\n                long mid = (right + left) / 2;\n                if (mid * (k - 1 + k - mid) / 2 + 1 >= n)\n                    right = mid;\n                else\n                    left = mid;\n            }\n            System.out.println(right);\n        }\n    }\n", "complexity": "logn"}
{"code": "   public static void main(String[] args) throws IOException {\n      new SolutionB().run();\n   }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        long n = nextLong();\n        int k = nextInt();\n        if (n == 1) {\n            System.out.println(0);\n            return;\n        }\n        long sum = (((2 + (long) k)) * ((long) k - 1)) / 2 - ((long) k - 2);\n        if (n > sum) {\n            System.out.println(-1);\n            return;\n        } else if (n <= k) {\n            System.out.println(1);\n            return;\n        }\n\n        long cnt = 0;\n        long sum2 = 0;\n        int index = binSearch(2, k, k, n);\n\n        sum2 = (((long) (index) + k) * (long) (k - index + 1)) / 2 - (long) (k - index);\n        cnt = k - index + 1;\n        if (sum2 == n) {\n            System.out.println(cnt);\n            return;\n        }\n        if (sum2 > n)\n            for (int kk = index; kk <= k; kk++) {\n                sum2 = (((long) (kk) + k) * (long) (k - kk + 1)) / 2 - (long) (k - kk);\n                cnt--;\n                if (sum2 <= n) {\n                    System.out.println(cnt + 1);\n                    return;\n                }\n            }\n        else {\n            for (int kk = index - 1; kk >= 2; kk--) {\n                sum2 = (((long) (kk) + k) * (long) (k - kk + 1)) / 2 - (long) (k - kk);\n                cnt++;\n                if (sum2 >= n) {\n                    System.out.println(cnt);\n                    return;\n                }\n            }\n        }\n        System.out.println(-1);\n        return;\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException{\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        int k = sc.nextInt();\n        \n        if( ((long)k * (long)(k + 1))/2 - 1 - (k - 2) < n){\n            System.out.println(-1);\n            return;\n        }\n        \n        if(n == 1) {\n            System.out.println(0);\n            return;\n        }\n        \n        if(n <= k) {\n            System.out.println(1);\n            return;\n            \n        }\n        \n        int ans = rek(2, k, n, k);\n        \n        System.out.println(ans);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "        public static void main(String[] args) throws IOException {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n            String line = reader.readLine();\n            StringTokenizer tokenizer = new StringTokenizer(line);\n            long n = Long.parseLong(tokenizer.nextToken());\n            long k = Long.parseLong(tokenizer.nextToken());\n            if (n == 1){\n                System.out.println(\"0\");\n                return;\n            }\n\n            if (n <= k){\n                System.out.println(\"1\");\n                return;\n            }\n            long first = 0;\n            long end  = k;\n            long mid;\n\n            while (first < end){\n                mid = first + (end - first)/2;\n                if (is_exist(n, k , mid - 1)){\n                    end = mid;\n                } else {\n                    first = mid + 1;\n                }\n            }\n            if (is_exist(n, k, end - 1)){\n                System.out.println((end ));\n                return;\n            }\n            System.out.println(\"-1\");\n            return;\n\n        }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner  kde =new Scanner (System.in);\n\t\tLong n = kde.nextLong(); //дома  и кол труб \n\t\tLong k = kde.nextLong();  // разветлители \n\t\tif(((k-1)*(k-2)+2*k)<(n*(long)2))\n\t\t{\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\t\n\t\tLong a,b;\n\t\t if(n==1)\n\t\t {\n\t\t\t System.out.println(0);\n\t\t\t return;\n\t\t }\n\t\t\n\t\t if(k>=n)\n\t\t {\n\t\t\t System.out.println(1);\n\t\t\t return;\n\t\t }\n\t\t else\n\t\t {\n\t\t\ta=(long)2;\n\t\t\tb=k-1;  \n\t\t }\t \n\t\t boolean flag =false;\n\t\twhile(true)\n\t\t{\n\t\t\tif(a>=b)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\n\t\t\t}\n\t\t\t long\tc =(a+b)/2;\n\t\t\t if(2*(k-c+1)+(k-1+k-c+1)*(c-1)<(n*2)) \n\t\t\t {\n\t\t\t\t a=c+1;\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t\t b=c;\n\t\t\t }\t\n\t\t\t flag=true;\n\t\t}\n\t\tif(flag==true )\n\t\t{\n\t\t\tSystem .out.println(a);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem .out.println(a);\t\n\t\t}\t\n\n\t\t\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner sc = new Scanner(System.in);\n  \t\tBigInteger bi1 = sc.nextBigInteger();\n  \t\tBigInteger bi2 = sc.nextBigInteger();\n\t\tBigInteger i,n=bi2;\n\t\tBigInteger i2=BigInteger.valueOf(1);\n\t\tBigInteger sum=BigInteger.valueOf(0);\n\t\tif(bi1.compareTo(bi2)<0){\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tif(bi1.compareTo(bi2)==0){\n\t\t\tSystem.out.println(1);\n\t\t\treturn;\n\t\t}\n\t\tbi2=((n.multiply(n.add(BigInteger.valueOf(1)))).divide(BigInteger.valueOf(2))).subtract(n.subtract(BigInteger.valueOf(1)));\n\t\tif(bi1.compareTo(bi2)>0)\n\t\t\tSystem.out.println(-1);\n\t\telse{\n\t\t\tSystem.out.println(bs(BigInteger.valueOf(0),n.add(BigInteger.valueOf(-2)),n,bi1));\n\t\t}\n  }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        long n = in.nextLong();\n        long k = in.nextLong();\n\n        if (n == 1) {\n            System.out.println(0);\n            return;\n        }\n        if (k >= n) {\n            System.out.println(1);\n            return;\n        }\n\n        long total = (k + 2) * (k - 1) / 2 - (k - 2);\n        if (total < n) {\n            System.out.println(-1);\n            return;\n        }\n\n        /**\n         * non-binary search version, O(n)\n         * it will failed because of \"over time limit erro\" on this case:\n         *  499999998500000001 1000000000   => 999955279\n         *\n         total = 1;\n         for(int i = (int)k; i >= 2; i--) {\n         total += i - 1;\n         if(total >= n) {\n         System.out.println(k-i+1);\n         return;\n         }\n         }\n         */\n\n        /**\n         * binary search search version. O(lgn)\n         */\n        int i = 2, j = (int) k;\n        while (i < j) {\n            int m = (i + j + 1) / 2;\n            total = (k + m) * (k - m + 1) / 2 - (k - m);\n            if (total < n)\n                j = m - 1;\n            else\n                i = m;\n        }\n        System.out.println(k - i + 1);\n    }\n", "complexity": "logn"}
{"code": "    public static void main( String[] args ) throws IOException\n        Scanner s=new Scanner( System.in );\n        N=s.nextLong();\n        k=s.nextInt();\n        WHOLESUM=SUM( k );\n        if( N<=1 )\n            System.out.println(0 );\n        else\n            System.out.println( binarySearch( 2, k ) );\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        PipelineSolver solver = new PipelineSolver();\n\n        solver.readData();\n        int solution = solver.solve();\n        solver.print(solution);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        long n = parseLong(next());\n        long k = parseLong(next());\n        if(n == 1){\n            System.out.println(0);\n            return;\n        }\n        if (n <= k) {\n            System.out.println(1);\n            return;\n        }\n        if ((((k * (k + 1)) / 2) - 1) - (k - 2) < n) {\n            System.out.println(-1);\n        } else {\n            long lo = 1;\n            long hi = k + 1;\n            int best = Integer.MAX_VALUE;\n            while (lo < hi) {\n                long mid = lo + ((hi - lo) / 2);\n                long first = ((mid * (2 + (2 + (mid - 1)))) / 2) - (mid - 1);\n                long last = ((mid * (k - mid + 1 + k)) / 2) - (mid - 1);                \n                if (n < first) {\n                    hi = mid;\n                } else {\n                    if (n >= first && n <= last) {\n                        hi = mid;\n                        best = min(best, (int) mid);\n                    } else\n                        lo = mid + 1;\n                }\n            }\n            System.out.println(best);\n        }\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P287B().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args){\n\t\tFastScanner sc = new FastScanner();\n\t\tlong n = sc.nextLong();\n\t\tint k = sc.nextInt();\n\t\t\n\t\tif(n==1){\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tn=n-1;\n\t\tint count = 0;\n\t\tlong nextK = k-1;\n\t\twhile(true){\n\t\t\t//System.out.println(\"n = \" + n);\n\t\t\t\n\t\t\tif(nextK < 1 || (nextK <= 1 && n >1)){\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tnextK = Math.min(n, nextK);\n\t\t\tif(n==nextK){\n\t\t\t\tSystem.out.println(count+1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//System.out.println(\"nextK = \" + nextK);\n\t\t\t\n\t\t\t//search for a of a...nextK \n\t\t\tlong bSum = nextK * (nextK+1)/2;\n\t\t\tlong a = nextK;\n\t\t\tlong decrement = 1;\n\t\t\twhile(bSum - (a-1)*a/2 <= n && a>=1){\n\t\t\t\ta-= decrement;\n\t\t\t\tdecrement *= 2;\n\t\t\t}\n\t\t\ta+=decrement/2;\n\t\t\t\n\t\t\t//System.out.println(\"a = \" + a);\n\t\t\t\n\t\t\tcount += nextK-a+1;\n\t\t\t//System.out.println(\"count = \" + count);\n\t\t\tlong nDecr = bSum-a*(a-1)/2;\n\t\t\t//System.out.println(\"bSum = \" + bSum);\n\t\t\t//System.out.println(\"nDecr = \" + nDecr);\n\t\t\tn -= nDecr;\n\t\t\tnextK = a-1;\n\t\t\tif(n==0){\n\t\t\t\tSystem.out.println(count);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "", "complexity": "logn"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF256B o = new CF256B(); o.main(); o.flush();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew B().run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner input = new Scanner(System.in);\n        int side = input.nextInt()-1;\n        int x = input.nextInt()-1;\n        int y = input.nextInt()-1;\n        long target = input.nextLong();\n        \n        \n        int[] to_sides = {y, side - x, side - y, x};\n        int[] to_corners = {(y+1)+(side-x+1),(side-x+1)+(side-y+1),(side-y+1)+(x+1),\n            (x+1)+(y+1)};\n        int min = Math.min(Math.min(y, x), Math.min(side - x, side - y));\n        int[] after_pass = {1, 1, 1, 1};\n        int[] corner_share = {1,1,1,1};\n        int steps = 0 , i;\n        long init = 1 ;\n        int grown = 4;\n        while (init < target) {\n            init += grown;\n            steps++;\n            if (steps >= min) {\n                for (i = 0; i < 4; i++) {\n                    if (steps > to_sides[i]) {\n                        init -= after_pass[i];\n                        after_pass[i] += 2;\n                    }\n                    if (steps >= to_corners[i]){\n                        init += corner_share[i]++;\n                        //corner_share[i]++;\n                    }\n                }\n            }\n            grown += 4;\n        }\n        System.out.println(steps);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tB t = new B();\n\t\tt.run();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException{\n        new ProblemB().solve();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        //BufferedReader in = new BufferedReader(new FileReader(\"bender.in\"));\n        \n        StringTokenizer dxdync = new StringTokenizer(in.readLine());\n        n = Long.parseLong(dxdync.nextToken());\n        x = Long.parseLong(dxdync.nextToken());\n        y = Long.parseLong(dxdync.nextToken());\n        c = Long.parseLong(dxdync.nextToken());\n        \n        long a = 0;\n        long b = c;\n        \n        while(a < b){\n            long m = (a + b)/2;\n            \n            long[] dxn = new long[4];\n            long[] dyn = new long[4];\n            \n            for(int d = 0; d < 4; d++){\n                dxn[d] = x + dx[d] * m;\n                dyn[d] = y + dy[d] * m;\n            }\n            \n            long ret = (m+1)*(m+1) + m*m;\n            \n            ret -= h(1 - dyn[0]);\n            ret -= h(dyn[2] - n);\n            ret -= h(dxn[1] - n);\n            ret -= h(1 - dxn[3]);\n            \n            ret += q(1 - dyn[0] - (n-x+1));\n            ret += q(1 - dyn[0] - x);\n            ret += q(dyn[2] - n - (n - x + 1));\n            ret += q(dyn[2] - n - (x));\n            \n            if (ret < c) a = m + 1;\n            else b = m;\n        }\n        \n        System.out.println(a);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        //String cwd = System.getProperty(\"user.dir\") + \"\\\\\";\n        Scanner in = new Scanner(new BufferedInputStream(System.in));\n        PrintStream out = new PrintStream(System.out);\n        //Scanner in = new Scanner(new BufferedInputStream(new FileInputStream(cwd + \"src\\\\code\\\\in.in\")));\n        //PrintStream out = new PrintStream(cwd + \"src\\\\code\\\\out.out\");\n        //=======================\n        Solution solution = new Solution(in, out);\n        solution.solve();\n        //=======================\n        in.close();\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new B().solve(System.in, System.out);\n        // new FileInputStream(new File(\"input.txt\")),\n        // new PrintStream(new FileOutputStream(new File(\"output.txt\"))));\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        in = new Scanner(System.in);\n//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n//\t\tin = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n\n        long n = in.nextLong(), x = in.nextLong(), y = in.nextLong(), c = in.nextLong();\n\n        long res = 0;\n        while (count(res, x, y, n) < c) res++;\n        out.println(res);\n\n\n        out.println();\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint N = sc.nextInt(), x = sc.nextInt(), y = sc.nextInt();\n\t\tlong C = sc.nextLong();\n\n\t\tint lo = 0, hi = (int) (1e6);\n\t\tint answer = -1;\n\t\twhile (lo <= hi) {\n\t\t\tint L = lo + (hi - lo) / 2;\n\t\t\tlong area = 0;\n\t\t\tfor (int steps = 0; steps <= L; ++steps) { // L + 1 steps to right\n\t\t\t\tif (y + steps > N)\n\t\t\t\t\tbreak;\n\t\t\t\tlong up = Math.min(x, 1 + L - steps), down = Math.min(N - x, L - steps);\n\t\t\t\tarea += up + down;\n\t\t\t}\n\n\t\t\tfor (int steps = 1; steps <= L; ++steps) { // L steps to left\n\t\t\t\tif (y - steps < 1)\n\t\t\t\t\tbreak;\n\t\t\t\tlong up = Math.min(x, 1 + L - steps), down = Math.min(N - x, L - steps);\n\t\t\t\tarea += up + down;\n\t\t\t}\n\t\t\tif (area >= C) {\n\t\t\t\tanswer = L;\n\t\t\t\thi = L - 1;\n\t\t\t} else\n\t\t\t\tlo = L + 1;\n\t\t}\n\t\tout.println(answer);\n\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]) {\n\t\t\n\t\tn = cin.nextInt();\n\t\tx = cin.nextInt();\n\t\ty = cin.nextInt();\n\t\tc = cin.nextLong();\n\t\t\n\t\tint low = 0, high = 1000000000;\n\t\tint ans = -1;\n\t\twhile(low <= high) { \n\t\t\tint mid = (low + high) / 2;\n//\t\t\tSystem.out.println(mid + \" \" + f(mid));\n\t\t\tif(f(mid) >= c) {\n\t\t\t\tans = mid;\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner cin = new Scanner(System.in);\n\t\twhile(cin.hasNext()) {\n\t\t\tn = cin.nextBigInteger();\n\t\t\tx = cin.nextBigInteger();\n\t\t\ty = cin.nextBigInteger();\n\t\t\tc = cin.nextBigInteger();\n\t\t\tmk[0] = x.subtract(BigInteger.ONE);\n\t\t\tmk[2] = n.subtract(y);\n\t\t\tmk[4] = n.subtract(x);\n\t\t\tmk[6] = y.subtract(BigInteger.ONE);\n\t\t\tmk[1] = mk[0].add(mk[2]).add(BigInteger.ONE);\n\t\t\tmk[3] = mk[2].add(mk[4]).add(BigInteger.ONE);\n\t\t\tmk[5] = mk[4].add(mk[6]).add(BigInteger.ONE);\n\t\t\tmk[7] = mk[6].add(mk[0]).add(BigInteger.ONE);\n\t\t\tBigInteger beg = BigInteger.ZERO, end = mk[0], mid;\n\t\t\tfor(int i = 1; i < 8; ++i) if(end.compareTo(mk[i]) < 0) end = mk[i];\n\t\t\twhile(beg.compareTo(end) < 0) {\n\t\t\t\tmid = beg.add(end).shiftRight(1);\n\t\t\t\tif(solve(mid) == 1) end = mid;\n\t\t\t\telse beg = mid.add(BigInteger.ONE);\n\t\t\t}\n\t\t\tSystem.out.println(end);\n\t\t}\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner r = new Scanner(System.in);\n\t\t\n\t\tlong N = r.nextLong();\n\t\tlong X = r.nextLong();\n\t\tlong Y = r.nextLong();\n\t\tlong C = r.nextLong();\n\t\t\n\t\tlong lo = 0, hi = N * 2;\n\t\t\n\t\twhile(lo < hi){\n\t\t\tlong T = (lo + hi) / 2;\n\t\t\t\n\t\t\tlong[] NX = new long[4];\n\t\t\tlong[] NY = new long[4];\n\t\t\t\n\t\t\tfor(int d = 0; d < 4; d++){\n\t\t\t\tNX[d] = X + dx[d] * T;\n\t\t\t\tNY[d] = Y + dy[d] * T;\n\t\t\t}\n\t\t\t\n\t\t\tlong ret = (T + 1) * (T + 1) + T * T;\n\t\t\t\n\t\t\tret -= half(1 - NY[0]);\n\t\t\tret -= half(NY[2] - N);\n\t\t\tret -= half(NX[1] - N);\n\t\t\tret -= half(1 - NX[3]);\n\t\t\t\n\t\t\tret += quarter(1 - NY[0] - (N - X + 1));\n\t\t\tret += quarter(1 - NY[0] - (X));\n\t\t\tret += quarter(NY[2] - N - (N - X + 1));\n\t\t\tret += quarter(NY[2] - N - (X));\n\t\t\t\n\t\t\tif(ret < C)lo = T + 1;\n\t\t\telse hi = T;\n\t\t}\n\t\t\n\t\tSystem.out.println(lo);\n\t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tlong n = in.nextLong();\n\t\tlong x = in.nextLong()-1;\n\t\tlong y = in.nextLong()-1;\n\t\tlong c = in.nextLong();\n\t\t\n\t\tlong lo = 0, hi = 2*n+10;\n\t\twhile(hi - lo > 2) {\n\t\t\tlong mid = (hi+lo)/2;\n\t\t\tif(calc(n,x,y,mid) >= c)\n\t\t\t\thi = mid;\n\t\t\telse\n\t\t\t\tlo = mid;\n\t\t}\n\t\twhile(calc(n,x,y,lo) < c) lo++;\n\t\tSystem.out.println(lo);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)\n        Scanner in = new Scanner(System.in);\n        n = new BigInteger(in.next());\n        BigInteger x = new BigInteger(in.next());\n        BigInteger y = new BigInteger(in.next());\n        BigInteger c = new BigInteger(in.next());\n\n        \n        BigInteger left = new BigInteger(\"0\");\n        BigInteger right = new BigInteger(\"1000000000000\");\n        while(left.compareTo(right) < 0)\n        {\n            BigInteger val = left.add(right).divide(TWO);\n\n            if(solve(x, y, val).compareTo(c) >= 0)\n                right = val;\n            else\n                left = val.add(BigInteger.ONE);\n        }\n\n        System.out.println(left);\n    } \n", "complexity": "logn"}
{"code": "public static void main(String[] args) throws IOException {\n\t\t\n\t\tProblemB solver = new ProblemB();\n\t\tsolver.init();\n\t\tsolver.solve();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Example().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "public static void main(String[] args) throws IOException\n    input.init(System.in);\n    int n = input.nextInt(), x = input.nextInt(), y = input.nextInt(),  c = input.nextInt();\n    long lo = 0, hi = 2*n;\n    while(hi > lo+1)\n    {\n        long mid = (hi+lo)/2;\n        long covered = go(n, x, y, mid);\n        if(covered < c)\n            lo = mid;\n        else hi = mid;\n    }\n    if(go(n, x, y, lo) < c) lo++;\n    System.out.println(lo);\n    \n}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args){\n        new ProblemB();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Scanner in=new Scanner(new InputStreamReader(System.in));\n        PrintWriter out=new PrintWriter(System.out);\n        \n        n=in.nextLong();\n        x=in.nextLong();\n        y=in.nextLong();\n        c=in.nextLong();\n        \n        \n        \n        \n        long l=0;\n        long r=2*n;\n        while(l<r){\n            long m=(l+r)/2;\n            long ff=f(m);\n            if(ff<c){\n                l=m+1;\n            }\n            else{\n                r=m;\n            }\n        }\n        out.println(l);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new B().run(); }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew A().run(); \t\t\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tKattio io = new Kattio(System.in);\n\t\tn = io.getLong();\n\t\tx = io.getLong();\n\t\ty = io.getLong();\n\t\tc = io.getLong();\n//\t\tfor (int i = 0; i < 10; i++) io.println(f(i));\n//\t\tio.println();\n\t\tlong lo = 0;\n\t\tlong hi = c;\n\t\twhile (lo < hi) {\n\t\t\tlong mid = lo + (hi - lo) / 2;\n\t\t\tif (f(mid) >= c) {\n\t\t\t\thi = mid;\n\t\t\t} else {\n\t\t\t\tlo = mid + 1;\n\t\t\t}\n\t\t}\n\t\tio.println(lo);\n\t\tio.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception{\n        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer str = new StringTokenizer(r.readLine());\n        int n = Integer.parseInt(str.nextToken());\n        int x = Integer.parseInt(str.nextToken());\n        int y = Integer.parseInt(str.nextToken());\n        long c = Long.parseLong(str.nextToken());\n        if(c == 1){\n            System.out.println(0);\n            return;\n        }\n        long high = 1;\n        while(howMany(n, x, y, high) < c){\n            high <<= 1;\n        }\n        long low = high>>1;\n        while(high - low > 1){\n            long med = (high+low)/2;\n            if(howMany(n, x, y, med) < c){\n                low = med;\n            }else{\n                high = med;\n            }\n        }\n        System.out.println(high);\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws NumberFormatException,\n        taskB solver = new taskB();\n        solver.open();\n        long time = System.currentTimeMillis();\n        solver.solve();\n        if (!\"true\".equals(System.getProperty(\"ONLINE_JUDGE\"))) {\n            System.out.println(\"Spent time: \"\n                    + (System.currentTimeMillis() - time));\n            System.out.println(\"Memory: \"\n                    + (Runtime.getRuntime().totalMemory() - Runtime\n                    .getRuntime().freeMemory()));\n        }\n        solver.close();\n    }\n", "complexity": "logn"}
{"code": "    public static void main (String argv[])\n        Scanner in = new Scanner(System.in);\n        \n        n = in.nextLong();\n        x = in.nextLong();\n        y = in.nextLong();\n        c = in.nextLong();\n        x--; y--;\n        \n        long lf = 0, rg = 2 * 1000 * 1000 * 1000 + 3;\n        \n        while (lf != rg)\n        {\n            long mid = (lf + rg) >> 1;\n            \n            if (can(mid))\n                rg = mid;\n            else\n                lf = mid + 1;\n        }\n        \n        System.out.println(lf);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tnew Solution().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMScanner sc = new MScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tlong N = sc.nextLong();\n\t\tlong X = sc.nextLong();\n\t\tlong Y = sc.nextLong();\n\t\tlong C = sc.nextLong();\n\n\t\tlong low = 0;\n\t\tlong high = N*2;\n\t\tlong mid = 0;\n\t\tlong ans = 0;\n\t\twhile (low <= high) {\n\t\t\tmid = (low + high) >> 1;\n\t\t\tlong painted = F(mid, X-1, Y-1, N);\n\t\t\tif (painted < C) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\tans = mid;\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tThread t = new Thread(null, new Main(), \"\", (1 << 26));\n\t\tt.start();\n\t\tt.join();\n\t\tif (uncaught != null) {\n\t\t\tthrow uncaught;\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\t//System.out.println(f(1,100,30));\n\t\tString S[]=br.readLine().split(\" \");\n\t\tint N=Integer.parseInt(S[0]);\n\t\tint x=Integer.parseInt(S[1]);\n\t\tint y=Integer.parseInt(S[2]);\n\t\tint c=Integer.parseInt(S[3]);\n\t\tint lo=0;\n\t\t//System.out.println(Long.MAX_VALUE);\n\t\tint hi=1000000000;\n\t\twhile(hi-lo>=10)\n\t\t\t{\n\t\t\tint steps=(hi+lo)/2;\n\t\t\t//System.out.println(\"checking \"+steps+\" hi= \"+hi+\" lo = \"+lo);\n\t\t\tlong total=f(x,y,steps)+f(N-x+1,y,steps)+f(N-x+1,N-y+1,steps)+f(x,N-y+1,steps);\n\t\t\t//System.out.println(f(x,y,steps)+\" \"+f(N-x+1,y,steps)+\" \"+f(N-x+1,N-y+1,steps)+\" \"+f(x,N-y+1,steps));\n\t\t\ttotal-=3;\t\t\t//x,y\n\t\t\ttotal-=Math.min(steps,x-1);\t\t\t//left\n\t\t\ttotal-=Math.min(steps,y-1);\t\t\t//down\n\t\t\ttotal-=Math.min(steps,N-x);\t\t\t//right\n\t\t\ttotal-=Math.min(steps,N-y);\t\t\t//up\n\t\t\t//System.out.println(\"total = \"+total);\n\t\t\tif(total>=c)\n\t\t\t\thi=steps+1;\n\t\t\telse\n\t\t\t\tlo=steps-1;\n\t\t\t}\n\t\tfor(int steps=lo;steps<=hi;steps++)\n\t\t\t{\n\t\t\t//System.out.println(\"checking \"+steps);\n\t\t\tlong total=f(x,y,steps)+f(N-x+1,y,steps)+f(N-x+1,N-y+1,steps)+f(x,N-y+1,steps);\n\t\t\ttotal-=3;\t\t\t//x,y\n\t\t\ttotal-=Math.min(steps,x-1);\t\t\t//left\n\t\t\ttotal-=Math.min(steps,y-1);\t\t\t//down\n\t\t\ttotal-=Math.min(steps,N-x);\t\t\t//right\n\t\t\ttotal-=Math.min(steps,N-y);\t\t\t//up\n\t\t\t//System.out.println(\"total = \"+total);\n\t\t\tif(total>=c)\n\t\t\t\t{\n\t\t\t\tSystem.out.println(steps);\n\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)throws IOException\n        PrintWriter out= new PrintWriter(System.out);\n        Reader sc=new Reader();\n        long n=sc.l();\n        long x=sc.l();\n        long y=sc.l();\n        long c=sc.l();\n        long low=0;\n        long high=(long)Math.pow(10,9);\n        while(low<high)\n        {\n            long mid=(low+high)/2;\n            if(check(mid,x,y,n)>=c)\n            high=mid;\n            else\n            low=mid+1;\n        }\n        out.println(low);\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new BBi()).run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tsc = new MyScanner ();\n\t\tnew B();\n\t\texit();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        String[] line = s.readLine().split(\" \");\n        long n = Long.valueOf(line[0]);\n        long y = Long.valueOf(line[1]);\n        long x = Long.valueOf(line[2]);\n        long c = Long.valueOf(line[3]);\n        \n        long min = 0;\n        long max = n*2L+20;\n        for (int cnt = 0 ; cnt < 300 ; cnt++) {\n            long med = (min+max) / 2L;\n            long ct = isok(med, n, x, y, c); \n            if (ct >= c) {\n                max = med;\n            } else {\n                min = med+1;\n            }\n        }\n        \n        long lst = max;\n        for (long d = -2 ; d <= 2 ; d++) {\n            if (max+d >= 0 && isok(max+d, n, x, y, c) >= c) {\n                lst = Math.min(lst, max+d);\n            }\n        }\n        \n        out.println(lst);\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws NumberFormatException,\n        Solver solver = new Solver();\n        solver.open();\n        solver.solve();\n        solver.close();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String... args) throws Exception {\n    br = new BufferedReader(new InputStreamReader(System.in));\n    pw = new PrintWriter(new BufferedOutputStream(System.out));\n    new P255D().run();\n    br.close();\n    pw.close();\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew B();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF256B o = new CF256B(); o.main(); o.flush();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Proj()).start();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String... args) {\n        new E(null, null).start();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)throws Exception {        \n        long l = parseLong(next());\n        long r = parseLong(next());\n        long [] min = new long [61];\n        for(int i = 1 ; i <= 60 ; ++i){//(2^i)-1 is obtained by min[i]^min[i]+1\n            min[i] = (long) pow(2, i - 1) - 1;          \n        }\n        for(int i = 60 ; i >= 0 ; --i){//try to get 2^i-1 as answer.                \n            if(min[i] >= r)\n                continue;\n            if(min[i] >= l && min[i] + 1 <= r){             \n                out.println((1L << i) - 1);\n                out.flush();\n                return;\n            }\n            if(min[i] < l){\n                long one_jump = (long) pow(2, i);\n                long  jumps = (long) ceil((l - min[i]) / (one_jump * 1.0));             \n                long cur = min[i] + (jumps * one_jump);\n                if(cur >= l && cur + 1 <= r){                                       \n                    out.println((1L << i) - 1);\n                    out.flush();\n                    return;\n                }               \n            }\n        }\n        out.println(0);\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long l = sc.nextLong();\n        long r = sc.nextLong();\n        max = 0;\n        solve(62, l, r, l, r, 0);\n        System.out.println(max);\n    }\n", "complexity": "logn"}
{"code": "public static void main(String[] args) throws IOException\n    \n    //Scanner input = new Scanner(new File(\"input.txt\"));\n    //PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n    PrintWriter out = new PrintWriter(System.out);\n    input.init(System.in);\n    long a = input.nextLong(), b = input.nextLong();\n    if(a==b)\n    {\n        out.println(0);\n        out.close();\n        return;\n    }\n    long res = 0;\n    for(int i = 0; i<63; i++)\n    {\n        if(a%(1l<<i) >= b%(1l<<i))\n            res += (1l<<i);\n        else if(b/((1l<<i)) > a/((1l<<i)))\n            res += (1l<<i);\n    }\n    out.println(res);\n    out.close();\n}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew D();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tlong a = in.nextLong();\n\t\tlong b = in.nextLong();\n\t\tString sa = Long.toBinaryString(a);\n\t\tString sb = Long.toBinaryString(b);\n\t\tlong ans = 0;\n\t\tif(sb.length()-sa.length()>0){\n\t\t\tfor(int i = 0 ; i < sb.length() ; i++){\n\t\t\t\tans += 1l<<i;\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t\telse{\n\t\t\tint num = -1 ;\n\t\t\tfor(int i = 62 ; i >= 0 ; i--){\n\t\t\t\tif((b & 1l << i) != 0 && ((~a) & (1l << i)) != 0){\n\t\t\t\t\tnum = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans = 0;\n\t\t\tif(num!=-1) for(int i = 0 ; i <= num ; i ++){\n\t\t\t\tans += 1l<<i;\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t}\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        \n        long l = s.nextLong();\n        long r = s.nextLong();\n        \n        String a = Long.toBinaryString(l);\n        String b = Long.toBinaryString(r);\n        while(a.length() < b.length()) a = \"0\" + a;\n        while(b.length() < a.length()) b = \"0\" + b;\n        \n        String ans = \"\";\n        \n        int ix = -1;\n        for (int i = 0; i < a.length(); i++) {\n            \n            if(a.charAt(i) != b.charAt(i)){\n                break;\n            }\n            ans += a.charAt(i);\n            ix++;\n        }\n//      System.out.println(a);\n//      System.out.println(b);\n        for (int i = ix + 1; i < a.length(); i++) {\n            int c1 = a.charAt(i) - '0';\n            int c2 = b.charAt(i) - '0';\n            if(c1 == 0 && c2 == 0) ans += \"1\";\n            else if(c1 == 1 && c2 == 1) ans += \"0\";\n            else ans += (char)(c1 + '0');\n        }\n        long a1 = Long.parseLong(ans, 2);\n        long a2 = Long.parseLong(b,2);\n//      System.out.println(ans);\n//      System.out.println(b);\n//      System.out.println();\n        long xor = a1 ^ a2;\n        System.out.println(xor);\n    }\n", "complexity": "logn"}
{"code": "public static void main(String[] args) {\n\tScanner  sc = new Scanner(System.in);\n\tlong x=sc.nextLong();\n\tlong y=sc.nextLong();\n\tString s=Long.toBinaryString(x);\n\tString p=Long.toBinaryString(y);\n\tint id=p.length()-s.length();\n\tfor (int i =1; i <=id; i++) {\n\t\ts=\"0\"+s;\n\t}\n\tif(x==y){\n\t\tSystem.out.println(0);\n\t\treturn;\n\t}\n\tfor (int i = 0; i <p.length(); i++) {\n\t\tif(s.charAt(i)!=p.charAt(i)){\n\t\t\tSystem.out.println((long)Math.pow(2, s.length()-i)-1);\n\t\t\treturn;\n\t}\n}\n}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew D();\n\t\texit();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new D().solve();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Template().run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        long l = s.nextLong();\n        long r = s.nextLong();\n        long a = l ^ r;\n        long b = a;\n        while (b != 0) {\n            a = b;\n            b = (b-1) & b;\n        }\n        if (a != 0) {\n            a = (a << 1) - 1;\n        }\n        System.out.println(a);\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tlong l = sc.nextLong();\n\t\tlong r = sc.nextLong();\n\n\t\tSystem.out.println(run(l, r));\n\t\t//System.out.println(run(9999999999998l, 9999999999999l));\n\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputReader r = new InputReader(System.in);\n        L = r.nextLong();\n        R = r.nextLong();\n        System.out.println(go(63,0,0,0,0));\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] ar) {\n        initA();\n        solve();\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Throwable {\n        Thread thread = new Thread (null, new Solution(), \"\", (1 << 26));\n        thread.start();\n        thread.join();\n        if (Solution.uncaught != null) {\n            throw Solution.uncaught;\n        }\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] _) {\n        new D276().run();\n    }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws IOException {\n        //sc = new MyScanner(System.in);\n        out = new MyPrinter(System.out);\n        solve();\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tnew Main().run();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tinitTime = System.currentTimeMillis();\n\t\ttry {\n\t\t\twriteLog = \"true\".equals(System.getProperty(\"LOCAL_RUN_7777\"));\n\t\t} catch (SecurityException e) {}\n\t\tnew Thread(null, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t\t\t\t} catch (SecurityException e) {}\n\t\t\t\t\tlong prevTime = System.currentTimeMillis();\n\t\t\t\t\tnew Main().run();\n\t\t\t\t\tlog(\"Total time: \" + (System.currentTimeMillis() - prevTime) + \" ms\");\n\t\t\t\t\tlog(\"Memory status: \" + memoryStatus());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1L << 24).start(); \n\t}\n\n\tvoid run() throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\t\tsolve();\n\t\tout.close();\n\t\tin.close();\n\t}\n\t\n\t/*************************************************************** \n\t * Solution\n\t **************************************************************/\n\n\tvoid solve() throws IOException  {\n\t\t\n\t\tlong leftBorder = nextLong();\n\t\tlong rightBorder = nextLong();\n\n\t\tlong[][][][][] dp = new long [64][2][2][2][2];\n\t\tfor (long[][][][] a : dp) for (long[][][] b : a) for (long[][] c : b) for (long[] d : c) fill(d, -1L);\n\t\t\n\t\tdp[63][0][0][0][0] = 0L;\n\t\t\n\t\tfor (int lastBit = 63; lastBit > 0; lastBit--) {\n\t\t\t\n\t\t\tint curBit = lastBit - 1;\n\t\t\t\n\t\t\tint leftBit = (int) ((leftBorder >> curBit) & 1L);\n\t\t\tint rightBit = (int) ((rightBorder >> curBit) & 1L);\n\t\t\t\n\t\t\tfor (int agl = 0; agl < 2; agl++) {\n\t\t\t\t\n\t\t\t\tfor (int alr = 0; alr < 2; alr++) {\n\t\t\t\t\t\t\n\t\t\t\t\tfor (int bgl = 0; bgl < 2; bgl++) {\n\t\t\t\t\t\n\t\t\t\t\t\tfor (int blr = 0; blr < 2; blr++) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlong prvXor = dp[lastBit][agl][alr][bgl][blr];\n\t\t\t\t\t\t\tif (prvXor < 0L) continue;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor (int ab = 0; ab < 2; ab++) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tint nagl = left(agl, leftBit, ab);\n\t\t\t\t\t\t\t\tint nalr = right(alr, rightBit, ab);\n\t\t\t\t\t\t\t\tif (nagl < 0 || nalr < 0) continue;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfor (int bb = 0; bb < 2; bb++) {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tint nbgl = left(bgl, leftBit, bb);\n\t\t\t\t\t\t\t\t\tint nblr = right(blr, rightBit, bb);\n\t\t\t\t\t\t\t\t\tif (nbgl < 0 || nblr < 0) continue;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlong setBit = ab ^ bb;\n\t\t\t\t\t\t\t\t\tdp[curBit][nagl][nalr][nbgl][nblr] = max(dp[curBit][nagl][nalr][nbgl][nblr], prvXor | (setBit << curBit));\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\n\t\tlong answer = -1L;\n\t\t\n\t\tfor (int agl = 0; agl < 2; agl++) {\n\t\t\t\n\t\t\tfor (int alr = 0; alr < 2; alr++) {\n\t\t\t\t\t\n\t\t\t\tfor (int bgl = 0; bgl < 2; bgl++) {\n\t\t\t\t\n\t\t\t\t\tfor (int blr = 0; blr < 2; blr++) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tanswer = max(answer, dp[0][agl][alr][bgl][blr]);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n//\t\tSystem.err.println(Long.toBinaryString(leftBorder));\n//\t\tSystem.err.println(Long.toBinaryString(rightBorder));\n//\t\tSystem.err.println(Long.toBinaryString(answer));\n\t\t\n\t\tout.println(answer);\n\t}\n\n\tint left(int gl, int leftBit, int b) {\n\t\t\n\t\tif (gl == 0) {\n\t\t\t\n\t\t\tif (b < leftBit) return -1;\n\t\t\tif (b == leftBit) return 0;\n\t\t\tif (b > leftBit) return 1;\n\t\t\t\n\t\t}\n\t\t\n\t\treturn 1;\n\t}\n\t\n\tint right(int lr, int rightBit, int b) {\n\t\t\n\t\tif (lr == 0) {\n\t\t\tif (b < rightBit) return 1;\n\t\t\tif (b == rightBit) return 0;\n\t\t\tif (b > rightBit) return -1;\n\t\t}\n\t\t\n\t\treturn 1;\n\t}\n\n\t/*************************************************************** \n\t * Input \n\t **************************************************************/\n\tBufferedReader in;\n\tPrintWriter out;\n\tStringTokenizer st = new StringTokenizer(\"\");\n\t\n\tString nextToken() throws IOException {\n\t\twhile (!st.hasMoreTokens())\n\t\t\tst = new StringTokenizer(in.readLine());\n\t\treturn st.nextToken();\n\t}\n\t\n\tint nextInt() throws IOException {\n\t\treturn Integer.parseInt(nextToken());\n\t}\n\t\n\tlong nextLong() throws IOException {\n\t\treturn Long.parseLong(nextToken());\n\t}\n\t\n\tdouble nextDouble() throws IOException {\n\t\treturn Double.parseDouble(nextToken());\n\t}\n\t\n\tint[] nextIntArray(int size) throws IOException {\n\t\tint[] ret = new int [size];\n\t\tfor (int i = 0; i < size; i++)\n\t\t\tret[i] = nextInt();\n\t\treturn ret;\n\t}\n\t\n\tlong[] nextLongArray(int size) throws IOException {\n\t\tlong[] ret = new long [size];\n\t\tfor (int i = 0; i < size; i++)\n\t\t\tret[i] = nextLong();\n\t\treturn ret;\n\t}\n\t\n\tdouble[] nextDoubleArray(int size) throws IOException {\n\t\tdouble[] ret = new double [size];\n\t\tfor (int i = 0; i < size; i++)\n\t\t\tret[i] = nextDouble();\n\t\treturn ret;\n\t}\n\t\n\tString nextLine() throws IOException {\n\t\tst = new StringTokenizer(\"\");\n\t\treturn in.readLine();\n\t}\n\t\n\tboolean EOF() throws IOException {\n\t\twhile (!st.hasMoreTokens()) {\n\t\t\tString s = in.readLine();\n\t\t\tif (s == null)\n\t\t\t\treturn true;\n\t\t\tst = new StringTokenizer(s);\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/*************************************************************** \n\t * Output \n\t **************************************************************/\n\tvoid printRepeat(String s, int count) {\n\t\tfor (int i = 0; i < count; i++)\n\t\t\tout.print(s);\n\t}\n\t\n\tvoid printArray(int[] array) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) out.print(' ');\n\t\t\tout.print(array[i]);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\tvoid printArray(long[] array) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) out.print(' ');\n\t\t\tout.print(array[i]);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\tvoid printArray(double[] array) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) out.print(' ');\n\t\t\tout.print(array[i]);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\tvoid printArray(double[] array, String spec) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) out.print(' ');\n\t\t\tout.printf(Locale.US, spec, array[i]);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\tvoid printArray(Object[] array) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tboolean blank = false;\n\t\tfor (Object x : array) {\n\t\t\tif (blank) out.print(' '); else blank = true;\n\t\t\tout.print(x);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\t@SuppressWarnings(\"rawtypes\")\n\tvoid printCollection(Collection collection) {\n\t\tif (collection == null || collection.isEmpty())\n\t\t\treturn;\n\t\tboolean blank = false;\n\t\tfor (Object x : collection) {\n\t\t\tif (blank) out.print(' '); else blank = true;\n\t\t\tout.print(x);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\t/*************************************************************** \n\t * Utility\n\t **************************************************************/\n\tstatic String memoryStatus() {\n\t\treturn (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() >> 20) + \"/\" + (Runtime.getRuntime().totalMemory() >> 20) + \" MB\";\n\t}\n\t\n\tstatic void checkMemory() {\n\t\tSystem.err.println(memoryStatus());\n\t}\n\t\n\tstatic long prevTimeStamp = Long.MIN_VALUE;\n\t\n\tstatic void updateTimer() {\n\t\tprevTimeStamp = System.currentTimeMillis();\n\t}\n\t\n\tstatic long elapsedTime() {\n\t\treturn (System.currentTimeMillis() - prevTimeStamp);\n\t}\n\t\n\tstatic void checkTimer() {\n\t\tSystem.err.println(elapsedTime() + \" ms\");\n\t}\n\t\n\tstatic void chk(boolean f) {\n\t\tif (!f) throw new RuntimeException(\"Assert failed\");\n\t}\n\t\n\tstatic void chk(boolean f, String format, Object ... args) {\n\t\tif (!f) throw new RuntimeException(String.format(format, args));\n\t}\n\t\n\tstatic void log(String format, Object ... args) {\n\t\tif (writeLog) System.err.println(String.format(Locale.US, format, args));\n\t}\n}\n\n", "complexity": "logn"}
{"code": "    public static void main(String[] args)throws Exception {        \n        long l = parseLong(next());\n        long r = parseLong(next());\n        long [] min = new long [61];\n        for(int i = 1 ; i <= 60 ; ++i){//(2^i)-1 is obtained by min[i]^min[i]+1\n            min[i] = (long) pow(2, i - 1) - 1;          \n        }\n        for(int i = 60 ; i >= 0 ; --i){//try to get 2^i-1 as answer.                \n            if(min[i] >= r)\n                continue;\n            if(min[i] >= l && min[i] + 1 <= r){             \n                out.println((long) pow(2, i) - 1);\n                out.flush();\n                return;\n            }\n            if(min[i] < l){\n                long one_jump = (long) pow(2, i);\n                long  jumps = (long) ceil((l - min[i]) / (one_jump * 1.0));             \n                long cur = min[i] + (jumps * one_jump);\n                if(cur >= l && cur + 1 <= r){                                       \n                    out.println((long) pow(2, i) - 1);\n                    out.flush();\n                    return;\n                }               \n            }\n        }\n        out.println(0);\n        out.flush();\n    }\n", "complexity": "logn"}
{"code": "", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new D2().run(); }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] args ) {\n\t\ttry{\n\t\t\tString str;\t\t\t\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tBufferedOutputStream bos = new BufferedOutputStream(System.out);\n\t\t\tString eol = System.getProperty(\"line.separator\");\n\t\t\tbyte [] eolb = eol.getBytes();\n\t\t\tbyte[] spaceb= \" \".getBytes();\n\t\t\n\t\t\tstr  = br.readLine();\n\t\t\tint blank = str.indexOf( \" \");\n\t\t\tlong l = Long.parseLong(str.substring(0,blank));\n\t\t\tlong r = Long.parseLong(str.substring(blank+1));\n\t\t\tString one = \"\";\n\t\t\tString two = \"\";\n\t\t\twhile(l>0) {\n\t\t\t\tif((l%2)==0) {\n\t\t\t\t\tone = \"0\".concat(one);\n\t\t\t\t} else {\n\t\t\t\t\tone = \"1\".concat(one);\n\t\t\t\t}\n\t\t\t\tl/=2;\n\t\t\t}\n\t\t\twhile(r>0) {\n\t\t\t\tif((r%2)==0) {\n\t\t\t\t\ttwo = \"0\".concat(two);\n\t\t\t\t} else {\n\t\t\t\t\ttwo = \"1\".concat(two);\n\t\t\t\t}\n\t\t\t\tr/=2;\n\t\t\t}\n\t\t\twhile(one.length()<60) {\n\t\t\t\tone = \"0\".concat(one);\n\t\t\t}\n\t\t\twhile(two.length()<60) {\n\t\t\t\ttwo = \"0\".concat(two);\n\t\t\t}\n\t\t\tint iter = 0;\n\t\t\tString xor = \"\";\n\t\t\tboolean big = false;\n\t\t\tboolean small = false;\n\t\t\twhile(one.charAt(iter) == two.charAt(iter)) {\n\t\t\t\txor = xor.concat(\"0\");\n\t\t\t\titer++;\n\t\t\t\tif(iter==60) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = iter ; i < 60 ; i++) {\n\t\t\t\txor = xor.concat(\"1\");\n\t\t\t}\n\t\t\tbos.write(new BigInteger(xor,2).toString().getBytes());\n\t\t\tbos.write(eolb);\n\t\t\tbos.flush();\n\t\t}  catch(IOException ioe) {\n\t\t\tioe.printStackTrace();\n\t\t}\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew CFDiv1().runIO();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String... args) {\n        new E(null, null).start();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        LittleGirlAndMaximumXOR lgamx = new LittleGirlAndMaximumXOR(System.in, System.out);\n        lgamx.solve();\n    }\n", "complexity": "logn"}
{"code": "    public static void main (String [] args) throws Exception {\n        \n        // Use BufferedReader rather than RandomAccessFile; it's much faster\n        f = new BufferedReader(new java.io.InputStreamReader(System.in));\n        \n        long unixTime = System.currentTimeMillis();\n        \n        long l=nextLong();\n        long r=nextLong();\n        \n        String ll=Long.toBinaryString(l);\n        String rr=Long.toBinaryString(r);\n        \n        System.err.println(ll);\n        System.err.println(rr);\n        \n        System.err.println(Long.parseLong(rr,2));\n        \n        int len=0;\n        if(ll.length()!=rr.length()){\n            len=Math.max(ll.length(),rr.length());\n        }else{\n            //same\n            for(int i=0;i<ll.length();i++){\n                if(ll.charAt(i)!=rr.charAt(i)){\n                    len=ll.length()-i;\n                    break;\n                }\n            }\n        }\n        System.err.println(len);\n        //long out=0;\n        StringBuffer s=new StringBuffer();\n        for(int i=0;i<len;i++){\n            //out+=Math.pow(2, i);\n            s.append(1);\n        }\n        \n        if(len==0){\n            System.out.println(0);\n        }else{\n            System.out.println(Long.parseLong(s.toString(),2));\n        }\n        \n//      System.out.println(\"Time elapsed (ms): \"+(System.currentTimeMillis()-unixTime));\n        \n        System.exit(0);                               // don't omit this!\n      }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew D();\n\t\texit();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong L = sc.nextLong();\n\t\tlong R = sc.nextLong();\n\t\tlong res = Math.max(2 * Long.highestOneBit(L ^ R) - 1, 0);\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) throws Exception {\n        ProblemD solution = new ProblemD();\n        solution.run();\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tlong L = nextLong();\n\t\tlong R = nextLong();\n\t\tif (L==R) {\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tString s1 = Long.toBinaryString(L), s2 = Long.toBinaryString(R);\n\t\twhile (s1.length() != s2.length())\n\t\t\ts1 = \"0\"+s1;\n\t\tfor (int i = 0; i < s1.length(); i++) {\n\t\t\tif (s1.charAt(i) != s2.charAt(i)) {\n\t\t\t\tint pow = s1.length()-i;\n\t\t\t\tSystem.out.println((long)Math.pow(2, pow)-1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main( final String[] args ) throws Exception {\n\t\tfinal BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );\n\t\tfinal String line = br.readLine();\n\t\tfinal StringTokenizer tok = new StringTokenizer( line );\n\n\t\tfinal long L = Long.parseLong( tok.nextToken() );\n\t\tfinal long R = Long.parseLong( tok.nextToken() );\n\n\t\tSystem.out.println( solve( L, R ) );\n\t}\n", "complexity": "logn"}
{"code": "  public static void main(String[] aslkdjlkgja) throws IOException\n    Codeforces z = new Codeforces();\n    z.init(\"\", \"\");\n   \n    long l = z.nL();\n    long r = z.nL();\n    if ( l == r)\n    {\n      System.out.println(0);\n      z.close();\n      return;\n    }\n    \n    List<Boolean> R = new ArrayList<Boolean>();\n    List<Boolean> L = new ArrayList<Boolean>();\n    \n    long temp = r;\n    while (temp != 0)\n    {\n      if (temp % 2 == 1)\n        R.add(true);\n      else\n        R.add(false);\n      temp /= 2;\n    }\n    \n    Collections.reverse(R);\n    \n    temp = l;\n    while (temp != 0)\n    {\n      if (temp % 2 == 1)\n        L.add(true);\n      else\n        L.add(false);\n      temp /= 2;\n    }    \n    \n    int n = R.size() - L.size();\n    while (n!=0)\n    {\n      L.add(false);\n      --n;\n    }\n    Collections.reverse(L);\n    \n    List<Boolean> res = new ArrayList<Boolean>();\n   // for (int i = 0 ; i < R.size(); ++i)\n     // res.add(false);\n    \n    int it = 0;\n    \n    while (R.get(0) == L.get(0))\n    {\n      res.add(false);\n      R.remove(0);\n      L.remove(0);\n    }\n    \n    for (int i = 0; i< R.size(); ++i)\n      res.add(true);\n    \n    long out = 0;\n    it = 0;\n    long add = 1;\n    Collections.reverse(res);\n    while (it < res.size())\n    {\n      if (res.get(it))\n        out += add;\n      add *= 2;\n      ++it;\n    }\n    System.out.println(out);\n  }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new pr169D()).start();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\n\t\tboolean showLineError = true;\n\t\tif (showLineError) {\n\t\t\tsolve();\n\t\t\tout.close();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tsolve();\n\t\t\t} catch (Exception e) {\n\t\t\t} finally {\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\n\t}\n", "complexity": "logn"}
{"code": "   public static void main(String[] args) throws IOException {\n      new SolutionD().run();\n   }\n", "complexity": "logn"}
{"code": "    public static void main(String[] args) {\n        Scanner scn = new Scanner(System.in);\n        long a,b;\n        a = scn.nextLong();\n        b = scn.nextLong();\n        long diff = b -a , tot = 0;\n        int ind = 0;\n        while(true) {\n            long res = (long)Math.pow(2.0, ind);\n            if (res > b) break;\n            if (((a>>ind) != (b>>ind)) || diff >= res)\n                tot += res;\n            ind++;\n        }\n        System.out.println(tot);\n    }                                                                                                                                                                                                                          \n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tInputReader in = new InputReader();\n\t\tl = in.nextLong();\n\t\tr = in.nextLong();\n\t\tdp = new long[65][2][2][2][2];\n\t\tfor(int i = 0 ; i < 65;i++)\n\t\tfor(int j = 0 ; j < 2;j++)\n\t\tfor(int k = 0 ; k < 2;k++)\n\t\tfor(int a = 0 ; a<2;a++)\n\t\tdp[i][j][k][a][0]=dp[i][j][k][a][1]=-1;\n\t\tSystem.out.println(go(63, 0, 0, 0, 0));\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String [] args){\n\t\tScanner cin = new Scanner(System.in);\n\t\tPrintWriter cout = new PrintWriter(System.out);\n\t\tlong l = cin.nextLong(), r = cin.nextLong(), k = 1;\n\t\tif (l == r)cout.println(0);\n\t\telse {\n\t\t\twhile (((r>>k)<<k)>l)k++;k--;\n\t\t\tcout.println(((r>>k)<<k)^(((r>>k)<<k)-1));\n\t\t}\n\t\tcout.flush();\n\t}\n", "complexity": "logn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String args[]){\n        Scanner input = new Scanner(System.in);\n        long s = input.nextLong();\n        long e = input.nextLong();\n        System.out.println(count(s,e));\n    }\n", "complexity": "logn"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner QQQ=new Scanner(System.in);\n\t\tlong l=QQQ.nextLong();\n\t\tlong r=QQQ.nextLong();\n\t\tlong ans=l^r;\n\t\tint a[]=new int [70];\n\t\tint b[]=new int [70];\n\t\tint n=0,m=0;\n\t\twhile (l!=0){\n\t\t\ta[m]=(int)(l%2);\n\t\t\tl/=2;\n\t\t\tm++;\n\t\t}\n\t\twhile (r!=0){\n\t\t\tb[n]=(int)(r%2);\n\t\t\tr/=2;\n\t\t\tn++;\n\t\t}\n\t\tm--;n--;\n\t\tlong deg[]=new long [70];\n\t\tdeg[0]=1;\n\t\tfor (int i=1;i<=62;i++) deg[i]=deg[i-1]*2;\n\t\tfor (int i=n;i>=0;i--) \n\t\t\tif (b[i]==1&&a[i]==0){\n\t\t\t\tSystem.out.println(deg[i+1]-1);\n\t\t\t\treturn;\n\t\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "logn"}
{"code": "    public static void main(String[] args){\n        new ProblemD();\n    }\n", "complexity": "logn"}
{"code": "  public static void main(String[] args)\n    FastReader fr = new FastReader();\n    int n = fr.nextInt();\n    int q = fr.nextInt();\n    long[] a = new long[n];\n    long[] k = new long[q];\n    for(int i = 0; i < n; i++) a[i] = fr.nextLong();\n    for(int i = 0; i < q; i++) k[i] = fr.nextLong();\n    long[] pre = new long[n];\n    pre[0] = a[0];\n    for(int i = 1; i < n; i++) pre[i] = pre[i-1] + a[i];\n    long pd = 0;\n    for(int i = 0; i < q; i++)\n    {\n      int l = 0;\n      int r = n - 1;\n      while(r > l)\n      {\n        int mid = (l + r) >> 1;\n\n        if(pre[mid] - pd < k[i])\n        {\n          l = mid + 1;\n        }\n        else if(pre[mid] - pd > k[i])\n        {\n          r = mid - 1;\n        }\n        else\n        {\n          l = r = mid;\n        }\n      }\n      int ans = 0;\n      if(pre[l] - pd <= k[i])\n      {\n        ans = n - l - 1;\n      }\n      else\n      {\n        ans = n - l;\n      }\n      if(ans == 0) ans  = n;\n      pd = pd + k[i];\n      if(pd >= pre[n-1]) pd = 0;\n      System.out.println(ans);\n    }\n  }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t        \n\t\tint n = Integer.parseInt(st.nextToken());\n\t     \n\t\tlong[] myArray = new long[2 * n];\n\t        \n\t\t\tfor (int i = 0; i < n; i++)  {\n\t        \tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\t        \tmyArray[2 * i] = Long.parseLong(st1.nextToken()) * 2;\n\t        \tmyArray[2 * i + 1] = Long.parseLong(st1.nextToken()) * 2 + 1;\n\t        }  \n\t        \n\t        Arrays.sort(myArray);\n\t        long[] ans = new long[n + 1];\n\t        int cnt = 0;\n\t       \n\t        for (int i = 0; i < 2 * n - 1; i++)   {\n\t            if (myArray[i] % 2 == 0) cnt++; else cnt--;\n\t            ans[cnt] += (myArray[i + 1] + 1) / 2 - (myArray[i] + 1) / 2;\n\t        }   \n\t        \n\t        StringBuilder answer = new StringBuilder();\n\t        \n\t        for (int i = 1; i < n + 1; i++) {\n\t        \tanswer.append(ans[i]);\n\t        \tanswer.append(\" \");\n\t        }  \n\t        \n\t        System.out.println(answer);\n\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t        \n\t\tint n = Integer.parseInt(st.nextToken());\n\t     \n\t\tlong[] myArray = new long[2 * n];\n\t        \n\t\t\tfor (int i = 0; i < n; i++)  {\n\t        \tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\t        \tmyArray[2 * i] = Long.parseLong(st1.nextToken()) * 2;\n\t        \tmyArray[2 * i + 1] = Long.parseLong(st1.nextToken()) * 2 + 1;\n\t        }  \n\t        \n\t        Arrays.sort(myArray);\n\t        long[] ans = new long[n + 1];\n\t        int cnt = 0;\n\t       \n\t        for (int i = 0; i < 2 * n - 1; i++)   {\n\t            if (myArray[i] % 2 == 0) cnt++; else cnt--;\n\t            ans[cnt] += (myArray[i + 1] + 1) / 2 - (myArray[i] + 1) / 2;\n\t        }   \n\t        \n\t        StringBuilder answer = new StringBuilder();\n\t        \n\t        for (int i = 1; i < n + 1; i++) {\n\t        \tanswer.append(ans[i]);\n\t        \tanswer.append(\" \");\n\t        }  \n\t        \n\t        System.out.println(answer);\n\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        int numCnt = (int) nextLong();\n        long k = nextLong();\n        parent = new int[numCnt];\n        for (int i = 0; i < parent.length; i++) {\n            parent[i] = i;\n        }\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        long[] ar = new long[numCnt];\n        for (int i = 0; i < numCnt; i++) {\n            ar[i] = nextLong();\n            map.put(ar[i] * 10007 + ar[i] / 13, i);\n        }\n        for (int i = 0; i < ar.length; i++) {\n            long req = ar[i] * k;\n            Integer idx=map.get(req * 10007 + req / 13);\n            if (idx!=null) {\n                union(i, idx);\n            }\n        }\n        int[] count = new int[numCnt];\n        for (int i = 0; i < parent.length; i++) {\n            count[find(i)]++;\n        }\n        int res = 0;\n        for (int i = 0; i < numCnt; i++) {\n            res += (int) ((count[i] + 1) / 2.0);\n        }\n        System.out.println(res);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Template().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tBufferedReader c=new BufferedReader(new InputStreamReader(System.in));\n\t\tString S[]=c.readLine().split(\" \");\n\t\tint N=Integer.parseInt(S[0]);\n\t\tint K=Integer.parseInt(S[1]);\n\t\tint A[]=parseArray(c.readLine(),N);\n\t\tshuffle(A);\n\t\tArrays.sort(A);\n\t\t\n\t\tTreeMap<Long,Long> T=new TreeMap<Long, Long>();\n\t\tint ans=0;\n\t\tfor(int i=0;i<N;i++)\n\t\t\tT.put((long)A[i],1L);\n\t\t//System.out.println(Arrays.toString(A));\n\t\tif(K==1)\n\t\t\t{\n\t\t\tSystem.out.println(N);\n\t\t\treturn;\n\t\t\t}\n\t\telse\n\t\t\t{\n\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\t{\n\t\t\t\tif(A[i]%K==0&&T.containsKey((long)A[i]/K))\t\t//A[i] is not start of a chain\n\t\t\t\t\tcontinue;\n\t\t\t\t//System.out.println(\"considering \"+A[i]);\n\t\t\t\tint chainSize=0;\n\t\t\t\tlong init=A[i];\n\t\t\t\twhile(T.containsKey(init))\n\t\t\t\t\t{\n\t\t\t\t\tchainSize++;\n\t\t\t\t\tinit=init*K;\n\t\t\t\t\t}\n\t\t\t\t//System.out.println(\"\\t\"+chainSize);\n\t\t\t\tans+=(chainSize+1)/2;\n\t\t\t\t}\n\t\t\t}\n\t\tSystem.out.println(ans);\n\t\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\t\n\t\t//lol what?? If use HashSet timeout, but if use tree set, not?\n\t\t//even with super high initialize capacty = 100,000,where max 100000\n\t\tSet<Integer> set = new HashSet<Integer>(1000000);\n\t\tFastScanner s = new FastScanner();\n\t\tn = s.nextInt();\n\t\tk = s.nextInt();\n\t\t\n\t\tint[] a = new int[n];\n\t\tfor(int i=0; i<n; i++){\n\t\t\ta[i] = s.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\t\n\t\tfor(int i=0; i<n; i++){\n\t\t\tif(a[i]%k !=0){\n\t\t\t\tset.add(a[i]);\n\t\t\t}else{\n\t\t\t\tif(!set.contains(a[i]/k)){\n\t\t\t\t\tset.add(a[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(set.size());\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int n = nextInt();\n        int k = nextInt();\n        Integer[]a = new Integer[n+1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = nextInt();\n        }\n        if (k==1) {\n            System.out.println(n);\n            return;\n        }\n        Arrays.sort(a, 1, n+1);\n        Set<Integer> set = new HashSet<Integer>();\n        int ans = 0;\n        int INF = (int) 1e9;\n        for (int i = 1; i <= n; i++) {\n            if (set.contains(a[i]))\n                continue;\n            int t = a[i];\n            int s = 1;\n            while ((long)t*k <= INF) {\n                t *= k;\n                if (Arrays.binarySearch(a, 1, n+1,  t) >= 0) {\n                    set.add(t);\n                    s++;\n                }\n                else\n                    break;\n            }\n            if (s % 2==0)\n                ans += s/2;\n            else\n                ans += s/2+1;\n        }\n        System.out.println(ans);\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        MyScanner scanner = new MyScanner();\n        int n = scanner.nextInt();\n        int k = scanner.nextInt();\n        Integer[] a = scanner.getIntArray(n);\n        Arrays.sort(a);\n        TreeSet<Integer> res = new TreeSet<Integer>();\n        for (Integer i: a){\n            if (!res.contains(i/k)||(i%k!=0))\n                res.add(i);\n        }\n        println(res.size());\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A();\n\t\texit();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new A().solve();\n        // new FileInputStream(new File(\"input.txt\")),\n        // new PrintStream(new FileOutputStream(new File(\"output.txt\"))));\n    }\n", "complexity": "nlogn"}
{"code": "", "complexity": "nlogn"}
{"code": "public static void main(String[] args) throws IOException\n    input.init(System.in);\n    int n = input.nextInt(), k = input.nextInt();\n    TreeSet<Integer> ts = new TreeSet<Integer>();\n    int[] data = new int[n];\n    for(int i = 0; i<n; i++)\n    {\n        data[i] = input.nextInt();\n    }\n    Arrays.sort(data);\n    if(n>1 && k==1.*data[n-1]/data[0])\n        System.out.println(n-1);\n    else\n    {\n    for(int i = 0; i<n; i++)\n    {\n        if(data[i]%k != 0)\n            ts.add(data[i]);\n        else\n        {\n            if(!ts.contains(data[i]/k))\n                ts.add(data[i]);\n        }\n    }\n    System.out.println(ts.size());\n    }\n}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String [] args ) {\n\t\ttry{\n\t\t\tString str;\t\t\t\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tBufferedOutputStream bos = new BufferedOutputStream(System.out);\n\t\t\tString eol = System.getProperty(\"line.separator\");\n\t\t\tbyte [] eolb = eol.getBytes();\n\t\t\tbyte[] spaceb= \" \".getBytes();\n\t\t\t\n\t\t\t\n\t\t\tstr  = br.readLine();\n\t\t\tint blank = str.indexOf( \" \");\n\t\t\tint n = Integer.parseInt(str.substring(0,blank));\n\t\t\tint m = Integer.parseInt(str.substring(blank+1));\n\t\t\tlong [] num = new long[n];\n\t\t\tint j=0;\n\t\t\tint s=0;\n\t\t\tint k =0;\n\t\t\tstr = br.readLine();\n\t\t\tint length = str.length();\n\t\t\twhile(j<length) {\n\t\t\t\twhile(j<length) {\n\t\t\t\t\tif(str.charAt(j) == ' ') {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnum[k] = Long.parseLong(str.substring(s,j)) ;\n\t\t\t\tk++;\n\t\t\t\tj++;\n\t\t\t\ts=j;\t\t\t\n\t\t\t}\n\t\t\tArrays.sort(num);\n\t\t\tint count = 0;\n\t\t\tif(m==1) {\n\t\t\t\tcount = 1;\n\t\t\t\tfor(int i = 1 ; i < n ; i++) {\n\t\t\t\t\tif(num[i]!=num[i-1]) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tTreeSet<Long> take = new TreeSet<Long>();\n\t\t\t\tTreeSet<Long> notTake = new TreeSet<Long>();\n\t\t\t\tfor(int i = 0 ; i < n ; i++) {\n\t\t\t\t\tlong temp = num[i];\n\t\t\t\t\tif(!notTake.contains(temp)){\n\t\t\t\t\t\ttake.add(temp);\n\t\t\t\t\t\ttemp *= ((long)m);\n\t\t\t\t\t\tnotTake.add(temp);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcount = take.size();\n\t\t\t}\n\t\t\tbos.write(new Integer(count).toString().getBytes());\n\t\t\tbos.write(eolb);\n\t\t\tbos.flush();\n\t\t}  catch(IOException ioe) {\n\t\t\tioe.printStackTrace();\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tClass<?> here = new Object(){}.getClass().getEnclosingClass();\n\t\ttry {\n\t\t\tString packageName = here.getPackage().getName();\n\t\t\tpackageName = \"src/\" + packageName.replaceAll(\"\\\\.\", \"/\") + \"/\";\n\t\t\tSystem.setIn(new FileInputStream(packageName + \"input.txt\"));\n//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(packageName + \"output.txt\")));\n\t\t} catch (FileNotFoundException e) {\n\t\t} catch (NullPointerException e) {\n\t\t}\n\n\t\tObject o = Class.forName(here.getName()).newInstance();\n\t\to.getClass().getMethod(\"run\").invoke(o);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tnew solve().run();\n\t}\n", "complexity": "nlogn"}
{"code": "public static void main(String[] args) throws Exception{\n        \n    div168C a=new div168C();\n        Parserdoubt pd=a.new Parserdoubt(System.in);\n        StringBuffer sb = new StringBuffer();\n        \n        ArrayList<Integer> arr=new ArrayList<Integer>();\n        int max=0;\n        int n=pd.nextInt();\n        int k=pd.nextInt();\n        for(int i=0;i<n;i++){\n            arr.add(pd.nextInt());\n            max=Math.max(max, arr.get(i));\n        }\n        Collections.sort(arr);\n    \n        int count=0;\n        int[] mat=new int[n+1];\n        for(int i=n-1;i>=0;i--){\n            if(mat[i]!=1){\n                int x=arr.get(i);\n                if(x%k==0){\n                int ans=Collections.binarySearch(arr, x/k);\n                \n            //  System.out.println(\"index \"+ans);\n                \n                if(ans>=0&&arr.get(ans)==(x/k)){\n                    count++;\n                    mat[ans]=1;\n                }\n                else{\n                    count++;\n                }\n                }\n                else{\n                    count++;\n                }\n            }\n        }\n        /*for(int i=0;i<arr.size();i++){\n            System.out.print(arr.get(i)+\" \");\n        }\n        System.out.println();\n        */\n        if(n==1)\n            count=1;\n        System.out.println(count);\n        \n}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A();\n\t\texit();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tnew Thread(null, new _AAAA(), \"\", 128 * (1L << 20)).start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tParserdoubt3 s = new Parserdoubt3(System.in);\n\t\tint n = s.nextInt();\n\t\tlong k = s.nextInt();\n\t\tLong a[] = new Long[n];\n\t\tTreeSet<Long> tree = new TreeSet<Long>();\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\ta[i] = s.nextLong();\n\t\t\ttree.add(a[i]);\n\t\t}\n\t\tArrays.sort(a);\n\t\t\n\t\tint ans = 0;\n\t\t\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tif(tree.contains(a[i])){ \n\t\t\t\tans++;\n\t\t\t\tlong next = a[i] * k;\n\t\t\t\tif(tree.contains(next)) tree.remove(next);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tThread t = new Thread(null, new Solution(), \"\", (1 << 26));\n\t\tt.start();\n\t\tt.join();\n\t\tif (uncaught != null) {\n\t\t\tthrow uncaught;\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner in = new Scanner(System.in);\n\t\tHashtable<Long, Boolean> d = new Hashtable<Long, Boolean>();\n\t\tint n = in.nextInt(), k = in.nextInt(), size = 0, a[] = new int[n];\n\t\tfor (int i = 0; i < n; i++) a[i] = in.nextInt();\n\t\tArrays.sort(a);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlong x = a[i];\n\t\t\tif (!d.containsKey(x)) {\n\t\t\t\td.put(x * k, true);\n\t\t\t\tsize++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(size);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tString[] data = s.readLine().split(\" \");\n\t\tint n = Integer.valueOf(data[0]);\n\t\tint k = Integer.valueOf(data[1]);\n\t\t\n\t\t\n\t\tlong[] a = new long[n];\n\t\tString[] ai = s.readLine().split(\" \");\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\ta[i] = Integer.valueOf(ai[i]);\n\t\t}\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tint tm = (int)(Math.random() * n);\n\t\t\tlong tmp = a[tm];\n\t\t\ta[tm] = a[i];\n\t\t\ta[i] = tmp;\n\t\t}\n\t\tArrays.sort(a);\n\n\t\tSet<Long> invalid = new HashSet<Long>();\n\t\tint cnt = 0;\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tif (!invalid.contains(a[i])) {\n\t\t\t\tcnt++;\n\t\t\t\tinvalid.add(a[i] * k);\n\t\t\t}\n\t\t}\n\t\tout.println(cnt);\n\t\tout.flush();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tInputReader in = new InputReader();\n\t\tint n = in.nextInt();\n\t\tlong k = in.nextInt();\n\t\tLong[] a = new Long[n];\n\t\tfor(int i = 0 ; i < n;i++)a[i]=in.nextLong();\n\t\tif(k==1)System.out.println(n);\n\t\telse{\n\t\t\tint res = 0;\n\t\t\tArrays.sort(a);\n\t\t\tboolean[] v = new boolean[n];\n\t\t\tfor(int i = 0 ; i < n;i++){\n\t\t\t\tif(!v[i]){\n\t\t\t\t\tlong cur = a[i];\n\t\t\t\t\tint cnt = 1;\n\t\t\t\t\twhile(true){\n\t\t\t\t\t\tint idx = Arrays.binarySearch(a, cur*k);\n\t\t\t\t\t\tif(idx<0){\n\t\t\t\t\t\t\tres+= cnt/2 + cnt%2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tv[idx]=true;\n\t\t\t\t\t\tcur = a[idx];\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new  Scanner(System.in);\n        int n = in.nextInt();\n        long k = in.nextLong();\n        Long []a = new Long[n];\n        for (int i = 0; i<n; i++)\n            a[i] = in.nextLong();\n        HashSet<Long> hash = new HashSet<Long>();\n        Arrays.sort(a);\n        for (int i = 0; i<n; i++)\n            if (!hash.contains(a[i])){\n                hash.add(a[i] * k);\n            }\n        System.out.println(hash.size());\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String[] arr = in.readLine().split(\" \");\n        int n = i(arr[0]);\n        long k = i(arr[1]);\n        long[] A = new long[n];\n        arr = in.readLine().split(\" \");\n        for(int i=0; i<n; i++)\n            A[i] = i(arr[i]);\n        shuffle(A);\n        Arrays.sort(A);\n\n        Set<Long> BAN = new HashSet<Long>();\n        int ans = 0;\n        for(int i=0; i<n; i++) {\n            if(!BAN.contains(A[i])) {\n                ans++;\n                BAN.add(A[i]*k);\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A();\n\t\texit();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tinitTime = System.currentTimeMillis();\n\t\ttry {\n\t\t\twriteLog = \"true\".equals(System.getProperty(\"LOCAL_RUN_7777\"));\n\t\t} catch (SecurityException e) {}\n\t\tnew Thread(null, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t\t\t\t} catch (SecurityException e) {}\n\t\t\t\t\tlong prevTime = System.currentTimeMillis();\n\t\t\t\t\tnew Main().run();\n\t\t\t\t\tlog(\"Total time: \" + (System.currentTimeMillis() - prevTime) + \" ms\");\n\t\t\t\t\tlog(\"Memory status: \" + memoryStatus());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1L << 24).start(); \n\t}\n\n\tvoid run() throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\t\tsolve();\n\t\tout.close();\n\t\tin.close();\n\t}\n\t\n\t/*************************************************************** \n\t * Solution\n\t **************************************************************/\n\n\tvoid solve() throws IOException  {\n\t\t\n\t\tint n = nextInt();\n\t\tlong k = nextLong();\n\t\tint[] a = nextIntArray(n);\n\n\t\tSet<Long> bad = new TreeSet<Long>();\n\t\t\n\t\tsort(a);\n\t\t\n\t\tint ans = 0;\n\t\t\n\t\tfor (int x : a) {\n\t\t\tif (!bad.contains((long) x)) {\n\t\t\t\tbad.add(x * k);\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.println(ans);\n\t\t\n\t}\n\t\n\t/*************************************************************** \n\t * Input \n\t **************************************************************/\n\tBufferedReader in;\n\tPrintWriter out;\n\tStringTokenizer st = new StringTokenizer(\"\");\n\t\n\tString nextToken() throws IOException {\n\t\twhile (!st.hasMoreTokens())\n\t\t\tst = new StringTokenizer(in.readLine());\n\t\treturn st.nextToken();\n\t}\n\t\n\tint nextInt() throws IOException {\n\t\treturn Integer.parseInt(nextToken());\n\t}\n\t\n\tlong nextLong() throws IOException {\n\t\treturn Long.parseLong(nextToken());\n\t}\n\t\n\tdouble nextDouble() throws IOException {\n\t\treturn Double.parseDouble(nextToken());\n\t}\n\t\n\tint[] nextIntArray(int size) throws IOException {\n\t\tint[] ret = new int [size];\n\t\tfor (int i = 0; i < size; i++)\n\t\t\tret[i] = nextInt();\n\t\treturn ret;\n\t}\n\t\n\tlong[] nextLongArray(int size) throws IOException {\n\t\tlong[] ret = new long [size];\n\t\tfor (int i = 0; i < size; i++)\n\t\t\tret[i] = nextLong();\n\t\treturn ret;\n\t}\n\t\n\tdouble[] nextDoubleArray(int size) throws IOException {\n\t\tdouble[] ret = new double [size];\n\t\tfor (int i = 0; i < size; i++)\n\t\t\tret[i] = nextDouble();\n\t\treturn ret;\n\t}\n\t\n\tString nextLine() throws IOException {\n\t\tst = new StringTokenizer(\"\");\n\t\treturn in.readLine();\n\t}\n\t\n\tboolean EOF() throws IOException {\n\t\twhile (!st.hasMoreTokens()) {\n\t\t\tString s = in.readLine();\n\t\t\tif (s == null)\n\t\t\t\treturn true;\n\t\t\tst = new StringTokenizer(s);\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/*************************************************************** \n\t * Output \n\t **************************************************************/\n\tvoid printRepeat(String s, int count) {\n\t\tfor (int i = 0; i < count; i++)\n\t\t\tout.print(s);\n\t}\n\t\n\tvoid printArray(int[] array) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) out.print(' ');\n\t\t\tout.print(array[i]);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\tvoid printArray(long[] array) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) out.print(' ');\n\t\t\tout.print(array[i]);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\tvoid printArray(double[] array) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) out.print(' ');\n\t\t\tout.print(array[i]);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\tvoid printArray(double[] array, String spec) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) out.print(' ');\n\t\t\tout.printf(Locale.US, spec, array[i]);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\tvoid printArray(Object[] array) {\n\t\tif (array == null || array.length == 0)\n\t\t\treturn;\n\t\tboolean blank = false;\n\t\tfor (Object x : array) {\n\t\t\tif (blank) out.print(' '); else blank = true;\n\t\t\tout.print(x);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\t@SuppressWarnings(\"rawtypes\")\n\tvoid printCollection(Collection collection) {\n\t\tif (collection == null || collection.isEmpty())\n\t\t\treturn;\n\t\tboolean blank = false;\n\t\tfor (Object x : collection) {\n\t\t\tif (blank) out.print(' '); else blank = true;\n\t\t\tout.print(x);\n\t\t}\n\t\tout.println();\n\t}\n\t\n\t/*************************************************************** \n\t * Utility\n\t **************************************************************/\n\tstatic String memoryStatus() {\n\t\treturn (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory() >> 20) + \"/\" + (Runtime.getRuntime().totalMemory() >> 20) + \" MB\";\n\t}\n\t\n\tstatic void checkMemory() {\n\t\tSystem.err.println(memoryStatus());\n\t}\n\t\n\tstatic long prevTimeStamp = Long.MIN_VALUE;\n\t\n\tstatic void updateTimer() {\n\t\tprevTimeStamp = System.currentTimeMillis();\n\t}\n\t\n\tstatic long elapsedTime() {\n\t\treturn (System.currentTimeMillis() - prevTimeStamp);\n\t}\n\t\n\tstatic void checkTimer() {\n\t\tSystem.err.println(elapsedTime() + \" ms\");\n\t}\n\t\n\tstatic void chk(boolean f) {\n\t\tif (!f) throw new RuntimeException(\"Assert failed\");\n\t}\n\t\n\tstatic void chk(boolean f, String format, Object ... args) {\n\t\tif (!f) throw new RuntimeException(String.format(format, args));\n\t}\n\t\n\tstatic void log(String format, Object ... args) {\n\t\tif (writeLog) System.err.println(String.format(Locale.US, format, args));\n\t}\n}\n\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new A().run(); }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException\n        in = new Input(System.in);\n        out = new Output(System.out);\n        run();\n        out.close();\n        System.exit(0);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n\n        int num = Integer.parseInt(st.nextToken());\n        int k = Integer.parseInt(st.nextToken());\n\n        st = new StringTokenizer(br.readLine(), \" \");\n\n        if (k == 1) System.out.println(num); \n        else {\n            Set<Integer> set = new TreeSet<Integer>();\n            Set<Integer> bad = new TreeSet<Integer>();\n            int sel;\n            \n            int[] arr = new int[num];\n            for (int i = 0; i < num; i++) {\n                arr[i] = Integer.parseInt((st.nextToken()));\n            }\n\n            shuffle(arr);\n            Arrays.sort(arr);\n\n            for (int i = 0; i < num; i++) {\n                sel = arr[i];\n                if (sel % k != 0) {\n                    set.add(sel);\n                    bad.add(sel * k);\n                }\n                if (!bad.contains(sel) && !set.contains(sel / k)) {\n                    bad.add(sel * k);\n                    set.add(sel);\n                }\n            }\n\n            System.out.println(set.size()); \n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new CF274A().solve();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Template().run(); \n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        int numCnt = (int) nextLong();\n        long k = nextLong();\n        parent = new int[numCnt];\n        for (int i = 0; i < parent.length; i++) {\n            parent[i] = i;\n        }\n        Long[] ar=new Long[numCnt];\n        for (int i = 0; i < numCnt; i++) {\n            ar[i] = nextLong();\n        }\n        Arrays.sort(ar);\n        for (int i = 0; i < ar.length; i++) {\n            long req = ar[i] * k;\n            int l=0,h=ar.length,mid;\n            while(l<h){\n                mid=l+(h-l)/2;\n                if(ar[mid]<req){\n                    l=mid+1;\n                }else{\n                    h=mid;\n                }\n            }\n            if(l<ar.length&&ar[l]==req){\n                union(i,l);\n            }\n        }\n        int[] count = new int[numCnt];\n        for (int i = 0; i < parent.length; i++) {\n            count[find(i)]++;\n        }\n        int res = 0;\n        for (int i = 0; i < numCnt; i++) {\n            res += (int) ((count[i] + 1) / 2.0);\n        }\n        System.out.println(res);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMain.args = args;\n\t\tnew Thread(null, new Main(), \"MyRunThread\", 1 << 27).start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tStringTokenizer tok1 = new StringTokenizer(br.readLine());\n\t\tfinal int n = Integer.parseInt(tok1.nextToken());\n\t\tfinal long k = Integer.parseInt(tok1.nextToken());\n\t\t\n\t\tStringTokenizer tok2 = new StringTokenizer(br.readLine());\n\t\tint[] array = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarray[i] = Integer.parseInt(tok2.nextToken());\n\t\t}\n\t\t\n\t\tint size = n;\n\t\t\n\t\tArrays.sort(array);\n\t\t\n\t\tboolean[] skip = new boolean[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(skip[i]){\n\t\t\t\tsize--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tlong input = array[i];\n\t\t\tinput *= k;\n\t\t\tif(input > MAX){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tfinal int pos = Arrays.binarySearch(array, (int)(input));\n\t\t\tif(pos >= 0 && !skip[pos]){\n\t\t\t\tskip[pos] = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(size);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        long k = input.nextInt();\n        long[] nums = new long[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = input.nextInt();\n        }\n        Arrays.sort(nums);\n        Set<Long> wrong = new TreeSet<Long>();\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (!wrong.contains(nums[i])) {\n                try {\n                    wrong.add(nums[i] * k);\n                } catch (Exception e) {\n                }\n                ans++;\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new A(), \"\", 64*1024*1024).start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tThread t = new Thread(null, new Solution(), \"\", (1 << 26));\n\t\tt.start();\n\t\tt.join();\n\t\tif (uncaught != null) {\n\t\t\tthrow uncaught;\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tSet<Integer> set = new TreeSet<Integer>();\n\t\tFastScanner s = new FastScanner();\n\t\tn = s.nextInt();\n\t\tk = s.nextInt();\n\t\t\n\t\tint[] a = new int[n];\n\t\tfor(int i=0; i<n; i++){\n\t\t\ta[i] = s.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\t\n\t\tfor(int i=0; i<n; i++){\n\t\t\tif(a[i]%k !=0){\n\t\t\t\tset.add(a[i]);\n\t\t\t}else{\n\t\t\t\tif(!set.contains(a[i]/k)){\n\t\t\t\t\tset.add(a[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(set.size());\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n    \n        Scanner in= new Scanner(System.in);\n        int n=in.nextInt();\n        int k=in.nextInt();\n        \n        Long a[] =new Long[n];\n        Hashtable<Long, Boolean> hash= new Hashtable<Long, Boolean>();\n        \n        \n        for (int i=0;i< n;i++){\n            a[i]=in.nextLong();\n            \n        }\n        Arrays.sort(a);\n        \n        for (int i=0;i<n;i++){\n            if (!hash.containsKey(a[i]) ){\n                hash.put(a[i]*k, true);\n            }\n            \n        }\n        System.out.println(hash.size());\n        \n        \n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A();\n\t\texit();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] a = new int[n];\n        List<Integer> b = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++)\n        {\n            a[i] = sc.nextInt();\n            b.add(a[i]);\n        }\n        Collections.sort(b);\n        int c = 0;\n        for (int i = 0; i < n; i++)\n        {\n            if (a[i] != b.get(i)) c++;\n        }\n        if (c == 0 || c == 2)\n        {\n            System.out.println(\"YES\");\n        }\n        else\n        {\n            System.out.println(\"NO\");\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tThread t = new Thread(null, new Main(), \"\", 128 * 1024 * 1024);\n\t\tt.start();\n\t\tt.join();\n\t\tif (uncaught != null) {\n\t\t\tthrow uncaught;\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tLocale.setDefault(Locale.US);\n\t\tnew Solution().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tnew Thread(null, new A(), \"\", 128 * (1L << 20)).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        int testCount = 1;\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in=new Scanner(new InputStreamReader(System.in));\n        PrintWriter out=new PrintWriter(System.out);\n        int n=in.nextInt();\n        Vector<Integer> mas=new Vector<Integer>();\n        Vector<Integer> mas2=new Vector<Integer>();\n        int index=-1;\n        boolean res=false;\n        for(int i=0; i<n; i++){\n            mas.add(in.nextInt());\n            if(i!=0 && mas.get(i)<mas.get(i-1)){\n                index=i-1;\n                break;\n            }\n        }\n        if(index==-1) res=true;\n        else{\n            int min=mas.get(index+1);\n            int minIndex=index+1;\n            for(int i=index+2; i<n; i++){\n                mas.add(in.nextInt());\n                if(mas.get(i)<=min){\n                    min=mas.get(i);\n                    minIndex=i;\n                    \n                }\n            }\n            \n            mas2.addAll(mas);\n            mas.set(minIndex, mas.get(index));\n            mas.set(index, min);\n            int o=mas.hashCode();\n            Collections.sort(mas);\n            int nw=mas.hashCode();\n            res=nw==o;\n        }\n        if(!res){\n            mas=mas2;\n            for(int i=n-1; i>=0; i--){\n                if(i!=n-1 && mas.get(i)>mas.get(i+1)){\n                    index=i+1;\n                    break;\n                }\n            }\n            if(index==-1) res=true;\n            else{\n                int max=mas.get(index-1);\n                int maxIndex=index-1;\n                for(int i=index-1; i>=0; i--){\n                    if(mas.get(i)>=max){\n                        max=mas.get(i);\n                        maxIndex=i;\n                    }\n                }\n                mas.set(maxIndex, mas.get(index));\n                mas.set(index, max);\n                int o=mas.hashCode();\n                Collections.sort(mas);\n                int nw=mas.hashCode();\n                res=res||nw==o;\n            }\n        }\n        if(res) out.println(\"YES\");\n        else out.println(\"NO\");\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Parserdoubt12 s = new Parserdoubt12(System.in);\n        \n        int n = s.nextInt();\n        \n        int a[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = s.nextInt();\n        }\n        \n        int copy[] = a.clone();\n        Arrays.sort(a);\n        int count = 0;\n        for (int i = 0; i < copy.length; i++) {\n            if(a[i] != copy[i]) count++;\n        }\n        if(count <= 2) System.out.println(\"YES\");\n        else System.out.println(\"NO\");\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\t// long start = System.currentTimeMillis();\n\t\t// long end = System.currentTimeMillis();\n\t\t// System.out.println(\" Execution time was \"+(end-start)+\" ms.\");\n\n\t\tScanner kb = new Scanner(System.in);\n\t\tint n = kb.nextInt();\n\t\tint a[] = new int[n];\n\t\tint b[] = new int[n];\n\t\tfor(int i = 0;i<n;i++){\n\t\t\ta[i]=kb.nextInt();\n\t\t\tb[i]=a[i];\n\t\t}\n\t\tArrays.sort(a);\n\t\tint count = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(a[i]!=b[i])count++;\n\t\t}\n\t\tif(count<=2)\n\t\t\tSystem.out.println(\"YES\");\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception { // {{{\n        new A();\n    } // }}}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// new Thread(null, new Solution(), \"1\", 1 << 28).start();\n\t\t(new Solution()).run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new LittleElephantAndProblem();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tlong time = System.currentTimeMillis();\n\t\tLocale.setDefault(Locale.US);\n\t\tnew A().run();\n\t\tSystem.err.printf(\"%.3f\\n\", 1e-3 * (System.currentTimeMillis() - time));\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// new Thread(null, new Solution(), \"1\", 1 << 28).start();\n\t\t(new Solution()).run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException\n        new Thread(null, new A(), \"\", 1 << 22).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException\n        new Thread(null, new A(), \"\", 1 << 22).start();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException{\n        st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int n = nextInt();\n        Sort[]a = new Sort[n+1];\n        int[]b = new int[n+1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = new Sort();\n            a[i].val = nextInt();\n            b[i] = a[i].val;\n        }\n        Arrays.sort(a, 1, n+1);\n        int k1 = 0, k2 = 0;\n        for (int i = 1; i <= n; i++) {\n            if (b[i] != a[i].val) {\n                if (k1==0)\n                    k1 = i;\n                else if (k2==0)\n                    k2 = i;\n                else {\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n        }\n        if (k1==0)\n            System.out.println(\"YES\");\n        else if (k2==0)\n            System.out.println(\"NO\");\n        else {\n            if (b[k1]==a[k2].val && b[k2]==a[k1].val)\n                System.out.println(\"YES\");\n            else\n                System.out.println(\"NO\");\n        }\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().run();\n        IOFast.out.flush();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException\n        new Thread(null, new A(), \"\", 1 << 22).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tnew C().solution();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new c().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        int testCount = 1;\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) {\n\t\tScanner in =new Scanner(System.in);\n\t\tint N = in.nextInt();\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\tArrayList<Integer> sort = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tint k = in.nextInt();\n\t\t\tlist.add(k);\n\t\t\tsort.add(k);\n\t\t}\n\t\t\n\t\tCollections.sort(sort);\n\t\t\n\t\tint count = 0;\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tif(sort.get(i).intValue() != list.get(i).intValue())\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count != 2 && count != 0)\n\t\t\tSystem.out.println(\"NO\");\n\t\telse\n\t\t\tSystem.out.println(\"YES\");\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMain.args = args;\n\t\tnew Thread(null, new Main(), \"MyRunThread\", 1 << 26).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[]args) throws Exception\n        new Solution().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int a[]=new int[n];\n        int b[]=new int[n];\n        for(int i=0;i<n;i++)\n        {\n            a[i]=in.nextInt();\n            b[i]=a[i];\n        }\n        Arrays.sort(b);\n        int count=0;\n        for(int i=0;i<n;i++)\n            if(a[i]!=b[i])\n                count++;\n        if(count<=2)\n            System.out.println(\"YES\");\n        else\n            System.out.println(\"NO\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int i = Integer.parseInt(in.readLine());\n        numbers = new int[i];\n        numbersCopy = new int[i];\n        StringTokenizer stringTokenizer = new StringTokenizer(in.readLine());\n        int numOutOfPlace = 0;\n        for (int j = 0; j < i; j++) {\n            numbers[j] = Integer.parseInt(stringTokenizer.nextToken());\n            numbersCopy[j] = numbers[j];\n        }\n        Arrays.sort(numbers);\n        for (int j = 0; j < i; j++) {\n            if (numbers[j] != numbersCopy[j]) {\n                numOutOfPlace++;\n                if (numOutOfPlace > 2) {\n                    break;\n                }\n            }\n        }\n        if (numOutOfPlace == 0 || numOutOfPlace == 2) {\n            System.out.println(\"YES\");\n        } else {\n            System.out.println(\"NO\");\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt(); \n\t\tint temp;\n\t\tArrayList<Integer> a2 = new ArrayList<Integer>();\n\t\tArrayList<Integer> a1 = new ArrayList<Integer>();\n\t\tint count = 0;\n\t\tint temp1,temp2;\n\t\t\n\t\tfor(int i= 0; i < n ; i++){\n\t\t\ttemp = input.nextInt();\n\t\t\ta2.add(temp);\n\t\t\ta1.add(temp);\n\t\t}\n\t\tCollections.sort(a2);\n\t\tinput.close();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ttemp1 = a2.get(i);\n\t\t\ttemp2 = a1.get(i);\n\t\t\tif(temp1 != temp2){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count==2 || count==0){\n\t\t\tSystem.out.println(\"YES\");\n\t\t}else{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[]args) throws Exception\n        new Solution().run();\n    }\n", "complexity": "nlogn"}
{"code": "   public static void main(String[] args) {\n      new Main().run();\n   }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Codeforces_R136_Div1_A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        MyScanner in = new MyScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[]args) throws Exception\n        new Solution().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew A2().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(in.readLine());\n        StringTokenizer st = new StringTokenizer(in.readLine());\n        int[] A = new int[n];\n        Integer[] B = new Integer[n];\n        for(int i=0; i<n; i++) {\n            A[i] = Integer.parseInt(st.nextToken());\n            B[i] = A[i];\n        }\n        Collections.sort(Arrays.asList(B));\n\n        int cnt = 0;\n        for(int i=0; i<n; i++)\n            if(A[i] != B[i])\n                cnt++;\n        System.out.println(cnt <= 2 ? \"YES\" : \"NO\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        //Scanner in = new Scanner(System.in);\n        StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n        PrintWriter out = new PrintWriter(System.out);\n        in.nextToken();\n        int n = (int) in.nval;\n        int[] a = new int[n];\n        for (int i=0; i<n; i++) {\n            in.nextToken();\n            a[i] = (int) in.nval;\n        }\n        int[] b = Arrays.copyOf(a, n);\n        Arrays.sort(a);\n        int k = 0;\n        for (int i=0; i<n; i++) {\n            if (a[i] != b[i]) k++;\n        }\n        if (k==0 || k==2)\n            out.println(\"YES\");\n        else\n            out.println(\"NO\");\n        out.flush();\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        sb = new StringBuilder();\n        n = sc.nextInt();\n        TotalTime = sc.nextLong();\n        problems = new Problem[n];\n        for (int i = 0; i < n; i++) {\n            problems[i] = new Problem (sc.nextInt(), sc.nextLong(), i);\n        }\n        Arrays.sort(problems);\n        long num = -1;\n        long high = n;\n        long low = 0;\n        int iter = 0;\n        while (high - low > 1) {\n            num = (high + low) / 2;\n            if (test(num, false)) {\n                low = num;\n            }\n            else {\n                high = num;\n            }\n        }\n        if (test(high, false))\n            num = high;\n        else\n            num = low;\n        test(num, true);\n        System.out.print(sb);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        BIT invert = new BIT(n+5);\n        BIT neg = new BIT(n+5);\n        long res = 0;\n        int[] arr = new int[n];\n        boolean[] has = new boolean[n+1];\n        long num1 = 0;\n        for(int i = 0; i < n; i++) {\n            arr[i] = in.nextInt();\n            if(arr[i] != -1) {\n                res += invert.read(n+5)-invert.read(arr[i]);\n                res %= MOD;\n                invert.update(arr[i], 1);\n                has[arr[i]] = true;\n            } else num1++;\n        }\n        if(num1 == 0) {\n            System.out.println(res);\n            return;\n        }\n        for(int i = 1; i <= n; i++) if(!has[i]) neg.update(i, 1);\n        long invertNum1 = modInv(num1, MOD);\n        res += ((num1*(num1-1))%MOD)*modInv(4, MOD);\n        res %= MOD;\n        long cnt = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == -1) {\n                cnt++;\n                continue;\n            }\n            res += (((neg.read(n+5)-neg.read(arr[i]))*cnt)%MOD)*invertNum1;\n            res %= MOD;\n        }\n        cnt = 0;\n        for(int i = n-1; i >= 0; i--) {\n            if(arr[i] == -1) {\n                cnt++;\n                continue;\n            }\n            res += (((neg.read(arr[i]))*cnt)%MOD)*invertNum1;\n            res %= MOD;\n        }\n        System.out.println(res);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        try {\n            new Main().solve();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ReaderFastIO in = new ReaderFastIO(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DConcatenatedMultiples solver = new DConcatenatedMultiples();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int N = sc.nextInt();\n        long dest = sc.nextLong();\n        long max = (long)N * ((long)N + 1L) / 2L;\n        if (dest < 2 * N - 1 || dest > max) {\n            out.println(\"No\");\n            out.close();\n            return;\n        }\n        int[] d = new int[N + 1];\n        int[] f = new int[N + 1];\n        int K = 1;\n        for (; K <= N; K++) {\n            long dep = 1L, cnt = 1L, c = 1L;\n            long t = 1L;\n            while (cnt < N) {\n                c = c * K;\n                dep++;\n                t += (dep * Math.min(c, N - cnt));\n                cnt += c;\n            }\n            if (t <= dest) break;\n        }\n        out.println(\"Yes\");\n        int dep = 1; long cnt = 1L, c = 1L;\n        long t = 1L;\n        d[1] = 1;\n        while (cnt < N) {\n            dep++; c = c * K; \n            long x = (long)N - cnt;\n            int min;\n            if (c >= x) min = (int)x;\n            else min = (int)c;\n            d[dep] = min;\n            t += (dep * Math.min(c, (long)N - cnt)); cnt += c;\n        }\n        dest -= t;\n        int curDep = dep; int nextDep = dep + 1;\n        while (dest > 0) {\n            if (d[curDep] <= 1) curDep--;\n            d[curDep]--;\n            long next = Math.min(nextDep++, dest + curDep);\n            dest -= ((int)next - curDep);\n            d[(int)next]++;\n        }\n        int first = 1;\n        for (int i = 2; i < nextDep; i++) {\n            int p = 0, fn = first - d[i - 1] + 1;\n            for (int j = first + 1; j <= first + d[i]; j++) {\n                if (p == K) {\n                    fn++; p = 0;\n                }\n                p++; f[j] = fn;\n            }\n            first += d[i];\n        }\n        for (int i = 2; i <= N; i++)\n            out.format(\"%d \", f[i]);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        int[] arr = new int[n];\n        HashMap<Integer, Integer> map = new HashMap<>();\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        for (int i = 0; i < n; i++) {\n            int x = Integer.parseInt(st.nextToken());\n            arr[i] = x;\n            if (!map.containsKey(x)) {\n                map.put(x, 1);\n            } else {\n                map.replace(x, map.get(x) + 1);\n            }\n        }\n        int[] power = new int[31];\n        for (int i = 0; i < 31; i++) {\n            power[i] = 1 << i; // 0 100=4 1000=8 10000=16\n        }\n        int c = 0;\n        for (int i = 0; i < n; i++) {\n        boolean f = false;\n        for (int j = 0; j <= 30; j++) {\n        int check = power[j] - arr[i];\n                if ((map.containsKey(check) && check != arr[i])) {\n                f = true; break;}\n                if((map.containsKey(check) && check == arr[i] && map.get(check) >=2)) {\n                    f = true; break;\n                }\n            }\n            if (!f) {\n                c++;\n            }\n        }\n        System.out.println(c);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = Integer.parseInt(br.readLine());\n\n        ArrayList<String> a = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            a.add(br.readLine());\n        }\n\n        if(solve(n, a)){\n            out.println(\"YES\");\n            for (String s : a) {\n                out.println(s);\n            }\n        }\n        else\n            out.println(\"NO\");\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        a = sc.nextIntArray(n);\n        long inversions = divide(0, n - 1);\n//        out.println(inversions);\n//        System.err.println(Arrays.toString(a));\n        if (n == 5) out.println(\"Petr\");\n        else {\n            if (n % 2 == 0) out.println(inversions % 2 == 0 ? \"Petr\" : \"Um_nik\");\n            else out.println(inversions % 2 != 0 ? \"Petr\" : \"Um_nik\");\n        }\n        out.flush();\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = br.readLine().split(\"\\\\s\");\n        int N = Integer.parseInt(s[0]);\n        int K = Integer.parseInt(s[1]);\n        s = br.readLine().split(\"\\\\s\");\n        int[] arr = new int[N];\n        for(int i=0;i<N;++i) arr[i] = Integer.parseInt(s[i]);\n        solve(N,K,arr);   \n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tif (stdin) {\n\t\t\tbr = new FastScanner();\n\t\t\tpw = new PrintWriter(new OutputStreamWriter(System.out));\n\t\t} else {\n\t\t\tbr = new FastScanner(filename + \".in\");\n\t\t\tpw = new PrintWriter(new FileWriter(filename + \".out\"));\n\t\t}\n\n\t\tSolver solver = new Solver();\n\t\tsolver.solve(br, pw);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[])throws IOException \n\t\tInputStreamReader isr = new InputStreamReader(System.in);\n\t\tBufferedReader  br = new BufferedReader(isr);\n\t\tString[] line = br.readLine().split(\"\\\\W\");\n\n\t\tint n = Integer.parseInt(line[0]);\n\t\tint a = Integer.parseInt(line[1]);\n\t\tint b = Integer.parseInt(line[2]);\n\n\t\tint[] num = new int[n];\n\t\tline = br.readLine().split(\"\\\\W\");\n\n\t\tfor(int i=0;i<n;i++) num[i] = Integer.parseInt(line[i]);\n\n\t\tArrays.sort(num);\n\t\t\n\t\tSystem.out.println(num[b]-num[b-1]);\n\t}\t\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        A problem = new A();\n        problem.solve();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        HomeWorks hw = new HomeWorks();\n        hw.sol();\n        hw.print();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        int n = nextInt(), b = nextInt(), a = nextInt();\n        \n        int[] mas = new int[n];\n        for(int i = 0; i<n; i++) {\n            mas[i] = nextInt();\n        }\n        Arrays.sort(mas);\n        \n        if(mas[a - 1] == mas[a]) {\n            exit(0);\n        }\n        \n        println(mas[a] - mas[a-1]);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[])\n        Scanner S = new Scanner(System.in);\n        int n = S.nextInt();\n        int a = S.nextInt();\n        int b = S.nextInt();\n        int[] A = new int[n];\n        for(int i = 0; i < n; i++)\n            A[i] = S.nextInt();\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < n - i - 1; j++)\n            {\n                if(A[j] < A[j + 1])\n                {\n                    int temp = A[j];\n                    A[j] = A[j + 1];\n                    A[j + 1] = temp;\n                }\n            }\n        \n            System.out.println(A[a - 1] - A[a]);\n        }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String [] args){\n        Scanner in= new Scanner(System.in);\n        int n=in.nextInt();\n        int a=in.nextInt();\n        int b=in.nextInt();\n        int []deals=new int[n];\n        for(int i=0; i<n; i++){\n            deals[i]=in.nextInt();\n        }\n        Arrays.sort(deals);\n        System.out.println(deals[b]-deals[b-1]);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        // TODO Auto-generated method stub\n        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out=new PrintWriter(System.out);\n        int mod=1000000007;\n        String[] input=in.readLine().split(\" \");\n        int n=Integer.parseInt(input[0]);\n        int a=Integer.parseInt(input[1]);\n        int b=Integer.parseInt(input[2]);\n        String[] h=in.readLine().split(\" \");\n        int[] mas=new int[n];\n        for(int i=0; i<n; i++){\n            mas[i]=Integer.parseInt(h[i]);\n        }\n        Arrays.sort(mas);\n        int l=mas[b-1];\n        int r=mas[b];\n        int count=0;\n        if(l==r) count=0;\n        else count=r-l;\n        out.println(count);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString str = br.readLine();\n\t\tString[] strs = str.split(\" \");\n\t\tint n = Integer.parseInt(strs[0]);\n\t\tint a = Integer.parseInt(strs[1]);\n\t\tint b = Integer.parseInt(strs[2]);\n\t\tstr = br.readLine();\n\t\tString[] hs = str.split(\" \");\n\t\tint[] h = new int[hs.length];\n\t\tfor(int i=0;i<hs.length;i++){\n\t\t\th[i] = Integer.parseInt(hs[i]);\n\t\t}\n\t\tArrays.sort(h);\n\t\tif(h[b-1]==h[b]){\n\t\t\tSystem.out.println(0);\n\t\t}else{\n\t\t\tSystem.out.println(h[b]-h[b-1]);\n\t\t}\n\t\t\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().A();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        \n        ArrayList<Integer> l = new ArrayList<Integer>();\n        for (int i = 0 ; i < n; i++) {\n            l.add(sc.nextInt());\n        }\n        Collections.sort(l);\n        \n        int pet = l.get(n - a);\n        int vas = l.get(b - 1);\n        \n        if (pet <= vas) {\n            System.out.println(0);\n        }\n        else System.out.println(pet - vas);     \n        \n        sc.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\tint n = nextInt();\n\t\tint a = nextInt();\n\t\tint b = nextInt();\n\t\tint[] tasks = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ttasks[i] = nextInt();\n\t\t}\n\t\tArrays.sort(tasks);\n\t\texit(tasks[b] - tasks[b-1]);\n\t\t\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint a = scan.nextInt();\n\t\tint b=scan.nextInt();\n\t\tint[] t=new int[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tt[i]=scan.nextInt();\n\t\t}\n\t\tArrays.sort(t);\n\t\tSystem.out.println(t[b]-t[b-1]);\n\t\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew test().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String [] args) {\n        Scanner scanner = new Scanner(System.in);\n        int problemCount = scanner.nextInt();\n        int petrCount = scanner.nextInt();\n        int vasCount = scanner.nextInt();\n        int [] problems = new int[problemCount];\n        for (int i = 0; i < problemCount; i++) {\n            problems[i] = scanner.nextInt();\n            \n\n        }\n        Arrays.sort(problems);\n        System.out.println(-problems[vasCount - 1] + problems[vasCount]);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        in = new Scanner(System.in);\n//      in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n//      in = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n        int n = next();\n        int a = next();\n        int b = next();\n        int k = 0;\n        int i;\n        int[] ar = new int[n];\n        for(i=0;i<n;i++)\n            ar[i]=next();\n        Arrays.sort(ar);\n        k = ar[n-a]-ar[b-1];\n        if(k<0)\n            out.print(0);\n        else out.print(k);\n        out.close();\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int[] h = new int[n];\n        for (int i = 0; i < n; i++)\n            h[i] = sc.nextInt();\n\n        Arrays.sort(h);\n        \n        pw.print(h[b]-h[b-1]);\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\n        new Thread(new Contest169ProblemA()).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[]parts = br.readLine().split(\"\\\\s+\");\n\t\tint n = Integer.parseInt(parts[0]);\n\t\tint a = Integer.parseInt(parts[1]);\n\t\tint b = Integer.parseInt(parts[2]);\n\t\tparts = br.readLine().split(\"\\\\s+\");\n\t\tint[]hard = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\thard[i] = Integer.parseInt(parts[i]);\n\t\t}\n\t\tArrays.sort(hard);\n\t\tSystem.out.println(hard[b]-hard[b-1]);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int testCases = 1;\n        Task solver = new Task();\n        for (int i = 1; i <= testCases; ++i)\n            solver.solve(in, out);\n\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int a = in.nextInt();\n        int b = in.nextInt();\n        \n        int[] h = new int[3000];\n        \n        for(int i = 0; i<n; i++)\n            h[i] = in.nextInt();\n        \n        int l = 0, r = 1000000000, m = 0;\n        int ansl = 0, ansr = 0;\n        \n        while(l<=r){\n            m = (l+r)/2;\n            \n            int ca=0;\n            \n            for(int i = 0;i<n;i++)\n                if (h[i]>m) ca++;\n            \n            if (ca == a) ansl=m;\n            if (ca <= a) r=m-1; else l=m+1;\n        }\n        l = 0; r = 1000000000;\n        while(l<=r){\n            m = (l+r)/2;\n            \n            int ca=0;\n            \n            for(int i = 0;i<n;i++)\n                if (h[i]>m) ca++;\n            \n            if (ca == a) ansr=m;\n            if (ca < a) r=m-1; else l=m+1;\n        }\n        if (ansl == 0 || ansr==0) System.out.print(0); else\n        System.out.print(ansr-ansl+1);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        initTokenizer();\n\n        int n = nextInt();\n        int a = nextInt();\n        int b = nextInt();\n\n        int[] h = new int[n];\n\n        initTokenizer();\n\n        for (int i = 0; i < n; i++) {\n            h[i] = nextInt();\n        }\n\n        Arrays.sort(h);\n\n        System.out.print(h[b] - h[b - 1]);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n        StringTokenizer st;\n\n        st = new StringTokenizer(in.readLine());\n        \n        int n = Integer.parseInt(st.nextToken()),\n            a = Integer.parseInt(st.nextToken()),\n            b = Integer.parseInt(st.nextToken());\n        \n        st = new StringTokenizer(in.readLine());\n        \n        ArrayList<Integer> A = new ArrayList<Integer>();\n        \n        for (int i = 0 ; i < n ; i++) {\n            A.add(Integer.parseInt(st.nextToken()));\n        }\n        \n        Collections.sort(A);\n        \n        System.out.println(A.get(b) - A.get(b - 1));\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Start().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Solution(), \"\", 1 << 25).start();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner kb = new Scanner(System.in);\n        int n = kb.nextInt();\n        int a = kb.nextInt();\n        int b = kb.nextInt();\n        int array[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            array[i] = kb.nextInt();\n        }\n        Arrays.sort(array);\n        int k = 0;\n        int t1 = 0;\n        int t2 = 0;\n        for (int i = 0; i < b; i++) {\n            t1= array[i];\n            if(i<n-1){\n                t2=array[i+1];\n                k=t2-t1;\n            }\n            else k=0;\n        }\n        System.out.println(k);\n\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[])throws Exception{\n        br=new BufferedReader(new InputStreamReader(System.in));\n\n        int nm[] = toIntArray();\n        int n = nm[0];\n        int a = nm[1];\n        int b = nm[2];\n        nm=toIntArray();\n        Arrays.sort(nm);\n        int k=nm[b-1];\n        int res=nm[b]-k;\n        System.out.println(res);\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)throws Exception {\n        File _=new File(\"chores.in\");\n        BufferedReader br=_.exists()? new BufferedReader(new FileReader(_)):new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st;\n        String str;\n        \n        st=new StringTokenizer(br.readLine());\n        int n,a,b;\n        n=Integer.parseInt(st.nextToken());\n        a=Integer.parseInt(st.nextToken());\n        b=Integer.parseInt(st.nextToken());\n        \n        ArrayList<Integer> chores=new ArrayList<Integer>();\n        int k;\n        st=new StringTokenizer(br.readLine());\n        for (int i = 0; i < n; i++) {\n            k=Integer.parseInt(st.nextToken());\n            chores.add(k);\n        }\n        Collections.sort(chores);\n        \n        System.out.println(chores.get(b)-chores.get(b-1));\n        \n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int[] hs = new int[n];\n        for(int i = 0; i < n; i++){\n            hs[i] = sc.nextInt();\n        }\n        Arrays.sort(hs);\n        System.out.println(hs[b]-hs[b-1]);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new Scanner(System.in);\n//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n//\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\n        int n = next(), a = next(), b = next();\n        int h[] = new int[n];\n\n        for (int i = 0;i < n;i++) h[i] = next();\n\n        Arrays.sort(h);\n\n        int res = h[b] - h[b-1];\n\n        out.println(res);\n\n        out.println();\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n        String[] data = s.readLine().split(\" \");\n        int n =  Integer.valueOf(data[0]);\n        int a =  Integer.valueOf(data[1]);\n        int b =  Integer.valueOf(data[2]);\n\n        long[] h = new long[n];\n        String[] line = s.readLine().split(\" \");\n        for (int i = 0 ; i < n ; i++) {\n            h[i] = Integer.valueOf(line[i]);\n        }\n        Arrays.sort(h);\n        \n        System.out.println(h[b] - h[b-1]);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        // BufferedReader in = new BufferedReader(new\n        // InputStreamReader(System.in));\n        InputReader in = new InputReader(System.in);\n        int n = in.readInt();\n        int a = in.readInt();\n        int b = in.readInt();\n        Integer[] inp = new Integer[n];\n        for (int i = 0; i < inp.length; i++) {\n            inp[i] = in.readInt();\n        }\n        Arrays.sort(inp);\n        int petya = inp[inp.length-a];\n        int next = inp[inp.length-a-1];\n        int diff = petya - next;\n        System.out.println(diff);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int [] h = new int[n]; \n        for (int i = 0; i < n; i++) {\n            h[i]  = sc.nextInt(); \n        }\n        Arrays.sort(h);\n        System.out.println(h[n-a] - h[b-1]);\n    }\n", "complexity": "nlogn"}
{"code": "   public static void main(String[] args) throws IOException {\n       new Main().run();\n   }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new InputReader(System.in);\n\t\tout = new PrintWriter(System.out);\n\n\t\trun();\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws NumberFormatException,\n        Solver solver = new Solver();\n        solver.open();\n        solver.solve();\n        solver.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int a = in.nextInt();\n        int b = in.nextInt();\n        int[] ar = new int[n];\n        for (int i = 0; i < n; i++)\n            ar[i] = in.nextInt();\n        Arrays.sort(ar);\n        int x1 = ar[b-1];\n        int x2 = ar[b];\n        System.out.println(x2-x1);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        \n        int n = s.nextInt();\n        int a = s.nextInt();\n        int b = s.nextInt();\n        \n        long ar[] = new long[n];\n        for (int i = 0; i < n; i++) {\n            ar[i]=s.nextLong();\n        }\n        Arrays.sort(ar);\n        \n        long ret = 0;\n//      System.out.println(Arrays.toString(ar));\n        if(ar[b]==ar[b-1])\n            System.out.println(\"0\");\n        else {\n            ret = ar[b]-ar[b-1];\n            System.out.println(ret);\n        }\n        \n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[])\tthrows IOException\n\t\tScanner c=new Scanner(System.in);\n\t\tint n=c.nextInt();\n\t\tint a=c.nextInt();\t\t//higher\n\t\tint b=c.nextInt();\t\t//lower\n\t\tint C[]=new int[n];\n\t\tfor(int i=0;i<n;i++) \n\t\t\tC[i]=c.nextInt();\n\t\tArrays.sort(C);\n\t\t//System.out.println(Arrays.toString(C));\n\t\tint petya=C[n-a];\n\t\tSystem.out.println((C[n-a]-C[n-a-1]));\n\t\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tnew Main().execute();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        int[] ar = new int[n];\n        for (int i = 0; i < n; i++) {\n            ar[i] = sc.nextInt();\n        }\n        Arrays.sort(ar);\n        if (ar[b-1] == ar[b ]) {\n            System.out.println(0);\n        } else {\n            System.out.println(ar[b ] - ar[b-1]);\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException\n        new Solution().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        int a = input.nextInt();\n        int b = input.nextInt();\n        int x[] = new int[n];\n        for (int i=0; i<n; i++) x[i]=input.nextInt();\n        Arrays.sort(x);\n        int y[] = new int[n];\n        for (int i=0; i<n; i++) y[i]=x[n-i-1];\n        System.out.println(y[a-1]-y[a]);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(239);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tA solver = new A();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String [] argv)\n\t\tString filePath=null;\n\t\tif(argv.length>0)filePath=argv[0];\n\t\tnew A(filePath);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) { new ayyyyyy(); }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Throwable {\n        sc = new MyScanner();\n        pw = new PrintWriter(System.out);\n\n        n = sc.nextInt();\n        T = sc.nextLong();\n        p = new int[n];\n        l = new int[n];\n        x = new int[n];\n        t = new int[n];\n        adj = new ArrayList[n];\n\n        for (int i = 0; i < n; i++)\n            x[i] = sc.nextInt();\n        for (int i = 0; i < n; i++)\n            t[i] = sc.nextInt();\n        adj[0] = new ArrayList<>();\n        for (int i = 1; i < n; i++) {\n            adj[i] = new ArrayList<>();\n            p[i] = sc.nextInt() - 1;\n            l[i] = sc.nextInt();\n            adj[p[i]].add(i);\n        }\n\n        ftCnt = new long[N];\n        ftSum = new long[N];\n        ans = new long[n];\n\n        dfs(0);\n        pw.println(ans[0]);\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n= sc.nextInt();\n\t\tint k= sc.nextInt();\n\t\tint a[] = new int[n];\n\t\tint d[] = new int[n-1];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ta[i] = sc.nextInt();\n\t\t\tif(i>0)\n\t\t\t\td[i-1] = a[i-1] - a[i];\n\t\t}\n\t\tArrays.sort(d);\n\t\tint t = 0;\n\t\tfor(int i=0;i<k-1;i++)\n\t\t\tt += d[i];\n\t\tSystem.out.println(a[n-1]-a[0]+t);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String ar[]) throws IOException\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer nk=new StringTokenizer(br.readLine());\n        int n=Integer.parseInt(nk.nextToken());\n        int k=Integer.parseInt(nk.nextToken());\n        String st[]=br.readLine().split(\" \");\n        \n        int ans[]=new int[n];\n        int a[]=new int[n];\n        for(int i=0;i<n;i++)\n            ans[i]=Integer.parseInt(st[i]);  \n\n        for(int i=1;i<n;i++)\n            a[i]=ans[i]-ans[i-1];\n        a[0]=-1;\n\n        Arrays.sort(a);\n        int count=0,sum=0;\n        for(int i=0;i<n;i++)\n            if(a[i]<0)\n                count++;\n            else\n                sum=sum+a[i];\n        \n        k=k-count;\n        int i=n-1;\n        while(k>0 && i>=0)\n        {\n            if(a[i]>-1)\n            {\n                sum=sum-a[i];\n                k--;\n            }\n            i--;\n        }\n        System.out.println(sum);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in =new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tarr[i] = in.nextInt();\n\t\tfor(int i = n-1; i > 0; i--)\n\t\t\tarr[i] -= arr[i-1];\n\t\tarr[0] = 0;\n\t\tArrays.sort(arr);\n\t\tlong sum = 0;\n\t\tfor(int i = n-k; i >= 0; i--)\n\t\t\tsum += arr[i];\n\t\tSystem.out.println(sum);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Main().solve();\n    }\n", "complexity": "nlogn"}
{"code": "public static void main(String[] args) throws IOException\n  input.init(System.in);\n  PrintWriter out = new PrintWriter(new PrintStream(System.out));\n  //Scanner input = new Scanner(new File(\"input.txt\"));\n  //PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\n  int n = input.nextInt(), t = input.nextInt();\n  int res = 2;\n  Cottage[] data = new Cottage[n];\n  int[] xs = new int[n], as = new int[n];\n  for(int i = 0; i<n; i++)\n  {\n    data[i] = new Cottage(input.nextInt(), input.nextInt());\n  }\n  Arrays.sort(data);\n  for(int i = 0; i<n; i++)\n  {\n    xs[i] = data[i].x;\n    as[i] = data[i].a;\n  }\n  for(int i = 0; i<n-1; i++)\n  {\n    if(2*(xs[i+1]-xs[i]) == 2*t+as[i]+as[i+1]) res++;\n    else if(2*(xs[i+1]-xs[i]) > 2*t+as[i]+as[i+1]) res+=2;\n  }\n  out.println(res);\n\n  out.close();\n}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]){\n\t\tFileInputStream fileInputStream;\n\t\tFileOutputStream fileOutputStream;\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tif (readFromFile){\n\t\t\ttry{\n\t\t\t\tfileInputStream = new FileInputStream(new File(fileInputName));\n\t\t\t\tfileOutputStream = new FileOutputStream(new File(fileOutputName));\n\t\t\t}catch (FileNotFoundException e){\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\tPrintWriter out = new PrintWriter((readFromFile)?fileOutputStream:outputStream);\n\t\tInputReader in  = new InputReader((readFromFile)?fileInputStream:inputStream);\n\t\t\n\t\tSolver s = new Solver(in, out);\n\t\ts.solve();\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "        public static void main(String[] args) throws IOException {\n            Run run = new Run();\n            Thread thread = new Thread(run);\n            thread.run();\n        }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().solve();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) {\n\t\tVillage v = new Village();\n\t\tv.solve();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tint n = nextInt(), t = nextInt();\n\t\t\n\t\tint[] x = new int[n];\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tx[i] = nextInt();\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\t\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tboolean left = true, right = true;\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\tif (x[j] < x[i] && a[i] + 2*t + a[j] >= 2*Math.abs(x[i] - x[j])) left = false;\n\t\t\t\telse if (x[j] > x[i] && a[i] + 2*t + a[j] > 2*Math.abs(x[i] - x[j])) right = false;\n\t\t\tif (left) ans++;\n\t\t\tif (right) ans++;\n\t\t}\n\t\t\n\t\tout.println(ans);\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        String[] in = sc.nextLine().split(\" \");\n        int n = Integer.parseInt(in[0]);\n        int t = Integer.parseInt(in[1]);\n\n        int[] coor = new int[n];\n        int[] side = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            in = sc.nextLine().split(\" \");\n            coor[i] = Integer.parseInt(in[0]);\n            side[i] = Integer.parseInt(in[1]);\n        }\n\n        quickSort(coor, 0, n - 1, side);\n\n        int count = 2;\n        double dist;\n        for (int i = 0; i < n - 1; i++) {\n            dist = (coor[i + 1] - coor[i]) - (double)(side[i + 1] + side[i]) / 2.0;\n            if (dist > t) {\n                count += 2;\n            } else if (dist == t) {\n                count += 1;\n            }\n        }\n\n        System.out.println(count);\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int t = sc.nextInt();\n        int[] c = new int[n];\n        int[] a = new int[n];\n        for (int i=0; i<n; i++){\n            c[i] = sc.nextInt();\n            a[i] = sc.nextInt();\n        }\n        sort(c, a);\n        int res = 1;\n        double prev = Integer.MIN_VALUE;\n        for(int i=0; i<c.length; i++){\n            if (c[i]-a[i]/2d - prev >=t){\n                res++;\n            }\n            if (i!=c.length-1 && c[i+1]-a[i+1]/2d-(c[i]+a[i]/2d)>t ){\n                res++;\n            }\n            prev = c[i] +a[i]/2d;\n        }\n        System.out.println(res);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().solve();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Houses().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]){\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        int t=sc.nextInt();\n        double nm[][]=new double[n][2];\n        int a=0;\n        int b=0;\n        for(int i=0;i<n;i++){\n            a=sc.nextInt();\n            b=sc.nextInt();\n            nm[i][0]=a-(double)b/2;\n            nm[i][1]=a+(double)b/2;\n        }\n\n\n        Arrays.sort(nm, new ArrayColumnComparator(1));\n\n        int sum=0;\n        for(int i=0;i<n-1;i++){\n            if(nm[i+1][0]-nm[i][1]==t)\n                sum++;\n            else if(nm[i+1][0]-nm[i][1]>t){\n                sum+=2;\n            }\n\n        }\n\n        System.out.println(sum+2);\n    }\n", "complexity": "nlogn"}
{"code": "  public static void main(String[] args){\n    new Main().run();\n  }\n", "complexity": "nlogn"}
{"code": "public static void main(String a[])throws IOException\nBufferedReader b=new BufferedReader(new InputStreamReader(System.in));\nint k=0,i=0,j=0,n=0,p=0,t=0;\nString s;\ns=b.readLine();\nStringTokenizer c=new StringTokenizer(s);\nn=Integer.parseInt(c.nextToken());\nk=Integer.parseInt(c.nextToken());\nint d[]=new int[n];\nint e[]=new int[n];\nfor(i=0;i<n;i++)\n{\ns=b.readLine();\nStringTokenizer z=new StringTokenizer(s);\nd[i]=Integer.parseInt(z.nextToken());\ne[i]=Integer.parseInt(z.nextToken());\n}\nfor(i=0;i<n-1;i++)\n{\nfor(j=i+1;j<n;j++)\n{\nif(d[j]<d[i])\n{\nt=d[j];\nd[j]=d[i];\nd[i]=t;\nt=e[j];\ne[j]=e[i];\ne[i]=t;\n}\n}\n}\nfor(i=0;i<n-1;i++)\n{\nif(((d[i+1]-e[i+1]/2.0)-(d[i]+e[i]/2.0))>k)\np+=2;\nif(((d[i+1]-e[i+1]/2.0)-(d[i]+e[i]/2.0))==k)\np++;\n}\nSystem.out.print(p+2);\n}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tint N = INT(), T = INT();\n\t\tHouse[] list = new House[N];\n\t\tfor(int i = 0;i<N;i++) {\n\t\t\tlist[i] = new House(INT(),INT());\n\t\t}\n\t\tArrays.sort(list);\n\t\tint cnt = 2;\n\t\tfor(int i = 1;i<N;i++) {\n\t\t\tint room = list[i].center-list[i-1].center;\n\t\t\tif(2*T<2*room-list[i].side-list[i-1].side)cnt += 2;\n\t\t\telse if(2*T==2*room-list[i].side-list[i-1].side)cnt++;\n\t\t}\n\t\tSystem.out.println(cnt);\n\t\t\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt(), t = 2 * scanner.nextInt();\n        if (1 == n) {\n            System.out.println(2);\n        } else {\n            int rez = 2;\n            ArrayList<Entity> list = new ArrayList<Entity>();\n            for (int i = 0; i < n; i++) {\n                list.add(new Entity(scanner.nextInt(), scanner.nextInt()));\n            }\n            Collections.sort(list);\n            for (int i = 1; i < n; i++) {\n                int num = 2 * (list.get(i).x - list.get(i - 1).x)\n                        - list.get(i).a - list.get(i - 1).a;\n                if (t < num) {\n                    rez += 2;\n                } else if (t == num) {\n                    rez++;\n                }\n            }\n            System.out.println(rez);\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Abra().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint t = in.nextInt() * 2;\n\t\tList<Pair> l = new ArrayList<Pair>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint c = in.nextInt() * 2;\n\t\t\tint a = in.nextInt();\n\t\t\tl.add(new Pair(c - a, c + a));\n\t\t}\n\t\tCollections.sort(l);\n\t\tint ret = 2;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif (l.get(i).x - l.get(i-1).y > t)\n\t\t\t\tret += 2;\n\t\t\telse if (l.get(i).x - l.get(i-1).y == t)\n\t\t\t\tret += 1;\n\t\t}\n\t\tSystem.out.println(ret);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists()) {\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t\t}\n\t\t} catch (SecurityException e) {\n\t\t}\n\t\t\n\t\tnew Main().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new CodeforcesA()).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String... args) {\n        new CottageVillage();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException\t{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint t = Integer.parseInt(st.nextToken());\n\t\tState[] s = new State[n];\n\t\tfor(int i = 0; i < n; i++)\t{\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\ts[i] = new State(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n\t\t}\n\t\tArrays.sort(s);\n\t\tint num = 2;\n\t\tfor(int i = 1; i < s.length; i++)\t{\n\t\t\tint dist = s[i].x - s[i-1].x;\n\t\t\tdist *= 2;\n\t\t\tint size = s[i].d + s[i-1].d;\n\t\t\tsize += 2 * t;\n\t\t\tif(dist == size)\n\t\t\t\tnum++;\n\t\t\telse if(dist > size)\n\t\t\t\tnum += 2;\n\t\t}\n\t\tSystem.out.println(num);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint t = sc.nextInt() * 2;\n\t\tHouse[] hs = new House[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\ths[i] = new House(sc.nextInt()*2, sc.nextInt());\n\t\t}\n\t\tArrays.sort(hs);\n\t\tint res = 2;\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tint curr = hs[i+1].x - hs[i].x - hs[i+1].s - hs[i].s;\n\t\t\tif (curr > t) res += 2;\n\t\t\tif (curr == t) res += 1;\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        new _P015A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner s = new Scanner(System.in);\n\t\t\n\t\tint n = s.nextInt();\n\t\tint t = s.nextInt();\n\t\tTreeMap<Integer,Integer> map = new TreeMap<Integer,Integer>();\n\t\t\n//\t\tint x = 0 ;\n\t\twhile(s.hasNextInt())\n\t\t{\n\t\t\tint i = s.nextInt();\n\t\t\tint j = s.nextInt();\n\t\t\tmap.put(i,j);\n//\t\t\tx++;\n//\t\t\tif(x == 2)\n//\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tint count = 0;\n\t\tdouble left = -100000;\n\t\tdouble right;\n\t\tint size;\n\t\tfor(Integer i : map.keySet())\n\t\t{\n\t\t\tsize = map.get(i);\n\t\t\tright = (double)i - (double)size/2.0;\n\t\t\t\n\t\t\tif(right - left > t)\n\t\t\t{\n\t\t\t\tcount+=2;\n\t\t\t}\n\t\t\tif(right - left == t)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tleft = (double)i + (double)size/2.0;\n\t\t}\n\t\t\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint size=sc.nextInt();\n\t\tint side=sc.nextInt();\n\t\tArrayList<Pair> lis=new ArrayList<Pair>();\n\t\tfor(int x=0;x<size;x++)\n\t\t{\n\t\t\tlis.add(new Pair(sc.nextInt(), sc.nextInt()));\n\t\t\t\n\t\t}\n\t\tCollections.sort(lis);\n\t\tint count=2;\n\t\tfor(int x=0;x<lis.size()-1;x++)\n\t\t{\n\t\t\tPair a=lis.get(x);\n\t\t\tPair b=lis.get(x+1);\n\t\t\tdouble na=a.x+a.len/2;\n\t\t\tdouble nb=b.x-b.len/2;\n\t\t\t//System.out.println(na+\" \"+nb);\n\t\t\tif(na<nb)\n\t\t\t{\n\t\t\t\tdouble dif=Math.abs(nb-na);\n\t\t\t\tif(dif==side)count++;\n\t\t\t\telse if(dif>side)count+=2;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n//\t\tin = new Scanner(System.in);\n\t\tout = new PrintWriter(System.out);\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\n\t\tint n = next();\n\t\tint t = 2*next();\n\n\t\tint[] x = new int[n];\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tx[i] = 2* next() + 2000;\n\t\t\ta[i] = next();\n\t\t}\n\n\t\tint[] srt = new int[n];\n\t\tfor (int i = 0; i < n; i++) srt[i] = 10000 * x[i] + a[i];\n\t\tArrays.sort(srt);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tx[i] = srt[i] / 10000;\n\t\t\ta[i] = srt[i] % 10000;\n\t\t}\n\n\t\tint answ = 2;\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tif (x[i + 1] - x[i] > a[i] + a[i + 1] + t) answ++;\n\t\t\tif (x[i + 1] - x[i] >= a[i] + a[i + 1] + t) answ++;\n\t\t}\n\n\t\tout.println(answ);\n\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tBeta15PA temp = new Beta15PA();\n\t\ttemp.solve();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tString[] line = s.readLine().split(\" \");\n\t\tint n = Integer.valueOf(line[0]);\n\t\tint ht = Integer.valueOf(line[1]);\n\t\t\n\t\tint[][] house = new int[n][2];\n\t\tSet<Integer> candidates = new HashSet<Integer>(); \n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tString[] data = s.readLine().split(\" \");\n\t\t\thouse[i][0] = Integer.valueOf(data[0]) * 2;\n\t\t\thouse[i][1] = Integer.valueOf(data[1]);\n\t\t\tcandidates.add(house[i][0] - house[i][1] - ht);\n\t\t\tcandidates.add(house[i][0] + house[i][1] + ht);\n\t\t}\n\t\t\n\t\tint ans = 0;\n\t\tfor (int p : candidates) {\n\t\t\tint f = p - ht;\n\t\t\tint t = p + ht;\n\t\t\tboolean isok = true;\n\t\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\t\tif (house[i][0] + house[i][1] <= f) {\n\t\t\t\t} else if (house[i][0] - house[i][1] >= t) {\n\t\t\t\t} else {\n\t\t\t\t\tisok = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isok) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tout.println(ans);\n\t\tout.flush();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n //       Scanner sc = new Scanner(new FileInputStream(\"/home/camoroh13/NetBeansProjects/JavaApplication1/src/input.txt\"));\n        int n = sc.nextInt();\n        int t = sc.nextInt();\n//        int[][] h = new int[n][2];\n        TreeMap<Integer, Integer> h = new TreeMap<Integer, Integer>();\n        for (int i=0; i < n; i++) {\n            int key = sc.nextInt();\n            h.put(key, sc.nextInt());\n        }\n\n        int ans = 2;\n        Integer lastKey = h.firstKey();\n        Integer last = h.get(lastKey);\n        h.remove(lastKey);\n        for (int i=1; i < n; i++) {\n            int key = h.firstKey();\n            int val = h.get(key);\n            //System.out.println(Math.abs(key-val*1.0/2 - (lastKey + last*1.0/2)) + \"-\" + key + \"-\"+val);\n            if (Math.abs(key-val*1.0/2 - (lastKey + last*1.0/2)) == t) {\n                ans++;\n            } else if (Math.abs(key-val*1.0/2 - (lastKey + last*1.0/2))  > t) {\n                ans += 2;\n            }\n            lastKey = key;\n            last = val;\n            h.remove(lastKey);\n        }\n\n        System.out.println(ans);\n        \n        sc.close();\n    }\n", "complexity": "nlogn"}
{"code": "        public static void main(String[] args){\n                new Solution15A().run();\n        }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\n\t\tint n = scanner.nextInt();\n\t\tint t = scanner.nextInt();\n\t\tscanner.nextLine();\n\n\t\tint[] x = new int[n];\n\t\tint[] a = new int[n];\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tx[i] = scanner.nextInt();\n\t\t\ta[i] = scanner.nextInt();\n\t\t\tscanner.nextLine();\n\t\t}\n\n\t\tscanner.close();\n\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (x[i] > x[j]) {\n\t\t\t\t\tswap(x, i, j);\n\t\t\t\t\tswap(a, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tint countPositions = 2;\n\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tdouble left = x[i - 1] + a[i - 1] * 1.0 / 2;\n\t\t\tdouble right = x[i] - a[i] * 1.0 / 2;\n\t\t\tdouble length = right - left;\n\n\t\t\tif (length == (double) t) {\n\t\t\t\tcountPositions++;\n\t\t\t} else if (length > t) {\n\t\t\t\tcountPositions += 2;\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(countPositions);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int t = in.nextInt();\n        if(n == 1) {\n            System.out.println(2);\n            return;\n        }\n        house[] all = new house[n];\n        for (int i = 0; i < all.length; i++) {\n            all[i] = new house(in.nextInt(),in.nextInt());\n        }\n        Arrays.sort(all);\n        \n        int count = 0;\n        for (int i = 0; i < all.length; i++) {\n            double left = all[i].center - (all[i].side*1.0/2);\n            double right = all[i].center + (all[i].side*1.0/2);\n            if(i == 0) {\n                count++;\n                double left2 = all[i+1].center - (all[i+1].side*1.0/2);\n                if(right+t<left2) {\n                    count++;\n                }\n                continue;\n                \n            }\n            if(i == all.length-1) {\n                count++;\n                double right2 = all[i-1].center + (all[i-1].side*1.0/2);\n                if(left-t>= right2) {\n                    count++;\n                }\n                continue;\n            }\n            double left2 = all[i+1].center - (all[i+1].side*1.0/2);\n            double right2 = all[i-1].center + (all[i-1].side*1.0/2);\n            \n            if(right+t<left2) {\n                count++;\n            }\n            if(left-t>=right2)\n                count++;\n        }\n        System.out.println(count);\n        \n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner inScanner = new Scanner(System.in);\n        int n = inScanner.nextInt();\n        int t = inScanner.nextInt();\n        House[] houses = new House[n];\n        for (int i = 0; i < n; i++)\n            houses[i] = new House(inScanner.nextInt(), inScanner.nextInt());\n        Arrays.sort(houses);\n        int sum = 2;\n        for (int i = 1; i < n; i++) {\n            double space = houses[i].leftX - houses[i - 1].rightX;\n            if (space >= t)\n                sum++;\n            if (space > t)\n                sum++;\n        }\n        System.out.println(sum);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), t = in.nextInt();\n\t\tint[] centers = new int[n], sides = new int[n];\n\t\tfor (int x = 0; x < n; x++) {\n\t\t\tcenters[x] = in.nextInt();\n\t\t\tsides[x] = in.nextInt();\n\t\t}\n\t\tint count = 0;\n\n\t\tbig: for (int x = -4000; x <= 4000; x++) {\n\t\t\tboolean touch = false;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tint d = 2*centers[i] - x;\n\t\t\t\td = d > 0 ? d : -d;\n\t\t\t\tint s = t + sides[i];\n\t\t\t\tif (s == d) {\n\t\t\t\t\ttouch = true;\n\t\t\t\t} else if (s > d) {\n\t\t\t\t\tcontinue big;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (touch)\n\t\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[]args){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int t = sc.nextInt();\n        double [] left = new double[n];\n        double [] right = new double[n];\n        for (int i = 0; i<n; i++){\n            int x = sc.nextInt();\n            int a = sc.nextInt();\n            double l = x - (double)a/2;\n            double r = x + (double)a/2;\n            left[i] = l;\n            right[i] = r;\n        }\n        int answer = 2;\n        quickSort(left, right, 0, n-1);\n        for (int i = 0; i<n-1; i++){\n            if (left[i+1] - right[i] == t){\n                answer++;   \n            }\n            if (left[i+1] - right[i] > t){\n                answer += 2;\n            }\n        }\n        System.out.println(answer);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext()){\n\t\t\tint counter = 0;\n\t\t\tint numbCottages = scan.nextInt();\n\t\t\tint t = scan.nextInt();\n\t\t\tHouse[] cottages = new House[numbCottages];\n\t\t\tfor(int i =0; i<numbCottages; i++){\n\t\t\t\tint centre = scan.nextInt();\n\t\t\t\tint length = scan.nextInt();\n\t\t\t\tdouble beginning = centre - ((double)length)/2;\n\t\t\t\tdouble end = centre + ((double)length)/2;\n\t\t\t\tcottages[i]= new House(beginning, end);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(cottages);\n\t\t\t\n\t\t\t//check righthand side of first cottage\n\t\t\t\n\t\t\t/*\n\t\t\tif(cottages[0].end + t < cottages[1].beginning)\n\t\t\t\tcounter++;\n\t\t\t//check lefthand side of last cottage\n\t\t\t\n\t\t\tif(cottages[numbCottages-1].beginning -t > cottages[numbCottages-2].end)\n\t\t\t\tcounter++;\n\t\t\t\t\n\t\t\t\t*/\n\t\t\t\n\t\t\tfor(int i =0; i<numbCottages-1; i++){\n\t\t\t\t\n\t\t\t\tif(cottages[i].end + t <= cottages[i+1].beginning){\n\t\t\t\t\tcounter++;\n//\t\t\t\t\tSystem.out.println(counter + \"left hand\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cottages[i+1].beginning - t >= cottages[i].end){\n\t\t\t\t\tcounter++;\n//\t\t\t\t\tSystem.out.println(counter + \"right hand\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs((cottages[i].end + t - cottages[i+1].beginning)) < 1e-8){\n\t\t\t\t\tcounter--;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(counter+2);\n\t\t\t\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int t = sc.nextInt();\n        List<Point> houses = new ArrayList<Point>();\n        for (int i = 0; i < n; i++) {\n            int x = sc.nextInt();\n            int a = sc.nextInt();\n            houses.add(new Point(x, a));\n        }\n        Collections.sort(houses, new Comparator<Point>() {\n            \n            @Override\n            public int compare(Point o1, Point o2) {\n                return ((Integer) o1.x).compareTo(o2.x);\n            }\n        });\n        int pos = 2;\n        for (int i = 0; i < n - 1; i++) {\n            double end = houses.get(i).x + (houses.get(i).y+0.0)/2;\n            double start = houses.get(i+1).x - (houses.get(i+1).y+0.0)/2;\n            //System.out.println(\"end \"+end+\" start \"+start);\n            double diff = start-end;\n            //System.out.println(\"diff\");\n            if (Math.abs(diff-t) < 0.0000001) {\n                pos++;\n            }\n            if (diff > t) {\n                pos += 2;\n            }\n        }\n        System.out.println(pos);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Solution();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tdouble w = in.nextDouble();\n\t\tint tot = 2;\n\t\tInterval[] houses = new Interval[n];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tdouble center = in.nextDouble();\n\t\t\tdouble wid = in.nextDouble();\n\t\t\thouses[i] = new Interval(center-wid/2,center+wid/2);\n\t\t}\n\t\tArrays.sort(houses);\n\t\tfor(int i=1; i<n; i++) {\n\t\t\tdouble dist = houses[i].s - houses[i-1].e;\n\t\t\tif(dist+1e-6 >= w) {\n\t\t\t\ttot+=2;\n\t\t\t\tif(Math.abs(w-dist) < 1e-6)\n\t\t\t\t\ttot--;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(tot);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint t = scan.nextInt();\n\t\tList<Double> coords = new ArrayList<Double>();\n\t\twhile (n-- > 0) {\n\t\t\tdouble x = scan.nextDouble();\n\t\t\tdouble a = scan.nextDouble() / 2;\n\t\t\tcoords.add(x - a);\n\t\t\tcoords.add(x + a);\n\t\t}\n\t\tCollections.sort(coords);\n\t\tint count = 2;\n\t\tChoiceFormat f = new ChoiceFormat(\"-1#0|0#1|0<2\");\n\t\tfor (int i = 1; i < coords.size()-2; i+=2) {\n\t\t\tcount += new Integer(f.format(coords.get(i+1)-coords.get(i)-t));\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new R015A().process();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        ProblemA a = new ProblemA();\n        Scanner in = new Scanner(System.in);\n        while(in.hasNextInt()){\n            int n = in.nextInt();\n            double t = in.nextDouble();\n            for (int k=0;k<n;k++){\n                houses.add(a.new Point2(in.nextDouble(),in.nextDouble()));\n            }\n            Collections.sort(houses);\n            int ans = 2;\n            for (int k=0;k<n-1;k++){\n                Point2 cur = houses.get(k);\n                Point2 next = houses.get(k+1);\n                double dist = (next.x - next.y/2) - (cur.x + cur.y/2);\n                if (dist == t) ans ++;\n                if (dist > t ) ans+=2;\n            }\n            System.out.println(ans);\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint t = sc.nextInt();\n\t\tArrayList<HS> list = new ArrayList<HS>();\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlist.add(new HS(sc.nextInt(),sc.nextInt()));\n\t\t}\n\t\t\n\t\tCollections.sort(list);\n\t\t\n\t\tint count = 0;\n\t\t\n\t\tif(n >= 1)\n\t\t\tcount = 2;\n\t\t\n\t\tfor(int i = 0; i < list.size() - 1; i++){\n\t\t\tdouble d = Math.abs(list.get(i + 1).x - list.get(i).x);\n\t\t\td -= ((1.0*list.get(i).a/2.0) + (1.0*list.get(i + 1).a/2.0));\n\t\t\tif ((d >= t)&& ((d-t) <= 0.00000001)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(d > t){\n\t\t\t\tcount+= 2;\n\t\t\t} \n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String... args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        \n        TreeMap<Integer, Integer> tm = new TreeMap<Integer, Integer>();\n        while (n-->0) {\n            tm.put(sc.nextInt(), sc.nextInt());\n        }\n        \n        int cnt=2, x=0, a=0; \n        double diff=0;\n        for(Map.Entry<Integer, Integer> e : tm.entrySet()) {\n            if (x!=0 || a!=0) {\n                diff = Math.abs(e.getKey()-x-e.getValue()*0.5-a*0.5); \n                if (diff-k>0) cnt+=2;\n                else if (diff-k==0) cnt++;\n            }\n            x=e.getKey();\n            a=e.getValue();\n        }\n        System.out.println(cnt);\n    }\n", "complexity": "nlogn"}
{"code": "", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        int t = in.nextInt();\n        Cottage[] cottages = new Cottage[n];\n\n        for (int i = 0; i < n; i++)\n            cottages[i] = new Cottage(in.nextInt(), in.nextInt());\n\n        Arrays.sort(cottages);\n\n        int ans = 2;\n\n        for (int i = 1; i < cottages.length; i++) {\n            double diff = cottages[i].x - cottages[i - 1].x - cottages[i - 1].a / 2 - cottages[i].a / 2;\n            ans = Math.abs(diff - t) < e ? ans + 1 : diff - t < -e ? ans : ans + 2;\n        }\n\n        out.print(ans);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        new Thread(new A()).start();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)\n        new Thread(new Main()).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tString[] fline = in.nextLine().split(\"\\\\s+\");\n\t\tint N = Integer.parseInt(fline[0]);\n\t\tint T = Integer.parseInt(fline[1]);\n\n\t\tHouse[] houses = new House[N];\n\t\tfor (int i = 0; i < N; i++){\n\t\t\tString[] house = in.nextLine().split(\"\\\\s+\");\n\t\t\thouses[i] = new House(Double.parseDouble(house[0]), Double.parseDouble(house[1]));\n\t\t}\n\t\tArrays.sort(houses);\n\t\tint count = 2;\n\t\tfor (int i = 0; i < houses.length - 1; i++){\n\t\t\t//how many positions between house i and house i + 1 can we fit in?\n\t\t\tdouble diff = houses[i+1].getLeft() - houses[i].getRight();\n\t\t\tif (diff < T) continue;\n\t\t\tif (Math.abs(diff - T) < 1E-12) count++;\n\t\t\telse count+=2;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String... args) {\n\t\tMain main = new Main();\n\t\tmain.start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner scan = new Scanner(System.in);\n\n\t\twhile(scan.hasNextInt())\n\t\t{\n\n\t\tint n = scan.nextInt();\n\t\tint k = scan.nextInt();\n\n\t\tPoint[] a = new Point[n];\n\n\t\tfor(int i=0;i < n;i++)\n\t\t{\n\t\t\ta[i] = new Point();\n\t\t\ta[i].x = scan.nextInt();\n\t\t\ta[i].y = scan.nextInt();\n\t\t}\n\n\t\tArrays.sort(a, cmp);\n\n\t\tint rtn = 0;\n\n\t\tArrayList<Double> ans = new ArrayList<Double>();\n\n\t\tfor(int i=0;i < n;i++)\n\t\t{\n\t\t\t//Left\n\t\t\tdouble lb = a[i].x - (a[i].y / 2.0) - k;\n\t\t\tdouble pos = lb + (k/2.0);\n\t\t\tboolean good = true;\n\n\t\t\tfor(int j=0;j < ans.size();j++)\n\t\t\t\tif(Math.abs(ans.get(j) - pos) < 0.0000001)\n\t\t\t\t\tgood = false;\n\n\n\t\t\tif(good && (i == 0 || a[i-1].x + (a[i-1].y / 2.0) <= lb))\n\t\t\t{\n\t\t\t\trtn++;\n\t\t\t\tans.add(pos);\n\t\t\t}\n\n\t\t\tdouble rb = a[i].x + (a[i].y / 2.0) + k;\n\t\t\tpos = rb - (k/2.0);\n\t\t\tgood = true;\n\n\t\t\tfor(int j=0;j < ans.size();j++)\n\t\t\t\tif(Math.abs(ans.get(j) - pos) < 0.0000001)\n\t\t\t\t\tgood = false;\n\n\t\t\tif(good && (i == n-1 || a[i+1].x - (a[i+1].y / 2.0) >= rb))\n\t\t\t{\n\t\t\t\trtn++;\n\t\t\t\tans.add(pos);\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(rtn);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) \n        Scanner in=new Scanner(System.in);\n        int n=in.nextInt();\n        int t=in.nextInt();\n        \n        House[] houses=new House[n];\n        \n        for(int i=0;i<n;i++)\n        {\n            houses[i]=new House(in.nextInt(),in.nextInt());\n        }\n        \n        Arrays.sort(houses);\n        \n        int count=2;\n        \n        for(int i=0;i<n-1;i++)\n        {\n            double start=houses[i].x+(double)houses[i].a/2;\n            double end=houses[i+1].x-(double)houses[i+1].a/2;\n            \n            if(end-start==t)\n        \tcount++;\n            if(end-start>t)\n        \tcount+=2;\n        }\n        \n        System.out.println(count);\n \n    }\n", "complexity": "nlogn"}
{"code": "", "complexity": "nlogn"}
{"code": "\tpublic static void main( String[] args )\n\t\tint n = in.nextInt(), t = 2*in.nextInt(), h[][] = new int[n][2], ans = 2;\n\t\tfor( int i = 0; i < n; i++ )\n\t\t{\n\t\t\th[i][0] = 2*in.nextInt();\n\t\t\th[i][1] = in.nextInt();\n\t\t}\n\t\tArrays.sort( h, new Comp() );\n\t\tfor( int i = 1; i < n; i++ )\n\t\t{\n\t\t\tint d = (h[i][0]-h[i][1])-(h[i-1][0]+h[i-1][1]);\n\t\t\tif( d > t ) ans += 2;\n\t\t\telse if( d == t ) ans++;\n\t\t}\n\t\tSystem.out.println( ans );\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(final String[] args) {\n\t\tfinal Scanner in = new Scanner(System.in);\n\t\tfinal PrintWriter out = new PrintWriter(System.out);\n\n\t\ttry {\n\t\t\tfinal int n = in.nextInt();\n\t\t\tfinal int t = in.nextInt();\n\n\t\t\tfinal House[] h = new House[n];\n\t\t\tfor (int i = 0; i < h.length; ++i) {\n\t\t\t\th[i] = new House();\n\t\t\t\th[i].x = in.nextInt();\n\t\t\t\th[i].a = in.nextInt();\n\t\t\t}\n\n\t\t\tArrays.sort(h, new Comparator<House>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(final House o1, final House o2) {\n\t\t\t\t\treturn Integer.valueOf(o1.x).compareTo(o2.x);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tint ans = 2;\n\t\t\tfor (int i = 1; i < n; ++i) {\n\t\t\t\tfinal int dspace = 2 * h[i].x - h[i].a\n\t\t\t\t\t\t- (2 * h[i - 1].x + h[i - 1].a);\n\t\t\t\tif (dspace == 2 * t) {\n\t\t\t\t\t++ans;\n\t\t\t\t} else if (dspace > 2 * t) {\n\t\t\t\t\tans += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tout.println(ans);\n\n\t\t} finally {\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tint n = nextInt(), t = nextInt() * 2;\n\t\tint[][] a = new int[n][2];\n\t\tfor (int i=0; i<n; i++) {\n\t\t\ta[i][0] = nextInt() * 2;\n\t\t\ta[i][1] = nextInt() * 2;\n\t\t}\n\t\t\n\t\tArrays.sort(a, new Comparator<int[]>() {\n\t\t\tpublic int compare(int[] a, int[] b) {\n\t\t\t\treturn a[0]>b[0]?1:a[1]<b[1]?-1:0;\n\t\t\t}\n\t\t});\n\t\t\n\t\tint s = 2;\n\t\t\n\t\tfor (int i=0; i<n-1; i++) {\n\t\t\tint g = (a[i+1][0]-a[i][0])-(a[i+1][1]+a[i][1])/2;\n\t\t\tif (g > t) s += 2;\n\t\t\tif (g == t) s+= 1;\n\t\t}\n\t\tout.println(s);\n\t\t\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\n\t\t\tString[] s = in.readLine().split(\" \");\n\t\t\tint n = Integer.parseInt(s[0]);\n\t\t\tint t = Integer.parseInt(s[1]) * 2;\n\t\t\t\n\t\t\tint[] walls = new int[n*2]; \n\t\t\t\n\t\t\tfor (int i=0; i<n; i++)\n\t\t\t{\n\t\t\t\ts = in.readLine().split(\" \");\n\t\t\t\tint x = Integer.parseInt(s[0]) * 2;\n\t\t\t\tint a = Integer.parseInt(s[1]);\n\t\t\t\twalls[i*2] = x-a;\n\t\t\t\twalls[i*2+1] = x+a;\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(walls);\n\t\t\t\n\t\t\tint count = 2;\n\t\t\t\n\t\t\tfor (int i=1; i<n*2-2; i+=2) {\n\t\t\t\tint space = walls[i+1] - walls[i]; \n\t\t\t\tif ( space == t)\n\t\t\t\t\tcount += 1;\n\t\t\t\telse if ( space > t)\n\t\t\t\t\tcount += 2;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println (count);\n\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)\n        new village().solve();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String [] args) throws IOException\n\t\tnew Thread(null, new A(), \"\", 1 << 20).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int t = sc.nextInt();\n        Sort[]a = new Sort[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = new Sort();\n            a[i].x = sc.nextInt();\n            a[i].a = sc.nextInt();\n        }\n        Arrays.sort(a);\n        int ans = 2;\n        for (int i = 1; i < n; i++) {\n            double d = a[i].x-a[i].a / 2.0-a[i-1].x-a[i-1].a / 2.0;\n            if (d==t)\n                ans++;\n            else if (d > t)\n                ans += 2;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main (String [] args)\n\n        Scanner scan = new Scanner(System.in);\n\n        int n = scan.nextInt(), t = scan.nextInt();\n\n        TreeMap<Integer,Integer> hm = new TreeMap<Integer, Integer>();\n\n        for (int i = 0; i < n; i++) hm.put(scan.nextInt(),scan.nextInt());\n\n        int _x = 0, _a = 0, res = 2;\n\n        boolean started = false;\n\n        for (Integer key : hm.keySet())\n        {\n\n            if (!started)\n            {\n                _x = key;\n                _a = hm.get(_x);\n                started = true;\n                continue;\n            }\n\n            if (key - _x - ((Integer)hm.get(key) + _a)/2.0 > t) res +=2;\n            else if (key - _x - ((Integer)hm.get(key) + _a)/2.0 == t) res++;\n\n            _x = key;\n            _a = hm.get(_x);\n\n        }\n\n        System.out.println(res);\n\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = nextInt();\n        double t = nextInt();\n        Sort[] p = new Sort[n];\n\n        for (int i = 0; i < n; i++) {\n            p[i] = new Sort();\n            p[i].x = nextInt();\n            p[i].a = nextInt();\n        }\n        int ans = 2;\n        Arrays.sort(p);\n        for (int i = 1; i < p.length; i++) {\n            double k = p[i].x - p[i].a / 2.0 - p[i - 1].x - p[i - 1].a / 2.0;\n            if (t == k)\n                ans++;\n            else if (k > t)\n                ans += 2;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)\n\t\t(new CottageVillage()).main();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner in=new Scanner(System.in);\n\t\tint n=in.nextInt();\n\t\tint t=in.nextInt();\n\t\tpt[] P=new pt[n];\n\t\tfor (int i=0; i<n; ++i)\n\t\t\tP[i]=new pt(in.nextInt(), in.nextInt());\n\t\tArrays.sort(P);\n\t\tint res=2;\n\t\tfor (int i=0; i+1<n; ++i)\n\t\t{\n\t\t\tdouble d=P[i+1].x-P[i].x-P[i+1].a/2.-P[i].a/2.;\n\t\t\tif (Math.abs(d-t) <= 1e-11)\n\t\t\t\t++res;\n\t\t\telse if (d>t)\n\t\t\t\tres+=2;\n\t\t}\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint t = sc.nextInt();\n\t\tint[][] xa = new int[n][2];\n\t\tfor(int i=0; i<n; ++i) {\n\t\t\txa[i][0] = sc.nextInt();\n\t\t\txa[i][1] = sc.nextInt();\n\t\t}\n\t    Arrays.sort(xa, new Comparator<int[]>(){\n            @Override\n            public int compare(int[] a0, int[] a1){\n                return a0[0]-a1[0];\n            }\n        });\n\t\t  int ans=2;\n\t        for(int i=0; i<n-1; i++){\n\t            int s=(xa[i+1][0]*2-xa[i+1][1])-(xa[i][0]*2+xa[i][1]);\n\t            if(s>t*2){\n\t                ans+=2;\n\t            }else if(s==t*2){\n\t                ans++;\n\t            }\n\t        }\n\t        System.out.println(ans+\"\");\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main( String args[] )\n        class SquareHouse implements Comparable<SquareHouse>\n        {\n            public SquareHouse( double posLeft, double sideLen )\n            { \n                _posLeft = posLeft;\n                _sideLen = sideLen;\n            }\n\n            public double posLeft()\n            { return _posLeft; }\n\n            public double posRight()\n            { return _posLeft + _sideLen; }\n\n            public int compareTo( SquareHouse house )\n            {\n                double dist = _posLeft - house.posLeft();\n                if ( dist < 0 )\n                    return -1;\n                else if ( dist > 0 )\n                    return 1;\n                else return 0;\n            }\n\n            private double _posLeft;\n            private double _sideLen;\n        }\n\n        Scanner scanner = new Scanner( System.in );\n\n        // Read the header\n        final int nHouses    = scanner.nextInt();\n        final double sideLen = scanner.nextDouble();\n\n        ArrayList<SquareHouse> houses = new ArrayList<SquareHouse>();\n\n        // Read the houses\n        for ( int iHouse = 0; iHouse < nHouses; ++iHouse )\n        {\n            double pos  = scanner.nextDouble();\n            double size = scanner.nextDouble();\n            double posLeft = pos - size / 2.0;\n            houses.add( new SquareHouse( posLeft, size ) );\n        }\n\n        // Sort the houses\n        Collections.sort( houses );\n\n        int nPositions = 2;\n        for ( int iHouse = 0; iHouse < nHouses - 1; ++iHouse )\n        {\n            double space = houses.get( iHouse + 1 ).posLeft() - houses.get( iHouse ).posRight();\n            if ( sideLen < space )\n                nPositions += 2;\n            else if ( sideLen == space )\n                nPositions++;\n        }\n\n        out.println( nPositions );\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new TaskA()).start();\n//\t\tnew Template().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A15().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main( String[] Args )\n        Scanner scan = new Scanner( System.in );\n        int numHouses = scan.nextInt();\n        int side = scan.nextInt() * 2;\n\n        ArrayList<Integer> sides = new ArrayList<Integer>();\n        for ( int x = 0; x < numHouses; x++ )\n        {\n            int c = scan.nextInt() * 2;\n            int s = scan.nextInt();\n\n            int l = c - s;\n            int r = c + s;\n\n            int li = Collections.binarySearch( sides, l );\n            int ri = Collections.binarySearch( sides, r );\n\n            if ( li >= 0 && ri >= 0 )\n            {\n                sides.remove( li );\n                sides.remove( li );\n            }\n            else if ( li >= 0 )\n                sides.set( li, r );\n            else if ( ri >= 0 )\n                sides.set( ri, l );\n            else\n            {\n                sides.add( -li - 1, r );\n                sides.add( -li - 1, l );\n            }\n        }\n\n        int possibilities = 2;\n        for ( int x = 1; x < sides.size() - 1; x += 2 )\n            if ( sides.get( x + 1 ) - sides.get( x ) > side )\n                possibilities += 2;\n            else if ( sides.get( x + 1 ) - sides.get( x ) == side )\n                possibilities += 1;\n\n        System.out.println( possibilities );\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tint n = nextInt(),\n\t\t\tt = nextInt(),\n\t\t\tx[] = new int[n],\n\t\t\ta[] = new int[n];\n\t\t\n\t\tfor (int i=0; i<n; i++){\n\t\t\tx[i] = nextInt();\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\t\n\t\tfor (int i=0; i<n-1; i++)\n\t\t\tfor (int j=i+1; j<n; j++)\n\t\t\t\tif (x[i] > x[j]){\n\t\t\t\t\tint p = x[i]; x[i] = x[j]; x[j] = p;\n\t\t\t\t\t\tp = a[i]; a[i] = a[j]; a[j] = p;\n\t\t\t\t}\n\t\t\n\t\tdouble l[] = new double[n];\n\t\tdouble r[] = new double[n];\n\t\tfor (int i=0; i<n; i++){\n\t\t\tl[i] = x[i]-a[i]/2.0;\n\t\t\tr[i] = x[i]+a[i]/2.0;\n\t\t}\n\t\t\n\t\tint res = 2;\n\t\tfor (int i=1; i<n; i++){\n\t\t\tif (Math.abs(l[i]-r[i-1]-t) < 0.000001) res++;\n\t\t\telse if (l[i]-r[i-1] > t) res += 2;\n\t\t}\n\t\t\n\t\tout.println(res);\n\t\tout.flush();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Solution();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        \n        int n = r.nextInt();\n        int t = r.nextInt();\n        \n        House[] a = new House[n];\n        for(int i = 0; i < n; i++){\n            double c = r.nextInt();\n            double l = r.nextInt();\n            a[i] = new House(c-l/2, l);\n        }\n        \n        Arrays.sort(a);\n        \n        int res = 0;\n        for(int i = 0; i < n-1; i++){\n            double dist = a[i+1].s - (a[i].s+a[i].l);\n            \n            if(Math.abs(dist - t) < eps)res++;\n            else if(dist > t)res += 2;\n        }\n        \n        System.out.println(res+2);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\tString out = \"\";\n\t\tString[] p = br.readLine().split(\"[ ]\");\n\t\tint n = Integer.valueOf(p[0]);\n\t\tdouble t = Double.valueOf(p[1]);\n\t\t\n\t\tint offset = 5000;\n\t\tboolean[] flags = new boolean[offset+5000];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint[] q = toIntArray(br.readLine());\n\t\t\tint c = 2*q[0];\n\t\t\tfor(int j=-q[1];j<q[1];j++){\n\t\t\t\tflags[c+offset+j] = true;\n\t\t\t\t//~ System.out.println(c+offset+j);\n\t\t\t}\n\t\t}\n\t\tint buf = 0;\n\t\tint last = -1;\n\t\tint index = 0;\n\t\tfor(;index<flags.length;index++){\n\t\t\tif(flags[index]){\n\t\t\t\tif(last==-1){\n\t\t\t\t\tbuf++;\n\t\t\t\t}else{\n\t\t\t\t\t//~ System.out.println(last);\n\t\t\t\t\t//~ System.out.println(index);\n\t\t\t\t\tif(Math.abs(index-last-(2*t+1))<1e-10) buf++;\n\t\t\t\t\telse if(index-last>2*t+1) buf+=2;\n\t\t\t\t}\n\t\t\t\tlast = index;\n\t\t\t}\n\t\t}\n\t\tbuf ++;\n\t\tout = \"\"+buf+\"\\r\\n\";\n\t\tbw.write(out,0,out.length());\n\t\tbr.close();\n\t\tbw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException\n\t\tCottageVillage t = new CottageVillage();\n\t\tt.solve();\n\t\tt.finalize();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew a().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        new ProblemA_15().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer split = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(split.nextToken());\n        double t = Double.parseDouble(split.nextToken());\n\n        House[] xaxis = new House[n];\n\n        for (int i = 0; i < n; i++) {\n            split = new StringTokenizer(in.readLine());\n            xaxis[i] = new House(Double.parseDouble(split.nextToken()), Double.parseDouble(split.nextToken()));\n        }\n        Arrays.sort(xaxis);\n        int count = 2;\n        for (int i = 0; i < xaxis.length - 1; i++) {\n            double free = (xaxis[i + 1].getX() - xaxis[i + 1].getSize() / 2.0) - (xaxis[i].getX() + xaxis[i].getSize() / 2.0);\n            if (free / t == 1.0) {\n                count++;\n            } else if (free / t > 1.0) {\n                count += 2;\n            }\n        }\n\n        System.out.println(count);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n    Scanner cin = new Scanner(System.in);\n    int ret = 2, del;\n    int n = cin.nextInt();\n    int t = cin.nextInt() * 2;\n    node = new Node[n];\n    for (int i = 0; i < n; i++) {\n        int x = cin.nextInt();\n        int a = cin.nextInt();\n        node[i] = new Node(x * 2 - a, x * 2 + a);\n    }\n    Arrays.sort(node);\n    for (int i = 1; i < n; i++) {\n        del = node[i].l - node[i - 1].r;\n        if (del > t) {\n        ret += 2;\n        } else if (del == t) {\n        ret++;\n        }\n    }\n    System.out.println(ret);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tScanner sc = new Scanner(System.in/*new File(\"input.txt\")*/);\n\t\tint n = sc.nextInt(), t = sc.nextInt(), x, a, kol = 2;\n\t\tArrayList<Double> al = new ArrayList<Double>();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tx = sc.nextInt();\n\t\t\ta = sc.nextInt();\n\t\t\tal.add(x - a/2.);\n\t\t\tal.add(x + a/2.);\t\n\t\t}\n\t\tCollections.sort(al);\n\t\tdouble d0 = 0; int k = 0, kn = al.size();\n\t\tfor(Double d: al)\n\t\t{\n\t\t\tif (k == 2)\n\t\t\t{\n\t\t\t\tif (d-d0>t) kol+=2; else\n\t\t\t\tif (d-d0==t) kol++;\n\t\t\t\td0 = d;\n\t\t\t\tk = 1;\t\t\n\t\t\t} else \n\t\t\t{\n\t\t\t\tk++;\n\t\t\t\td0 = d;\n\t\t\t}\t\t\t\n\t\t} \n\t\tSystem.out.print(kol);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new BetaRound15_A()).start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner scan = new Scanner(System.in);\n\n\t\twhile(scan.hasNextInt())\n\t\t{\n\n\t\tint n = scan.nextInt();\n\t\tint k = scan.nextInt();\n\n\t\tPoint[] a = new Point[n];\n\n\t\tfor(int i=0;i < n;i++)\n\t\t{\n\t\t\ta[i] = new Point();\n\t\t\ta[i].x = scan.nextInt();\n\t\t\ta[i].y = scan.nextInt();\n\t\t}\n\n\t\tArrays.sort(a, cmp);\n\n\t\tint rtn = 0;\n\n\t\tArrayList<Double> ans = new ArrayList<Double>();\n\n\t\tfor(int i=0;i < n;i++)\n\t\t{\n\t\t\t//Left\n\t\t\tdouble lb = a[i].x - (a[i].y / 2.0) - k;\n\t\t\tdouble pos = lb + (k/2.0);\n\t\t\tboolean good = true;\n\n\t\t\tfor(int j=0;j < ans.size();j++)\n\t\t\t\tif(Math.abs(ans.get(j) - pos) < 0.0000001)\n\t\t\t\t\tgood = false;\n\n\n\t\t\tif(good && (i == 0 || a[i-1].x + (a[i-1].y / 2.0) <= lb))\n\t\t\t{\n\t\t\t\trtn++;\n\t\t\t\tans.add(pos);\n\t\t\t}\n\n\t\t\tdouble rb = a[i].x + (a[i].y / 2.0) + k;\n\t\t\tpos = rb - (k/2.0);\n\t\t\tgood = true;\n\n\t\t\tfor(int j=0;j < ans.size();j++)\n\t\t\t\tif(Math.abs(ans.get(j) - pos) < 0.0000001)\n\t\t\t\t\tgood = false;\n\n\t\t\tif(good && (i == n-1 || a[i+1].x - (a[i+1].y / 2.0) >= rb))\n\t\t\t{\n\t\t\t\trtn++;\n\t\t\t\tans.add(pos);\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(rtn);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint t = scan.nextInt();\n\t\tList<Double> coords = new ArrayList<Double>();\n\t\twhile (n-- > 0) {\n\t\t\tdouble x = scan.nextDouble();\n\t\t\tdouble a = scan.nextDouble() / 2;\n\t\t\tcoords.add(x - a);\n\t\t\tcoords.add(x + a);\n\t\t}\n\t\tCollections.sort(coords);\n\t\tint count = 2;\n\t\tChoiceFormat f = new ChoiceFormat(\"-1#0|0#1|0<2\");\n\t\tfor (int i = 1; i < coords.size()-2; i+=2) {\n\t\t\tcount += new Integer(f.format(coords.get(i+1)-coords.get(i)-t));\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int t = in.nextInt() * 2;\n        Point[] A = new Point[n];\n        for (int i = 0; i < n; i++) {\n            int center = in.nextInt() * 2;\n            int side = in.nextInt();\n            A[i] = new Point(center - side, center + side);\n        }\n        Arrays.sort(A, new Comparator<Point>() {\n            public int compare(Point x, Point y) {\n                return x.x - y.x;\n            }\n        });\n        int ans = 2;\n        for (int i = 1; i < n; i++) {\n            if (A[i].x - A[i - 1].y > t)\n                ans += 2;\n            else if (A[i].x - A[i - 1].y == t)\n                ans++;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int houses = sc.nextInt();\n        int size = sc.nextInt();\n        hizzy[] array = new hizzy[houses];\n        long total =2;\n        for(int a=0;a<houses;a++)array[a]=new hizzy(sc.nextInt(),sc.nextInt());\n        Arrays.sort(array);\n        for(int a=0;a<houses-1;a++){\n            double L = array[a].loc+array[a].size/2;\n            double R = array[a+1].loc-array[a+1].size/2;\n            if(R-L>size)total+=2;\n            else if((R-L)==size)total++;\n        }\n        System.out.println(total);\n    }   \n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) {\n\t\tVillage v = new Village();\n\t\tv.solve();\n\t}\n", "complexity": "nlogn"}
{"code": "   public static void main(String[] args)\n      new A(new Scanner(System.in));\n   }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Thread(new Main()).start();\n    }   \n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tA p = new A();\n\t\tp.solve();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main( String[] args )\n\t\tint n = in.nextInt(), t = 2*in.nextInt(), h[][] = new int[n][2], ans = 2;\n\t\tfor( int i = 0; i < n; i++ )\n\t\t{\n\t\t\th[i][0] = 2*in.nextInt();\n\t\t\th[i][1] = in.nextInt();\n\t\t}\n\t\tArrays.sort( h, new Comp() );\n\t\tfor( int i = 1; i < n; i++ )\n\t\t{\n\t\t\tint d = (h[i][0]-h[i][1])-(h[i-1][0]+h[i-1][1]);\n\t\t\tif( d>t ) ans += 2;\n\t\t\tif( d==t ) ans++;\n\t\t}\n\t\tSystem.out.println( ans );\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint t = scan.nextInt();\n\t\tList<List<Double>> coords = new ArrayList<List<Double>>();\n\t\twhile (n-- > 0) {\n\t\t\tdouble x = scan.nextDouble();\n\t\t\tdouble a = scan.nextDouble() / 2;\n\t\t\tcoords.add(Arrays.asList(x - a, x + a));\n\t\t}\n\t\tCollections.sort(coords, new Comparator<List<Double>>() {\n\t\t\t@Override\n\t\t\tpublic int compare(List<Double> o1, List<Double> o2) {\n\t\t\t\treturn o1.get(0).compareTo(o2.get(0));\n\t\t\t}\n\t\t});\n\t\tint count = 2;\n\t\tChoiceFormat f = new ChoiceFormat(\"-1#0|0#1|0<2\");\n\t\tfor (int i = 0; i < coords.size()-1; i++) {\n\t\t\tdouble l = coords.get(i+1).get(0)-coords.get(i).get(1)-t;\n\t\t\tcount += new Integer(f.format(l));\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n       (new Thread(new Solution())).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew CodeForces().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t(new Thread(new Solution())).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        T = sc.nextInt();\n\n        PrintWriter pw = new PrintWriter(System.out);\n        for (int i = 0; i < T; i++) {\n            int n = sc.nextInt();\n            int[] a = sc.nextIntArray(n);\n            int[] ans = solve(n, a);\n            StringJoiner j = new StringJoiner(\" \");\n            for (int each : ans) {\n                j.add(String.valueOf(each));\n            }\n            pw.println(j.toString());\n        }\n        pw.flush();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt(), m = in.nextInt(), socket = in.nextInt();\n        int[] filters = new int[n];\n\n        for (int i = 0; i < n; i++ ) {\n            filters[i] = in.nextInt();\n        }\n        Arrays.sort(filters);\n\n        int result = 0, index = n - 1;\n        while ( m > socket && index >= 0) {\n            socket += filters[index] - 1;\n            result += 1;\n            index -= 1;\n        }\n\n        out.println(m > socket ? -1 : result);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new A(), \"\", 256*1024*1024).start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String [] argv)\n\t\t//String filePath=\"input.txt\";\n\t\t//String filePath=\"D:\\\\_d\\\\learn\\\\coursera\\\\algorithms and design II\\\\data\\\\knapsack2.txt\";\n        String filePath=null;\n\t\tif(argv.length>0)filePath=argv[0];\n\t\tnew A(filePath);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int n = nextInt();\n        int m = nextInt();\n        int k = nextInt();\n        int[]a = new int[n+1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = nextInt();\n        }\n        if (k >= m) {\n            System.out.println(0);\n            return;\n        }\n        Arrays.sort(a, 1, n+1);\n        int ans = 0;\n        for (int i = n; i >= 1; i--) {\n            ans++;\n            k--;\n            k += a[i];\n            if (k >= m) {\n                System.out.println(ans);\n                return;\n            }\n        }\n        System.out.println(-1);\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Sockets().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new StreamInputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        run(in, out);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew a().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Start().run();\n        // Sworn to fight and die\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        \n        int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) a[i] = in.nextInt();\n        Arrays.sort(a);\n        int ans = 0, r = k, p = n-1;\n        while (r < m && p >= 0) {\n            r = r - 1 + a[p];\n            p--;\n            ans++;\n        }\n        if (r < m) out.println(\"-1\");\n        else out.println(ans);\n        \n        out.flush();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        \n        int n = s.nextInt();\n        int m = s.nextInt();\n        int k = s.nextInt();\n        \n        int a[] = new int [n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = s.nextInt();\n        }\n        int ans = 0;\n        \n        while(k < m){\n            k--;\n            int max = -1;\n            int ix = -1;\n            for (int i = 0; i < a.length; i++) {\n                if(a[i] > max){\n                    max = a[i];\n                    ix = i;\n                }\n            }\n            if(ix == -1){\n                System.out.println(\"-1\");\n                return ;\n            }\n            k += a[ix];\n            a[ix] = -1;\n            ans++;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new A().run(); }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) throws IOException {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int k = in.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; ++i)\n            a[i] = in.nextInt();\n        Arrays.sort(a);\n        \n        int res = 0, p = n - 1;\n        while (k < m && p >= 0) {\n            ++res;\n            k += a[p] - 1;\n            --p;\n        }\n        if (k >= m)\n            System.out.println(res);\n        else\n            System.out.println(\"-1\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]){\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        int m = input.nextInt();\n        int k = input.nextInt();\n        int[] num = new int[n];\n        for(int i = 0 ; i < n ; i++){\n        \tnum[i] = input.nextInt();\n        }\n        \n        System.out.println(str(n,m,k,num));\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] in = br.readLine().split(\" \");\n\t\t\n\t\tint n=Integer.parseInt(in[0]),m=Integer.parseInt(in[1]),k=Integer.parseInt(in[2]);\n\t\t\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] caps = new int[n];\n\t\tfor (int i = 0; i < caps.length; i++) {\n\t\t\tcaps[i] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tArrays.sort(caps);\n\t\t\n\t\tint curSockets=k, neededLines=0;\n\t\tint i = n-1;\n\t\twhile(curSockets<m && i>=0){\n\t\t\tcurSockets+=caps[i]-1;\n\t\t\tneededLines++;\n\t\t\ti--;\n\t\t}\n\t\tif(curSockets>=m)\n\t\t\tSystem.out.println(neededLines);\n\t\telse\n\t\t\tSystem.out.println(-1);\n\t}\n", "complexity": "nlogn"}
{"code": "  public static void main(String[] args) {\n    Scanner cin=new Scanner(new BufferedInputStream(System.in));\n    \n    int n=cin.nextInt(),\n        m=cin.nextInt(),\n        k=cin.nextInt();\n    int[] a=new int[51];\n    \n    for (int i=0;i<n;i++) {\n      a[i]=-cin.nextInt();\n    }\n    Arrays.sort(a);\n    \n    if (m<=k) {\n        System.out.println(0);\n        return;\n    }\n    for (int i=0;i<Math.min(k,n);i++) {\n      m+=a[i];\n      if (m-(k-1-i)<=0) {\n        System.out.println(i+1);\n        return;\n      }\n    }\n    for (int i=k;i<n;i++) {\n      m+=a[i]+1;\n      if (m<=0) {\n        System.out.println(i+1);\n        return;\n      }\n    }\n    System.out.println(-1);\n    \n    cin.close();\n  }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\n\t\ttry {\n\n\t\t\tint[] a1 = readIntArr();\n\t\t\tint[] a2 = readIntArr();\n\t\t\tbr.close();\n\t\t\tint f = a1[0];\n\t\t\tint d = a1[1];\n\t\t\tint s = a1[2];\n\t\t\tArrays.sort(a2);\n\n\t\t\tif (d <= s)\n\t\t\t\tSystem.out.println(0);\n\n\t\t\telse {\n\t\t\t\tint cur = d - s + 1;\n\n\t\t\t\t\n\t\t\t\tint num=0;\n\t\t\t\tfor(int i=0;i<f;i++){\n\t\t\t\t\tnum++;\n\t\t\t\t\tcur-=a2[f-i-1];\n\t\t\t\t\tif(cur<=0)break;\n\t\t\t\t\tcur++;\n\t\t\t\t}\n\t\t\t\tif (cur > 0)\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t\telse{\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tSystem.out.println(num);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException{        \n        \n        File file = new File(\"input.txt\");\n        if(file.exists())in = new InputReader( new FileInputStream(file) );\n        else in = new InputReader( System.in );\n        \n        int n=in.nextInt(), m=in.nextInt(), k=in.nextInt();\n        int a[]=new int[n];\n        for( int i=0; i<n; i++ ) a[i]=in.nextInt();\n        Arrays.sort( a );\n        int i=n-1, ans=0;\n        while( k<m && i>=0 ) {\n            k+=a[i]-1;\n            i--;\n            ans++;\n        }\n        if( m<=k ) System.out.println( ans );\n        else System.out.println(\"-1\");\n    } \n", "complexity": "nlogn"}
{"code": "    public static void main(String [] args){\n        try(Scanner s = new Scanner(System.in)){\n            final int n = s.nextInt();\n            final int m = s.nextInt();\n            final int k = s.nextInt();\n            final int [] a = new int [n];\n            for (int i = 0; i < a.length; ++i){\n                a[i] = s.nextInt();\n            }\n            Arrays.sort(a);\n            int i = a.length - 1;\n            int available = k;\n            int filters = 0;\n            while (available < m && i >= 0){\n                available -= 1;\n                available += a[i];\n                filters++;\n                i--;\n            }\n            if (available < m){\n                System.out.println(-1);\n            }else{\n                System.out.println(filters);\n            }\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new ProblemA().solve();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tsc = new MyScanner ();\n\t\tnew A();\n\t\texit();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tReader r = new Reader();\n\t\tint filters = r.nextInt();\n\t\tint devices = r.nextInt();\n\t\tint sockets = r.nextInt();\n\t\t\n\t\tList<Integer> filtery = new ArrayList<>();\n\t\tfor (int i = 0; i < filters; i++) {\n\t\t\tfiltery.add(r.nextInt()-1);\n\t\t}\n\t\t\n\t\t//System.out.println(filtery);\n\t\t\n\t\tif(devices <= sockets){\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}else{\n\t\t\tCollections.shuffle(filtery);\n\t\t\tCollections.sort(filtery);\n\t\t\tdevices -= sockets;\n\t\t\tint act = filtery.size()-1;\n\t\t\tint result = 0;\n\t\t\twhile(devices > 0){\n\t\t\t\t//System.out.println(devices + \" \" + act);\n\t\t\t\tif(act < 0){\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdevices -= filtery.get(act);\n\t\t\t\tact--;\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\tSystem.out.println(result);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n        Scanner sc = new Scanner(System.in);\n        int numSupply = sc.nextInt();\n        int dev = sc.nextInt();\n        int socket = sc.nextInt();\n        int[] sockInSu = new int[numSupply];\n        for (int i = 0; i< sockInSu.length; i++) {\n            sockInSu[i] = sc.nextInt();\n        }\n        \n        Arrays.sort(sockInSu);\n        \n        if (socket >= dev) {\n            System.out.println(0);\n        }else {\n            int count = 0;\n            for (int i = sockInSu.length-1; i >= 0; i--) {\n                socket+= sockInSu[i]-1;\n                count++;\n                if (socket >= dev) {\n                    System.out.println(count);\n                    break;\n                }\n            }\n            if (socket < dev)\n                System.out.println(-1);\n        }\n    }\n", "complexity": "nlogn"}
{"code": "   public static void main(String[] args) throws IOException\n      new Main().run();\n   }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws NumberFormatException, IOException{\n\t\tScanner sc=new Scanner();\n\t\tint N=sc.nextInt();\n\t\tint M=sc.nextInt();\n\t\tint K=sc.nextInt();\n\t\tint[] array=new int[N];\n\t\tfor(int i=0;i<N;i++)\n\t\t\tarray[i]=sc.nextInt();\n\t\tArrays.sort(array);\n\t\tint val=K;\n\t\tint index=N - 1;\n\t\twhile(index>=0 && val<M){\n\t\t\tval--;\n\t\t\tval+=array[index];\n\t\t\tindex--;\n\t\t}\n\t\tif (val<M)\n\t\t\tSystem.out.println(\"-1\");\n\t\telse\n\t\t\tSystem.out.println((N - 1) - index);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int produzeni = in.nextInt();\n        int devices = in.nextInt();\n        int stekovi = in.nextInt();\n        int [] filter = new int[produzeni];\n        for(int i = 0; i<produzeni; i++){\n            filter[i] = in.nextInt();\n        }\n        Arrays.sort(filter);\n        int filt_no = filter.length-1;\n        if(devices<=stekovi) {\n            System.out.println(\"0\");\n            return;\n        }\n        int used = 0;\n        while(devices>stekovi){\n            try{\n            stekovi+=filter[filt_no--]-1;\n            }\n            catch(Exception e){\n                System.out.println(\"-1\");\n                return;\n            }\n        }\n        \n        System.out.println(filter.length - filt_no-1);\n        \n        \n        \n    }\n", "complexity": "nlogn"}
{"code": "public static void main(String[] args)\n    Scanner input = new Scanner(System.in);\n    int n = input.nextInt(), m = input.nextInt(), k = input.nextInt();\n    int[] data = new int[n];\n    for(int i = 0; i<n; i++)\n        data[i] = input.nextInt();\n    Arrays.sort(data);\n    m -= k;\n    int at = n-1;\n    int count = 0;\n    while(at>=0 && m>0)\n    {\n        count++;\n        m++;\n        m -= data[at];\n        at--;\n    }\n    if(m>0)\n        System.out.println(-1);\n    else\n        System.out.println(count);\n}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tnew TaskA().solve(in, out);\n\t\tin.close();\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        int n = nextInt();\n        int m = nextInt();\n        int k = nextInt();\n        int[] supply = new int[n];\n        for (int i = 0; i < n; ++i)\n            supply[i] = nextInt();\n        if (m <= k) {\n            System.out.println(0);\n        } else {\n            int have = k;\n            Arrays.sort(supply);\n            for(int i = n - 1 ; i >= 0 ; --i){\n                have--;\n                have += supply[i];\n                if(have >= m){\n                    System.out.println(n - i);\n                    return;\n                }\n            }\n            System.out.println(-1);\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        new ProblemA();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tThread t = new Thread(null, new Solution(), \"\", (1 << 26));\n\t\tt.start();\n\t\tt.join();\n\t\tif (uncaught != null) {\n\t\t\tthrow uncaught;\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int k = in.nextInt();\n        int so[]= new int[n];\n        for(int i=0;i<n;i++) so[i]=in.nextInt();\n        Arrays.sort(so);\n        if(m<=k) {\n            System.out.println(\"0\");\n            return;\n        }\n        int sum=0;\n        int socUsed=0;\n        int cont=0;\n        for(int i=n-1;i>=0;i--){\n            cont++;\n            sum+=so[i]; \n            if(sum>=m || sum+(k-1)>=m){\n                System.out.println(cont);\n                return;\n            }   \n            sum--;  \n        }   \n        System.out.println(\"-1\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        long timeout = System.currentTimeMillis();\n        boolean CF = System.getProperty(\"ONLINE_JUDGE\") != null;\n        PrintWriter _pw = new PrintWriter(System.out);\n        BufferedReader _br = new BufferedReader(CF ? new InputStreamReader(System.in) : new FileReader(new File(\"in.txt\")));\n        new A(_br, _pw).run();\n        if (!CF) {\n            _pw.println();\n            _pw.println(System.currentTimeMillis() - timeout);\n        }\n        _br.close();\n        _pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)throws IOException {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew CF159DIV2().runIO();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main (String[] args) throws IOException {\n\t\tBufferedReader reader = new BufferedReader (new InputStreamReader (System.in));\n\t\tString[] splitted = reader.readLine().split(\" \");\n\t\tint n = Integer.parseInt(splitted[0]);\n\t\tint m = Integer.parseInt(splitted[1]);\n\t\tint k = Integer.parseInt(splitted[2]);\n\t\tPriorityQueue<Integer> queue = new PriorityQueue<Integer> (1000, Collections.reverseOrder());\n\t\tsplitted = reader.readLine().split(\" \");\n\t\tfor (int ii = 0; ii < splitted.length; ii++) {\n\t\t\tqueue.add(Integer.parseInt(splitted[ii]));\n\t\t}\n\t\t\n\t\tint counter = 0;\n\t\tint spot = k;\n\t\twhile (spot < m && !queue.isEmpty()) {\n\t\t\tspot = spot + queue.poll() - 1;\n\t\t\tcounter++;\n\t\t}\n\t\tif (spot < m) {\n\t\t\tSystem.out.println(\"-1\");\n\t\t} else {\n\t\t\tSystem.out.println(counter);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n\treader = new java.io.BufferedReader(new java.io.InputStreamReader(System.in), 1 << 20);\n\twriter = new java.io.BufferedWriter(new java.io.OutputStreamWriter(System.out));\n\t//reader = new java.io.BufferedReader(new java.io.FileReader(\"input.txt\"), 1 << 20);\n\t//writer = new java.io.BufferedWriter(new java.io.FileWriter(\"output.txt\"));\n\t\n\tinitTokenizer();\n\tint n = nextInt();\n\tint m = nextInt();\n\tint k = nextInt();\n\t\n\tinitTokenizer();\n\tint[] a = new int[n];\n\t\n\tfor (int i = 0; i < n; i++) {\n\t    a[i] = nextInt();\n\t}\n\t\n\tArrays.sort(a);\n\t\n\tint total = k;\n\tint cnt = 0;\n\t\n\twhile (total < m && cnt < a.length) {\n\t    total += a[a.length - 1 - cnt] - 1;\n\t    cnt++;\n\t}\n\t\n\tif (total >= m) System.out.println(cnt);\n\telse System.out.println(-1);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\t// BufferedReader rd = new BufferedReader(new\n\t\t// InputStreamReader(System.in));\n\t\t// StringTokenizer t = new StringTokenizer(rd.readLine(), \" \");\n\t\tint n = sc.nextInt(), m = sc.nextInt(), k = sc.nextInt();\n\t\tint pl[] = new int[n];\n\t\tif (k >= m) {\n\t\t\tSystem.out.println(0);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\tm -= k;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tpl[i] = sc.nextInt() - 1;\n\t\t}\n\t\tArrays.sort(pl);\n\t\tint out = 0;\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tm -= pl[i];\n\t\t\tout++;\n\t\t\tif (m <= 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (m <= 0)\n\t\t\tSystem.out.println(out);\n\t\telse\n\t\t\tSystem.out.println(-1);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) \n\tScanner kde = new Scanner(System.in);\n\tint n =kde.nextInt();  //���������� ������� ��������\n\tint m =kde.nextInt();  //���������� ���������\n\tint k =kde.nextInt(); //���������� �������\n\tArrayList<Integer> count = new ArrayList<Integer>();\n\tfor (int i=0; i<n; i++  )\n\t{\n\t    count.add(kde.nextInt()) ; \n\t}\n\t\n\tCollections.sort(count);\n\tCollections.reverse(count);\n\tif(m<=k)\n\t{\n\t    System.out.println(\"0\"); \n\t    return;\n\t}\n\t\n\tm=m-k+1;\n\t\n\t\n\t\n\t\n\t   int  res=0;\n\tfor(int i=0; i<n; i++ ) \n\t{\n\t    if(i!=0)\n\t    {\n\t    res+=count.get(i)-1;\n\t    }\n\t    else \n\t    {\n\t    res+=count.get(i);\n\t    }\n\t  \n\t    if(res>=m)\n\t    {\n\t\t   System.out.println(i+1);\n\t\t   return;\n\t    }\n\t    \n\t}\n\t\n\t    \n\t\n\t  \n\t\n\t\n\tSystem.out.println(\"-1\");\n\t\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int k = in.nextInt();\n        int[] A = new int[n];\n        for (int i = 0; i < n; i++)\n            A[i] = in.nextInt();\n        Arrays.sort(A);\n        int cnt = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            if (k >= m) {\n                System.out.println(cnt);\n                return;\n            }\n            cnt++;\n            k += A[i] - 1;\n        }\n        if (k >= m)\n            System.out.println(cnt);\n        else\n            System.out.println(-1);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException{\n        int n = sc.nextInt();\n        int p = n;\n        int m = sc.nextInt();\n        int k = sc.nextInt();\n        int a[] = new int[n];\n        for (int i = 0; i < n; i++)\n        {\n            a[i] = sc.nextInt() - 1;\n        }\n        Arrays.sort(a);\n        int j =0;\n        for(int i=0; i<n; i++){\n            if(m > k){\n                k = k + a[n-i-1];\n                j++;\n            }\n        }\n        if(m > k)\n            System.out.println(-1);\n        else\n            System.out.println(j);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String Args[]) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st;\n        st = new StringTokenizer(br.readLine());\n        int n=Integer.valueOf(st.nextToken());\n        int m=Integer.valueOf(st.nextToken());\n        int k=Integer.valueOf(st.nextToken());\n        st = new StringTokenizer(br.readLine());\n        int sock[] = new int[n];\n        \n        for (int i=0;i<n;i++){\n            sock[i]= Integer.valueOf(st.nextToken());\n        }\n        Arrays.sort(sock);\n        m-=k;\n        int count=0;\n        int index=sock.length-1;\n        while(m>0){\n            if(index<0){\n                System.out.println(\"-1\");\n                return;\n            }\n            m++;\n            m-=sock[index];\n            index--;\n            count++;\n        }\n        System.out.println(count);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskG solver = new TaskG();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        long totalBlocks = 0;\n        long a[] = new long[n];\n        for(int i = 0; i < n; ++i) {\n            a[i] = sc.nextLong();\n            totalBlocks += a[i];\n        }\n\n        Arrays.sort(a);\n\n        long selected = 0;\n        for(int i = 0; i < n; ++i) {\n            if(a[i] > selected)\n                selected++;\n        }\n\n        long leftCols = a[n - 1] - selected;\n        long remBlocks = totalBlocks - leftCols - n;\n\n        System.out.print(remBlocks);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        long totalBlocks = 0;\n        long a[] = new long[n];\n        for(int i = 0; i < n; ++i) {\n            a[i] = sc.nextLong();\n            totalBlocks += a[i];\n        }\n\n        Arrays.sort(a);\n\n        long selected = 0;\n        for(int i = 0; i < n; ++i) {\n            if(a[i] > selected)\n                selected++;\n        }\n\n        long leftCols = a[n - 1] - selected;\n        long remBlocks = totalBlocks - leftCols - n;\n\n        System.out.print(remBlocks);\n    }\n", "complexity": "nlogn"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            int m=Integer.parseInt(s1[1]);\n            int a[]=new int[n];\n            String s2[]=br.readLine().split(\" \");\n            long S=0;\n            for(int i=0;i<n;i++)\n            { a[i]=Integer.parseInt(s2[i]);  S+=(long)a[i]; }\n            \n            Arrays.sort(a);\n            m=a[n-1];\n            int last=1;\n            int t=1;\n            for(int i=1;i<n-1;i++)\n            {\n                  if(a[i]==last)\n                   t++;\n                  else\n                  {\n                        t++;\n                        last=last+1;\n                  }\n            }\n            if(last<m)\n            { t+=m-last; }\n            else\n             t++;\n            System.out.println(S-t);\n      }\n", "complexity": "nlogn"}
{"code": "public static void main(String args[])\nScanner s=new Scanner(System.in);\nint n=s.nextInt();\nint m=s.nextInt();\nint arr[]=new int[n];\nint max = Integer.MIN_VALUE;\n        long sum = 0;\n        for(int i=0;i<n;i++)\n        {\n            arr[i] = s.nextInt();\n            sum = sum + arr[i];\n            max = Math.max(max,arr[i]);\n        }\n        Arrays.sort(arr);\n        int i = 0;\n        int count = 0;\n        int d = 0;\n        for(i=0; i<n; i++)\n        {\n            if(arr[i] > d)\n            {\n                count++;\n                d++;\n            }\n            else if(arr[i] == d && arr[i] > 0)\n            {\n                count++;\n            }\n        }\n        //System.out.println(count + \" \" + max);\n        if(max - d > 0)\n        {\n            count = count + max - d;\n        }\n        System.out.println(sum - count);}}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastIO sc = new FastIO(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\t\n\t\tlong remove = 0;\n\t\t\n\t\tint[] heights = new int[n+1];\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\theights[i] = sc.nextInt();\n\t\t\tremove += heights[i];\n\t\t}\n\t\t\n\t\tArrays.sort(heights);\n\t\t//System.out.println(Arrays.toString(heights));\n\t\tlong keep = 0;\n\t\tfor(int i = n; i> 0; i--) {\n\t\t\tif(heights[i-1] >= heights[i]) {\n\t\t\t\theights[i-1] = heights[i]-1;\n\t\t\t}\n\t\t\tkeep += heights[i] - heights[i-1];\n\t\t}\n\t\t//System.out.println(Arrays.toString(heights));\n\t\t\n\t\tpw.println(remove - keep);\n\t\tpw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] wide = new int[n], sta = new int[n];\n        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n        \twide[i] = sc.nextInt();\n        \thm.put(wide[i], i + 1);\n        }\n        Util.sort(wide);\n        sc.nextLine();\n        String s = sc.nextLine();\n        int tp = 0, pos = 0;\n        StringBuilder out = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n        \tint t;\n        \tif (s.charAt(i) == '0') {\n        \t\tt = wide[pos++];\n        \t\tsta[tp++] = t;\n        \t} else t = sta[--tp];\n        \tout.append(hm.get(t) + \" \");\n        }\n        System.out.println(out.toString());\n        sc.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String[] line = reader.readLine().split(\" \");\n        int w = Integer.valueOf(line[0]);\n        int h = Integer.valueOf(line[1]);\n        int n = Integer.valueOf(line[2]);\n\n        Request[] requests = new Request[n];\n\n        for (int i = 0; i < n; i++) {\n            line = reader.readLine().split(\" \");\n            requests[i] = new Request(line[0], Integer.valueOf(line[1]));\n        }\n\n        for (long e : solve(h, w, requests))\n            System.out.println(e);\n\n//        int w = 200000, h = 200000, n = 400000;\n//        Request[] requests = generate(w, h, n);\n//\n//        long start = System.currentTimeMillis();\n//        solve(h, w, requests);\n//        long end = System.currentTimeMillis();\n//\n//        System.out.println(\"Time: \" + (end - start) + \" ms\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        CGlassCarving solver = new CGlassCarving();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        //FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n        PrintWriter pw = new PrintWriter(System.out);\n        int m = sc.nextInt();\n        int n = sc.nextInt();\n        int q = sc.nextInt();\n        TreeSet<Integer>length= new TreeSet<>();\n        length.add(0);\n        length.add(n);\n        TreeSet<Integer>width= new TreeSet<>();\n        width.add(0);\n        width.add(m);\n        TreeMap<Integer,Integer>len= new TreeMap<>();\n        len.put(n,1);\n        TreeMap<Integer,Integer>wid= new TreeMap<>();\n        wid.put(m,1);\n        while (q-->0){\n            String t= sc.next();\n            if (t.equals(\"H\")) {\n                int x = sc.nextInt();\n                int k1 = length.ceiling(x);\n                int k2 = length.floor(x);\n                if (x != k1) {\n                    int s = k1 - k2;\n                    int con = len.get(s);\n                    if (con == 1) len.remove(s);\n                    else len.put(s, con - 1);\n                    len.put((k1 - x), len.getOrDefault((k1 - x), 0) + 1);\n                    len.put((x - k2), len.getOrDefault((x - k2), 0) + 1);\n                    length.add(x);\n                }\n            }\n            else {\n                int x = sc.nextInt();\n                int k1 = width.ceiling(x);\n                int k2 = width.floor(x);\n                if (x != k1) {\n                    int s = k1 - k2;\n                    //System.out.println(s+\" \"+k1+\" \"+k2);\n                    int con = wid.get(s);\n                    if (con == 1) wid.remove(s);\n                    else wid.put(s, con - 1);\n                    wid.put((k1 - x), wid.getOrDefault((k1 - x), 0) + 1);\n                    wid.put((x - k2), wid.getOrDefault((x - k2), 0) + 1);\n                    width.add(x);\n                }\n            }\n            pw.println(1l*len.lastKey()*wid.lastKey());\n        }\n\n        pw.flush();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint n = in.nextInt();\n\t\tTreeSet <Vector> vectors = new TreeSet <> ();\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tVector v = new Vector(in.nextLong(), in.nextLong(), i);\n\t\t\tvectors.add(v);\n\t\t}\n\t\twhile(vectors.size() > 2) {\n\t\t\t//System.out.println(vectors);\n\t\t\t//stop(500);\n\t\t\t\n\t\t\tTreeSet <Vector> support = new TreeSet <> ();\n\t\t\t\n\t\t\twhile(vectors.size() > 0) {\n\t\t\t\tVector curr = vectors.pollFirst();\n\t\t\t\tVector next1 = vectors.higher(curr);\n\t\t\t\tVector next2 = vectors.lower(curr.negate());\n\t\t\t\tVector next3 = vectors.higher(curr.negate());\n\t\t\t\tVector next4 = vectors.lower(curr);\n\t\t\t\t\n\t\t\t\t//System.out.println(\"CURR: \" + curr + \"\\n\" + next1 + \"\\n\" + next2);\n\t\t\t\t\n\t\t\t\tif(next1 != null) {\n\t\t\t\t\tif(ok(curr, next1)) {\n\t\t\t\t\t\tsupport.add(curr.add(next1));\n\t\t\t\t\t\tvectors.remove(next1);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next1 != null) {\n\t\t\t\t\tif(ok(curr, next1.negate())) {\n\t\t\t\t\t\tsupport.add(curr.subtract(next1));\n\t\t\t\t\t\tvectors.remove(next1);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next2 != null) {\n\t\t\t\t\tif(ok(curr, next2)) {\n\t\t\t\t\t\tsupport.add(curr.add(next2));\n\t\t\t\t\t\tvectors.remove(next2);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next2 != null) {\n\t\t\t\t\tif(ok(curr, next2.negate())) {\n\t\t\t\t\t\tsupport.add(curr.subtract(next2));\n\t\t\t\t\t\tvectors.remove(next2);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next3 != null) {\n\t\t\t\t\tif(ok(curr, next3)) {\n\t\t\t\t\t\tsupport.add(curr.add(next3));\n\t\t\t\t\t\tvectors.remove(next3);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next3 != null) {\n\t\t\t\t\tif(ok(curr, next3.negate())) {\n\t\t\t\t\t\tsupport.add(curr.subtract(next3));\n\t\t\t\t\t\tvectors.remove(next3);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next4 != null) {\n\t\t\t\t\tif(ok(curr, next4)) {\n\t\t\t\t\t\tsupport.add(curr.add(next4));\n\t\t\t\t\t\tvectors.remove(next4);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(next4 != null) {\n\t\t\t\t\tif(ok(curr, next4.negate())) {\n\t\t\t\t\t\tsupport.add(curr.subtract(next4));\n\t\t\t\t\t\tvectors.remove(next4);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsupport.add(curr);\n\t\t\t}\n\t\t\t\n\t\t\tvectors = support;\n\t\t}\n\t\t\n\t\tif(vectors.size() == 2) {\n\t\t\tVector curr = vectors.pollFirst();\n\t\t\tVector next = vectors.pollFirst();\n\t\t\tVector add = curr.add(next);\n\t\t\tVector sub = curr.subtract(next);\n\t\t\tif(sub.euclideanNorm() <= add.euclideanNorm())\n\t\t\t\tvectors.add(sub);\n\t\t\telse\n\t\t\t\tvectors.add(add);\n\t\t}\n\t\t\n\t\t//System.out.println(vectors.first().euclideanNorm());\n\t\t\n\t\tStringBuilder buffer = new StringBuilder();\n\t\tint[] ans = new int[n];\n\t\tdfs(vectors.pollFirst(), ans);\n\t\tfor(int i = 0; i < n; i ++)\n\t\t\tbuffer.append(ans[i] + \" \");\n\t\tSystem.out.println(buffer);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter out = new PrintWriter(System.out);\n        //Scanner sc = new Scanner();\n        Reader in = new Reader();\n        Main solver = new Main();\n        solver.solve(out, in);\n        out.flush();\n        out.close();\n \n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tint q = Integer.parseInt(br.readLine());\n\t\tTreeMap<Integer, Integer> mp = new TreeMap<>();\n\t\tint ans = 0;\n\t\twhile (q-- > 0) {\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tint l = Integer.parseInt(st.nextToken()) - 1;\n\t\t\tint r = Integer.parseInt(st.nextToken());\n\t\t\tint t = Integer.parseInt(st.nextToken());\n\t\t\tMap.Entry<Integer, Integer> e;\n\t\t\tint l_, r_;\n\t\t\tif (t == 1) {\n\t\t\t\tif ((e = mp.floorEntry(l)) != null && (r_ = e.getValue()) >= l) {\n\t\t\t\t\tl_ = e.getKey();\n\t\t\t\t\tans -= r_ - l_;\n\t\t\t\t\tl = l_;\n\t\t\t\t\tr = Math.max(r, r_);\n\t\t\t\t}\n\t\t\t\twhile ((e = mp.higherEntry(l)) != null && (l_ = e.getKey()) <= r) {\n\t\t\t\t\tr_ = e.getValue();\n\t\t\t\t\tans -= r_ - l_;\n\t\t\t\t\tr = Math.max(r, r_);\n\t\t\t\t\tmp.remove(l_);\n\t\t\t\t}\n\t\t\t\tans += r - l;\n\t\t\t\tmp.put(l, r);\n\t\t\t} else {\n\t\t\t\tr_ = l;\n\t\t\t\tif ((e = mp.floorEntry(l)) != null && (r_ = e.getValue()) > l) {\n\t\t\t\t\tl_ = e.getKey();\n\t\t\t\t\tif (l_ < l)\n\t\t\t\t\t\tmp.put(l_, l);\n\t\t\t\t\telse\n\t\t\t\t\t\tmp.remove(l_);\n\t\t\t\t\tans -= r_ - l;\n\t\t\t\t}\n\t\t\t\twhile ((e = mp.higherEntry(l)) != null && (l_ = e.getKey()) < r) {\n\t\t\t\t\tr_ = e.getValue();\n\t\t\t\t\tmp.remove(l_);\n\t\t\t\t\tans -= r_ - l_;\n\t\t\t\t}\n\t\t\t\tif (r_ > r) {\n\t\t\t\t\tmp.put(r, r_);\n\t\t\t\t\tans += r_ - r;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpw.println(n - ans);\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DPairOfLines solver = new DPairOfLines();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            long x=Long.parseLong(s1[1]);\n            long y=Long.parseLong(s1[2]);\n            long S=0;\n            long mod=1000000007;\n            B a[]=new B[n];\n            TreeMap<Long,Long> tm=new TreeMap<Long,Long>();\n            long ans[]=new long[n];\n            for(int i=0;i<n;i++)\n            {\n              String s2[]=br.readLine().split(\" \");\n              long l=Long.parseLong(s2[0]);\n              long r=Long.parseLong(s2[1]);\n              B b1=new B(l,r);\n              a[i]=b1;\n            }\n            Arrays.sort(a,new The_Comp());\n            \n            for(int i=0;i<n;i++)\n            {\n                  long l=a[i].x;\n                  long r=a[i].y;\n                  if(tm.floorKey(l-1)!=null)\n                  {\n                        long u=tm.floorKey(l-1);\n                        long v=l;\n                        if((v-u)*y<x)\n                        { ans[i]=((r-u)*y)%mod; \n                          if(tm.get(u)>1)\n                           tm.put(u,tm.get(u)-1);\n                          else\n                          tm.remove(u); \n                        }\n                        else\n                        { ans[i]=(x+(r-l)*y)%mod; }\n                  }\n                  else\n                   ans[i]=(x+(r-l)*y)%mod;\n                  S=(S+ans[i])%mod;\n                  if(tm.containsKey(r))\n                   tm.put(r,1+tm.get(r));\n                  else\n                   tm.put(r,(long)1);\n            }\n            System.out.println(S);\n      }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new TaskA(),\"TaskA\",1<<26).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tComp c1 = getComp(scanner);\n\t\tComp c2 = getComp(scanner);\n\t\tc1.sortByPrice();\n\t\tc2.sortByPrice();\t\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < c1.num || j < c2.num) {\n\t\t\tElem xi = (i < c1.num) ? c1.elems.get(i) : null;\n\t\t\tElem yj = (j < c2.num) ? c2.elems.get(j) : null;\n\t\t\tif(xi != null && yj != null) {\n\t\t\t\tif(xi.price >= yj.price) {\n\t\t\t\t\tif(!c2.resultSet.contains(xi)) {\n\t\t\t\t\t\tc1.resultSet.add(xi);\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\tif(!c1.resultSet.contains(yj)) {\n\t\t\t\t\t\tc2.resultSet.add(yj);\n\t\t\t\t\t}\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t} else\n\t\t\tif(xi != null) {\n\t\t\t\tif(!c2.resultSet.contains(xi)) {\n\t\t\t\t\tc1.resultSet.add(xi);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tif(!c1.resultSet.contains(yj)) {\n\t\t\t\t\tc2.resultSet.add(yj);\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\t\t\t\t\n\t\t}\n\t\t\n\t\tlong result = c1.getResultPrice() + c2.getResultPrice();\n\t\tSystem.out.println(result);\n   }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter printer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tnV = Integer.parseInt(reader.readLine());\n\n\t\tchldn = new ArrayList[nV];\n\t\tfor (int i = 0; i < nV; i++) {\n\t\t\tchldn[i] = new ArrayList<>();\n\t\t}\n\n\t\tanc = new int[nV][21];\n\t\tdepth = new int[nV];\n\n\t\tnum = new int[nV];\n\t\tnLoc = new int[nV];\n\t\ttree = new int[nV * 4][2];\n\t\tfor (int[] a : tree) {\n\t\t\ta[0] = a[1] = -1;\n\t\t}\n\n\t\troot = 0;\n\n\t\tStringTokenizer inputData = new StringTokenizer(reader.readLine());\n\t\tfor (int i = 0; i < nV; i++) {\n\t\t\tnum[i] = Integer.parseInt(inputData.nextToken());\n\t\t\tnLoc[num[i]] = i;\n\t\t}\n\n\t\tinputData = new StringTokenizer(reader.readLine());\n\t\tfor (int i = 1; i < nV; i++) {\n\t\t\tanc[i][0] = Integer.parseInt(inputData.nextToken()) - 1;\n\t\t\tchldn[anc[i][0]].add(i);\n\t\t}\n\n\t\tpreprocess();\n\n\t\tbuild(1, 0, nV - 1);\n\n\t\tint nQ = Integer.parseInt(reader.readLine());\n\n\t\twhile (nQ-- > 0) {\n\t\t\tinputData = new StringTokenizer(reader.readLine());\n\t\t\tif (inputData.nextToken().equals(\"1\")) {\n\t\t\t\tint a = Integer.parseInt(inputData.nextToken()) - 1;\n\t\t\t\tint b = Integer.parseInt(inputData.nextToken()) - 1;\n\n\t\t\t\tint temp = num[a];\n\t\t\t\tnum[a] = num[b];\n\t\t\t\tnum[b] = temp;\n\n\t\t\t\tnLoc[num[a]] = a;\n\t\t\t\tnLoc[num[b]] = b;\n\n\t\t\t\tupdate(1, 0, nV - 1, num[a]);\n\t\t\t\tupdate(1, 0, nV - 1, num[b]);\n\t\t\t} else {\n\t\t\t\tprinter.println(query(1, 0, nV - 1, nLoc[0], nLoc[0]) + 1);\n\t\t\t}\n\t\t}\n\t\tprinter.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int a[] = new int[n];\n        int b[] = new int[n];\n        for (int i = 0; i < n; i++) a[i] = sc.nextInt();\n        for (int i = 0; i < n; i++) b[i] = sc.nextInt();\n        int c[] = new int[2 * n];\n        c[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            c[i * 2] = a[i];\n            c[i * 2 - 1] = b[i];\n            if (a[i] == 1 || b[i] == 1) {\n                System.out.print(-1);\n                System.exit(0);\n            }\n        }\n        c[2 * n - 1] = b[0];\n        if (a[0] == 1 || b[0] == 1) {\n            System.out.print(-1);\n            System.exit(0);\n        }\n        System.out.println(bin_search(c, m));\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int a[] = new int[n];\n        int b[] = new int[n];\n        for (int i = 0; i < n; i++) a[i] = sc.nextInt();\n        for (int i = 0; i < n; i++) b[i] = sc.nextInt();\n        int c[] = new int[2 * n];\n        c[0] = a[0];\n        for (int i = 1; i < n; i++) {\n            c[i * 2] = a[i];\n            c[i * 2 - 1] = b[i];\n            if (a[i] == 1 || b[i] == 1) {\n                System.out.print(-1);\n                System.exit(0);\n            }\n        }\n        c[2 * n - 1] = b[0];\n        if (a[0] == 1 || b[0] == 1) {\n            System.out.print(-1);\n            System.exit(0);\n        }\n        System.out.println(bin_search(c, m));\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        MyScanner scan = new MyScanner();\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n\n        int n = scan.nextInt();\n        int[] vals = new int[n];\n        for (int i = 0; i < n; i++) {\n            vals[i] = scan.nextInt();\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (solve(i, vals)) {\n                out.print('A');\n            } else {\n                out.print('B');\n            }\n        }\n\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tFastScanner scan = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = scan.nextInt();\n\t\tlong[] a = scan.nextLongArray(n);\n\t\tBigInteger res = BigInteger.ZERO;\n\t\tfor (int i = n-1; i >= 0; i--) res = res.add(BigInteger.valueOf(i*a[i] - (n-1-i)*a[i]));\n\t\tHashMap<Long, Long> map = new HashMap<>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tres = res.subtract(BigInteger.valueOf(map.getOrDefault(a[i]-1, 0L)));\n\t\t\tres = res.add(BigInteger.valueOf(map.getOrDefault(a[i]+1, 0L)));\n\t\t\tmap.put(a[i], map.getOrDefault(a[i], 0L)+1);\n\t\t}\n\t\tout.println(res);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException\n        in = new InputReader(System.in);\n        out = new PrintWriter(System.out);            \n        \n        int n = in.nextInt();\n        int[] arr = in.nextIntArray(n);\n        ArrayList<Integer>list = new ArrayList<>();\n        HashMap<Integer,Integer> map = new HashMap<>();\n        \n        for(int i = 0; i < n; i++){\n            list.add(arr[i]);\n            list.add(arr[i] + 1);\n            list.add(arr[i] - 1);\n        }\n        Collections.sort(list);\n        int j = 1;\n        for(int k : list){\n            if(map.containsKey(k)) continue;\n            map.put(k, j++);\n        }\n        \n        SegmentTree seg = new SegmentTree(j + 1);\n        SegmentTree seg1 = new SegmentTree(j + 1);\n        BigInteger ans = BigInteger.ZERO;\n        BigInteger sum = BigInteger.ZERO;\n//        long ans = 0;\n//        long sum = 0;\n        for(int i = 0; i < n; i++){\n            long x = seg.get(0, j - 1, map.get(arr[i] - 1), map.get(arr[i] + 1), 1);\n            long y = seg1.get(0, j - 1, map.get(arr[i] - 1), map.get(arr[i] + 1), 1);\n            ans = ans.add(new BigInteger(\"\"+x));\n            ans = ans.subtract(sum);\n            ans = ans.add(new BigInteger(\"\"+((arr[i] * 1l *(i - y)))));\n//              ans += arr[i] * 1l * (i - y) - sum + x;\n            \n            seg.update(0, j - 1, map.get(arr[i]), map.get(arr[i]), arr[i], 1);\n            seg1.update(0, j - 1, map.get(arr[i]), map.get(arr[i]), 1, 1);\n            sum = sum.add(new BigInteger(arr[i] + \"\"));\n        }\n        \n        out.println(ans);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry (final Scanner sc = new Scanner(System.in)) {\n\t\t\tfinal int n = sc.nextInt();\n\t\t\t\n\t\t\tlong[] array = new long[n];\n\t\t\tfor(int i = 0; i < n; i++){ array[i] = sc.nextLong(); }\n\t\t\t\n\t\t\tTreeSet<Long> value_set = new TreeSet<Long>();\n\t\t\tfor(int i = 0; i < n; i++){ value_set.add(array[i]); }\n\t\t\tArrayList<Long> value_list = new ArrayList<Long>(value_set);\n\t\t\t\n\t\t\tBigInteger answer = BigInteger.ZERO;\n\t\t\tfinal int bit_n = value_list.size();\n\t\t\tBIT cnt_bit = new BIT(bit_n);\n\t\t\tBIT val_bit = new BIT(bit_n);\n\t\t\t\n\t\t\tfor(int i = n - 1; i >= 0; i--){\n\t\t\t\tfinal long value = array[i];\n\t\t\t\tfinal int value_index = Collections.binarySearch(value_list, value);\n\t\t\t\t\n\t\t\t\tint upper_pos = Collections.binarySearch(value_list, value + 2);\n\t\t\t\tif(upper_pos < 0){ upper_pos = (-upper_pos) - 1; }\n\t\t\t\tif(0 <= upper_pos && upper_pos < bit_n){\n\t\t\t\t\tfinal long upper_sum = val_bit.sum(upper_pos, bit_n) - cnt_bit.sum(upper_pos, bit_n) * value;\n\t\t\t\t\tanswer = answer.add(BigInteger.valueOf(upper_sum));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint lower_pos = Collections.binarySearch(value_list, value - 2);\n\t\t\t\tif(lower_pos < 0){ lower_pos = (-lower_pos) - 2; }\n\t\t\t\tif(0 <= lower_pos && lower_pos < bit_n){\n\t\t\t\t\tfinal long lower_sum = val_bit.sum(0, lower_pos + 1) - cnt_bit.sum(0, lower_pos + 1) * value;\n\t\t\t\t\tanswer = answer.add(BigInteger.valueOf(lower_sum));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcnt_bit.add(value_index, 1);\n\t\t\t\tval_bit.add(value_index, value);\n\t\t\t\t//System.out.println(answer);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(answer);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\n        try {\n            in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n            ins = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n            out = new PrintWriter(System.out);\n            try {\n                if (System.getProperty(\"xDx\") != null) {\n                    in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n                    ins = new Scanner(new FileReader(\"input.txt\"));\n                    out = new PrintWriter(new FileWriter(\"output.txt\"));\n                }\n            } catch (Exception e) {\n                in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n                ins = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n                out = new PrintWriter(System.out);\n            }\n            new Main().run();\n        } catch (Throwable e) {\n//            e.printStackTrace();\n            throw new RuntimeException(e);\n        } finally {\n            out.close();\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main (String[] args) throws IOException {\n        FastScanner fs = new FastScanner(System.in);\n        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out));\n\n        int n = fs.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = fs.nextInt();\n        }\n        \n        HashMap<Integer,Integer> h = new HashMap<Integer,Integer>(n);\n\n        BigInteger s = new BigInteger(\"\"+a[0]);\n        BigInteger x = new BigInteger(\"0\");\n        h.put(a[0], 1);\n        for (int i = 1; i < n; i++) {                        \n            x = x.add(new BigInteger(\"\"+(((long)i)*((long)a[i]))));\n            x = x.subtract(s);\n            s = s.add(new BigInteger(\"\"+a[i]));\n            Integer q = null;\n            q = h.get(a[i]-1);            \n            if (q != null) {\n                x = x.subtract(new BigInteger(\"\"+q));\n            }\n            q = h.get(a[i]+1);            \n            if (q != null) {\n                x = x.add(new BigInteger(\"\"+q));\n            }\n            q = h.get(a[i]);            \n            if (q != null) {\n                h.put(a[i], q + 1);\n            } else {\n                h.put(a[i], 1);\n            }\n        }\n\n        pw.println(x);\n\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFD();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)throws Throwable {\n\t\tMyScanner sc=new MyScanner();\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\t\n\t\tint n=sc.nextInt();\n\t\tint [] a=new int [n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=sc.nextInt();\n\t\t\n\t\tTreeMap<Integer, Integer> map=new TreeMap<Integer, Integer>();\n\t\tBigInteger ans=new BigInteger(\"0\");\n\t\tlong sum=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tsum+=a[i];\n\t\t\tmap.put(a[i], map.getOrDefault(a[i], 0)+1);\n\t\t\tint cntSame=map.get(a[i]);\n\t\t\tint cntLess=map.getOrDefault(a[i]-1, 0);\n\t\t\tint cntMore=map.getOrDefault(a[i]+1, 0);\n\t\t\tlong sum2=sum;\n\t\t\tsum2-=1L*cntSame*a[i];\n\t\t\tsum2-=1L*cntLess*(a[i]-1);\n\t\t\tsum2-=1L*cntMore*(a[i]+1);\n\t\t\tint cnt=i+1-(cntSame+cntLess+cntMore);\n\t\t\tans = ans.subtract(BigInteger.valueOf(sum2));\n\t\t\tans= ans.add(BigInteger.valueOf(1L*cnt*a[i]));\n\t\t\t\n\t\t}\n\t\tpw.println(ans);\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner in = new FastScanner();\n\t\tint n = in.nextInt();\n\t\tlong a[] = new long[n];\n\t\tlong copy[] = new long[n];\n\t\tlong sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextLong();\n\t\t\tcopy[i] = a[i];\n\t\t\tsum+=a[i];\n\t\t}\n\t\tArrays.sort(copy);\n\t\tfor(int i = 0; i < n; i++)\t//Compress values to be 1-indexed\n\t\t\tif(!comp.containsKey(copy[i])){\n\t\t\t\tcomp.put(copy[i],  (comp.size()+1));\n\t\t\t\t//rev.put(comp.get(copy[i]), copy[i]);\n\t\t\t}\n\t\t\t\n\t//\tBIT bit = new BIT(n);\n\t\t\n\t\tfreq = new long[n+1];\n\t\tArrays.fill(freq, 0);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint v = comp.get(a[i]);\n\t\t\tfreq[v]++;\n\t\t}\n\t\t\n\t\tlong res = 0;\n\t\tBigInteger res2 = new BigInteger(\"0\");\n\t\tfor(int i = 0; i < n; i++){\t//Go through each element in the array\n\t\t\tlong x = a[i];\n\t\t\t//freq[comp.get(x)]--;\n\t\t\t//Find the amount of values equal to (x-1), x, and (x+1);\n\t\t\tlong below = getFreq(x-1);\n\t\t\tlong eq = getFreq(x);\n\t\t\tlong above = getFreq(x+1);\n\t\t\tlong other = (n-i)-below-eq-above;\n\t\t\t\n\t\t//\tSystem.out.println(\"x= \"+x+\" b:\"+below+\"  e:\"+eq+\"  a:\"+above);\n\t\t\t\n\t\t\tlong leaveOut = below*(x-1) + eq*(x) + above*(x+1);\n\t\t\tlong cur = (sum-leaveOut)-(x*other);\n\n\t//\t\tSystem.out.println(\"sum:\"+sum+\"  leave:\"+leaveOut+\"  oth:\"+other+\"   cur:\"+cur+\"\\n\");\n\t\t\tres2 = res2.add(new BigInteger(\"\"+cur));\n\t\t\tres += cur;\n\t\t\tsum -= x;\n\t\t\tfreq[comp.get(x)]--;\n\t\t\t\n\t\t}\n\t\tSystem.out.println(res2);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tnew D().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Thread(null, new Main(), \"\", 1 << 20).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew Thread(null, new Runnable()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\tnew main().solve();\n\t\t\t}\n\t\t}, \"1\", 1 << 26).start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new D(), \"_cf\", 1 << 28).start();}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ScanReader in = new ScanReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint N = in.nextInt();\n\t\tint[] arr = new int[N];\n\t\tfor(int n=0;n<N;n++){\n\t\t\tarr[n] = in.nextInt();\n\t\t}\n\t\t\n\t\tWavelet waveyMcWaveFace = new Wavelet(arr);\n\t\t\n\t\tBigInteger bigSum = BigInteger.ZERO;\n\t\tfor(int n=0;n<N;n++){\n\t\t\t// calculate the amount added for all j = n all at once\n\t\t\t// it's a[j] - a[i]\n\t\t\t\n\t\t\t// step one\n\t\t\t// positive part\n\t\t\tlong amtPlus = arr[n] * (long)(waveyMcWaveFace.numValsBtwn(1, arr[n] - 2, 0, n)\n\t\t\t\t\t\t\t\t\t\t+ waveyMcWaveFace.numValsBtwn(arr[n] + 2, 2147483647, 0, n));\n\t\t\t\n\t\t\t// step two\n\t\t\t// negative part\n\t\t\tlong amtMinus = waveyMcWaveFace.sumOfValsBtwn(1, arr[n] - 2, 0, n)\n\t\t\t\t\t\t\t+ waveyMcWaveFace.sumOfValsBtwn(arr[n] + 2, 2147483647, 0, n);\n\t\t\t\n//\t\t\tSystem.out.println(amtPlus+\" \"+amtMinus);\n\t\t\tbigSum = bigSum.add(new BigInteger(\"\"+(amtPlus - amtMinus)));\n\t\t}\n\t\t\n\t\tSystem.out.println(bigSum);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n        Main solver = new Main();\n        solver.in = new InputReader(System.in);\n        solver.br = new BufferedReader(new InputStreamReader(System.in));\n        solver.out = new PrintWriter(System.out);\n        solver.solve();\n        solver.out.flush();\n        solver.out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        mp.clear();\n        Scanner cin = new Scanner(new BufferedInputStream(System.in));\n        BigInteger n = cin.nextBigInteger();\n        BigInteger x = cin.nextBigInteger();\n        mp.put(x, BigInteger.ONE);\n        BigInteger sum = x;\n        BigInteger ans = BigInteger.ZERO;\n        for (int i = 2;i <= n.intValue(); i++) {\n            x=cin.nextBigInteger();\n            BigInteger tmp = x.multiply(BigInteger.valueOf(i-1)).subtract(sum);\n            if (mp.containsKey(x.subtract(BigInteger.ONE))) tmp = tmp.subtract(mp.get(x.subtract(BigInteger.ONE)));\n            if (mp.containsKey(x.add(BigInteger.ONE))) tmp = tmp.add(mp.get(x.add(BigInteger.ONE)));\n            ans = ans.add(tmp);\n            sum = sum.add(x);\n            BigInteger xx;\n            if (mp.containsKey(x)) xx = mp.get(x);\n            else xx = BigInteger.ZERO;\n            mp.put(x, xx.add(BigInteger.ONE));\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        MyReader in = new MyReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "            public static void main(String[] args) throws Exception\n                new Thread(null, new Runnable()\n                {\n                public void run()\n                {\n                    try {\n         } catch (Exception e)\n                    {\n                        System.out.println(e);\n                    }\n                }\n            }, \"1\", 1 << 26).start();\n                new Main1().soln();\n            }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception { new D().run(); }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "  public static void main(String[] args) {\n    init();\n\n    int n = in.nextInt();\n\n    long total = 0L;\n\n\n\n    int arr[] = new int[n+5];\n\n    Map<Integer, Integer> freq = new HashMap<>();\n    Map<Integer, Integer> kiri = new HashMap<>();\n\n    for (int i = 1; i <= n; ++i){\n     arr[i] = in.nextInt();\n      if (freq.containsKey(arr[i])) {\n        freq.put(arr[i], freq.get(arr[i])+1);\n      } else {\n        freq.put(arr[i], 1);\n        kiri.put(arr[i], 0);\n      }\n      total += (long)arr[i];\n    }\n\n    BigInteger ans = BigInteger.valueOf(0L);\n\n    for (int i = 1; i <= n - 1; ++i) {\n      kiri.put(arr[i], kiri.get(arr[i])+1);\n      total -= arr[i];\n\n      int cnt_kanan = n - i;\n      long temp = total;\n      int cnt_sama = freq.get(arr[i]) - kiri.get(arr[i]);\n      temp -= (cnt_sama)*(long)arr[i];\n      cnt_kanan -= (cnt_sama);\n      if (freq.containsKey(arr[i]-1)) {\n        int cnt_kurang = freq.get(arr[i]-1) - kiri.get(arr[i]-1);\n        cnt_kanan -= cnt_kurang;\n        temp -= (long) cnt_kurang * (long)(arr[i]-1);\n      }\n      if (freq.containsKey(arr[i]+1)) {\n        int cnt_lebih = freq.get(arr[i]+1) - kiri.get(arr[i]+1);\n        cnt_kanan -= cnt_lebih;\n        temp -= (long)(cnt_lebih) * (long)(arr[i]+1);\n      }\n      temp -= (long)cnt_kanan * (long)arr[i];\n      ans = ans.add(BigInteger.valueOf(temp));\n    }\n\n    out.println(ans.toString());\n    out.close();\n  }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        D903 solver = new D903();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner in = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        \n        int n = in.nextInt();\n        long[] arr = new long[n];//in.nextLongArray(n);\n        for (int i = 0; i < n; i++) {\n            //if (i < n / 2) arr[i] = 1;\n            //else arr[i] = 1000000000;\n            arr[i] = in.nextLong();\n        }\n        long sum = 0;\n        long count = 0;\n        \n        TreeSet<Long> ts = new TreeSet<>();\n        ts.add(1L);\n        long oo = 1000000000 + 100;\n        ts.add(oo);\n        for (long a : arr) {\n            a += 10;\n            ts.add(a);\n            ts.add(a - 2);\n            ts.add(a + 2);\n        }\n        \n        long[] inds = new long[ts.size()];\n        int idx = 0;\n        for (long a : ts) {\n            inds[idx++] = a;\n        }\n        \n        SuperBIT bit1 = new SuperBIT(inds);\n        SuperBIT bit2 = new SuperBIT(inds);\n        BigInteger ans = BigInteger.valueOf(0);\n        \n        for (long a : arr) {\n            a += 10;\n            \n            long countLess = bit1.queryCompr(1, a - 2);\n            long sumLess = bit2.queryCompr(1, a - 2);\n            \n            long countMore = bit1.queryCompr(a + 2, oo);\n            long sumMore = bit2.queryCompr(a  + 2, oo);\n            \n            //System.out.println(a + \"  \" + countLess + \"  \" + sumLess + \"  \" + countMore + \"  \" + sumMore);\n            bit1.updateCompr(a, 1);\n            bit2.updateCompr(a, a);\n            \n            long tmp = 0;\n            tmp += countLess * a - sumLess;\n            tmp -= sumMore - countMore * a;\n            ans = ans.add(BigInteger.valueOf(tmp));\n        }\n        \n        out.println(ans);\n        \n        \n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastReader in = new FastReader(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = in.nextInt();\n        int a[] = new int[n+1];\n        int b[] = new int[n+1];\n        TreeSet<Integer> set = new TreeSet<>();\n        for(int i = 1; i <= n; i++){\n            a[i] = in.nextInt();\n            set.add(a[i]);\n        }\n        int k = 0;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int last = set.first();\n        for(int i : set){\n            if(i - last > 1) k += 2;\n            else k += 1;\n            map.put(i, k);\n            last = i;\n        }\n\n        for(int i = 1; i <= n; i++){\n            b[i] = map.get(a[i]);\n        }\n\n        BinaryIndexTree bit = new BinaryIndexTree(k);\n        BinaryIndexTree freq = new BinaryIndexTree(k);\n\n\n        BigInteger res = BigInteger.ZERO;\n\n        for(int i = n; i >= 1; i--){\n            long l = bit.query(1, b[i]-2), r = bit.query(b[i]+2, k);\n            long lf = freq.query(1, b[i]-2), rf = freq.query(b[i]+2, k);\n\n            res = res.add(BigInteger.valueOf(r));\n            res = res.add(BigInteger.valueOf(l));\n            res = res.subtract(BigInteger.valueOf(rf*a[i]));\n            res = res.subtract(BigInteger.valueOf(lf*a[i]));\n            \n            bit.add(b[i], a[i]);\n            freq.add(b[i], 1);\n        }\n\n        pw.println(res);\n\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tBigInteger ans = BigInteger.ZERO;\n\t\tint n = sc.nextInt();\n\t\tint arr[] = new int[n];\n\t\tlong cum[] = new long[n];\n\t\t\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tarr[i] = sc.nextInt();\n\t\t\n//\t\tint n=(int)2e5;\n//\t\tfor(int i=0;i<n;i++){\n//\t\t\tarr[i]=1;\n//\t\t\tif(i>n/2)\n//\t\t\t\tarr[i]=(int)1e9;\n//\t\t}\n\t\t\n\t\tfor (int i = 0; i < cum.length; i++)\n\t\t{\n\t\t\tcum[i] = arr[i];\n\t\t\tif(i > 0)\n\t\t\t\tcum[i] += cum[i-1];\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tans = ans.add(BigInteger.valueOf((1l*(i+1)*arr[i] - cum[i])));\n\t\t\n\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tans =  ans.subtract(BigInteger.valueOf(map.getOrDefault(arr[i]-1, 0)));\n\t\t\tans = ans.add(BigInteger.valueOf(map.getOrDefault(arr[i]+1, 0)));\n\t\t\tmap.put(arr[i], map.getOrDefault(arr[i], 0)+1);\n\t\t}\n\t\t\n\t\tpw.println(ans);\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) {\n        Scanner cin = new Scanner(System.in);\n        long k, j, p,sum,equal,bigone,lessone,cnt;\n        BigInteger ans;\n        int i,n;\n        while (cin.hasNext()) {\n            n=cin.nextInt();\n            check.clear();\n            for(i=1;i<=n;i++)\n            {\n                a[i]=cin.nextLong();\n            }\n            postfix[n+1]=0L;\n            for(i=n;i>=1;i--) {\n                postfix[i] = postfix[i + 1] + a[i];\n                if (check.containsKey(a[i]) == true) {\n                    Long v = check.get(a[i]);\n                    v += 1;\n                    check.put(a[i], v);\n                }\n                else\n                    check.put(a[i],1L);\n            }\n            ans=BigInteger.ZERO;\n            for(i=1;i<n;i++){\n                Long v=check.get(a[i]);\n                v--;\n                check.put(a[i],v);\n                equal=check.get(a[i]);\n                bigone=0L;\n                lessone=0L;\n                if(check.containsKey(a[i]+1L)==true)\n                bigone=check.get(a[i]+1L);\n                if(check.containsKey(a[i]-1L)==true)\n                lessone=check.get(a[i]-1L);\n                sum=postfix[i]-bigone*(a[i]+1L)-lessone*(a[i]-1L)-equal*a[i]-a[i];\n                cnt=n-i-bigone-lessone-equal;\n                ans=ans.add(BigInteger.valueOf(a[i]*cnt).subtract(BigInteger.valueOf(sum)));\n            }\n            System.out.println(ans.multiply(BigInteger.valueOf(-1)));\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\n        try {\n            in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n            ins = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n            out = new PrintWriter(System.out);\n            try {\n                if (System.getProperty(\"xDx\") != null) {\n                    in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n                    ins = new Scanner(new FileReader(\"input.txt\"));\n                    out = new PrintWriter(new FileWriter(\"output.txt\"));\n                }\n            } catch (Exception e) {\n                in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n                ins = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n                out = new PrintWriter(System.out);\n            }\n            new Main().run();\n        } catch (Throwable e) {\n//            e.printStackTrace();\n            throw new RuntimeException(e);\n        } finally {\n            out.close();\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint w = sc.nextInt(), h = sc.nextInt() , n = sc.nextInt();\n\t\tTreeSet<Integer> vCuts = new TreeSet<>() , hCuts = new TreeSet<>();\n\t\tTreeMap<Integer, Integer> vSegments = new TreeMap<>() , hSegments = new TreeMap<>();\n\t\tvCuts.add(0);vCuts.add(w);\n\t\thCuts.add(0);hCuts.add(h);\n\t\tinsert(vSegments, w, 1);\n\t\tinsert(hSegments, h, 1);\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(n-->0)\n\t\t{\n\t\t\tif(sc.next().equals(\"H\"))\n\t\t\t\tcut(hCuts, hSegments, sc.nextInt());\n\t\t\telse\n\t\t\t\tcut(vCuts, vSegments, sc.nextInt());\n\t\t\tsb.append(1l*hSegments.lastKey() * vSegments.lastKey() + \"\\n\");\n\t\t}\n\t\tSystem.out.println(sb);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        int[] a = new int[n];\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            a[i] = sc.nextInt();\n            sum += a[i];\n        }\n\n        for (int i = 0; i < n; i++)\n            a[i] *= -1;\n        Arrays.sort(a);\n        for (int i = 0; i < n; i++)\n            a[i] *= -1;\n\n        int ans = 0;\n        int sum1 = 0;\n        for (int i = 0; i < n; i++) {\n            sum1 += a[i];\n            sum -= a[i];\n            ans++;\n            if (sum1 > sum)\n                break;\n        }\n\n        pw.print(ans);\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\ttokenizer = null;\n\t\twriter = new PrintWriter(System.out);\n\t\tsolve();\n\t\treader.close();\n\t\twriter.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint n = sc.nextInt(), sum = 0;\n\t\t\n\t\tInteger[] A = new Integer[n];\n\t\t\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tA[i] = sc.nextInt();\n\t\t\tsum += A[i];\n\t\t}\n\t\t\n\t\tArrays.sort(A, Collections.reverseOrder());\n\t\t\n\t\tint c = 0, ans = 0;\n\t\t\n\t\twhile (ans <= sum) {\n\t\t\tans += A[c];\n\t\t\tsum -= A[c];\n\t\t\tc++;\n\t\t}\n\t\t\n\t\tSystem.out.println(c);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        \n        int n=sc.nextInt();\n        int[]a=new int[n];\n        \n        int su=0;\n        for(int i=0;i<n;i++)\n        {\n            a[i]=-sc.nextInt();\n            su+=-1*a[i];\n        }\n        Arrays.sort(a);\n        \n        \n        int ss=0;\n        for(int i=0;i<n;i++)\n        {\n            ss+=-1*a[i];\n            su-=-1*a[i];\n            if(ss > su)\n            {\n                System.out.println(i+1);\n                return;\n            }\n        }\n        \n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\n\t\tif (test) { // run all cases from testfile:\n\t\t\tBufferedReader testdataReader = new BufferedReader(new FileReader(testDataFile));\n\t\t\tString readLine = testdataReader.readLine();\n\t\t\tint casenr = 0;\n\t\t\tout: while (true) {\n\t\t\t\tBufferedWriter w = new BufferedWriter(new FileWriter(feedFile));\n\t\t\t\tif (!readLine.equals(\"input\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\twhile (true) {\n\t\t\t\t\treadLine = testdataReader.readLine();\n\t\t\t\t\tif (readLine.equals(\"output\")) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tw.write(readLine + \"\\n\");\n\t\t\t\t}\n\t\t\t\tw.close();\n\t\t\t\tSystem.out.println(\"Answer on case \" + (++casenr) + \": \");\n\n\t\t\t\tnew A111_div2().solve();\n\t\t\t\tSystem.out.println(\"Expected answer: \");\n\n\t\t\t\twhile (true) {\n\t\t\t\t\treadLine = testdataReader.readLine();\n\n\t\t\t\t\tif (readLine == null) {\n\t\t\t\t\t\tbreak out;\n\t\t\t\t\t}\n\t\t\t\t\tif (readLine.equals(\"input\")) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(readLine);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"----------------\");\n\t\t\t}\n\t\t\ttestdataReader.close();\n\t\t} else { // run on server\n\t\t\tnew A111_div2().solve();\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] array = new int[n];\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarray[i] = sc.nextInt();\n\t\t\tsum += array[i];\n\t\t}\n\n\t\tint counter = 0;\n\t\tArrays.sort(array);\n\t\tint first = 0;\n\t\tfor (int j = n - 1; j >= 0; j--) {\n\t\t\tfirst += array[j];\n\t\t\tsum -= array[j];\n\t\t\tcounter++;\n\t\t\tif (first > sum) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(counter);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Solution(), \"\", 1 << 25).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        //in = new BufferedReader(new InputStreamReader(System.in));\n        //st = new StringTokenizer(\"\",\" \");\n        int n = in.nextInt();\n        arr = new int[n];\n        int sum = 0;\n        for (int i=0; i<n; i++){\n            arr[i] = in.nextInt();\n            sum +=arr[i];\n        }\n        Arrays.sort(arr);\n        int sum2= 0;\n        int ans = 0;\n        for (int i=n-1; i>=0; i--){\n            sum2+=arr[i];\n            //System.out.println(sum2 + \" \" + sum);\n            if (sum2>sum-sum2){\n                ans = n - i;\n                break;\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tin = new Scanner(System.in);\n\t\tout = new PrintWriter(System.out);\n\n\t\tnew SolA().run();\n\n\t\tin.close();\n\t\tout.close();\n\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)\n        new A();      \n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] a = new int[n];\n        int[] p = new int[n];\n        for (int i = 0; i < a.length; i++)\n            a[i] = p[i] = in.nextInt();\n        Arrays.sort(a);\n\n        int sum = 0;\n        int t = 0;\n        for (int i = 0; i < a.length; i++)\n            t += a[i];\n        int cnt = 0;\n        for (int i = a.length - 1; i >= 0; i--) {\n            cnt++;\n            sum += a[i];\n            if (t - sum < sum)\n                break;\n        }\n        System.out.println(cnt);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String [] argv)\n\t\tString filePath=null;\n\t\tif(argv.length>0)filePath=argv[0];\n\t\tnew A(filePath);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        // BufferedReader in = new BufferedReader(new\n        // InputStreamReader(System.in));\n        int n = in.readInt();\n        int[] inp = new int[n];\n        for (int i = 0; i < inp.length; i++) {\n            inp[i] = in.readInt();\n        }\n        Arrays.sort(inp);\n        int sum1 = 0;\n        int res = 0;\n        for (int i = inp.length - 1; i >= 0; i--) {\n            sum1 += inp[i];\n            res++;\n            int sum2 = 0;\n            for (int j = 0; j < i; j++) {\n                sum2 += inp[j];\n            }\n            if (sum1 > sum2) {\n                break;\n            }\n        }\n        System.out.println(res);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]){\n    Scanner in = new Scanner(System.in);\n int n=in.nextInt(),s=0;\n int[] a= new int[n];\n for (int i=0;i<n;i++) {a[i]=in.nextInt(); s+=a[i];}\n Arrays.sort(a); int k=0,ans=0;\n for (int i=n-1;i>=0;i--)\n\t if (k<=s/2) {k+=a[i];ans++;}\n System.out.println(ans);\n \n\t\t\n\t    \t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main (String[]args)\n\t\tScanner read = new Scanner (new BufferedInputStream (System.in));\n\t\tint n = read.nextInt();\n\t\tint[]arr = new int[n];\n\t\tint sum=0;\n\t\tint sum2=0;\n\t\tint coin=0;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tarr[i] = read.nextInt();\n\t\t\tsum+=arr[i];\n\t\t}\n\t\tArrays.sort(arr);\n\t\tfor(int i=n-1;i>=0;i--)\n\t\t{\n\t\t\tsum2+=arr[i];\n\t\t\tsum-=arr[i];\n\t\t\tcoin++;\n\t\t\tif(sum2>sum)\n\t\t\t\tbreak;\n\n\t\t}\n\t\tSystem.out.println(coin);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new solver().solve();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[])\tthrows IOException\n\t\tScanner c=new Scanner(System.in);\n\t\tint N=c.nextInt();\n\t\tint A[]=new int[N];\n\t\tfor(int i=0;i<N;i++) \n\t\t\t{\n\t\t\tA[i]=c.nextInt();\n\t\t\t}\n\t\tArrays.sort(A);\n\t\tint sum=0;\n\t\tfor(int i=0;i<N;i++) \n\t\t\t{\n\t\t\tsum+=A[i];\n\t\t\t}\n\t\tint my=0;\n\t\tint coins=0;\n\t\tfor(int i=N-1;i>=0;i--) \n\t\t\t{\n\t\t\tcoins++;\t\t\t//include coin i\n\t\t\tmy+=A[i];\n\t\t\tif(my>sum-my)\n\t\t\t\t{\n\t\t\t\tSystem.out.println(coins);\n\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] A = new int[n];\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            A[i] = in.nextInt();\n            sum += A[i];\n        }\n        Arrays.sort(A);\n        int cnt = 0;\n        int temp = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            temp += A[i];\n            sum -= A[i];\n            cnt++;\n            if (temp > sum)\n                break;\n        }\n        System.out.println(cnt);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), sum = 0, sum2 = 0;\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++){\n            a[i] = in.nextInt();\n            sum += a[i];\n        }\n        \n        Arrays.sort(a);\n        \n        for (int i = n - 1; i >=0; i--){\n            sum2 +=a[i];\n            if (sum2 * 2 > sum){\n                System.out.println(n - 1 - i + 1);\n                System.exit(0);             \n            }\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        (new A()).run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().inp();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tnew Main().execute();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++) a[i] = s.nextInt();\n\t\tint r = 0, an = 0;\n\t\tArrays.sort(a);\n\t\tint t = 0;\n\t\tfor(int z : a) t += z;\n\t\tfor(int i=a.length-1;i>=0;i--){\n\t\t\tr += a[i];\n\t\t\tan++;\n\t\t\tif (r > t - r) break;\n\t\t}\n\t\tSystem.out.println(an);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t(new Thread(null, new Solution(), \"1\", 1l << 28)).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Locale.setDefault(Locale.US);\n        if (!useFiles) {\n            inputReader = new InputReader(System.in, 1<<16);\n            outputWriter = new BufferedWriter(new OutputStreamWriter(System.out), 1<<16);\n        } else {\n            inputReader = new InputReader(new FileInputStream(new File(inFile)), 1<<16);\n            outputWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(outFile))), 1<<16);\n        }\n        new A().solve();\n        outputWriter.flush(); outputWriter.close();\n    }\n", "complexity": "nlogn"}
{"code": "  public static void main(String[] args) {\n    try {\n      br = new BufferedReader(new InputStreamReader(System.in));\n      //br = new BufferedReader(new FileReader(\"input.txt\"));\n      out = new PrintWriter(System.out);\n      //out = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n      new Main().solve();\n      out.close();\n    } catch (Throwable e) {\n      System.out.println(e);\n      System.exit(239);\n    }\n  }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        if(n==1){System.out.println(1); return;}\n        int []mas=new int[n];\n        int sum=0;\n        for (int i = 0; i < n; i++) {\n            mas[i]=sc.nextInt();\n            sum+=mas[i];\n        }\n        Arrays.sort(mas);\n        int sum1=0;\n        int ans=0;\n        for(int i=0;i<n;i++){\n            sum1+=mas[n-i-1];\n            if(sum1>(sum-sum1)){\n                ans=i;\n                break;\n            }\n        }\n        System.out.println(ans+1);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "", "complexity": "nlogn"}
{"code": "    public static void main(String [] args) {\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int [] a = new int [n];\n        int i;\n        int s = 0;\n        for (i = 0; i < n; i++) {\n            a[i] = scan.nextInt();\n            s += a[i];\n        }\n        Arrays.sort(a);\n        int sum = 0;\n        for (i = n - 1; i > -1; i--) {\n            sum += a[i];\n            if (s - sum < sum) {\n                System.out.println(n - i);\n                return;\n            }\n        }\n    }\n", "complexity": "nlogn"}
{"code": "            public static void main(String[] args) throws IOException {\n                    reader = new BufferedReader(new InputStreamReader(System.in));\n                    tokenizer = null;\n                    writer = new PrintWriter(System.out);\n                    solve();\n                    reader.close();\n                    writer.close();\n            }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new AA()).run();\n\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Round111A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[])throws Exception{\n        br=new BufferedReader(new InputStreamReader(System.in));\n        int n = toInt();\n        int nm[] = toIntArray();\n        double a=0.0;\n        double sum=0;\n        for(int i=0;i<n;i++){\n            sum+=nm[i];\n        }\n        a=sum/2;\n        Arrays.sort(nm);\n        int cur=0;\n        int count=0;\n        for(int i=nm.length-1;i>=0;i--){\n            cur+=nm[i];\n            count++;\n            if(cur>a){\n                break;\n            }\n        }\n        System.out.println(count);\n\n\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\trun();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        Solver solver = new Solver();\n        solver.open();\n        solver.solve();\n        solver.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new A(), \"\", 256 * 1024 * 1024).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main( final String[] args ) throws IOException {\n        final BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );\n        final int n = Integer.parseInt( br.readLine() );\n        final int[] a = new int[n];\n        final String[] parts = br.readLine().split( \" \" );\n        for ( int i = 0; i < n; ++i ) {\n            a[ i ] = Integer.parseInt( parts[ i ] );\n        }\n        System.out.println( solve( n, a ) );\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] val = new int[n];\n        for (int i=0; i<n; i++)\n            val[i] = in.nextInt();\n        Arrays.sort(val);\n        int sum = 0, count = 0;\n        for (int i=n-1; i>=0; i--)  {\n            count++;\n            sum += val[i];\n            int his = 0;\n            for (int j=0; j<i; j++) his += val[j];\n            if (his < sum)  break;\n        }\n        System.out.println(count);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        \n        int n = in.nextInt();\n        int[]a = new int[n];\n        int s =0;\n        for(int i =0 ; i < n;i++)\n        {\n            a[i] = in.nextInt();\n            s += a[i];\n        }\n        Arrays.sort(a);\n        int x =0;\n        int c =0;\n        for(int i =n-1 ; i >-1;i-- )\n        {\n            x +=a[i];\n            s -= a[i];\n            c++;\n            if(x > s)break;\n        }\n        System.out.println(c);\n    }\n", "complexity": "nlogn"}
{"code": "     public static void main(String args[])throws Exception\n         Scanner in=new Scanner(System.in);\n         // br=new BufferedReader(new InputStreamReader(System.in));\n         PrintWriter pw=new PrintWriter(System.out);\n         int n,i,j,k=0,l;\n         n=in.nextInt();\n         int a[]=new int[n];\n         int sum=0,sum1=0;\n         for(i=0;i<n;i++)\n         {\n            a[i]=in.nextInt(); \n            sum+=a[i];\n            }\n            Arrays.sort(a);\n         for(j=n-1;j>=0;j--)\n         {\n             sum1+=a[j];\n             k++;\n             if(sum1*2>sum)\n             break;\n            }\n            pw.println(k);\n         pw.flush();\n     }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int [] coins = new int [n];\n        for(int i = 0 ; i < n ; ++i)\n            coins[i] = sc.nextInt();\n        Arrays.sort(coins);\n        int ans = (int)1e9;\n        for(int i = 1 ; i <= n ; ++i){\n            int sum1 = 0;\n            int c = 0;\n            int j = n - 1;\n            for(j = n - 1 ; j >= 0 && c < i ; --j, ++c){\n                sum1 += coins[j];\n            }\n            int sum2 = 0;\n            for(int k = 0 ; k <= j ; ++k)\n                sum2 += coins[k];\n            if(sum1 > sum2){\n                System.out.println(i);\n                return;\n            }\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        scanner.nextLine();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = scanner.nextInt();\n        }\n\n        Arrays.sort(a);\n\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n\n        int take = 0, num = 0;\n\n        for (int i = n - 1; i > -1; i--) {\n            num++;\n            take += a[i];\n            sum -= a[i];\n            if (take > sum) {\n                break;\n            }\n        }\n\n        System.out.println(num);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new nA().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        // Introduce thread in order to increase stack size\n        new Problem111A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Testt().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String [] args) throws IOException, InterruptedException {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint x=sc.nextInt();\n\t\tint y=sc.nextInt();\n\t\tpair [] arr=new pair[x];\n\t\tfor(int i=0;i<x;i++) arr[i]=new pair(i, sc.nextInt(),0);\n\t\tfor(int i=0;i<x;i++) arr[i].y=sc.nextInt();\n\t\tArrays.sort(arr);\n\t\tPriorityQueue<Integer> qq=new PriorityQueue<>();\n\t\t//pw.println(Arrays.toString(arr));\n\t\tLong [] list=new Long [x];\n\t\tlong sum=0; \n\t\tfor(int i=0;i<x;i++) {\n\t\t\tpair w=arr[i];\n\t\t\tif(qq.size()<y) {\n\t\t\t\tqq.add(w.y);\n\t\t\t\tsum+=w.y;\n\t\t\t\tlist[w.i]=sum;\n\n\t\t\t}else if(!qq.isEmpty()) {\n\t\t\t\tsum+=w.y;\n\t\t\t\tlist[w.i]=sum;\n\t\t\t\tint first=qq.poll();\n\t\t\t\tif(w.y>first) {\n\t\t\t\t\tsum-=first;\n\t\t\t\t\tqq.add(w.y);\n\t\t\t\t}else {\n\t\t\t\t\tqq.add(first);\n\t\t\t\t\tsum-=w.y;\n\t\t\t\t}\n\t\t\t} else list[w.i]=(long) w.y;\n\t\t\t//pw.println(qq);\n\t\t}\n\t\tfor(Long w:list) pw.print(w+\" \"); \n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tint n=nextInt();\n\t\tint m=nextInt();\n\t\tlong b[]=new long[n];\n\t\tlong g[]=new long[m];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tb[i]=nextInt();\n\t\tfor(int i=0;i<m;i++)\n\t\t\tg[i]=nextInt();\n\t\tArrays.sort(b);\n\t\tArrays.sort(g);\n\t\tif(b[n-1]>g[0])\n\t\t\tSystem.out.println(\"-1\");\n\t\telse if(b[n-1]==g[0]){\n\t\t\tlong sum=0;\n\t\t\tfor(int i=0;i<m;i++)\n\t\t\t\tsum+=g[i];\n\t\t\tfor(int i=0;i<n-1;i++){\n\t\t\t\tsum+=(m*b[i]);\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}else{\n\t\t\tlong sum=0;\n\t\t\tfor(int i=0;i<m;i++)\n\t\t\t\tsum+=g[i];\n\t\t\tsum+=b[n-1];\n\t\t\tsum+=(b[n-2]*(m-1));\n\t\t\tfor(int i=0;i<n-2;i++){\n\t\t\t\tsum+=(m*b[i]);\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new PrintStream(System.out));\n        StringTokenizer st = new StringTokenizer(f.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        long[] arrB = new long[n];\n        long[] arrG = new long[m];\n        st=new StringTokenizer(f.readLine());\n        for(int i=0;i<n;i++){\n            arrB[i]=Long.parseLong(st.nextToken());\n        }\n        st=new StringTokenizer(f.readLine());\n        for(int j=0;j<m;j++){\n            arrG[j]=Long.parseLong(st.nextToken());\n        }\n        Arrays.sort(arrB);\n        Arrays.sort(arrG);\n        long ans = 0;\n//        for (int i = 0; i < n; i++) ans += arrB[i] * m;\n//        for (int i = 0; i < m - 1; i++) ans += arrG[i] - arrB[0];\n//        if (arrB[m - 1] != arrB[0]) {\n//            if (arrB.length == 1) {\n//                ans=-1;\n//            }\n//            else ans += arrG[m - 1] - arrB[1];\n//        }\n//        if (arrG[m-1] < arrB[0]) {\n//            ans=-1;\n//        }\n        for(int i=0;i<n;i++){\n            ans+=arrB[i]*(long)m;\n        }\n        for(int i=1;i<m;i++){\n            ans+=arrG[i]-arrB[n-1];\n        }\n        if(arrB[n-1]!=arrG[0]){\n            if(n==1){\n                ans=-1;\n            }\n            else{\n                //smallest g goes to second to last\n                ans+=arrG[0]-arrB[n-2];\n            }\n        }\n        if(arrB[n-1]>arrG[0]){\n            ans=-1;\n        }\n        System.out.println(ans);\n        f.close();\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tString[] s = br.readLine().trim().split(\" \");\n\t\tint n = Integer.parseInt(s[0]);\n\t\tint m = Integer.parseInt(s[1]);\n\t\tlong b[] = new long[n];\n\t\ts = br.readLine().trim().split(\" \");\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tb[i] = Integer.parseInt(s[i]);\n\t\t}\n\t\tlong g[] = new long[m];\n\t\ts = br.readLine().trim().split(\" \");\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tg[i] = Integer.parseInt(s[i]);\n\t\t}\n\t\tArrays.sort(b);\n\t\tArrays.sort(g);\n\t\tif(g[0] < b[n-1]) {\n\t\t\tSystem.out.println(\"-1\");\n\t\t}\n\t\telse if(g[0] == b[n-1]){\n\t\t\tlong ans = 0;\n\t\t\tfor(int i = 0; i < m; i++) {\n\t\t\t\tans += g[i];\n\t\t\t}\n\t\t\tfor(int i = 0; i < n-1; i++) {\n\t\t\t\tans += (m)*b[i];\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\n\t\t}\n\t\telse {\n\t\t\tlong ans = 0;\n\t\t\tfor(int i = 0; i < m; i++) {\n\t\t\t\tans += g[i];\n\t\t\t}\n\t\t\tfor(int i = 0; i < n-1; i++) {\n\t\t\t\tans += (m)*b[i];\n\t\t\t}\n\t\t\tans += b[n-1]-b[n-2];\n\t\t\tSystem.out.println(ans);\n\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Main2().solve();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int k = in.nextInt();\n        team[] t = new team[n];\n        for (int i = 0; i < n; i++)\n            t[i] = new team(in.nextInt(), in.nextInt());\n        Arrays.sort(t);\n        int cnt = 0;\n        team tm = t[t.length - k];\n        for (int i = t.length - 1; i >= 0; i--)\n            if (tm.equal(t[i]))\n                cnt++;\n        System.out.println(cnt);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int k = in.nextInt() - 1;\n        Point[] A = new Point[n];\n        for (int i = 0; i < n; i++)\n            A[i] = new Point(in.nextInt(), in.nextInt());\n        Arrays.sort(A, new Comparator<Point>() {\n            public int compare(Point o1, Point o2) {\n                if (o1.x != o2.x)\n                    return o2.x - o1.x;\n                if (o1.y != o2.y)\n                    return o1.y - o2.y;\n                return 0;\n            }\n        });\n        int i = k;\n        int j = k;\n        while (i >= 0 && A[i].x == A[k].x && A[i].y == A[k].y)\n            i--;\n        while (j < n && A[j].x == A[k].x && A[j].y == A[k].y)\n            j++;\n        System.out.println(j - i - 1);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new CF113_Div2_A(), \"\", 256 * (1L << 20)).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), k = in.nextInt();\n        int[] ind = new int[n];\n        int[] p = new int[n];\n        int[] t = new int[n];\n        for (int i = 0; i < n; i++){\n            ind[i] = i;\n            p[i] = in.nextInt();\n            t[i] = in.nextInt();\n        }\n        //System.out.println(\"erwer\");\n        for (int i = 0; i < n - 1; i++)\n         for (int j = i + 1; j < n; j++){\n             if (p[i] < p[j] || (p[i] == p[j] && t[i] > t[j])){\n                 int tmp = p[i];\n                 p[i] = p[j];\n                 p[j] = tmp;\n                 tmp = t[i];\n                 t[i] = t[j];\n                 t[j] = tmp;\n             }\n         }\n        \n        int i = k - 1;\n//      System.out.println(i+\" \"+p[i]);\n        while (i > 0 && p[i] == p[i - 1] && t[i] == t[i - 1]) i--;\n    //  System.out.println(i);\n        int j = 0;\n        while (i < n - 1 && p[i] == p[i + 1] && t[i] == t[i + 1]) {\n            i++;\n            j++;\n        }\n//      System.out.println(i);\n        System.out.println(j + 1);\n        \n        \n    }\n", "complexity": "nlogn"}
{"code": "    public static void main (String[]args) {\n        Main task = new Main();\n        task.solve();\n        task.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Solution(), \"\", 1 << 25).start();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException\n        new Solution().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new ProblemA();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tnew Main().execute();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Start().run();\n    }\n", "complexity": "nlogn"}
{"code": "\t\tpublic static void main(String args[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n=in.nextInt(),key=in.nextInt(),ans=0;\n\t\tint[] a = new int[101], b = new int[101];\n\t\tfor (int i=1;i<=n;i++) {a[i]=in.nextInt();b[i]=in.nextInt();}\n\t\tfor (int i=1;i<n;i++)\n\t\t\tfor (int j=i+1;j<=n;j++)\n\t\t\t\tif (a[i]<a[j] || (a[i]==a[j] && b[i]>b[j])) {\n\t\tint yed = a[i];a[i]=a[j];\t\t\ta[j]=yed;\n\t\tyed = b[i];b[i]=b[j];b[j]=yed;\n\t\t\t\t}\n\t\tint k=0;\n\t\t\n\t\t\n\t\tfor (int i=1;i<=n;i++) {\n\t\t\tif (a[i]==a[i-1] && b[i]==b[i-1]) k++; else \n\t\t\t\t{if (i>key && ans==0) ans = k;k=1;}\n\t\t\t\n\t\t}\n\t\tif (ans == 0) ans = k;\n\t\tSystem.out.println(ans);\n\t\t\n\t\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        int N = r.nextInt();\n        int K = r.nextInt() - 1;\n        \n        T[] a = new T[N];\n        for(int i = 0; i < N; i++)\n            a[i] = new T(r.nextInt(), r.nextInt());\n        \n        Arrays.sort(a, new Comparator<T>() {\n\n            @Override\n            public int compare(T x, T y) {\n                if(x.p > y.p)return -1;\n                else if(x.p == y.p){\n                    if(x.t < y.t)return -1;\n                    else if(x.t == y.t)return 0;\n                    else return 1;\n                }else return 1;\n            }\n        });\n        \n        int ret = 0;\n        for(int i = 0; i < N; i++)\n            if(a[i].p == a[K].p && a[i].t == a[K].t)ret++;\n        \n        System.out.println(ret);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n        String[] data = s.readLine().split(\" \");\n        int n =  Integer.valueOf(data[0]);\n        int k =  Integer.valueOf(data[1]);\n\n        \n        Team[] t = new Team[n];\n        for (int i = 0 ; i < n ; i++) {\n            String[] line = s.readLine().split(\" \");\n            t[i] = new Team(Integer.valueOf(line[0]), Integer.valueOf(line[1]));\n        }\n        Arrays.sort(t, new Comparator<Team>(){\n            public int compare(Team arg0, Team arg1) {\n                if (arg0.solved != arg1.solved) {\n                    return arg1.solved - arg0.solved;\n                }\n                return arg0.penalty - arg1.penalty;\n            }\n        });\n        \n        \n        int idx = k - 1;\n        int ksol = t[idx].solved;\n        int kpen = t[idx].penalty;\n        int count = 0;\n        for (int i = 0 ; i < n ; i++) {\n            if (t[i].solved == ksol && t[i].penalty == kpen) {\n                count++;\n            }\n        }\n        System.out.println(count);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tInputReader sc=new InputReader(System.in);\n\t\tint n=sc.readInt(),k=sc.readInt(),i,j,z;\n\t\tT m[]=new T[n];\n\t\tfor(i=0;i<n;i++) {m[i]=new T();m[i].s=sc.readInt();m[i].p=sc.readInt();}\n\t\tfor(i=0;i<n;i++) for(j=i+1;j<n;j++)\tif(m[i].s<m[j].s){z=m[i].s;m[i].s=m[j].s;m[j].s=z;z=m[i].p;m[i].p=m[j].p;m[j].p=z;}\n\t\tfor(i=0;i<n;i++) for(j=i+1;j<n;j++)\tif(m[i].s==m[j].s&&m[i].p>m[j].p){z=m[i].s;m[i].s=m[j].s;m[j].s=z;z=m[i].p;m[i].p=m[j].p;m[j].p=z;}\n\t\tk--;int s=m[k].s,p=m[k].p,res=0;\n\t\tfor(i=0;i<n;i++){if(m[i].s==s&&m[i].p==p)res++;}\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s = r.readLine();\n\t\tString[] sp = s.split(\"[ ]+\");\n\t\tint n = new Integer(sp[0]), k = new Integer(sp[1]) - 1;\n\t\tO[] arr = new O[n];\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\ts = r.readLine();\n\t\t\tsp = s.split(\"[ ]+\");\n\t\t\tarr[i] = new O(new Integer(sp[0]), new Integer(sp[1]));\n\t\t}\n\t\tArrays.sort(arr);\n\n\t\tint res = 1;\n\n\t\tint i = k + 1;\n\t\twhile (i < arr.length && arr[i].problems == arr[k].problems\n\t\t\t\t&& arr[i].penalty == arr[k].penalty) {\n\t\t\ti++;\n\t\t\tres++;\n\t\t}\n\n\t\ti = k - 1;\n\t\twhile (i >= 0 && arr[i].problems == arr[k].problems\n\t\t\t\t&& arr[i].penalty == arr[k].penalty) {\n\t\t\ti--;\n\t\t\tres++;\n\t\t}\n\t\tSystem.out.println(res);\n\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws NumberFormatException,\n        // BufferedReader in = new BufferedReader(new\n        // InputStreamReader(System.in));\n        InputReader4 in = new InputReader4(System.in);\n        int n = in.readInt();\n        int k = in.readInt();\n        p[] inp = new p[n];\n        for (int i = 0; i < inp.length; i++) {\n            inp[i] = new p(in.readInt(), in.readInt());\n        }\n        Arrays.sort(inp);\n        for (int i = 0; i < inp.length;) {\n            int j = i + 1;\n            while (j < inp.length && inp[i].x == inp[j].x\n                    && inp[i].y == inp[j].y) {\n                j++;\n            }\n            int num = j - i;\n            if (k <= num) {\n                System.out.println(num);\n                return;\n            } else\n                k -= num;\n            i = j;\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String [] argv)\n\t\tString filePath=null;\n\t\tif(argv.length>0)filePath=argv[0];\n\t\tnew A(filePath);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[])throws Exception{\n        br=new BufferedReader(new InputStreamReader(System.in));\n        int nm[]=toIntArray();\n        int n=nm[0];\n        int k=nm[1];\n        Pai p[]=new Pai[n];\n        for(int i=0;i<n;i++){\n            nm=toIntArray();\n            p[i]=new Pai(nm[0],nm[1]);\n        }\n        Arrays.sort(p);\n        int count=0;\n        for(int i=0;i<n;i++){\n            if(p[k-1].first==p[i].first && p[k-1].second==p[i].second){\n                count++;\n            }\n        }\n        System.out.println(count);\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().inp();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int k = in.nextInt();\n        Point[] P = new Point[n];\n        for(int i=0; i<n; i++)\n            P[i] = new Point(in.nextInt(), in.nextInt());\n        Arrays.sort(P, new Comparator<Point>() {\n            public int compare(Point A, Point B) {\n                if(A.x != B.x) return B.x-A.x;\n                return A.y - B.y;\n            }\n        });\n        int cnt = 0;\n        Point ans = P[k-1];\n        for(int i=0; i<n; i++) {\n            if(P[i].x == ans.x && P[i].y==ans.y)\n                cnt++;\n        }\n        System.out.println(cnt);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] argv) {\n\t\tnew Main().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException{\n        st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n        pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int n = nextInt();\n        int k = nextInt();\n        Sort[]a = new Sort[n+1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = new Sort();\n            a[i].x = nextInt();\n            a[i].y = nextInt();\n        }\n        Arrays.sort(a,1, n+1);\n//      for (int i = 1; i <= n; i++) {\n//          System.out.println(a[i].x+\" \"+a[i].y);\n//      }\n//      int plase = 1;\n//      if (k==1) {\n//          int ans = 0;\n//          for (int j = 1; j <= n; j++) {\n//              if (a[j].x==a[1].x && a[j].y ==a[1].y) {\n//                  ans++;\n//              }\n//          }\n//          System.out.println(ans);\n//          return;\n//      }\n//      for (int i = 2; i <= n; i++) {\n//          if (a[i].x==a[i-1].x && a[i].y==a[i-1].y) {\n//              \n//          }\n//          else {\n//              plase++;\n//              if (plase==k) {\n//                  int ans = 0;\n//                  for (int j = 1; j <= n; j++) {\n//                      if (a[j].x==a[i].x && a[j].y ==a[i].y) {\n//                          ans++;\n//                      }\n//                  }\n//                  System.out.println(ans);\n//                  return;\n//              }\n//          }\n//      }\n        int ans = 0;\n        for (int i = 1; i <= n; i++) {\n            if (a[i].x==a[k].x && a[i].y==a[k].y)\n                ans++;\n        }\n        System.out.println(ans);\n        pw.close();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n  = scan.nextInt();\n\t\tint k = scan.nextInt()-1;\n\t\tteam[] t = new team[n];\n\t\tfor(int i = 0 ;i  < n ; i++)\n\t\t\tt[i] = new team(scan.nextInt(), scan.nextInt());\n\t\tArrays.sort(t);\n\t\tint a =0;\n\t\tint b = 0;\n\t\twhile(k+a < t.length-1 && t[k+a+1].compareTo(t[k]) == 0)\n\t\t\ta++;\n\t\twhile(k-b > 0 && t[k-b-1].compareTo(t[k]) == 0)\n\t\t\tb++;\n\t\tSystem.out.println(a+b+1);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        int k = input.nextInt() - 1 ;\n        int a[][] = new int[n][2];\n        for (int i = 0;i <n; i++) {\n            a[i][0]=input.nextInt();\n            a[i][1]=input.nextInt();\n        }\n        for (int i = 0; i<n; i++) {\n            for (int j=i+1; j<n; j++) {\n                if (a[i][0]<a[j][0]) {\n                    int x=a[i][0];\n                    int y=a[i][1];\n                    a[i][0]=a[j][0];\n                    a[i][1]=a[j][1];\n                    a[j][0]=x;\n                    a[j][1]=y;\n                    \n                }\n            }\n        }\n        for (int i = 0; i<n; i++) {\n            for (int j=i+1; j<n; j++) {\n                if ((a[i][1]>a[j][1])&&(a[i][0]==a[j][0])) {\n                    int x=a[i][0];\n                    int y=a[i][1];\n                    a[i][0]=a[j][0];\n                    a[i][1]=a[j][1];\n                    a[j][0]=x;\n                    a[j][1]=y;\n                    \n                }\n            }\n        }\n        int x = a[k][0];\n        int y = a[k][1];\n        int s = 0;\n        for (int i = 0; i<n; i++) {\n            if ((a[i][0]==x)&&(a[i][1]==y)) {\n                s++;\n            }\n        }\n        System.out.println(s);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) {\n         \n        new Main().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tlong time = System.currentTimeMillis();\n\t\tLocale.setDefault(Locale.US);\n\t\tnew A().run();\n\t\tSystem.err.printf(\"%.3f\\n\", 1e-3 * (System.currentTimeMillis() - time));\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int k = in.nextInt() - 1;\n        Obe[] a = new Obe[n];\n        for (int i = 0; i < n; i++)\n            a[i] = new Obe(in.nextInt(), in.nextInt());\n\n        Arrays.sort(a);\n        int c = 0;\n\n        int p = 0, d = 0;\n        if (k > -1 && k < n) {\n            c = 1;\n            p = a[k].p;\n            d = a[k].d;\n        } else {\n            System.out.println(c);\n            return;\n        }\n        for (int i = k + 1; i < n; i++) {\n            if (a[i].p == p && a[i].d == d)\n                c++;\n        }\n        for (int i = k - 1; i > -1; i--) {\n            if (a[i].p == p && a[i].d == d)\n                c++;\n        }\n        System.out.println(c);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        PrintStream out = System.out;\n        //CODING TAIM\n\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        List<Team> l = new ArrayList<Team>();\n        for (int i = 0; i < n; i++) {\n            l.add(new Team(sc.nextInt(), sc.nextInt()));\n        }\n        Collections.sort(l, new Comparator<Team>() {\n                public int compare(Team a, Team b) {\n                    if (a.s == b.s)\n                        return a.t - b.t;\n                    return b.s - a.s;\n                }\n                });\n        int f = k - 1;\n        int la = k - 1;\n        Team p = l.get(k - 1);\n        while (la < n && l.get(la).s == p.s && l.get(la).t == p.t) la++;\n        while ( f >= 0 && l.get(f).s == p.s && l.get(f).t == p.t) f--;\n        out.println(la - f - 1);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[]) throws IOException\n        new A().solve();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), k = in.nextInt();\n        int x[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            int p = in.nextInt(), t = in.nextInt();\n            x[i] = (50 - p) * 100 + t;\n        }\n        Arrays.sort(x);\n        int cnt = 0;\n        for (int q: x)\n            if (q == x[k - 1]) cnt++;\n        System.out.println(cnt);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        StringTokenizer st = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(st.nextToken());\n\n        int k = Integer.parseInt(st.nextToken());\n\n        Team[] a = new Team[n];\n        int[] c = new int[n + 1];\n\n        for (int i = 0; i < n; i++) {\n            st = new StringTokenizer(in.readLine());\n            int p = Integer.parseInt(st.nextToken());\n            int t = Integer.parseInt(st.nextToken());\n\n            a[i] = new Team(p, t, i);\n        }\n\n        Arrays.sort(a);\n        int prev = 1;\n        c[1]++;\n\n        for (int i = 1; i < n; i++) {\n            if (a[i].pr == a[i - 1].pr && a[i].time == a[i - 1].time)\n                for (int j = i + 1; j >= prev; j--)\n                    c[j] = i + 2 - prev;\n            else {\n                prev = i + 1;\n                c[prev] = 1;\n            }\n        }\n\n        out.println(c[k]);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new Teams().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new Scanner(System.in);\n//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n//\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\n        int n = next(), k = next()-1;\n        int x[] = new int[n];\n        for (int i = 0;i < n;i++) x[i] = (100-next())*100+next();\n        Arrays.sort(x);\n        int res = 0, t = x[k];\n        for (int i = 0;i < n;i++) if (t == x[i]) res++;\n\n        out.println(res);\n\n\n        out.println();\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A113().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner myScanner = new Scanner(System.in);\n\t\tint n = myScanner.nextInt();\n\t\tint k = myScanner.nextInt();\n\t\tTeam[] queue = new Team[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tqueue[i] = new Team(myScanner.nextInt(), myScanner.nextInt());\n\t\t}\n\t\tArrays.sort(queue);\n\t\t\n\t\tint counter = 0;\n\t\tint i = 0;\n\t\tint p = -1;\n\t\tint t = -1;\n\t\tfor (; i < k; i++)\n\t\t{\n\t\t\tif (p == queue[i].problems && t == queue[i].penalty)\n\t\t\t\tcounter++;\n\t\t\telse\n\t\t\t{\n\t\t\t\tp = queue[i].problems;\n\t\t\t\tt = queue[i].penalty;\n\t\t\t\tcounter = 1;\n\t\t\t}\n\t\t}\n\t\tfor (; i < n; i++)\n\t\t{\n\t\t\tif (p == queue[i].problems && t == queue[i].penalty)\n\t\t\t\tcounter++;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\tSystem.out.println(counter);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tScanner sc=new Scanner();\n\t\tN=sc.nextInt();\n\t\tK=sc.nextInt();\n\t\tfor(int i=0;i<N;i++)\n\t\t{\n\t\t\tarray[i]=new team(sc.nextInt(),sc.nextInt());\n\t\t}\n\t\tArrays.sort(array,0,N);\n\t\t/*\n\t\tfor(int i=0;i<N;i++)\n\t\t\tSystem.out.println(array[i].problems);*/\n\t\t\n\t\tint shared=0;\n\t\tfor(int i=K-1;i>=0 && array[K-1].igual(array[i]);i--,shared++);\n\t\tfor(int i=K;i<N && array[K-1].igual(array[i]);i++,shared++);\n\t\tSystem.out.println(shared);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Solution().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t// long l = sc.nextLong();\n\t\t// int i = sc.nextInt();\n\t\t// String input = sc.nextLine();\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] p = new int[n];\n\t\tint[] t = new int[n];\n\t\tint[] score = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tp[i] = sc.nextInt();\n\t\t\tt[i] = sc.nextInt();\n\t\t\tscore[i] = p[i] * 100 + (50 - t[i]);\n\t\t}\n\t\tboolean[] called = new boolean[n];\n\t\tint x = 0;\n\t\tboolean check = false;\n\t\twhile(true){\n\t\t\tint max = 0;\n\t\t\tint y = 0;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tif(called[i]==false&&score[i]>max){max=score[i];}\n\t\t\t}\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tif(max==score[i]){\n\t\t\t\t\tcalled[i] = true;\n\t\t\t\t\tx++;\n\t\t\t\t\ty++;\n\t\t\t\t\tif(x==k){check=true;}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(check){\n\t\t\t\tSystem.out.println(y);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int k = scan.nextInt() - 1;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            int p = scan.nextInt();\n            int t = scan.nextInt();\n            arr[i] = -p * 10000 + t;\n        }\n        Arrays.sort(arr);\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == arr[k]) {\n                count++;\n            }\n        }\n        System.out.println(count);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        Solver solver = new Solver();\n        solver.open();\n        solver.solve();\n        solver.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        new TaskA().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tint m = s.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i] = s.nextInt();\n\t\t}\n\t\tSystem.out.println(func(n, m, arr)-func(n, m+1, arr));\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Map<Integer,Integer> map = new HashMap();\n        map.put(0,1);\n        int n = nextInt();\n        int m = nextInt();\n        int index = -1;\n        int a[] = new int[n];\n        for(int i=0;i<n;i++){\n            a[i]=nextInt();\n            if(a[i]==m)\n                index=i;\n        }\n        int sum = 0;\n        for(int i=0;i<index;i++){\n            if (a[i]<m)\n                sum--;\n            else\n                sum++;\n            if (map.containsKey(sum)){\n                map.put(sum,map.get(sum)+1);\n            }else {\n                map.put(sum,1);\n            }\n        }\n        long ans = 0;\n        for(int i=index;i<n;i++){\n            if (a[i]<m)\n                sum--;\n            else if(a[i]>m)\n                sum++;\n            if (map.containsKey(sum))\n                ans+=map.get(sum);\n            if (map.containsKey(sum-1))\n                ans+=map.get(sum-1);\n        }\n        out.print(ans);\n        out.flush();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        N = sc.nextInt();\n        U = new int[N-1];\n        V = new int[N-1];\n        for (int i = 0; i < N - 1; i++) {\n            U[i] = sc.nextInt()-1;\n            V[i] = sc.nextInt()-1;\n        }\n        A = sc.nextIntArray(N, -1);\n\n        System.out.println(solve() ? \"Yes\" : \"No\");\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint k = Integer.parseInt(st.nextToken());\n\t\t\n\t\tint[] temp = new int[1000001];\n\t\t\n\t\tStringTokenizer st1 = new StringTokenizer(br.readLine());\n\t\t\n\t\tfor (int i = 0; i < n; i++){\n\t\t\t\n\t\t\ttemp[Integer.parseInt(st1.nextToken())]++;\n\t\t}\n\t\t\n\t\tint b = k + 1;\n\t\t\n\t\tfor (int i = 1000000; i > 0; i--){\n\t\t\t\n\t\t\tif (temp[i] > 0){\n\t\t\t\tif (b <= k){\n\t\t\t\t\tn -= temp[i];\n\t\t\t\t}\n\t\t\t\tb = 1;\n\t\t\t}else{\n\t\t\t\tb++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(n);\n\t\t\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFA();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter out = new PrintWriter(System.out);\n        //Scanner sc = new Scanner();\n        Reader in = new Reader();\n        Main solver = new Main();\n        solver.solve(out, in);\n        out.flush();\n        out.close();\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt(), m = scanner.nextInt();\n        int[] vertical = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            vertical[i] = scanner.nextInt();\n        }\n\n        Arrays.sort(vertical);\n\n\n        ArrayList<Integer> horisontal = new ArrayList<>();\n        int amount = 0;\n        for (int i = 0; i < m; i++) {\n            int x1 = scanner.nextInt(), x2 = scanner.nextInt(), y = scanner.nextInt();\n            if (x1 == 1) {\n                amount++;\n                horisontal.add(x2);\n            }\n        }\n\n        Collections.sort(horisontal);\n\n\n        if (amount == 0) {\n            System.out.println(0);\n            return;\n        }\n\n\n        int minVal = amount, horSize = horisontal.size(), verLen = vertical.length;\n        int h = 0, v = 0;\n\n        for (; v < verLen && h < horSize; ) {\n\n           while (h < horSize && horisontal.get(h) < vertical[v]){\n               h++;\n               amount--;\n           }\n           minVal = Math.min(minVal, amount + v);\n\n            while (h < horSize && v < verLen && horisontal.get(h) >= vertical[v]){\n                minVal = Math.min(minVal, amount + v);\n                v++;\n            }\n\n        }\n\n        if(horisontal.get(horSize - 1) < 1E9){\n            minVal = Math.min(minVal, v);\n        }\n\n\n\n        System.out.println(minVal);\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A4();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) \n        InputReader sc=new InputReader(System.in);\n        int n=sc.nextInt();\n        int s=sc.nextInt();\n        card c[]=new card[n];\n        for(int i=0;i<n;i++)\n        {\n            int x=sc.nextInt();\n            int y=sc.nextInt();\n            c[i]=new card(x,y);\n        }\n        Arrays.sort(c,new sort());\n        int time=0;\n        for(int i=n-1;i>=0;i--)\n        {\n            time+=s-c[i].l;\n            if((c[i].r-time)>0)\n            time+=c[i].r-time;\n            s=c[i].l;\n        }\n        if(c[0].l!=0)\n        time+=c[0].l;\n        System.out.println(time);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n//        int[] arr = {1, 3, 7, 18};\n//        int bIndex = Arrays.binarySearch(arr, 4);\n//        System.out.println(bIndex);\n\n\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        Map<Integer, Integer> beacons = new TreeMap<>();\n\n        for (int i = 0; i < n; i++) {\n            int index = scan.nextInt();\n            int power = scan.nextInt();\n            beacons.put(index, power);\n        }\n        int[] indicesArr = new int[n];\n        int arrInd = 0;\n        for (int index : beacons.keySet()) {\n            indicesArr[arrInd] = index;\n            arrInd++;\n        }\n       // Integer[] indicesArr = ((Integer[])beacons.keySet().toArray());\n        int[] nDestroys = new int[n];\n        for (int i = 0; i < n; i++) {\n            int bIndex = Arrays.binarySearch(indicesArr, indicesArr[i] - beacons.get(indicesArr[i]));\n            if (bIndex < 0)\n                bIndex = -(bIndex + 1);\n            nDestroys[i] = i - bIndex;\n        }\n        int[] totalBeacons = new int[n];\n        int maxBeacons = 1;\n        totalBeacons[0] = 1;\n        for (int i = 1; i < n; i++) {\n            if (nDestroys[i] == 0)\n                totalBeacons[i] = totalBeacons[i - 1] + 1;\n            else {\n                if ((i - nDestroys[i] - 1) >= 0)\n                    totalBeacons[i] = totalBeacons[i - nDestroys[i] - 1] + 1;\n                else\n                    totalBeacons[i] = 1;\n            }\n               // totalBeacons[i] = totalBeacons[i - nDestroys[i]] + 1;\n            //totalBeacons[i] = i - nDestroys[i] + totalBeacons[i - nDestroys[i]] + 1;\n            if(totalBeacons[i] > maxBeacons)\n                maxBeacons = totalBeacons[i];\n        }\n//        System.out.println(\"\\ntotalBeacons array\");\n//        for (int i = 0; i < n; i++) {\n//            System.out.print(totalBeacons[i] + \" \");\n//        }\n//        if (maxBeacons == -1)\n//            System.out.println(n);\n        System.out.println(n - maxBeacons);\n    }\n", "complexity": "nlogn"}
{"code": "  public static void main(String[] args) throws IOException {\n    try (ChainReaction instance = new ChainReaction()) {\n      instance.solve();\n    }\n  }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)throws IOException{\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[][] point = new int[n][];\n        for(int i=0;i<n;i++) point[i] = new int[]{sc.nextInt(),sc.nextInt()};\n        Arrays.sort(point,(a,b)->((a[0]-a[1])-(b[0]-b[1])));\n        TreeMap<Integer,Integer> tm = new TreeMap<>();\n        int ans = 0;\n        for(int i=n-1;i>=0;i--){\n            int x = point[i][0], w = point[i][1];\n            Map.Entry<Integer,Integer> cur =  tm.ceilingEntry(x+w);\n            int curRes;\n            if(cur==null) curRes = 1;\n            else curRes = cur.getValue()+1;\n            ans = Math.max(ans,curRes);\n            Map.Entry<Integer,Integer> upper = tm.ceilingEntry(x-w);\n            if(upper==null||upper.getValue()<curRes) tm.put(x-w,curRes);\n            //Integer key = tm.\n        }\n        System.out.println(ans);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        TreeSet<Integer> v = new TreeSet<Integer>();\n        for(int i=0;i<n;i++) v.add(sc.nextInt());\n        Iterator<Integer> it = v.iterator();\n        it.next();\n        it.remove();\n        System.out.println(v.isEmpty() ? \"NO\" : v.iterator().next());\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Seq2.metod();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        in = new Parser(System.in);\n        out = new PrintWriter(System.out);\n        \n        int n= in.nextInt();\n        int min = 101;\n        boolean b = false;\n        int pmin = 101;\n        int t= 0 ;\n        for(int i=0; i<n; i++){\n            t = in.nextInt();\n            \n            if (t<min){if(min != pmin)b=true; if(b) pmin = min;  min = t;  continue;}\n            if (t>min && t<pmin){b=true; pmin = t;  continue;}\n            if (t>min && !b){b=true; pmin = t;  continue;}\n            //if (b){if(t<pmin){pmin = t; continue;}}\n            //out.print(min);\n            //out.print(pmin);\n        }\n        if (b) System.out.println(pmin); else System.out.println(\"NO\");\n        //out.flush();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[])\n        Scanner scan = new Scanner(System.in);\n        \n        int n = scan.nextInt();\n        \n        int[] a = new int[n];\n        \n        for(int i=0;i < n;i++)\n            a[i] = scan.nextInt();\n            \n        Arrays.sort(a);\n        \n        int min = a[0];\n        \n        for(int i=1;i < n;i++)\n        {\n            if(a[i] > min)\n            {\n                System.out.println(a[i]);\n                return;\n            }\n        }\n        \n        System.out.println(\"NO\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "        public static void main(String args[]) throws Exception{\n                new Main().run();\n        }\n", "complexity": "nlogn"}
{"code": "        public static void main(String[] args){ \n                Scanner sc = new Scanner(System.in); \n                int n = sc.nextInt(); \n                TreeSet<Integer> set = new TreeSet<Integer>(); \n \n                for(int i=0;i<n;i++){ \n                        set.add(sc.nextInt()); \n                } \n \n                if(set.size() >= 2) \n                        System.out.println(set.toArray()[1]); \n                else \n                        System.out.println(\"NO\"); \n        } \n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n//\t\tnew Thread(new Template()).start();\n\t\tnew TaskA().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new VtoraiaStat().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        // TODO code application logic here\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int iTotTerm, i, j, iSml = 0, iPos = 0;\n        iTotTerm = Integer.parseInt(br.readLine());\n        String seq[];\n        seq = br.readLine().split(\" \");\n        int iSeq[] = new int[iTotTerm];\n        for (i = 0; i < iTotTerm; i++) {\n            iSeq[i] = Integer.parseInt(seq[i]);\n        }\n        for (i = 0; i < iTotTerm; i++) {\n            iSml = iSeq[i];\n            iPos = i;\n            for (j = i; j < iTotTerm; j++) {\n                if (iSeq[j] < iSml) {\n                    iSml = iSeq[j];\n                    iPos = j;\n                }\n            }\n            iSeq[iPos] = iSeq[i];\n            iSeq[i] = iSml;\n            if (i != 0 && iSeq[i - 1] != iSeq[i]) {\n                break;\n            }\n        }\n        if (iSml != iSeq[0]) {\n            System.out.print(iSml);\n        } else {\n            System.out.print(\"NO\");\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String []args){\n\t\tScanner cin = new Scanner( System.in );\n\t\tint n  = cin.nextInt();\n\t\tint [] num = new int [ n ];\n\t\t\n\t\tfor (int i=0; i<n; i++)\n\t\t\tnum[i] = cin.nextInt();\n\t\t\n\t\tArrays.sort( num );\n\t\t\n\t\tint i = 0;\n\t\twhile ( i < n ){\n\t\t\tif ( num[i] != num[0] ) break;\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tif ( i == n ) System.out.println(\"NO\");\n\t\telse System.out.println(num[i]);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String args[])\n\tScanner c = new Scanner(System.in);\n\tString number = c.nextLine();\n\tint i = Integer.parseInt(number);\n\tif (i == 1)\n\t    {\n\t\tSystem.out.println(\"NO\");\n\t\treturn;\n\t    }\n\tString line = c.nextLine();\n\tString[] arr = line.split(\" \");\n\tint[] array = new int[i];\n\tfor (int j = 0; j < i; j++)\n\t    {\n\t\tarray[j] = Integer.parseInt(arr[j]);\n\t    }\n        int min = array[0];\n\tint second = 0;\n\tboolean thing = false;\n\tfor (int j = 0; j < i; j++)\n\t    {\n\t\tif (!thing && array[j] > min)\n\t\t    {\n\t\t\tsecond = array[j];\n\t\t\tthing = true;\n\t\t    }\n\t\tif (array[j] < min)\n\t\t    {\n\t\t\tsecond = min;\n\t\t\tmin = array[j];\n\t\t\tthing = true;\n\t\t    }\n\t\telse if (thing && array[j] > min && array[j] < second)\n\t\t    second = array[j];\n\t    }\n\tif (!thing)\n\t    System.out.println(\"NO\");\n\telse\n\t    System.out.println(second);\n\treturn;\t     \n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tif(n == 1)\n\t\t{\n//\t\t\tthrow new RuntimeException();\n\t\t\tint m = input.nextInt();\n\t\t\tSystem.out.println(\"NO\");\n//\t\t\tSystem.out.println(input.next());\n\t\t\treturn;\n\t\t}\n\t\tint[] num = new int[n];\n\t\tboolean flag  = false;\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tnum[i] = input.nextInt();\n\t\t\tif(num[i] != num[0])\n\t\t\t\tflag = true;\n\t\t}\n\t\tif(!flag)\n\t\t{\n\t\t\tSystem.out.println(\"NO\");\n\t\t\treturn;\n\t\t}\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tif(num[i] < min)\n\t\t\t\tmin = num[i];\n\t\tint min2 = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tif(num[i] <= min2 && num[i] > min)\n\t\t\t\tmin2 = num[i];\n\t\tSystem.out.println(min2);\n\t\t\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        ProblemA f = new ProblemA();\n        f.solve();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main2().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int first = Integer.MAX_VALUE, second = Integer.MAX_VALUE;\n\n        for (int i = 0, x; i < N; ++i) {\n            x = sc.nextInt();\n            if (x < first) {\n                second = first;\n                first = x;\n            } else if (x > first && x < second) {\n                second = x;\n            }\n        }\n\n        if (second == Integer.MAX_VALUE)\n            System.out.println(\"NO\");\n        else\n            System.out.println(second);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        HashSet<Integer> set = new HashSet<Integer>();\n        \n        for ( int i = 0 ; i < n ; ++i ) {\n            set.add(sc.nextInt());\n        } // for i\n        \n        ArrayList<Integer> list = new ArrayList<Integer>(set);\n        Collections.sort(list);\n        if(list.size() > 1)\n        System.out.println(list.get(1));\n        else\n            System.out.println(\"NO\");\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(new InputStreamReader(System.in));\n\t\tint n = s.nextInt();\t\n\t\tint [] ar = new int[n];\n\t\tfor (int i = 0; i < n ; i++) {\n\t\t\tar[i] = s.nextInt();\n\t \t}\n\t\tif(ar.length == 1){\n\t\t\tSystem.out.println(\"NO\");\n\t\t}else{\n\t\t\tArrays.sort(ar);\n\t\t\tint num = ar[0];\n\t\t\tboolean flag = false;\n\t\t\tfor (int i = 1; i < ar.length; i++) {\n\t\t\t\tif(ar[i]!= num){\n\t\t\t\t\tSystem.out.println(ar[i]);\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!flag)\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(in.readLine());\n\t\t\n\t\tint nums[] = new int[n];\n\t\tStringTokenizer tokenizer = new StringTokenizer(in.readLine(), \" \");\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tnums[i] = Integer.parseInt(tokenizer.nextToken());\n\t\t}\n\t\t\n\t\tArrays.sort(nums);\n\t\tint min = nums[0];\n\t\tint so = -200;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif(nums[i] != min) {\n\t\t\t\tso = nums[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(so != -200)\n\t\tSystem.out.println(so);\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "nlogn"}
{"code": "  public static void main(String[] args) throws Exception\n    new SecondOrderStatistics().run();\n  }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t    Scanner s = new Scanner(System.in);\n\t    int n = s.nextInt();\n\t    int[] a = new int[n];\n\t    for(int i=0;i<n;i++)\n\t        a[i] = s.nextInt();\n\t    Arrays.sort(a);\n\t    int min = a[0];\n\t    if (a[0] == a[n-1]){\n\t        System.out.println(\"NO\");\n\t    }else{\n\t        for(int i=1;;i++){\n\t            if (a[i] > min) {\n\t                System.out.println(a[i]);\n\t                break;\n\t            }\n\t        }\n\t    }\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Solution();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\n\t\tint n = nextInt();\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = nextInt();\n\t\t\n\t\tArrays.sort(a);\n\t\tint f = a[0], q = 1;\n\t\twhile (q < n && a[q] == f) q++;\n\t\t\n\t\tout.println(q < n ? a[q] : \"NO\");\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n\n        TreeSet<Integer> set = new TreeSet<Integer>();\n\n        for(int i=0;i<N;i++){\n            int a = sc.nextInt();\n            set.add(a);\n        }\n\n        if(set.size()==1)System.out.println(\"NO\");\n        else{\n            set.remove(set.first());\n            System.out.println(set.first());\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        int num=sc.nextInt();\n    if(num!=1)\n    {\n        ArrayList<Integer>data=new ArrayList<Integer>();\n        for (int i=0;i<num;i++){\n            data.add(sc.nextInt());\n            \n        }\n        Collections.sort(data);\n        \n        int ind=1;\n    \n        while( data.get(ind-1)==data.get(ind) )\n            {\n            ind++;\n            if(ind ==data.size())\n                break;\n            }\n        \n        if(data.size()>ind)\n        System.out.println(data.get(ind));\n        else\n            System.out.println(\"NO\");\n        \n        \n    }\n    else\n        System.out.println(\"NO\");\n    }\n", "complexity": "nlogn"}
{"code": " public static void main(String[] args) \n  Scanner keyboard = new Scanner(System.in); \n  int size = keyboard.nextInt(); \n  int[] arr = new int[size]; \n  int i = 0; \n  while( size != 0 ) \n  {  \n   arr[i] = keyboard.nextInt(); \n   size--;  \n   i++; \n  } \n   //System.out.print(\"size \" + arr.length );\n   Arrays.sort(arr); \n \n   int index = 0; \n   boolean val = false; \n   int ans = 0; \n   for ( i = 0; i< arr.length-1 ; i++ ) \n   { \n    //System.out.print(\" arr[i] \" + arr[i] + \" arr[i+1] \" + arr[i+1] + \"\\n\" );\n    if( arr[i] != arr[i+1] ) \n    { \n     val = true; \n     //System.out.print(\"Changed val to true\");\n     index = i+1; \n      System.out.println(arr[index]); \n      return; \n    } \n   } \n     \n    if (size == 1 || ( val == false))\n    { \n        System.out.println(\"NO\");    \n    } \n \n    \n } \n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)throws IOException {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint minimum = 200, second = 200;\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tint temp = scan.nextInt();\n\t\t\tif(temp<minimum) {\n\t\t\t\tsecond = minimum;\n\t\t\t\tminimum = temp;\n\t\t\t} else if(temp>minimum&&temp<second) {\n\t\t\t\tsecond = temp;\n\t\t\t}\n\t\t}\n\t\tif(second>100) {\n\t\t\tSystem.out.println(\"NO\");\n\t\t} else {\n\t\t\tSystem.out.println(second);\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(\n\t\t\t\tnew OutputStreamWriter(System.out)));\n\t\tint n=Integer.parseInt(in.readLine());\n\t\tSet<Integer> set = new TreeSet<Integer>();\n\t\tStringTokenizer st= new StringTokenizer(in.readLine());\n\t\tint a;\n\t\tList<Integer> list =new LinkedList<Integer>();\n\t\twhile(st.hasMoreTokens()){\n\t\t\ta= Integer.parseInt(st.nextToken());\n\t\t\tif(!set.contains(a)){\n\t\t\t\tlist.add(a);\n\t\t\t\tset.add(a);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tif(list.size()==1){\n\t\t\tout.println(\"NO\");\n\t\t}else{\n\t\t\tCollections.sort(list);\n\t\t\tout.println(list.get(1));\n\t\t}\n\t\tout.close();\n\t\tSystem.exit(0);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Hashtable<Integer, Integer> hi = new Hashtable<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            int m = sc.nextInt();\n            hi.put(m, 1);\n        }\n        Set<Integer> set = hi.keySet();\n        Integer[] key = set.toArray(new Integer[set.size()]);\n        Arrays.sort(key);\n        try {\n            System.out.println(key[1]);\n        } catch (Exception e) {\n            System.out.println(\"NO\");\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\t//BufferedReader input = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t//BufferedWriter output = new BufferedWriter(new FileWriter(\"output.txt\"));\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tBufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\tStreamTokenizer in = new StreamTokenizer(input);\n\t\t\n\t\tin.nextToken();\n\t\tint n = (int)in.nval;\n\t\tint[] mas = new int[n];\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tin.nextToken();\n\t\t\tmas[i] = (int)in.nval;\n\t\t}\n\t\t\n\t\tArrays.sort(mas);\n\t\tint min = mas[0];\n\t\tint i = 1;\n\t\t\n\t\twhile ((i < n)&&(min == mas[i])) {\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tif (i < n) {\n\t\t\toutput.write(Integer.toString(mas[i]));\n\t\t}\n\t\telse {\n\t\t\toutput.write(\"NO\");\n\t\t}\n\t\tinput.close();\n\t\toutput.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) \n    \tScanner t = new Scanner(System.in);\n    \tint n=t.nextInt();\n    \tint a[]= new int[n];\n    \tfor(int i=0; i<n; i++)\n    \t\ta[i]=t.nextInt();\n    \tArrays.sort(a);\n    \tint r=a[0];\n    \tfor(int i=1; i<n; i++)\n    \t\t\tif(a[i]!=r)\n    \t\t\t{\n    \t\t\t\tSystem.out.println(a[i]);\n    \t\t\t\tSystem.exit(0);\n    \t\t\t}\n    \tSystem.out.println(\"NO\");       \t\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        // TODO code application logic hereSc\n        int n, i;\n        boolean status = false;\n        int answer;\n        Scanner in = new Scanner(System.in);\n        n = in.nextInt();\n        int a[] = new int[n];\n        for (i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n        }\n        Arrays.sort(a);\n        answer = a[0];\n        for (i = 1; i < n; i++) {\n            if (a[i] != answer) {\n                answer = a[i];\n                status = true;\n                i = n + 1;\n            }\n        }\n        if (status) {\n            System.out.println(answer);\n        } else {\n            System.out.println(\"NO\");\n        }\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Abra().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int first = Integer.MAX_VALUE, second = Integer.MAX_VALUE;\n\n        for (int i = 0, x; i < N; ++i) {\n            x = sc.nextInt();\n            if (x < first) {\n                second = first;\n                first = x;\n            } else if (x > first && x < second) {\n                second = x;\n            }\n        }\n\n        if (second == Integer.MAX_VALUE)\n            System.out.println(\"NO\");\n        else\n            System.out.println(second);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main (String [] args) throws IOException {\n        BufferedReader br = new BufferedReader (new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        int [] nums = new int[n];\n        args = br.readLine().split(\" \");\n        for (int i = 0; i < n; i++) {\n            nums[i] = Integer.parseInt(args[i]);\n        }\n        Arrays.sort(nums);\n        int min = nums[0];\n        for (int i = 1; i < n; i++) {\n            if (nums[i]>min) {\n                System.out.println(nums[i]); return;\n            }\n        }\n        System.out.println(\"NO\");\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int[] A = new int[N];\n        for (int i=0; i<N; i++)\n            A[i] = sc.nextInt();\n        Arrays.sort(A);\n        int i = 0;\n        while (i < A.length && A[i] == A[0]) i++;\n        System.out.println(i == A.length ? \"NO\" : A[i]);\n        sc.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(new InputStreamReader(System.in));\n        int n = s.nextInt();\n        if (n == 1) {\n            System.out.println(\"NO\");\n            System.exit(0);\n        }\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = s.nextInt();\n        }\n        Arrays.sort(nums);\n        int x = 1;\n        while (x < n && nums[x] == nums[x - 1])\n            x++;\n        if (x == n) {\n            System.out.println(\"NO\");\n            System.exit(0);\n        } else {\n            System.out.println(nums[x]);\n            System.exit(0);\n        }\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        //System.setIn(new FileInputStream(\"1\"));\n        in = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n\n        solve();\n\n        in.close();\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": " public static void main(String[] args)   \n  Scanner keyboard = new Scanner(System.in);   \n  int size = Integer.parseInt(keyboard.nextLine());   \n  int[] arr = new int[size];   \n  int i = 0;   \n  while( size != 0 )   \n  {    \n   arr[i] = keyboard.nextInt();   \n   size--;    \n   i++;   \n  }   \n   \n  if( arr.length == 1 )    \n  {   \n   System.out.println(\"NO\");   \n  }   \n  else   \n  {   \n   Arrays.sort(arr);   \n   boolean val = false;   \n   int ans = 0;   \n   for ( i = 0; i< arr.length-1 ; i++ )   \n   {   \n    if( arr[i] != arr[i+1] )   \n    {   \n     val = true;   \n     ans = arr[i+1];   \n     System.out.println(ans);   \n     i = arr.length;   \n    }    \n    else if( i == arr.length-2 ) //val == false  \n    {   \n     System.out.println(\"NO\");      \n    }   \n   }   \n  }\n }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        // Here is the solution:\n        new A().solve();\n        out.flush();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tint n = nextInt();\n\t\tint[] a = new int[n];\n\t\tfor (int i=0; i<n; i++)\n\t\t\ta[i] = nextInt();\n\t\tArrays.sort(a);\n\t\tint u = a[0];\n\t\tfor (int i=0; i<n; i++)\n\t\t\tif (a[i]>u) {\n\t\t\t\tout.println(a[i]);\n\t\t\t\tout.flush();\n\t\t\t\treturn;\n\t\t\t}\n\t\tout.println(\"NO\");\n\t\tout.flush();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        new Main().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tTreeSet<Integer> set = new TreeSet<Integer>();\n\n\t\tfor(int i=0;i<n;i++){\n\t\t\tset.add(sc.nextInt());\n\t\t}\n\n\t\tif(set.size() >= 2)\n\t\t\tSystem.out.println(set.toArray()[1]);\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\n\t\tnew One().solve();\n\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)throws Exception{\n\t//\tScanner sc =new Scanner(new File(\"input.txt\"));\n\t\tScanner sc =new Scanner(System.in);\n     // File file = new File(\"prime2.txt\");\n\t//\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file)));\n\t//\tsc.useDelimiter(\"(\\\\s)+|[,]\");\n\t//\tArrayList<Integer> lis = new ArrayList<Integer>();\n\t//ArrayList<String> lis = new ArrayList<String>();\n\t//System.out.println();\n    //  for(int i=0;i<;i++)\n\t\t\n   while(sc.hasNext()){\n\t \n\t int n=ni(sc),x[]=new int[n+1];\n\t for(int i=1;i<=n;i++)x[i]=ni(sc);\n\t sort(x);\n\t if(x[n]==1){x[n]=2;for(int i=1;i<=n;i++)System.out.print(x[i]+\" \");}\n\t else{x[0]=1;\n\t for(int i=0;i<n;i++)System.out.print(x[i]+\" \");\n\t }\n      \n   }\n\t \n\t   \n\t  \n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tboolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n\t\tReader reader;\n\t\treader=oj ? new InputStreamReader(System.in) : new FileReader(\"input.txt\");\n\t\tinput=new BufferedReader(reader);\n\t\tWriter writer=new OutputStreamWriter(System.out);\n\t\twriter=new BufferedWriter(writer);\n\t\toutput=new PrintWriter(writer);\n\t\tnew TaskA().Run();\n\t\toutput.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[]args) throws Exception\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        if (args.length > 0 && args[0].equals(\"Abra\")) debugMode = true;\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args)\n\t\tBufferedReader r =\t\n\t\t\t\tnew BufferedReader(new InputStreamReader(System.in), 1);\n\t\tString s = r.readLine();\n\t\tint n = Integer.parseInt(s);\n\t\tString s2 = r.readLine();\n\t\tStringTokenizer st = new StringTokenizer(s2,\" \");\n\t\tint a[] = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = Integer.parseInt(st.nextToken());\n\t\tArrays.sort(a);\n\t\tif (a[n - 1] == 1) a[n - 1] = 2;\n\t\telse {a[n - 1] = 1; Arrays.sort(a);}\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tSystem.out.println(a[i]);\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\trun();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t} catch (SecurityException e) {\n\t\t}\n\t\tnew Main().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(r.readLine());\n\n\t\tint[] ar = new int[n];\n\t\tStringTokenizer st = new StringTokenizer(r.readLine());\n\t\tfor (int x = 0; x < n; x++) {\n\t\t\tar[x] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tArrays.sort(ar);\n\t\tif (n == 1) {\n\n\t\t\tSystem.out.println(ar[0]==1?\"2\":\"1\");\n\t\t\treturn;\n\t\t}\n\t\tif (ar[n - 1] == 1) {\n\t\t\tar[n - 2] = 2;\n\t\t}\n\t\tSystem.out.print(\"1\");\n\t\tfor (int x = 0; x < n - 1; x++) {\n\t\t\tSystem.out.print(\" \" + ar[x]);\n\t\t}\n\t\tSystem.out.println();\n\t}\n", "complexity": "nlogn"}
{"code": "", "complexity": "nlogn"}
{"code": "    public static void main(String[] args){\n        new Thread(null, new A(), \"\", 256 * (1L << 20)).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\twriter = new PrintWriter(System.out);\n\n\t\tsetTime();\n\t\t\n\t\tint n = nextInt();\n\t\tint [] a = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\tint [] b = solve(a);\n\t\tfor (int v: b) {\n\t\t\twriter.print(v + \" \");\n\t\t}\n\t\t\n\t\tprintTime();\n\t\tprintMemory();\n\n\t\twriter.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        int n = nextInt();\n        \n        int[] mas = new int[n];\n        \n        for(int i = 0; i<n; i++) {\n            mas[i] = nextInt();\n        }\n        \n        Arrays.sort(mas);\n        \n        if(mas[n-1] == 1) {\n            for(int i = 0; i<n-1; i++) {\n                out.print(1 + \" \");\n            }\n            out.println(2);\n            out.flush();\n            exit();\n        }\n        \n        out.print(\"1 \");\n        \n        for(int i = 0; i<n-1; i++) {\n            out.print(mas[i] + \" \");\n        }\n        \n        out.println();\n        out.flush();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tnew A().solveProblem();\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\n        Scanner in=new Scanner(System.in);\n        \n        int n=in.nextInt();\n        \n        int[] mas=new int[n];\n        \n        for(int i=0;i<n;i++){\n            mas[i]=in.nextInt();\n        }\n        \n        Arrays.sort(mas);\n        \n        PrintWriter out=new PrintWriter(System.out);\n        \n        boolean isEd=true;\n        for(int i=0;i<n;i++)\n            if(mas[i]!=1){\n                isEd=false;\n                break;\n            }\n        \n        if(!isEd)\n            out.print('1');\n        \n        for(int i=0;i<n-1;i++){\n            out.print(' ');\n            out.print(mas[i]);\n        }\n        \n        if(isEd)\n            out.print(\" 2\");\n        \n        out.flush();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new CodeForce().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String... args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int n = sc.nextInt();\n        sc.nextLine();\n        int[] x = new int[n];\n        \n        int max=0, pos=-1;\n        for(int i=0; i<n; i++) {\n            x[i]=sc.nextInt();\n            if (max<x[i]) {\n                max=x[i];\n                pos=i;\n            }\n        }\n        x[pos] = (max==1) ? 2 : 1;\n        \n        Arrays.sort(x);\n\n        for(int i=0; i<n; i++) \n            System.out.print(x[i]+\" \");\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// Locale.setDefault(Locale.US);\n\t\tnew TaskA().run();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t} \n", "complexity": "nlogn"}
{"code": "\t public static void main(String[] args)\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint[] data=new int[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tdata[i]=sc.nextInt();\n\t\tArrays.sort(data);\n\t\tif(data[n-1]!=1)\n\t\t\tdata[n-1]=1;\n\t\telse\n\t\t\tdata[n-1]=2;\n\t\tArrays.sort(data);\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tSystem.out.print(data[i]);\n\t\t\tif(i!=n-1)\n\t\t\t\tSystem.out.print(\" \");\n\t\t}\n\t\t\t\n\t\t\n\t\treturn;\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main (String [] arg) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint [] A =new int [n];\n\t\tfor (int i = 0; i<A.length; ++i) A[i] = sc.nextInt();\n\t\tArrays.sort(A);\n\t\tif (n == 1) {\n\t\t\tSystem.out.println( (A[0] == 1) ? \"2\" : \"1\");\n\t\t\treturn;\n\t\t} else if (A[0] == A[A.length-1] && A[0] == 1) {\n\t\t\tSystem.out.print(\"1\");\n\t\t\tfor (int i = 1; i<n-1; ++i) System.out.print(\" \" + A[i]);\n\t\t\tSystem.out.println(\" 2\");\n\t\t\treturn;\n\t\t} else if (A[0] == A[A.length-1]) {\n\t\t\tSystem.out.print(\"1\");\n\t\t\tfor (int i = 1; i<n; ++i) System.out.print(\" \" + A[i]);\n\t\t\tSystem.out.println();\n\t\t\treturn;\n\t\t} \n\t\t\n\t\tfor (int i = 0; i<A.length; ++i) {\n\t\t\tint prev = (i == 0) ? Integer.MAX_VALUE : A[i-1];\n\t\t\tint next = (i == A.length-1) ? Integer.MAX_VALUE : A[i+1];\n\t\t\tint ans = Math.min(prev, Math.min(next, A[i]));\n\t\t\tif (i == 0) ans = 1;\n\t\t\t\n\t\t\tSystem.out.print((i == 0) ? \"\" + ans : \" \" + ans);\n\t\t}\n\t\tSystem.out.println();\n\t\t\n\t\t\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(in.readLine());\n        String[] S = in.readLine().split(\" \");\n        int[] A = new int[n];\n        boolean allOnes = true;\n        for (int i = 0; i < n; i++) {\n            A[i] = Integer.parseInt(S[i]);\n            allOnes &= A[i] == 1;\n        }\n        Arrays.sort(A);\n        if (A[A.length - 1] > 1)\n            A[A.length - 1] = 1;\n        else\n            A[A.length - 1] = 2;\n        Arrays.sort(A);\n        for (int i = 0; i < A.length; i++)\n            System.out.print(A[i] + \" \");\n        System.out.println();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew C().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception\n        new Main().solve();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tnew C().solution();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception { // {{{\n        new A();\n    } // }}}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Thread(null, new Solution(), \"\", 1 << 25).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        int[] a = new int[n];\n        boolean has_more_than_one = false;\n        for (int i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n            if (a[i] > 1)\n                has_more_than_one = true;\n        }\n\n        Arrays.sort(a);\n\n        if (n == 1) {\n            if (a[0] == 1)\n                out.print(2);\n            else\n                out.print(1);\n        } else {\n            out.print(1 + \" \");\n            for (int i = 1; i < n; i++) {\n                if (has_more_than_one || i < n - 1)\n                    out.print(a[i - 1] + \" \");\n                else\n                    out.println(2);\n            }\n        }\n\n        out.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n        (new Thread(new A())).start();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++)\n            a[i] = in.nextInt();\n        int max = a[0];\n        int ind = 0;\n        for (int k = 1; k < n; k++) {\n            if (a[k] > max) {\n                max = a[k];\n                ind = k;\n            }\n        }\n        if (max != 1) {\n            a[ind] = 1;\n            Arrays.sort(a);\n            for (int i = 0; i < a.length - 1; i++)\n                System.out.print(a[i] + \" \");\n            System.out.println(a[a.length - 1]);\n        } else {\n            a[0] = 2;\n            Arrays.sort(a);\n            for (int i = 0; i < a.length - 1; i++)\n                System.out.print(a[i] + \" \");\n            System.out.println(a[a.length - 1]);\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = s.nextInt();\n        }\n        Arrays.sort(arr);\n        int[] ans = new int[n];\n        \n        if (arr[n-1] == 1) {\n            for (int i = 0 ;i < n; i++) {\n                ans[i] = arr[i];\n            }\n            ans[n-1] = 2;\n        } else {\n            ans[0] = 1;\n            for (int i = 1; i < n; i++) {\n                ans[i] = arr[i-1];\n            }\n        }\n        StringBuffer buf = new StringBuffer();\n        for (int i = 0; i < n; i++) {\n            buf.append(ans[i]);\n            if (i != n-1) buf.append(' ');\n        }\n        System.out.print(buf.toString());\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        \n        int n = Integer.parseInt(r.readLine());\n        \n        String[] line = r.readLine().split(\"[ ]+\");\n        \n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = Integer.parseInt(line[i]);\n        \n        \n        Arrays.sort(a);\n        \n        boolean found = false;\n        for(int i = 0; i < n && !found; i++)\n            if(a[i] != 1)found = true;\n        \n        \n        if(found){\n            System.out.println(1);\n            for(int i = 1; i < n; i++)\n                System.out.println(a[i-1]);\n        }else{\n            for(int i = 0; i < n-1; i++)\n                System.out.println(1);\n            System.out.println(2);\n        }\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        // in = new Scanner(System.in);\n        st = new StreamTokenizer(new InputStreamReader(System.in));\n        n = nextInt();\n        a = new int[n];\n        int ind = 0;\n        for (int i = 0; i < n; ++i) {\n            a[i] = nextInt();\n            if (a[i] > max) {\n                max = a[i];\n                ind = i;\n            }\n        }\n        if (max == 1) {\n            a[0] = 2;\n        } else {\n            a[ind] = 1;\n        }\n        Arrays.sort(a);\n        for (int i = 0; i < n; ++i)\n            System.out.print(a[i] + \" \");\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint n = nextInt();\n\t\tint a[] = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\t\n\t\tfor (int q = 0; q < n; q++) {\n\t\t\tif (a[q] != 1) {\n\t\t\t\tout.print(\"1\");\n\t\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\t\tout.print(\" \" + a[i - 1]);\n\t\t\t\t}\n\t\t\t\tout.flush();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tout.print(\"1 \");\n\t\t}\n\t\tout.println(\"2\");\n\t\tout.flush();\n\t\t\n\t\t\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tProblemA solver = new ProblemA();\n        solver.solve();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception{\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws Exception {\n        new ProblemA();\n    }\n", "complexity": "nlogn"}
{"code": "  public static void main(String args[]) {\n    (new Main()).solve();\n  }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n    \tif (isStream) {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        } else {\n            br = new BufferedReader(new FileReader(\"in.txt\"));\n        }\n        out = new PrintWriter(System.out);\n        new Thread(new Solution()).start();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew A().run();\n\t}\n", "complexity": "nlogn"}
{"code": "        public static void main(String[] args){\n                new C().run();\n        }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader r=new BufferedReader(new InputStreamReader(System.in));\t\n\t\tString s=r.readLine();\n\t\tint n=new Integer(s);\n\t\tint[]arr=new int[n];\n\t\tString[]sp=r.readLine().split(\"[ ]+\");\n\t\tfor (int i = 0; i < sp.length; i++) {\n\t\t\tarr[i]=new Integer(sp[i]);\n\t\t}\n\t\tArrays.sort(arr);\n\t\tif(arr[arr.length-1]==1){\n\t\t\tarr[arr.length-1]=2;\n\t\t\tArrays.sort(arr);\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif(i==n-1){\n\t\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\t}else\n\t\t\t\tSystem.out.print(arr[i]+\" \");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tarr[arr.length-1]=1;\n\t\tArrays.sort(arr);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif(i==n-1){\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t}else\n\t\t\tSystem.out.print(arr[i]+\" \");\n\t\t}\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tLocale.setDefault(Locale.US);\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\t// new Thread(new Main()).start();\n\t\tnew Thread(null, new Main(), \"1\", 1 << 25).start();\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().inp();\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException \n\t\tnew C();\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tint n = in.nextInt(), m = in.nextInt();\n\t\tlong bounty = in.nextInt(), increase = in.nextInt();\n\t\tint damage = in.nextInt();\n\t\tint[] mh = new int[n];\n\t\tint[] sh = new int[n];\n\t\tint[] reg = new int[n];\n\t\tlong countKilled = 0;\n\t\tArrayList<Event> es = new ArrayList<>();\n\t\tEvent[] regen = new Event[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tmh[i] = in.nextInt();\n\t\t\tsh[i] = in.nextInt();\n\t\t\treg[i] = in.nextInt();\n\t\t\tif(sh[i] <= damage)\n\t\t\t\tcountKilled++;\n\t\t\tif(reg[i] > 0) {\n\t\t\t\tint time = (damage+1 - sh[i]+reg[i]-1)/reg[i];\n\t\t\t\tif(time > 0 && mh[i] >= damage+1) {\n\t\t\t\t\tEvent e2 = new Event(time, i, damage+1);\n\t\t\t\t\tregen[i] = e2;\n\t\t\t\t\tes.add(e2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<m;i++) {\n\t\t\tEvent e = new Event(in.nextInt(), in.nextInt()-1, in.nextInt());\n\t\t\tes.add(e);\n\t\t\tif(reg[e.e] > 0) {\n\t\t\t\tint time = (damage+1 - e.h+reg[e.e]-1)/reg[e.e];\n\t\t\t\tif(time > 0 && mh[e.e] >= damage+1) {\n\t\t\t\t\tEvent e2 = new Event(e.t + time, e.e, damage+1);\n\t\t\t\t\te.regen = e2;\n\t\t\t\t\tes.add(e2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tCollections.sort(es, (a,b) -> a.t-b.t);\n\t\tlong ans = countKilled*bounty;\n\t\tint lastTime = 0;\n\t\tfor(Event e : es) {\n\t\t\tif(e.t == -1) continue;\n\t\t\tif(regen[e.e] != e && regen[e.e] != null) {\n\t\t\t\tregen[e.e].t = -1;\n\t\t\t\tregen[e.e] = null;\n\t\t\t}\n\t\t\tif(lastTime != e.t) {\n\t\t\t\tans = Math.max(ans, countKilled*(bounty+(e.t-1)*increase));\n\t\t\t}\n\t\t\tif(sh[e.e] <= damage)\n\t\t\t\tcountKilled--;\n\t\t\tsh[e.e] = e.h;\n\t\t\tif(sh[e.e] <= damage)\n\t\t\t\tcountKilled++;\n\t\t\tif(e.regen != null) {\n\t\t\t\tregen[e.e] = e.regen;\n\t\t\t}\n\t\t\tlastTime = e.t;\n\t\t}\n\t\tif(countKilled != 0) {\n\t\t\tif(increase > 0)\n\t\t\t\tans = -1;\n\t\t\telse\n\t\t\t\tans = Math.max(ans, countKilled*bounty);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "nlogn"}
{"code": "\t\t\tpublic static void main(String[] args)\n\t\t\t\tInputReader in = new InputReader(System.in);\n\t\t\t\tPrintWriter pw = new PrintWriter(System.out);\n\n\t\t\t\tint n = in.nextInt();\n\t\t\t\tlong U = in.nextLong();\n\t\t\t\tlong[] E = new long[n];\n\t\t\t\tdouble max = -1;\n\t\t\t\t\n\t\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\t\tE[i] = in.nextLong();\n\t\t\t\t\n\t\t\t\tfor(int k=1;k<n-1;k++)\n\t\t\t\t{\n\t\t\t\t\tint i = k + 1, j = n - 1, mid = 0;\n\t\t\t\t\tdouble T = 0;\n\t\t\t\t\t\n\t\t\t\t\twhile(i < j)\n\t\t\t\t\t{\n\t\t\t\t\t\tmid = (int)Math.ceil((double)(i+j)/2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(E[mid] - E[k-1] <= U)\n\t\t\t\t\t\t\ti = mid;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tj = mid - 1;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tj = k;\n\t\t\t\t\tk = i;\n\t\t\t\t\ti = j - 1;\n\t\t\t\t\t\n\t\t\t\t\tT = E[k] - E[j];\n\t\t\t\t\tT /= E[k] - E[i];\n\t\t\t\t\t\n\t\t\t\t\tif(E[k] - E[i] <= U)\n\t\t\t\t\t\tmax = Math.max(max, T);\n\t\t\t\t\t\n\t\t\t\t\tk = j;\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t\tpw.println(max);\n\t\t\t\t\n\t\t\t\tpw.flush();\n\t\t\t\tpw.close();\n\t\t\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n\tScanner in = new Scanner (System.in);\n\tPrintWriter out = new PrintWriter(System.out);\n\n\tpair[] points = new pair [3];\n\tfor (int i = 0; i < 3; ++i) {\n\t    int x = in.nextInt();\n\t    int y = in.nextInt();\n\t    points[i] = new pair (x, y);\n\t}\n\n\tArrays.sort(points);\n\n\tint MaxY = Math.max(Math.max(points[0].y, points[1].y), points[2].y);\n\tint MinY = Math.min(Math.min(points[0].y, points[1].y), points[2].y);\n\n\tout.println(MaxY - MinY + points[2].x - points[0].x + 1);\n\tfor (int i = MinY; i <= MaxY; ++i)\n\t    out.println(points[1].x + \" \" + i);\n\tfor (int i = points[0].x; i < points[1].x; ++i)\n\t    out.println(i + \" \" + points[0].y);\n\tfor (int i = points[1].x + 1; i <= points[2].x; ++i)\n\t    out.println(i + \" \" + points[2].y);\n\t\n\tout.close();\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args)\n        new Thread(null ,new Runnable(){\n            public void run(){\n                try{\n                    solve();\n                } catch(Exception e){\n                    e.printStackTrace();\n                }\n            }\n        },\"1\",1<<26).start();\n        \n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(), m = sc.nextInt();\n\n        a = new int[101];\n        for (int i = 0; i < m; i++) {\n            int type = sc.nextInt();\n            a[type] = a[type] + 1;\n        }\n\n        int lo=1, hi=100, max=0;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo)/2;\n            if (check(n, mid)) {\n                max = mid;\n                lo = mid+1;\n            } else {\n                hi = mid -1;\n            }\n        }\n        System.out.println(max);\n    }\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt(), m = sc.nextInt();\n\n        a = new int[101];\n        for (int i = 0; i < m; i++) {\n            int type = sc.nextInt();\n            a[type] = a[type] + 1;\n        }\n\n        int lo=1, hi=100, max=0;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo)/2;\n            if (check(n, mid)) {\n                max = mid;\n                lo = mid+1;\n            } else {\n                hi = mid -1;\n            }\n        }\n        System.out.println(max);\n    }\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSolution solution = new Solution();\n\t\tSystem.out.println(solution.solve());\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSolution solution = new Solution();\n\t\tSystem.out.println(solution.solve());\n\t}\n", "complexity": "nlogn"}
{"code": "\tpublic static void main(String[] args) \n        FastReader sc = new FastReader(); \n        //PrintWriter out = new PrintWriter(System.out); \n        int n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tlong one = (long)Math.pow(2, k) - 1;\n\t\t\n\t\tlong[] arr = new long[n+1];\n\t\t\n\t\tarr[0] = 0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tarr[i] = sc.nextLong();\n\t\t\tarr[i] ^= arr[i-1];\n\t\t}\n\n\t\tMap<Long, Long> count = new HashMap<>();\n\n\t\tfor(int i=0;i<=n;i++){\n\t\t\tLong key = Math.min(arr[i], (arr[i]^one));\n\t\t\tLong val = count.get(key);\n\t\t\tif(val==null) val = 0L;\n\t\t\tcount.put(key, val+1);\n\t\t}\n\n\t\tlong num = n;\n\t\tlong ans = num*(num+1)/2;\n\t\t\n\t\tfor(Map.Entry<Long, Long> ent: count.entrySet()){\n\t\t\t\n\t\t\tLong cnt = ent.getValue();\n\t\t\t\n\t\t\tlong num1 = cnt/2;\n\t\t\tlong num2 = (cnt+1)/2;\n\t\t\t\n\t\t\tans -= ( (num1*(num1-1))/2 );\n\t\t\tans -= ( (num2*(num2-1))/2 );\n\t\t}\n\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "nlogn"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        BObtainingTheString solver = new BObtainingTheString();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\tint platforms = input.nextInt();\n\t\tint in = input.nextInt();\n\t\tint[] cols = new int[platforms];\n\t\tint[] squares = new int[in];\n\t\t\n\t\tfor (int i = 0; i < in; i ++) {\n\t\t\tsquares[i] = input.nextInt();\n\t\t}\n\t\t\n\t\tboolean hi = false;\n\t\tint score = 0;\n\t\t\n\t\tfor (int i = 0; i < in; i ++) {\n\t\t\tcols[squares[i] - 1] ++;\n\t\t\thi = checkscore(cols);\n\t\t\tif (hi == true) {\n\t\t\t\thi = false;\n\t\t\t\tscore ++;\n\t\t\t\tfor (int j = 0; j < cols.length; j ++) {\n\t\t\t\t\tcols[j] --;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(score);\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        int Q = scanner.nextInt();\n        while(Q-->0) {\n            int N = scanner.nextInt();\n            int K = scanner.nextInt();\n            String s1 = \"RGB\";\n            String s2 = \"GBR\";\n            String s3 = \"BRG\";\n            char[] arr = scanner.next().toCharArray();\n            int[] cnts = new int[3];\n            for(int i = 0; i < K; i++) {\n                int ind = i % 3;\n                if (arr[i] != s1.charAt(ind)) cnts[0]++;\n                if (arr[i] != s2.charAt(ind)) cnts[1]++;\n                if (arr[i] != s3.charAt(ind)) cnts[2]++;\n            }\n            int ans = Math.min(Math.min(cnts[0], cnts[1]), cnts[2]);\n            for(int i = K; i < N; i++) {\n                int ind = (K-1)%3;\n                int[] nextCnts = new int[3];\n                nextCnts[1] = cnts[0];\n                nextCnts[2] = cnts[1];\n                nextCnts[0] = cnts[2];\n                if ('R' != arr[i-K]) nextCnts[1]--;\n                if ('G' != arr[i-K]) nextCnts[2]--;\n                if ('B' != arr[i-K]) nextCnts[0]--;\n                if (arr[i] != s1.charAt(ind)) nextCnts[0]++;\n                if (arr[i] != s2.charAt(ind)) nextCnts[1]++;\n                if (arr[i] != s3.charAt(ind)) nextCnts[2]++;\n                cnts = nextCnts;\n                for(int j = 0; j < 3; j++) ans = Math.min(ans, cnts[j]);\n            }\n            out.println(ans);\n        }\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\taa = new ArrayList[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\taa[i] = new ArrayList<Integer>();\n\t\twhile (m-- > 0) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint i = Integer.parseInt(st.nextToken()) - 1;\n\t\t\tint j = Integer.parseInt(st.nextToken()) - 1;\n\t\t\taa[i].add(j);\n\t\t}\n\t\tvisited = new boolean[n];\n\t\tinstack = new boolean[n];\n\t\tstack = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tif (dfs1(i))\n\t\t\t\tbreak;\n\t\tif (cnt == 0) {\n\t\t\tSystem.out.println(\"YES\");\n\t\t\treturn;\n\t\t}\n\t\tfor (j_ = h_, i_ = stack[--cnt]; ; j_ = i_, i_ = stack[--cnt]) {\n\t\t\tArrays.fill(visited, false);\n\t\t\tArrays.fill(instack, false);\n\t\t\tboolean cycle = false;\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tif (dfs2(i)) {\n\t\t\t\t\tcycle = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (!cycle) {\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (i_ == h_)\n\t\t\t\tbreak;\n\t\t}\n\t\tSystem.out.println(\"NO\");\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskG solver = new TaskG();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E solver = new E();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  \n        st = new StringTokenizer(br.readLine());\n        int N = Integer.parseInt(st.nextToken());\n        int R = Integer.parseInt(st.nextToken());\n        double[] x = new double[N];\n        st = new StringTokenizer(br.readLine());\n        for (int i = 0; i < N; i++) {\n            x[i] = Double.parseDouble(st.nextToken());\n        }\n        double[] y = new double[N];\n        for (int i = 0; i < N; i++) {\n          //  int found = -1;\n            double maxy = R;\n            for (int j = i-1; j >= 0; j--) {\n                if(Math.abs(x[j] - x[i]) <= 2 * R){\n                    maxy = Math.max(y[j] + inc(x[j] - x[i],R), maxy);\n                }\n            }\n            \n            y[i] = maxy;\n        }\n        \n        for (int i = 0; i < y.length-1; i++) {\n            System.out.print(y[i] + \" \");\n        }\n        System.out.println(y[y.length-1]);\n       // System.out.println(Arrays.toString(y));\n    }  \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc=new FastScanner();\n        PrintWriter pw=new PrintWriter(System.out);\n        double eps=1e-12;\n        while(sc.hasNext()){\n            int n=sc.nextInt();\n            int r=sc.nextInt();\n            double[]shu=new double[n];\n            for(int i=0;i<n;i++)shu[i]=sc.nextDouble();\n            double[]res=new double[n];\n            for(int i=0;i<n;i++){\n                for(int j=0;j<i;j++){\n                    double temp=Math.abs(shu[i]-shu[j]);\n                    if(temp<2*r||Math.abs(temp-2*r)<eps){\n                        res[i]=Math.max(res[i],res[j]+Math.sqrt(4*r*r-temp*temp));\n                    }\n                }\n                res[i]=Math.max(res[i],r);\n            }\n            for(int i=0;i<n;i++){\n                pw.print(res[i]+\" \");\n            }\n            pw.flush();\n        }\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// InputStream inputStream = System.in; // Useful when taking input other than\n\t\t// console eg file handling // check ctor of inputReader\n\t\tInputReader scn = new InputReader();\n\t\t\n\t\tint n = scn.nextInt(), r = scn.nextInt();\n\t\tdouble[] y = new double[n];\n\t\tint[] x = new int[n];\n\t\tboolean[] mark = new boolean[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tx[i] = scn.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tdouble yc = r;\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\tif(i == j || !mark[j]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(x[i] + r < x[j] - r || x[i] - r > x[j] + r) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tyc = Math.max(yc, y[j] + Math.sqrt(Math.abs(Math.pow(x[i] - x[j], 2) - 4 * r * r)));\n\t\t\t}\n\t\t\ty[i] = yc;\n\t\t\tmark[i] = true;\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tSystem.out.print(y[i] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint r = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tarr[i] = sc.nextInt();\n\n\t\tdouble[] ans = new double[n];\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdouble max = 0;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tint difx = Math.abs(arr[i] - arr[j]);\n\t\t\t\tif (difx <= 2 * r) {\n\t\t\t\t\tmax = Math.max(max, ans[j] + Math.sqrt(4 * r * r - difx * difx));\n\t\t\t\t}\n\t\t\t}\n\t\t\tans[i] = max;\n\t\t}\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tpw.print(ans[i] + r + \" \");\n\t\tpw.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tnew C().run();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)throws Exception{\n\t\tMainMethod();\n\t\tprinter.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        int n=nextInt();\n        int r=nextInt();\n        int x[]=new int[n];\n        double y[]=new double[n];\n        for(int i=0;i<n;i++)\n            x[i]=nextInt();\n        for(int i=0;i<n;i++){\n            //(x1-x2)2+(y1-y2)2=r2\n            y[i]=r;\n            for(int j=0;j<i;j++){\n                int d=sq(2*r)-sq(x[i]-x[j]);\n                if(d>=0){\n                    double y1=Math.sqrt(d)+y[j];\n                    y[i]=Math.max(y1,y[i]);\n                }\n            }\n        }\n        for(int i=0;i<n;i++)\n            System.out.printf(\"%.12g \",y[i]);\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args){\n    InputReader reader = new InputReader(System.in);\n    PrintWriter pw = new PrintWriter(System.out);\n    int n = reader.nextInt();\n    int r = reader.nextInt();\n    int[] x = new int[n];\n    double[] y = new double[n];\n    \n    for(int i=0;i<n;++i){\n      int iniX = reader.nextInt();\n      double bestY = (double)r;\n      for(int j=0;j<i;++j){\n//         pw.printf(\"testing %d %d\\n\", i, j);\n        if(Math.abs(iniX - x[j]) < 2*r){\n//           pw.printf(\"on colision %d %d\\n\", i, j);\n          bestY = Math.max(bestY, collisionY((double)x[j], y[j], (double)iniX, r));\n        }\n        if(Math.abs(iniX - x[j]) == 2*r){\n//           pw.printf(\"touvhing %d %d\\n\", i, j);\n          bestY = Math.max(bestY, y[j]);\n        }\n      }\n      x[i] = iniX;\n      y[i] = bestY;\n    }\n    for(int i=0;i<n;++i){\n      pw.printf(\"%.9f \", y[i]);\n    }   \n    pw.flush();\n    pw.close();\n  }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] line = in.readLine().split(\" \");\n\t\tint n = Integer.parseInt(line[0]);\n\t\tint r=  Integer.parseInt(line[1]);\n\t\tline = in.readLine().split(\" \");\n\t\tdouble[] x = new double[n];\n\t\tdouble[] y= new double[n];\n\t\tfor(int i = 0; i<n; i++) {\n\t\t\ty[i] = r;\n\t\t\tx[i] = Integer.parseInt(line[i]);\n\t\t}\n\t\tfor(int i = 1; i<n; i++) {\n\t\t\tfor(int j = 0; j<i; j++) {\n\t\t\t\tif(Math.abs(x[i]-x[j])>r*2) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdouble low = y[j];\n\t\t\t\tdouble high = y[j]+(double)r*2.0;\n\t\t\t\tfor(int k = 0; k<85 && low<high; k++) {\n\t\t\t\t\tdouble mid = (low+high)/2.0;\n\t\t\t\t\tif(Point2D.distance(x[j], y[j], x[i], mid)<(double)r*2.0) {\n\t\t\t\t\t\tlow = mid;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thigh = mid;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ty[i] = Math.max(y[i], low);\n\t\t\t}\n\t\t}\n\t\tSystem.out.printf(\"%.15f\",y[0]);\n\t\tfor(int i = 1; i<n; i++) {\n\t\t\tSystem.out.printf(\" %.15f\",y[i]);\n\t\t}\n\t\tSystem.out.print(\"\\n\");\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) { new utkarsh().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tStringTokenizer t = new StringTokenizer(in.readLine());\n\t\tint N = Integer.parseInt(t.nextToken());\n\t\tint R = Integer.parseInt(t.nextToken());\n\t\tint[] x = new int[N];\n\t\tt = new StringTokenizer(in.readLine());\n\t\tfor(int i = 0; i < N; ++i)\n\t\t\tx[i] = Integer.parseInt(t.nextToken());\n\t\tdouble[] y = new double[N];\n\t\tfor(int i = 0; i < N; ++i) {\n\t\t\tdouble max = R;\n\t\t\tfor(int j = 0; j < i; ++j ) {\n\t\t\t\tint xDiff = Math.abs(x[i] - x[j]);\n\t\t\t\tif(xDiff <= 2 * R)\n\t\t\t\t\tmax = Math.max(max, y[j] + Math.sqrt(4*R*R - xDiff*xDiff));\n\t\t\t}\n\t\t\ty[i] = max;\n\t\t}\n\t\tout.print(y[0]);\n\t\tfor(int i = 1; i < N; ++i)\n\t\t\tout.print(\" \" + y[i]);\n\t\tout.println();\n\t\tin.close();\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\n        \n        String[] line = in.readLine().split(\" \");\n        int n = Integer.parseInt(line[0]);\n        int r = Integer.parseInt(line[1]);\n        \n        line = in.readLine().split(\" \");\n        int[] x = new int[n+1];\n        double[] y = new double[n+1];\n        \n        for (int i=1; i<=n; ++i) {\n            x[i] = Integer.parseInt(line[i-1]);\n            double maxy = -1.0;\n            for (int j=1; j<i; ++j) {\n                double x2 = x[i];\n                double x1 = x[j];\n                double y1 = y[j];\n                \n                double a = 1;\n                double b = -2 * y1;\n                double c = x1 * x1 + x2 * x2 - 2 * x1 * x2 + y1 * y1 - 4.0 * r * r;\n                \n                double D = b * b - 4 * a * c;\n                //System.out.println(i + \" \" + j + \" \" + D);\n                if (D >= 0) {\n                    double y2 = (-b + Math.sqrt(D)) / (2 * a);\n                    maxy = Math.max(maxy, y2);\n                }\n            }\n            if (maxy < 0) {\n                maxy = r;\n            }\n            y[i] = maxy;\n            if (i>1) {System.out.print(\" \");}\n            System.out.printf(\"%.13f\", y[i]);\n        }\n        System.out.println();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tif(!taskName.isEmpty()) {\n\t\t\tSystem.setIn(new BufferedInputStream(new FileInputStream(taskName + \".in\")));\n\t\t\tSystem.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(taskName + \".out\"))));\n\t\t}\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tMain main = new Main();\n\t\tmain.run(in, out);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner qwe = new Scanner(System.in);\n\t\tint n = qwe.nextInt();\n\t\tdouble r = qwe.nextDouble();\n\t\t\n\t\tdouble[] fy = new double[n];\n\t\tArrays.fill(fy, r);\n\t\t\n\t\tdouble[] xs = new double[n];\n\t\tfor (int i = 0; i < xs.length; i++) {\n\t\t\txs[i] = qwe.nextDouble();\n\t\t}\n\t\t\n\t\tfor(int i =0; i < n; i++){\n\t\t\t\n\t\t\tfor(int j = i+1; j < n; j++){\n\t\t\t\tdouble dx = xs[j]-xs[i];\n\t\t\t\tif(Math.abs(dx) > 2*r) continue;\n\t\t\t\tfy[j] = Math.max(fy[j], Math.sqrt(4*r*r-dx*dx)+fy[i]);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tStringBuilder stb = new StringBuilder();\n\t\tfor (int i = 0; i < xs.length; i++) {\n\t\t\tstb.append(fy[i]+\" \");\n\t\t}\n\t\tSystem.out.println(stb);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner input = new FastScanner();\n\t\tint n = input.nextInt();\n\t\tint radius = input.nextInt();\n\t\tArrayList<Integer> diskXToFall = new ArrayList<Integer>();\n\t\tfor (int a = 0; a < n; a++) {\n\t\t\tdiskXToFall.add(input.nextInt());\n\t\t}\n\t\tArrayList<P> stationaryDisks = new ArrayList<P>();\n\t\tfor (int a = 0; a < n; a++) {\n\t\t\tdouble highCollision = radius;\n\t\t\tfor (P i : stationaryDisks) {\n\t\t\t\tif (Math.abs(diskXToFall.get(a) - i.x) - 1e-8 <= 2 * radius) {\n\t\t\t\t\tdouble hypot = 2 * radius;\n\t\t\t\t\tdouble leg = Math.abs(diskXToFall.get(a) - i.x);\n\t\t\t\t\tdouble yOffset = Math.sqrt(Math.abs(hypot * hypot - leg * leg));\n\t\t\t\t\thighCollision = Math.max(highCollision, yOffset + i.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstationaryDisks.add(new P(diskXToFall.get(a), highCollision));\n\t\t}\n\t\tfor(int a = 0; a < n; a++) {\n\t\t\tSystem.out.print(stationaryDisks.get(a).y + \" \");\n\t\t}\n\t\t\n\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) throws FileNotFoundException {\n    (new _908C()).solve();\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException{\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        final double eps = 1e-7;\n        String toks[] = in.readLine().split(\" \");\n        int n = Integer.parseInt(toks[0]);\n        double r = Double.parseDouble(toks[1]);\n        double x[] = new double[n];\n        toks = in.readLine().split(\" \");\n        for (int i = 0; i < n; i++) {\n            x[i] = Double.parseDouble(toks[i]);\n        }\n        double lo, hi, mid;\n        double y[] = new double[n];\n        y[0] = r;\n        for (int i = 1; i < n; i++) {\n            y[i] = r;\n            for(int j=0; j<i; j++) {\n                lo = y[j]; hi = 2000*2000;\n                while( Math.abs(hi-lo) >= eps ) {\n                    mid = (hi+lo)/2;\n                    if( Math.sqrt( (x[i]-x[j])*(x[i]-x[j]) + (y[j]-mid)*(y[j]-mid) ) + eps > 2*r ) {\n                        hi = mid;\n                    } else {\n                        lo = mid;\n                    }\n                }\n                if(Math.sqrt( (x[i]-x[j])*(x[i]-x[j]) + (y[j]-lo)*(y[j]-lo) ) < 2*r + eps) {\n                    y[i] = Math.max(y[i], lo);\n                }\n            }\n        }\n        for (double z : y) {\n            System.out.printf(Locale.US, \"%.7f \", z);\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Kattio in = new Kattio(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n\t\tint n = in.nextInt();\n\t\tdouble r = in.nextInt();\n\t\tdouble[] x = new double[n+1];\n\t\tdouble[] y = new double[n+1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tx[i] = in.nextInt();\n\t\t}\n\t\t\n\t\tint[] lastx = new int[1001];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tdouble s = x[i] - r, e = x[i] + r;\n\t\t\tfor (int j = (int)Math.max(0, s); j <= (int)Math.min(1000, e); j++) {\n\t\t\t\tif (lastx[j] == 0) {\n\t\t\t\t\ty[i] = Math.max(y[i], findY(x[i], x[i], 0 - r, 2 * r));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ty[i] = Math.max(y[i], findY(x[lastx[j]], x[i], y[lastx[j]], 2 * r));\n\t\t\t\t}\n\t\t\t\tlastx[j] = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tout.println(y[i]);\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint num = in.nextInt();\n\t\tint rad = in.nextInt();\n\t\t\n\t\tint[] start = new int[num];\n\t\tfor(int i=0; i<num; i++)\n\t\t\tstart[i] = in.nextInt();\n\t\t\n\t\t// If you can hack doubles that's dumb\n\t\tdouble[] finalY = new double[num];\n\t\tdouble hyp = rad*2;\n\t\t\n\t\tfor(int cur=0; cur<num; cur++){\n\t\t\t\n\t\t\tdouble stopAt = rad;\n\t\t\tfor(int comp=0; comp<cur; comp++){\n\t\t\t\tif(Math.abs(start[comp]-start[cur]) > rad*2) continue;\n\t\t\t\t\n\t\t\t\tdouble base = Math.abs(start[comp]-start[cur]);\n\t\t\t\tdouble ny = Math.sqrt(hyp*hyp - base*base) + finalY[comp];\n\t\t\t\t\n\t\t\t\tstopAt = Math.max(ny, stopAt);\n\t\t\t}\n\t\t\t\n\t\t\tfinalY[cur] = stopAt;\n\t\t}\n\t\t\n\t\tfor(int i=0; i<num; i++)\n\t\t\tSystem.out.print(finalY[i]+\" \");\n\t\tSystem.out.println();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) { new C(); IOUtils.exit(); }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(reader.readLine(),\" \");\n        int n= Integer.parseInt(st.nextToken());\n        int r= Integer.parseInt(st.nextToken());\n        StringTokenizer st2 = new StringTokenizer(reader.readLine(),\" \");\n        double[][] coord = new double[n][2];\n        for (int i=0;i<n;i++) {\n            coord[i][0] = Integer.parseInt(st2.nextToken());\n            double y=r;\n            for (int j=0;j<i;j++) {\n                if (coord[j][0]<=coord[i][0]+2*r&&coord[j][0]>=coord[i][0]-2*r) {\n                    if (coord[j][1]+Math.sqrt(4*r*r-(coord[i][0]-coord[j][0])*(coord[i][0]-coord[j][0]))>y) {\n                        y=coord[j][1]+Math.sqrt(4*r*r-(coord[i][0]-coord[j][0])*(coord[i][0]-coord[j][0]));\n                    }\n                }\n            }\n            coord[i][1]=y;\n        }\n        for (int i=0;i<n;i++) {\n            System.out.print(coord[i][1]);\n            if (i<n-1) {\n                System.out.print(\" \");\n            } else {\n                System.out.print(\"\\n\");\n            }\n        }\n        reader.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tmain.solveC();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception{ new c(new Reader()); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t//BEGIN HERE\n\t\tint n = in.nextInt();\n\t\tint r = in.nextInt();\n\t\tint xs[] = new int[n];\n\t\tfor(int i = 0; i < n; i++) xs[i] = in.nextInt();\n\t\tdouble ys[] = new double[n];\n\t\tys[0] = r;\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tdouble worst = r;\n\t\t\tfor(int j = 0; j < i; j++) {\n\t\t\t\tif(xs[i] == xs[j]) {\n\t\t\t\t\tworst = Math.max(worst, ys[j] + r + r);\n\t\t\t\t}else if((xs[i] - xs[j]) * (xs[i] - xs[j]) <= 4*r*r ) {\n\n\t\t\t\t\tdouble hypot = r + r;\n\t\t\t\t\tdouble adj = Math.abs((xs[i] - xs[j]));\n\t\t\t\t\tdouble theta = Math.acos(adj/hypot);\n\t\t\t\t\tworst = Math.max(hypot * Math.sin(theta) + ys[j], worst);\n\t\t\t\t}\n\t\t\t}\n\t\t\tys[i] = worst;\n\t\t}\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tout.printf(\"%.10f \",ys[i]);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        StringBuilder sb = new StringBuilder();\n        n = sc.nextInt();\n        r = sc.nextInt();\n        x = new int[n];\n        horo = new HashMap<Integer, Double>();\n        for (int x = 0; x <= r*2; x++) {\n            double y = 2.0 *Math.sqrt(r * r - (r - x/2.0) * (r - x/2.0));\n            horo.put(x, y);\n        }\n        for (int i = 0; i < n; i++) {\n            x[i] = sc.nextInt();\n        }\n        List<Double> y = new ArrayList<Double>();\n        for (int i = 0; i < n; i++) {\n            double max = r;\n            for (int j = 0; j < y.size(); j++) {\n                int dx = intersects(i, j);\n                if (dx >= 0) {\n                    double dy = horo.get(dx);\n                    max = Math.max(max, dy + y.get(j));\n                }\n            }\n            y.add(max);\n        }\n        for (int i = 0; i < n; i++) {\n            sb.append(y.get(i) + \" \");\n        }\n        System.out.println(sb);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new Solution1(),\"Solution1\",1<<26).start();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputScanner in = new InputScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tFastScanner scanner = new FastScanner(System.in);\n\t\tsolve(scanner);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t    int n,r;\n\t    StringTokenizer st = new StringTokenizer(br.readLine());\n\t    n=Integer.parseInt(st.nextToken());\n\t    r=Integer.parseInt(st.nextToken());\n\t    \n\t    int arr[] = new int[n+1];\n\t    double cen[] = new double[n+1];\n\t    \n\t    int i,j;\n\t    \n\t    for(i=1;i<=n;i++)\n\t    cen[i]=-1.0;\n\t    \n\t    st = new StringTokenizer(br.readLine());\n\t    for(i=1;i<=n;i++)arr[i]=Integer.parseInt(st.nextToken());\n\t    \n\t    for(i=1;i<=n;i++)\n\t    {\n\t        int f=0;\n\t        double max=-1.0;\n\t        for(j=1;j<=n;j++)\n\t        {\n\t            if(i!=j && cen[j]!=-1.0 && (Math.abs(arr[i]-arr[j])<=2*r))\n\t            {\n\t                max=Math.max(max,cal(arr[j],cen[j],arr[i],r));\n\t                f=1;\n\t                \n\t            }\n\t        }\n\t       // System.out.println(i+\" \"+max);\n\t        if(f==1)\n\t        cen[i]=max;\n\t        else\n\t        cen[i]=r*1.0;\n\t    }\n\t    for(i=1;i<=n;i++)\n\t    System.out.print(cen[i]+\" \");\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner input = new Scanner(System.in);\n\t\tint numD = input.nextInt();\n\t\tdouble rad = input.nextInt();\n\t\tint[] xC = new int[numD];\n\t\tfor (int i = 0; i < numD; i++){\n\t\t\txC[i] = input.nextInt();\n\t\t}\n\t\tdouble[] maxY = new double[1001];\n\t\tfor (int i = 0; i < numD; i++){\n\t\t\tdouble h = rad;\n\t\t\tfor (int j = Math.max(1, xC[i]-(int)(2*rad)); j <= Math.min(1000, xC[i]+2*rad); j++){\n\t\t\t\tif (maxY[j] > 0){\n\t\t\t\t\th = Math.max(h, Math.sqrt(4*rad*rad-(j-xC[i])*(j-xC[i]))+maxY[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.print(h + \" \");\n\t\t\tmaxY[xC[i]] = h;\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        res = new double[n];\n        r = sc.nextInt();\n        int[] x = new int[n];\n        for (int i = 0; i < n; i++)\n            x[i] = sc.nextInt();\n\n        for (int i = 0; i < n; i++) {\n            double max = r;\n            for (int j = 0; j < i; j++) {\n                max = Math.max(max, solve(x[i], x[j], j));\n            }\n            if (i > 0) out.print(\" \");\n            res[i] = max;\n            out.printf(\"%.10f\", max);\n        }\n        out.println();\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tr = sc.nextInt();\n\t\tint[] xC = new int[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\txC[i] = sc.nextInt();\n\t\tdouble ans[] = new double[n];\n\t\tans[0] = r;\n\t\tcurr.add(new Circ(xC[0], r));\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tdouble max = r;\n\t\t\tfor(int k = 0; k < curr.size(); k++) {\n\t\t\t\tdouble cur = curr.get(k).y+ Math.sqrt(4 * r*r - (xC[i]-curr.get(k).x)*(xC[i]-curr.get(k).x));\n\t\t\t\t//System.out.println(cur + \" \" + max);\n\t\t\t\tif(4 * r*r - (xC[i]-curr.get(k).x)*(xC[i]-curr.get(k).x) >= 0)\n\t\t\t\t\tmax = Math.max(cur,  max);\n\t\t\t}\n\t\t\tans[i] = max;\n\t\t\tcurr.add(new Circ(xC[i], max));\n\t\t\t//System.out.println();\n\t\t}\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tSystem.out.print(ans[i] + \" \");\n\t\tsc.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new Thread(null,null,\"BaZ\",99999999)\n        {\n            public void run()\n            {\n                try\n                {\n                    solve();\n                }\n                catch(Exception e)\n                {  \n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException{\n        Scanner sc = new Scanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int N = sc.nextInt(), R = sc.nextInt();\n        double answer[] = new double[N];\n        int[] x = new int[N];\n\n        for (int i = 0; i < N; i++)\n            x[i] = sc.nextInt();\n\n        for (int i = 0; i < N; i++) {\n            answer[i] = R;\n            for (int j = 0; j < i; j++) {\n                int dist = Math.abs(x[i] - x[j]);\n                if(dist <= 2 * R) {\n                    double t = answer[j] + Math.sqrt(4 * R * R - dist * dist);\n                    answer[i] = Math.max(answer[i], t);\n                }\n            }\n        }\n        for(int i = 0; i < N; ++i)\n            out.print(answer[i] + \" \");\n\n        out.println();\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner();\n        PrintWriter out = new PrintWriter(System.out);\n        int n = sc.nextInt(), r = sc.nextInt();\n        int[] x = new int[n];\n        for(int i = 0; i < n; i++)\n            x[i] = sc.nextInt();\n        double[] ans = new double[n];\n        for(int i = 0; i < n; i++) {\n            ans[i] = r;\n            for(int j = 0; j < i; j++) {\n                int d = Math.abs(x[i] - x[j]);\n                if(d > 2 * r)\n                    continue;\n                int h = 2 * r;\n                double yd = Math.sqrt(h * h - d * d);\n                ans[i] = Math.max(ans[i], ans[j] + yd);\n            }\n\n            out.print(ans[i]);\n            if(i == n - 1)\n                out.println();\n            else\n                out.print(\" \");\n        }\n\n        out.flush();\n        out.close();\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception { new A().run(); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt(), r = sc.nextInt();\n\t\tint[] xcords = new int[n];\n\t\tdouble[] ycords = new double[n];\n\t\tdouble y = r, x = 0, px = 0, ty = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\txcords[i] = sc.nextInt();\n\t\t\tx = xcords[i];\n\t\t\ty = r;\n\t\t\tfor(int j = 0; j < i; j++) {\n\t\t\t\tpx = xcords[j];\n\t\t\t\tif(Math.abs(px - x) > r*2) continue;\t\n\t\t\t\tty = Math.sqrt(4*r*r - (x-px)*(x-px)) + ycords[j];\n\t\t\t\ty = Math.max(y, ty);\n\t\t\t}\n\t\t\tycords[i] = y;\n\t\t}\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tSystem.out.print(ycords[i] + \" \");\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner in= new FastScanner(System.in);\n\t\tPrintWriter out= new PrintWriter(System.out);\n\t\t\n\t\tint n= in.nextInt();\n\t\tint r= in.nextInt();\n\t\tint [] x= new int[n];\n\t\tfor (int i = 0; i < x.length; i++) {\n\t\t\tx[i]= in.nextInt();\n\t\t}\n\t\tdouble [] res= new double[n];\n\t\tres[0]= r;\n\t\tfor (int i = 1; i < x.length; i++) {\n\t\t\tboolean found = false;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tdouble dis= Math.abs(x[i]-x[j]);\n\t\t\t\tdouble rr= 4.0*r*r-1.0*dis*dis;\n\t\t\t\tif(rr>=0) {\n\t\t\t\t\tdouble del= Math.sqrt(rr);\n\t\t\t\t\tres[i]= Math.max(res[i], res[j]+del);\n\t\t\t\t\tfound= true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!found) {\n\t\t\t\tres[i]= r;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < res.length; i++) {\n\t\t\tout.print(res[i]+\" \");\n\t\t}\n\t\tout.close();\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), r = in.nextInt();\n\t\tint[] ar = new int[n];\n\t\tArrayList<mPoint> disks = new ArrayList<>();\n\t\tdouble[] ans = new double[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tar[i] = in.nextInt();\n\t\t\tdouble max = -1;\n\t\t\tfor (int j = 0; j < disks.size(); j++) {\n\t\t\t\tif (inRange(ar[i], disks.get(j).a, r)) {\n\t\t\t\t\tdouble h = 4*r*r - (ar[i]-disks.get(j).a) * (ar[i]-disks.get(j).a);\n\t\t\t\t\tmax = Math.max(max, Math.sqrt(h) + disks.get(j).b);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmPoint p = null;\n\t\t\tif (max == -1) {\n\t\t\t\tp = new mPoint(ar[i], r);\n\t\t\t} else {\n\t\t\t\tp = new mPoint(ar[i], max);\n\t\t\t}\n\t\t\tdisks.add(p);\n\t\t\tans[i] = p.b;\n\t\t}\n\t\tfor (int i = 0; i < ans.length - 1; i++) {\n\t\t\tSystem.out.print(ans[i] + \" \");\n\t\t}\n\t\tSystem.out.println(ans[ans.length - 1]);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tint disks = getInt();\n\t\tint radii = getInt();\n\t\tif(disks == 1){\n\t\t\tSystem.out.println(radii);\n\t\t}\n\t\telse{\n\t\t\tdouble[][] diskcenters = new double[disks][2];\n\t\t\tfor(int i = 0;i<disks;i++){\n\t\t\t\tdiskcenters[i][0] = getInt();\n\t\t\t}\n\t\t\tdiskcenters[0][1] = radii;\n\t\t\tfor(int i = 1;i<disks;i++){\n\t\t\t\tdouble cmax = 0;\n\t\t\t\tfor(int prev = 0;prev < i;prev++){\n\t\t\t\t\tcmax = Math.max(cmax, calcintersection(diskcenters[prev][0],diskcenters[prev][1],radii,diskcenters[i][0],radii));\n\t\t\t\t}\n\t\t\t\tdiskcenters[i][1] = cmax;\n\t\t\t}\n\t\t\tfor(int i = 0;i<diskcenters.length;i++){\n\t\t\t\tSystem.out.print(Double.toString(diskcenters[i][1]) + \" \");\n\t\t\t}\n\t\t\tSystem.out.print(\"\\n\");\n\t\t}\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        int n, r;\n        n = scan.nextInt();\n        r = scan.nextInt();\n\n        int[] locs = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            locs[i] = scan.nextInt();\n        }\n\n        double[] yPos = new double[n];\n        Arrays.fill(yPos, 10e100);\n\n        yPos[0] = r;\n        for (int i = 1; i < n; i++) {\n            double pos = r;\n            for (int j = 0; j < i; j++) {\n                int xDist = Math.abs(locs[i] - locs[j]);\n                if (xDist <= 2 * r) {\n                    double y = (2.0 * r) * (2.0 * r) - (xDist * xDist);\n                    if (Math.abs(y - 0.0) < 0.0000000001) {\n                        y = 0;\n                    } else {\n                        y = Math.sqrt(y);\n                    }\n                    y += yPos[j];\n                    pos = Math.max(pos, y);\n\n                } else {\n                    continue;\n                }\n            }\n            yPos[i] = pos;\n        }\n        String[] ans = new String[n];\n\n        for (int i = 0; i < n; i++) {\n            ans[i] = \"\" + yPos[i];\n        }\n\n        System.out.println(String.join(\" \", ans));\n\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tr = sc.nextInt();\n\t\tx = new int[n];\n\t\tans = new double[n];\n\t\tfor (int i=0;i<n;i++)\n\t\t\tx[i] = sc.nextInt();\n\t\tfor (int i=0;i<n;i++)\n\t\t{\n\t\t\tans[i] = r;\n\t\t\tfor (int j=0;j<i;j++)\n\t\t\t{\n\t\t\t\tif (Math.abs(x[i]-x[j])>2*r)\n\t\t\t\t\tcontinue;\n\t\t\t\tint deltaxsq = (x[i]-x[j])*(x[i]-x[j]);\n\t\t\t\tint deltaysq = 4 * r * r - deltaxsq;\n\t\t\t\tdouble deltay = Math.sqrt(deltaysq);\n\t\t\t\tans[i] = Math.max(ans[i], ans[j]+deltay);\n\t\t\t}\n\t\t\tpw.print(ans[i]+\" \");\n\t\t}\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] s) throws Exception {\n        StringBuilder stringBuilder = new StringBuilder();\n        if (stringBuilder.length() == 0) {\n            sc = new MyScanner(System.in);\n        } else {\n            sc = new MyScanner(new BufferedReader(new StringReader(stringBuilder.toString())));\n        }\n\n        out = new PrintWriter(new OutputStreamWriter(System.out));\n        initData();\n        solve();\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t\t\n\t\t\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\n\t\t\tString[] dir = sc.readLine().split(\" \");\n\t\t\tint n = Integer.parseInt(dir[0]);\n\t\t\tint r = Integer.parseInt(dir[1]);\n\t\t\t\n\t\t\tString[] t = sc.readLine().split(\" \");\n\t\t\tint[] list = new int[n];\n\t\t\tfor(int x=0; x<n; x++){\n\t\t\t\tlist[x] = Integer.parseInt(t[x]);\n\t\t\t}\n\t\t\t\n\t\t\tdouble[] yCoords = new double[n];\n\t\t\t\n\t\t\tfor(int x=0; x<n; x++){\n\t\t\t\tdouble stop = (double)r;\n\t\t\t\tint dist = 2*r;\n\t\t\t\tint xCoordNew = list[x];\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor(int y=0; y<x; y++){\n\t\t\t\t\t\n\t\t\t\t\tint xCoordOld = list[y];\n\t\t\t\t\tif(Math.abs(xCoordNew - xCoordOld) == dist){\n\t\t\t\t\t\tstop = Math.max(stop, yCoords[y]);\n\t\t\t\t\t}\n\t\t\t\t\telse if(Math.abs(xCoordNew - xCoordOld) < dist){\n\t\t\t\t\t\tdouble extra = Math.pow((double)(dist*dist) - (double)((xCoordNew - xCoordOld)*(xCoordNew - xCoordOld)), 0.5);  \n\t\t\t\t\t\t\n\t\t\t\t\t\tstop = Math.max(stop, yCoords[y] + extra);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tyCoords[x] = stop;\n\t\t\t\tSystem.out.print(stop+\" \");\n\t\t\t}\n\t\t\t\n\t\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    FastScanner sc = new FastScanner();\n\n    int n = sc.nextInt();\n    long r = sc.nextInt();\n    double d = 2 * r;\n    long[] xs = sc.readLongArray(n);\n    P[] points = new P[n];\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < n; i++) {\n      if (i > 0) sb.append(' ');\n      double y = r;\n      for (int j = 0; j < i; j++) {\n        long diff = Math.abs(xs[i] - points[j].x);\n        if (diff <= 2 * r) {\n          double dy = Math.sqrt(d * d - diff * diff);\n          double testY = points[j].y + dy;\n          y = Math.max(y, testY);\n        }\n      }\n\n      sb.append(y);\n      points[i] = new P(xs[i], y);\n    }\n    System.out.println(sb);\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tStreamTokenizer in=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tScanner sc=new Scanner(System.in);\n\t\tint huiwoqingchun=0;\n\t\tnn=sc.nextInt();\n\t\tr=sc.nextInt();\n\t\tfor(int i=1;i<=nn;i++) {\n\t\t\tx[i]=sc.nextInt();\n\t\t}\n\t\t//HashMap<, V>\n\t\tans[1]=r;\n\t\tint lajitimu=0;\n\t\tfor(int i=2;i<=nn;i++) {\n\t\t\tans[i]=r;\n\t\t\tfor(int j=1;j<i;j++) {\n\t\t\t\tif(Math.abs(x[j]-x[i])>2*r)\n\t\t\t\t\tcontinue;\n\t\t\t\tans[i]=Math.max(ans[i], ans[j]+Math.sqrt(4*r*r-(x[j]-x[i])*(x[j]-x[i])));\n\t\t\t}\n\t\t}\n\t\tdouble buzhidaoganma=0;\n\t\tfor(int c=1;c<=nn;c++)\n\t\t\tSystem.out.printf(\"%.12f \",ans[c]);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        C908 solver = new C908();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tStringTokenizer st=new StringTokenizer(in.readLine());\n\t\tint n=Integer.parseInt(st.nextToken());\n\t\tint r=Integer.parseInt(st.nextToken());\n\t\tint[] x=new int[n];\n\t\tst=new StringTokenizer(in.readLine());\n\t\tfor(int i=0;i < n;i++){\n\t\t\tx[i]=Integer.parseInt(st.nextToken());\n\t\t}\n\t\tsim a=new sim(n,r);\n\t\tfor(int i:x) {\n\t\t\ta.add(i);\n\t\t}\n\t\tfor(double d:a.cy) {\n\t\t\tout.print(d+\" \");\n\t\t}\n\t\tout.println();\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tStringTokenizer st = new StringTokenizer(bf.readLine());\n\t\t\tStringTokenizer st1 = new StringTokenizer(bf.readLine());\n\t\t\tint n = Integer.parseInt(st.nextToken());\n\t\t\tint r = Integer.parseInt(st.nextToken());\n\t\t\tint[] xcoords = new int[n];\n\t\t\tfor(int i = 0;i<n;i++){\n\t\t\t\txcoords[i] = Integer.parseInt(st1.nextToken());\n\t\t\t}\n\t\t\tdouble[] ycoords = new double[n];\n\t\t\t\n\t\t\tfor(int i = 0;i<n;i++){\n\t\t\t\tArrayList<Integer> nodes = new ArrayList<Integer>();\n\t\t\t\tfor(int j = 0;j<i;j++){\n\t\t\t\t\tif (Math.abs(xcoords[j] - xcoords[i]+0.0) <= 2*r)\n\t\t\t\t\t\tnodes.add(j);\n\t\t\t\t}\n\t\t\t\tif (nodes.isEmpty()){\n\t\t\t\t\tycoords[i] = r;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdouble min = -1;\n\t\t\t\t\tfor(int k = 0;k<nodes.size();k++){\n\t\t\t\t\t\tdouble tmp = ycoords[nodes.get(k)] + Math.sqrt(4*r*r - (xcoords[i] - xcoords[nodes.get(k)])*(xcoords[i] - xcoords[nodes.get(k)]));\n\t\t\t\t\t\tif (tmp > min){\n\t\t\t\t\t\t\tmin = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tycoords[i] = min;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0;i<ycoords.length;i++){\n\t\t\t\tSystem.out.print(ycoords[i] + \" \");\n\t\t\t}\n\t\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        MyScanner in = new MyScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        int n = in.nextInt();\n        int r = in.nextInt();\n\n        double[] y = new double[n];\n        int[] x = new int[n];\n\n        for(int i=0;i<n;++i){\n            x[i] = in.nextInt();\n            double bestY = r;\n            for(int j=0;j<i;++j){\n                if(Math.abs(x[i]-x[j]) <= 2*r){\n                    double ny = y[j] + Math.sqrt(4*r*r - (x[i]-x[j])*(x[i]-x[j]));\n                    if(ny > bestY){\n                        bestY = ny;\n                    }\n                }\n            }\n            y[i] = bestY;\n        }\n\n        for(int i=0;i<n;++i){\n            out.println(y[i]);\n        }\n\n        out.close();\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new Solution2().run();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tint n = sc.nextInt();\n\t\tint r = sc.nextInt();\n\t\t\n\t\tdouble ans[] = new double[n];\n\t\t\n\t\tint[] x = new int[n];\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tx[i] = sc.nextInt();\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tans[i] = r;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tint d = Math.abs(x[i] - x[j]);\n\t\t\t\tif(d <= 2 * r) {\n\t\t\t\t\tans[i] = Math.max(ans[i], ans[j] + Math.sqrt(4 * r * r - d * d));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tout.print(ans[i] + \" \");\n\t\t}\n\t\tout.println();\n\t\t\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner in = new FastScanner();\n\t\tint n = in.nextInt();\n\t\tdouble r = in.nextInt();\n\t\tdouble x[] = new double[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tx[i] = in.nextDouble();\n\t\t\n\t\tdouble y[] = new double[n];\n\t\ty[0] = r;\n\t\t\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdouble miny = r;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tdouble dx = Math.abs(x[i]-x[j]);\n\t\t\t\tif(dx > r*2) continue;\n\t\t\t\tdouble yy = Math.sqrt(4*r*r-dx*dx);\n\t\t\t\tminy = Math.max(miny, yy+y[j]);\n\t\t\t}\n\t\t\ty[i] = miny;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(y[i]+\" \");\n\t\t}\n\t\t\n\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner s = new Scanner(System.in);\n\t\tStringTokenizer st = new StringTokenizer(s.nextLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint r = Integer.parseInt(st.nextToken());\n\t\tst = new StringTokenizer(s.nextLine());\n\t\tint[] array = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarray[i] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tArrayList<State> list = new ArrayList<State>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdouble currY = r;\n\t\t\tfor (int j = 0; j < list.size(); j++) {\n\t\t\t\tdouble xDiff = Math.abs(list.get(j).getX() - array[i]);\n\t\t\t\tif (xDiff <= 2 * r) {\n\t\t\t\t\tif (currY < list.get(j).getY() + Math.sqrt(4 * r * r - xDiff * xDiff)) {\n\t\t\t\t\t\tcurrY = list.get(j).getY() + Math.sqrt(4 * r * r - xDiff * xDiff);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist.add(new State(array[i], currY));\n\t\t\tSystem.out.print(currY + \" \");\n\t\t}\n\t\ts.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\n\t\tFastScanner scan = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = scan.nextInt(), r = scan.nextInt();\n\t\tint[] x = scan.nextIntArray(n);\n\t\tdouble[] y = new double[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tdouble best = 0;\n\t\t\tfor(int j = 0; j < i; j++) {\n\t\t\t\tif(Math.abs(dist(x[i], y[j], x[j], y[j])-2*r) <= 1e-7) {\n\t\t\t\t\tbest = Math.max(best, y[j]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdouble lo = y[j]-r-r, hi = y[j]+r+r;\n\t\t\t\tfor(int bs = 0; bs < 200; bs++) {\n\t\t\t\t\tdouble mid = (lo+hi)/2.0;\n\t\t\t\t\tif(dist(x[i], mid, x[j], y[j])-2*r <= 1e-7) lo = mid;\n\t\t\t\t\telse hi = mid;\n\t\t\t\t}\n\t\t\t\tif(dist(x[i], lo, x[j], y[j])-2*r <= 1e-7) best = Math.max(best, lo);\n\t\t\t}\n\t\t\tif(best == 0) y[i] = r;\n\t\t\telse y[i] = best;\n\t\t}\n\t\tfor(int i = 0; i < n; i++) out.printf(\"%.6f \", y[i]);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        MyInput in = new MyInput(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int r = sc.nextInt();\n        int[] x = new int[n];\n        double[] res = new double[n];\n        for (int i = 0; i < n; i++) {\n            x[i] = sc.nextInt();\n            res[i] = (double)r;\n            for (int j = i - 1; j >= 0; j--) {\n                int diff = x[j] - x[i];\n                if (Math.abs(x[j] - x[i]) <= 2 * r) {\n                    res[i] = Math.max(res[i], res[j] + Math.sqrt(4 * r * r - diff * diff));\n                }\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            System.out.print(res[i] + \" \");\n        }\n        System.out.println(\"\");\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner in = new FastScanner();\n        int n = in.nextInt();\n        \n        double r = (double) in.nextInt();\n        double[] answers = new double[n];\n        double[] xCoords = new double[n];\n        for (int i = 0; i < n; i++) xCoords[i] = (double) in.nextInt();\n        \n        answers[0] = r;\n        for (int i = 1; i < n; i++) {\n            double bound = r;\n            for (int j = 0; j < i; j++) {\n                double xDif = xCoords[i] - xCoords[j];\n                double y = answers[j];\n                double yNew = y + Math.sqrt(4 * r * r - xDif * xDif);\n                if (yNew > bound) bound = yNew;\n            }\n            answers[i] = bound;\n        }\n        for (int i = 0; i < n; i++) System.out.print(answers[i] + \" \");\n        System.out.println();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)\n        new Thread(null ,new Runnable(){\n            public void run(){\n                try{\n                    solve();\n                } catch(Exception e){\n                    e.printStackTrace();\n                }\n            }\n        },\"1\",1<<26).start();\n        \n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint n = in.nextInt();\n\t\tdouble r = (double)in.nextInt();\n\t\tdouble [] a = new double[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i] = (double)in.nextInt();\n\t\tdouble[] ans = new double[n];\n\t\tans[0] = r;\n\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tdouble max = Double.MIN_VALUE;\n\t\t\tfor(int j=0;j<i;j++)\n\t\t\t{\n\t\t\t\tif(Math.abs(a[i]-a[j])<=2*r)\n\t\t\t\t{\n\t\t\t\t\t//System.out.println(j);\n\t\t\t\t\tdouble cur = 4*r*r;\n\t\t\t\t\tcur -= ((a[i]-a[j])*(a[i]-a[j]));\n\t\t\t\t\tcur = Math.sqrt(cur);\n\t\t\t\t\tcur += ans[j];\n\t\t\t\t\t//System.out.println(r);\n\t\t\t\t\tmax = Math.max(max, cur);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(max == Double.MIN_VALUE)\n\t\t\t\tans[i] = r;\n\t\t\telse \n\t\t\t\tans[i] = max;\n\t\t}\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t\tpw.print(ans[i] + \" \");\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint r = sc.nextInt();\n\t\tint d = 2 * r;\n\t\tint[] xCoordinates = new int[n];\n\t\tdouble[] yCoordinates = new double[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tyCoordinates[i] = r;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\txCoordinates[i] = sc.nextInt();\n\t\tdouble y = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ty = r;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (Math.abs(xCoordinates[i] - xCoordinates[j]) <= 2 * r) {\n\t\t\t\t\tint dx = Math.abs(xCoordinates[i] - xCoordinates[j]);\n\t\t\t\t\tdouble dy = Math.sqrt(d * d - dx * dx);\n\t\t\t\t\tif (dy + yCoordinates[j] > y)\n\t\t\t\t\t\ty = dy + yCoordinates[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tyCoordinates[i]=y;\n\t\t}\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tSystem.out.print(yCoordinates[i] + \" \");\n\t\tsc.close();\n\t}\n", "complexity": "quadratic"}
{"code": "   public static void main(String[] args) throws IOException\n      //FastReader infile = new FastReader(\"test.txt\");\n      FastReader infile = new FastReader(System.in);\n      int N = infile.nextInt();\n      int R = infile.nextInt();\n      double[] xPos = new double[N];\n      for(int x = 0; x < N; x++)\n         xPos[x] = infile.nextDouble();\n      double[] yPos = new double[N];\n      Arrays.fill(yPos, R);\n      for(int x = 1; x < N; x++)\n      {\n         for(int y = 0; y < x; y++)\n            if(Math.abs(xPos[x]-xPos[y])<=2*R)\n            {\n               yPos[x] = Math.max(yPos[x], yPos[y]+Math.sqrt((2*R)*(2*R)-Math.abs(xPos[x]-xPos[y])*Math.abs(xPos[x]-xPos[y])));\n            }\n      }\n      System.out.print(yPos[0]);\n      for(int x = 1; x < N; x++)\n         System.out.print(\" \"+yPos[x]);\n      //System.out.println(System.currentTimeMillis()-time);\n   }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ScanReader in = new ScanReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tSolver Machine = new Solver() ;\n\t\tMachine.Solve() ;\n\t\tMachine.Finish() ;\n\t\t// new Thread(null,new Runnable(){\n\t\t// \tpublic void run(){\n\t\t// \t\tSolver Machine = new Solver() ;\n\t\t// \t\ttry{\n\t\t// \t\t\tMachine.Solve() ;\n\t\t// \t\t\tMachine.Finish() ;\n\t\t// \t\t}catch(Exception e){\n\t\t// \t\t\te.printStackTrace() ;\n\t\t// \t\t\tSystem.out.flush() ;\n\t\t// \t\t\tSystem.exit(-1) ;\n\t\t// \t\t}catch(Error e){\n\t\t// \t\t\te.printStackTrace() ;\n\t\t// \t\t\tSystem.out.flush() ;\n\t\t// \t\t\tSystem.exit(-1) ;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// },\"Solver\",1l<<27).start() ;\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        OJ = System.getProperty(\"ONLINE_JUDGE\") != null;\n        C solution = new C(System.out);\n        if (OJ) {\n            reader = new BufferedReader(new InputStreamReader(System.in));\n            solution.run();\n        } else {\n            reader = new BufferedReader(new FileReader(new File(C.class.getName() + \".txt\")));\n            long timeout = System.currentTimeMillis();\n            while (solution.hasNext()) {\n                solution.run();\n                solution.println();\n                solution.println(\"----------------------------------\");\n            }\n            solution.println(\"time: \" + (System.currentTimeMillis() - timeout));\n        }\n        solution.close();\n        reader.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new Main().run();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)throws Throwable {\n\t\tMyScanner sc=new MyScanner();\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\t\n\t\tint n=sc.nextInt();\n\t\tint r=sc.nextInt();\n\t\tint [] x=new int [n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tx[i]=sc.nextInt();\n\t\tdouble [] ans=new double [n];\n\t\tans[0]=r;\n\t\tfor(int i=1;i<n;i++){\n\t\t\tans[i]=r;\n\t\t\tfor(int j=0;j<i;j++){\n\t\t\t\tdouble dx=Math.abs(x[i]-x[j]);\n\t\t\t\tif(dx>2*r)\n\t\t\t\t\tcontinue;\n\t\t\t\tdouble y=Math.sqrt((4*r*r)-(dx*dx));\n\t\t\t\tans[i]=Math.max(ans[i], ans[j]+y);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(double z : ans)\n\t\t\tpw.print(z+\" \");\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tlong start = System.currentTimeMillis();\n\t\t\t\tString debug = args.length > 0 ? args[0] : null;\n\t\t\t\tif (debug != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tis = java.nio.file.Files.newInputStream(java.nio.file.Paths.get(debug));\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treader = new java.io.BufferedReader(new java.io.InputStreamReader(is), 32768);\n\t\t\t\tsolve();\n\t\t\t\tout.flush();\n\t\t\t\ttr((System.currentTimeMillis() - start) + \"ms\");\n\t\t\t}\n\t\t}, \"\", 64000000).start();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tir = new InputReader(System.in);\n\t\tout = new PrintWriter(System.out);\n\t\tsolve();\n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\n\t\tStringTokenizer st = new StringTokenizer(sc.nextLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint r = Integer.parseInt(st.nextToken());\n\n\t\tArrayList<Integer> centers = new ArrayList<Integer>();\n\t\tst = new StringTokenizer(sc.nextLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcenters.add(Integer.parseInt(st.nextToken()));\n\t\t}\n\t\tsc.close();\n\t\tArrayList<Point> finalpoints = new ArrayList<Point>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdouble maxy = r;\n\t\t\tfor (int j = 0; j < finalpoints.size(); j++) {\n\t\t\t\tif (finalpoints.get(j).x - centers.get(i) > 2 * r || centers.get(i) - finalpoints.get(j).x > 2 * r)\n\t\t\t\t\tcontinue;\n\t\t\t\tdouble dist = Math.sqrt(\n\t\t\t\t\t\t4 * r * r - (finalpoints.get(j).x - centers.get(i)) * (finalpoints.get(j).x - centers.get(i)))\n\t\t\t\t\t\t+ finalpoints.get(j).y;\n\t\t\t\tif(dist > maxy)\n\t\t\t\t\tmaxy = dist;\n\t\t\t}\n\t\t\t\n\t\t\tpw.print(maxy + \" \");\n\t\t\tfinalpoints.add(new Point(centers.get(i), maxy));\n\t\t}\n\t\t\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        TaskC.InputReader in = new TaskC.InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.Solve(in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n    \tScanner in=new Scanner(System.in);  \n    \tint n=in.nextInt(),r=in.nextInt();\n    \tdouble[] x=new double[n];\n    \tfor(int i=0; i<n; i++)\n    \t\tx[i]=in.nextInt();\n    \tdouble[] y=new double[n];\n    \tfor(int i=0; i<n; i++)\n    \t{\n    \t\ty[i]=r;\n    \t\tfor(int j=0; j<i; j++)\n    \t\t{\n    \t\t\t\n    \t\t\tif(Math.abs(x[j]-x[i])<=2*r)\n    \t\t\t{\n    \t\t\t\ty[i]=Math.max(y[i], y[j]+Math.sqrt(4*r*r-(x[i]-x[j])*(x[i]-x[j])));\n    \t\t\t}\n    \t\t}\n    \t}\n    \tfor(int i=0; i<n; i++)\n    \t\tSystem.out.print(y[i]+\" \");\n    }    \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] arg) {\n        new GB_A().run();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(f.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint r = Integer.parseInt(st.nextToken());\n\t\tint[] x = new int[n];\n\t\tst = new StringTokenizer(f.readLine());\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tx[i] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tdouble[] y = new double[n];\n\t\ty[0] = r;\n\t\tdouble hypSq = 4*r*r;\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tboolean hit = false;\n\t\t\tdouble maxY = 0;\n\t\t\tfor(int j = 0; j < i; j++) {\n\t\t\t\tint dx = Math.abs(x[i] - x[j]);\n\t\t\t\tif(dx == 2*r) {\n\t\t\t\t\tif(y[j] > maxY) {\n\t\t\t\t\t\tmaxY = y[j];\n\t\t\t\t\t\thit = true;\n\t\t\t\t\t}\n\t\t\t\t} else if(dx < 2*r) {\n\t\t\t\t\tdouble newY = y[j] + Math.sqrt(hypSq - dx*dx);\n\t\t\t\t\tif(newY > maxY) {\n\t\t\t\t\t\tmaxY = newY;\n\t\t\t\t\t\thit = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!hit) {\n\t\t\t\ty[i] = r;\n\t\t\t} else {\n\t\t\t\ty[i] = maxY;\n\t\t\t}\n\t\t}\n\t\tStringBuffer s = new StringBuffer(\"\");\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\ts.append(y[i] + \" \");\n\t\t}\n\t\tSystem.out.println(s.toString().trim());\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        ConsoleIO io = new ConsoleIO(new InputStreamReader(System.in), new PrintWriter(System.out));\n        //String test = \"C-large\";\n        //ConsoleIO io = new ConsoleIO(new FileReader(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + test + \".in\"), new PrintWriter(new File(\"D:\\\\Dropbox\\\\code\\\\practice\\\\jb\\\\src\\\\\" + test + \"-out.txt\")));\n\n       new Main(io).solve();\n\n        io.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint r = sc.nextInt();\n\t\tint[] x = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tx[i] = sc.nextInt();\n\t\t}\n\t\tdouble[] ans = new double[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdouble maxY = r;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(x[j] <= x[i] + 2*r && x[j] >= x[i] - 2*r){\n\t\t\t\t\tmaxY = Math.max(maxY, ans[j] + Math.sqrt(4 * r * r - (Math.abs(x[i] - x[j])) * (Math.abs(x[i] - x[j]))));\n\t\t\t\t}\n\t\t\t}\n\t\t\tans[i] = maxY;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.println(ans[i]);\n\t\t}\n\t\tsc.close();\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main (String args[]) {\n    Scanner in = new Scanner(System.in);\n    \n    int n = in.nextInt();\n    int r = in.nextInt();\n    \n    double pos[][] = new double[n][2];\n    \n    for(int i = 0; i < n; i++) {\n    \t\n    \tpos[i][0] = in.nextInt();\n    \t\n    \tdouble y = r;\n    \t\n    \tfor(int j = 0; j < i; j++) {\n    \t\tif(Math.abs(pos[i][0] - pos[j][0]) <= 2*r) {\n    \t\t\t\n    \t\t\tdouble tempy = pos[j][1] + Math.sqrt(Math.pow(2*r, 2) - Math.pow(Math.abs(pos[i][0] - pos[j][0]), 2));\n    \t\t\t\n    \t\t\tif(tempy > y) y = tempy;\n    \t\t}\n    \t}\n    \t\n    \tpos[i][1] = y;\n    \tSystem.out.print(y + \" \");\n    }\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastScanner sc = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tdouble r = sc.nextInt();\n\t\tdouble[] xcoords = new double[n];\n\t\tdouble[] ycoords = new double[n];\n\t\tArrays.fill(ycoords, Integer.MIN_VALUE);\n\t\tycoords[0] = r;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\txcoords[i] = sc.nextDouble();\n\t\t}\n\t\tSystem.out.print(r + \" \");\n\t\tfor(int i = 1; i < n; ++i) {\n\t\t\tfor(int j = 0; j < i; j++) {\n\t\t\t\tycoords[i] = Math.max(ycoord(xcoords[j], ycoords[j],xcoords[i],r),ycoords[i]);\n\t\t\t}\n\t\t\tSystem.out.print(ycoords[i] + \" \");\n\t\t}\n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\n\t\tint[] code = new int[scanner.nextInt()];\n\t\tint[] prints = new int[scanner.nextInt()];\n\n\t\tfor (int i = 0; i < code.length; i++) {\n\t\t\tcode[i] = scanner.nextInt();\n\t\t}\n\t\tfor (int i = 0; i < prints.length; i++) {\n\t\t\tprints[i] = scanner.nextInt();\n\t\t}\n\t\tfor (int i = 0; i < code.length; i++) {\n\t\t\tfor (int j = 0; j < prints.length; j++) {\n\t\t\t\tif (code[i] == prints[j]) {\n\t\t\t\t\tSystem.out.print(prints[j] + \" \");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tscanner.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)throws Exception {\n        FastReader in = new FastReader(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        n = in.nextInt();\n        \n        int brr[] = new int[2*n];\n        for (int i = 0; i < 2*n; i+= 2) {\n            brr[i] = in.nextInt();\n            brr[i+1] = in.nextInt();\n        }\n\n        arr = shrink(brr);\n        int imap[] = new int[2*n];\n        for (int i = 0; i < 2*n; i++) {\n            imap[arr[i]] = brr[i];\n        }\n\n        int idx = binarySearch(arr.length);\n        if(idx >= arr.length) pw.println(-1);\n        else pw.println(imap[idx]);\n\n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "\t\tpublic static void main(String args[])\n\t\t\tScanner scan=new Scanner(System.in);\n\t\t\tint n=scan.nextInt();\n\t\t\tint k=scan.nextInt();\n\t\t\tString t=scan.next();\n\t\t\tint mx=0;\n\t\t\tfor(int i=1;i<n;i++)\n\t\t\t{\n\t\t\t\tint gd=1;\n\t\t\t\tfor(int j=0;j<i;j++)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tif(t.charAt(j)!=t.charAt((n-i)+j))\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\tgd=0;\n\t\t\t\t\t\t// i think i can break here\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tif(gd==1){\n\t\t\t\t\tmx=i;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.print(t);\n\t\t\tfor(int i=2;i<=k;i++)\n\t\t\t{\n\t\t\t\tfor(int j=mx;j<n;j++)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.print(t.charAt(j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "complexity": "quadratic"}
{"code": "   public static void main(String args[])\n   \tScanner in = new Scanner(System.in);\n   \tint n = in.nextInt();\n   \tint m = in.nextInt();\n   \tint k = in.nextInt();\n   \tint arr[] = new int[n+1];\n   \tfor(int i =0;i<n;i++)\n   \t arr[i+1]= in.nextInt();\n   \t\n   \tlong sum[] = new long [n+1];\n   \t\n   \tfor(int i=1;i<=n;i++)\n   \t sum[i]=sum[i-1]+arr[i];\n   \t\n    long dp[] = new long[n+1];\n\n    for(int i =1;i<=n;i++)\n    {\n      for(int j=i;j>i-m&&j>=1;j--)\n      {\n        long val = sum[i]-sum[j-1]+dp[j-1]-k;\n        dp[i]= Math.max(dp[i],val);\n      }\t\n    }\n    long max =0;\n    for(int i =1;i<=n;i++)\n     max=Math.max(max,dp[i]);\n    \n    System.out.println(max);\n     \n   }\t\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n \n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader inp = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Solver solver = new Solver();\n        solver.solve(inp, out);\n        out.close();\n \n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String [] args){\n        new Solution().solve();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n=enter.nextInt();\n        int m=enter.nextInt();\n        long k=enter.nextLong();\n        arr=new long[n+1];\n        for (int i = 1; i <n+1 ; i++) {\n            arr[i]=enter.nextLong();\n        }\n        long[] summ=new long[n+1];\n        for (int i = 1; i <n+1 ; i++) {\n            summ[i]+=arr[i]+summ[i-1];\n        }\n\n        long[] best=new long[n+1];\n\n        for (int i = 1; i <n+1 ; i++) {\n            best[i]=Math.max(0, ((i-m>=0) ? best[i-m]+summ[i]-summ[i-m]-k:0));\n        }\n        long ans=best[1];\n\n        for (int i = 1; i <n+1 ; i++) {\n            ans=Math.max(ans,best[i]);\n            for (int j = 1; j <m ; j++) {\n                ans=Math.max(ans, ((i-j>=0) ? best[i-j] -k +summ[i]-summ[i-j]:0));\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new G().run(); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tchar[] cs = in.next().toCharArray();\n\t\tn=cs.length;\n\t\tx = new int[n];\n\t\tfor(int i=0; i<n; ++i)\n\t\t\tx[i]=cs[i]-'0';\n\t\tp10 = new long[n];\n\t\tp10[0]=1;\n\t\tfor(int i=1; i<n; ++i)\n\t\t\tp10[i]=p10[i-1]*10%M;\n\t\ts = new long[n+1];\n\t\ts[n]=1;\n\t\tfor(int i=n-1; i>=0; --i)\n\t\t\ts[i]=(s[i+1]+x[i]*p10[n-1-i])%M;\n\t\tlong ans=0;\n\t\tdp = new long[2][n][n+1];\n\t\tfor(dig=1; dig<=9; ++dig) {\n\t\t\tfor(int i=0; i<n; ++i) {\n\t\t\t\tArrays.fill(dp[0][i], -1);\n\t\t\t\tArrays.fill(dp[1][i], -1);\n\t\t\t}\n\t\t\tfor(int i=1; i<=n; ++i)\n\t\t\t\tans=(ans+p10[i-1]*dp(0, 0, i))%M;\n\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew G();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tchar[] cs = in.next().toCharArray();\n\t\tn=cs.length;\n\t\tx = new int[n];\n\t\tfor(int i=0; i<n; ++i)\n\t\t\tx[i]=cs[i]-'0';\n\t\tp10 = new long[n];\n\t\tp10[0]=1;\n\t\tfor(int i=1; i<n; ++i)\n\t\t\tp10[i]=p10[i-1]*10%M;\n\t\ts = new long[n+1];\n\t\ts[n]=1;\n\t\tfor(int i=n-1; i>=0; --i)\n\t\t\ts[i]=(s[i+1]+x[i]*p10[n-1-i])%M;\n\t\tlong ans=0;\n\t\tdp = new long[2][n][n+1];\n\t\tfor(dig=1; dig<=9; ++dig) {\n\t\t\tfor(int i=0; i<n; ++i) {\n\t\t\t\tArrays.fill(dp[0][i], -1);\n\t\t\t\tArrays.fill(dp[1][i], -1);\n\t\t\t}\n\t\t\tfor(int i=1; i<=n; ++i)\n\t\t\t\tans=(ans+p10[i-1]*dp(0, 0, i))%M;\n\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        String X = in.next();\n        int N = X.length();\n\n        int[] P = new int[701];\n        P[0] = 1;\n        for (int i=1; i<P.length; ++i) {\n            P[i] = (int)((long)P[i-1] * 10 % REM);\n        }\n\n        int ans = 0;\n        for (int d=1; d<=9; ++d) { //at least d\n            dig = d;\n\n            for (int[][] array2 : dp) {\n                for (int[] array1 : array2) {\n                    Arrays.fill(array1, -1);\n                }\n            }\n\n            for (int c=1; c<=N; ++c) { //exact count of at least d\n                for (int k=0; k<c; ++k) {\n                    ans = (int)((ans + (long)f(0, c, false, X) * P[k]) % REM);\n                }\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    QuickScanner in = new QuickScanner(inputStream);\n    QuickWriter out = new QuickWriter(outputStream);\n    TaskG solver = new TaskG();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new CF().runIO();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] argv) {\n\t\tcf908G pro = new cf908G();\n\t\t\n\t\tInputStream fin = null;\n\t\tif (System.getProperty(\"ONLINE_JUDGE\") == null) {\n\t\t\ttry {\n\t\t\t\tfin = new FileInputStream(\"input.txt\");\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t} else {\n\t\t\tfin = System.in;\n\t\t}\n\t\tpro.solve(new Scanner(fin), System.out);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        MyReader reader = new MyReader(System.in);\n//        MyReader reader = new MyReader(new FileInputStream(\"input.txt\"));\n        MyWriter writer = new MyWriter(System.out);\n        new Solution().run(reader, writer);\n        writer.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskG solver = new TaskG();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tchar[] cs = in.next().toCharArray();\n\t\tint n=cs.length;\n\t\tint[] x = new int[n];\n\t\tfor(int i=0; i<n; ++i)\n\t\t\tx[i]=cs[i]-'0';\n\t\tlong[] dp1 = new long[n+1];\n\t\tfor(int i=0; i<n; ++i) \n\t\t\tdp1[i+1]=(x[i]+dp1[i]*10)%M;\n\t\tlong ans=0;\n\t\tfor(int d1=1; d1<=9; ++d1) {\n\t\t\tlong[][] dp2 = new long[2][n+1];\n\t\t\tfor(int i=0; i<n; ++i) {\n\t\t\t\tdp2[0][i+1]=x[i]>=d1?(10*dp2[0][i]+1)%M:dp2[0][i];\n\t\t\t\tfor(int d2=0; d2<x[i]; ++d2)\n\t\t\t\t\tdp2[1][i+1]=((d2>=d1?10*(dp2[0][i]+dp2[1][i])+dp1[i]+1:dp2[0][i]+dp2[1][i])+dp2[1][i+1])%M;\n\t\t\t\tfor(int d2=x[i]; d2<=9; ++d2)\n\t\t\t\t\tdp2[1][i+1]=((d2>=d1?10*dp2[1][i]+dp1[i]:dp2[1][i])+dp2[1][i+1])%M;\n\t\t\t}\n\t\t\tans+=dp2[0][n]+dp2[1][n];\n\t\t}\n\t\tout.println(ans%M);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tchar[] cs = in.next().toCharArray();\n\t\tint n=cs.length;\n\t\tint[] x = new int[n];\n\t\tfor(int i=0; i<n; ++i)\n\t\t\tx[i]=cs[i]-'0';\n\t\tlong[] dp1 = new long[n+1];\n\t\tfor(int i=0; i<n; ++i) \n\t\t\tdp1[i+1]=(x[i]+dp1[i]*10)%M;\n\t\t//out.println(Arrays.toString(dp1));\n\t\tlong ans=0;\n\t\tfor(int d1=1; d1<=9; ++d1) {\n\t\t\tlong[][] dp2 = new long[2][n+1];\n\t\t\tfor(int i=0; i<n; ++i) {\n\t\t\t\tdp2[0][i+1]=x[i]>=d1?(10*dp2[0][i]+1)%M:dp2[0][i];\n\t\t\t\tdp2[1][i+1]=x[i]>=d1?(10*dp2[1][i]+dp1[i])%M:dp2[1][i];\n\t\t\t\tfor(int d2=0; d2<x[i]; ++d2)\n\t\t\t\t\tdp2[1][i+1]=((d2>=d1?10*(dp2[0][i]+dp2[1][i])+dp1[i]+1:dp2[0][i]+dp2[1][i])+dp2[1][i+1])%M;\n\t\t\t\tfor(int d2=x[i]+1; d2<=9; ++d2)\n\t\t\t\t\tdp2[1][i+1]=((d2>=d1?10*dp2[1][i]+dp1[i]:dp2[1][i])+dp2[1][i+1])%M;\n\t\t\t}\n\t\t\tans+=dp2[0][n]+dp2[1][n];\n\t\t\t//out.println(dp2[0][n]+\" \"+dp2[1][n]);\n\t\t}\n\t\tout.println(ans%M);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tlong start = System.currentTimeMillis();\n\t\t\t\tString debug = args.length > 0 ? args[0] : null;\n\t\t\t\tif (debug != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tis = java.nio.file.Files.newInputStream(java.nio.file.Paths.get(debug));\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treader = new java.io.BufferedReader(new java.io.InputStreamReader(is), 32768);\n\t\t\t\tsolve();\n\t\t\t\tout.flush();\n\t\t\t\ttr((System.currentTimeMillis() - start) + \"ms\");\n\t\t\t}\n\t\t}, \"\", 64000000).start();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastScanner sc = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint N = sc.nextInt();\n\t\tlong[][] dp = new long[N][N];\n\t\tdp[0][0] = 1L;\n\t\tfor(int i = 0; i < N-1; i++) {\n\t\t\tchar oper = sc.next().charAt(0);\n\t\t\tif(oper == 'f') {\n\t\t\t\tdp[i+1][0] = 0L;\n\t\t\t\tfor(int j = 1; j < N; j++) {\n\t\t\t\t\tdp[i+1][j] = dp[i][j-1];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdp[i+1][N-1] = dp[i][N-1];\n\t\t\t\tfor(int j = N-2; j >= 0; j--) {\n\t\t\t\t\tdp[i+1][j] = (dp[i+1][j+1] + dp[i][j]) % MOD;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlong res = 0;\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tres += dp[N-1][i];\n\t\t\tres %= MOD;\n\t\t}\n\t\tout.println(res);\n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\n\t\tFastScanner scan = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = scan.nextInt(); mod = (int)1e9+7;\n\t\tin = new char[n];\n\t\tfor(int i = 0; i < n; i++) in[i] = scan.next().charAt(0);\n\t\tdp = new Long[n][n];\n\t\tout.println(go(0, 0));\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner in = new Scanner(System.in) ;\n\t\tint n = in.nextInt() ;\n\t\tboolean[] lst = new boolean[n] ;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tlst[i] = (in.next().equals(\"s\"))?false:true ;\n\t\t}\n\t\tSystem.out.println(dp(lst)) ;\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew PythonIndentation(System.in, System.out);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner in = new Scanner(System.in) ;\n\t\tint n = in.nextInt() ;\n\t\tboolean[] lst = new boolean[n] ;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tlst[i] = (in.next().equals(\"s\"))?false:true ;\n\t\t}\n\t\tSystem.out.println(dp(lst)) ;\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        new Test().start();\n\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws java.lang.Exception {\n\t\tMain solver = new Main();\n\t\tsolver.in = new InputReader(System.in);\n\t\tsolver.br = new BufferedReader(new InputStreamReader(System.in));\n\t\tsolver.out = new PrintWriter(System.out);\n\t\tsolver.solve();\n\t\tsolver.out.flush();\n\t\tsolver.out.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)throws Throwable {\n\t\tMyScanner sc=new MyScanner();\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\t\n\t\tn=sc.nextInt();\n\t\ts=new char [n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ts[i]=sc.next().charAt(0);\n\t\tmem=new int [2*n+1][n+1];\n\t\tfor(int [] x : mem)\n\t\t\tArrays.fill(x, -1);\n\t\tpw.println(dp(0, 0));\n\t\t\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\ttry\n\t\t{\n\t\t\tsolve();\n\t\t}\n\t\tcatch (IOException exception)\n\t\t{\n\t\t\texception.printStackTrace();\n\t\t}\n\t\tclose();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tint N = Integer.parseInt(in.readLine());\n\t\tint[][] dp = new int[N][N];\n\t\tdp[0][0] = 1;\n\t\tfor(int i = 1; i < N; ++i) {\n\t\t\tchar lastCmd = in.readLine().charAt(0);\n\t\t\tint[] sum = new int[N];\n\t\t\tsum[N - 1] = dp[i - 1][N - 1];\n\t\t\tfor(int j = N - 2; j >= 0; --j)\n\t\t\t\tsum[j] = (sum[j + 1] + dp[i - 1][j]) % 1000000007;\n\t\t\tfor(int j = 0; j < N; ++j) {\n\t\t\t\tif(lastCmd == 'f' && j > 0)\n\t\t\t\t\tdp[i][j] = dp[i - 1][j - 1];\n\t\t\t\telse if(lastCmd == 's')\n\t\t\t\t\tdp[i][j] = sum[j];\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < N; ++i)\n\t\t\tans = (ans + dp[N - 1][i]) % 1000000007;\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int N = Integer.parseInt(br.readLine());\n        char[] d = new char[N];\n        for (int i = 0; i < N; i++) {\n            d[i] = br.readLine().charAt(0);\n        }\n\n        long[][] dp = new long[N][N];\n        boolean det = d[0] == 'f';\n        //Arrays.fill(dp[0], 1);\n        dp[0][0] = 1;\n        \n        for (int i = 1; i < N; i++) {\n           // System.out.println(Arrays.toString(dp[i-1]));\n            long sum = 0;\n\n            for (int j = 0; j < N; j++) {\n                sum = (dp[i - 1][j]%MOD + sum%MOD + MOD) % MOD;\n            }\n            \n           // System.out.println(sum);\n\n            if (d[i] == 'f') {\n                if(det){\n                    for (int j = 1; j < N; j++) {\n                        dp[i][j] = dp[i-1][j-1]%MOD;\n                    }\n                    continue;\n                }\n                \n                for (int j = 0; j < N; j++) {\n                    dp[i][j] = sum%MOD;\n                    sum -= dp[i - 1][j]%MOD;\n\n                }\n                det = true;\n                \n                //System.out.println(Arrays.toString(dp[i]));\n            } else if (d[i] == 's') {\n               // System.out.println(\"HERE1\" + det);\n                \n                if(det){\n                    //System.out.println(\"HERE2\");\n                    det = false;\n                    for (int j = 1; j < N; j++) {\n                        dp[i][j] = dp[i-1][j-1]%MOD;\n                    }\n                   //System.out.println(\"HERE \" + Arrays.toString(dp[i]));\n                    continue;\n                }\n                \n                //System.out.println(\"HERE3\" + sum);\n                for (int j = 0; j < N; j++) {\n                    dp[i][j] = sum%MOD;\n\n                    sum = ((sum - dp[i - 1][j])%MOD + MOD)%MOD;\n\n                }\n                \n            }\n            //System.out.println(Arrays.toString(dp[i]));\n        }\n        //System.out.println(Arrays.toString(dp[dp.length-1]));\n        \n        long ans = 0;\n        for (long e: dp[dp.length-1]) {\n            ans = (ans + e + MOD) % MOD;\n        }\n        System.out.println(ans);\n\n//        boolean det = false;\n//        int maxlayer = 1;\n//        long ans = 1;\n//        for (int i = 0; i < N; i++) {\n//            if (d[i] == 'f') {\n//                if (!det) {\n//                    //System.out.println(\"HERE\" + maxlayer);\n//                    ans = ans * maxlayer;\n//                }\n//                det = true;\n//                maxlayer++;\n//                //System.out.println(\"HERE\");\n//            } else if (d[i] == 's') {\n//                if (det) {\n//                    det = false;\n//                    continue;\n//                }\n//                det = false;\n//                System.out.println(maxlayer);\n//                ans = ans * maxlayer;\n//            }\n//        }\n//\n//        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner in = new Scanner(System.in) ;\n\t\tint n = in.nextInt() ;\n\t\tboolean[] lst = new boolean[n] ;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tlst[i] = (in.next().equals(\"s\"))?false:true ;\n\t\t}\n\t\tSystem.out.println(dp(lst)) ;\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) { new Thread(null, new c(), \"\", 1<<27).start(); } public void run() {\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        MyScanner in = new MyScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        char prev = ' ';\n\n        // index, maxNumOfIntents -> count\n        int[][] dp = new int[n+1][n+2];\n\n        dp[0][0] = 1;\n        for(int i=0;i<n;++i){\n            char ch = in.next().charAt(0);\n            if(prev == 's'){\n                int sum = 0;\n                for(int j=n;j>=0;--j){\n                    sum = (sum + dp[i-1][j]) % MOD;\n                    dp[i][j] = sum;\n                }\n            }else if(prev == 'f'){\n                for(int j=0;j<n;++j){\n                    dp[i][j+1] = dp[i-1][j];\n                }\n            }\n\n            prev = ch;\n        }\n\n        int result = 0;\n        for(int i=0;i<=n;++i){\n            result = (result + dp[n-1][i]) % MOD;\n        }\n\n\n        out.println(result);\n        out.close();\n\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner sc=new Scanner(System.in);\n\t\tint t=sc.nextInt();\n\t\tint a[]=new int[t];\n\t\tint c=0;\n\t\ta[0]=1;\n\t\tlong mod=(long) (1e9+7);\n\t\tsc.nextLine();\n\t\tfor(int i=0;i<t;i++)\n\t\t{\n\t\t\tString s=sc.nextLine();\n\t\t\tif(s.equals(\"f\"))\n\t\t\t\tc++;\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(int j=1;j<=c;j++)\n\t\t\t\t{\n\t\t\t\t\ta[j]=(int) (((a[j]%mod)+(a[j-1]%mod))%mod);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(a[c]);\n\t\tsc.close();\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Main3(), \"\", 128 * 1024 * 1024).start();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tSolver Machine = new Solver() ;\n\t\tMachine.Solve() ;\n\t\tMachine.Finish() ;\n\t\t// new Thread(null,new Runnable(){\n\t\t// \tpublic void run(){\n\t\t// \t\tSolver Machine = new Solver() ;\n\t\t// \t\ttry{\n\t\t// \t\t\tMachine.Solve() ;\n\t\t// \t\t\tMachine.Finish() ;\n\t\t// \t\t}catch(Exception e){\n\t\t// \t\t\te.printStackTrace() ;\n\t\t// \t\t\tSystem.out.flush() ;\n\t\t// \t\t\tSystem.exit(-1) ;\n\t\t// \t\t}catch(Error e){\n\t\t// \t\t\te.printStackTrace() ;\n\t\t// \t\t\tSystem.out.flush() ;\n\t\t// \t\t\tSystem.exit(-1) ;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// },\"Solver\",1l<<27).start() ;\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew PythonIndentation(System.in, System.out);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextInt();\n\t\tarr = new char[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tarr[i] = sc.next().charAt(0);\n\t\tmemo = new int[n + 1][n + 1];\n\t\tfor (int[] x : memo)\n\t\t\tArrays.fill(x, -1);\n\t\tSystem.out.println(solve(0, 0));\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        long mod = (long)Math.pow(10,9)+7;\n        long[][] arr = new long[N][N];\n        arr[0][0]=1;\n        for (int i=1;i<N;i++){\n            char c = sc.next().charAt(0);\n            if (c=='f'){\n                for (int j=1;j<N;j++) arr[i][j] = arr[i - 1][j - 1];\n            }\n            else {\n                long sum=0;\n                for (int j=N-1;j>=0;j--){\n                    sum=(sum+arr[i-1][j])%mod;\n                    arr[i][j] = sum;\n                }\n            }\n        }\n        long ans=0;\n        for (int i=0;i<N;i++) ans=(ans+arr[N-1][i])%mod;\n        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner in = new Scanner(System.in) ;\n\t\tint n = in.nextInt() ;\n\t\tboolean[] lst = new boolean[n] ;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tlst[i] = (in.next().equals(\"s\"))?false:true ;\n\t\t}\n\t\tSystem.out.println(dp(lst)) ;\n\t}\n", "complexity": "quadratic"}
{"code": "        public static void main(String[] args)\n                new Thread(null,new Runnable() {\n                @Override\n                public void run() {\n                    try{\n                        solve();\n                    }\n                    catch(Exception e){\n                        e.printStackTrace();\n                    }\n                }\n                },\"1\",1<<26).start();\n        }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        MyScanner in = new MyScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        char prev = ' ';\n\n        // index, maxNumOfIntents -> count\n        int[][] dp = new int[n+1][n+2];\n\n        dp[0][0] = 1;\n        for(int i=0;i<n;++i){\n            char ch = in.next().charAt(0);\n            if(prev == 's'){\n                int sum = 0;\n                for(int j=n;j>=0;--j){\n                    sum = (sum + dp[i-1][j]) % MOD;\n                    dp[i][j] = sum;\n                }\n            }else if(prev == 'f'){\n                for(int j=0;j<n;++j){\n                    dp[i][j+1] = dp[i-1][j];\n                }\n            }\n\n            prev = ch;\n        }\n\n        int result = 0;\n        for(int i=0;i<=n;++i){\n            result = (result + dp[n-1][i]) % MOD;\n        }\n\n\n        out.println(result);\n        out.close();\n\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tnew C().solve(in, out);\n\n\t\tin.close();\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        List<String> commands = IntStream.range(0, n).boxed().map(x -> s.next()).collect(Collectors.toList());\n        List<Integer> ways = new ArrayList<>();\n        ways.add(1);\n        boolean lastWasS = false;\n        for (String command : commands) {\n            boolean isS = \"s\".equals(command);\n\n            if (lastWasS) {\n                for (int i = 1; i < ways.size(); ++i) {\n                    int waysNumber = (ways.get(i-1) + ways.get(i)) % 1_000_000_007;\n                    ways.set(i, waysNumber);\n                }\n            }\n\n            if (!isS) {\n                ways.add(0);\n            }\n\n            lastWasS = isS;\n        }\n        System.out.println(ways.stream().reduce(0, (a, b) -> (a + b) % 1_000_000_007));\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\t// StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tFastScanner sc = new FastScanner();\n\t\tint dp[][]=new int[6000][6000];\n\t\tchar a[]=new char[6000];\n\t\tfinal int n=sc.nextInt();\n\t\tboolean flag=false;\n\t\tint cnt=0;\n\t\tchar pre='f';\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\t a[i]=sc.next().charAt(0);\n\n\t\t}\n\t\tdp[1][1]=1;\n\t\tfinal int mod=(int)1e9+7;\n\t\tdp[1][1]=1;\n\t\tfor(int i=2;i<=n;i++)\n\t\t{\n\t\t\tif(a[i-1]=='s')\n\t\t\t{\n\t\t\t\tint now=0;\n\t\t\t\tfor(int j=5050;j>=1;j--)\n\t\t\t\t{\n\t\t\t\t\tnow=(now+dp[i-1][j])%mod;\n\t\t\t\t\tdp[i][j]=now;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(int j=5050;j>=1;j--)\n\t\t\t\t{\n\t\t\t\t\tdp[i][j]=dp[i-1][j-1]%mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans=0;\n\t\tfor(int i=0;i<=5050;i++)\n\t\t{\n\t\t\tans+= dp[n][i]%mod;\n\t\t\tans%=mod;\n\t\t}\n\t\tout.println(ans%mod);\n\n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) throws FileNotFoundException {\n    (new _909C()).solve();\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException{\n\t    Scanner sc = new Scanner();\n\t    N = sc.nextInt();\n        int [] val = new int[N];\n        for(int i = 0; i < N; ++i)\n            if(sc.next().charAt(0) == 's')\n                val[i] = 0;\n            else\n                val[i] = 1;\n        l = new ArrayList<Integer>();\n        l.add(val[0]);\n\n        for(int i = 1; i < N; ++i)\n            if(val[i] == val[i - 1] && val[i] == 1) {\n                int prev = l.get(l.size() - 1);\n                l.set(l.size() - 1, ++prev);\n            } else if(val[i - 1] == 0){\n                l.add(val[i]);\n            }\n\n//        System.out.println(l);\n        dp = new int[l.size() + 1][N + 1];\n        for(int i = 0; i <= l.size(); ++i)\n            Arrays.fill(dp[i], -1);\n        System.out.println(f(0, 0));\n\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint commands = sc.nextInt();\n\t\tint[][] dp = new int[5000][5000];\n\t\tint interesting = 0;\n\t\tString prgm = \"\";\n\t\twhile (interesting < commands){\n\t\t\tbyte q = sc.read();\n\t\t\tif (q == 115 ){\n\t\t\t\tinteresting += 1;\n\t\t\t\tprgm += \"s\";\n\t\t\t}\n\t\t\telse if (q == 102){\n\t\t\t\tprgm += \"f\";\n\t\t\t\tinteresting += 1;\n\t\t\t}\n\t\t}\n\t\t//System.out.println(\"Program: \"+prgm);\n\t\tdp[0][0] = 1; // line, indentations\n\t\tfor(int line = 1;line<commands;line++){\n\t\t\tif(prgm.charAt(line-1) == 'f'){\n\t\t\t\tfor(int indent  = 1;indent<Math.min(2*line + 1, 5000);indent++){\n\t\t\t\t\tdp[line][indent] = dp[line-1][indent-1];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(prgm.charAt(line-1) == 's'){\n\t\t\t\tint w = 0;\n\t\t\t\tfor(int indent = Math.min(2*line + 1, 4999);indent >= 0;indent--){\n\t\t\t\t\tw = (w + dp[line-1][indent])% STMOD;\n\t\t\t\t\t\n\t\t\t\t\tdp[line][indent] = w ;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint q = 0;\n\t\tfor(int i = 0;i<5000;i++){\n\t\t\tq  = ( q + dp[commands-1][i] ) % STMOD;\n\t\t}\n\t\tSystem.out.println(q);\n\t\t\n\t    \n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException, Exception {\n            in = new BufferedReader(new InputStreamReader(System.in));\n            //in = new BufferedReader(new FileReader(\"metro.txt\"));\n            out = System.out;\n            \n            long mod = (long)1e9 + 7;\n            int n = nextInt();\n            long[][] dp = new long[n+1][n+1];\n            Character[] line = new Character[n+1];\n            line[0] = 'a';\n            for (int i = 1; i <= n; i++) {\n                line[i] = nextToken().charAt(0);\n                if(line[i-1] == 'f')//for\n                {\n                    for (int j = 0; j < i; j++) {\n                        dp[i][j+1] = dp[i-1][j];\n                    }\n                }\n                else if(line[i-1] == 's')//simple\n                {\n                    long temp = 0;\n                    for(int j = i; j >=0; j--)\n                    {\n                        temp = (temp + dp[i-1][j]) % mod;\n                        dp[i][j] = temp;\n                    }\n                }\n                else dp[i][0] = 1;\n            }\n            long total = 0;\n            for(int j = 0; j <= n; j++)\n                total = (total + dp[n][j]) % mod;\n            out.println(total);\n        }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        MyReader reader = new MyReader(System.in);\n//        MyReader reader = new MyReader(new FileInputStream(\"input.txt\"));\n        MyWriter writer = new MyWriter(System.out);\n        new Solution().run(reader, writer);\n        writer.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\n\t\t// TODO Auto-generated method stub\nScanner s=new Scanner(System.in);\nint n=s.nextInt();\nint a[]=new int[n];\nfor(int i=0;i<n;i++) {\n\tchar c=s.next().charAt(0);\n\tif(c=='f')\n\t\ta[i]=1;\n\t\t\n}\nint dp[][]=new int[n+1][n+1];\nfor(int i=0;i<=n;i++) {\n\tfor(int j=0;j<=n;j++)\n\t\tdp[i][j]=-1;\n}\nSystem.out.println(ans(dp,1,0,a,n));\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] sp = br.readLine().split(\" \");\n\t\tint n = Integer.parseInt(sp[0]);\n\t\tchar[] list = new char[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsp = br.readLine().split(\" \");\n\t\t\tlist[i] = sp[0].charAt(0);\n\t\t}\n\t\t\n\t\tint[] list2 = new int[n];\n\t\tint counter = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (list[i] == 's') {\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlist2[counter]++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[][] dp = new int[counter][n-counter+1];\n\t\tint[][] dpsum = new int[counter][n-counter+1];\n\t\tint[] count = new int[counter];\n\t\tcount[0] = list2[0];\n\t\tfor (int i = 1; i < counter; i++) {\n\t\t\tcount[i] = count[i-1] + list2[i];\n\t\t}\n\t\t\n\t\tfor (int i = 0; i <= count[0]; i++) {\n\t\t\tdp[0][i] = 1;\n\t\t\tdpsum[0][i] = i+1;\n\t\t}\n\t\tfor (int i = 1; i < counter; i++) {\n\t\t\tfor (int j = 0; j <= count[i]; j++) {\n\t\t\t\tdp[i][j] = dpsum[i-1][Math.min(j, count[i-1])];\n\t\t\t}\n\t\t\tdpsum[i][0] = dp[i][0];\n\t\t\tfor (int j = 1; j <= count[i]; j++) {\n\t\t\t\tdpsum[i][j] = (dpsum[i][j-1]+dp[i][j])%1000000007;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(dp[counter-1][n-counter]);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tboolean[] isFor = new boolean[n];\n\t\tfor (int a = 0; a < n; a++) {\n\t\t\tisFor[a] = input.next().charAt(0) == 'f';\n\t\t}\n\t\tlong[][] array = new long[n + 1][n + 1];\n\t\tarray[0][0] = 1;\n\t\tboolean isPreviousFor = false;\n\t\tfor (int idx = 0; idx < n; idx++) {\n\t\t\tlong heightCache = 0;\n\t\t\tfor (int height = n-1; height >= 0; height--) {\n\t\t\t\tif (isPreviousFor) {\n\t\t\t\t\tarray[idx + 1][height + 1] += array[idx][height];\n\t\t\t\t\tarray[idx + 1][height + 1] %= MOD;\n\t\t\t\t} else {\n\t\t\t\t\theightCache += array[idx][height];\n\t\t\t\t\theightCache %= MOD;\n\t\t\t\t\tarray[idx + 1][height] += heightCache;\n\t\t\t\t\tarray[idx + 1][height] %= MOD;\n\t\t\t\t}\n\t\t\t}\n\t\t\tisPreviousFor = isFor[idx];\n\t\t}\n//\t\tSystem.out.println(Arrays.deepToString(array));\n\t\tlong sum = 0;\n\t\tfor (int height = 0; height <= n; height++) {\n\t\t\tsum += array[n][height];\n\t\t}\n\t\tSystem.out.println(sum % MOD);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = Integer.parseInt(sc.nextLine());\n\t\tString[] sTypes = new String[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsTypes[i] = sc.nextLine();\n\t\t}\n\t\tsc.close();\n\t\t// dp[i][j] = number of ways to have a for loop indented\n\t\t// j times at the ith position.\n\t\tint[][] dp = new int[n][n];\n\t\tdp[0][0] = 1;\n\t\tfor (int i = 0; i < dp.length - 1; i++) {\n\t\t\tif (sTypes[i].equals(\"s\")) {\n\t\t\t\tint curSum = 0;\n\t\t\t\tfor (int j = i + 1; j >= 0; j--) {\n\t\t\t\t\tcurSum = (dp[i][j] + curSum) % MOD;\n\t\t\t\t\tdp[i + 1][j] += curSum;\n\t\t\t\t\tdp[i + 1][j] %= MOD;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (int j = 1; j <= i + 1; j++) {\n\t\t\t\t\tdp[i + 1][j] += dp[i][j - 1];\n\t\t\t\t\tdp[i + 1][j] %= MOD;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < dp[0].length; i++) {\n\t\t\tans = (ans + dp[n - 1][i]) % MOD;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tmain.solveC();\n\t}\n", "complexity": "quadratic"}
{"code": "       public static void main(String args[]){\n              Scanner sc = new Scanner(System.in);\n              int n = sc.nextInt();\n              char s[] = new char[n];\n              for(int i = 0; i < n; i++)\n                     s[i] = sc.next().charAt(0);\n              int dp[][] = new int[5001][5001];\n              int sum[][] = new int[5001][5001];\n              dp[0][0] = 1;\n              sum[0][0] = 1;\n              for(int i = 1; i < n; i++){\n                     for(int j = n - 1; j >= 0; j--){\n                            if(s[i-1] == 'f' && j > 0){\n                                   dp[i][j] = dp[i-1][j-1] % mod;\n                            }else if(s[i-1] == 's'){\n                                   dp[i][j] = sum[i-1][j] % mod;\n                            }\n                            sum[i][j] = (sum[i][j+1] + dp[i][j]) % mod;\n                     }\n              }\n              System.out.println(sum[n-1][0]);\n       }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        C909 solver = new C909();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] s) throws Exception {\n        StringBuilder stringBuilder = new StringBuilder();\n\n//        stringBuilder.append(\"7 3\\n\" +\n//                \"1 5 2 6 3 7 4\\n\" +\n//                \"2 5 3\\n\" +\n//                \"4 4 1\\n\" +\n//                \"1 7 3\");\n\n//\n//        Random r = new Random(5);\n//        stringBuilder.append(\"100000 5000 \");\n//        for (int i = 0; i < 100000; i++) {\n//            stringBuilder.append(\" \" + (r.nextInt(2000000000) - 1000000000) + \" \");\n//\n//        }\n//        for (int k = 0; k < 5000; k++) {\n//            stringBuilder.append(\" 1 100000 777 \");\n//        }\n\n        if (stringBuilder.length() == 0) {\n            sc = new MyScanner(System.in);\n        } else {\n            sc = new MyScanner(new BufferedReader(new StringReader(stringBuilder.toString())));\n        }\n\n        out = new PrintWriter(new OutputStreamWriter(System.out));\n\n        initData();\n        solve();\n\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint n = nextInt();\n\t\tint[]dp1 = new int[n+1];\n\t\tint[]dp2 = new int[n+1];\n\t\tdp1[1] = 1;\n\t\tint mod = (int) (1e9+7);\n\t\tchar[]instruction = new char[n+1];\n\t\tinstruction[0] = 's';\n\t\tint[]sum = new int[n+1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tinstruction[i] = next().charAt(0);\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tsum[j] = sum[j-1] + dp1[j];\n\t\t\t\tif (sum[j] >= mod)\n\t\t\t\t\tsum[j] -= mod;\n\t\t\t}\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tif (instruction[i-1]=='f')\n\t\t\t\t\tdp2[j] = dp1[j-1];\n\t\t\t\telse {\n\t\t\t\t\tdp2[j] = sum[i] - sum[j-1];\n\t\t\t\t\tif (dp2[j] < 0)\n\t\t\t\t\t\tdp2[j] += mod;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tdp1[j] = dp2[j];\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tans += dp1[i];\n\t\t\tif (ans >= mod)\n\t\t\t\tans -= mod;\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\t    public static void main(String[] args) throws Exception {\n\t\t\tnew Thread(null, new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnew code5().run();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, \"1\", 1 << 26).start();\n\t\t\t\n\t    \t//new code5().run();\n\t\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner in = new FastScanner(System.in); //new FileInputStream(new File(\"CFC.in\")));\n        //PrintWriter out = new PrintWriter(new File(\"CFC.out\"));\n        n = in.nextInt();\n        if(n == 1){\n            System.out.println(1);\n            return;\n        }\n        dp = new int[n][n+1];\n        s = new boolean[n];\n        for(int i = 0;i <n; i++)s[i] = in.next().equals(\"s\");\n        for(int j = 0;j < n; j++){\n            if(s[n-2])dp[n-1][j] = j+1;\n            else dp[n-1][j] = 1;\n        }\n        int suma , sumb;\n        for(int i = n-2; i >= 0; i--){\n            if(i == 0 ? true : s[i-1]){\n                if(s[i]) {\n                    for (int j = 0; j < n; j++) {\n                        dp[i][j] = ((j == 0 ? 0 : dp[i][j - 1]) + dp[i + 1][j]) % 1000000007;\n                    }\n                }\n                else{\n                    for(int j = 0;j < n; j++){\n                        dp[i][j] = ((j == 0 ? 0 : dp[i][j-1]) + dp[i+1][j+1]) % 1000000007;\n                    }\n                }\n            }\n            else{\n                if(s[i]){\n                    for(int j = 0;j < n; j++){\n                        dp[i][j] = dp[i+1][j];\n                    }\n                }\n                else{\n                    for(int j = 0;j < n; j++){\n                        dp[i][j] = dp[i+1][j+1];\n                    }\n                }\n            }\n        }\n        System.out.println(dp[0][0]);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = Integer.parseInt(sc.nextLine());\n\t\tArrayList<Integer> listCount = new ArrayList<Integer>();\n\t\tlistCount.add(1);\n\t\tboolean justf = false;\n\t\tint p = 1000000007;\n\t\tlong ans = 0;\n\t\t\n\t\tfor(int x=0; x<n; x++){\n\t\t\tString next = sc.nextLine();\n\t\t\t\n\t\t\tif(next.equals(\"f\")){\n\t\t\t\t\n\t\t\t\tif(justf){\n\t\t\t\t\tlistCount.add(0);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t\n\t\t\t\t\tfor(int i=1; i<listCount.size(); i++){\n\t\t\t\t\t\tint sum = (listCount.get(i-1) + listCount.get(i)) % p;\n\t\t\t\t\t\tlistCount.set(i, sum);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlistCount.add(0);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tjustf = true;\n\t\t\t}\n\t\t\telse{ // \"s\"\n\t\t\t\tif(justf){\n\t\t\t\t\tjustf = false;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor(int i=1; i<listCount.size(); i++){\n\t\t\t\t\t\tint sum = (listCount.get(i-1) + listCount.get(i)) % p;\n\t\t\t\t\t\tlistCount.set(i, sum);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//System.out.println(listCount);\n\t\t}\n\t\t\n\t\tfor(int i=0; i<listCount.size(); i++){\n\t\t\tans += listCount.get(i);\n\t\t}\n\t\t\n\t\tSystem.out.print((ans % p));\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// Write your code here\n      Scanner s=new Scanner(System.in);\n\t  int n=s.nextInt();\n\t  char[] seq=new char[n];\n\t  for(int i=0;i<n;i++){\n\t\t  seq[i]=s.next().charAt(0);  \n\t  }\n\t  long mod=(long)Math.pow(10,9)+7;\n\t  long[][] arr=new long[n][n];\n\t  arr[0][0]=1;\n\t  for(int i=1;i<n;i++){\n\t\t  if(seq[i-1]=='f'){\n\t\t\t  for(int j=1;j<n;j++){\n\t\t\t\t  arr[i][j]=arr[i-1][j-1];\n\t\t\t  }\n\t\t  }else{\n\t\t\t  long sum=0;\n\t\t\t  for(int j=n-1;j>=0;j--){\n\t\t\t\t  sum=(sum+arr[i-1][j])%mod;\n\t\t\t\t  arr[i][j]=sum;\n\t\t\t  }\n\t\t  }\n\t  }\n\t  long ans=0;\n\t  for(int i=0;i<n;i++){\n\t\t  ans=(ans+arr[n-1][i])%mod;\n\t  }\n\t  System.out.println(ans);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception { new A().run(); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\tnew utkarsh().solve();\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner in = new Scanner(System.in);\n\t\tint numbOfStatements = in.nextInt();\n\t\tlong[] dp = new long[numbOfStatements];\n\t\tdp[0] = 1L;\n\t\tboolean priorFor = in.next().equals(\"f\");\n\t\t\n\t\tfor(int i=0; i<numbOfStatements-1; i++)\n\t\t{\n\t\t\tString type = in.next();\n\t\t\tif (priorFor) {\n\t\t\t\tfor(int j=numbOfStatements-1;j>0;j--) {\n\t\t\t\t\tdp[j] = dp[j-1];\n\t\t\t\t}\n\t\t\t\tdp[0] = 0L;\n\t\t\t} else {\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor(int j = numbOfStatements - 1; j >= 0; --j) {\n\t\t\t\t\tsum = (sum + dp[j])  % 1000000007;\n\t\t\t\t\tdp[j] = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpriorFor = type.equals(\"f\");\n\t\t}\n\t\tlong ans = 0;\n\t\tfor(int j=0; j<numbOfStatements; j++) {\n\t\t\tans = (ans + dp[j]) % 1000000007;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out); \n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t//BEGIN HERE\n\t\tint n = in.nextInt();\n\t\tseq = new boolean[n];\n\t\tfor (int i = 0; i  < n; i++ ) {\n\t\t\tseq[i] = (in.next().charAt(0) == 'f');\n\t\t}\n\t\tmemo = new long[n][n+1];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tArrays.fill(memo[i], -1);\n\t\t}\n\t\tSystem.out.println(go(0, 0));\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C().run(); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew PythonIndentation(System.in, System.out);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    TaskC solver = new TaskC();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        (new Main()).run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFC();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tint n = sc.nextInt();\n\t\tstatements = new ArrayList<>();\n\n\t\tchar[] c = new char[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tc[i] = sc.next().charAt(0);\n\t\t}\n\n\t\tif(c[0] == 's')\n\t\t\tstatements.add(0);\n\t\telse\n\t\t\tstatements.add(1);\n\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tif(c[i - 1] == 'f') {\n\t\t\t\tif(c[i] == 'f')\n\t\t\t\t\tstatements.set(statements.size() - 1, statements.get(statements.size() - 1) + 1);\n\t\t\t}else {\n\n\t\t\t\tif(c[i] == 's')\n\t\t\t\t\tstatements.add(0);\n\t\t\t\telse\n\t\t\t\t\tstatements.add(1);\n\t\t\t}\n\t\t}\n\n\n\t\tmemo = new int[statements.size()][n + 1];\n\n\t\tfor(int[] a : memo)\n\t\t\tArrays.fill(a, -1);\n\t\tout.println(solve(0, 0));\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tc = new char[n];\n\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tc[i] = br.readLine().charAt(0);\n\n\t\tdp = new int[n + 1][n + 1];\n\n\t\tdp[0][0] = 1;\n\n\t\tfor(int i = 0; i < n - 1; i++){\n\t\t\tif(c[i] == 's'){\n\t\t\t\tint prev = 0;\n\t\t\t\tfor(int j = i; j >= 0; j--){\n\t\t\t\t\tprev += dp[i][j];\n\t\t\t\t\tprev %= mod;\n\t\t\t\t\tdp[i + 1][j] += prev;\n\t\t\t\t\tdp[i + 1][j] %= mod;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int j = 1; j <= n; j++){\n\t\t\t\t\tdp[i + 1][j] += dp[i][j - 1];\n\t\t\t\t\tdp[i + 1][j] %= mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tans += dp[n - 1][i];\n\t\t\tans %= mod;\n\t\t}\n\n\t\t// print(dp);\n\n\t\tSystem.out.println(ans);\n\t\t\n\t\tbr.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) {\n\t\tScanner ob=new Scanner(System.in);\n\t\tint n;\n\t\tlong MOD=(long)(1e9+7);\n\t\tint f=0,s=0;\n\t\tn=ob.nextInt();\n\t\tlong dp[][]=new long[n+2][n+2];\n\t\tdp[0][1]=1;\n\t\tchar ch='s';\n\t\tchar p;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t    p=ch;\n\t\t    ch=ob.next().charAt(0);\n\t\t    if(p=='f')\n\t\t    {\n\t\t        for(int j=1;j<=n;j++)\n\t\t        dp[i][j+1]=dp[i-1][j];\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t        for(int j=n;j>0;j--)\n\t\t        {\n\t\t            dp[i][j]=(dp[i][j+1]+dp[i-1][j])%MOD;\n\t\t        }\n\t\t    }\n\t\t}\n\t\t\n\t\tlong ans=0;\n\t\t\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t    ans=(ans+dp[n][i])%MOD;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew TaskC().run();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        File file = new File(\"in.txt\");\n        File fileOut = new File(\"out.txt\");\n        InputStream inputStream = null;\n        OutputStream outputStream = null;\n        // try {inputStream= new FileInputStream(file);} catch (FileNotFoundException ex){return;};\n//        try {outputStream= new FileOutputStream(fileOut);} catch (FileNotFoundException ex){return;};\n        inputStream = System.in;\n        outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        TaskC.InputReader in = new TaskC.InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.Solve(in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFS scan = new FS(System.in);\n\t\t\n\t\tN = scan.nextInt();\n\t\tlist = new int[N];\n\t\tfor(int i=0;i<N;i++) {\n\t\t\tlist[i] = scan.next().equals(\"s\")?0:1;\n\t\t}\n\t\tif(list[N-1] == 1) {\n\t\t\tSystem.out.println(0);\n\t\t\treturn;\n\t\t}\n\t\tmemo = new int[N+1][N+2];\n\t\tArrays.fill(memo[N], 1);\n\t\tint[] sum = new int[N+2];\n\t\t\n\t\tfor(int i=N-1;i>=0;i--) {\n\t\t\tsum[0] = memo[i+1][0];\n\t\t\tfor(int j=1;j<sum.length;j++) {\n\t\t\t\tsum[j] = sum[j-1] + memo[i+1][j];\n\t\t\t\tsum[j] %= mod;\n\t\t\t}\n\t\t\tfor(int j=0;j<=N;j++) {\n\t\t\t\tif (list[i]==1 && (i==0 || list[i-1]==1))\n\t\t\t\t\tmemo[i][j] = memo[i+1][j+1];\n\t\t\t\telse if(i==0 || list[i-1] == 1)\n\t\t\t\t\tmemo[i][j] = memo[i+1][j];\n\t\t\t\telse if (list[i]==1){\n//\t\t\t\t\tfor(int k=0;k<=j;k++) {\n//\t\t\t\t\t\tmemo[i][j] += memo[i+1][k+1];\n//\t\t\t\t\t}\n\t\t\t\t\tmemo[i][j] = sum[j+1] - sum[0] + mod;\n\t\t\t\t\tmemo[i][j] %= mod;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse if (list[i]==0) {\n\t\t\t\t\tmemo[i][j] = sum[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n//\t\tfor(int i=0;i<=N;i++) {\n//\t\t\tfor(int j=0;j<=N;j++) {\n//\t\t\t\tSystem.out.print(memo[i][j]+\" \");\n//\t\t\t}\n//\t\t\tSystem.out.println();\n//\t\t}\n//\t\tSystem.out.println();\n\t\tSystem.out.println(memo[0][0]);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception{\n        IO io = new IO(null,null);\n        n = io.getNextInt();\n        S = new char[n];\n        for (int i = 0;i < n;i++) S[i] = io.getNext().charAt(0);\n        io.println(solve(0,0));\n        io.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) {\n        lineCount = scanner.nextInt();\n        scanner.nextLine();\n        commands = new String[lineCount];\n\n        for (int i = 0; i < lineCount; i++) {\n            commands[i] = scanner.nextLine();\n        }\n\n        resolveWithDP();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new codeforces(),\"codeforces\",1<<26).start();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        solve(System.in,System.out);\n\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    int n = in.nextInt();\n    int[] sol = new int[n];\n    sol[0] = 1;\n    int mod = 1000000007;\n    int maxind = 0;\n    boolean f = true;\n    for (int i = 0; i < n; i++) {\n      if (!f) {\n        //int accum = sol[0];\n        for (int j = 1; j <= maxind; j++) {\n          sol[j] += sol[j-1];\n          sol[j] %= mod;\n        }\n        //out.println(Arrays.toString(sol));\n      }\n      if (in.next().equals(\"f\")) {\n        maxind++;\n        f = true;\n      }\n      else {\n        f = false;\n      }\n    }\n    int ans = 0;\n    for (int i = 0; i <= maxind; i++) {\n      ans += sol[i];\n      ans %= mod;\n    }\n    out.println(ans);\n    finish();\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        final int MAX = 5000;\n        final int MODULO = 1000000007;\n\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        in.nextLine();\n\n        int pre = 0;\n        int size = 0;\n\n        int[] block = new int[MAX];\n        for (int i = 0; i < n; i++) {\n            String command = in.nextLine();\n            if (command.startsWith(\"s\")) {\n                block[size++] = pre;\n                pre = 0;\n            } else {\n                pre++;\n            }\n        }\n\n        if (pre != 0) {\n            System.out.println(0);\n            return;\n        }\n\n        int[][] result = new int[2][MAX + 1];\n        int currentMax = 0;\n        int preIndex = 0;\n        result[preIndex][0] = 1;\n        for (int i = 1; i < size; i++) {\n            int currentIndex = preIndex ^ 1;\n            int j = block[i - 1];\n            for (int k = currentMax; k >= 0; k--) {\n                result[currentIndex][k + j] = (result[currentIndex][k + j + 1] + result[preIndex][k]) % MODULO;\n            }\n            for (int k = j - 1; k >= 0; k--) {\n                result[currentIndex][k] = result[currentIndex][j];\n\n            }\n            currentMax += j;\n            preIndex = currentIndex;\n//            for (int k = 0; k <= currentMax; k++) {\n//                System.out.print(result[preIndex][k] + \" \");\n//                \n//            }\n//            System.out.println(\"\");\n        }\n\n        int sum = 0;\n        for (int i = 0; i <= currentMax; i++) {\n            sum = (sum + result[preIndex][i]) % MODULO;\n        }\n        \n        System.out.println(sum);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tmemo = new int[n+1][n+1];\n\t\tfor(int [] i:memo)\n\t\t\tArrays.fill(i, -1);\n\t\tc = new char[n];\n\t\tfor (int i = 0; i < c.length; i++) {\n\t\t\tc[i] = sc.next().charAt(0);\n\t\t}\n\t\tout.println(dp(0,0));\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) throws Exception\n\t\tint n=sc.nextInt();char[] a=new char[n+1];a[0]='s';\n\t\t\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\ta[i]=sc.next().charAt(0);\n\t\t}\n\t\t\n\t\tint[][] dp=new int[n+1][maxn],sum=new int[n+1][maxn];dp[0][0]=1;\n\t\t\n\t\tsum[0][0]=1;\n\t\t\n\t\tfor(int i=1;i<maxn;i++)\n\t\t{\n\t\t\tsum[0][i]=add(sum[0][i],sum[0][i-1]);\n\t\t}\n\t\t\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(a[i]=='f')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tint curr=0,idx=0;\n\t\t\t\n\t\t\tfor(int j=i-1;j>=0;j--)\n\t\t\t{\n\t\t\t\tif(a[j]=='s')\n\t\t\t\t{\n\t\t\t\t\tidx=j;break;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcurr++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j=0;j<maxn;j++)\n\t\t\t{\n\t\t\t\tint up=Math.max(0,j-curr);\n\t\t\t\t\t\n\t\t\t\tlong now=(sum[idx][maxn-1]-(up==0?0:sum[idx][up-1]));\n\t\t\t\t\t\t\t  \n\t\t\t\tnow=add(now,mod);\n\t\t\t\t\t\n\t\t\t\tdp[i][j]=add(dp[i][j],now);\n\t\t\t}\n\t\t\t\n\t\t\tsum[i][0]=dp[i][0];\n\t\t\t\n\t\t\tfor(int j=1;j<maxn;j++)\n\t\t\t{\n\t\t\t\tsum[i][j]=add(dp[i][j],sum[i][j-1]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//out.println(dp[2][0]+\" \"+dp[2][1]+\" \"+dp[2][2]);\n\t\t\n\t\tout.println(dp[n][0]);out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C().run(); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\n\t\ttry(Scanner sc = new Scanner(System.in)){\n\t\t\tfinal int N = sc.nextInt();\n\t\t\t\n\t\t\tString[] ins = new String[N];\n\t\t\tfor(int i = 0; i < N; i++){\n\t\t\t\tins[i] = sc.next();\n\t\t\t}\n\t\t\t\n\t\t\tfinal long MOD = 1000000007;\n\t\t\tlong[] DP = new long[N];\n\t\t\tlong[] nextDP = new long[N];\n\t\t\t\n\t\t\tDP[0] = 1;\n\t\t\t\n\t\t\tfor(int i = 1; i < N; i++){\n\t\t\t\tArrays.fill(nextDP, 0);\n\t\t\t\tif(\"f\".equals(ins[i - 1])){\n\t\t\t\t\tfor(int j = 0; j < N - 1; j++){\n\t\t\t\t\t\tnextDP[j + 1] += DP[j];\n\t\t\t\t\t\tnextDP[j + 1] %= MOD;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tfor(int j = N - 1; j >= 0; j--){\n\t\t\t\t\t\tnextDP[j] += DP[j];\n\t\t\t\t\t\tnextDP[j] %= MOD;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(j < N - 1){\n\t\t\t\t\t\t\tnextDP[j] += nextDP[j + 1];\n\t\t\t\t\t\t\tnextDP[j] %= MOD;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\tlong[] tmp = DP;\n\t\t\t\t\tDP = nextDP;\n\t\t\t\t\tnextDP = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong answer = 0;\n\t\t\tfor(int i = 0; i < N; i++){\n\t\t\t\tanswer += DP[i];\n\t\t\t\tanswer %= MOD;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(answer);\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner in = new Scanner(System.in) ;\n\t\tint n = in.nextInt() ;\n\t\tboolean[] lst = new boolean[n] ;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tlst[i] = (in.next().equals(\"s\"))?false:true ;\n\t\t}\n\t\tSystem.out.println(dp(lst)) ;\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\n\t\tlong MOD = 1000000007;\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tlong[][]dp = new long[n][5010];\n\t\tchar[] program = new char[n];\n\t\t\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tprogram[i] = sc.next().charAt(0);\n\t\t}\n\t\t\n\t\tdp[0][0] = 1;\n\t\t\n\t\tlong[] acc = new long[5010];\n\t\t\n\t\tacc[0] = 1;\n\t\t\n\t\tfor(int i = 1 ; i < n; i++){\n\t\t\tfor(int j = 0; j< 5010; j++){\n\t\t\t\tif(program[i-1] == 'f'){\n\t\t\t\t\tif(j - 1 >= 0){\n\t\t\t\t\t\tdp[i][j] = dp[i-1][j-1];\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tdp[i][j] = acc[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tacc[5009] = dp[i][5009];\n\t\t\tfor(int j = 5008; j >= 0; j--){\n\t\t\t\tacc[j] = (acc[j + 1] + dp[i][j]) % MOD;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(acc[0]);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew C().run();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)throws Exception{new A().run();}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tN = sc.nextInt(); a = new char[N];\n\t\tfor(int i = 0; i < N; i++) a[i] = sc.nextChar();\n\t\t\n\t\tif(N == 1){out.println(1); out.flush(); return;}\n\t\tmemo = new int[N][N + 5];\n\t\tfor(int[] a : memo) Arrays.fill(a, -1);\n\t\t\n\t\tout.println(dp(0, 1));\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)throws Exception{\n\t\tMainMethod();\n\t\tprinter.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = in.nextInt();\n        char[]data = new char[n];\n        dp = new long[n][n];\n        for(long []a : dp){\n            Arrays.fill(a,-1);\n        }\n        for(int i = 0; i < n; i++){\n            data[i] = in.next().charAt(0);\n        }\n        out.println(cal(0, 0, data));\n\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(new BufferedInputStream(System.in, 1024 * 64));\n        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out, 1024 * 64));\n        solve(scan, pw);\n        pw.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n\n        int[][] DP = new int[n][n + 1];\n        DP[0][0] = 1;\n\n        for (int i = 0; i < n - 1; i++) {\n            if (in.next().charAt(0) == 'f') {\n                for (int j = 1; j < n; j++)\n                    DP[i+1][j] = DP[i][j-1];\n            } else {\n                for (int j = n - 1; j >= 0; j--)\n                    DP[i+1][j] = (DP[i][j] + DP[i+1][j+1]) % MOD;\n            }\n        }\n\n        int answer = 0;\n        for (int i = 0; i < n; i++)\n            answer = (answer + DP[n-1][i]) % MOD;\n        System.out.println(answer);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tFastScanner scanner = new FastScanner(System.in);\n\t\tsolve(scanner);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new D().run(); }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        //int[] x = {1,2,3,4,5,6,7,8,9,10};\n\n        int N = Integer.parseInt(br.readLine());\n        int[] d = new int[N];\n        st = new StringTokenizer(br.readLine());\n        for (int i = 0; i < N; i++) {\n            d[i] = Integer.parseInt(st.nextToken());\n        }\n        boolean cur = ((inv(d)) % 2) == 1;\n        // System.out.println(cur);\n        int Q = Integer.parseInt(br.readLine());\n        for (int i = 0; i < Q; i++) {\n            st = new StringTokenizer(br.readLine());\n            int a = Integer.parseInt(st.nextToken());\n            int b = Integer.parseInt(st.nextToken());\n\n            int dif = b - a + 1;\n            if (dif / 2 % 2 == 1) {\n                cur = !cur;\n            }\n\n            System.out.println((cur) ? \"odd\" : \"even\");\n        }\n\n//        for (int i = 0; i < 30; i++) {\n//            int[] x = new int[i];\n//            for (int j = 0; j < i; j++) {\n//                x[j] = j + 1;\n//            }\n//            int[] y = new int[x.length];\n//            for (int k = 0; k < x.length; k++) {\n//                y[x.length - 1 - k] = x[k];\n//            }\n//\n////            System.out.println(inv(x));\n////            System.out.println(inv(y));\n//            System.out.println(i + \" \" + ((inv(y) - inv(x))%2 == 1));\n//        }\n    }\n", "complexity": "quadratic"}
{"code": "\t    public static void main(String[] args) throws Exception {\n\t\t\tnew Thread(null, new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnew code5().run();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, \"1\", 1 << 26).start();\n\t\t\t\n\t    \t//new code5().run();\n\t\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner (System.in);\n\t\tint n = sc.nextInt();\n\t\tint a[] = new int[n+1];\n\t\tfor(int i=1 ; i<=n ; i++) a[i] = sc.nextInt();\n\t\tint cnt = 0;\n\t\tfor(int i=1 ; i<=n ; i++) {\n\t\t\tfor(int j=i-1 ; j>=1 ; j--) {\n\t\t\t\tif(a[i]<a[j])\n\t\t\t\t\t++cnt;\n\t\t\t}\n\t\t}\n\t\t//System.out.println(cnt);\n\t\tint q = sc.nextInt();\n\t\tcnt = cnt % 2; \n\t\twhile(q-->0) {\n\t\t\tint x = sc.nextInt();\n\t\t\tint y = sc.nextInt();\n\t\t\tint r = y-x+1;\n\t\t\tlong ok = (r*(r-1))/2;\n\t\t\tif(ok%2==0) {\n\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcnt ^= 1 ; \n\t\t\t}\n\t\t\tSystem.out.println(cnt==0?\"even\":\"odd\");\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new Main(),\"Main\",1<<26).start();\n\t}\t\n", "complexity": "quadratic"}
{"code": "        public static void main(String args[]) throws IOException {\n                Scanner sc = new Scanner(System.in);\n                int n = sc.nextInt(), i, j;\n                int ar[] = new int[n];\n                int inv = 0;\n                \n                for(i = 0; i < n; i++) {\n                        ar[i] = sc.nextInt();\n                }\n                \n                for(i = 0; i < n; i++) {\n                        for(j = 0; j < n; j++) {\n                                if(i > j && ar[i] < ar[j]) {\n                                        inv = (inv + 1) % 2;\n                                }\n                        }\n                }\n                \n                int q = sc.nextInt();\n                \n                for(i = 0; i < q; i++) {\n                        int l = sc.nextInt();\n                        int r = sc.nextInt();\n                        \n                        int c = ( ((r-l)*(r-l+1))/2 ) % 2;\n                        inv = (inv + c) % 2;\n                        \n                        if(inv == 0)\n                                System.out.println(\"even\");\n                        else\n                                System.out.println(\"odd\");\n\n                }\n        }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "public static void main(String[] args) throws IOException{\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\tbr.readLine();\n\tint[] a = Arrays.stream(br.readLine().split(\" \")).mapToInt(x->Integer.parseInt(x)).toArray();\n\tboolean evenInv = true;\n\tfor (int i = 0; i < a.length; i++) {\n\t\tfor (int j = 0; j < a.length-1; j++) {\n\t\t\tif(a[j]>a[j+1]) {\n\t\t\t\tint temp = a[j];\n\t\t\t\ta[j] = a[j+1];\n\t\t\t\ta[j+1] = temp;\n\t\t\t\tevenInv =!evenInv;\n\t\t\t}\n\t\t}\n\t}\n\tint q = Integer.parseInt(br.readLine());\n\tfor (int i = 0; i < q; i++) {\n\t\tint[] sw = Arrays.stream(br.readLine().split(\" \")).mapToInt(x->Integer.parseInt(x)).toArray();\n\t\tint len = sw[1]-sw[0];\n\t\tif((len)*(len+1)%4 != 0) {\n\t\t\tevenInv = !evenInv;\n\t\t}\n\t\tif(evenInv) {\n\t\t\tSystem.out.println(\"even\");\n\t\t}else {\n\t\t\tSystem.out.println(\"odd\");\n\t\t}\n\t}\n\t\n}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tir = new InputReader(System.in);\n\t\tout = new PrintWriter(System.out);\n\t\tsolve();\n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new Main(), \"persefone\", 1 << 28).start();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args){\n        new Thread(null,null,\"BaZ\",99999999)\n        {\n            public void run()\n            {\n                try\n                {\n                    solve();\n                }\n                catch(Exception e)\n                {  \n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        long[] arr = new long[n];\n        for (int i=0;i<n;i++) arr[i] = sc.nextLong();\n        long m = sc.nextLong();\n        long x = inversions(arr)%2;\n        for (int i=0;i<m;i++){\n            int l = sc.nextInt()-1;\n            int r = sc.nextInt()-1;\n            if ((r-l+1)%4>1) x=(x+1)%2;\n            if (x==1) System.out.println(\"odd\");\n            else System.out.println(\"even\");\n        }\n        /*int inv=0;\n        int temp=0;\n        long[][] inv_a = new long[n][n];\n        for (int i=0;i<n;i++){\n            for (int j=0;j<n;j++){\n                inv_a[i][j]=-1;\n            }\n        }\n        for (int i=n-2;i>=0;i--){\n            for (int j=i+1;j<n;j++){\n                if (arr[i]<arr[j]){\n                    inv++;\n                    temp++;\n                }\n                if (temp%2==0) inv_a[i][j]=0;\n                else inv_a[i][j]=1;\n            }\n            temp=0;\n        }\n        if (inv%2==0) inv=0;\n        else inv=1;\n        for (int i=0;i<m;i++){\n            int l = sc.nextInt()-1;\n            int r = sc.nextInt()-1;\n            long[][] exp = new long[r-l+1][r-l+1];\n            for (int k=0;k<exp.length;k++){\n                for (int h=0;h<exp.length;h++){\n                    exp[k][h]=-1;\n                }\n            }\n            for (int j=l;j<=r;j++){\n\n            }\n        }*/\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\ttok = new StringTokenizer(in.readLine());\n\t\tint n = Integer.parseInt(tok.nextToken());\n\t\t\n\t\tint tab[] = new int[n]; \n\t\ttok = new StringTokenizer(in.readLine());\n\t\tfor (int i=0; i<n; i++)\n\t\t\ttab[i] = Integer.parseInt(tok.nextToken());\n\t\t\n\t\tint inversions = countInversions(tab);\n\t\tboolean isOdd = inversions % 2 == 1;\n\t\t\n\t\ttok = new StringTokenizer(in.readLine());\n\t\tint k = Integer.parseInt(tok.nextToken());\n\t\t\n\t\tint start, end, len;\n\t\t\n\t\tfor (int i=0; i<k; i++)\t{\n\t\t\ttok = new StringTokenizer(in.readLine());\n\t\t\tstart = Integer.parseInt(tok.nextToken());\n\t\t\tend = Integer.parseInt(tok.nextToken());\n\t\t\t\n\t\t\tlen = (end - start + 1) % 4;\n\t\t\tif (len == 2 || len ==3)\n\t\t\t\tisOdd = !isOdd;\n\t\t\t\n\t\t\tout.println(isOdd ? \"odd\" : \"even\");\n\t\t}\n\t\t\n\t\tout.close();\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tnew D().solve(in, out);\n\n\t\tin.close();\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        int n = scanInt();\n        List<Integer> a = scanList(n);\n        int m = scanInt();\n        List<Integer> left = new ArrayList<>();\n        List<Integer> right = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            left.add(scanInt());\n            right.add(scanInt());\n        }\n\n        String even = \"even\";\n        String odd = \"odd\";\n\n        int inversions = 0;\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = i; j < a.size(); j++) {\n                if (a.get(i) > a.get(j)) {\n                    ++inversions;\n                }\n            }\n        }\n\n        inversions = inversions % 2;\n        for (int i = 0; i < m; i++) {\n            inversions = (inversions + (right.get(i) - left.get(i) + 1) / 2 % 2) % 2;\n            println(inversions % 2 == 0 ? even : odd);\n        }\n\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        bit = new int[1505];\n        array = new int[n + 1];\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        for(int i = 1;i <= n;i++)\n            array[i] = Integer.parseInt(st.nextToken());\n        long ans = 0;\n        for(int i = n;i >= 1;i--){\n            ans += read(array[i]);\n            update(array[i]);\n        }\n        long val = (ans & 1) + 1000_000;\n        int m = Integer.parseInt(br.readLine());\n        StringBuilder sb = new StringBuilder();\n        for(int i = 1;i <= m;i++){\n            st = new StringTokenizer(br.readLine());\n            int l = Integer.parseInt(st.nextToken());\n            int r = Integer.parseInt(st.nextToken());\n            long temp = (r - l + 1);\n            temp = temp*(temp - 1) / 2;\n            if((temp & 1) == 1)--val;\n            if((val & 1) == 1)sb.append(\"odd\");\n            else sb.append(\"even\");\n            sb.append('\\n');\n        }\n        System.out.print(sb);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Reader.init(System.in);\n        int n = Reader.nextInt();\n        int[] arr = new int[n];\n        int initial = 0;\n        for (int i = 0; i < n; i++) arr[i] = Reader.nextInt();\n\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = i + 1; j < arr.length; j++) if (arr[i] > arr[j]) initial++;\n        }\n\n        int m = Reader.nextInt();\n        boolean parity = initial % 2 == 0;\n//        System.out.println(parity ? \"even\": \"odd\");\n        for (int i = 0; i < m; i++) {\n            int l = Reader.nextInt();\n            int r = Reader.nextInt();\n            int elems = r - l + 1;\n            boolean change = (elems/2) % 2 == 0;\n            parity = parity == change;\n            System.out.println(parity ? \"even\": \"odd\");\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\tnew utkarsh().solve();\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew Thread(null, new Runnable()\n\t\t{\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tsoln();\n\t\t\t\t} catch (Exception e)\n\t\t\t\t{\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1 << 26).start();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tArrayList<Integer> temp = new ArrayList<>();\n\t\tint[] ar = new int[n];\n\t\tint[] memo = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint t = in.nextInt();\n\t\t\tint index = -1*Collections.binarySearch(temp, t)-1;\n\t\t\ttemp.add(index, t);\n\t\t\tar[i] = t;\n\t\t\tmemo[i] = i - index;\n\t\t\ttotal += memo[i];\n\t\t}\n\t\tint m = in.nextInt();\n\t\tfor (int i = 0; i < m; i++) {\n//\t\t\tint a = in.nextInt() - 1, b = in.nextInt() - 1;\n//\t\t\tquery(ar, memo, in.nextInt() - 1, in.nextInt() - 1);\n\t\t\ttotal += (-1*(in.nextInt() - 1 - in.nextInt() + 1) + 1) / 2;\n\t\t\tSystem.out.println(total%2 == 0 ? \"even\" : \"odd\");\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    run();\n  }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\t//int qq = 1;\n\t\tint qq = Integer.MAX_VALUE;\n\t\t//int qq = readInt();\n\t\tfor(int casenum = 1; casenum <= qq; casenum++)\t{\n\t\t\tint n = readInt();\n\t\t\tint[] l = new int[n];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tl[i] = readInt();\n\t\t\t}\n\t\t\tint ret = 0;\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tfor(int j = i+1; j < n; j++) {\n\t\t\t\t\tif(l[i] > l[j]) {\n\t\t\t\t\t\tret++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint qqq = readInt();\n\t\t\twhile(qqq-- > 0) {\n\t\t\t\tint a = readInt();\n\t\t\t\tint b = readInt();\n\t\t\t\tint d = b-a;\n\t\t\t\tret ^= d*(d+1)/2;\n\t\t\t\tpw.println(ret%2 == 0 ? \"even\" : \"odd\");\n\t\t\t}\n\t\t}\n\t\texitImmediately();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// InputStream inputStream = System.in; // Useful when taking input other than\n\t\t// console eg file handling // check ctor of inputReader\n\t\t// To print in file use this:- out = new PrintWriter(\"destination of file\n\t\t// including extension\");\n\n\t\tint n = scn.nextInt(), inv = 0;\n\t\tint[] arr = scn.nextIntArr(n);\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = i + 1; j < n; j++) {\n\t\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\t\tinv++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint ans = inv % 2;\n\t\t\n\t\tint m = scn.nextInt();\n\t\twhile(m-- > 0) {\n\t\t\tint l = scn.nextInt(), r = scn.nextInt();\n\t\t\t\n\t\t\tint change = ((r - l + 1) / 2) % 2;\n\t\t\t\n\t\t\tif(change == 1) {\n\t\t\t\tans = 1 - ans;\n\t\t\t}\n\t\t\t\n\t\t\tif(ans == 0) {\n\t\t\t\tout.println(\"even\");\n\t\t\t} else {\n\t\t\t\tout.println(\"odd\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry (final Scanner sc = new Scanner(System.in)) {\n\t\t\tfinal int N = sc.nextInt();\n\t\t\tint[] array = new int[N];\n\t\t\tfor(int i = 0; i < N; i++){\n\t\t\t\tarray[i] = sc.nextInt() - 1;\n\t\t\t}\n\t\t\t\n\t\t\tlong inv = 0;\n\t\t\tBIT bit = new BIT(N);\n\t\t\tfor(int i = 0; i < N; i++){\n\t\t\t\tinv += bit.sum(array[i], N);\n\t\t\t\tbit.add(array[i], 1);\n\t\t\t}\n\t\t\t//System.out.println(inv);\n\t\t\t\n\t\t\tint mod2 = (int)(inv % 2);\n\t\t\tfinal int M = sc.nextInt();\n\t\t\tfor(int i = 0; i < M; i++){\n\t\t\t\tfinal int l = sc.nextInt() - 1;\n\t\t\t\tfinal int r = sc.nextInt() - 1;\n\t\t\t\t\n\t\t\t\tfinal long size = (r - l) + 1;\n\t\t\t\tif(size > 1){\n\t\t\t\t\t//System.out.println(size + \" \" + ((size * (size - 1) / 2)));\n\t\t\t\t\tif((size * (size - 1) / 2) % 2 == 1){\n\t\t\t\t\t\tmod2 = 1 - mod2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println((mod2 == 0) ? \"even\" : \"odd\");\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)throws Exception{new A().run();}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])throws IOException{\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i] = in.nextInt();\n\t\tint inv = 0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<i;j++) {\n\t\t\t\tif(a[j]>a[i])\n\t\t\t\t\tinv++;\n\t\t\t}\n\t\t}\n\t\tinv%=2;\n\t\tint q = in.nextInt();\n\t\tfor(int i=0;i<q;i++) {\n\t\t\tint l = in.nextInt();\n\t\t\tint r = in.nextInt();\n\t\t\tint num = r-l+1;\n\t\t\tinv=(inv+num*(num-1)/2)%2;\n\t\t\tif(inv==0)\n\t\t\t\tprintWriter.println(\"even\");\n\t\t\telse\n\t\t\t\tprintWriter.println(\"odd\");\n\t\t}\n\t\tcloseall();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        // PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n        // \"output.txt\")));\n        PrintWriter out = new PrintWriter(System.out);\n        Scanner in = new Scanner();\n        int n = in.nextInt();\n        int[] data = new int[n];\n        for (int i = 0; i < n; i++) {\n            data[i] = in.nextInt();\n        }\n        FT tree = new FT(n + 1);\n        int result = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            tree.update(data[i], 1);\n            result += tree.get(data[i] - 1);\n            result %= 2;\n        }\n        int q = in.nextInt();\n        int[] tmp = new int[n];\n        for (int i = 0; i < q; i++) {\n            int l = in.nextInt() - 1;\n            int r = in.nextInt() - 1;\n            FT a = new FT(n + 1);\n            int total = r - l + 1;\n            total = total * (total - 1) / 2;\n            total %= 2;\n//            for (int j = r; j >= l; j--) {\n//                tmp[j] = data[j];\n//                a.update(data[j], 1);\n//                total -= a.get(data[j] - 1);\n//               // total += 2;\n//               // total %= 2;\n//            }\n            \n            // System.out.println(\"PRE \" + result);\n            // System.out.println(Arrays.toString(tmp));\n//            for (int j = 0; j < (r - l + 1) / 2; j++) {\n//                data[r - j] = tmp[l + j];\n//                data[l + j] = tmp[r - j];\n//            }\n            result += total;\n            result %= 2;\n           // System.out.println(\"AFTER \" + result);\n           // System.out.println(Arrays.toString(data));\n            if (result % 2 == 0) {\n                out.println(\"even\");\n            } else {\n                out.println(\"odd\");\n            }\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        \n        int n = in.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n        }\n        \n        int count = 0;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (a[i] > a[j]) {\n                    count++;\n                }\n            }            \n        }\n        \n        boolean isEven = (count % 2 == 0);\n        \n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\n        int m = in.nextInt();\n        for (int i = 0; i < m; i++) {\n            int l = in.nextInt();\n            int r = in.nextInt();\n            int size = (r - l) + 1;\n            int numOfConn = (size - 1) * size / 2;\n            if (numOfConn % 2 == 1) {\n                isEven = !isEven;\n            }\n            if (isEven) {\n                out.write(\"even\");\n                out.newLine();\n            } else {\n                out.write(\"odd\");\n                out.newLine();\n            }\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n    \tScanner in=new Scanner(System.in);  \n    \tint n=in.nextInt();\n    \tint a[]=new int[n];\n    \tfor(int i=0; i<n; i++)\n    \t\ta[i]=in.nextInt();\n    \tlong no=0;\n    \tfor(int i=0; i<n-1; i++)\n    \t{\n    \t\tfor(int j=i+1; j<n; j++)\n    \t\t{\n    \t\t\tif(a[i]>a[j])\n    \t\t\t\tno++;\n    \t\t}\n    \t}\n   // \tSystem.out.println(no);\n    \tno%=2;\n    \tint m=in.nextInt();\n    \tint te;\n    \tString te2=\"odd\",te1=\"even\";\n    \tfor(int i=0; i<m; i++)\n    \t{\n    \t\tte=in.nextInt()-in.nextInt();\n    \t\tte=-te+1;\n    //\t\tSystem.out.println(te);\n    \t\tif((te*(te-1)/2)%2==0)\n    \t\t{\n    //\t\t\tSystem.out.println(\"HOLA\"+no);\n    \t\t\tif(no==0)\n    \t\t\t\tSystem.out.println(\"even\");\n    \t\t\telse\n    \t\t\t\tSystem.out.println(\"odd\");\n    \t\t}\n    \t\telse\n    \t\t{\n    \t\t\tno=(no+1)%2;\n    \t\t\tif(no==0)\n    \t\t\t\tSystem.out.println(\"even\");\n    \t\t\telse\n    \t\t\t\tSystem.out.println(\"odd\");\n    \t\t}\n    \t}\n    \t\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t//Scanner sc = new Scanner(System.in);\n\t\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tint n = Integer.parseInt(sc.readLine());\n\t\tString[] t = sc.readLine().split(\" \");\n\t\tint[] list = new int[n];\n\t\tfor(int x=0; x<n; x++){\n\t\t\tlist[x] = Integer.parseInt(t[x]);\n\t\t}\n\t\t\n\t\tboolean even = true;\n\t\t\n\t\tint[] indList = new int[n+1];\n\t\t\n\t\t\n\t\tfor(int x=0; x<n; x++){\n\t\t\tindList[list[x]] = x;\n\t\t}\n\t\t\n\t\tfor(int x=1; x<=n; x++){\n\t\t\tint theIndex = indList[x];\n\t\t\tint other = list[x-1];\n\t\t\tif(theIndex != x-1){\n\t\t\t\teven = !even;\n\n\t\t\t\tlist[x-1] = x;\n\t\t\t\tlist[theIndex] = other;\n\t\t\t\t\n\t\t\t\tindList[x] = x-1;\n\t\t\t\tindList[other] = theIndex;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//System.out.println(even);\n\t\t\n\t\tint numQ = Integer.parseInt(sc.readLine());\n\t\tfor(int x=0; x<numQ; x++){\n\t\t\tString[] dir = sc.readLine().split(\" \");\n\t\t\tint l = Integer.parseInt(dir[0]);\n\t\t\tint r = Integer.parseInt(dir[1]);\n\t\t\tint diff = r - l + 1;\n\t\t\tif(diff%4 > 1){\n\t\t\t\teven = !even;\n\t\t\t}\n\t\t\tif(even){\n\t\t\t\tSystem.out.println(\"even\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"odd\");\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\n\t\tSTDIN scan = new STDIN();\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint n = scan.nextInt();\n\t\tboolean even = true;\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\ta[i] = scan.nextInt();\n\t\t\tfor(int j = 0; j < i; j++)\n\t\t\t\tif(a[i] < a[j]) even = !even;\n\t\t}\n\t\tint q = scan.nextInt();\n\t\twhile(q-- > 0) {\n\t\t\tint l = scan.nextInt(), r = scan.nextInt();\n\t\t\tint len = r - l + 1;\n\t\t\tint permutations = len * (len - 1) / 2;\n\t\t\tif(permutations % 2 != 0) even = !even;\n\t\t\tpw.println(even ? \"even\" : \"odd\");\n\t\t}\n\t\t\n\t\tpw.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws java.lang.Exception {\n\t\tMain solver = new Main();\n\t\tsolver.in = new InputReader(System.in);\n\t\tsolver.br = new BufferedReader(new InputStreamReader(System.in));\n\t\tsolver.out = new PrintWriter(System.out);\n\t\tsolver.solve();\n\t\tsolver.out.flush();\n\t\tsolver.out.close();\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) throws IOException {\n    // use ((((((( sc ............... for input\n\n   \n    int n=sc.nextInt();\n\n    int arr[]=new int[n];\n\n    for(int i=0;i<n;i++){\n      arr[i]=sc.nextInt();\n    }\n\n    int swap=0;\n\n    for(int i=0;i<n;i++){\n      for(int j=0;j<i;j++){\n        if(arr[i]<arr[j]){\n           swap++; \n        }\n      }\n    }\n\n    swap%=2;\n\n\n    int m=sc.nextInt();\n\n    for(int i=0;i<m;i++){\n\n      int a=sc.nextInt(),b=sc.nextInt();\n      swap+=((b-a)*((b-a)+1))/2;\n\n      swap%=2;\n\n      if(swap%2==0){System.out.println(\"even\");}\n      else{System.out.println(\"odd\");}\n    }\n\n\n          \n  }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint array[] =new int[n];\n\t\tfor(int i=0; i<=n-1; i++) {\n\t\t\tarray[i] = sc.nextInt();\n\t\t}\n\t\tint m = sc.nextInt();\n\t\tint result = count(array);\n\t\tfor(int i=1; i<=m; i++) {\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tresult += (b-a)*(b-a+1)/2;\n\t\t\tresult=result%2;\n\t\t\tif(result%2==1)\n\t\t\t\tSystem.out.println(\"odd\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"even\");\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\trun(System.in, System.out);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\n\t\tScanner s = new Scanner(System.in);\n\t\t\n\t\tint n=s.nextInt();\n\t\t\n\t\tint[] a = new int[n+1];\n\t\t\n\t\tfor(int i=1;i<=n;i++){\n\t\t\ta[i]=s.nextInt();\n\t\t}\n\t\t\n\t\tint m=s.nextInt();\n\t\tint count=0;\n\t\t\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=i+1;j<=n;j++){\n\t\t\t\tif(a[i]>a[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(count%2==0){\n\t\t\tcount=0;\n\t\t}else{\n\t\t\tcount=1;\n\t\t}\n\t\t\n\t\t//System.out.println(count);\n\t\tfor(int i=0;i<m;i++){\n\t\t\tint l=s.nextInt();\n\t\t\tint r=s.nextInt();\n\t\t\t\n\t\t\tif(l==r){\n\t\t\t\tif((count&1)==1){\n\t\t\t\t\tSystem.out.println(\"odd\");\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.println(\"even\");\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t int d=r-l+1;\n\t\t\t int segcount = 0;\n\t\t\t \n\t\t\t\n\t\t\t \n\t\t\tint  temp =   (d*(d-1))/2; \n\t\t\t \n\t\t\t if((temp&1)==1 && (count&1)==1){\n\t\t\t\t count=0;\n\t\t\t\t System.out.println(\"even\");\n\t\t\t }else if((temp&1)==1 && (count&1)==0){\n\t\t\t\t count=1;\n\t\t\t\t System.out.println(\"odd\");\n\t\t\t }else{\n\t\t\t\t if((count&1)==1){\n\t\t\t\t\t System.out.println(\"odd\");\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.println(\"even\");\n\t\t\t\t}\n\t\t\t }\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\t// Solver Machine = new Solver() ;\n\t\t// Machine.Solve() ;\n\t\t// Machine.Finish() ;\n\t\tnew Thread(null,new Runnable(){\n\t\t\tpublic void run(){\n\t\t\t\tSolver Machine = new Solver() ;\n\t\t\t\ttry{\n\t\t\t\t\tMachine.Solve() ;\n\t\t\t\t\tMachine.Finish() ;\n\t\t\t\t}catch(Exception e){\n\t\t\t\t\te.printStackTrace() ;\n\t\t\t\t\tSystem.out.flush() ;\n\t\t\t\t\tSystem.exit(-1) ;\n\t\t\t\t}catch(Error e){\n\t\t\t\t\te.printStackTrace() ;\n\t\t\t\t\tSystem.out.flush() ;\n\t\t\t\t\tSystem.exit(-1) ;\n\t\t\t\t}\n\t\t\t}\n\t\t},\"Solver\",1l<<27).start() ;\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)\n        new Thread(null ,new Runnable(){\n            public void run(){\n                try{\n                    solve();\n                } catch(Exception e){\n                    e.printStackTrace();\n                }\n            }\n        },\"1\",1<<26).start();\n        \n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint inv = 0;\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < arr.length; i++)\n\t\t\tarr[i] = sc.nextInt();\n\t\t\n\t\tfor (int i = 0; i < arr.length; i++)\n\t\t\tfor (int j = i+1; j < arr.length; j++)\n\t\t\t\tif(arr[i] > arr[j])\n\t\t\t\t\tinv++;\n\t\t\n\t\t\n\t\tboolean odd = (inv%2)!=0;\n\t\tint q = sc.nextInt();\n\t\tfor (int i = 0; i < q; i++)\n\t\t{\n\t\t\tint l = sc.nextInt();\n\t\t\tint r = sc.nextInt();\n\t\t\tint sz = r-l+1;\n\t\t\tint tot = (sz*(sz-1))/2;\n\t\t\tif(tot%2 != 0)\n\t\t\t\todd = !odd;\n\t\t\tif(odd)\n\t\t\t\tpw.println(\"odd\");\n\t\t\telse\n\t\t\t\tpw.println(\"even\");\n\t\t}\n\t\t\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tnew D().run();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tFastScanner scanner = new FastScanner(System.in);\n\t\tsolve(scanner);\n\t}\n", "complexity": "quadratic"}
{"code": "        public static void main(String[] args)throws Exception {\n                new D().run();\n        }\n", "complexity": "quadratic"}
{"code": "public static void main(String args[]) {\n    InputReader(System.in);\n    pw = new PrintWriter(System.out); \n    new Thread(null ,new Runnable(){\n       public void run(){\n           try{\n               solve();\n               \n               pw.close();\n           } catch(Exception e){\n               e.printStackTrace();\n           }\n       }\n   },\"1\",1<<26).start();\n   }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] aa = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\taa[i] = Integer.parseInt(st.nextToken());\n\t\tboolean odd = false;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = i + 1; j < n; j++)\n\t\t\t\tif (aa[i] > aa[j])\n\t\t\t\t\todd = !odd;\n\t\tint m = Integer.parseInt(br.readLine());\n\t\twhile (m-- > 0) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint l = Integer.parseInt(st.nextToken());\n\t\t\tint r = Integer.parseInt(st.nextToken());\n\t\t\tint k = r - l + 1;\n\t\t\tif ((long) k * (k - 1) / 2 % 2 != 0)\n\t\t\t\todd = !odd;\n\t\t\tpw.println(odd ? \"odd\" : \"even\");\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){new D911().run();}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tarr[i] = s.nextInt();\n\t\t}\n\t\tint parity = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tint count = 0;\n\t\t\tfor(int j = i + 1; j < n; j++) {\n\t\t\t\tif(arr[j] < arr[i]) {\n\t\t\t\t\tparity ^= 1;\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t}\n\t\tint m = s.nextInt();\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tint l = s.nextInt(), r = s.nextInt();\n\t\t\tif(((r - l + 1) / 2) % 2 == 1) {\n\t\t\t\tparity ^= 1;\n\t\t\t}\n\t\t\tSystem.out.println(parity == 1 ? \"odd\" : \"even\");\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint size = in.nextInt();\n\t\t\n\t\tint[] vals = new int[size];\n\t\tlong[] cum = new long[size];\n\t\tfor(int i=0; i<size; i++){\n\t\t\tvals[i] = in.nextInt();\n\t\t\t\n\t\t\tint c = 0;\n\t\t\tfor(int j=0; j<i; j++)\n\t\t\t\tif(vals[j] > vals[i]) c++;\n\t\t\t\n\t\t\tif(i != 0) cum[i] = cum[i-1]+c;\n\t\t\telse cum[i] = c;\n\t\t}\n\t\t\n\t\tlong tot = cum[size-1];\n\t\tint q = in.nextInt();\n\n\t\tint[] nv = new int[size];\n\t\tfor(int i=0; i<q; i++)\n\t\t{\n\t\t\tint l = in.nextInt()-1;\n\t\t\tint r = in.nextInt()-1;\n\t\t\tint n = (r-l);\n\t\t\t\n\t\t\tlong add = (n*(n+1))/2 - (cum[r] - cum[l]);\n\t\t\ttot = tot - (cum[r] - cum[l]) + add;\n\t\t\t\n\t\t\tif(tot%2 == 0)\n\t\t\t\tSystem.out.println(\"even\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"odd\");\n\t\t\t\n//\t\t\tfor(int j=0; j<=r-l; j++)\n//\t\t\t\tnv[l+j] = vals[r-j];\n//\t\t\t\n//\t\t\tfor(int j=0; j<=r-l; j++)\n//\t\t\t\tvals[l+j] = nv[l+j];\n\t\t\t\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)throws Throwable {\n\t\tMyScanner sc=new MyScanner();\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\t\n\t\tint n=sc.nextInt();\n\t\tint [] a=new int [n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=sc.nextInt();\n\t\tint c=0;\n\t\tfor(int i=0;i<n;i++)\n\t\t\tfor(int j=i+1;j<n;j++)\n\t\t\t\tif(a[i]>a[j])\n\t\t\t\t\tc^=1;\n\t\tint m=sc.nextInt();\n\t\twhile(m-->0){\n\t\t\tint l=sc.nextInt()-1;\n\t\t\tint r=sc.nextInt()-1;\n\t\t\tint d=r-l+1;\n\t\t\td=d*(d-1)/2;\n\t\t\tc^=(d%2);\n\t\t\tpw.println(c==0? \"even\" : \"odd\");\n\t\t}\n\t\t\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint n = Integer.parseInt(sc.nextLine());\n\t\tint inversions = 0;\n\t\tint[] data = new int[n];\n\t\t\n\t\tStringTokenizer st = new StringTokenizer(sc.nextLine());\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tdata[i] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = i + 1; j < n; j++) {\n\t\t\t\tif(data[i] > data[j])\n\t\t\t\t\tinversions++;\n\t\t\t}\n\t\t}\n\t\t//false = 0, true = 1;\n\t\tboolean inversiontype = (inversions % 2 == 1);\n\t\t\n\t\tint n2 = Integer.parseInt(sc.nextLine());\n\t\tfor(int i = 0; i < n2; i++) {\n\t\t\tst = new StringTokenizer(sc.nextLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint b = Integer.parseInt(st.nextToken());\n\t\t\t\n\t\t\tint parity = (b-a)*(b - a + 1)/2;\n\t\t\tif(parity % 2 == 0) {\n\t\t\t\tif(inversiontype)\n\t\t\t\t\tpw.println(\"odd\");\n\t\t\t\telse\n\t\t\t\t\tpw.println(\"even\");\n\t\t\t} else {\n\t\t\t\tinversiontype = !inversiontype;\n\t\t\t\tif(inversiontype)\n\t\t\t\t\tpw.println(\"odd\");\n\t\t\t\telse\n\t\t\t\t\tpw.println(\"even\");\n\t\t\t}\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] permutation = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tpermutation[i] = sc.nextInt();\n\t\t}\n\t\tint m = sc.nextInt();\n\t\tint[][] reverse = new int[m][2];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\treverse[i][0] = sc.nextInt();\n\t\t\treverse[i][1] = sc.nextInt();\n\t\t}\n\t\tint counter = 0;\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (permutation[i] > permutation[j]) {\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tboolean bayus = true;\n\t\tif (counter % 2 == 1) {\n\t\t\tbayus = false;\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint bobib = reverse[i][1] - reverse[i][0] + 1;\n\t\t\tint bafry = nChoose2(bobib);\n\t\t\tif (bafry%2 == 1) {\n\t\t\t\tbayus = !bayus;\n\t\t\t}\n\t\t\tif (bayus) {\n\t\t\t\tSystem.out.println(\"even\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"odd\");\n\t\t\t}\n\t\t}\n\n\t}\n", "complexity": "quadratic"}
{"code": "        public static void main(String[] args)throws Exception {\n                new D().run();\n        }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tFastScanner scan = new FastScanner();\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n = scan.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tarr[i] = scan.nextInt();\n\t\tint inv = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tfor (int j = i+1; j < n; j++)\n\t\t\t{\n\t\t\t\tif (arr[i] > arr[j])\n\t\t\t\t\tinv++;\n\t\t\t}\n\t\t}\n\t\tinv &= 1;\n\t\t\n\t\tint[] cumul = new int[n+1];\n\t\tfor (int i = 2; i < cumul.length; i++)\n\t\t{\n\t\t\tcumul[i] = cumul[i-1] + i-1;\n\t\t}\n\t\tint q = scan.nextInt();\n\t\tfor (int i = 0; i < q; i++)\n\t\t{\n\t\t\tint a = scan.nextInt()-1;\n\t\t\tint b = scan.nextInt()-1;\n\t\t\tinv += cumul[b-a+1];\n\t\t\tinv &= 1;\n\t\t\tif (inv == 0)\n\t\t\t\tpw.println(\"even\");\n\t\t\telse\n\t\t\t\tpw.println(\"odd\");\n\t\t}\n\t\tpw.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception { new A().run(); }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    run();\n  }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tInput input = new Input();\n\t\tinput = SystemInput();\n\t\tList<String> resultList = run(input);\n\t\tfor(String result:resultList){\n\t\t\tSystem.out.println(result);\n\t\t}\n\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] s) throws Exception {\n        StringBuilder stringBuilder = new StringBuilder();\n\n//        stringBuilder.append(\"7 3\\n\" +\n//                \"1 5 2 6 3 7 4\\n\" +\n//                \"2 5 3\\n\" +\n//                \"4 4 1\\n\" +\n//                \"1 7 3\");\n\n//\n//        Random r = new Random(5);\n//        stringBuilder.append(\"100000 5000 \");\n//        for (int i = 0; i < 100000; i++) {\n//            stringBuilder.append(\" \" + (r.nextInt(2000000000) - 1000000000) + \" \");\n//\n//        }\n//        for (int k = 0; k < 5000; k++) {\n//            stringBuilder.append(\" 1 100000 777 \");\n//        }\n        if (stringBuilder.length() == 0) {\n            sc = new MyScanner(System.in);\n        } else {\n            sc = new MyScanner(new BufferedReader(new StringReader(stringBuilder.toString())));\n        }\n\n        out = new PrintWriter(new OutputStreamWriter(System.out));\n\n        initData();\n        solve();\n\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(reader.readLine());\n        StringTokenizer st = new StringTokenizer(reader.readLine(),\" \");\n        int[] perm = new int[n];\n        int count=0;\n        for (int i=0;i<n;i++) {\n            perm[i]=Integer.parseInt(st.nextToken());\n            for (int j=0;j<i;j++) {\n                if (perm[j]>perm[i]) {\n                    count++;\n                }\n            }\n        }\n        count=count%2;\n        int m = Integer.parseInt(reader.readLine());\n        for (int i=0;i<m;i++) {\n            StringTokenizer st2 = new StringTokenizer(reader.readLine(),\" \");\n            int a = Integer.parseInt(st2.nextToken());\n            int b = Integer.parseInt(st2.nextToken());\n            if ((b-a+1)%4==2||(b-a+1)%4==3) {\n                count++;\n                count=count%2;\n            }\n            if(count%2==0) {\n                System.out.println(\"even\");\n            } else {\n                System.out.println(\"odd\");\n            }\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        out.flush();\n        new D().solve();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew D().run();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception \n\t\tnew A().run();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; ++i) {\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint ans = 0;\t\n\t\tfor(int i = 0; i < n; ++i) {\n\t\t\tfor(int j = i+1; j < n; ++j) {\n\t\t\t\tif(a[i] > a[j]) ans++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint m = in.nextInt();\n\t\t\n\t\tfor(int i = 0; i < m; ++i) {\n\t\t\tint l = in.nextInt();\n\t\t\tint r = in.nextInt();\n\t\t\t\n\t\t\tint size = r-l + 1;\n\t\t\t\n\t\t\tint x = size * size - size;\n\t\t\tx = x >> 1;\n\t\t\n\t\t\tans = ans^x;\n\t\t\tif(ans%2 == 0) System.out.println(\"even\");\n\t\t\telse System.out.println(\"odd\");\n\t\t\t\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFA();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\n\t\tFastScanner scan = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = scan.nextInt();\n\t\tint[] a = new int[n+1];\n\t\tfor(int i = 1; i <= n; i++) a[i] = scan.nextInt();\n\t\tBIT bit = new BIT(n);\n\t\tint p = 0;\n\t\tfor(int i = 1; i <= n; i++) {\n\t\t\tp ^= bit.atOrAbove(a[i])&1;\n\t\t\tbit.add(a[i], 1);\n\t\t}\n\t\tint m = scan.nextInt();\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tint l = scan.nextInt(), r = scan.nextInt();\n\t\t\tint s = r-l+1;\n\t\t\tint in = s*(s-1)/2;\n\t\t\tif((in&1) == 1) p ^= 1;\n\t\t\tout.println(p==0?\"even\":\"odd\");\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        // PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n        // \"output.txt\")));\n        PrintWriter out = new PrintWriter(System.out);\n        Scanner in = new Scanner();\n        int n = in.nextInt();\n        int[] data = new int[n];\n        for (int i = 0; i < n; i++) {\n            data[i] = in.nextInt();\n        }\n        FT tree = new FT(n + 1);\n        int result = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            tree.update(data[i], 1);\n            result += tree.get(data[i] - 1);\n            result %= 2;\n        }\n        int q = in.nextInt();\n        int[] tmp = new int[n];\n        for (int i = 0; i < q; i++) {\n            int l = in.nextInt() - 1;\n            int r = in.nextInt() - 1;\n\n            int total = r - l + 1;\n            total = total * (total - 1) / 2;\n            total %= 2;\n\n            result += total;\n            result %= 2;\n            if (result % 2 == 0) {\n                out.println(\"even\");\n            } else {\n                out.println(\"odd\");\n            }\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] sp = br.readLine().split(\" \");\n\t\tint n = Integer.parseInt(sp[0]);\n\t\tint[] a = new int[n];\n\t\tsp = br.readLine().split(\" \");\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = Integer.parseInt(sp[i]);\n\t\t}\n\t\tint inversions = 0;\n\t\tfor (int i = 0; i < n-1; i++) {\n\t\t\tfor (int j = i+1; j < n; j++) {\n\t\t\t\tif (a[i] > a[j]) {\n\t\t\t\t\tinversions++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinversions = inversions%2;\n\t\t\n\t\tsp = br.readLine().split(\" \");\n\t\tint m = Integer.parseInt(sp[0]);\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tsp = br.readLine().split(\" \");\n\t\t\tint l = Integer.parseInt(sp[0]);\n\t\t\tint r = Integer.parseInt(sp[1]);\n\t\t\tif ((r-l+1)%4 == 2 || (r-l+1)%4 == 3) {\n\t\t\t\tinversions = 1-inversions;\n\t\t\t}\n\t\t\tif (inversions == 1) {\n\t\t\t\tSystem.out.println(\"odd\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"even\");\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt(), sum = 0;\n        int [] a = new int[n+1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = in.nextInt();\n        }\n        for (int i = 1; i <= n; ++i)\n            for (int j = i + 1; j <= n; ++j)\n                sum += a[i] > a[j] ? 1 : 0;\n        int m = in.nextInt();\n        sum &= 1;\n        for (int i = 1; i <= m; i++) {\n            int l = in.nextInt(), r = in.nextInt();\n            if (((r - l + 1) / 2) % 2 == 1)\n                sum ^= 1;\n            System.out.println(sum == 1 ? \"odd\" : \"even\");\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] arr = new int[n];\n        int chet = 0;\n        for (int i = 0; i < n; i++) {\n            arr[i]=scanner.nextInt();\n            for (int j = 0; j < i; j++) {\n                if (arr[j]>arr[i]) chet^=1;\n            }\n        }\n        n = scanner.nextInt();\n        for (int i = 0; i < n; i++) {\n            int l = scanner.nextInt();\n            int r = scanner.nextInt();\n            if ((((r-l+1)/2)&1)!=0){\n                chet^=1;\n            }\n            if (chet==1){\n                System.out.println(\"odd\");\n            }else{\n                System.out.println(\"even\");\n            }\n        }\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)throws IOException\n        Reader sc=new Reader();\n        PrintWriter out=new PrintWriter(System.out);\n        int n=sc.i();\n        int arr[]=sc.arr(n);\n        int count=0;\n        for(int i=0;i<n;i++)for(int j=i+1;j<n;j++)if(arr[j]<arr[i])count++;\n        count%=2;\n        int q=sc.i();\n        while(q-->0)\n        {\n            int a=sc.i();\n            int b=sc.i();\n            long len=((long)(b-a+1)*(b-a))/2;\n            if(len%2==1)count^=1;\n            if(count==0)out.println(\"even\");\n            else out.println(\"odd\");\n        }\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int[] values = new int[N];\n        for(int i=0;i<N;i++){\n            values[i] = sc.nextInt();\n        }\n        int query = sc.nextInt();\n        int[][] tasks = new int[query][2];\n        for(int i=0;i<query;i++){\n            tasks[i][0] = sc.nextInt();\n            tasks[i][1] = sc.nextInt();\n        }\n        int startinversions = 0;\n        for(int i=1;i<values.length;i++){\n            for(int j=i-1;j>=0;j--){\n                if(values[i]<values[j]){\n                    startinversions++;\n                }\n            }\n        }\n        int value = startinversions%2;\n        for(int[] task : tasks){\n            int n = task[1]-task[0];\n            if(n*(n+1)/2 % 2 != 0){\n                value = (value+1)%2;\n            }\n            if(value==1){\n                System.out.println(\"odd\");\n            }\n            else{\n                System.out.println(\"even\");\n            }\n        }\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new lc1(),\"lc1\",1<<26).start();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint inv=0;\n\t\tint []a=new int [n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=sc.nextInt();\n\t\tfor(int j=0;j<n;j++)\n\t\t\tfor(int i=j+1;i<n;i++)\n\t\t\t\tif(a[j]>a[i])\n\t\t\t\t\tinv=1-inv;\n\n\t\tint m=sc.nextInt();\n\t\tStringBuilder sb=new StringBuilder();\n\t\twhile(m-->0)\n\t\t{\n\t\t\tint l=sc.nextInt();\n\t\t\tint r=sc.nextInt();\n\t\t\tint s=r-l+1;\n\t\t\tif(s*(s-1)/2%2==1)\n\t\t\t\tinv=1-inv;\n\t\t\tif(inv==1)\n\t\t\t\tsb.append(\"odd\\n\");\n\t\t\telse\n\t\t\t\tsb.append(\"even\\n\");\n\t\t}\n\t\tSystem.out.print(sb);\n\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception{\n        IO io = new IO(null,null);\n        int n = io.getNextInt(),ans = 0;\n        int [] A = new int[n];\n        for (int i = 0;i < n;i++) {\n            A[i] = io.getNextInt();\n            for (int j = 0;j < i;j++)\n                ans ^= (A[j] > A[i]) ? 1 : 0;\n        }\n        String [] word = {\"even\",\"odd\"};\n        int m = io.getNextInt();\n        for (int i = 0;i < m;i++) {\n            int l = io.getNextInt(),r = io.getNextInt();\n            int len = r - l + 1;\n            long tot = len*(len - 1L)/2;\n            ans ^= tot & 1;\n            io.println(word[ans]);\n        }\n        io.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        MyReader reader = new MyReader(System.in);\n//        MyReader reader = new MyReader(new FileInputStream(\"input.txt\"));\n        MyWriter writer = new MyWriter(System.out);\n        new Solution().run(reader, writer);\n        writer.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint n = nextInt();\n\t\tint[]a = new int[n+1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\tint inv = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tif (a[j] > a[i])\n\t\t\t\t\tinv++;\n\t\t\t}\n\t\t}\n\t\tint m = nextInt();\n\t\tboolean odd = inv % 2==1;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint left = nextInt();\n\t\t\tint right = nextInt();\n\t\t\tlong k = right-left+1;\n\t\t\tif (k*(k-1)/2 % 2==1)\n\t\t\t\todd = !odd;\n\t\t\tif (odd)\n\t\t\t\tpw.println(\"odd\");\n\t\t\telse\n\t\t\t\tpw.println(\"even\");\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t//BEGIN HERE\n\t\tint n = in.nextInt();\n\t\tint perm[] = new int[n];\n\t\tfor(int i  = 0; i < n; i++) {\n\t\t\tperm[i] = in.nextInt();\n\t\t}\n\t\tint q = in.nextInt();\n\t\t\n\t\tint inv[] = new int[n];\n\t\tinv[0] = 0;\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tinv[i] = inv[i-1];\n\t\t\tfor(int j = i - 1; j >= 0; j--) {\n\t\t\t\tif(perm[i] < perm[j]) inv[i]++;\n\t\t\t}\n\t\t}\n\t\tboolean parity = inv[n-1] % 2 == 0;\n\t\t\n\t\tfor(int i = 0; i < q; i++) {\n\t\t\tint l = in.nextInt() - 1;\n\t\t\tint r = in.nextInt() -1; \n\t\t\tif(l == r) {\n\t\t\t\tSystem.out.println(parity?\"even\":\"odd\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tint s = r - l + 1;\n\t\t\ts = s * (s-1)/ 2;\n\t\t\tif(s % 2 != 0) {\n\t\t\t\tparity = !parity;\n\t\t\t}\n\t\t\tSystem.out.println(parity?\"even\":\"odd\");\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tin=new InputReader(System.in);\n\t\tw=new PrintWriter(System.out);\n\t\t int n=ni();\n\t\t int[] a=na(n);\n\t\t int ans=0;\n\t\t for(int i=0;i<n;i++)\n\t\t {\n\t\t\t for(int j=i+1;j<n;j++)\n\t\t\t {\n\t\t\t\t if(a[j]<a[i])\n\t\t\t\t\t ans++;\n\t\t\t }\n\t\t }\n\t\t int m=ni();\n\t\t ans=ans%2;\n\t\t while(m-->0)\n\t\t {\n\t\t\t int l=ni(),r=ni();\n\t\t\t int range=r-l+1;\n\t\t\t range=range*(range-1)/2;\n\t\t\t range=range%2;\n\t\t\t ans=(ans+range)%2;\n\t\t\t if(ans==1)\n\t\t\t\t w.println(\"odd\");\n\t\t\t else\n\t\t\t\t w.println(\"even\");\n\t\t }\n       w.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        StringTokenizer st;\n\n        int n = Integer.parseInt(br.readLine());\n        st = new StringTokenizer(br.readLine());\n        int[] num = new int[n];\n        for (int i = 0; i < n; i++) {\n            num[i] = Integer.parseInt(st.nextToken());\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (num[i] < num[j]) {\n                    count++;\n                }\n            }\n        }\n\n        boolean ans = count % 2 == 0;\n        for (int m = Integer.parseInt(br.readLine()); m-- > 0; ) {\n            st = new StringTokenizer(br.readLine());\n            int l = Integer.parseInt(st.nextToken());\n            int r = Integer.parseInt(st.nextToken());\n            if (((r - l + 1) / 2) % 2 != 0) {\n                ans = !ans;\n            }\n            out.println(ans ? \"even\" : \"odd\");\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    boolean even = true;\n    int n = in.nextInt();\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++) {\n      a[i] = in.nextInt();\n      for (int j = 0; j < i; j++) {\n        if (a[j] > a[i]) {\n          even = !even;\n        }\n      }\n    }\n    int m = in.nextInt();\n    for (int i = 0; i < m; i++) {\n      if ((1 - in.nextInt() + in.nextInt()) / 2 % 2 == 1) {\n        even = !even;\n      }\n      if (even)\n        out.println(\"even\");\n      else\n        out.println(\"odd\");\n    }\n    finish();\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        // TODO Auto-generated method stub\n        new Template().run();\n    }\n", "complexity": "quadratic"}
{"code": "   public static void main(String[] args){\n      Scanner sc = new Scanner(System.in);\n      \n      int n = sc.nextInt();\n      int[] array = new int[n];\n      for(int i = 0; i < n; i++){\n         array[i] = sc.nextInt();\n      }\n      int count = 0;\n      for(int i = 0; i < array.length; i++){\n         for(int j = i+1; j < array.length; j++){\n            if(array[i] > array[j]){\n               count++;\n            }\n         }\n      }\n      count%=2;\n      int q = sc.nextInt();\n      for(int i = 0; i < q; i++){\n         int l = sc.nextInt();\n         int r = sc.nextInt();\n         int sz = r - l + 1;\n         count += (sz*(sz-1))/2;\n         count %= 2;\n         if(count == 1) \n            System.out.println(\"odd\");\n         else \n            System.out.println(\"even\");\n      }\n   }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tint n=Integer.parseInt(br.readLine());\n\t\tint[] A=new int[n];\n\t\tString[] s=br.readLine().split(\" \");\n\t\tfor(int i=0;i<n;i++){\n\t\t\tA[i]=Integer.parseInt(s[i]);\n\t\t}\n\t\t/*int[][] nck=new int[2000][2000];\n\t\tfor(int i=0;i<=n;i++){\n\t\t\tfor(int j=0;j<=n;j++){\n\t\t\t\tnck[i][j]=0;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<=n;i++){\n\t\t\tnck[i][0]=1;\n\t\t\tfor(int j=1;j<=i;j++){\n\t\t\t\tnck[i][j]=nck[i-1][j]+nck[i-1][j-1];\n\t\t\t\tnck[i][j]%=2;\n\t\t\t}\n\t\t}*/\n\t\tint inv=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tif(A[i]>A[j]){\n\t\t\t\t\tinv++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb=new StringBuilder(\"\");\n\t\tint m=Integer.parseInt(br.readLine());\n\t\tfor(int i=0;i<m;i++){\n\t\t\ts=br.readLine().split(\" \");\n\t\t\tint li=Integer.parseInt(s[0]);\n\t\t\tint ri=Integer.parseInt(s[1]);\n\t\t\tint tot=ri-li+1;\n\t\t\tinv=inv+tot*(tot-1)/2;\n\t\t\tif(inv%2==0){\n\t\t\t\tsb.append(\"even\\n\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(\"odd\\n\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.print(sb);\n\t}\n", "complexity": "quadratic"}
{"code": "          public static void main(String[] args) throws IOException\n                new Thread(null, new Sample(), \"whatever\", 1<<26).start();\n          }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        solve(in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = s.nextInt();\n\t\t}\n\t\tint m = s.nextInt();\n\n\t\tint inv = 0;\n\t\t// count inversions\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (a[i] > a[j]) {\n\t\t\t\t\tinv++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tboolean odd = (inv % 2 == 1);\n\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint l = s.nextInt();\n\t\t\tint r = s.nextInt() + 1; // r excluding, l including\n\t\t\tint num = (r - l)*(r - l - 1)/2;\n\t\t\tif (num % 2 == 1) {\n\t\t\t\todd = !odd;\n\t\t\t}\n\t\t\tSystem.out.println((odd) ? \"odd\" : \"even\");\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main( String[] args ) {\n\tScanner in = new Scanner( System.in );\n\tint n = in.nextInt();\n\tString st = in.next();\n\tint[] a = new int[n];\n\tfor ( int i = 0; i < n; i++ )\n\t    a[i] = st.charAt( i ) - 48;\n\tboolean c = false;\n\tfor ( int i = 1; !c && i < n; i++ ) {\n\t    int s = 0;\n\t    for ( int j = 0; j < i; j++ )\n\t\ts += a[j];\n\t    int t = 0;\n\t    for ( int j = i; j < n; j++ ) {\n\t\tt += a[j];\n\t\tif ( t > s )\n\t\t    if ( t - a[j] != s )\n\t\t\tbreak;\n\t\t    else\n\t\t\tt = a[j];\n\t    }\n\t    if ( t == s )\n\t\tc = true;\n\t}\n\tSystem.out.println( c ? \"YES\" : \"NO\" );\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n        \n        \n        new Thread(null,new Runnable() {\n        \tpublic void run() {\n        \t\tnew Main().solve();\n        \t}\n        },\"1\",1<<26).start();\n        \n        \n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastScanner sc = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int N = sc.nextInt();\n        int[] pre = new int[N + 1];\n        for (int i = 1; i <= N; i++) {\n            pre[i] = pre[i - 1] + sc.nextInt();\n        }\n//        var sumMap = new HashMap<Integer, ArrayList<Pair>>();\n        var sums = new ArrayList<Pair>();\n        for (int i = 1; i <= N; i++) {\n            for (int j = i; j <= N; j++) {\n                int sum = pre[j] - pre[i - 1];\n//                sumMap.computeIfAbsent(sum, val -> new ArrayList<>()).add(new Pair(i, j, sum));\n                sums.add(new Pair(i, j, sum));\n            }\n        }\n        Collections.sort(sums, (p1, p2) -> p1.sum - p2.sum != 0 ? p1.sum - p2.sum : p1.r - p2.r);\n        var ans = new ArrayList<Pair>();\n        int i = 0;\n        while (i < sums.size()) {\n            int j = i;\n            var group = new ArrayList(List.of(sums.get(i)));\n            int last = sums.get(i).r;\n            while (j + 1 < sums.size() && sums.get(j + 1).sum == sums.get(j).sum) {\n                if (sums.get(j + 1).l > last) {\n                    group.add(sums.get(j + 1));\n                    last = sums.get(j + 1).r;\n                }\n                j++;\n            }\n//            System.out.println(group);\n            if (group.size() > ans.size()) {\n                ans = group;\n            }\n            i = j + 1;\n        }\n        out.println(ans.size());\n        for (Pair p : ans) {\n            out.println(p);\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        int n = readInt();\n        long[] a = readLongArray(n);\n        HashMap<Long, List<Block>> blocks = new HashMap<>();\n        for (int j = 0; j < n; j++) {\n            long sum = 0;\n            for (int i = j; i >= 0; i--) {\n                sum += a[i];\n                if (!blocks.containsKey(sum))\n                    blocks.put(sum, new LinkedList<>());\n                List<Block> blockList = blocks.get(sum);\n                if (blockList.size() > 0 && blockList.get(blockList.size() - 1).r == j) continue;\n                blockList.add(new Block(i, j));\n            }\n        }\n\n        List<Block> bestBlocks = new LinkedList<>();\n        for(long sum : blocks.keySet()) {\n            List<Block> blockList = blocks.get(sum);\n            List<Block> curBest = new LinkedList<>();\n            int lastR = -1;\n            for(Block block : blockList) {\n                if (block.l > lastR) {\n                    curBest.add(block);\n                    lastR = block.r;\n                }\n            }\n            if (curBest.size() > bestBlocks.size()) {\n                bestBlocks = curBest;\n            }\n        }\n\n        writer.println(bestBlocks.size());\n        for(Block block : bestBlocks) {\n            writer.printf(\"%d %d\\n\", block.l + 1, block.r + 1);\n        }\n\n        writer.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n//        int t = sc.nextInt();\n        int t = 1;\n        for (int i = 0; i < t; i++) {\n            solve(sc, pw);\n        }\n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        F2SameSumBlocksHard solver = new F2SameSumBlocksHard();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\t\n\t\tint N = in.nextInt();\n\t\tint[] arr = new int[N];\n\t\tfor(int i = 0; i < N; i++)\n\t\t\tarr[i] = in.nextInt();\n\t\t\n\t\tlong[] sum = new long[arr.length + 1];\n\t\tfor(int i = 1; i < sum.length; i++)\n\t\t\tsum[i] = sum[i-1] + arr[i-1];\n\t\t\n\t\tHashMap<Long, ArrayList<Pair>> map = new HashMap<>();\n\t\t\n\t\tfor(int i = 0; i < sum.length; i++) {\n\t\t\tfor(int j = i+1; j < sum.length; j++) {\n\t\t\t\tlong diff = sum[j] - sum[i];\n\t\t\t\t\n\t\t\t\tif(!map.containsKey(diff))\n\t\t\t\t\tmap.put(diff, new ArrayList<>());\n\t\t\t\t\n\t\t\t\tArrayList<Pair> list = map.get(diff);\n\t\t\t\tlist.add(new Pair(i, j));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(long key : map.keySet()) {\n\t\t\tArrayList<Pair> list1 = map.get(key);\n\t\t\tCollections.sort(list1);\n\t\t\t\n\t\t\tArrayList<Pair> list2 = new ArrayList<>();\n\t\t\t\n\t\t\tint end = 0;\n\t\t\tfor(Pair p : list1) {\n\t\t\t\tif(end <= p.a) {\n\t\t\t\t\tlist2.add(p);\n\t\t\t\t\tend = p.b;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tmap.put(key, list2);\n\t\t}\n\t\t\n\t\tlong maxKey = -1;\n\t\tint max = -1;\n\t\tfor(long key : map.keySet()) {\n\t\t\tif(map.get(key).size() > max) {\n\t\t\t\tmax = map.get(key).size();\n\t\t\t\tmaxKey = key;\n\t\t\t}\n\t\t}\n\t\t\n\t\tArrayList<Pair> list = map.get(maxKey);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(list.size());\n\t\tsb.append(\"\\n\");\n\t\t\n\t\tfor(Pair p : list) {\n\t\t\tsb.append((1 + p.a) + \" \" + p.b);\n\t\t\tsb.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.println(sb.toString());\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n+1];\n\t\tfor(int i = 1;i<=n;++i){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tHashMap<Integer, Vector<Pair>> map = new HashMap<>();\n\t\tfor(int i = 1;i<=n;++i){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i;j<=n;++j){\n\t\t\t\tsum+=a[j];\n\t\t\t\tif(!map.containsKey(sum))\n\t\t\t\t\tmap.put(sum,new Vector<>());\n\t\t\t\tmap.get(sum).add(new Pair(i,j));\n\t\t\t}\n\t\t}\n\t\tVector<Pair> an = null;\n\t\tfor(Integer key : map.keySet()){\n\t\t\tVector<Pair> vec = map.get(key);\n\t\t\tVector<Pair> ans = new Vector<>();\n\t\t\tans.add(vec.get(0));\n\t\t\tint size = 1;\n\t\t\tfor(int i = 1;i<vec.size();++i){\n\t\t\t\tif(ans.get(size-1).r > vec.get(i).r)\n\t\t\t\t\tans.set(size-1,vec.get(i));\n\t\t\t\telse if(ans.get(size-1).r < vec.get(i).l){\n\t\t\t\t\tans.add(vec.get(i));\n\t\t\t\t\tsize++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(an == null || an.size() < size) an = ans;\n\t\t}\n\t\tStringBuilder res = new StringBuilder().append(an.size() + \"\\n\");\n\t\tfor(int i = 0;i<an.size();++i)\n\t\t\tres.append(an.get(i).l + \" \" + an.get(i).r + \"\\n\");\n\t\tSystem.out.println(res);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n       InputReader in=new InputReader(System.in);\n       PrintWriter pw = new PrintWriter(System.out);\n       int n=in.nextInt();\n       long arr[]=new long[n];\n       for(int i=0;i<n;i++) {\n    \t   arr[i]=in.nextLong();\n       }\n       HashMap<Long,Integer>hm=new HashMap<>();\n       int id=0;\n       for(int i=0;i<n;i++) {\n    \t   long sum=0;\n    \t   for(int j=i;j<n;j++) {\n    \t\t   sum+=arr[j];\n    \t\t   if(!hm.containsKey(sum)) {\n    \t\t\t   hm.put(sum, id++);\n    \t\t\t   a[id-1]=new ArrayList<pair>();\n    \t\t   }\n    \t\t   a[hm.get(sum)].add(new pair(i,j));\n    \t   }\n       }\n       Vector<pair>fi=new Vector<>();\n       for(int i=0;i<id;i++) {\n    \t  Vector<pair> v=schedule_it(a[i]);\n    \t   if(v.size()>fi.size()) {\n    \t\t   fi=v;\n    \t   }\n       }\n       pw.println(fi.size());\n       for(int i=0;i<fi.size();i++) {\n    \t   pw.println((fi.get(i).x+1)+\" \"+(fi.get(i).y+1));\n       }\n       pw.flush();\n       pw.close();\n        \n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        long startPointTime = System.currentTimeMillis();\n        scannerIn = System.in;\n        printerBW = new BufferedWriter(new OutputStreamWriter(System.out));\n        if (args.length > 0 && args[0].equalsIgnoreCase(\"debug\")\n                || args.length > 1 && args[1].equalsIgnoreCase(\"debug\"))\n            DEBUG = true;\n\n        main2();\n        long endTime = System.currentTimeMillis();\n        float totalProgramTime = endTime - startPointTime;\n        if (args.length > 0 && args[0].equalsIgnoreCase(\"time\") || args.length > 1 && args[1].equalsIgnoreCase(\"time\"))\n            print(\"Execution time is \" + totalProgramTime + \" (\" + (totalProgramTime / 1000) + \"s)\");\n        close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n\n        new Main().go();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        in = new FastReader();\n        int n=ni();\n        int[] arr=takeIntegerArrayInput(n);\n        HashMap<Long,ArrayList<pair>> hm=new HashMap<>();\n        int max_size=0;\n        long S=-1;\n        for (int i=0;i<arr.length;i++){\n            long sum=0;\n            for (int j=i;j>=0;j--){\n                sum+=arr[j];\n                if (!hm.containsKey(sum)){\n                    hm.put(sum,new ArrayList<>());\n                }\n                if (hm.get(sum).size()==0||hm.get(sum).get(hm.get(sum).size()-1).y<j){\n                    hm.get(sum).add(new pair(j,i));\n                }\n                if (hm.get(sum).size()>max_size){\n                    max_size=hm.get(sum).size();\n                    S=sum;\n                }\n\n            }\n        }\n        System.out.println(max_size);\n        StringBuilder sb=new StringBuilder();\n        for (int i=0;i<hm.get(S).size();i++){\n            sb.append(hm.get(S).get(i)).append(\"\\n\");\n        }\n        System.out.print(sb.toString());\n\n\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tReader in = new Reader();\n\t\tint n = in.nextInt();\n\t\tint[] a = in.na(n);\n\t\tHashMap<Long, ArrayList<Pair>> v = new HashMap<>();\n\t\tfor(int i = 0; i<n; i++) {\n\t\t\tlong s  = 0;\n\t\t\tfor(int j = i; j<n; j++) {\n\t\t\t\ts+=a[j];\n\t\t\t\tPair p = new Pair(i+1, j+1);\n\t\t\t\tif(v.containsKey(s)) {\n\t\t\t\t\tv.get(s).add(p);\n\t\t\t\t}else {\n\t\t\t\t\tArrayList<Pair> xd = new ArrayList<>();\n\t\t\t\t\txd.add(p);\n\t\t\t\t\tv.put(s,xd);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tArrayList<Pair> ans = new ArrayList<>();\n\t\tfor(Entry<Long,ArrayList<Pair>> e : v.entrySet()) {\n\t\t\tArrayList<Pair> pairs = e.getValue();\n\t\t\tCollections.sort(pairs);\n\t\t\tStack<Pair> st = new Stack<>();\n\t\t\tfor(int i = 0; i<pairs.size(); i++) {\n\t\t\t\tPair cur = pairs.get(i);\n\t\t\t\tif(st.isEmpty()||st.peek().r<cur.l) {\n\t\t\t\t\tst.push(cur);\n\t\t\t\t}else if(st.peek().r>cur.r) {\n\t\t\t\t\t\tst.pop();\n\t\t\t\t\t\tst.push(cur);\n\t\t\t\t}\n\t\t\t\tif(st.size()>ans.size()) ans = new ArrayList<>(st);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans.size());\n\t\tfor(Pair p : ans)\n\t\t\tSystem.out.println(p.l +\" \"+p.r);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)throws IOException{\n                \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        \n        PrintWriter out = new PrintWriter(System.out);\n        \n        int n = Integer.parseInt(st.nextToken());\n        \n        TreeSet<Node> ts = new TreeSet<Node>();\n        \n        st = new StringTokenizer(br.readLine());\n        int[] a = new int[n+1];\n        for(int i=1;i<=n;i++) a[i] = Integer.parseInt(st.nextToken());\n        \n        int[] s = new int[n+1];\n        for(int i=1;i<=n;i++) s[i] = s[i-1] + a[i];\n        \n        for(int i=1;i<=n;i++){\n            for(int j=i;j<=n;j++){\n                ts.add(new Node(s[j]-s[i-1],i,j));\n            }\n        }\n        int minvalue = -2000*(int)Math.pow(10,5);\n        int maxvalue = 2000*(int)Math.pow(10,5);\n        ts.add(new Node(minvalue,0,0));\n        ts.add(new Node(maxvalue,0,0));\n        //System.out.println(minvalue);\n        Node node = ts.higher(ts.first());\n        \n        int sum = 0;\n        \n        \n        \n        int max = 0;\n        Node m = null;\n        \n        while(node.sum!=maxvalue){\n            \n            sum = node.sum;\n            while(node.sum==sum){\n                node = ts.higher(node);\n            }\n            \n            Node var = ts.lower(node);\n           // System.out.println(sum+\" \"+var.sum);\n            max = 0;\n            while(var.sum==sum){\n                \n                Node next = ts.higher(new Node(sum,var.r+1,0));\n                \n                if(max>1+next.nb){\n                    var.nb = max;\n                    var.ini = m;\n                }\n                else if(next.ini==null){\n                \n                    var.nb = 1 + next.nb;\n                    var.next = next;\n                    if(max<var.nb){\n                        max = var.nb;\n                        m = var;\n                    }\n                    \n                    \n                }else{\n                    \n                    var.nb = 1 + next.nb;\n                    var.next = next.ini;\n                    if(max<var.nb){\n                        max = var.nb;\n                        m = var;\n                    }\n                    \n                }\n                \n            \n                var = ts.lower(var);\n                    \n                //System.out.println(sum+\" \"+var.sum);\n            }\n            \n            \n        }\n        \n        int k = 0;\n        Node best = new Node(minvalue,0,0);\n\n        //var = new Node(minvalue,0,0);\n        for(Node var:ts){\n            if(k<var.nb){\n                k = var.nb;\n                best = var;\n                if(var.ini!=null) best = var.ini;\n            }\n        }\n        \n        if(k==0) System.out.println(\"erreur\");\n        else{\n            \n            out.println(k);\n            sum = best.sum;\n            while(best.sum==sum){\n                out.println(best.l+\" \"+best.r);\n                best = best.next;\n            }\n            \n        }\n        \n        \n        out.flush();\n        \n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        inputClass in = new inputClass(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F2SameSumBlocksHard solver = new F2SameSumBlocksHard();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        new A().run();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner s = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tSolver solver = new Solver();\n\t\tsolver.solve(s, out);\n\n\t\tout.close();\n\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        long currTime = System.currentTimeMillis();\n        if (debug) {\n            solveProblem(new FileInputStream(new File(\"input.in\")));\n            System.out.println(\"Time: \" + (System.currentTimeMillis() - currTime));\n        } else {\n            solveProblem(System.in);\n        }\n    }\n", "complexity": "quadratic"}
{"code": "      public static void main(String omkar[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         int[] arr = new int[N];\n         st = new StringTokenizer(infile.readLine());\n         for(int i=0; i < N; i++)\n            arr[i] = Integer.parseInt(st.nextToken());\n         HashMap<Long, ArrayList<Integer>> map = new HashMap<Long, ArrayList<Integer>>();\n         for(int r=0; r < N; r++)\n         {\n            long sum = 0L;\n            for(int i=r; i >= 0; i--)\n            {\n               sum += arr[i];\n               if(!map.containsKey(sum))\n                  map.put(sum, new ArrayList<Integer>());\n               map.get(sum).add(i);\n               map.get(sum).add(r);\n            }\n         }\n         ArrayList<Integer> res = new ArrayList<Integer>();\n         for(long key: map.keySet())\n         {\n            ArrayList<Integer> ls = map.get(key);\n            ArrayList<Integer> temp = new ArrayList<Integer>();\n            temp.add(ls.get(0));\n            temp.add(ls.get(1));\n            int r = ls.get(1);\n            for(int i=2; i < ls.size(); i+=2)\n               if(r < ls.get(i))\n               {\n                  r = ls.get(i+1);\n                  temp.add(ls.get(i));\n                  temp.add(ls.get(i+1));\n               }\n            if(res.size() < temp.size())\n               res = temp;\n         }\n         System.out.println(res.size()/2);\n         StringBuilder sb = new StringBuilder();\n         for(int i=0; i < res.size(); i+=2)\n         {\n            sb.append((1+res.get(i))+\" \"+(1+res.get(i+1)));\n            sb.append(\"\\n\");\n         }\n         System.out.print(sb);\n      }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t\tStringTokenizer sa=new StringTokenizer(in.readLine());\n\t\tint n=Integer.parseInt(sa.nextToken());\n\t\tsa=new StringTokenizer(in.readLine());\n\t\tint[] a=new int[n];\n\t\tTreeMap<Integer,ArrayList<node>> mp=new TreeMap();\n\t\tfor (int i=0;i<n;++i) a[i]=Integer.parseInt(sa.nextToken());\n\t\tArrayList<node> ans=new ArrayList<node>();\n\t\tfor (int i=0;i<n;++i) {\n\t\t\tint tmp=0;\n\t\t\tfor (int j=i;j<n;++j) {\n\t\t\t\ttmp+=a[j];\n\t\t\t\tif (!mp.containsKey(tmp)) {\n\t\t\t\t\tArrayList<node> t=new ArrayList();\n\t\t\t\t\tt.add(new node(i,j));\n\t\t\t\t\tmp.put(tmp,t);\n\t\t\t\t} else {\n\t\t\t\t\tArrayList<node> t=mp.get(tmp);\n\t\t\t\t\tint left=0,right=t.size()-1,res=t.size();\n\t\t\t\t\twhile (left<=right) {\n\t\t\t\t\t\tint mid=(left+right)>>1;\n\t\t\t\t\t\tif (t.get(mid).r>=i) {\n\t\t\t\t\t\t\tres=mid;\n\t\t\t\t\t\t\tright=mid-1;\n\t\t\t\t\t\t} else left=mid+1;\n\t\t\t\t\t}\n\t\t\t\t\tif (res==t.size()) t.add(new node(i,j));\n\t\t\t\t\telse if (t.get(res).r>j) t.set(res,new node(i,j));\n\t\t\t\t}\n\t\t\t\tif (mp.get(tmp).size()>ans.size()) ans=mp.get(tmp);\n\t\t\t}\n\t\t}\n\t\tout.println(ans.size());\n\t\tfor (int i=0;i<ans.size();++i)\n\t\t\tout.printf(\"%d %d\\n\",ans.get(i).l+1,ans.get(i).r+1);\n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String argas[]){\n\t\tScanner cin=new Scanner(System.in);\n\t\tma=new HashMap();\n\t\tn=cin.nextInt();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tarr[i]=cin.nextInt();\n\t\t\tsum=0;\n\t\t\tfor(int j=i;j>0;j--){\n\t\t\t\tsum+=arr[j];\n\t\t\t\tif(ma.containsKey(sum)) ma.get(sum).add(new seg(j,i));\n\t\t\t\telse {\n\t\t\t\t\tma.put(sum, new ArrayList<seg>());\n\t\t\t\t\tma.get(sum).add(new seg(j,i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans=0,te;\n\t\tArrayList<seg> best=new ArrayList(),now,temp;\n\t\tIterator it=ma.entrySet().iterator();\n\t\twhile(it.hasNext()){\n\t\t\tnow=new ArrayList();\n\t\t\tte=0;\n\t\t\tMap.Entry entry=(Map.Entry) it.next();\n\t\t\ttemp=(ArrayList<seg>) entry.getValue();\n\t\t\tdex=0;\n\t\t\tfor(int i=0;i<temp.size();i++){\n\t\t\t\tif(temp.get(i).l>dex){\n\t\t\t\t\tdex=temp.get(i).r;\n\t\t\t\t\tte++;\n\t\t\t\t\tnow.add(new seg(temp.get(i).l,temp.get(i).r));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(te>ans){\n\t\t\t\tans=te;\n\t\t\t\tbest=now;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tfor(int i=0;i<best.size();i++){\n\t\t\tSystem.out.println(best.get(i).l+\" \"+best.get(i).r);\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        String[] s = br.readLine().split(\" \");\n        int[] arr = new int[n];\n        for(int i = 0; i<n; i++) arr[i] = Integer.parseInt(s[i]);\n\n        HashMap<Integer, ArrayList<Pair>> map = new HashMap<>();\n        for(int i = 0; i<n; i++) {\n            int sum = 0;\n            for(int j = i; j>=0; j--) {\n                sum += arr[j];\n                ArrayList<Pair> list = map.get(sum);\n                if(list == null) {\n                    list = new ArrayList<>();\n                    map.put(sum, list);\n                }\n                list.add(new Pair(j, i));\n            }\n        }\n\n        Iterator it = map.entrySet().iterator();\n        ArrayList<Pair> ans = new ArrayList<>();\n        for(;it.hasNext();){\n            Map.Entry<Integer, ArrayList<Pair>> entry = (Map.Entry<Integer, ArrayList<Pair>>)it.next();\n            ArrayList<Pair> list = entry.getValue();\n            ArrayList<Pair> pre = new ArrayList<>();\n            int r = -1;\n            for(Pair p : list) {\n                if(p.f > r) {\n                    pre.add(p);\n                    r = p.s;\n                }\n            }\n            if(ans.size()<pre.size()) ans = pre;\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(ans.size()).append('\\n');\n        for(Pair p : ans) {\n            sb.append(p.f+1).append(' ').append(p.s+1).append('\\n');\n        }\n        System.out.print(sb);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastScanner sc = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int N = sc.nextInt();\n        int[] pre = new int[N + 1];\n        for (int i = 1; i <= N; i++) {\n            pre[i] = pre[i - 1] + sc.nextInt();\n        }\n        var sumMap = new HashMap<Integer, ArrayList<Pair>>();\n        for (int i = 1; i <= N; i++) {\n            for (int j = i; j <= N; j++) {\n                int sum = pre[j] - pre[i - 1];\n                sumMap.computeIfAbsent(sum, val -> new ArrayList<>()).add(new Pair(i, j));\n            }\n        }\n        var ans = new ArrayList<Pair>();\n        for (var list : sumMap.values()) {\n            Collections.sort(list, Comparator.comparingInt(p -> p.r));\n            // greedily schedule the intervals\n            int last = 0;\n            var group = new ArrayList<Pair>();\n            for (Pair p : list) {\n                if (p.l > last) {\n                    group.add(p);\n                    last = p.r;\n                }\n            }\n            if (group.size() > ans.size()) {\n                ans = group;\n            }\n        }\n        out.println(ans.size());\n        for (Pair p : ans) {\n            out.println(p);\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter pw = new PrintWriter(System.out);\n        new Solve6().solve(pw);\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\t\tScanner scan = new Scanner(System.in);\t\t\t\t\n\n\t\tMap<Long , List<Interval>> map = new HashMap<>();\t\t\n\t\tint i , j , n = scan.nextInt() , max = 0;\n\t\tlong ans = 0;\n\t\tfor (i = 1;i <= n;i ++) {\n\t\t\ta[i] = scan.nextLong();\n\t\t}\n\t\tfor (i = 1;i <= n;i ++) {\n\t\t\tlong sum = 0;\n\t\t\tfor (j = i;j <= n;j ++) {\t\t\t\t\n\t\t\t\tsum += a[j];\n\t\t\t\tif (!map.containsKey(sum)) {\n\t\t\t\t\tmap.put(sum , new ArrayList<>());\n\t\t\t\t}\n\t\t\t\tmap.get(sum).add(new Interval(i , j));\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfor (List<Interval> list : map.values()) {\n\t\t\tCollections.sort(list);\t\t\t\n\t\t}\t\t\n\t\tfor (Map.Entry<Long , List<Interval>> entry : map.entrySet()) {\n\t\t\tint total = getTotal(entry.getValue());\n\t\t\tif (total > max) {\n\t\t\t\tmax = total;\n\t\t\t\tans = entry.getKey();\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tsolve(map.get(ans));\t\t\n\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF2 solver = new TaskF2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF solver = new TaskF();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Thread t = new Thread(null, new O(), \"Integer.MAX_VALUE\", 100000000);\n        t.start();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner s = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tSolver solver = new Solver();\n\t\tsolver.solve(s, out);\n\n\t\tout.close();\n\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\n\t\tScanner scan = new Scanner(System.in);\t\t\t\t\n\n\t\tMap<Long , List<Interval>> map = new HashMap<>();\t\t\n\t\tint i , j , n = scan.nextInt() , max = 0;\n\t\tlong ans = 0;\n\t\tfor (i = 1;i <= n;i ++) {\n\t\t\ta[i] = scan.nextLong();\n\t\t}\n\t\tfor (i = 1;i <= n;i ++) {\n\t\t\tlong sum = 0;\n\t\t\tfor (j = i;j <= n;j ++) {\t\t\t\t\n\t\t\t\tsum += a[j];\n\t\t\t\tif (!map.containsKey(sum)) {\n\t\t\t\t\tmap.put(sum , new ArrayList<>());\n\t\t\t\t}\n\t\t\t\tmap.get(sum).add(new Interval(i , j));\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfor (List<Interval> list : map.values()) {\n\t\t\tCollections.sort(list);\t\t\t\n\t\t}\t\t\n\t\tfor (Map.Entry<Long , List<Interval>> entry : map.entrySet()) {\n\t\t\tint total = getTotal(entry.getValue());\n\t\t\tif (total > max) {\n\t\t\t\tmax = total;\n\t\t\t\tans = entry.getKey();\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tsolve(map.get(ans));\t\t\n\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new Main().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 28).start();\n        else new Main().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        long currTime = System.currentTimeMillis();\n        if (debug) {\n            solveProblem(new FileInputStream(new File(\"input.in\")));\n            System.out.println(\"Time: \" + (System.currentTimeMillis() - currTime));\n        } else {\n            solveProblem(System.in);\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws java.lang.Exception{\n        new lets_do().run();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])throws IOException{\n\t\tnew Main().run();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new B(), \"Main\", 1 << 26).start();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = Integer.valueOf(scanner.nextLine());\n        String s = scanner.nextLine();\n        int[] arr = Arrays.stream(s.split(\" \"))\n                .mapToInt(Integer::valueOf)\n                .toArray();\n        int[] prefixSum = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            prefixSum[i + 1] = prefixSum[i] + arr[i];\n        }\n        Map<Integer, List<int[]>> map = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int subarraySum = prefixSum[j + 1] - prefixSum[i];\n                map.putIfAbsent(subarraySum, new ArrayList<>());\n                int l = i + 1, r = j + 1;\n                map.get(subarraySum).add(new int[]{l, r});\n            }\n        }\n        List<int[]> resultPairs = new ArrayList<>();\n        for (Map.Entry<Integer, List<int[]>> e : map.entrySet()) {\n            List<int[]> result = new ArrayList<>();\n            int[] curr = new int[2];\n            List<int[]> pairs = e.getValue();\n            Collections.sort(pairs, Comparator.<int[]>comparingInt(a -> a[1]));\n            for (int[] next : pairs) {\n                if (next[0] > curr[1]) {\n                    result.add(next);\n                    curr = next;\n                }\n            }\n            if (resultPairs.size() < result.size()) {\n                resultPairs = result;\n            }\n        }\n        printResult(resultPairs);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Solution().run();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tbw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tint[] a = new int[n];\n\t\tint[][] b = new int[n][n];\n\t\tHashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();\n\t\t\n\t\tst = new StringTokenizer(br.readLine());\n\t\tfor(int i = 0; i < n; ++i) {\n\t\t\ta[i] = Integer.parseInt(st.nextToken());\n\t\t\t\n\t\t\tint r = i;\n\t\t\tb[r][r] = a[r];\n\t\t\tif (!map.containsKey(b[r][r]))\n\t\t\t\tmap.put(b[r][r], new ArrayList<Integer>());\n\t\t\tfor(int l = 0; l < r; ++l) {\n\t\t\t\tb[l][r] = b[l][r-1] + a[r];\n\t\t\t\tif (!map.containsKey(b[l][r]))\n\t\t\t\t\tmap.put(b[l][r], new ArrayList<Integer>());\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tfor(int r = 0; r < n; ++r) {\n\t\t\tfor(int l = 0; l <= r; ++l) {\n\t\t\t\tint sum = b[l][r];\n\t\t\t\tArrayList<Integer> intervals = map.get(sum);\n\t\t\t\tint last_r = -1;\n\t\t\t\tif(!intervals.isEmpty())\n\t\t\t\t\tlast_r = intervals.get(intervals.size()-1);\n\t\t\t\t\n\t\t\t\tif(l > last_r) {\n\t\t\t\t\tintervals.add(l);\n\t\t\t\t\tintervals.add(r);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t//int best_sum = -1;\n\t\tArrayList<Integer> best_intervals = new ArrayList<Integer>();\n\t\t\n\t\tfor(Map.Entry<Integer, ArrayList<Integer>> entry : map.entrySet()) {\n\t\t\t//int sum = entry.getKey();\n\t\t\tArrayList<Integer> intervals = entry.getValue();\n\t\t\t\n\t\t\tif(intervals.size() > best_intervals.size()) {\n\t\t\t\tbest_intervals = intervals;\n\t\t\t}\n\t\t}\n\t\t\n\t\tbw.write(best_intervals.size()/2 + \"\\n\");\n\t\tfor(int i = 0; i < best_intervals.size(); i += 2) {\n\t\t\tbw.write((best_intervals.get(i)+1) + \" \" + (best_intervals.get(i+1)+1) + \"\\n\");\n\t\t}\n\n\n\t\tbr.close();\n\t\tbw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {new Thread(null,new TimePass(),\"Main\",1<<26).start();}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n\n        int[] arr = new int[n];\n\n        arr[0] = sc.nextInt();\n\n        for (int i = 1; i < n; i++) {\n            arr[i] = arr[i - 1] + sc.nextInt();\n        }\n\n        HashMap<Integer, List<Pair>> map = new HashMap<>();\n\n        for (int i = 0; i < n; i++) {\n\n            if (map.containsKey(arr[i])) map.get(arr[i]).add(new Pair(0, i));\n            else {\n                List<Pair> l = new ArrayList<>();\n                l.add(new Pair(0, i));\n                map.put(arr[i], l);\n            }\n\n            for (int j = 1; j <= i; j++) {\n                int ss = arr[i] - arr[j - 1];\n                if (map.containsKey(ss)) map.get(ss).add(new Pair(j, i));\n                else {\n                    List<Pair> l = new ArrayList<>();\n                    l.add(new Pair(j, i));\n                    map.put(ss, l);\n                }\n            }\n        }\n\n        List<Pair> el = null;\n\n        for (List<Pair> value : map.values()) {\n            value.sort(Comparator.comparingInt(Pair::getStart));\n            ArrayList<Pair> ps = new ArrayList<>();\n            Pair last = value.get(0);\n\n            for (int i = 1; i < value.size(); i++) {\n                if (last.getEnd() < value.get(i).getStart()) {\n                    ps.add(last);\n                    last = value.get(i);\n                }\n                else if (last.getEnd() > value.get(i).getEnd()) last = value.get(i);\n            }\n\n            ps.add(last);\n\n            if (el == null) el = ps;\n            else if (ps.size() > el.size()) el = ps;\n        }\n\n        System.out.println(el.size());\n\n        for (Pair pair : el) {\n            System.out.println((pair.getStart() + 1) + \" \" + (pair.getEnd() + 1));\n        }\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        Task547F solver = new Task547F();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) throws IOException{\n\t\tint n = f.nextInt();\n\t\tint[] a = io(n);\n\t\tHashMap<Integer,ArrayList<ivl>> hm = new HashMap<>();\n\t\tfor (int i=0;i<n;i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j=i;j<n;j++) {\n\t\t\t\tsum+=a[j];\n\t\t\t\tif (hm.get(sum)==null) hm.put(sum,new ArrayList<ivl>());\n\t\t\t\thm.get(sum).add(new ivl(i,j));\n\t\t\t}\n\t\t}\n\t\tHashSet<ivl> hs = new HashSet<ivl>();\n\t\t\n\t\tfor (ArrayList<ivl> arr : hm.values()) {\n\t\t\tCollections.sort(arr,new comp());\n\t\t\tHashSet<ivl> temp = new HashSet<ivl>();\n\t\t\ttemp.add(arr.get(0));\n\t\t\tint lastr = arr.get(0).r;\n\t\t\tint num = 1;\n\t\t\tfor (ivl curr:arr) {\n\t\t\t\tif (curr.l>lastr) {\n\t\t\t\t\tlastr = curr.r;\n\t\t\t\t\tnum++;\n\t\t\t\t\ttemp.add(curr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (temp.size()>hs.size()) hs = temp;\n\t\t}\n\t\t\n\t\tSystem.out.println(hs.size());\n\t\tfor (ivl curr:hs) {\n\t\t\tSystem.out.println((curr.l+1)+\" \"+(curr.r+1));\n\t\t}\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) \n\t\tOutputStream outputStream = System.out;\n        FastReader sc = new FastReader();\n        PrintWriter out = new PrintWriter(outputStream);\n        int n = sc.nextInt();\n        int a[] = new int[n];\n        Pair pr;\n        HashMap<Long,ArrayList> hm = new HashMap<>();\n        ArrayList<Pair> ar;\n        for(int i = 0; i < n; i++)\n        {\n        \ta[i] = sc.nextInt();\n        }\n        long sum = 0;\n        for(int r = 0; r < n; r++)\n        {\t\n        \tsum = 0;\n        \tfor(int l = r; l >= 0; l--)\n        \t{\n        \t\tsum += a[l];\n        \t\tif(!hm.containsKey(sum))\n        \t\t{\n        \t\t\tar = new ArrayList<>();\n        \t\t\tar.add(new Pair(l,r));\n        \t\t\thm.put(sum,ar);\n        \t\t}\n        \t\telse\n        \t\t{\n        \t\t\tar = hm.get(sum);\n        \t\t\tar.add(new Pair(l,r));\n        \t\t\thm.put(sum,ar);\n        \t\t}\n        \t}\n        }\n        \n        int count = 0;\n        int maxCount = 0;\n        long maxSum = 0;\n        for(Map.Entry<Long,ArrayList> entry:hm.entrySet())\n        {\n        \tsum = entry.getKey();\n        \tar = entry.getValue();\n        \tcount = 0;\n        \tint r = -1;\n        \tfor(int i = 0; i < ar.size(); i++)\n        \t{\n        \t\tif(ar.get(i).l > r)\n        \t\t{\n        \t\t\tcount++;\n        \t\t\tr = ar.get(i).r;\n        \t\t}\n        \t}\n        \tif(count > maxCount)\n        \t{\n        \t\tmaxCount = count;\n        \t\tmaxSum = sum;\n        \t}\n        \t\n        }\n        ar = hm.get(maxSum);\n        out.println(maxCount);\n        //out.println((ar.get(0).l+1)+\" \"+(ar.get(0).r+1));\n        \n        int r = -1;\n        for(int i = 0; i < ar.size(); i++)\n    \t{\n    \t\tif(ar.get(i).l > r)\n    \t\t{\n    \t\t\tout.println((ar.get(i).l+1) +\" \"+(ar.get(i).r+1));\n    \t\t\tr = ar.get(i).r;\n    \t\t}\n    \t}\n        out.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        PrintWriter out=new PrintWriter(System.out);\n\n        int n=sc.nextInt();\n        int a[]=new int[n];\n        for (int i = 0; i <n ; i++) {\n            a[i]=sc.nextInt();\n        }\n\n        HashMap<Integer,ArrayList<Node>> h=new HashMap<>();\n        for (int i = 0; i <n ; i++) {\n            int sum=0;\n            for (int j = i; j <n ; j++) {\n                sum+=a[j];\n                if(h.containsKey(sum)){\n                    h.get(sum).add(new Node(i,j));\n                }\n                else{\n                    ArrayList<Node> temp=new ArrayList<>();\n                    temp.add(new Node(i,j));\n                    h.put(sum,temp);\n                }\n            }\n        }\n\n        long ans=0;\n        ArrayList<Integer> ansList=new ArrayList<>();\n\n        for(int x:h.keySet()){\n            Collections.sort(h.get(x), new Comparator<Node>() {\n                @Override\n                public int compare(Node o1, Node o2) {\n                    return Integer.compare(o1.r,o2.r);\n                }\n            });\n\n\n            ArrayList<Node>  l=h.get(x);\n            //out.println(l);\n            ArrayList<Integer> temp=new ArrayList<>();\n            int lasty=Integer.MIN_VALUE;\n            for (int i = 0; i <l.size() ; i++) {\n                if(l.get(i).l>lasty){\n                    lasty=l.get(i).r;\n                    temp.add(l.get(i).l);\n                    temp.add(l.get(i).r);\n                }\n            }\n\n            if(ans<temp.size()){\n                ansList=temp;\n                ans=ansList.size();\n            }\n        }\n\n        out.println(ans/2);\n        for (int i = 0; i <ansList.size() ; i++) {\n            out.print((ansList.get(i)+1)+\" \");\n            i++;\n            out.println((ansList.get(i)+1)+\" \");\n        }\n\n\n\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = ri(), a[] = ria(n), pre[] = new int[n + 1];\n        for (int i = 0; i < n; ++i) {\n            pre[i + 1] = pre[i] + a[i];\n        }\n        Map<Integer, List<p>> sums = new HashMap<>();\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= i; ++j) {\n                sums.computeIfAbsent(pre[i + 1] - pre[j], k -> new ArrayList<>()).add(new p(j, i));\n            }\n        }\n        int k = 0;\n        List<p> ans = new ArrayList<>();\n        for (int key : sums.keySet()) {\n            List<p> segs = sums.get(key);\n            segs.sort((x, y) -> x.b == y.b ? x.a - y.a : x.b - y.b);\n            int last = -1, cnt = 0;\n            for (int i = 0, end = segs.size(); i < end; ++i) {\n                if (segs.get(i).a > last) {\n                    ++cnt;\n                    last = segs.get(i).b;\n                }\n            }\n            if (cnt > k) {\n                k = cnt;\n                ans = segs;\n            }\n        }\n        prln(k);\n        int last = -1;\n        for (int i = 0, end = ans.size(); i < end; ++i) {\n            if (ans.get(i).a > last) {\n                prln(ans.get(i).a + 1, ans.get(i).b + 1);\n                last = ans.get(i).b;\n            }\n        }\n        close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF2 solver = new TaskF2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tint a = in.nextInt();\n\t\tint x[] = new int[a];\n\t\tfor(int n=0;n<a;n++){\n\t\t\tx[n] = in.nextInt();\n\t\t}\n\t\tint max = 1;\n\t\tint t = 0;\n\t\tHashMap<Integer, ArrayList<node>> map = new HashMap<Integer, ArrayList<node>>();\n\t\tfor(int n=0;n<a;n++){\n\t\t\tint num = 0;\n\t\t\tfor(int m=n;m<a;m++){\n\t\t\t\tnum += x[m];\n\t\t\t\tnode node = new node(n, m);\n\t\t\t\tif(!map.containsKey(num)){\n\t\t\t\t\tArrayList<node> list = new ArrayList<node>();\n\t\t\t\t\tlist.add(node);\n\t\t\t\t\tmap.put(num, list);\n\t\t\t\t\tif(max == 1)t = num;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tArrayList<node> list = map.get(num);\n\t\t\t\t\tint left = 0;\n\t\t\t\t\tint right = list.size()-1;\t\t\t\t\n\t\t\t\t\tint res = list.size();\n\t\t\t\t\twhile(left <= right){\n\t\t\t\t\t\tint mid = (left + right) >> 1;\n\t\t\t\t\t\t//System.out.println(mid +\" \"+ left +\" \" +right);\n\t\t\t\t\t\tif(list.get(mid).r >= n){\n\t\t\t\t\t\t\tres = mid;\n\t\t\t\t\t\t\tright = mid - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tleft = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(res == list.size()){\n\t\t\t\t\t\tlist.add(node);\n\t\t\t\t\t\tif(max < res+1){\n\t\t\t\t\t\t\tmax = res+1;\n\t\t\t\t\t\t\tt = num;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(list.get(res).r>m){\n\t\t\t\t\t\tlist.set(res, node);\n\t\t\t\t\t\tif(max < res){\n\t\t\t\t\t\t\tmax = list.size();\n\t\t\t\t\t\t\tt = num;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t\tfor(int n=0;n<max;n++){\n\t\t\tSystem.out.println((map.get(t).get(n).l+1)+\" \"+(map.get(t).get(n).r+1));\n\t\t}\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        InputReader in = new InputReader();\n        int N = in.nextInt();\n        int arr[] = new int[N];\n\n        for (int i = 0; i < N; i++)\n            arr[i] = in.nextInt();\n\n        HashMap<Integer, ArrayList<Pair>> name = new HashMap<>();\n\n        for (int i = 0; i < N; i++) {\n            int sum = 0;\n            for (int j = i; j < N; j++) {\n                sum += arr[j];\n                if (name.get(sum) == null)\n                    name.put(sum, new ArrayList());\n\n                name.get(sum).add(new Pair(i+1, j+1));\n            }\n        }\n\n        HashSet<Pair> ans = new HashSet<>();\n\n        for (ArrayList<Pair> n : name.values()) {\n            Collections.sort(n, new Comparator<Pair>() {\n                @Override\n                public int compare(Pair o1, Pair o2) {\n                    if (Integer.compare(o1.b, o2.b) == 0)\n                        return Integer.compare(o1.a, o2.a);\n                    return Integer.compare(o1.b, o2.b);\n                }\n            });\n\n\n            HashSet<Pair> temp = new HashSet<>();\n            temp.add(n.get(0));\n            int num = 1;\n            int r = n.get(0).b;\n\n            for (int i = 1; i < n.size(); i++) {\n\n                if (n.get(i).a > r) {\n                    num++;\n                    r = n.get(i).b;\n                    temp.add(n.get(i));\n                }\n            }\n\n\n            if (num > ans.size())\n                ans = temp;\n        }\n\n        System.out.println(ans.size());\n        for (Pair val : ans)\n            System.out.println(val.a + \" \" + val.b);\n\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new CFA();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        long time = System.currentTimeMillis();\n        boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n        out = new PrintWriter(System.out);\n        s = new FastReader(oj);\n        int n = s.nextInt();\n        int[] arr = s.nextIntArray(n);\n        int[] sum = new int[n];\n        sum[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i - 1] + arr[i];\n        }\n\n//        int max = Integer.MIN_VALUE;\n        HashMap<Integer, ArrayList<pair>> map = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                if(i == 0) {\n                    ArrayList<pair> list = map.getOrDefault(sum[j], new ArrayList<>());\n                    list.add(new pair(i, j));\n                    map.put(sum[j], list);\n                } else {\n                    ArrayList<pair> list = map.getOrDefault(sum[j] - sum[i - 1], new ArrayList<>());\n                    list.add(new pair(i, j));\n                    map.put(sum[j] - sum[i - 1], list);\n                }\n            }\n        }\n\n        ArrayList<Integer> keys = new ArrayList<>(map.keySet());\n        ArrayList<pair> ans = null;\n        for (int curr : keys) {\n            ArrayList<pair> list = map.get(curr);\n            Collections.sort(list);\n            ArrayList<pair> smallAns = new ArrayList<>();\n            smallAns.add(list.get(0));\n            for (int k = 1; k < list.size(); k++) {\n                if(list.get(k).start > smallAns.get(smallAns.size() - 1).finish) {\n                    smallAns.add(list.get(k));\n                }\n            }\n\n            if(ans == null) {\n                ans = smallAns;\n            } else {\n                if(ans.size() < smallAns.size()) {\n                    ans = smallAns;\n                }\n            }\n        }\n\n//        out.println(ans.size() + \"\\n\" + ans);\n//\n//        out.println(map);\n//\n//        out.println(Arrays.toString(sum));\n        StringBuilder ans1 = new StringBuilder();\n        ans1.append(ans.size() + \"\\n\");\n        for (pair p : ans) {\n            ans1.append((p.start + 1) + \" \" + (p.finish + 1));\n            ans1.append(\"\\n\");\n        }\n        out.println(ans1);\n\n        if (!oj) {\n            System.out.println(Arrays.deepToString(new Object[]{System.currentTimeMillis() - time + \" ms\"}));\n        }\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) arr[i] = sc.nextInt();\n        int[][] sub = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            sub[i][i] = arr[i];\n            for (int j = i + 1; j < n; j++) {\n                sub[i][j] = sub[i][j - 1] + arr[j];\n            }\n        }\n\n        HashMap<Integer, List<P>> hm = new HashMap<>();\n        /*for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                if (hm.containsKey(sub[i][j])) {\n                    hm.get(sub[i][j]).add(new P(i, j));\n                } else {\n                    List<P> temp = new ArrayList<>();\n                    temp.add(new P(i, j));\n                    hm.put(sub[i][j], temp);\n                }\n            }\n        }*/\n        for(int stop=0; stop<n; stop++) {\n            for(int start=0; start<=stop; start++) {\n                if (hm.containsKey(sub[start][stop])) {\n                    hm.get(sub[start][stop]).add(new P(start, stop));\n                } else {\n                    List<P> temp = new ArrayList<>();\n                    temp.add(new P(start, stop));\n                    hm.put(sub[start][stop], temp);\n                }\n            }\n        }\n\n        int ans = Integer.MIN_VALUE;\n        /*for(Map.Entry it : hm.entrySet()) {\n            int or = overlap(it.getValue());\n            ans = Math.max(ans, or);\n        }*/\n\n        List<P> ansList = null;\n        for (List<P> it : hm.values()) {\n            int or = overlap(it);\n            if(or>ans) {\n                ans = or;\n                ansList = it;\n            }\n        }\n\n        List<P> processedList = extractOverlapping(ansList);\n\n        System.out.println(ans);\n        for(int i=0; i<processedList.size(); i++) {\n            int A = processedList.get(i).a + 1;\n            int B = processedList.get(i).b + 1;\n            System.out.println(A + \" \" + B);\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[])\n        FastReader input=new FastReader();\n        PrintWriter out=new PrintWriter(System.out);\n        int T=1;\n        while(T-->0)\n        {\n            int n=input.nextInt();\n            int a[]=new int[n];\n            for(int i=0;i<n;i++)\n            {\n                a[i]=input.nextInt();\n            }\n            HashMap<Integer,ArrayList<Pair>> map=new HashMap<>();\n            for(int i=0;i<n;i++)\n            {\n                int sum=0;\n                for(int j=i;j<n;j++)\n                {\n                    sum+=a[j];\n                    if(map.containsKey(sum))\n                    {\n                        map.get(sum).add(new Pair(i,j));\n                    }\n                    else\n                    {\n                        map.put(sum,new ArrayList<>());\n                        map.get(sum).add(new Pair(i,j));\n                    }\n                }\n            }\n            int max=Integer.MIN_VALUE;\n            Iterator it=map.entrySet().iterator();\n            ArrayList<Pair> setBlocks=new ArrayList<>();\n            while(it.hasNext())\n            {\n                Map.Entry e=(Map.Entry)it.next();\n                ArrayList<Pair> list=(ArrayList)e.getValue();\n                Collections.sort(list, new Comparator<Pair>() {\n                    @Override\n                    public int compare(Pair o1, Pair o2) {\n                        if(o1.l==o2.l)\n                        {\n                            return o1.r-o2.r;\n                        }\n                        else\n                        {\n                            return o1.l-o2.l;\n                        }\n                    }\n                });\n                Pair1 sufMin[]=new Pair1[list.size()];\n                TreeSet<Pair> set=new TreeSet<>(new Comparator<Pair>() {\n                    @Override\n                    public int compare(Pair o1, Pair o2) {\n                        if(o1.l==o2.l)\n                        {\n                            return o1.r-o2.r;\n                        }\n                        else\n                        {\n                            return o1.l-o2.l;\n                        }\n                    }\n                });\n                int min=Integer.MAX_VALUE;\n                int index=-1;\n                for(int j=list.size()-1;j>=0;j--)\n                {\n                    if(min>=list.get(j).r)\n                    {\n                        min=list.get(j).r;\n                        index=j;\n                    }\n                    sufMin[j]=new Pair1(min,index);\n                    set.add(new Pair(list.get(j).l,j));\n                }\n                int count=0;\n                int j=0;\n                ArrayList<Pair> blocks=new ArrayList<>();\n                while(j<list.size())\n                {\n                    int m=sufMin[j].min;\n                    int ind=sufMin[j].index;\n                    blocks.add(list.get(ind));\n                    count++;\n                    Pair p=new Pair(m+1,0);\n                    if(set.ceiling(p)==null)\n                    {\n                        break;\n                    }\n                    else\n                    {\n                        Pair p1=set.ceiling(p);\n                        j=p1.r;\n                    }\n                }\n                if(max<count)\n                {\n                    max=count;\n                    setBlocks=blocks;\n                }\n            }\n            out.println(max);\n            for(int i=0;i<setBlocks.size();i++)\n            {\n                out.println((setBlocks.get(i).l+1)+\" \"+(setBlocks.get(i).r+1));\n            }\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint n = in .nextInt();\n\n\t\tlong[] a = new long[n + 1];\n\t\tlong[] sum = new long[n + 1];\n\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\ta[i] = in.nextInt();\n\t\t\tsum[i] = sum[i - 1] + a[i];\n\t\t}\n\n\t\tMap<Long, List<int[]>> map = new HashMap<>();\n\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = i; j <= n; j++) {\n\t\t\t\tlong x = sum[j] - sum[i - 1];\n\t\t\t\tList<int[]> list = map.get(x);\n\t\t\t\tif (list == null) {\n\t\t\t\t\tlist = new ArrayList<>();\n\t\t\t\t\tmap.put(x, list);\n\t\t\t\t}\n\t\t\t\tlist.add(new int[] {i, j});\n\t\t\t}\n\t\t}\n\n\t\tList<int[]> ans = new ArrayList<>();\n\t\tfor (Map.Entry<Long, List<int[]>> entry : map.entrySet()) {\n\t\t\tList<int[]> list = entry.getValue();\n\t\t\tList<int[]> tmp = new ArrayList<>();\n\t\t\tcalc(list, tmp);\n\t\t\tif (tmp.size() > ans.size()) {\n\t\t\t\tans.clear();\n\t\t\t\tans.addAll(tmp);\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(ans.size());\n\t\tfor (int[] pair : ans) {\n\t\t\tSystem.out.println(pair[0] + \" \" + pair[1]);\n\t\t}\n\n\t\tin.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F1BlokiRavnoiSummiProstayaRedakciya solver = new F1BlokiRavnoiSummiProstayaRedakciya();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException{\n        Main  d1=new Main   ();d1.main();d1.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n  //    Scanner s=new Scanner(System.in);\n     Reader s=new Reader();\n    int n=s.nextInt();\n        \n        int a[]=new int[n];\n        \n        for(int i=0;i<n;i++){\n            a[i]=s.nextInt();\n        }\n        \n        Map<Long,PriorityQueue<Node>> map=new HashMap();\n        \n        for(int i=0;i<n;i++){\n            long sum=0;\n            for(int j=i;j<n;j++){\n                sum=sum+a[j];\n                PriorityQueue<Node> pq=map.get(sum);\n                if(pq==null){\n                    pq=new PriorityQueue();\n                    map.put(sum, pq);\n                }\n                pq.add(new Node(i,j));\n            }\n            \n            \n        }\n        \n        \n        Set<Long> keys=map.keySet();\n        \n        Iterator<Long> itr=keys.iterator();\n        int max=0;\n        int solbackDp[]=null;\n        Node solA[]=new Node[0];\n        while(itr.hasNext()){\n           Long sum=itr.next();\n           PriorityQueue<Node> pq1=map.get(sum);\n           \n           \n           \n           \n           \n           \n           //Node rangelist[]=new  Node[pq1.size()+1];\n            ArrayList<Node> rangelist=new ArrayList<>();\n            rangelist.add(new Node(-1, -1));\n            //int count=1;\n            //rangelist[0]=new Node(-1,-1);\n             Node last=rangelist.get(0);\n            while(!pq1.isEmpty()){\n                Node n1=pq1.poll();\n                if(n1.l!=last.l){\n                    rangelist.add(n1);\n                    last=n1;\n                } \n                       \n           }\n           int backTrack[]=new int[rangelist.size()];\n           int dp[]=new int[rangelist.size()];\n           Arrays.fill(dp, -1);\n           int ans=fun(0,dp,rangelist,backTrack);\n           if(ans>max){\n               max=ans;\n               solA=rangelist.toArray(solA);\n               solbackDp=backTrack;\n           }\n        }\n        \n        System.out.println(max);\n        \n        \n        int pos=0;\n        while(solbackDp[pos]!=-1){\n            pos=solbackDp[pos];\n            System.out.println((solA[pos].l+1)+\" \"+(solA[pos].r+1));\n        }\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner in=new Scanner(System.in);\n\n\t\tint n=in.nextInt();\n\n\t\tint a[]=new int[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=in.nextInt();\n\n\t\tsameSumBlock(a,n);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner s = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tSolver solver = new Solver();\n\t\tsolver.solve(s, out);\n\n\t\tout.close();\n\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF2 solver = new TaskF2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF2 solver = new TaskF2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tInputReader in = new InputReader(inputStream);\n\t\t\n//\t\tfor(int i=4;i<=4;i++) {\n//\t\t\tInputStream uinputStream = new FileInputStream(\"shortcut.in\");\n//\t\t\tString f = i+\".in\";\n//\t\t\tInputStream uinputStream = new FileInputStream(f);\n//\t\t\tInputReader in = new InputReader(uinputStream);\n//\t\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"shortcut.out\")));\n\t\t\tTask t = new Task();\n\t\t\tt.solve(in, out);\n\t\t\tout.close();\t\t\t\n//\t\t}\n\t}\t\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ScanReader in = new ScanReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F2SameSumBlocksHard solver = new F2SameSumBlocksHard();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "public static void main (String[] args) throws java.lang.Exception\n  \n\nsolve() ;\n      \n}\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) throws Exception {\n        BufferedScanner in = new BufferedScanner(new InputStreamReader(System.in));\n        PrintStream out = new PrintStream(new BufferedOutputStream(System.out));\n\n        int n = in.nextInt();\n        int[] arr = in.nextN(n);\n\n        HashMap<Integer, ArrayList<Point>> lp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            int curr = 0;\n            for (int j = i; j >= 0; j--) {\n                curr += arr[j];\n                if (!lp.containsKey(curr)) lp.put(curr, new ArrayList<>());\n\n                lp.get(curr).add(new Point(j, i));\n            }\n        }\n\n        ArrayList<Point> retPs = new ArrayList<>();\n        for (ArrayList<Point> ps : lp.values()) {\n            Collections.sort(ps, (a, b) -> a.y - b.y);\n\n            ArrayList<Point> currPs = new ArrayList<>();\n            for (int i = 0; i < ps.size(); ) {\n                Point curr = ps.get(i);\n                currPs.add(curr);\n\n                while (i < ps.size() && ps.get(i).x <= curr.y) i++;\n            }\n            if(currPs.size() > retPs.size()) retPs = currPs;\n        }\n        out.println(retPs.size());\n        for (Point p : retPs) out.println((p.x + 1) + \" \" + (p.y + 1));\n\n\n        out.close();\n        in.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n        String[] numbersAsString = input.lines()\n                                        .skip(1)\n                                        .findFirst()\n                                        .get()\n                                        .split(\" \");\n        int[] numbers = Arrays.stream(numbersAsString).mapToInt(Integer::parseInt).toArray();\n        List<PairOfInt> sameSumBlocks = findSameSumBlocks(numbers);\n        System.out.println(sameSumBlocks.size());\n        sameSumBlocks.forEach(System.out::println);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        F2SameSumBlocksHard solver = new F2SameSumBlocksHard();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF solver = new TaskF();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n\n        class Pair {\n            int start;\n            int end;\n\n            public Pair(int start, int end) {\n                this.start = start;\n                this.end = end;\n            }\n        }\n\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] array = new int[n];\n        for (int i=0; i<n; i++) array[i] = sc.nextInt();\n\n\n        int maxLen = 0;\n        int key = -1;\n        HashMap<Integer, List<Pair>> ans = new HashMap<>();\n        for (int i=0; i<n; i++){\n            int currSum = 0;\n            for (int j=i; j>=0; j--){\n                currSum = currSum + array[j];\n                if (!ans.containsKey(currSum)){\n                    ans.put(currSum, new ArrayList<>());\n                }\n                List<Pair> pairs = ans.get(currSum);\n                if (pairs.size() == 0 || pairs.get(pairs.size()-1).end <= j){\n                    pairs.add(new Pair(j+1, i+1));\n                }\n                if (pairs.size() > maxLen){\n                    maxLen = pairs.size();\n                    key = currSum;\n                }\n            }\n\n        }\n\n        System.out.println(maxLen);\n        for (Pair pair : ans.get(key)){\n            System.out.println(pair.start + \" \" + pair.end);\n        }\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputReader s = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int t = 1;\n//        t = s.nextInt();\n        nexttest:\n        while (t-- > 0) {\n            int n = s.nextInt();\n            int a[] = s.nextIntArray(n);\n\n            HashMap<Integer, List<Pair>> sets = new HashMap<>();\n            int pre[] = new int[n + 1];\n            for (int i = 1; i <= n; i++) {\n                pre[i] = a[i - 1] + pre[i - 1];\n            }\n\n            for (int i = 1; i <= n; i++) {\n                for (int j = i; j <= n; j++) {\n                    final Integer key = pre[j] - pre[i - 1];\n                    if (!sets.containsKey(key)) {\n                        sets.put(key, new ArrayList<>());\n                    }\n\n                    sets.get(key).add(new Pair(i, j));\n                }\n            }\n//            System.out.println(sets);\n            int ans = 0;\n            List<Pair> answer = new ArrayList<>();\n            int[] ansNextPos = new int[1];\n            boolean[] ansTaken = new boolean[1];\n            for (List<Pair> intervals : sets.values()) {\n\n                Collections.sort(intervals);\n                int[] nextPos = new int[intervals.size()];\n                boolean[] taken = new boolean[intervals.size()];\n\n                int[] dp = new int[intervals.size()];\n                dp[intervals.size() - 1] = 1;\n                taken[intervals.size() - 1] = true;\n                nextPos[intervals.size() - 1] = -1;\n\n                for (int i = intervals.size() - 2; i >= 0; i--) {\n                    dp[i] = dp[i + 1];\n                    taken[i] = false;\n                    nextPos[i] = i + 1;\n\n                    int ll = i + 1;\n                    int rr = intervals.size();\n\n                    while (ll < rr) {\n                        int mid = ll + rr;\n                        mid /= 2;\n                        if (intervals.get(mid).x > intervals.get(i).y) {\n                            rr = mid;\n                        } else {\n                            ll = mid + 1;\n                        }\n                    }\n                    if (ll < intervals.size()) {\n                        if (dp[i] < 1 + dp[ll]) {\n                            dp[i] = Math.max(dp[i], 1 + dp[ll]);\n                            taken[i] = true;\n                            nextPos[i] = ll;\n                        }\n                    }\n                }\n\n                if (dp[0] > ans) {\n                    ans = dp[0];\n                    answer = intervals;\n                    ansNextPos = nextPos;\n                    ansTaken = taken;\n                }\n            }\n\n\n            out.println(ans);\n            int cur = 0;\n            while (cur != -1) {\n                if (ansTaken[cur]) {\n                    out.println(answer.get(cur));\n                }\n                cur = ansNextPos[cur];\n            }\n        }\n\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(System.out);\n\n\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            int n=Int();\n            int A[]=new int[n];\n            for(int i=0;i<n;i++){\n                A[i]=Int();\n            }\n\n            Solution sol=new Solution();\n            sol.solution(out,A);\n        }\n        out.flush();\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();}\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) {\n      Scanner in =new Scanner(System.in);\n      HashMap<Long,ArrayList<Pair>> hm=new HashMap<Long,ArrayList<Pair>>();\n      int n=in.nextInt();\n      int a[]=new int[n];\n      long sum[]=new long[n];\n      long s=0;\n      for(int i=0;i<n;i++){  a[i]=in.nextInt(); s+=a[i]; sum[i]=s; }\n      for(int i=0;i<n;i++){\n          for(int j=i;j<n;j++){\n              long x=sum[j]-sum[i]+a[i];\n              ArrayList<Pair> temp=new ArrayList<Pair>();\n              if(hm.containsKey(x)) { temp=hm.get(x); }\n              temp.add(new Pair(i+1,j+1));\n              hm.put(x,temp);\n          }\n      }\n      ArrayList<Pair> ans=new ArrayList<Pair>();\n      for(Map.Entry em:hm.entrySet()){\n          ArrayList<Pair> array=hm.get(em.getKey());\n          Collections.sort(array);\n          int prev=0;\n          ArrayList<Pair> temp=new ArrayList<Pair>();\n          for(int i=0;i<array.size();i++){\n              if(array.get(i).x>prev){ temp.add(new Pair(array.get(i).x,array.get(i).y)); prev=array.get(i).y; }\n          }\n        //  System.out.println(temp.size());\n          if(temp.size()>ans.size()){\n              ans=(ArrayList<Pair>)temp.clone();\n          }\n      }\n      long g=-5;\n      System.out.println(ans.size()); \n      for(int i=0;i<ans.size();i++){\n          System.out.println(ans.get(i).x+\" \"+ans.get(i).y);\n      }\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    F1SameSumBlocksEasy solver = new F1SameSumBlocksEasy();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc=new Scanner();\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t\tn=sc.nextInt();\n\t\tsum=new long [n+1];\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tsum[i]=sc.nextInt()+sum[i-1];\n\t\tHashMap<Long,Integer> map=new HashMap();\n\t\tArrayList<int []>[]adj=new ArrayList[n*n+10];\n\t\tfor(int i=0;i<adj.length;i++)\n\t\t\tadj[i]=new ArrayList();\n\t\tfor(int r=1;r<=n;r++) \n\t\t\tfor(int l=1;l<=n;l++) {\n\t\t\t\tif(r<l)\n\t\t\t\t\tcontinue;\n\t\t\t\tlong x=sum[r]-sum[l-1];\n\t\t\t\tmap.put(x, map.getOrDefault(x, map.size()));\n\t\t\t\tadj[map.get(x)].add(new int [] {l,r});\n\t\t\t}\n\t\tint ans=0;\n\t\tint bestIdx=0;\n\t\tfor(int idx=0;idx<adj.length;idx++)\n\t\t{\n\t\t\tArrayList<int[]>list=adj[idx];\n\t\t\tif(list.isEmpty())\n\t\t\t\tcontinue;\n\t\t\tint curr=1;\n\t\t\tint R=list.get(0)[1];\n\t\t\tfor(int i=1;i<list.size();i++)\n\t\t\t{\n\t\t\t\tint []tmp=list.get(i);\n\t\t\t\tif(tmp[0]>R)\n\t\t\t\t{\n\t\t\t\t\tR=tmp[1];\n\t\t\t\t\tcurr++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(curr>=ans) {\n\t\t\t\tans=curr;\n\t\t\t\tbestIdx=idx;\n\t\t\t}\n\t\t}\n\t\tout.println(ans);\n\t\tArrayList<int[]>list=adj[bestIdx];\n\t\tint R=list.get(0)[1];\n\t\tout.println(list.get(0)[0]+\" \"+R);\n\t\tfor(int i=1;i<list.size();i++)\n\t\t{\n\t\t\tint []tmp=list.get(i);\n\t\t\tif(tmp[0]>R)\n\t\t\t{\n\t\t\t\tR=tmp[1];\n\t\t\t\tout.println(tmp[0]+\" \"+tmp[1]);\n\t\t\t}\n\t\t}\n\t\tout.close();\n\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception\n    \tFastReader in=new FastReader();\n    \tPrintWriter pw=new PrintWriter(System.out);\n    \tint n=in.nextInt();\n    \tint[] arr=new int[n+1];\n    \tfor(int i=1;i<=n;i++)\n    \t\tarr[i]=in.nextInt();\n    \tMap<Integer,TreeMap<Integer,Integer>> map=new HashMap();\n    \tfor(int i=1;i<=n;i++)\n    \t{\n    \t\tint sum=0;\n    \t\tfor(int j=i;j<=n;j++)\n    \t\t{\n    \t\t\tsum+=arr[j];\n    \t\t\tif(map.containsKey(sum))\n    \t\t\t{\n    \t\t\t\tTreeMap<Integer,Integer> t=map.get(sum);\n    \t\t\t\t// System.out.println(t+\" \"+sum);\n    \t\t\t\tMap.Entry<Integer,Integer> e=t.lastEntry();\n    \t\t\t\tif(e.getKey()>j)\n    \t\t\t\t{\n    \t\t\t\t\tt.remove(e.getKey());\n    \t\t\t\t\tt.put(j,i);\n    \t\t\t\t\tmap.put(sum,t);\n    \t\t\t\t}\n    \t\t\t\telse if(e.getKey()<i)\n    \t\t\t\t{\n    \t\t\t\t\tt.put(j,i);\n    \t\t\t\t\tmap.put(sum,t);\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\tTreeMap<Integer,Integer> t=new TreeMap();\n    \t\t\t\tt.put(j,i);\n    \t\t\t\tmap.put(sum,t);\n    \t\t\t}\n    \t\t}\n    \t}\n    \tint ans=0,size=0;\n    \tfor(Map.Entry<Integer,TreeMap<Integer,Integer>> e:map.entrySet())\n    \t{\n    \t\tif(e.getValue().size()>size)\n    \t\t{\n    \t\t\tans=e.getKey();\n    \t\t\tsize=e.getValue().size();\n    \t\t}\n    \t}\n    \tpw.println(size);\n    \tfor(Map.Entry e:map.get(ans).entrySet())\n    \t\tpw.println(e.getValue()+\" \"+e.getKey());\n    \tpw.flush();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException{\n\t\t\n\t\t// Input from file\n\t\t// File inputFile = new File(\"JavaFile.txt\");\n\t\t// File outputFile = new File(\"JavaOutputFile.txt\");\n\t\t// FileReader fileReader = new FileReader(inputFile);\n\t\t// Here it ends\n\t\t\t\n\t\tMyScanner sc = new MyScanner();\n\t\t// MyScanner sc = new MyScanner(fileReader);\n\t\t\n\t\tout = new PrintWriter(new BufferedOutputStream(System.out)); // Output to console\n\t\t// out = new PrintWriter(new PrintStream(outputFile)); // Output to file\n\t\t\n\t\tgetAns(sc);\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t\tStringTokenizer sa=new StringTokenizer(in.readLine());\n\t\tint n=Integer.parseInt(sa.nextToken());\n\t\tsa=new StringTokenizer(in.readLine());\n\t\tint[] a=new int[n];\n\t\tTreeMap<Integer,ArrayList<node>> mp=new TreeMap();\n\t\tfor (int i=0;i<n;++i) a[i]=Integer.parseInt(sa.nextToken());\n\t\tfor (int i=0;i<n;++i) {\n\t\t\tint tmp=0;\n\t\t\tfor (int j=i;j<n;++j) {\n\t\t\t\ttmp+=a[j];\n\t\t\t\tif (!mp.containsKey(tmp)) {\n\t\t\t\t\tArrayList t=new ArrayList();\n\t\t\t\t\tt.add(new node(i,j));\n\t\t\t\t\tmp.put(tmp,t);\n\t\t\t\t} else {\n\t\t\t\t\tArrayList<node> t=mp.get(tmp);\n\t\t\t\t\tint left=0,right=t.size()-1,res=t.size();\n\t\t\t\t\twhile (left<=right) {\n\t\t\t\t\t\tint mid=(left+right)>>1;\n\t\t\t\t\t\tif (t.get(mid).r>=i) {\n\t\t\t\t\t\t\tres=mid;\n\t\t\t\t\t\t\tright=mid-1;\n\t\t\t\t\t\t} else left=mid+1;\n\t\t\t\t\t}\n\t\t\t\t\tif (res==t.size()) t.add(new node(i,j));\n\t\t\t\t\telse if (t.get(res).r>j) t.set(res,new node(i,j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res=0;\n\t\tfor (Entry<Integer,ArrayList<node>> entry:mp.entrySet())\n\t\t\tres=Math.max(res,entry.getValue().size());\n\t\tout.println(res);\n\t\tfor (Entry<Integer,ArrayList<node>> entry:mp.entrySet())\n\t\t\tif (entry.getValue().size()==res) {\n\t\t\t\tArrayList<node> tmp=entry.getValue();\n\t\t\t\tfor (int i=0;i<tmp.size();++i)\n\t\t\t\t\tout.printf(\"%d %d\\n\",tmp.get(i).l+1,tmp.get(i).r+1);\n\t\t\t\tout.flush();\n\t\t\t\treturn;\n\t\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tnew Main().run();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastScanner sc = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int N = sc.nextInt();\n        int[] pre = new int[N + 1];\n        var ansMap = new HashMap<Integer, ArrayDeque<Pair>>();\n        for (int j = 1; j <= N; j++) {\n            pre[j] = pre[j - 1] + sc.nextInt();\n            for (int i = j; i >= 1; i--) {\n                int sum = pre[j] - pre[i - 1];\n                /**\n                 we can actually perform the greedy scheduling as we read in the information!\n                 Because we are sweeping with an increasing right pointer, the moment a sum is\n                 found with this right endpoint, we can greedily place it into the schedule\n                 for a given sum \"bucket\", (if it's disjoint. Otherwise, we would be replacing\n                 one OR MORE previous intervals, which would only decrease or keep the same size,\n                 while reducing our future accessibility for adding intervals!)\n                 */\n                if (!ansMap.containsKey(sum) || ansMap.get(sum).getLast().r < i) {\n                    var dq = ansMap.computeIfAbsent(sum, val -> new ArrayDeque<>());\n                    dq.add(new Pair(i, j, sum));\n                }\n            }\n        }\n        var ans = new ArrayDeque<Pair>();\n        for (var group : ansMap.values()) {\n            if (group.size() > ans.size()) {\n                ans = group;\n            }\n        }\n        out.println(ans.size());\n        for (Pair p : ans) {\n            out.println(p);\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        in();\n        solution();\n        out();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n//\t\tBufferedReader br = new BufferedReader(new FileReader(\"F:/books/input.txt\"));\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s = br.readLine();\n\t\tint n = Integer.parseInt(s);\n\t\tlong[] a = new long[n];\n\t\tString[] as = br.readLine().split(\" \");\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ta[i] = Long.parseLong(as[i]);\n\t\t}\n\t\tStringBuffer sb = solve(a,n);\n\t\tSystem.out.println(sb.toString());\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        F2SameSumBlocksHard solver = new F2SameSumBlocksHard();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F1BlokiRavnoiSummiProstayaRedakciya solver = new F1BlokiRavnoiSummiProstayaRedakciya();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\n\t\tlong[] a = new long[n];\n\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\ta[i] = Long.parseLong(st.nextToken());\n\t\t}\n\n\t\tlong[] sum = new long[n];\n\t\tsum[0] = a[0];\n\t\tfor (int i = 1; i < sum.length; i++) {\n\t\t\tsum[i] = sum[i - 1] + a[i];\n\t\t}\n\n\t\tsolve(a, sum);\n\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastScanner sc = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int N = sc.nextInt();\n        int[] pre = new int[N + 1];\n        for (int i = 1; i <= N; i++) {\n            pre[i] = pre[i - 1] + sc.nextInt();\n        }\n//        var sumMap = new HashMap<Integer, ArrayList<Pair>>();\n//        var sums = new ArrayList<Pair>();\n        Pair[] sums = new Pair[N * (N + 1) / 2];\n        int k = 0;\n        for (int i = 1; i <= N; i++) {\n            for (int j = i; j <= N; j++) {\n                int sum = pre[j] - pre[i - 1];\n//                sumMap.computeIfAbsent(sum, val -> new ArrayList<>()).add(new Pair(i, j, sum));\n                sums[k++] = new Pair(i, j, sum);\n            }\n        }\n        Arrays.sort(sums, (p1, p2) -> p1.sum - p2.sum != 0 ? p1.sum - p2.sum : p1.r - p2.r);\n        var ans = new ArrayList<Pair>();\n        int i = 0;\n        while (i < k) {\n            var group = new ArrayList<Pair>();\n            int last = 0;\n            int j = i;\n            while (j < k && sums[j].sum == sums[i].sum) {\n                if (sums[j].l > last) {\n                    group.add(sums[j]);\n                    last = sums[j].r;\n                }\n                j++;\n            }\n//            System.out.println(group);\n            if (group.size() > ans.size()) {\n                ans = group;\n            }\n            i = j;\n        }\n        out.println(ans.size());\n        for (Pair p : ans) {\n            out.println(p);\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n\ttry {\n\t    fastReader = new FastReader(System.in);\n\t    systemOut = new BufferedOutputStream(System.out);\n\t    solve();\n\t} finally {\n\t    systemOut.close();\n\t}\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int n = in.nextInt();\n        int[] a = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = in.nextInt();\n        }\n\n        int[] prefixSum = new int[n + 1];\n        prefixSum[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + a[i];\n        }\n\n        Map<Integer, List<Segment>> sumToSegments = new HashMap<>();\n        for (int i = 1; i <= n; i++) {\n            for (int j = i; j <= n; j++) {\n                int sum = prefixSum[j] - prefixSum[i - 1];\n                sumToSegments\n                        .computeIfAbsent(sum, $ -> new ArrayList<>())\n                        .add(Segment.make(i, j));\n            }\n        }\n\n        List<Segment> bestSegments = null;\n        for (int sum : sumToSegments.keySet()) {\n            List<Segment> segments = sumToSegments.get(sum);\n            int size = segments.size();\n\n            int[] f = new int[size];\n            int[] next = new int[size];\n            boolean[] take = new boolean[size];\n\n            f[size - 1] = 1;\n            next[size - 1] = -1;\n            take[size - 1] = true;\n            int bestStartIndex = size - 1;\n\n            for (int i = size - 2; i >= 0; i--) {\n                int nextIndex;\n\n                if (segments.get(i).q >= segments.get(size - 1).p) {\n                    nextIndex = -1;\n                } else {\n                    int L = i + 1;\n                    int R = size - 1;\n                    while (L < R) {\n                        int M = (L + R) / 2;\n                        if (segments.get(i).q >= segments.get(M).p) { /* intersection */\n                            L = M + 1;\n                        } else {\n                            R = M;\n                        }\n                    }\n                    nextIndex = L;\n                }\n\n                f[i] = 1 + ((nextIndex == -1) ? 0 : f[nextIndex]);\n                next[i] = nextIndex;\n                take[i] = true;\n\n                if (f[i + 1] > f[i]) {\n                    take[i] = false;\n                    f[i] = f[i + 1];\n                    next[i] = i + 1;\n                }\n\n                if (bestStartIndex == -1 || f[i] > f[bestStartIndex]) {\n                    bestStartIndex = i;\n                }\n            }\n\n            // recover segment set\n            List<Segment> maxForSum = new ArrayList<>();\n            int index = bestStartIndex;\n            do {\n                if (take[index]) {\n                    maxForSum.add(segments.get(index));\n                }\n                index = next[index];\n            } while (index != -1);\n\n            if (bestSegments == null || maxForSum.size() > bestSegments.size()) {\n                bestSegments = maxForSum;\n            }\n        }\n\n        System.out.println(bestSegments.size());\n        for (Segment segment : bestSegments) {\n            System.out.printf(\"%s %s%n\", segment.p, segment.q);\n        }\n\n        in.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main (String[] args) throws Exception {\n        String st[]=br.readLine().split(\" \");\n        int n=Integer.parseInt(st[0]);\n        long input[]=new long[n];\n        st=br.readLine().split(\" \");\n        for(int i=0;i<n;i++){\n            input[i]=Long.parseLong(st[i]);\n        }\n        HashMap<Long,ArrayList<Pair>> map=new HashMap<>();\n        long pref[]=new long[n+1];\n        pref[1]=input[0];\n        for(int i=1;i<n;i++){\n            pref[i+1]=pref[i]+input[i];\n        }\n        for(int i=0;i<n;i++){\n            for(int j=i;j<n;j++){\n                long sum=pref[j+1]-pref[i];\n                if(!map.containsKey(sum)){\n                    ArrayList<Pair> list=new ArrayList<>();\n                    list.add(new Pair(i,j));\n                    map.put(sum,list);\n                }\n                else{\n                    ArrayList<Pair> list=map.get(sum);\n                    list.add(new Pair(i,j));\n                }\n            }\n        }\n        ArrayList<Pair> ans=new ArrayList<>();\n       // debug(map);\n        for(long keys:map.keySet()){\n            ArrayList<Pair> list=map.get(keys);\n            Collections.sort(list,new PairComp());\n            int nn=list.size();\n            for(int j=0;j<=0;j++){\n                ArrayList<Pair> cur=new ArrayList<>();\n                cur.add(list.get(j));\n                int lim=list.get(j).v;\n                int i=j;\n                while(i<nn){\n                    if(list.get(i).u<=lim){\n                        i++;\n                    }\n                    else{\n                        cur.add(list.get(i));\n                        lim=list.get(i).v;\n                        i++;\n                    }\n                }\n                if(ans.size()<cur.size()){\n                    ans=cur;\n                }\n            }\n        }\n        out.println(ans.size());\n        for(Pair p:ans){\n            out.println(++p.u+\" \"+ ++p.v);\n        }\n/****************************************Solutions Ends**************************************************/\n        out.flush();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F2BlokiRavnoiSummiUslozhnennayaRedakciya solver = new F2BlokiRavnoiSummiUslozhnennayaRedakciya();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        inputClass in = new inputClass(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F2SameSumBlocksHard solver = new F2SameSumBlocksHard();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        //String[] strings = br.readLine().split(\" \");\n        int n = Integer.parseInt(br.readLine());\n\n        String[] strings = br.readLine().split(\" \");\n        int[] arr = new int[n];\n        for(int i = 0; i<n; i++) {\n            arr[i] = Integer.parseInt(strings[i]);\n        }\n\n\n        HashMap<Integer, ArrayList<Pair>> segments = new HashMap<>();\n        for(int r = 0; r<arr.length; r++) {\n            int sum = 0;\n            for(int l = r; l>=0; l--) {\n                sum += arr[l];\n                ArrayList<Pair> pairs = segments.get(sum);\n                if(pairs == null) {\n                    pairs = new ArrayList<>();\n                    segments.put(sum, pairs);\n                }\n                pairs.add(new Pair(l, r));\n            }\n        }\n\n        int res = 0;\n        ArrayList<Pair> result = new ArrayList<>();\n        for(ArrayList<Pair> pairs: segments.values()) {\n            ArrayList<Pair> temp = new ArrayList<>();\n            int count = 0;\n            int r = -1;\n            for(Pair p : pairs) {\n                if(p.key>r) {\n                    count++;\n                    temp.add(p);\n                    r = p.val;\n                }\n            }\n            if(count>res) {\n                res = count;\n                result = temp;\n            }\n        }\n        System.out.println(res);\n        StringBuilder sb = new StringBuilder();\n        for(Pair p : result){\n            sb.append(p.key+1).append(' ').append(p.val+1).append('\\n');\n        }\n        System.out.print(sb);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter pw = new PrintWriter(System.out);\n        new Solve6().solve(pw);\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "public static void main(String[] args) throws IOException {\n    in = new FastScanner();\n    new F().solver();\n    out.close();\n}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tString[] split = br.readLine().split(\" \");\n\t\tint[] terms = new int[n];\n\t\tint[] sums = new int[n+1];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tterms[i] = Integer.parseInt(split[i]);\n\t\t\tsums[i+1] = sums[i]+terms[i];\n\t\t}\n\t\tArrayList<Block> blocks = new ArrayList<>();\n\t\tfor(int i=0; i<n; i++)\n\t\t\tfor(int j=i; j<n; j++){\n\t\t\t\tint s = sums[j+1]-sums[i];\n\t\t\t\tblocks.add(new Block(i, j, s));\n\t\t\t}\n\t\tCollections.sort(blocks);\n\t\tArrayList<Block> best = new ArrayList<>();\n\t\tint i = 0;\n\t\twhile(i<blocks.size()){\n\t\t\tint curSum = blocks.get(i).sum;\n\t\t\tArrayList<Block> curBlocks = new ArrayList<>();\n\t\t\twhile(i<blocks.size() && blocks.get(i).sum==curSum) curBlocks.add(blocks.get(i++));\n\t\t\tint[] memo = new int[curBlocks.size()+1];\n\t\t\tArrays.fill(memo, -1);\n\t\t\tmemo[curBlocks.size()] = 0;\n\t\t\tfor(int j=curBlocks.size()-1; j>=0; j--){\n\t\t\t\tint idx = Collections.binarySearch(curBlocks, new Block(curBlocks.get(j).r+1, curBlocks.get(j).r+1, curBlocks.get(j).sum));\n\t\t\t\tif(idx<0) idx = -(idx+1);\n\t\t\t\tmemo[j] = Math.max(memo[j+1], 1+memo[idx]);\n\t\t\t}\n\t\t\tif(memo[0]>best.size()){\n\t\t\t\tbest = new ArrayList<>();\n\t\t\t\tint idx = 0;\n\t\t\t\twhile(memo[idx]>=1){\n\t\t\t\t\tif(memo[idx]>memo[idx+1]) best.add(curBlocks.get(idx));\n\t\t\t\t\tidx++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(best.size()).append(\"\\n\");\n\t\tfor(Block b : best){\n\t\t\tsb.append(b.l+1).append(\" \").append(b.r+1).append(\"\\n\");\n\t\t}\n\t\tSystem.out.print(sb);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        SameSumBlocks solver = new SameSumBlocks();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner s=new Scanner(System.in);\n\t\t\n\t\tint n=s.nextInt();\n\t\t\n\t\tlong[] arr=new long[n];\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tarr[i]=s.nextInt();\n\t\t}\n\t\t\n\t\tlong[] pre=new long[n];\n\t\t\n\t\tpre[0]=arr[0];\n\t\t\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tpre[i]=pre[i-1]+arr[i];\n\t\t}\n\t\t\n\t\tHashMap<Long,ArrayList<pair>> map=new HashMap<>();\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int j=i;j<n;j++)\n\t\t\t{\n\t\t\t\tlong key=pre[j]-pre[i]+arr[i];\n\t\t\t\t\n\t\t\t\tif(map.containsKey(key))\n\t\t\t\t{\n\t\t\t\t\tpair p=new pair(i+1,j+1);\n\t\t\t\t\tArrayList<pair> temp=map.get(key);\n\t\t\t\t\ttemp.add(p);\n\t\t\t\t\t\n\t\t\t\t\tmap.put(key,temp);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tArrayList<pair> list=new ArrayList<>();\n\t\t\t\t\tpair p=new pair(i+1,j+1);\n\t\t\t\t\tlist.add(p);\n\t\t\t\t\t\n\t\t\t\t\tmap.put(key,list);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(Map.Entry<Long,ArrayList<pair>> entry:map.entrySet())\n\t\t{\n\t\t\tArrayList<pair> curr=entry.getValue();\n\t\t\t\n\t\t\tCollections.sort(curr,new comp());\n\t\t}\n\t\t\n\t\tlong ans=0;\n\t\tlong max=-1000000000000l;\n\t\t\n\t\tfor(Map.Entry<Long,ArrayList<pair>> entry:map.entrySet())\n\t\t{\n\t\t\tArrayList<pair> curr=entry.getValue();\n\t\t\t\n\t\t\tint count=1;\n\t\t\tint l=curr.get(0).l;\n\t\t\tint r=curr.get(0).r;\n\t\t\t\n\t\t\tfor(int i=1;i<curr.size();i++)\n\t\t\t{\n\t\t\t\tif(curr.get(i).l>r)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\tl=curr.get(i).l;\n\t\t\t\t\tr=curr.get(i).r;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(count>max)\n\t\t\t{\n\t\t\t\tmax=count;\n\t\t\t\tans=entry.getKey();\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(max);\n\t\t\n\t\tArrayList<pair> list=map.get(ans);\n\t\t\n\t\tSystem.out.println(list.get(0).l+\" \"+list.get(0).r);\n\t\t\n\t\tint l=list.get(0).l;\n\t\tint r=list.get(0).r;\n\t\t\n\t\tfor(int i=1;i<list.size();i++)\n\t\t{\n\t\t\tif(list.get(i).l>r)\n\t\t\t{\n\t\t\t\tSystem.out.println(list.get(i).l+\" \"+list.get(i).r);\n\t\t\t\tl=list.get(i).l;\n\t\t\t\tr=list.get(i).r;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws Exception {\n\t\tnew Thread(null, new cf1(),\"cf1\",1<<26).start();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F solver = new F();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        TreeMap<Long, ArrayList<Node> > mp = new TreeMap<>();\n        Scanner cin = new Scanner(System.in);\n        int N=cin.nextInt();\n        for(int i=1;i<=N;i++){\n            int x=cin.nextInt();\n            sum[i]=sum[i-1]+x;\n        }\n        //System.out.println(\"here\");\n        ArrayList<Node> arr = new ArrayList<>();\n        for(int l=1;l<=N;l++){\n            for(int r=l;r<=N;r++){\n                arr.add(new Node(l,r,sum[r]-sum[l-1]));\n            }\n        }\n        Collections.sort(arr);\n        for(int i=0;i<arr.size();i++){\n            ArrayList<Node> a=mp.get(arr.get(i).s);\n            if(a==null) {\n                a=new ArrayList<>();\n                mp.put(arr.get(i).s,a);\n            }\n            a.add(arr.get(i));\n        }\n        int mx=-1;\n        long mxv=-1;\n        Iterator<Long> it=mp.keySet().iterator();\n        while(it.hasNext()){\n            int ans=0,t=0;\n            long v=it.next();\n            ArrayList<Node> vec= mp.get(v);\n            for(int i=0;i<vec.size();i++){\n                if(t<vec.get(i).l){\n                    ans++;\n                    t=vec.get(i).r;\n                }\n            }\n           //\n            if(ans>mx){\n                mx=ans;\n                mxv=v;\n               // System.out.println(mxv);\n            }\n        }\n        ArrayList<Node> vec=mp.get(mxv);\n        System.out.println(mx);\n        int t=0;\n        for(int i=0;i<vec.size();i++){\n\n           // System.out.println(vec.get(i).l+\" \"+vec.get(i).r);\n          // System.out.println(\"h\");\n            if(t<vec.get(i).l){\n                System.out.println(vec.get(i).l+\" \"+vec.get(i).r);\n                t=vec.get(i).r;\n            }\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF2 solver = new TaskF2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] rgs)\n\t\tScanner s=new Scanner(System.in);\n\n\t\tint n=s.nextInt();\n\t\tlong[] arr=new long[n];\n\t\t\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tarr[i]=s.nextLong();\n\t\t}\n\t\tHashMap<Long,ArrayList<pair>> map=new HashMap<>();\n\t\n\t\tArrayList<pair> list=new ArrayList<>();\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tlong sum=0;\n\t\t\tfor(int j=i;j<n;j++) {\n\t\t\t\tsum=sum+arr[j];\n\t\t\t\tpair ob=new pair(i,j);\n\t\t\t\tif(map.containsKey(sum))\n\t\t\t\t{\n\t\t\t\t\tArrayList p=map.get(sum);\n\t\t\t\t\tp.add(ob);\n\t\t\t\t\tmap.put(sum, p);\n\t\t\t\t\t\n\t\t\t\t}else {\n\t\t\t\t\tArrayList<pair> listt=new ArrayList<>();\n\t\t\t\t\tlistt.add(ob);\n\t\t\t\t\tmap.put(sum,listt);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tlong in=-1;\n\t\tint max=0;\n\t\t\n\t\tfor(Map.Entry<Long, ArrayList<pair>> entry:map.entrySet()) {\n\t\t\tint l=1;\n\t\t\tArrayList<pair> p=entry.getValue();\n\t\t\tCollections.sort(p,new comp());\n\t\t\tint now=p.get(0).end;\n\t\t\tfor(int j=0;j<p.size();j++) {\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tif(p.get(j).st>now) {\n\t\t\t\t\tl++;\n\t\t\t\t\tnow=p.get(j).end;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(l>max) {\n\t\t\t\tmax=l;\n\t\t\t\tin=entry.getKey();\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(max);\n\t\t\n\t\t\n\t\tArrayList<pair> d=map.get(in);\n\t\tint now=-1;\n\t\tfor(int j=0;j<d.size();j++) {\n\t\t\n\t\t\tif(d.get(j).st>now) {\n\t\t\t\tSystem.out.println((d.get(j).st+1)+\" \"+(d.get(j).end+1));\n\t\t\t\tnow=d.get(j).end;\n\t\t\t\t}\n\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        int[] a = sc.nextIntArray(n);\n        long[] cum = new long[n];\n        cum[0] = a[0];\n        for (int i = 1; i < n; i++)\n            cum[i] = a[i] + cum[i - 1];\n        HashMap<Long, ArrayList<Pair>> hm = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                long cur = get(cum, i, j);\n                if (!hm.containsKey(cur)) hm.put(cur, new ArrayList<>());\n                hm.get(cur).add(new Pair(i, j));\n            }\n        }\n        int max = 0;\n        StringBuilder ans = new StringBuilder();\n        for (long sum : hm.keySet()) {\n            ArrayList<Pair> cur = hm.get(sum);\n            Collections.sort(cur);\n            int poss = 0;\n            int r = -1;\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < cur.size(); i++) {\n                if (cur.get(i).left > r) {\n                    poss++;\n                    r = cur.get(i).right;\n                    sb.append(cur.get(i));\n                }\n            }\n            if (poss> max){\n                max = poss;\n                ans = sb;\n            }\n        }\n        out.println(max);\n        out.println(ans);\n        out.flush();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = nextInt();\n\t\tint[] arr = new int[n];\n\t\tint[] pSum = new int[n];\n\t\tfor(int i = 0; i< n; i++) {\n\t\t\tarr[i] = nextInt();\n\t\t\tif(i != 0)\n\t\t\t\tpSum[i] += pSum[i - 1];\n\t\t\tpSum[i] += arr[i];\n\t\t}\n\t\tArrayList<Interval> sorted = new ArrayList<Interval>();\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tsorted.add(new Interval(pSum[i],0, i));\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tfor(int j = i; j < n; j++) {\n\t\t\t\tsorted.add(new Interval(pSum[j] - pSum[i - 1], i, j));\n\t\t\t}\n\t\t}\n\t\tsorted.sort(null);\n\t\tint i = 0;\n\t\tint max = 0, idx = 0, end = 0;\n\t\twhile(i < sorted.size()) {\n\t\t\tint last = i;\n\t\t\tint curr = 1;\n\t\t\tint start = i;\n\t\t\tsorted.get(i).marked = true;\n\t\t\twhile(i < sorted.size() - 1 && sorted.get(i).val == sorted.get(i + 1).val) {\n\t\t\t\ti++;\n\t\t\t\tif(sorted.get(i).l > sorted.get(last).r) {\n\t\t\t\t\tsorted.get(i).marked = true;\n\t\t\t\t\tcurr++;\n\t\t\t\t\tlast = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(curr > max) {\n\t\t\t\tmax = curr;\n\t\t\t\tidx = start;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(max);\n\t\tfor(int j = idx; j <= end; j++) {\n\t\t\tif(sorted.get(j).marked)\n\t\t\t\tSystem.out.println(sorted.get(j).l + 1 + \" \" + (sorted.get(j).r + 1));\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "      public static void main(String omkar[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         int[] arr = new int[N];\n         st = new StringTokenizer(infile.readLine());\n         for(int i=0; i < N; i++)\n            arr[i] = Integer.parseInt(st.nextToken());\n         //thonky wonky\n         HashMap<Long, ArrayList<Range>> map = new HashMap<Long, ArrayList<Range>>();\n         for(int r=0; r < N; r++)\n         {\n            long sum = 0L;\n            for(int i=r; i >= 0; i--)\n            {\n               sum += arr[i];\n               if(!map.containsKey(sum))\n                  map.put(sum, new ArrayList<Range>());\n               map.get(sum).add(new Range(i, r));\n            }\n         }\n         ArrayList<Range> res = new ArrayList<Range>();\n         for(long key: map.keySet())\n         {\n            ArrayList<Range> ls = map.get(key);\n            ArrayList<Range> temp = new ArrayList<Range>();\n            temp.add(ls.get(0));\n            int r = ls.get(0).r;\n            for(int i=1; i < ls.size(); i++)\n               if(r < ls.get(i).l)\n               {\n                  r = ls.get(i).r;\n                  temp.add(ls.get(i));\n               }\n            if(res.size() < temp.size())\n               res = temp;\n         }\n         System.out.println(res.size());\n         StringBuilder sb = new StringBuilder();\n         for(Range x: res)\n         {\n            sb.append(x.l+\" \"+x.r);\n            sb.append(\"\\n\");\n         }\n         System.out.print(sb);\n      }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint[] aa = new int[n + 1];\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\taa[i] = Integer.parseInt(st.nextToken());\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\taa[i] += aa[i - 1];\n\t\tint m = n * (n + 1) / 2;\n\t\tV[] vv = new V[m];\n\t\tm = 0;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfor (int j = i; j <= n; j++)\n\t\t\t\tvv[m++] = new V(i, j, aa[j] - aa[i - 1]);\n\t\tArrays.sort(vv, (u, v) -> u.a != v.a ? u.a - v.a : u.r - v.r);\n\t\tint[] ii_ = new int[m];\n\t\tint[] ii = new int[m];\n\t\tint k_ = 0;\n\t\tfor (int i = 0, j; i < m; i = j) {\n\t\t\tj = i + 1;\n\t\t\twhile (j < m && vv[j].a == vv[i].a)\n\t\t\t\tj++;\n\t\t\tint k = 0, r = 0;\n\t\t\tfor (int h = i; h < j; h++)\n\t\t\t\tif (vv[h].l > r) {\n\t\t\t\t\tii[k++] = h;\n\t\t\t\t\tr = vv[h].r;\n\t\t\t\t}\n\t\t\tif (k_ < k) {\n\t\t\t\tk_ = k;\n\t\t\t\tint[] tmp = ii_; ii_ = ii; ii = tmp;\n\t\t\t}\n\t\t}\n\t\tpw.println(k_);\n\t\tfor (int h = 0; h < k_; h++) {\n\t\t\tint i = ii_[h];\n\t\t\tpw.println(vv[i].l + \" \" + vv[i].r);\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        MyScanner scanner = new MyScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n\n        int n = scanner.nextInt();\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            list.add(scanner.nextInt());\n        }\n\n        Map<Integer, List<Pair<Integer, Integer>>> map = new HashMap<>();\n        for (int i = n - 1; i >= 0; i--) {\n            int x = 0;\n            for (int j = i; j >= 0; j--) {\n                x = x + list.get(j);\n                if (!map.containsKey(x)) {\n                    map.put(x, new ArrayList<>());\n                }\n                map.get(x).add(new Pair<>(j + 1, i + 1));\n            }\n        }\n\n        List<Pair<Integer, Integer>> ans = new ArrayList<>();\n        for (Map.Entry<Integer, List<Pair<Integer, Integer>>> entry : map.entrySet()) {\n            List<Pair<Integer, Integer>> segments = entry.getValue();\n            Collections.reverse(segments);\n            List<Pair<Integer, Integer>> result = new ArrayList<>();\n            result.add(segments.get(0));\n            for (int i = 1; i < segments.size(); i++) {\n                if (segments.get(i).first > result.get(result.size() - 1).second) {\n                    result.add(segments.get(i));\n                }\n            }\n            if (result.size() > ans.size()) {\n                ans = result;\n            }\n        }\n\n        out.println(ans.size());\n        for (Pair<Integer, Integer> pair : ans) {\n            out.println(pair.first + \" \" + pair.second);\n        }\n\n\n\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new Main().solve();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        int tc = in.nextInt();\n        for(int i = 0; i < tc; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out));\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        // Move from both ends, Time limit exceeded on test 6\n        for (int i= 1; i<= m/2; i++) {\n            // String s = \"\";\n            int i2 = m -i + 1; // the other end of i\n            // i is left row, i2 is right row\n            for (int j = 1; j <= n ; j++) {\n                int j2 = n - j + 1;\n                // start with (i,j), then go thru all the cell with (,i) and (,i2)\n                pw.println(j + \" \" + i);\n                pw.println(j2+ \" \" + i2);\n                // s += j + \" \" + i + \"\\n\" + j2+ \" \" + i2 + \"\\n\";\n            }\n            // out.print(s);\n        }\n        \n        // if n is odd, there is one line in the middle\n        if (m % 2 == 1) {\n            int i2 = m /2 + 1; // this is the middle column\n            for (int j = 1; j <= n/2 ; j++) {\n                int j2 = n - j + 1;\n                // start with (i,j), then go thru all the cell with (,i) and (,i2)\n                pw.println(j + \" \" + i2);\n                pw.println(j2+ \" \" + i2);\n            }\n            if (n %2 == 1) {\n                int j = n /2 + 1;\n                pw.println(j + \" \" + i2);\n            }\n        }\n        pw.flush();\n        pw.close();\n    }    \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new D().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new D().solve();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new D().solve();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastReader fr = new FastReader();\n        FastWriter fw = new FastWriter();\n        int n = fr.nextInt();\n        int m = fr.nextInt();\n        for (int r = 0; r < n / 2; r++) {\n            for (int c = 0; c < m; c++) {\n                fw.println((r + 1) + \" \" + (c + 1));\n                fw.println((n - r) + \" \" + (m - c));\n            }\n        }\n        if (n % 2 != 0) {\n            int r = n / 2;\n            for (int c = 0; c < m / 2; c++) {\n                fw.println((r + 1) + \" \" + (c + 1));\n                fw.println((r + 1) + \" \" + (m - c));\n            }\n            if (m % 2 != 0) fw.println((r + 1) + \" \" + (m / 2 + 1));\n        }\n        fw.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception{\n        FastReader sc=new FastReader(); \n        OutputStream outputStream = System.out;\n        PrintWriter out = new PrintWriter(outputStream);\n        int n=sc.nextInt();\n        int[] font=new int[n];\n        int[] cost=new int[n];\n        for(int i=0;i<n;i++) {\n            font[i]=sc.nextInt();\n        \n        }\n        for(int i=0;i<n;i++) {\n            cost[i]=sc.nextInt();\n        }\n        int[] dou= new int[n];\n        for(int i=0;i<n;i++) {\n            int min=Integer.MAX_VALUE;\n            for(int j=0;j<i;j++) {\n                if(font[j]<font[i]) {\n                    if(min>cost[i]+cost[j]) {\n                        min=cost[i]+cost[j];\n                    }\n                }\n            }\n            dou[i]=min;\n        }\n        int ans=Integer.MAX_VALUE;\n        for(int i=0;i<n;i++) {\n            int min=Integer.MAX_VALUE;\n            for(int j=0;j<i;j++) {\n                if(dou[j]!=Integer.MAX_VALUE && font[j]<font[i]) {\n                    if(min>dou[j]+cost[i]) {\n                        min=dou[j]+cost[i];\n                    }\n                }\n            }\n            if(min<ans) {\n                ans=min;\n            }\n        }\n        if(ans==Integer.MAX_VALUE) {\n            System.out.println(-1);\n        }\n        else {\n            System.out.println(ans);\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] s = br.readLine().split(\" \");\n        int n = Integer.parseInt(s[0]);\n        int d = Integer.parseInt(s[1]);\n        int k = Integer.parseInt(s[2]);\n        StringBuffer sb = new StringBuffer();\n        int[] rem = new int[n];\n        int[] deg = new int[n];\n        int i = 0;\n        if(k == 1){\n            if(n <= 2){\n\n            }else{\n                System.out.println(\"NO\");\n                return;\n            }\n        }\n        for(i=0;i<d;i++){\n            if(i>=n-1){\n                System.out.println(\"NO\");\n                return;\n            }\n            sb.append((i+1) +\" \" + (i+2)+\"\\n\");\n            rem[i] = Math.min(i, d-i);\n            deg[i]++;\n            if(i+1<n)\n            deg[i+1]++;\n        }\n        if(i<n){\n            rem[i] = 0;\n            deg[i] = 1;\n        }\n        i++;\n        int j  = 0;\n        for(;i<n;i++){\n            //For all remaining Nodes\n            while(true){\n                if(j>=n){\n                    System.out.println(\"NO\");\n                    return;\n                }\n                if(rem[j] > 0 && deg[j]<k){\n                    deg[j]++;\n                    rem[i] = rem[j] - 1;\n                    sb.append((j+1)+\" \"+(i+1)+\"\\n\");\n                    deg[i]++;\n                    break;\n                }else{\n                    j++;\n                }\n            }\n        }\n        System.out.println(\"YES\");\n        System.out.println(sb);\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    new Solver();\n    out.flush();\n  }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastScanner sc = new FastScanner(System.in);\n\t\tFastPrinter out = new FastPrinter(System.out);\n\t\tnew A().run(sc, out);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t    int n=Integer.parseInt(br.readLine());\n\t    String s=br.readLine();\n\t    String ss[]=s.split(\" \");\n\t    int arr[]=new int[n];\n\t    for(int i=0;i<n;i++)\n\t    arr[i]=Integer.parseInt(ss[i]);\n\t    Arrays.sort(arr);\n\t    int coun=0,coun2=0;\n\t    for(int i=arr[0],k=0;k<n;)\n\t    {\n\t        for(int j=k;j<n;j++)\n\t        {\n\t            if(arr[j]%i==0)\n\t            {\n\t                arr[j]=-1;\n\t                coun2++;\n\t            }\n\t        }\n\t        Arrays.sort(arr);\n\t        k=coun2;\n\t        coun++;\n\t        if(coun2<n)\n\t        i=arr[coun2];\n\t        else\n\t        break;\n\t        \n\t    }\n\t\tSystem.out.println(coun);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Input in = new Input(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tconsole = new Scanner(System.in);\n\t\tint n = console.nextInt();\n\t\tList<Integer> arr= new ArrayList<>();\t\t\n\t\tfor(int i = 0; i < n; i++) arr.add( console.nextInt());\n\t\tCollections.sort(arr);\n\t\tList<Integer> groups = new ArrayList<>();\n//\t\tSystem.out.println(arr);\n\t\tfor(int i = 0; i < arr.size() - 1; i++) {\n\t\t\tint j = i+1;\n\t\t\tgroups.add(arr.get(i));\n//\t\t\tSystem.out.println(groups);\n\t\t\twhile(j < arr.size()) {\n//\t\t\t\tSystem.out.println(j);\n\t\t\t\tif(arr.get(j) % arr.get(i) == 0) {\n\t\t\t\t\tarr.remove(j);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n//\t\t\t\t\tgroups.add(arr.get(j));\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n//\t\tSystem.out.println(arr);\n\t\tSystem.out.println(arr.size());\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[] ) throws Exception{\n       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n       int n,i,j,k,temp ;\n       n = ni(br.readLine());\n       int[] a = nia(br);\n       Arrays.sort(a);\n       int c = 0;\n       for( i = 0; i< n ; i++) {\n    \t   if(a[i] > 0) {\n    \t\t   c++;\n    \t\t   temp = a[i];\n    \t\t   for(j = i+1; j< n; j++) {\n    \t\t\t   if(a[j] % temp == 0)\n    \t\t\t\t    a[j] = 0;\n    \t\t   }\n    \t   }\n       }\n       \n       \n       System.out.println(c);\n\t\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int[] numbs = new int[n];\n        int[] smallest_color = new int[n];\n        for(int i =  0; i < n;i++){\n            numbs[i] = scan.nextInt();\n        }\n        Arrays.sort(numbs);\n        int count = 0;\n        for(int i =0; i < n; i++){\n            for(int j=0; j <n;j++ ){\n                if(smallest_color[j] == 0){\n                    count++;\n                    smallest_color[j] = numbs[i];\n                    break;\n                }\n                if(numbs[i] % smallest_color[j] == 0){\n                    break;\n                }\n            }\n        }\n        System.out.println(count);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] Args){\n        FastReader scan=new FastReader();\n        int n=scan.nextInt();\n        int[] arr=new int[n];\n        for (int i = 0; i <n ; i++) {\n            arr[i]=scan.nextInt();\n        }\n        Arrays.sort(arr);\n        boolean[] done=new boolean[n];\n        int ans=0;\n        for(int i=0;i<n;i++){\n            if(!done[i]){\n                done[i]=true;\n                ans++;\n                for(int j=i+1;j<n;j++){\n                    if(arr[j]%arr[i]==0){\n                        done[j]=true;\n                    }\n                }\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner sc = new FastScanner();\n        int N = sc.nextInt();\n        int[] nums = new int[N];\n        for (int i = 0; i < N; i++) {\n        \tnums[i] = sc.nextInt();\n        }\n        Arrays.sort(nums);\n        boolean[] hit = new boolean[N];\n        int colors = 0;\n        int index = 0;\n        while (index < N) {\n        \tif (hit[index] == false) {\n        \t\tcolors++;\n        \t\tint div = nums[index];\n        \t\tfor (int i = index; i < N; i++) {\n        \t\t\tif (nums[i] % div == 0) {\n        \t\t\t\thit[i] = true;\n        \t\t\t}\n        \t\t}\n        \t}\n        \tindex++;\n        }\n        System.out.println(colors);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[])\n\t  Scanner in = new Scanner(System.in);\n\t  int n = in.nextInt();\n\t  int arr[] = new int[n];\n\t  for(int i =0;i<n;i++)\n\t   arr[i]= in.nextInt();\n\t  Arrays.sort(arr);\n\t  int max =0;\n\t  boolean check[]= new boolean [n];\n\t  int count=0;\n\t  for(int i =0;i<n;i++)\n\t  {\n\t   \n\t   if(!check[i])\n\t   {\n\t   \tcount++;\n\t   \n\t   for(int j=i;j<n;j++)\n\t   {\n\t   \n\t    if(arr[j]%arr[i]==0)\n\t     check[j]=true;\n\t   }\n\t   \n\t   }\t\n\t  }\n\t  System.out.println(count);\t\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastReader s = new FastReader();\n\t\tint n = s.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tarr[i]=s.nextInt();\n\t\t}\n\t\tboolean[] arr2  = new boolean[n];\n\t\tArrays.sort(arr);\n\t\tfor(int i=0;i<arr2.length;i++) {\n\t\t\tarr2[i]=true;\n\t\t}\n\t\t//arr2[0]=true;\n\t\tfor(int i=0;i<n-1;i++) {\n\t\t\tfor(int j=i+1;j<n;j++) {\n\t\t\t\t\tif(arr[j]%arr[i]==0) {\n\t\t\t\t\t\tarr2[j]=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tint count=0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif(arr2[i]==true) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n        tokenizer = null;\n        writer = new PrintWriter(System.out);\n        banana();\n        reader.close();\n        writer.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastReader in = new FastReader();\n        PrintWriter out = new PrintWriter(System.out);\n        TaskC solver = new TaskC(in, out);\n        solver.solve();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = Integer.parseInt(sc.next());\n        int[] a = new int[N];\n        int[] flag = new int[N];\n        int ans = 0;\n        for (int i=0;i<N;i++) {\n            a[i] = Integer.parseInt(sc.next());\n        }\n        Arrays.sort(a);\n        for (int i=0;i<N;i++) {\n            int used = 0;\n            for (int j=0;j<N;j++) {\n                if (flag[j]==1) {\n                    continue;\n                } else {\n                    if (a[j]%a[i]==0) {\n                        used=1;\n                        flag[j]=1;\n                    }\n                }\n            }\n            if (used==1) {\n                ans++;\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tint a[] = new int[n];\n\t\tHashMap<Integer,ArrayList<Integer>> h = new HashMap<>();\n\t\tboolean visited[] = new boolean[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\ta[i] = s.nextInt();\n\t\t\t\n\t\t\t\n\t\t}\n\t\tArrays.sort(a);\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif(h.containsKey(a[i])) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tArrayList<Integer> temp = h.get(a[i]);\n\t\t\t\t\t\t\ttemp.add(i);\n\t\t\t\t\t\t\th.put(a[i],temp);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tArrayList<Integer> k =new ArrayList<>();\n\t\t\t\t\t\t\tk.add(i);\n\t\t\t\t\t\t\th.put(a[i], k);\n\t\t\t\t\t\t}\n\t\t}\n\t\tint ctr=0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif(!visited[i]) {\n\t\t\t\t//System.out.println(a[i]);\n\t\t\t\tctr++;\n\t\t\t\tfor(int j=a[i];j<=100;j+=a[i]) {\n\t\t\t\t\tif(h.containsKey(j)) {\n\t\t\t\t\t\tArrayList<Integer> m = h.get(j);\n\t\t\t\t\t\tfor(int k=0;k<m.size();k++) {\n\t\t\t\t\t\t\tvisited[m.get(k)]=true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\th.remove(j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ctr);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter printWriter = new PrintWriter(System.out);\n        int N = Integer.parseInt(bufferedReader.readLine());\n        String[] strings = bufferedReader.readLine().split(\" \");\n        int[] arr = new int[strings.length];\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < N; i++) {\n            arr[i] = Integer.parseInt(strings[i]);\n            set.add(arr[i]);\n        }\n        Arrays.sort(arr);\n        int c = 0;\n        for (int i = 0; i < N; i++) {\n            int value = arr[i];\n            if (!set.contains(value)) {\n                continue;\n            }\n            for (int j = 1; j <= 100; j++) {\n                if (set.contains(value * j)) {\n                    set.remove(value * j);\n                }\n            }\n            c++;\n        }\n        printWriter.println(c);\n        printWriter.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new A().runIO();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n=sc.nextInt();\n        int[] arr=new int[101];\n        for(int i=0;i<n;i++)\n            arr[sc.nextInt()]++;\n        boolean [] vis=new boolean[101];\n        int c=0;\n        for(int i=1;i<=100;i++){\n            if(!vis[i]&&arr[i]>0){\n                c++;\n                for(int j=i+i;j<=100;j+=i)\n                    vis[j]=true;\n            }\n        }\n        pw.println(c);\n        pw.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastReader in = new FastReader();\n        int n = in.nextInt();\n        int[] a = new int[101];\n        for (int i = 0; i < n; i++) {\n            a[in.nextInt()]++;\n        }\n        int count = 0;\n        for (int i = 1; i < 101; i++) {\n            if (a[i] > 0) {\n                count++;\n                for (int j = i; j < 101; j += i) {\n                    a[j] = 0;\n                }\n            }\n        }\n        System.out.println(count);\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        APaintTheNumbers solver = new APaintTheNumbers();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String [] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int n = scanner.nextInt();\n        int numbers[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            numbers[i] = scanner.nextInt();\n        }\n        scanner.close();\n        Arrays.sort(numbers);\n\n        boolean[] colored = new boolean[n];\n        int res = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (!colored[i]) {\n                res += 1;\n            }\n            for (int j = i; j < n; j++) {\n                if (numbers[j] % numbers[i] == 0) {\n                    colored[j] = true;\n                }\n            }\n        }\n\n        System.out.println(res);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t FastReader sc = new FastReader();\n\t\t int n = sc.nextInt();\n\t\t int[] a = new int[n];\n\t\t TreeSet<Integer> set = new TreeSet<Integer>();\n\t\t for(int i=0;i<n;++i) {\n\t\t\t a[i] = sc.nextInt();\n\t\t\t set.add(a[i]);\n\t\t }\n\t\t long ans = 0;\n\t\t while(set.size() > 0) {\n\t\t\t ++ans;\n\t\t\t int min = set.first();\n\t\t\t TreeSet<Integer> temp = new TreeSet<>();\n\t\t\t for(int x : set) {\n\t\t\t\t if(x%min != 0) temp.add(x);\n\t\t\t }\n\t\t\t set = temp;\n\t\t\t \n\t\t }\n\t\t out.print(ans);\n\t\t \n\t\t out.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new Contest().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[] ) throws Exception {\n\n    \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line = br.readLine();\n        int n = Integer.parseInt(line);\n        line = br.readLine();\n        String[] values = line.split(\" \");\n        int[] arr = new int[n];\n        TreeSet<Integer> set = new TreeSet<>();\n        for (int i = 0; i < n; i++) {\n            arr[i] = Integer.parseInt(values[i]);\n            set.add(arr[i]);\n        }\n        int count=0;\n        TreeSet<Integer> copy = new TreeSet<>();\n        \n        // for(int i=0;i<n;i++)\n        copy.addAll(set);\n        int prev = copy.size();\n        \n        for(Integer i: set){\n           // System.out.println(\"i \"+i);\n            if(copy.size()==0){\n                break;\n            }\n            Iterator<Integer> iterator = copy.iterator();\n            while (iterator.hasNext()) {\n                Integer e = iterator.next();\n                if (e % i == 0) {\n                    iterator.remove();\n                }\n            }\n            if(copy.size()!=prev){\n                count++;\n                prev = copy.size();\n            }\n           // System.out.println(\"size \"+copy.size());\n            \n        }\n        \n\n        System.out.println(count);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Throwable {\n        Thread thread = new Thread(null, new Main(), \"\", (1 << 26));\n        thread.start();\n        thread.join();\n        if (Main.uncaught != null) {\n            throw Main.uncaught;\n        }\n    }\n", "complexity": "quadratic"}
{"code": "     public static void main(String [] args) {\n        int n=in.nextInt(),a[]=new int [n],g=0;\n        for(int i=0;i<n;i++){\n        a[i]=in.nextInt();\n        if(a[i]==1){System.out.println(\"1\");return;}\n        }\n        ans=0;\n        Arrays.sort(a);\n        for(int i=0;i<n;i++){\n            int x=a[i];\n            if(x>0){ans++;\n        for(int u=i;u<n;u++){\n        if(a[u]%x==0){a[u]=0;}\n        \n        }}\n        \n        }\n         System.out.println(ans);\n     }\n     static int gcd(int a,int b){\n     if(b==0)return a;\n     return gcd(b,a%b);\n     }\n   static class Reader \n    {  \n        private InputStream mIs;private byte[] buf = new byte[1024];private int curChar,numChars;public Reader() { this(System.in); }public Reader(InputStream is) { mIs = is;} \n        public int read() {if (numChars == -1) throw new InputMismatchException();if (curChar >= numChars) {curChar = 0;try { numChars = mIs.read(buf);} catch (IOException e) { throw new InputMismatchException();}if (numChars <= 0) return -1; }return buf[curChar++];} \n        public int nextInt(){int c = read() ;while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') { sgn = -1 ; c = read() ; }int res = 0;do{if (c < '0' || c > '9') throw new InputMismatchException();res *= 10 ; res += c - '0' ; c = read() ;}while(!isSpaceChar(c));return res * sgn;} \n        public boolean isSpaceChar(int c) { return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1; }\n    }\n    \n}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = in.nextInt();\n        }\n\n        boolean[] visited = new boolean[n];\n        int min = Integer.MAX_VALUE;\n        int a = 0;\n        boolean cont = true;\n        while (cont) {\n            for (int i = 0; i < n; i++) {\n                if (!visited[i]) {\n                    min = Math.min(min, nums[i]);\n                }\n            }\n\n            cont = false;\n            for (int i = 0; i < n; i++) {\n                if (!visited[i] && nums[i] % min == 0) {\n                    cont = true;\n                    visited[i] = true;\n                }\n            }\n            a++;\n            min = Integer.MAX_VALUE;\n        }\n        System.out.println(a - 1);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint n = in.nextInt();\n\t\tint[] a = in.nextIntArray(n);\n\t\tsort(a);\n\t\tint ans = 0;\n\t\tboolean[] done = new boolean[n];\n\t\tfor(int i = 0; i < n; i ++) {\n\t\t\tif(done[i])\n\t\t\t\tcontinue;\n\t\t\tans ++;\n\t\t\tfor(int j = i + 1; j < n; j ++)\n\t\t\t\tif(a[j] % a[i] == 0)\n\t\t\t\t\tdone[j] = true;\n\t\t}\n\t\tout.write(ans + \"\\n\");\n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new TaskA(), \"TaskA\", 1 << 26).start();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\t\n\t\tArrayList<Integer> l=new ArrayList<Integer>();\n\t\t\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tl.add(sc.nextInt());\n\t\t}\n\t\t\n\t\tboolean c=false;\n\t\t\n\t\t\n\t\t\tfor(int i=0; i<l.size(); i++) {\n\t\t\t\tif(l.get(i)==-1)\n\t\t\t\t\tcontinue;\n\t\t\t\tfor(int j=0; j<l.size(); j++) {\n\t\t\t\t\t\n\t\t\t\t\tif(i==j || l.get(j)==-1)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(l.get(j)%l.get(i)==0) {\n\t\t\t\t\t\t\tl.set(j, -1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint nbr=0;\n\t\t\tfor(int i=0; i<l.size(); i++)\n\t\t\t\tif(l.get(i)!=-1)\n\t\t\t\t\tnbr++;\n\t\t\tSystem.out.println(nbr);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner();\n        StringBuilder output = new StringBuilder();\n\n        int n = input.nextInt();\n        int[] a = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            a[i] = input.nextInt();\n        }\n\n        Arrays.sort(a);\n        boolean[] colored = new boolean[n];\n        int colors = 0;\n        for (int i = 0; i < n; i++) {\n            if (!colored[i]) {\n                colors ++;\n                colored[i] = true;\n                for (int j = i+1; j < n; j++) {\n                    if (a[j] % a[i] == 0) {\n                        colored[j] = true;\n                    }\n                }\n            }\n        }\n\n        System.out.println(colors);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        ARaskrashivanieChisel solver = new ARaskrashivanieChisel();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastReader scan = new FastReader();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tTask solver = new Task();\n\t\tint t = 1;\n\t\twhile(t-->0) solver.solve(1, scan, out);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException{\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new PrintStream(System.out));\n        int n=Integer.parseInt(f.readLine());\n        StringTokenizer st=new StringTokenizer(f.readLine());\n        int[]arr=new int[n];\n        for(int i=0;i<n;i++){\n            arr[i]=Integer.parseInt(st.nextToken());\n        }\n        Arrays.sort(arr);\n        int ans=0;\n        boolean[]used=new boolean[n];\n        for(int i=0;i<n;i++){\n            if(!used[i]){\n                ans++;\n                for(int j=i+1;j<n;j++){\n                    if(!used[j] && arr[j]%arr[i]==0){\n                        used[j]=true;\n                    }\n                }\n                used[i]=true;\n            }\n        }\n        System.out.print(ans);\n        f.close();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        int n = in.nextInt();\n        int a[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n        }\n        Arrays.sort(a);\n        int answ = 0;\n        for (int i = 0; i < n; i++) {\n            if (a[i] != 0) {\n                for (int j = i + 1; j < n; j++) {\n                    if (a[j] % a[i] == 0) {\n                        a[j] = 0;\n                    }\n                }\n                answ++;\n                a[i]=0;\n            }\n        }\n        System.out.println(answ);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s=new Scanner(System.in);\n\t\tint n=s.nextInt();\n\t\tint[] a=new int[n];\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\ta[i]=s.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\tint count=0;\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tif(a[i]!=0) {\n\t\t\t\tint x=a[i];\n\t\t\t\tcount++;\n\t\t\t\tfor (int j = i; j < a.length; j++) {\n\t\t\t\t\tif(a[j]%x==0) {\n\t\t\t\t\t\ta[j]=0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        int[] colors = new int[101];\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(f.readLine());\n        int N = Integer.parseInt(st.nextToken());\n        st = new StringTokenizer(f.readLine());\n        for (int i = 0; i < N; i++) {\n            colors[Integer.parseInt(st.nextToken())]++;\n        }\n        int colorCount = 0;\n        for (int i = 1; i <= 100; i++) {\n            if (colors[i] != 0) {\n                colors[i] = 0;\n                for (int multiple = 2; multiple * i <= 100; multiple++) {\n                    colors[i*multiple] = 0;\n                }\n                colorCount++;\n            }\n        }\n        System.out.println(colorCount);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastReader in = new FastReader(System.in);\n//        FastReader in = new FastReader(new FileInputStream(\"input.txt\"));\n        PrintWriter out = new PrintWriter(System.out);\n//        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n\n\n        int n = in.nextInt();\n\n        int[] a = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n        }\n        Arrays.sort(a);\n\n        int ans = 1;\n        for (int i = 1; i < n; i++) {\n            boolean bb = false;\n            for (int j = i - 1; j >= 0; j--) {\n                if (a[i] % a[j] == 0) {\n                    bb = true;\n                    break;\n                }\n            }\n            if (!bb) ans++;\n        }\n\n        out.println(ans);\n\n\n\n\n\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        APaintTheNumbers solver = new APaintTheNumbers();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tnew A().run();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        OJ = System.getProperty(\"ONLINE_JUDGE\") != null;\n        A solution = new A(System.out);\n        if (OJ) {\n            reader = new BufferedReader(new InputStreamReader(System.in));\n            solution.run();\n        } else {\n            reader = new BufferedReader(new FileReader(new File(A.class.getName() + \".txt\")));\n            long timeout = System.currentTimeMillis();\n            while (solution.hasNext()) {\n                solution.run();\n                solution.println();\n                solution.println(\"----------------------------------\");\n            }\n            solution.println(\"time: \" + (System.currentTimeMillis() - timeout));\n        }\n        solution.close();\n        reader.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)\n\t\tint n = io.getInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i=0; i<n; i++)\n\t\t\ta[i] = io.getInt();\n\t\t\n\t\tArrays.sort(a);\n\t\tint[] color = new int[n];\n\t\tint num = 1;\n\t\tfor(int i=0; i<n; i++){\n\t\t\tif(color[i]==0){\n\t\t\t\tfor(int j=i+1; j<n; j++){\n\t\t\t\t\tif(a[j]%a[i]==0)\n\t\t\t\t\t\tcolor[j] = num;\n\t\t\t\t}\n\t\t\t\tnum++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tio.println(num-1);\n\n\t\t\n\t\t\n\t\t\n        io.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n        }\n        int min;\n        int count = 0;\n        int c = 0;\n        while (count != n) {\n            min = 1000;\n            for (int i = 0; i < n; i++) {\n                if (a[i] < min) {\n                    min = a[i];\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                if (a[i] != 1000 && a[i] % min == 0) {\n                    count++;\n                    a[i] = 1000;\n                }\n            }\n            c++;\n        }\n        System.out.println(c);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMyScanner sc = new MyScanner();\n\t\tint n = sc.nextInt();\n\t\tInteger[] a = new Integer[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\ta[i] = sc.nextInt();\n\t\tArrays.sort(a);\n\t\tboolean[] b = new boolean[n];\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tif(!b[i]) {\n\t\t\t\tans++;\n\t\t\t\tfor(int j = i + 1; j < n; j++)\n\t\t\t\t\tif(a[j] % a[i] == 0)\n\t\t\t\t\t\tb[j] = true;\n\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint []a = new int [n];\n\t\tboolean []used = new boolean[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < used.length; i++) {\n\t\t\tif (!used[i]){\n\t\t\t\tans++;\n\t\t\t  for (int j = i; j < used.length; j++) {\n\t\t\t\tif (a[j]%a[i] == 0){\n\t\t\t\t\tused[j] = true;\n\t\t\t\t}\n\t\t\t  }\n\t\t\t}\n\t\t}\n\t\tSystem.out.print(ans);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[])\n        Scanner ex=new Scanner(System.in);\n        int n=ex.nextInt();\n        int arr[]=new int[n];\n        for(int i=0;i<n;i++)\n        arr[i]=ex.nextInt();\n        Arrays.sort(arr);\n        int ans=0;\n        int check[]=new int[n];\n        for(int i=0;i<n;i++)\n        {\n            if(check[i]==0)\n            {\n                ans++;\n                for(int j=i;j<n;j++)\n                {\n                    if(arr[j]%arr[i]==0)\n                    check[j]=1;\n                }\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] arg) throws IOException {\n        new solveLOL().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] colors = new int[n];\n        for (int i = 0; i < n; i++) {\n            colors[i] = scanner.nextInt();\n        }\n        Arrays.sort(colors);\n        int amountOfColors = 0;\n        for (int i = 0; i < n; i++) {\n            if (colors[i] != 0){\n                amountOfColors++;\n                int color = colors[i];\n                for (int j = i; j < n; j++) {\n                    if (colors[j] % color == 0){\n                        colors[j] = 0;\n                    }\n                }\n            }\n        }\n        System.out.println(amountOfColors);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        Integer[] a = new Integer[n];\n        for (int i = 0; i < n; i++)\n            a[i] = sc.nextInt();\n        int ans = 0;\n        boolean[] taken = new boolean[n];\n        Arrays.sort(a);\n        for (int i = 0; i < n; i++) {\n            if (taken[i]) continue;\n            ans++;\n            for (int j = i; j < n; j++)\n                if (a[j] % a[i] == 0) taken[j] = true;\n        }\n        out.println(ans);\n        out.flush();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int b = sc.nextInt();\n        ArrayList<Integer> ar=new ArrayList<>();\n\n        for(int i=0;i<b;i++){\n            ar.add(sc.nextInt());\n        }\n\n        Collections.sort(ar);\n        int count=0;\n        int i=0;\n        while(ar.size()!=0)\n        {\n            int tmep=ar.get(i);\n            int v=ar.remove(i);\n            count++;\n            int j=0;\n            while(j<ar.size()){\n                if(ar.get(j)%tmep==0){\n                    int a=ar.remove(j);\n\n                }\n                else\n                    j++;\n            }\n\n        }\n        System.out.println(count);\n\n\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n        \n        int n = Integer.parseInt(br.readLine());\n        StringTokenizer tokenizer = new StringTokenizer(br.readLine());\n        boolean[] arr = new boolean[101];\n        int[] nums = new int[n+1];\n        int colors = 0;\n        for(int i = 1; i <= n; i++) {\n            nums[i] = Integer.parseInt(tokenizer.nextToken());\n            arr[nums[i]] = true;\n        }\n        Arrays.parallelSort(nums);\n        for(int i = 1; i <= n; i++) {\n            boolean newColor = false;\n            if(!arr[nums[i]]) {\n                continue;\n            }\n            for(int j = nums[i]; j <= 100; j += nums[i]) {\n                if(arr[j]) {\n                    arr[j] = false;\n                    newColor = true;\n                }\n            }\n            if(newColor) {\n                colors++;\n            }\n        }\n        \n        bw.write(String.valueOf(colors));\n        br.close();\n        bw.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew A().run();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        try (Input input = new StandardInput(); PrintWriter writer = new PrintWriter(System.out)) {\n            int n = input.nextInt();\n            int[] arr = input.readIntArray(n);\n\n            Arrays.sort(arr);\n            int ans =0;\n            boolean[] vis = new boolean[n];\n            for(int i=0;i<n;i++){\n                if(!vis[i]){\n                    vis[i]=true;\n                    for(int j=i+1;j<n;j++){\n                        if(!vis[j] && arr[j]%arr[i]==0){\n                            vis[j]=true;                    }\n                    }\n                    ans++;\n                }\n            }\n            System.out.println(ans);\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new Main().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 28).start();\n        else new Main().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        solve();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new CFA().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        // TODO code application logic here\n        FastIO in = new FastIO();\n        int n = in.ni();\n        int a[] = in.gia(n);\n        int freq[] = new int[100 + 1];\n        for (int i = 0; i < n; i++) {\n            freq[a[i]]++;\n        }\n        int k = 0;\n        for (int i = 1; i <= 100; i++) {\n            if (freq[i] > 0) {\n                for (int j = i; j <= 100; j += i) {\n                    freq[j] = 0;\n                }\n                k++;\n                // System.out.println(i);\n            }\n        }\n        System.out.println(k);\n        in.bw.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        //Scanner sc = new Scanner(System.in);\n        sb = new StringBuilder();\n        N = sc.nextInt();\n        A = new int[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = sc.nextInt();\n        }\n        Arrays.sort(A);\n        B = new boolean[N];\n        int count = 0;\n        for (int i = 0; i < A.length; i++) {\n            if(B[i]) {\n                continue;\n            }\n            else {\n                count++;\n                B[i] = true;\n            }\n            for (int j = i + 1; j < A.length; j++) {\n                if(A[j] % A[i] == 0) {\n                    B[j] = true;\n                }\n            }\n        }\n        sb.append(count);\n        System.out.println(sb);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args)throws IOException{\n\tbr = new BufferedReader(new InputStreamReader(System.in));\n\tPrintWriter out = new PrintWriter(System.out);\n\tint n = nextInt();\n\tint v[] = new int[n];\n\tint fv[] = new int[101];\n\tfor(int i = 0; i<n;i++){\n\t    v[i] = nextInt();\n\t}\n\tArrays.sort(v);\n\tfor(int i = 0; i<n;i++){\n\t    for(int j = i; j<n;j++){\n\t\tif(v[j]%v[i]==0){\n\t\t    v[j] = v[i];\n\t\t    fv[v[j]]++;\n\t\t}\n\t    }\n\t}\n\tint ans = 0;\n\tfor(int i = 0; i<101;i++){\n\t    if(fv[i]!=0){\n\t\tans++;\n\t    }\n\t}\n\tout.println(ans);\n\tout.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String args[]) throws IOException{\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tint n=Integer.parseInt(br.readLine());\n\t\tString s1=br.readLine();\n\t\tString[] s=s1.split(\" \");\n\t\tint a[] = new int[n];\n\t\tfor(int i = 0;i<n;i++)\n\t\t{\n\t\t\ta[i]=Integer.parseInt(s[i]);\n\t\t}\n\t\tArrays.sort(a);\n\t\tSystem.out.println(findColour(a,n));\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        int n = in.nextInt();\n        ArrayList<Integer> l = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            l.add(in.nextInt());\n        }\n\n        Collections.sort(l);\n\n\n        int k = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) == 0) continue;\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(j) == 0) continue;\n                if (l.get(j) % l.get(i) == 0) {\n                    l.set(j, 0);\n                }\n            }\n\n            l.set(i, 0);\n            k++;\n        }\n\n        System.out.println(k);\n    }\n", "complexity": "quadratic"}
{"code": "public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    Set<Integer> set = new HashSet<>();\n    for (int i = 0; i < n; i++) {\n        int a = sc.nextInt();\n\n        boolean flag = false; // true = не нужно добавлять\n        List<Integer> toRemove = new ArrayList<>();\n        for (int b : set) {\n            if (a % b == 0) {\n                flag = true;\n                break;\n            } else if (b % a == 0 && a < b) {\n                toRemove.add(b);\n            }\n        }\n        for (int r: toRemove) {\n            set.remove(r);\n        }\n        if (!flag) {\n            set.add(a);\n        }\n    }\n    System.out.println(set.size());\n}\n", "complexity": "quadratic"}
{"code": "", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tA a = new A();\n\t\ta.realMain();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);    \n        \n        int nums = sc.nextInt();\n        \n        HashSet<Integer> elements = new HashSet<Integer>();\n        for (int i = 0; i < nums; i++) {\n            elements.add(sc.nextInt());\n        }\n        \n        ArrayList<Integer> sortedElements = new ArrayList<Integer>(elements);\n\n        Collections.sort(sortedElements);\n        \n        ArrayList<Integer> lcms = new ArrayList<Integer>();\n        \n        outer:\n        for (int i = 0; i < sortedElements.size(); i++) {\n            int ele = sortedElements.get(i);\n            for (int j = 0; j < lcms.size(); j++) {\n                if (ele % lcms.get(j) == 0) {\n                    continue outer;\n                }\n            }\n            lcms.add(ele);\n        }\n        System.out.println(lcms.size());\n        sc.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastScanner sc = new FastScanner();\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tInteger[] arr = new Integer[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tarr[i]=sc.nextInt();\n\t\t}\n\t\tArrays.sort(arr);\n\t\tint ct = 0;\n\t\tboolean[] ar = new boolean[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif(!ar[i]) {\n\t\t\t\tar[i]=true;\n\t\t\t\tct++;\n\t\t\t\tint x = arr[i];\n\t\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\t\tif(arr[j]%x==0) {\n\t\t\t\t\t\tar[j]=true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpw.println(ct);\n\t\tpw.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMyScanner scan = new MyScanner();\n\t\tint n = scan.nextInt();\n\t\tint[] elements = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\telements[i] = scan.nextInt();\n\t\t\n\t\tint x = 0;\n\t\t\n\t\tArrays.sort(elements);\n\t\twhile(n > 0) {\n\t\t\tx++;\n\t\t\tint[] temp = new int[n];\n\t\t\tint j = 0;\n\t\t\tint size = n;\n\t\t\tint min = elements[0];\n\t\t\tn--;\n\t\t\tfor (int i = 1; i < size; i++) {\n\t\t\t\tif (elements[i]%min == 0) {\n\t\t\t\t\tn--;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttemp[j++] = elements[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\telements = temp;\n\t\t}\n\t\t\n\t\tout.println(x);\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException { \n    //    Scanner sc=new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        br = new BufferedReader(new InputStreamReader(System.in));\n        int n=nextInt();\n        int arr[]=new int[n];\n        for(int i=0;i<n;i++){\n            arr[i]=nextInt();\n        }\n        Arrays.sort(arr);\n        int c=0;\n        for(int i=0;i<n;i++){\n            if(arr[i]!=0){\n                int a=arr[i];\n                c++;\n                for(int j=i;j<n;j++){\n                  //  System.out.println(arr[i]+\" \"+arr[j]);\n                    if(arr[j]%a==0){\n                        arr[j]=0;\n                    }\n                }\n            }\n        }\n        pw.println(c);\n        pw.close();\n\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\t/**/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/a.in\"))));\n\t\t/**/\n\t\t\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = sc.nextInt();\n\t\tArrays.sort(a);\n\t\tint ans = 0;\n\t\tboolean[] v = new boolean[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (v[i])\n\t\t\t\tcontinue;\n\t\t\tv[i] = true;\n\t\t\tans++;\n\t\t\tfor (int j = i; j < n; j++) {\n\t\t\t\tif (a[j]%a[i]==0)\n\t\t\t\t\tv[j] = true;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = in.nextInt();\n        }\n        Arrays.sort(arr);\n        int cnt = 0;\n        int pos = 0;\n        while (true) {\n            while (pos < n && arr[pos] == -1) pos++;\n            if (pos == n) break;\n            int min = arr[pos];\n            arr[pos] = -1;\n            cnt++;\n            for (int i = pos + 1; i < n; i++) {\n                if (arr[i] % min == 0) {\n                    arr[i] = -1;\n                }\n            }\n        }\n        System.out.println(cnt);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main (String [] args){\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int [] arr = new int[n];\n        for(int i = 0; i < n; i++){\n            arr[i] = scanner.nextInt();\n        }\n        System.out.print(paint(arr));\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int[] a = new int[n];\n        for(int i=0;i<n;i++) a[i] = in.nextInt();\n        Arrays.sort(a);\n        int count = 0;\n        boolean[] c = new boolean[n];\n        for(int i=0;i<n;i++) {\n            if(c[i]==false) {\n                c[i]=true;\n                count++;\n                for(int j=i+1;j<n;j++) {\n                    if(a[j]%a[i]==0) {\n                        c[j] = true;\n                    }\n                }\n            }\n        }\n        System.out.println(count);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException \n       Scanner sc=new Scanner(System.in); \n       //int T=sc.nextInt();\n       int T=1;\n       while(T-- > 0){\n           int N=sc.nextInt();\n           int a[]=new int[N];\n           int count=0;\n           int ans=0;\n           boolean flag=false;\n\n           for(int i=0;i<N;++i){\n               a[i]=sc.nextInt();\n           }\n           Arrays.sort(a);\n           for(int i=0;i<N;++i){\n               if(a[i]==-1)\n                continue;\n            for(int j=i+1;j<N;++j){\n                if(a[j]%a[i]==0 && a[j]!=-1){\n                    a[j]=-1;;\n                }\n            }\n           }\n           //int i=0;\n           for(int i=0;i<N;++i){\n               if(a[i]!= -1)\n               count++;\n           }\n\n           System.out.println(count);\n        } // End of test cases loop \n\n        \n    }//end of main function\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) throws Exception {\n\t\tnew A().run();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner s=new Scanner(System.in);\n\t\t\n\t\tint n=s.nextInt();\n\t\t\n\t\tint[] arr=new int[n];\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tarr[i]=s.nextInt();\n\t\t}\n\t\t\n\t\tArrays.sort(arr);\n\t\t\n\t\tint[] visited=new int[n];\n\t\t\n\t\tint ans=0;\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(visited[i]==0)\n\t\t\t{\t\n\t\t\t\tans++;\n\t\t\t\t\n\t\t\t\tfor(int j=i+1;j<n;j++)\n\t\t\t\t{\n\t\t\t\t\tif(arr[j]%arr[i]==0&&visited[j]==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvisited[j]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(ans);\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        String input[] = br.readLine().split(\" \");\n        int c = 0;\n        Set<Integer> s = new HashSet<>();\n        int arr[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = Integer.parseInt(input[i]);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (!s.contains(arr[i])) {\n                c++;\n                for (int j = i; j < n; j++) {\n                    if (arr[j] % arr[i] == 0) {\n                        s.add(arr[j]);\n                    }\n                }\n            }\n        }\n        System.out.println(c);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tint n = scan.nextInt(), min[] = new int[n];\n\t\tboolean used[] = new boolean[n];\n\t\tHashSet<Integer> set = new HashSet<>();\n\t\t\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tmin[i] = scan.nextInt();\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\t\tif (min[i] > min[j]) {\n\t\t\t\t\t\tif (min[i] % min[j] == 0)\n\t\t\t\t\t\t\tmin[i] = min[j];\n\t\t\t\t\t}\n\t\t\t\t\telse if (min[j] % min[i] == 0)\n\t\t\t\t\t\t\tmin[j] = min[i];\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tset.add(min[i]);\n\t\t}\n\t\t\n\t\tSystem.out.print(set.size());\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(System.out);\n        int n = nextInt();\n        int a[] = new int [n];\n        for(int i = 0;i < n;i++) a[i] = nextInt();\n        int ans = 0;\n        boolean b[] = new boolean[n];\n        Arrays.sort(a);\n\n        for(int i = 0;i < n;i++) {\n            if (!b[i]) {\n                for(int j = i;j < n;j++) {\n                    if (a[j] % a[i] == 0) b[j] = true;\n                }\n                ans++;\n            }\n        }\n        pw.println(ans);\n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        int n = Integer.parseInt(bf.readLine());\n        StringTokenizer st = new StringTokenizer(bf.readLine());\n        int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n\n        int counter = 0;\n        TreeSet<Integer> val = new TreeSet<Integer>();\n        for(int i : a) val.add(i);\n        while(!val.isEmpty()) {\n          int min = val.first();\n          Set<Integer> toRemove = new HashSet<Integer>();\n          for(int i : val) if(i % min == 0) toRemove.add(i);\n          for(int i : toRemove) val.remove(i);\n          counter++;\n        }\n        out.println(counter);\n        // int n = Integer.parseInt(st.nextToken());\n\n        out.close(); System.exit(0);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int arr[] = new int[n];\n        int c[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n        Arrays.sort(arr);\n        int count = 1;\n        c[0] = 1;\n        for (int i = 1; i < arr.length; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] % arr[j] == 0) {\n                    c[i] = c[j];\n                    break;\n                }\n            }\n            if (c[i] == 0) {\n                c[i] = count + 1;\n                count++;\n            }\n        }\n        System.out.println(count);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        inputClass in = new inputClass(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        APaintTheNumbers solver = new APaintTheNumbers();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\tFastReader in=new FastReader();\n\tHashMap<Integer,Integer>map=new HashMap<Integer,Integer>();\n\tArrayList<Integer>list=new ArrayList<Integer>();\n\tTreeSet<Integer>set=new TreeSet<Integer>();\n\n\tint n=in.nextInt();\n\tfor(int i=0;i<n;i++)\n\t\tset.add(in.nextInt());\n\t\n\tint ans=0;\n\t\n\twhile(!set.isEmpty())\n\t{\n\t\tint f=set.first();\n\t\tint s=f;\n\t\twhile(!set.isEmpty()&&s<=set.last())\n\t\t{\n\t\t\tif(set.contains(s))\n\t\t\tset.remove(new Integer(s));\n\t\t\ts+=f;\n\t\t}\n\t\tans++;\n\t\t\n\t}\n\tout.println(ans);\n\t\n\tout.close();\n\t\n\t\n\t\t\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] tab = new int[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ttab[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\tif(i!=j)\n\t\t\t\tif(tab[i]>=tab[j] && tab[i]%tab[j]==0) {\n\t\t\t\t\ttab[i] = max;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif(tab[i]!=max) res++;\n\t\t}\n\t\tSystem.out.println(res);\n\t\t//System.out.println(4%-1);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Reader r = new Reader();\n        //PrintWriter writer=new PrintWriter(System.out);\n        //Scanner r = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        //Scanner r=new Scanner(System.in);\n        OutputWriter770 out77 = new OutputWriter770(System.out);\n\n        int num1=r.nextInt();\n        int[] arr1=r.nextArray(num1);\n        Arrays.sort(arr1);\n\n        int res1=0;\n        for(int i=0;i<num1;i++)\n        {\n            if(arr1[i]!=-1)\n            {\n                res1++;\n                int num2=arr1[i];\n                arr1[i]=-1;\n                for(int j=i+1;j<num1;j++)\n                {\n                    if(arr1[j]%num2==0)\n                    {\n                        arr1[j]=-1;\n                    }\n                }\n            }\n        }\n        out77.print(res1+\"\");\n        r.close();\n        out77.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        StringBuilder sb = new StringBuilder();\n        int N = sc.nextInt();\n        int[] nums = sc.readIntArray(N);\n        ArrayList<Integer> num = new ArrayList<>();\n\n        for (int i = 0; i < N; i++) {\n            num.add(nums[i]);\n        }\n\n\n        int count = 0;\n        while (!num.isEmpty()) {\n            count++;\n            int size = num.size();\n            int min = 200;\n            for (int j = size-1; j >=0; j--) {\n                if (num.get(j) < min) {\n                    min = num.get(j);\n                }\n            }\n            for (int j = size-1; j >=0; j--) {\n                int div = num.get(j) / min;\n                if ((div * min) == num.get(j)) {\n                    num.remove(j);\n                }\n            }\n        }\n        sb.append(count);\n\n        System.out.print(sb);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint color = 0;\n\t\tArrays.sort(arr);\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tif(arr[i]!=0) {\n\t\t\t\tint col = arr[i];\n\t\t\t\tcolor++;\n\t\t\t\tfor(int j=i; j<n; j++) {\n\t\t\t\t\tif(arr[j]%col==0) arr[j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(color);\n\t\tsc.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ScanReader in = new ScanReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        APaintTheNumbers solver = new APaintTheNumbers();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\t\t\t\t\t    public static void main(String[] args) throws Exception{\n\t\t\t\t\t        if(memory)new Thread(null, new Runnable() {public void run(){try{new oK().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 28).start();\n\t\t\t\t\t        else new oK().run();\n\t\t\t\t\t    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) throws Exception {\n        pr = new PrintWriter(System.out);\n        scan = new Scanner(System.in);\n        br = new BufferedReader(new InputStreamReader(System.in));\n        int n = inputInt();\n        //char[] c = br.readLine().toCharArray();\n        int[] a = new int[n];\n        int[] b = new int[n];\n        st = new StringTokenizer(br.readLine());\n        for(int i=0;i<n;i++){\n\n            a[i]=Integer.parseInt(st.nextToken());\n            //b[i]=Integer.parseInt(st.nextToken());\n        }\n        Arrays.sort(a);\n        int ans=0;\n        for(int i=0;i<n;i++){\n            if(b[i]!=1){\n                ans++;\n                for(int j=i;j<n;j++){\n                    if(a[j]%a[i]==0){\n                        b[j]=1;\n                    }\n                }\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int n=sc.nextInt();\n        int arr[]=new int[n];\n        for (int i=0;i<n;i++){\n            arr[i]=sc.nextInt();\n        }\n        boolean vis[]=new boolean[n];\n        int c=0;\n        for (int i=0;i<n;i++){\n            int min=200;\n            for (int j=0;j<n;j++){\n                if (!vis[j] && min>arr[j]){\n                    min=arr[j];\n                }\n            }\n            for (int j=0;j<n;j++){\n                if (!vis[j]&&arr[j]%min==0){\n                    vis[j]=true;\n//                    System.out.println(arr[j]);\n                }\n            }\n            if (min!=200){\n                c++;\n//                System.out.println(min+\" k\");\n            }else break;\n        }\n        System.out.println(c);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main (String [] args) throws Exception {(new D()).main();}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException\n        new A().go();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException\n        Reader in = new Reader();\n//        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int n = in.nextInt();\n        boolean[] A = new boolean[n];\n        int count = 0;\n        int[] B = new int[n];\n        for (int i=0;i<n;i++)\n            B[i] = in.nextInt();\n        Arrays.sort(B);\n        for (int i=0;i<n;i++)\n        {\n            if (!A[i])\n            {\n                int gcd = B[i];\n                for (int j=0;j<n;j++)\n                {\n                    if(!A[j])\n                    {\n                        gcd = gcd(B[j], gcd);\n                        if(gcd == B[i])\n                        {\n                            A[j] = true;\n                        }\n                        else\n                        {\n                            gcd = B[i];\n                        }\n                    }\n                }\n                count++;\n                A[i] = true;\n            }\n        }\n        System.out.println(count);\n    }\n", "complexity": "quadratic"}
{"code": "public static void main(String[] args){\nScanner sc = new Scanner(System.in);\nint n=sc.nextInt();\nint[] arr = new int[n];\nfor(int i=0;i<n;i++)\narr[i]=sc.nextInt();\nArrays.sort(arr);\nSet<Integer> set = new TreeSet<Integer>();\nfor(int i=0;i<n;i++){\nboolean flag=false;\nfor(Integer x:set){\nif(arr[i]%x==0){\nflag=true;\nbreak;\n}\n}\nif(!flag)\nset.add(arr[i]);\n}\nSystem.out.println(set.size());\n}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main (String [] args) throws IOException {\n\t    BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n\t    PrintWriter out = new PrintWriter(System.out, true);\n\t    int numSeq = Integer.parseInt(f.readLine());\n\t    sequence = new PriorityQueue<Integer>();\n\t    \n\t    StringTokenizer st = new StringTokenizer(f.readLine());\n\t    for(int i = 0; i < numSeq; i++) {\n\t    \tsequence.add(Integer.parseInt(st.nextToken()));\n\t    }\n\t    \n\t    int numColors = 0;\n\t    while(sequence.size() > 0) {\n\t    \tnumColors++;\n\t    \tint smallest = sequence.poll();\n\t    \tPriorityQueue<Integer> temp = new PriorityQueue<Integer>();\n\t    \tfor(int each: sequence) {\n\t    \t\tif(each % smallest != 0) {\n\t    \t\t\ttemp.add(each);\n\t    \t\t}\n\t    \t}\n\t    \tsequence = temp;\n\t    }\n\t    \n\t    System.out.println(numColors);\n\t    out.close();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Reader.init(System.in);\n        int n = Reader.nextInt();\n        int[] arr = new int[n];\n        int[] mark = new int[n];\n        for (int i = 0 ; i < n  ; i++){\n            arr[i] = Reader.nextInt();\n        }\n        Arrays.sort(arr);\n        int[] v = new int[n];\n        int ans = 0;\n        for (int i = 0 ; i < n ; i++){\n            if (v[i]==0){\n                for (int j = i ; j < n ; j++){\n                    if (arr[j]%arr[i]==0){\n                        v[j] = arr[i];\n                    }\n                }\n            }\n        }\n        TreeSet<Integer> s = new TreeSet<>();\n        for (int i = 0 ; i < n ;i++){\n            s.add(v[i]);\n        }\n        System.out.println(s.size());\n\n\n\n\n\n        \n    }\n", "complexity": "quadratic"}
{"code": "    public static void main (String srgs[] ){\n        \n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeSet<Integer> ts=new TreeSet<>();\n        for(int i=0;i<n;++i){\n            ts.add(sc.nextInt());\n        }\n        int x=0;\n        int a[]=new int[ts.size()];\n        for(int y:ts){\n            a[x++]=y;\n        }\n        for(int i=0;i<ts.size()-1;++i){\n            for(int j=i+1;j<ts.size();++j){\n                if((a[i]!=-1)&&(a[j]!=-1)&&(a[j]%a[i]==0)){\n                    a[j]=-1;\n                }\n            }\n        }\n        int c=0;\n        for(int z:a){\n            if(z!=-1)++c;\n        }\n        System.out.print(c);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tBufferedReader  jk =  new BufferedReader(new InputStreamReader( System.in))  ; \n\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out)) ; \n\t\tStringTokenizer ana = new StringTokenizer(jk.readLine()) ;\n\t\tint n = Integer.parseInt(ana.nextToken()) ; \n\t\t\n\t\tint t[]= new int[101] ; \n\t\tArrayList<Integer> v = new ArrayList<>() ; \n\t\tana = new StringTokenizer(jk.readLine()) ;\n\t\tfor(int i=0 ; i<n ;i++)\n\t\t{\n\t\t\t\n\t\t\tint y = Integer.parseInt(ana.nextToken()) ;\n\t\t\tt[y]=1 ; \n\t\t\tv.add(y) ; \n\t\t}\n\t\tCollections.sort(v);\n\t\tint c= 0; \n\t\tfor(int ele : v)\n\t\t{\n\t\t\tif(t[ele]==1)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tfor(int i=ele ; i<=100 ; i+=ele)\n\t\t\t\t{\n\t\t\t\t\tt[i]=2 ; \n\t\t\t\t}\n\t\t\t\tc++ ; \n\t\t\t}\n\t\t\n\t\t}\n\t\tout.println(c);\n\t\t\n \n \n \n \n \n \n \n \n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tir = new InputReader(System.in);\n\t\tout = new PrintWriter(System.out);\n\t\tsolve();\n\t\tout.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter out = new PrintWriter(System.out);\n        //Scanner sc = new Scanner();\n        Reader in = new Reader();\n        Main solver = new Main();\n        solver.solve(out, in);\n        out.flush();\n        out.close();\n \n    }\n", "complexity": "quadratic"}
{"code": "", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader sc = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(1, sc, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tMScanner sc=new MScanner(System.in);\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\tint n=sc.nextInt();HashSet<Integer>nums=new HashSet<Integer>();\n\t\tint[]in=new int[n];for(int i=0;i<n;i++)in[i]=sc.nextInt();\n\t\tArrays.sort(in);\n\t\tint ans=0;\n\t\tboolean vis[]=new boolean[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif(vis[i])continue;\n\t\t\tfor(int j=i+1;j<n;j++) {\n\t\t\t\tif(in[j]%in[i]==0) {\n\t\t\t\t\tvis[j]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans++;\n\t\t}\n\t\tpw.println(ans);\n\t\t\n\t\tpw.flush();\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    StringBuilder sb = new StringBuilder();\n\n    int n = Integer.parseInt(br.readLine());\n    String[] s = br.readLine().split(\" \");\n    int[] arr = new int[n];\n    for (int i=0; i<n; i++) {\n      arr[i] = Integer.parseInt(s[i]);\n    }\n    Arrays.sort(arr);\n    boolean[] vis = new boolean[n];\n    int nColours = 0;\n    int nVis = 0;\n    int index = 0;\n    while (nVis<n) {\n      while (index<n && nVis<n) {\n        if (vis[index]) {\n          index++;\n          continue;\n        }\n        int val = arr[index];\n        nColours++;\n        while (index<n && nVis<n) {\n          if (vis[index]) {\n            index++;\n            continue;\n          }\n          if (arr[index]%val==0) {\n            vis[index] = true;\n            nVis++;\n          }\n          index++;\n        }\n        index = 0;\n      }\n    }\n    System.out.println(nColours);\n\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner  scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int[] nums = new int[n];\n        for(int i = 0; i < n; i++){\n            nums[i] = scan.nextInt();\n        }\n        Arrays.sort(nums);\n        boolean[] div = new boolean[n];\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if (!div[i]) {\n\n                count++;\n                div[i] = true;\n                for(int j = i+1; j < n; j++) {\n                    if (nums[j] % nums[i] == 0) {\n                        div[j] = true;\n                    }\n                }\n            }\n        }\n        System.out.println(count);\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        try (FastReader in = new FastReader();\n             FastWriter out = new FastWriter()) {\n            int t, i, j, n, k, l, r, m, c, p, q, ti, tidx;\n            long x, y, z;\n\n            //for (t = in.nextInt(), tidx = 1; tidx <= t; tidx++)\n            {\n                //out.print(String.format(\"Case #%d: \", tidx));\n                n=in.nextInt();\n                int a[]=new int[101];\n                for (i=0;i<n;i++){\n                    a[in.nextInt()]++;\n                }\n                m=0;\n                for(i=1;i<101;i++){\n                    if(a[i]>0){\n                        m++;\n                        for(j=i;j<=100;j+=i){\n                            a[j]=0;\n                        }\n                    }\n                }\n                out.println(m);\n            }\n            out.commit();\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        APaintTheNumbers solver = new APaintTheNumbers();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n\n        int t = scan.nextInt();\n\n        ArrayList<Integer> arr = new ArrayList<>();\n\n        for(int i = 0; i < t; i++){\n            arr.add( scan.nextInt());\n        }\n\n        int count = 0;\n\n        while (arr.size() != 0){\n\n            int min = Integer.MAX_VALUE;\n\n            for(int i = 0; i < arr.size(); i++){\n                int temp = arr.get(i);\n                if( temp < min){\n                    min = temp;\n                }\n            }\n\n\n            for(int i = 0; i < arr.size(); i++){\n                int temp = arr.get(i);\n                if( temp % min == 0){\n                    arr.remove(i);\n                    i--;\n                }\n            }\n\n            count++;\n        }\n\n        System.out.println(count);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tint n = sc.nextInt();\n\t\t\n\t\tint a[]=new int[n];\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=sc.nextInt();\n\t\t\n\t\tArrays.sort(a);\n\t\tint c=0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif(a[i]<0) continue;\n\t\t\tc=c-1;\n\t\t\tfor(int j=i+1;j<n;j++) {\n\t\t\t\tif(a[j]<0) continue;\n\t\t\t\tif(a[j]%a[i]==0) {\n\t\t\t\t\t//System.out.println(a[i]+\" : \"+a[j]);\n\t\t\t\t\ta[j]=c;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//System.out.println(c);\n\t\t}\n\t\tSystem.out.println(Math.abs(c));\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int count = sc.nextInt();\n        HashSet<Integer> set = new HashSet<>();\n\n        for (int i = 0; i < count; i++) {\n            set.add(sc.nextInt());\n        }\n\n        ArrayList<Integer> list = new ArrayList<>(set);\n\n        Collections.sort(list);\n\n        for (int i = 0; i < list.size(); i++) {\n            for (int j = i + 1; j < list.size(); j++) {\n\n                if (list.get(i) % list.get(j) == 0 ||\n                        list.get(j) % list.get(i) == 0) {\n                    list.remove(j);\n                    j--;\n                }\n            }\n        }\n\n        System.out.println(list.size());\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args){\n        Scanner scan=new Scanner(System.in);\n        int n=0;\n        if(scan.hasNext())\n            n=scan.nextInt();\n        TreeSet<Integer> set=new TreeSet<>();\n        for(int i=0;i<n;i++){\n            if(scan.hasNext())\n                set.add(scan.nextInt());\n        }\n        int[] arr=new int[set.size()];\n        Iterator<Integer> it=set.iterator();\n        int j=0;\n        while(it.hasNext()){\n            arr[j++]=it.next();\n        }\n        int tot=1,flag;\n        for(int i=1;i<arr.length;i++){\n            flag=0;\n            for(int k=0;k<i;k++){\n                if(arr[i]%arr[k]==0){\n                    flag=1;\n                    break;\n                }\n            }\n            if(flag==0){\n                tot++;\n            }\n        }\n        System.out.println(tot);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner scn = new Scanner(System.in);\n        int n = scn.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) a[i] = scn.nextInt();\n        scn.close();\n\n        Arrays.sort(a);\n\n        ArrayList<Integer> cyka = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (a[j] % a[i] == 0) {\n                    boolean add = true;\n                    for (int k : cyka) {\n                        if (a[i] % k == 0) {\n                            add = false;\n                            break;\n                        }\n                    }\n                    if (add) {\n                        cyka.add(a[i]);\n                    }\n                }\n            }\n        }\n\n        System.out.println(cyka.size());\n\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        boolean local = System.getProperty(\"ONLINE_JUDGE\") == null;\n        boolean async = true;\n\n        Charset charset = Charset.forName(\"ascii\");\n\n        FastIO io = local ? new FastIO(new FileInputStream(\"D:\\\\DATABASE\\\\TESTCASE\\\\Code.in\"), System.out, charset) : new FastIO(System.in, System.out, charset);\n        Task task = new Task(io, new Debug(local));\n\n        if (async) {\n            Thread t = new Thread(null, task, \"dalt\", 1 << 27);\n            t.setPriority(Thread.MAX_PRIORITY);\n            t.start();\n            t.join();\n        } else {\n            task.run();\n        }\n\n        if (local) {\n            io.cache.append(\"\\n\\n--memory -- \\n\" + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) >> 20) + \"M\");\n        }\n\n        io.flush();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(reader.readLine());\n        String str[] = reader.readLine().split(\" \");\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = Integer.parseInt(str[i]);\n        }\n        Arrays.sort(a);\n        int k = 0;\n        for (int i = 0; i < n; i++) {\n            if (a[i] == 0){\n                continue;\n            }\n            for (int j = i + 1; j < n; j++) {\n                if (a[j] % a[i] == 0){\n                    a[j] = 0;\n                }\n            }\n            k++;\n        }\n        System.out.println(k);\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tArrayList<Integer> paint = new ArrayList<Integer>();\n\t\tint num = scan.nextInt();\n\t\tfor(int i = 0; i < num;i++)\n\t\t\tpaint.add(scan.nextInt());\n\t\tCollections.sort(paint);\n\t\tint counter = 0;\n\t\t//System.out.println(paint);\n\t\twhile(paint.size()!=0) {\n\t\t\tnum = paint.remove(0);\n\t\t\tfor(int i = 0; i<paint.size();i++) {\n\t\t\t\tif(paint.get(i)%num==0) {\n\t\t\t\t\tpaint.remove(i--);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\tSystem.out.println(counter);\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner in=new Scanner(System.in);\n\t\t\n\t\tint n=in.nextInt();\n\t\t\n\t\tint a[]=new int[n];\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i]=in.nextInt();\n\t\t\n\t\tArrays.sort(a);\n\t\t\n\t\tfor(int i=0;i<n-1;i++) {\n\t\t\t\n\t\t\tif(a[i]!=-1) {\n\t\t\t\tfor(int j=i+1;j<n;j++) {\n\t\t\t\t\t\n\t\t\t\t\tif(a[j]%a[i]==0)\n\t\t\t\t\t\ta[j]=-1;\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\t\n\t\tint count=0;\n\t\t\n\t\tfor(int i=0;i<n;i++) {\n\t\t\t\n\t\t\tif(a[i]!=-1)\n\t\t\t\tcount++;\n\t\t}\n\t\t\n\t\tSystem.out.println(count);\n\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[])throws IOException{\n    \tint i,j;\n        br = new BufferedReader(new InputStreamReader(System.in));\n        int n=nextInt();\n        int a[]=new int[n];\n        for(i=0;i<n;i++)\n            a[i]=nextInt();\n        Arrays.sort(a);\n        int l=0;\n        for(i=0;i<n;i++){\n            if(a[i]!=-1){\n                int p=a[i];\n                for(j=i;j<n;j++){\n                    if(a[j]%p==0)\n                        a[j]=-1;\n                }\n                l++;\n            }\n        }\n        pw.println(l);\n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        scanner = new FastScanner();\n        int n = scanner.nextInt();\n        int[] a = scanner.nextIntArray(n);\n        int[] colors = new int[n];\n        ADUtils.sort(a);\n        int color = 0;\n        for (int i = 0; i < n; i++) {\n            if (colors[i] != 0) continue;\n            color++;\n            for (int j = i; j < n; j++) {\n                if (a[j] % a[i] == 0) colors[j] = color;\n            }\n        }\n        System.out.println(color);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        APaintTheNumbers solver = new APaintTheNumbers();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main (String[] args) throws Exception {\n        String st[]=nl();\n        int n=pi(st[0]);\n        int input[]=new int[n];\n        st=nl();\n        for(int i=0;i<n;i++){\n            input[i]=pi(st[i]);\n        }\n        int ans=0;\n        Arrays.sort(input);\n        boolean dp[]=new boolean[n];\n        for(int i=0;i<n;i++){\n            if(!dp[i]){\n                ans++;\n                for(int j=input[i];j<=200;j+=input[i]){\n                    for(int k=i;k<n;k++){\n                        if(input[k]==j&&!dp[k])dp[k]=true;\n                    }\n                }\n            }\n        }\n        out.println(ans);\n/****************************************Solutions Ends**************************************************/\n        out.flush();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "   public static void main(String args[]) {\n    \t\t\n    \tScanner inp = new Scanner(System.in);\n    \tPrintWriter out= new PrintWriter(System.out);\n    \t\n    \tint n=inp.nextInt();\n    \tint a[]=new int[n];\n    \tfor(int i=0;i<n;i++)\n    \t\ta[i]=inp.nextInt();\n    \tArrays.sort(a);\n    \tint gg=0;\n    \tfor(int i=0;i<n;i++) {\n    \t\tif(a[i]==0)\n    \t\t\tcontinue;\n    \t\tgg++;\n    \t\tfor(int j=i+1;j<n;j++) {\n    \t\t\tif(a[j]%a[i]==0) {\n    \t\t\t\ta[j]=0;\n    \t\t\t}\n    \t\t}\n    \t}\n    \tout.println(gg);\n    \tout.close();\n    \tinp.close();\n    \t\t\t\t\n    }\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    OutputWriter out = new OutputWriter(outputStream);\n    TaskA solver = new TaskA();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "quadratic"}
{"code": "        public static void main(String[] args) throws Exception {\n                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n                StringTokenizer st;\n\n                int n = Integer.parseInt(br.readLine());\n                st = new StringTokenizer(br.readLine());\n                int a[] = new int[n];\n                for(int i=0 ; i<n ; i++) {\n                        a[i] = Integer.parseInt(st.nextToken());\n                }\n\n                Arrays.sort(a);\n\n                boolean vis[] = new boolean[n];\n                int count = 0;\n                for(int i=0 ; i<n ; i++) {\n                        if(!vis[i]) {\n                                for(int j=i ; j<n ; j++) {\n                                        if(!vis[j]) {\n                                                if(a[j]%a[i] == 0) {\n                                                        vis[j] = true;\n                                                }\n                                        }\n                                }\n                                count++;\n                        }\n                }\n\n                System.out.println(count);\n        }\n        public static void main(String[] args) throws Exception {\n                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n                StringTokenizer st;\n        }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = sc.nextInt();\n        }\n        Arrays.sort(a);\n\n        Set<Integer> div = new HashSet<>();\n        boolean[] d = new boolean[n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0 ; j < n; j++) {\n                if (d[j]) {\n                    continue;\n                }\n                if (a[j]%a[i] == 0) {\n                    d[j] = true;\n                    div.add(a[i]);\n                }\n            }\n        }\n\n        System.out.println(div.size());\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = in.nextInt();\n        int a[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = in.nextInt();\n        }\n        Arrays.sort(a);\n        int vis[] = new int[n];\n        Arrays.fill(vis, -1);\n        int c = 0;\n        for (int i = 0; i < n; i++) {\n            if (vis[i] != -1) continue;\n            c++;\n            for (int j = i; j < n; j++) {\n                if (vis[j] == -1 && a[j] % a[i] == 0) {\n                    vis[j] = c;\n                }\n            }\n        }\n        \n        pw.println(c);\n\n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[]) {\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        IntStream.range(0, 1).forEach(tc -> {\n            new Solver(tc, in, out).solve();\n            out.flush();\n        });\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner fs=new FastScanner(System.in);\n\t\tint j = fs.nextInt();\n\t\tArrayList<Integer> a =new ArrayList<Integer>();\n\t\tfor(int i=0;i<j;i++) {\n\t\t\ta.add(fs.nextInt());\n\t\t}\n\t\tCollections.sort(a);\n\t\tCollections.reverse(a);\n\t\tint c=0;\n\t\twhile(a.size()!=0) {\n\t\t\tint f=a.get(a.size()-1);\n\t\t\tc+=1;\n\t\t\tfor(int q=a.size()-1;q>-1;q--)\n\t\t\tif(a.get(q)%f==0) {\n\t\t\t\ta.remove(q);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(c);\n\t\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner sc = new FastScanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        \n        int n = sc.nextInt();\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n        \tlist.add(sc.nextInt());\n        }\n        int count = 0;\n        while (list.size() > 0) {\n        \tcount++;\n        \tint temp = list.get(minIndex(list));\n//        \tpw.println(\"min = \" + temp);\n        \tfor (int j = 0; j < list.size(); j++) {\n        \t\tif (list.get(j) % temp == 0) {\n//        \t\t\tpw.println(\"j = \" + list.get(j));\n//        \t\t\tpw.println(\"min = \" + temp);\n        \t\t\tlist.remove(j);\n        \t\t\tj--;\n        \t\t}\n        \t}\n//        \tfor (int i = 0; i < list.size(); i++) {\n//        \t\tpw.println(list.get(i) + \" \");\n//        \t}\n        }\n        pw.println(count);\n        \n        pw.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new A().run(); }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "quadratic"}
{"code": "        public static void main(String[] args) {\n            Scanner s = new Scanner(System.in);\n            int n=s.nextInt();\n            int a[]=new int[n];\n            for(int i=0;i<n;i++)\n            a[i]=s.nextInt();\n            Arrays.sort(a);\n            ArrayList<Integer>al=new ArrayList();\n            int k=a[0];\n            int count=0;\n            for(int j=0;j<n;j++)\n            {k=a[j];\n                if(Collections.frequency(al,a[j])==0)\n                {for(int i=0;i<n;i++)\n            {if(a[i]%k==0)\n            {al.add(a[i]);}}\n            count++;}}\n            System.out.println(count);}}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out, false);\n        int n = scanner.nextInt();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = scanner.nextInt();\n        }\n        \n        Arrays.sort(arr);\n        int[] cols = new int[n];\n        Arrays.fill(cols, -1);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if (cols[i] == -1) {\n                cols[i] = ans++;\n                for(int j = i + 1; j < n; j++) {\n                    if (arr[j] % arr[i] == 0) cols[j] = cols[i];\n                }\n            }\n        }\n        out.println(ans);\n        out.flush();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint a []=new int[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ta[i]=sc.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n//\t\tSystem.out.println(Arrays.toString(a));\n\t\tint k=a.length;\n\t\tfor(int i=a.length-1;i>=0;i--) {\n\t\t\tint A=a[i];\n\t\t\tfor (int j=0;j<i;j++) {\n\t\t\t\tif(A%a[j]==0) {\n\t\t\t\t\tk--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(k);\n\t\tsc.close();\n\t}\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n \n\t\tint n = in.nextInt();\n\t\tint[] a = in.nextIntArray(n);\n\t\tArrays.sort(a);\n\t\tboolean[] color = new boolean[n];\n\t\tint cnt = 0;\n\t\tfor(int i = 0; i < n; ++i) {\n\t\t\tif(!color[i]) {\n\t\t\t\tcnt++;\n\t\t\t\tfor(int j = i; j < n; j++) {\n\t\t\t\t\tif(a[j] % a[i] == 0)\n\t\t\t\t\t\tcolor[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(cnt);\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "quadratic"}
{"code": "  public static void main(String[] args) {\n    try (Scanner scanner = new Scanner(System.in)) {\n      int n = scanner.nextInt();\n      scanner.nextLine();\n      List<Integer> integers = Arrays.stream(scanner.nextLine().split(\" \")).map(Integer::parseInt).collect(Collectors.toList());\n      System.out.println(countColors(integers));\n    }\n  }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        LightScanner in = new LightScanner(inputStream);\n        LightWriter out = new LightWriter(outputStream);\n        APaintTheNumbers solver = new APaintTheNumbers();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException \n\t\tReader s=new Reader(); \n\t\tint n = s.nextInt(), i, j, ans=0;\n\t\tint[] a = new int[101];\n\t\tfor(i=0;i<n;i++){\n\t\t\ta[s.nextInt()]++;\n\t\t}\n\t\tfor(i=1;i<=100;i++){\n\t\t\tif(a[i]>0){\n\t\t\t\tans++;\n\t\t\t\tfor(j=i;j<=100;j++){\n\t\t\t\t\tif(j%i==0){\n\t\t\t\t\t\ta[j]=0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t} \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().solve();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        n = Integer.parseInt(st.nextToken());\n        int k = Integer.parseInt(st.nextToken());\n        int[] heat = new int[n];\n        st = new StringTokenizer(br.readLine());\n        for(int i = 0; i < n; i++){\n            heat[i] = Integer.parseInt(st.nextToken());\n        }\n        max = 0;\n        pre = new int[n + 1];\n        pre[0] = 0;\n        for(int i = 0; i < n; i++){\n            pre[i + 1] = pre[i] + heat[i];\n        }\n        for(int i = k; i <= n; i++){\n            findIntensity(i);\n        }\n        System.out.println(max);\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        \n        int query = in.nextInt();\n        \n        while (query -- > 0) {\n            int n = in.nextInt();\n            int k = in.nextInt();\n            \n            char[] arr = new char[n];\n            //slot all n into char array\n            String code = in.next();\n            for (int i = 0; i < n; i++) {\n                arr[i] = code.charAt(i);\n                \n            }\n            \n            //R, G, B cycle\n            int r = 0;\n            int g = 0;\n            int b = 0;\n            \n            for (int i = 0; i < k; i++) {\n                if (i % 3 == 0) {\n                    if (arr[i] == 'R') {g++; b++;}\n                    else if (arr[i] == 'G') {r++; b++;}\n                    else {r++; g++;} //if is 'B'\n                } else if (i % 3 == 1) {\n                    if (arr[i] == 'G') {g++; b++;}\n                    else if (arr[i] == 'B') {r++; b++;}\n                    else {r++; g++;} //if is 'R'\n                } else { //if mod 3 is 2\n                    if (arr[i] == 'B') {g++; b++;}\n                    else if (arr[i] == 'R') {r++; b++;}\n                    else {r++; g++;} //if is 'G'     \n                }\n            }\n            \n            //starting from kth position, if different then add 1, and check (j-k)th position\n            int rMin = r;\n            int gMin = g;\n            int bMin = b;\n            for (int j = k; j < n; j++) {\n                //R cycle\n                if ((j % 3 == 0 && arr[j] != 'R') ||  \n                    (j % 3 == 1 && arr[j] != 'G') ||\n                    (j % 3 == 2 && arr[j] != 'B')) {\n                    r++;\n                }\n                //R cycle \n                if (((j - k) % 3 == 0 && arr[j - k] != 'R') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'G') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'B')) {\n                    r--;\n                }\n                rMin = Math.min(r, rMin);\n                //G cycle\n                if ((j % 3 == 0 && arr[j] != 'G') ||  \n                    (j % 3 == 1 && arr[j] != 'B') ||\n                    (j % 3 == 2 && arr[j] != 'R')) {\n                    g++;\n                } \n                if (((j - k) % 3 == 0 && arr[j - k] != 'G') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'B') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'R')) {\n                    g--;\n                }      \n                gMin = Math.min(gMin, g);\n                //B cycle\n                if ((j % 3 == 0 && arr[j] != 'B') ||  \n                    (j % 3 == 1 && arr[j] != 'R') ||\n                    (j % 3 == 2 && arr[j] != 'G')) {\n                    b++;\n                }       \n                if (((j - k) % 3 == 0 && arr[j - k] != 'B') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'R') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'G')) {\n                    b--;\n                } \n                bMin = Math.min(bMin, b);\n                \n            }\n            \n            System.out.println(Math.min(Math.min(rMin, gMin), bMin));\n            \n        }\n        \n    } \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));\n        \n        int query = in.nextInt();\n        \n        while (query -- > 0) {\n            int n = in.nextInt();\n            int k = in.nextInt();\n            \n            char[] arr = new char[n];\n            //slot all n into char array\n            String code = in.next();\n            for (int i = 0; i < n; i++) {\n                arr[i] = code.charAt(i);\n                \n            }\n            \n            //R, G, B cycle\n            int r = 0;\n            int g = 0;\n            int b = 0;\n            \n            for (int i = 0; i < k; i++) {\n                if (i % 3 == 0) {\n                    if (arr[i] == 'R') {g++; b++;}\n                    else if (arr[i] == 'G') {r++; b++;}\n                    else {r++; g++;} //if is 'B'\n                } else if (i % 3 == 1) {\n                    if (arr[i] == 'G') {g++; b++;}\n                    else if (arr[i] == 'B') {r++; b++;}\n                    else {r++; g++;} //if is 'R'\n                } else { //if mod 3 is 2\n                    if (arr[i] == 'B') {g++; b++;}\n                    else if (arr[i] == 'R') {r++; b++;}\n                    else {r++; g++;} //if is 'G'     \n                }\n            }\n            \n            //starting from kth position, if different then add 1, and check (j-k)th position\n            int rMin = r;\n            int gMin = g;\n            int bMin = b;\n            for (int j = k; j < n; j++) {\n                //R cycle\n                if ((j % 3 == 0 && arr[j] != 'R') ||  \n                    (j % 3 == 1 && arr[j] != 'G') ||\n                    (j % 3 == 2 && arr[j] != 'B')) {\n                    r++;\n                }\n                //R cycle \n                if (((j - k) % 3 == 0 && arr[j - k] != 'R') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'G') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'B')) {\n                    r--;\n                }\n                rMin = Math.min(r, rMin);\n                //G cycle\n                if ((j % 3 == 0 && arr[j] != 'G') ||  \n                    (j % 3 == 1 && arr[j] != 'B') ||\n                    (j % 3 == 2 && arr[j] != 'R')) {\n                    g++;\n                } \n                if (((j - k) % 3 == 0 && arr[j - k] != 'G') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'B') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'R')) {\n                    g--;\n                }      \n                gMin = Math.min(gMin, g);\n                //B cycle\n                if ((j % 3 == 0 && arr[j] != 'B') ||  \n                    (j % 3 == 1 && arr[j] != 'R') ||\n                    (j % 3 == 2 && arr[j] != 'G')) {\n                    b++;\n                }       \n                if (((j - k) % 3 == 0 && arr[j - k] != 'B') ||  \n                    ((j - k) % 3 == 1 && arr[j - k] != 'R') ||\n                    ((j - k) % 3 == 2 && arr[j - k] != 'G')) {\n                    b--;\n                } \n                bMin = Math.min(bMin, b);\n                \n            }\n            \n            out.println(Math.min(Math.min(rMin, gMin), bMin));\n            \n        }\n        out.flush();\n        \n    } \n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        P1196D2 p = new P1196D2();\n        int q = multipleIndependent ? in.nextInt() : 1;\n        while (q-- > 0) {\n            p.run();\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        solver s = new solver();\n        int t = 1;\n        while (t > 0) {\n            s.solve();\n            t--;\n        }\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new LogicalExpression().solve();\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "quadratic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint a = input.nextInt();\n\t\tint b = input.nextInt();\n\t\tinput.close();\n\t\tfinal int mod = 998244353;\n\t\t\n\t\tint frac = multiply(a, inverse(b, mod), mod);\n\t\tint reverse = (mod+1-frac)%mod;\n\t\t\n\t\tint[] fracpower = new int[n+1];\n\t\tint[] reversepower = new int[n+1];\n\t\tfracpower[0] = 1;\n\t\treversepower[0] = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfracpower[i] = multiply(fracpower[i-1], frac, mod);\n\t\t\treversepower[i] = multiply(reversepower[i-1], reverse, mod);\n\t\t}\n\t\t\n\t\tint[][] dp1 = new int[n+1][n+1];\n\t\tdp1[2][1] = 1;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tif (j == 1) {\n\t\t\t\t\tdp1[i][j] = fracpower[i-1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp1[i][j] = multiply(dp1[i-1][j-1], fracpower[i-j], mod);\n\t\t\t\t}\n\t\t\t\tif (j == i-1) {\n\t\t\t\t\tdp1[i][j] += reversepower[i-1];\n\t\t\t\t\tdp1[i][j] %= mod;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp1[i][j] += multiply(dp1[i-1][j], reversepower[j], mod);\n\t\t\t\t\tdp1[i][j] %= mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[][] dp2 = new int[n+1][n+1];\n\t\tdp2[1][1] = 1;\n\t\tdp2[2][1] = 1;\n\t\tdp2[2][2] = 0;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tint val = 0;\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tdp2[i][j] = multiply(dp2[j][j], dp1[i][j], mod);\n\t\t\t\tval += dp2[i][j];\n\t\t\t\tval %= mod;\n\t\t\t}\n\t\t\tdp2[i][i] = (mod+1-val)%mod;\n\t\t}\n\t\t\n\t\t/*for (int i = 2; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tSystem.out.print(dp2[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}*/\n\t\t\n\t\tint[] EV = new int[n+1];\n\t\tEV[1] = 0;\n\t\tEV[2] = 1;\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tint val = 0;\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\tint r = j*(i-j) + (j*(j-1))/2 + EV[i-j] + EV[j];\n\t\t\t\tr %= mod;\n\t\t\t\tval += multiply(dp2[i][j], r, mod);\n\t\t\t\tval %= mod;\n\t\t\t}\n\t\t\tval += multiply((i*(i-1))/2, dp2[i][i], mod);\n\t\t\tval %= mod;\n\t\t\t\n\t\t\tint s = (mod+1-dp2[i][i])%mod;\n\t\t\tEV[i] = multiply(val, inverse(s, mod), mod);\n\t\t}\n\t\t\n\t\tSystem.out.println(EV[n]);\n\t}\n", "complexity": "quadratic"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        int n=r.nextInt();\n        int []l=new int[1005];\n        int []ri=new int[1005];\n        int []candy=new int[1005];\n        for(int i=1;i<=n;++i)\n        {\n            l[i]=r.nextInt();\n        }\n        for(int i=1;i<=n;++i)\n        {\n            ri[i]=r.nextInt();\n        }\n        for(int i=1;i<=n;++i)\n        {\n            if(l[i]>i-1||ri[i]>n-i)\n            {\n                System.out.println(\"NO\");\n                System.exit(0);\n            }\n            candy[i]=n-l[i]-ri[i];\n        }\n        for(int i=1;i<=n;++i)\n        {\n            int left=0,right=0;\n            for(int j=1;j<=i-1;++j)\n            {\n                if(candy[j]>candy[i])\n                {\n                    ++left;\n                }\n            }\n            for(int j=i+1;j<=n;++j)\n            {\n                if(candy[j]>candy[i])\n                {\n                    ++right;\n                }\n            }\n            if(left!=l[i]||right!=ri[i])\n            {\n                System.out.println(\"NO\");\n                System.exit(0);\n            }\n        }\n        System.out.println(\"YES\");\n        for(int i=1;i<=n;++i)\n        {\n            System.out.print(candy[i]+\" \");\n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[] ) {\n        \n        FastReader sc = new FastReader();\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[] arr = new int[105];\n        \n        for(int i=0;i<m;i++){\n            int a = sc.nextInt();\n            arr[a]++;\n        }\n        \n        for(int i=1;i<=1000;i++){\n            int sum=0;\n            \n            for(int a:arr){\n                if(a!=0){\n                    sum+=(a/i);\n                }\n            }\n            \n            \n            if(sum<n){\n                System.out.println(i-1);\n                return;\n            }\n            \n        }\n    }\n", "complexity": "quadratic"}
{"code": "    public static void main(String args[] ) {\n        \n        FastReader sc = new FastReader();\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[] arr = new int[105];\n        \n        for(int i=0;i<m;i++){\n            int a = sc.nextInt();\n            arr[a]++;\n        }\n        \n        for(int i=1;i<=1000;i++){\n            int sum=0;\n            \n            for(int a:arr){\n                if(a!=0){\n                    sum+=(a/i);\n                }\n            }\n            \n            \n            if(sum<n){\n                System.out.println(i-1);\n                return;\n            }\n            \n        }\n    }\n", "complexity": "quadratic"}
{"code": "public static void main(String[] args) {\n\tScanner scan = new Scanner(System.in);\n\tString S [] = new String[3];\n\t\n\tint m=0,s=0,p=0;\n\tint temp=0;\n\t\n\tfor (int i = 0; i < S.length; i++) {\n\t\tS[i]=scan.next();\n\t\tif(S[i].indexOf('m')!=-1) m++;\n\t\tif(S[i].indexOf('s')!=-1) s++;\n\t\tif(S[i].indexOf('p')!=-1) p++;\n\t}\n\t\n\t\n\tint n1 = Integer.parseInt(S[0].substring(0,1));\n\tint n2 = Integer.parseInt(S[1].substring(0,1));\n\tint n3 = Integer.parseInt(S[2].substring(0,1));\n\t\n\t\n\t\n\t    int d3 = Math.abs(n1-n2);\n\t\tint d4 = Math.abs(n1-n3);\n\t\tint d5 = Math.abs(n2-n3);\n\t\t\n\t\n\tif(m==3||s==3||p==3) {\n\t\t\n\t\t    if(d3==1&d5==1&d4==2||d3==1&d4==1&d5==2||d5==1&d4==1&d3==2)\n\t\t\tSystem.out.println(0);\n\t\telse \n\t\t    if(d3==0&d4==0) System.out.println(0);\n\t\telse \n\t\t\tif(d3<d5&d3<d4) {\n\t\t\t    if(d3==1||d3==2||d3==0) System.out.println(1);\n\t\t        else                 System.out.println(2);\n\t\t\t    }\n\t\t\telse if (d5<d4&d5<d3){\n\t\t\t\t if(d5==1||d5==2||d5==0) System.out.println(1);\n\t\t\t\t\telse                 System.out.println(2);\n\t\t\t}\n\t\t\telse if(d4<d5&d4<d3) {\n\t\t\t\tif(d4==1||d4==2||d4==0) System.out.println(1);\n\t\t\t\telse                 System.out.println(2);\n\t\t\t}\n\t\t\telse if(d3==2&d5==2||d4==2&d5==2||d3==2&d4==2||d3==1&d5==1||d4==1&d5==1||d3==2&d4==1)\n\t\t\t\tSystem.out.println(1);\n\t\t\telse System.out.println(2);\n\t\t\t\n\t\t\t\n\t\t\n\t\t \n\t\t    \n\t\t    \n\t}\n\t\n\tif(m==2||s==2||p==2) {\n\t\t\n\t\t\n\t\t\n\t\tchar c1 = S[0].charAt(1);\n\t\tchar c2 = S[1].charAt(1);\n\t\tchar c3 = S[2].charAt(1);\n\t\t\n\t\t\n\t\tif(c1==c2) {\n\t\t\tif(n1==n2) System.out.println(1);\n\t\t\telse if(d3==1||d3==2) System.out.println(1);\n\t\t\telse System.out.println(2);\n\t\t}\n\t\tif(c1==c3) {\n\t\t\tif(n1==n3) System.out.println(1);\n\t\t\telse if(d4==1||d4==2) System.out.println(1);\n\t\t\telse System.out.println(2);\n\t\t}\n\t\tif(c2==c3) {\n\t\t\tif(n2==n3) System.out.println(1);\n\t\t\telse if(d5==1||d5==2) System.out.println(1);\n\t\t\telse System.out.println(2);\n\t\t}\n\t}\n\t\n\tif(m==1&s==1&p==1) System.out.println(2);\n\t\t\n\t\n\t\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)  {\n\n        Scanner in = new Scanner(System.in) ;\n        PrintWriter pw = new PrintWriter(System.out);   \n     int k=in.nextInt(), n=in.nextInt(), s=in.nextInt(), p=in.nextInt() ;\n     int paper =n/s; \n     if(n%s!=0) paper++ ; \n     paper*=k ; \n     int fin = paper/p ; \n     if(paper%p!=0) fin++ ; \n        System.out.println( fin );\n       \n       \n }               \n", "complexity": "constant"}
{"code": "", "complexity": "constant"}
{"code": "public static void main(String args[])throws Exception\nBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\nPrintWriter pw=new PrintWriter(System.out);\nlong n=Long.parseLong(br.readLine());\nif(n<=2)\npw.println(n);\nelse\n{\n\n if(n%6==0)\n{\n pw.println(((n-1)*(n-2)*(n-3)));\n}\n else if(n%2==0)\n{\n  pw.println((n*(n-1)*(n-3)));\n}\nelse\n{\n  pw.println((n*(n-1)*(n-2)));\n}\n}\npw.flush();\n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String... args) throws NumberFormatException,\n\t\tSolution.main(System.in, System.out);\n\t}\n\t\tpublic static void main(InputStream is, OutputStream os)\n\t\t\tPrintWriter pw = new PrintWriter(os);\n\t\t\tScanner sc = new Scanner(is);\n\n\t\t\tlong n = sc.nextInt();\n\n\t\t\tif (n < 3) {\n\t\t\t\tpw.println(n);\n\t\t\t} else {\n\t\t\t\tif (n % 2 != 0) {\n\t\t\t\t\tpw.println(n * (n - 1) * (n - 2));\n\t\t\t\t} else {\n\t\t\t\t\tif (n % 3 != 0) {\n\t\t\t\t\t\tpw.println(n * (n - 1) * (n - 3));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlong cand1 = n * (n - 1) * (n - 2) / 2;\n\t\t\t\t\t\tlong cand2 = (n - 1) * (n - 2) * (n - 3);\n\t\t\t\t\t\tpw.println(Math.max(cand1, cand2));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpw.flush();\n\t\t\tsc.close();\n\t\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)\n        InputReader in = new InputReader();\n        PrintWriter out = new PrintWriter(System.out);\n        long n=in.nextLong();\n        if(n<=2)\n            out.println(n);\n        else\n            out.println(max(lcm(n, n-1, n-2), max(lcm(n, n-1, n-3), lcm(n-1, n-2, n-3))));\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[]args){\n\t\tScanner in=new Scanner(System.in);\n\t\tlong n=in.nextLong();\n\t\tlong m1=0,m2=0;\n\t\tif(n<3)m1=n;\n\t\telse {\n\t\t\tif((n&1)==1){\n\t\t\t\tlong lcm=n*(n-1)/gcd(n,n-1);\n\t\t\t\tm1=lcm*(n-2)/gcd(lcm,n-2);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlong lcm=(n-1)*(n-2)/gcd(n-1,n-2);\n\t\t\t\tm1=lcm*(n-3)/gcd(lcm,n-3);\n\t\t\t\t\n\t\t\t\t lcm=n*(n-1)/gcd(n,n-1);\n\t\t\t\tm2=lcm*(n-3)/gcd(lcm,n-3);\n\t\t\t\tm1 = Math.max(m1,m2);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(m1);\n\t\t\n}}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        if(n < 3) System.out.println(n);\n        else{\n            long t1 = LCM(n, n-1);\n            long t2 = LCM(n-2, n-3);\n        \n            long l1 = LCM(t1, n-2);\n            long l2 = LCM(t1, n-3);\n            long l3 = LCM(n, t2);\n            long l4 = LCM(n-1, t2);\n        \n        System.out.println(Math.max(l1, Math.max(l2, Math.max(l3, l4))));\n\n        }\n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException{\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        long n = Long.parseLong(reader.readLine());\n        //int gcd = gcd(924,923);\n        //System.out.println(gcd);\n       // System.out.println(gcd(923,461));\n        if(n<=2)\n            System.out.println(n);\n        else if(n==3)\n            System.out.println(\"6\");\n        \n        else if(n % 2== 0)\n       {\n           if(n % 3 == 0)\n           {\n               System.out.println((n-3)*(n-1)*(n-2));\n           }\n           else\n               \n           System.out.println(n * (n-1) * (n-3) );\n       }\n        else\n            System.out.println(n*(n-1)*(n-2));\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        long n = scan.nextInt();\n        BigInteger res = null;\n        if (n >= 3) {\n            if (n % 2 != 0) {\n                res = BigInteger.valueOf(n * (n - 1) * (n - 2));\n            } else if (n % 3 == 0) {\n                res = BigInteger.valueOf((n - 1) * (n - 2) * (n - 3));\n            } else {\n                res = BigInteger.valueOf(n * (n - 1) * (n - 3));\n            }\n        } else {\n            res = BigInteger.valueOf(n);\n        }\n        System.out.println(res);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        long n = scan.nextLong();\n\n        if (n <= 2)\n            System.out.println(n);\n        else if (n % 2 == 1)\n            System.out.println(n * (n - 1) * (n - 2));\n        else if (n % 3 == 0)\n            System.out.println((n - 1) * (n - 2) * (n - 3));\n        else\n            System.out.println(n * (n - 1) * (n - 3));\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextInt();\n        if (n == 1) {\n            System.out.println(1);\n            return;\n        } else if (n == 2) {\n            System.out.println(2);\n            return;\n        } else if (n == 3) {\n            System.out.println(6);\n            return;\n        }\n\n        if (n % 2 == 0) {\n            if(n % 3 == 0) \n                System.out.println((n - 1) * (n - 2) * (n - 3));\n            else\n                System.out.println((n - 1) * n * (n - 3));\n        } else {\n            System.out.println(n * (n - 1) * (n - 2));\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[]args)\n        Scanner input=new Scanner (System.in);\n        while(input.hasNext())\n        {\n            long n=input.nextLong();\n            if(n==1||n==2)\n                System.out.println(n);\n            else if(n%2==1)\n                System.out.println(n*(n-1)*(n-2));\n            else\n                if(n%3!=0)\n                    System.out.println(Math.max(n*(n-1)*(n-3),n*(n-1)*(n-2)/2));\n                else\n                    System.out.println(Math.max(  Math.max(n*(n-1)*(n-3)/3,n*(n-1)*(n-2)/2) , Math.max((n-2)*(n-1)*(n-3),n*(n-2)*(n-3)/6) ));\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        long num=in.nextLong();\n        long lcm=1;\n        if(num==2){\n            System.out.println(2);\n            System.exit(0);\n        }//End if\n        else if(num%2==0&&num%3!=0)\n            lcm=(num)*(num-1)*(num-3);\n        else if(num%2==0&&num%3==0)\n            lcm=(num-1)*(num-2)*(num-3);\n        else if(num%2!=0&&num>2)\n            lcm=num*(num-1)*(num-2);\n        System.out.println(lcm);\n    }//End main()\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        long num = input.nextLong();\n        if(num==0){\n            System.out.println(num);\n        }else if(num==1||num==2){\n            System.out.println(num);}\n        else if(num%2==0&&num>2&&num%3!=0){\n            System.out.println(num*(num-1)*(num-3));\n        }\n        else if(num%2==0&&num%3==0){\n            System.out.println((num-1)*(num-2)*(num-3));\n        }\n        else{\n        System.out.println(num*(num-1)*(num-2));}\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedInputStream(System.in));\n\n        long N = in.nextLong();\n        if( N == 1 || N == 2 )\n        {\n            System.out.printf(\"%d\\n\", N);\n            return;\n        }\n\n        if( (N&1) == 1 )\n        {\n            long lcm = N*(N-1)*(N-2);\n            System.out.printf(\"%d\\n\", lcm);\n        }\n        else\n        {\n            if( N == 4 )\n            {\n                System.out.printf(\"12\\n\");\n            }\n            else\n            {\n                long lcm;\n                if( N%3 == 0 )\n                {\n                    lcm = (N-1)*(N-2)*(N-3);\n                }\n                else\n                {\n                    lcm = N*(N-1)*(N-3);\n                }\n\n                System.out.printf(\"%d\\n\", lcm);\n            }\n        }\n    }\n", "complexity": "constant"}
{"code": "public static void main(String [] args){\n  Scanner in=new Scanner(System.in);\n  long n=in.nextInt();\n  if(n<=2){\n  System.out.print(n);\n  return;\t\n  }\n  if(n%2==1){\n  System.out.print((n*(n-1)*(n-2)));\n  return;\n  }\n  if(n%2==0 && n<=6){\n  System.out.print(n*(n-1)*(n-2)/2);\n  return;\t\n  }\n  long temp=(n*(n-1)*(n-3))/GCD(n,n-3);\n  System.out.print(Math.max((n-1)*(n-2)*(n-3),temp));\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n=sc.nextLong();\n\t\tif(n < 3) {\n\t\t\tSystem.out.println(n);\n\t\t}\n\t\telse if(n % 2 != 0) {\n\t\t\tSystem.out.println(n * (n-1) * (n-2));\n\t\t}\n\t\telse if(n % 3 == 0) {\n\t\t\tSystem.out.println((n-1) * (n-2) * (n-3));\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(n * (n-1) * (n-3));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\nScanner input = new Scanner(System.in);\nlong x = input.nextLong();\n\nif(x==1||x==2){System.out.println(x);\n    \n}\nelse if(x%2==0&&x>2&&x%3!=0){\n    System.out.println((x)*(x-1)*(x-3));\n    \n}else if(x%2==0&&x%3==0){\n    System.out.println((x-1)*(x-2)*(x-3));\n}\n\nelse {System.out.println(x*(x-1)*(x-2));}\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        long n = Long.parseLong(f.readLine());\n        if (n == 1 || n == 2)\n            System.out.println(n);\n        else if (n % 2 == 1)\n            System.out.println(n*(n-1)*(n-2));\n        else\n        {\n            long prod = n*(n-1);\n            long x = n-2;\n            while (x > 0 && gcd(n,x) > 1 || gcd(n-1,x) > 1)\n                x--;\n            prod *= x;\n            if ((n-1)*(n-2)*(n-3) > prod)\n                prod = (n-1)*(n-2)*(n-3);\n            System.out.println(prod);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n            long x=in.nextLong();\n            if(x>=3){\n                if(x%2!=0)\n                    System.out.println(x*(x-1)*(x-2));\n                else if(x%3==0)\n                    System.out.println((x-3)*(x-1)*(x-2));\n                else \n                    System.out.println(x*(x-1)*(x-3));\n            }\n            else System.out.println(x);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception {\n\t\tScanner in=new Scanner(System.in);\n\t\tlong n=in.nextInt();\n\t\tif (n>2) {\n\t\t\tif (gcd(n,n-2)>1) {\n\t\t\t\tif (gcd(n,n-3)>1) {\n\t\t\t\t\tSystem.out.println((n-1)*(n-2)*(n-3));\n\t\t\t\t}\n\t\t\t\telse System.out.println(n*(n-1)*(n-3));\n\t\t\t}\n\t\t\telse System.out.println(n*(n-1)*(n-2));\n\t\t}\n\t\telse System.out.println(n);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n                                            //(new FileReader(\"input.in\"));\n        StringBuilder out = new StringBuilder();\n        StringTokenizer tk;\n        //PrintWriter pw = new PrintWriter(\"output.out\", \"UTF-8\");\n  \n        long n = parseLong(in.readLine());\n        \n        if(n <= 2) System.out.println(n);\n        else if(n%2 == 1)System.out.println(n*(n-1)*(n-2));\n        else {\n            long ans = (n-1)*(n-2)*(n-3);\n            \n            if(gcd(n*(n-1),n-3)==1) ans = max(ans, n*(n-1)*(n-3));\n            \n            System.out.println(ans);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        long n1 = Integer.parseInt(scan.next());\n        if (n1==1){\n            System.out.println(1);\n            System.exit(0);\n        }\n        if (n1==2){\n            System.out.println(2);\n            System.exit(0);\n        }\n        if (n1==3){\n            System.out.println(6);\n            System.exit(0);\n        }\n        if (n1%2==0){\n            if (n1%3==0){\n                n1-=1;\n                n1 = n1*(n1-1)*(n1-2);\n                System.out.println(n1);\n            }\n            else {\n                n1 = n1*(n1-1)*(n1-3);\n                System.out.println(n1);\n            }\n        }\n        else {\n            n1 = n1*(n1-1)*(n1-2);\n            System.out.println(n1);\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] Args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint x = scan.nextInt();\n\t\tif (x < 3) {\n\t\t\tif (x == 1)\n\t\t\t\tSystem.out.println(1);\n\t\t\telse\n\t\t\t\tSystem.out.println(2);\n\t\t} else {\n\t\t\tlong answer = x;\n\t\t\tif (x % 2 == 1) {\n\t\t\t\tanswer *= x - 1;\n\t\t\t\tanswer *= x - 2;\n\t\t\t} else if (x % 3 != 0) {\n\t\t\t\tanswer *= x - 1;\n\t\t\t\tanswer *= x - 3;\n\t\t\t} else {\n\t\t\t\tanswer = x - 1;\n\t\t\t\tanswer *= x - 2;\n\t\t\t\tanswer *= x - 3;\n\t\t\t}\n\t\t\tSystem.out.println(answer);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "public static void main(String args[])throws Exception\nBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\nlong n=Long.parseLong(br.readLine());\nif(n<=2)\nSystem.out.println(n);\nelse\n{\n\n if(n%6==0)\n{\n System.out.println(((n-1)*(n-2)*(n-3)));\n}\n else if(n%2==0)\n{\n  System.out.println((n*(n-1)*(n-3)));\n}\nelse\n{\n  System.out.println((n*(n-1)*(n-2)));\n}\n}\n\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) \n        // Set up scanner\n        Scanner sc = new Scanner(System.in); \n        // System.out.println(\"Enter n\");\n        long n = sc.nextLong();\n        \n        if (n==1)\n        {\n            System.out.println(1);\n            return;\n        }\n        if (n==2)\n        {\n            System.out.println(2);\n            return;\n        }\n        if (n==3)\n        {\n            System.out.println(6);\n            return;\n        }\n        if (n==4)\n        {\n            System.out.println(12);\n            return;\n        }\n        \n        if (n%2 ==1)   // Odd number easy\n        {\n            System.out.println(n*(n-1)*(n-2));\n            return;\n        }\n        \n        // Even number is a bit harder\n        if (n%3 == 0)\n        {\n            System.out.println((n-1)*(n-2)*(n-3));\n        }\n        else\n        {\n            System.out.println(n*(n-1)*(n-3));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedInputStream(System.in));\n\n        long N = in.nextLong();\n        if( N == 1 || N == 2 )\n        {\n            System.out.printf(\"%d\\n\", N);\n            return;\n        }\n\n        if( (N&1) == 1 )\n        {\n            long lcm = N*(N-1)*(N-2);\n            System.out.printf(\"%d\\n\", lcm);\n        }\n        else\n        {\n            long lcm;\n            if( N%3 == 0 )\n            {\n                lcm = (N-1)*(N-2)*(N-3);\n            }\n            else\n            {\n                lcm = N*(N-1)*(N-3);\n            }\n\n            System.out.printf(\"%d\\n\", lcm);\n        }\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n       Scanner sc = new Scanner(System.in);\n       Long N = sc.nextLong();\n       Long ans;\n       sc.close();\n       if(N <= 2)\n           System.out.println(N);\n       else{\n           if(N % 6 == 0){\n                ans = (N - 1) * (N - 2) * (N - 3);}\n            else if(N % 2 == 0){\n                ans = N * (N - 1) * (N - 3);\n            }\n            else{\n                ans = N * (N - 1) * (N - 2);\n            }\n           System.out.println(ans);\n       }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String [] args){\n        Scanner stdin = new Scanner(System.in);\n        long n = stdin.nextLong();\n        if(n<3)\tSystem.out.println(n);\n        else {\n            if(n%2==0){\n                long a=0,b=0;\n                if(n%3!=0)\ta = (n*(n-1)*(n-3));    \n                n--;\n                b = (n*(n-1)*(n-2));\n                System.out.println(Math.max(a, b));\n            }\n            else\tSystem.out.println(n*(n-1)*(n-2));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long n = in.nextLong();\n        if (n == 1 || n == 2) {\n            System.out.println(n);\n        } else if (n % 2 == 0) {\n            if (n % 3 == 0)\n                System.out.println((n - 1) * (n - 2) * (n - 3));\n            else\n                System.out.println(n * (n - 1) * (n - 3));\n        } else {\n            System.out.println(n * (n - 1) * (n - 2));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Round_146_A().go();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        \n        Scanner in = new Scanner(System.in);\n        \n        //inputs\n        long n = in.nextLong();\n        if(n == 1)\n            System.out.println(1);\n        else if(n == 2)\n            System.out.println(2);\n            \n        else if(n % 2 == 0){\n            \n            int cnt = nPrime(n);\n            if(cnt == 1)\n            System.out.println((n) * (n-1) * (n-3));\n        else if(cnt > 1)\n            System.out.println((n-1) * (n-2) * (n-3));\n        }\n        \n        else\n            System.out.println((n) * (n-1) * (n-2));\n      }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\t//BufferedReader in = new BufferedReader(new FileReader(\"lcm.in\"));\n\t\tn = Integer.parseInt(in.readLine());\n\t\tSystem.out.println(lcm(n));\n\t\tin.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        new C236().run();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\t\n\t\tif(n < 3)\n\t\t{\n\t\t\tSystem.out.println(n);\n\t\t}\n\t\telse if(n % 2 == 1)\n\t\t{\n\t\t\tSystem.out.println((long)n * (n - 1) * (n - 2));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(n % 3 != 0)\n\t\t\t{\n\t\t\t\tSystem.out.println((long)n * (n - 1) * (n - 3));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.println((long)(n - 1) * (n - 2) * (n - 3));\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) throws Exception{\n        BufferedReader ip = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(ip.readLine());\n        int a,b,c;\n        int x = 0,y = 0,z = 0;\n        BigInteger l,t;\n        \n        if(n-2 > 1)\n        {\n            a = n;\n            b = n-1;\n            c = n-2;\n        }\n        else\n        {\n            a = n;\n            if(n-1 > 1)\n                b = n-1;\n            else\n                b = 1;\n            c = 1;\n            \n            System.out.println(a*b);\n            return;\n        }\n    \n        if(n-3 > 1)\n        {\n            x = n-1;\n            y = n-2;\n            z = n-3;\n        }\n        \n        if(n % 2 == 0)\n            if(n % 3 == 0)\n                l = BigInteger.valueOf(x).multiply(BigInteger.valueOf(y).multiply(BigInteger.valueOf(z)));\n            else\n            {\n                l = BigInteger.valueOf(a).multiply(BigInteger.valueOf(b).multiply(BigInteger.valueOf(c-1)));\n                t = BigInteger.valueOf(x).multiply(BigInteger.valueOf(y).multiply(BigInteger.valueOf(z)));\n                if(l.compareTo(t) < 0)\n                    l = t;\n            }\n        else\n            l = BigInteger.valueOf(a).multiply(BigInteger.valueOf(b).multiply(BigInteger.valueOf(c)));\n        \n        System.out.println(l);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\t///input\n\t\t  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\t  String[] str=br.readLine().split(\" \");\n\t      long n=Long.parseLong(str[0]);\n\t      if(n<3)\n\t\t\tSystem.out.println(n);\n\t\t\telse if(n%2==1)\n\t\t\tSystem.out.println(n*(n-1)*(n-2));\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(n%3!=0)\n\t\t\t\tSystem.out.println(n*(n-1)*(n-3));\n\t\t\t\telse\n\t\t\t\tSystem.out.println((n-1)*(n-2)*(n-3));\n\t\t     }\n\t      \n\t\t\n}//void main\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tlong a = in.nextLong();\n\t\tif (a % 2 == 0) {\n\t\t\tlong result = cal(a);\n\t\t\tresult = Math.max(result, cal(a + 1));\n\t\t\tresult = Math.max(result, cal2(a));\n\t\t\tSystem.out.println(Math.max(result, a));\n\t\t}\n\n\t\telse {\n\t\t\tlong result = (a - 1) * (a - 2) * (a - 0);\n\t\t\tSystem.out.println(Math.max(result, a));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tTaskA t = new TaskA();\n\t\tSystem.out.println(t.solve(n));\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws java.lang.Exception {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        if (n < 3)\n            System.out.println(n);\n        else if (n % 2 != 0)\n            System.out.println((long)n * (n - 1) * (n - 2));\n        else if(n % 3 != 0)\n            System.out.println((long)n * (n - 1) * (n - 3));\n        else \n            System.out.println((long)(n - 1) * (n - 2) * (n - 3));\n        in.close();\n        \n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tlong n = in.nextInt();\n\t\tif(n == 1l)\n\t\t\tSystem.out.println(1);\n\t\telse if(n == 2l)\n\t\t\tSystem.out.println(2);\n\t\telse\n\t\t{\n\t\t\tlong c1 = n*(n-1)*(n-2);\n\t\t\tlong c2 = n*(n-1)*(n-3);\n\t\t\tlong c3 = (n-1)*(n-2)*(n-3);\n\t\t\tif(n%2==0)\n\t\t\t\tc1/=2;\n\t\t\telse\n\t\t\t\tc3/=2;\n\t\t\tif(n%3==0)\n\t\t\t\tc2/=3;\n\t\t\tlong ans = Math.max(c1, c2);\n\t\t\tans = Math.max(ans, c3);\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        int n = cin.nextInt();\n        if (n < 3) {\n            System.out.println(n);\n        } else if (n % 2 == 1) {\n            System.out.println((long) n * (n - 1) * (n - 2));\n        } else {\n            if (n % 3 != 0) {\n                System.out.println((long) n * (n - 1) * (n - 3));\n            } else {\n                System.out.println((long) (n - 1) * (n - 2) * (n - 3));\n            }\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t new Main().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tInputReader sc = new InputReader(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tint n = sc.nextInt();\n\n\t\tif(n < 3)\n\t\t\tout.println(n);\n\t\telse\n\t\t{\n\t\t\tif((n & 1) == 1)\n\t\t\t\tout.println(lcm(n, lcm(n - 1, n - 2)));\n\t\t\telse\n\t\t\t\tout.println(Math.max(lcm(n - 1, lcm(n - 2, n - 3)), lcm(n, lcm(n - 1, n - 3))));\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\n\t\tint n=Integer.parseInt(st.nextToken());\n\t\tint m=Integer.parseInt(st.nextToken());\n\t\tString a=\"\";\n\t\tString b=\"\";\n\t\tfor(int i=0;i<1129;i++) {\n\t\t\ta+=\"1\";\n\t\t\tb+=\"8\";\n\t\t}\n\t\ta+=\"9\";\n\t\tb+=\"1\";\n\t\t\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        // int n = Integer.parseInt(bf.readLine());\n        StringTokenizer st = new StringTokenizer(bf.readLine());\n        // int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        StringBuilder ans1 = new StringBuilder();\n        StringBuilder ans2 = new StringBuilder();\n        for(int i=0; i<2229; i++) ans1.append('5');\n        ans1.append('6');\n        for(int i=0; i<2230; i++) ans2.append('4');\n        out.println(ans1.toString());\n        out.println(ans2.toString());\n        out.close(); System.exit(0);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\t\n\t\tint n=Integer.parseInt(st.nextToken());\n\t\tint m=Integer.parseInt(st.nextToken());\n\t\tString a=\"\";\n\t\tString b=\"\";\n\t\tfor(int i=0;i<1129;i++) {\n\t\t\ta+=\"1\";\n\t\t\tb+=\"8\";\n\t\t}\n\t\ta+=\"9\";\n\t\tb+=\"1\";\n\t\t\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t}\n", "complexity": "constant"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            int S=Integer.parseInt(s1[1]);\n            if(S%n==0)\n             System.out.println(S/n);\n            else\n             System.out.println(S/n+1);\n      }\n", "complexity": "constant"}
{"code": " public static void main(String args[])throws IOException\n  InputStreamReader read=new InputStreamReader(System.in);\n  BufferedReader in=new BufferedReader(read);\n  int i,k,n,v;\n  String a;\n  a=in.readLine();\n  for(i=0;i<a.length();i++)\n  {\n   if(a.charAt(i)==' ')\n   break;\n  }\n  n=Integer.parseInt(a.substring(0,i));\n  v=Integer.parseInt(a.substring(i+1));\n  k=v%n;\n  v=v/n;\n  if(k>0)\n  v++;\n  System.out.println(v);\n }\n", "complexity": "constant"}
{"code": "      public static void main(String ar[]) throws Exception\n            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            String s1[]=br.readLine().split(\" \");\n            int n=Integer.parseInt(s1[0]);\n            int S=Integer.parseInt(s1[1]);\n            if(S%n==0)\n             System.out.println(S/n);\n            else\n             System.out.println(S/n+1);\n      }\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) {\n        FastScanner scn = new FastScanner();\n        int n = scn.nextInt();\n        int s = scn.nextInt();\n        if (s <= n) {\n            System.out.println(1);\n        } else if (s > n) {\n            if(s%n == 0){\n                System.out.println(s/n);\n            } else {\n                System.out.println(s/n + 1);\n            }\n        }\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tint A = scan.nextInt();\n\t\tint B = scan.nextInt();\n\t\tlong x = scan.nextInt();\n\t\tlong y = scan.nextInt();\n\t\tlong z = scan.nextInt();\n\t\t\n\t\tlong requiredA = x * 2 + y;\n\t\tlong requiredB = y + z * 3;\n\t\t\n\t\tlong neededA = Math.max(0, requiredA - A);\n\t\tlong neededB = Math.max(0, requiredB - B);\n\t\tSystem.out.print(neededA + neededB);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        long a,b;\n        while(t-- > 0){\n            a = in.nextLong();\n            b = in.nextLong();\n            System.out.println(_solve(a,b));\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException{\n        FastScanner s = new FastScanner();\n        PrintWriter ww = new PrintWriter(new OutputStreamWriter(System.out));\n        int test = s.nextInt(); int cnt=0;\n        while(test-->0){\n            int a = s.nextInt();\n            int b = s.nextInt();\n            cnt=0;\n            while(a!=0 && b!=0){\n                int max = Math.max(a, b);\n                if(max == b){\n                    int divi = b/a;\n                    b -= divi*a;\n                    cnt+=divi;\n                }else{\n                    int divi = a/b;\n                    a -= divi*b;\n                    cnt+=divi;\n                }\n        //      System.out.println(a+\" \"+b);\n            }\n            ww.println(cnt);\n        }\n        ww.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int pairs = in.nextInt();\n        while (pairs > 0){\n            in.nextLine();\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int count = 0;\n            while (a != 0 && b != 0){\n                if (b >= a && a != 0){\n                    count += b/a;\n                    b = b%a;\n                }\n                if (a > b && b != 0){\n                    count += a/b;\n                    a = a%b;\n                }\n            }\n            System.out.println(count);\n            pairs--;\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tScanner cin = new Scanner(System.in);\n\t\t\n\t\tint t, n, m;\n\t\t\n\t\tt = cin.nextInt();\n\t\t\n\t\twhile(t > 0) {\n\t\t\tt--;\n\t\t\tint sum = 0;\n\t\t\tn = cin.nextInt();\n\t\t\tm = cin.nextInt();\n\t\t\twhile(n > 0 && m > 0) {\n\t\t\t\tif(n < m) {\n\t\t\t\t\tint k = n;\n\t\t\t\t\tn = m;\n\t\t\t\t\tm = k;\n\t\t\t\t}\n\t\t\t\tsum += n / m; n %= m;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        while(t != 0) {\n            int f = scan.nextInt();\n            int s = scan.nextInt();\n            System.out.println(ops(f, s));\n            t--;\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException,NumberFormatException{\n\t\ttry {\n\t\t\tFastScanner sc=new FastScanner();\n\t\t\tint t=sc.nextInt();\n\t\t\twhile(t-->0) {\n\t\t\t\tint a=sc.nextInt(),b=sc.nextInt();\n\t\t\t\tint count=0;\n\t\t\t\twhile(a!=0&&b!=0) {\n\t\t\t\t\tif(a>b) {\n\t\t\t\t\t\tint temp=a;\n\t\t\t\t\t\ta=b;\n\t\t\t\t\t\tb=temp;\n\t\t\t\t\t}\n\t\t\t\t    count+=(b/a);\n\t\t\t\t    b=b%a;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(count);\n\t\t\t}\t\t\t\n\t\t\t\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn ;\n\t\t}\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tint n=0, a, b;\n\t\tBufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n\t\ttry {\n\t\t\tn = Integer.parseInt(stdin.readLine());\n\t\t} catch (IOException e) {\n\t\t}\n\t\twhile(n-->0){\n\t\t\tString[] row = null;\n\t\t\ttry {\n\t\t\t\trow = stdin.readLine().split(\" \");\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ta = Integer.parseInt(row[0]);\n\t\t\tb = Integer.parseInt(row[1]);\n\t\t\tif(a<b) System.out.println(calc(a,b));\n\t\t\telse System.out.println(calc(b,a));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Solution().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        int t=sc.nextInt();\n        while (t--!=0){\n            int x=sc.nextInt();\n            int y=sc.nextInt();\n            int max=Math.max(x,y);\n            int min=Math.min(x,y);\n            int ans=0;\n            while (min>0 && max>0){\n                int temp=max;\n                ans+=temp/min;\n                max=min;\n                min=temp%min;\n           }\n            System.out.println(ans);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        while(T!=0){\n            T--;\n            int a = in.nextInt();\n            int b = in.nextInt();\n            int ans=0;\n            while(a>0&&b>0){\n                if(a>b){\n                    int c = a;\n                    a = b;\n                    b = c;\n                }\n                ans += (b-(b%a))/a;\n                b = b%a;\n            }\n            System.out.println(ans);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));\n        int n=Integer.parseInt(reader.readLine());\n        while (n-->0){\n            String l=reader.readLine();\n            String[] a=l.split(\" \");\n            long A=Long.parseLong(a[0]);\n            long B=Long.parseLong(a[1]);\n            c=0;\n            gcd(A,B);\n            System.out.println(c);\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner kb = new Scanner(System.in);\n\t\tint count = kb.nextInt();\n\t\twhile(count > 0) {\n\t\t\tint smaller = kb.nextInt();\n\t\t\tint larger = kb.nextInt();\n\t\t\tint ops = 0;\n\t\t\t\n\t\t\twhile(smaller > 0 && larger > 0) {\n\t\t\t\tif(smaller > larger) {\n\t\t\t\t\tint temp = smaller;\n\t\t\t\t\tsmaller = larger;\n\t\t\t\t\tlarger = temp;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tops += larger/smaller;\n\t\t\t\tlarger = larger % smaller;\n\t\t\t}\n\t\t\tSystem.out.println(ops);\n\t\t\tcount--;\n\t\t}\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner scan=new Scanner(System.in);\n\t\tint noOfPairs=scan.nextInt();\n\t\twhile(noOfPairs-->0)\n\t\t{\n\t\t\tint x=scan.nextInt();\n\t\t\tint y=scan.nextInt();\n\t\t\tint res=0;\n\t\t\twhile(x!=0&&y!=0)\n\t\t\t{\n\t\t\t  if(x>y) \n\t\t\t   {\n\t\t\t\tres+=x/y;\n\t\t\t\tx=x%y;\n\t\t\t   }\n\t\t\t  else \n\t\t\t   {\n\t\t\t\t  res+=y/x;\n\t\t\t\t  y=y%x;\n\t\t\t   }\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t}\n\t\tscan.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s=new Scanner(System.in);\n\t\tint t=s.nextInt();\n\t\twhile(t--!=0){\n\t\t\tint a=s.nextInt();\n\t\t\tint b=s.nextInt();\n\t\t\tint min=Math.min(a, b);\n\t\t\tint max=Math.max(a, b);\n\t\t\tint ops=0;\n\t\t\twhile(true){\n\t\t\t\tint quo=max/min;\n\t\t\t\tops+=quo;\n\t\t\t\tint rem=max%min;\n\t\t\t\tmax=Math.max(rem, min);\n\t\t\t\tmin=Math.min(min, rem);\n\t\t\t\tif(rem==0) break;\n\t\t\t}\n\t\t\tSystem.out.println(ops);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint a,b;\n\t\tString answer = \"\";\n\t\twhile(n!=0){\n\t\t\ta = sc.nextInt();\n\t\t\tb = sc.nextInt();\n\t\t\tanswer += solve(a,b) + \"\\n\";\n\t\t\tn--;\n\t\t}\n\t\tSystem.out.println(answer);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tScanner cin = new Scanner(System.in);\n\t\t\n\t\tint t, n, m;\n\t\t\n\t\tt = cin.nextInt();\n\t\t\n\t\twhile(t > 0) {\n\t\t\tt--;\n\t\t\tint sum = 0;\n\t\t\tn = cin.nextInt();\n\t\t\tm = cin.nextInt();\n\t\t\twhile(n > 0 && m > 0) {\n\t\t\t\tif(n < m) {\n\t\t\t\t\tint k = n;\n\t\t\t\t\tn = m;\n\t\t\t\t\tm = k;\n\t\t\t\t}\n\t\t\t\tsum += n / m; n %= m;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String [] args){\n        Scanner sc = new Scanner(System.in);\n\n        int tests = Integer.valueOf(sc.nextLine());\n\n\n        while(tests > 0){\n            int count = 0;\n            String [] input = sc.nextLine().split(\" \");\n            int x = Integer.valueOf(input[0]);\n            int y = Integer.valueOf(input[1]);\n\n\n            if (x == y){\n                count += 1;\n            }\n            else {\n                if (x > y){\n                    int temp = x;\n                    x = y;\n                    y = temp;\n                }\n                /*\n                    (4, 17) 4 + 4\n                    (1, 4)\n\n                    (4, 16) 4\n                    (4, 12)\n                    (4, 8)\n                    (4, 4)\n\n                */\n                while (x != 1 && x != 0 && y != 1){\n                    count += (y / x);\n                    int temp = x;\n                    x = (y % x);\n                    y = temp;\n                }\n                if (x != 0)\n                    count += y;\n\n\n            }\n\n\n\n            System.out.println(count);\n            tests --;\n        }\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        s.nextLine();\n        while(s.hasNext()) {\n            int first = s.nextInt();\n            int second = s.nextInt();\n            System.out.println(calculate(first,second));\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint num = in.nextInt();\n\t\twhile(num-->0) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\n\t\t\tint res = 0;\n\n\t\t\twhile(a!=0 && b!=0) {\n\t\t\t\tif(a>=b) {\n\t\t\t\t\tres += a/b;\n\t\t\t\t\ta %= b;\n\t\t\t\t} else {\n\t\t\t\t\tres += b/a;\n\t\t\t\t\tb %= a;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[]args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tint test=sc.nextInt();\n\t\twhile(test-->0){\n\t\t\tlong a=sc.nextLong();\n\t\t\tlong b=sc.nextLong();\n\t\t\tlong count=0;\n\t\t\tlong cnt=0;\n\t\t\twhile(a>0&&b>0){\n\t\t\t\tcount=0;\n\t\t\t\t//System.out.println(a+\" \"+b);\n\t\t\tif(a>b){\n\t\t\tcount+=(a-b)/b;\n\t\t\tif(count!=0){\n\t\t\tcnt+=count;\n\t\t\ta-=b*count;}\n\t\t\telse {\n\t\t\t\tcnt++;\n\t\t\t\ta-=b;\n\t\t\t}\n\t\t\t}\n\t\t\telse{ \n\t\t\t\tcount+=(b-a)/a;\n\t\t\t\tif(count!=0){\n\t\t\t\tcnt+=count;\n\t\t\tb-=a*count;}\n\t\t\t\telse {\n\t\t\t\t\tcnt++;\n\t\t\t\t\tb-=a;\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\tSystem.out.println(cnt);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tsc = new StringTokenizer(br.readLine());\n\t\tint tc = nxtInt();\n\t\twhile (tc-- > 0) {\n\t\t\tint a = nxtInt();\n\t\t\tint b = nxtInt();\n\t\t\tint ans = 0;\n\t\t\twhile (a != b) {\n\t\t\t\tif (a == 0 || b == 0)\n\t\t\t\t\tbreak;\n\t\t\t\tif (a > b) {\n\t\t\t\t\tint div = a / b;\n\t\t\t\t\ta -= b * div;\n\t\t\t\t\tans += div;\n\t\t\t\t} else {\n\t\t\t\t\tint div = b / a;\n\t\t\t\t\tb -= a * div;\n\t\t\t\t\tans += div;\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(ans + (a == b ? 1 : 0));\n\t\t}\n\t\tbr.close();\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        while (t-- > 0) {\n            int a = scan.nextInt();\n            int b = scan.nextInt();\n            int res = 0;\n            while (a != 0 && b != 0) {\n                if (a > b) {\n                    res += (a / b);\n                    a %= b;\n                } else {\n                    res += (b / a);\n                    b %= a;\n                }\n            }\n            System.out.println(res);\n\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        ASubtractions solver = new ASubtractions();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        while(T-->0){\n            int m , n , count=0;\n            m = scanner.nextInt();\n            n = scanner.nextInt();\n            while(m!=0&&n!=0){\n                int tmp;\n                if(m<n) {\n                    tmp = n;\n                    n = m;\n                    m = tmp;\n                }\n                count+=m/n;\n                m = m%n;\n            } \n            if(T!=0)System.out.println(count);\n            else System.out.print(count);\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String []args) throws IOException {\n\t\tFastScanner in  = new FastScanner(System.in);\n\t\tPrintWriter out = \n\t\t\t\tnew PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false); \n\t\tsolve(in, out);\n\t\tin.close();\n\t\tout.close();\n\t}    \n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner (System.in);\n\t\tint testCase = sc.nextInt();\n\n\t\twhile (testCase-- > 0) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint m = sc.nextInt();\n\t\t\tif (n < m) {\n\t\t\t\tint temp = n;\n\t\t\t\tn = m;\n\t\t\t\tm = temp;\n\t\t\t}\t\n\n\t\t\tint ans = gcd (n , m);\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew A();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String... args) throws NumberFormatException,\n\t\tSolution.main(System.in, System.out);\n\t}\n\t\tpublic static void main(InputStream is, OutputStream os)\n\t\t\tPrintWriter pw = new PrintWriter(os);\n\t\t\tScanner sc = new Scanner(is);\n\n\t\t\tint n = sc.nextInt();\n\n\t\t\twhile (n-- > 0) {\n\t\t\t\tint ai = sc.nextInt();\n\t\t\t\tint bi = sc.nextInt();\n\t\t\t\tint retVal = 0;\n\n\t\t\t\twhile (ai > 0 && bi > 0) {\n\t\t\t\t\tif (ai > bi) {\n\t\t\t\t\t\tretVal += ai / bi;\n\t\t\t\t\t\tai = ai % bi;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tretVal += bi / ai;\n\t\t\t\t\t\tbi = bi % ai;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpw.println(retVal);\n\t\t\t}\n\n\t\t\tpw.flush();\n\t\t\tsc.close();\n\t\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint a, b, min, max, result = 0, temp;\n\t\twhile(n-->0){\n\t\t\ta = sc.nextInt();\n\t\t\tb = sc.nextInt();\n\t\t\tmax = Math.max(a, b);\n\t\t\tmin = Math.min(a, b);\n\t\t\tresult = 0;\n\t\t\twhile(true){\n\t\t\t\tresult += max/min;\n\t\t\t\tif(max%min == 0){\n\t\t\t\t\tSystem.out.println(result);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* take the min and the remainder as the previous min. */\n\t\t\t\ttemp = max;\n\t\t\t\tmax = min;\n\t\t\t\tmin = temp%min;\n\t\t\t}\n\t\t}\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tScanner cin = new Scanner(System.in);\n\t\t\n\t\tint t, n, m;\n\t\t\n\t\tt = cin.nextInt();\n\t\t\n\t\twhile(t > 0) {\n\t\t\tt--;\n\t\t\tint sum = 0;\n\t\t\tn = cin.nextInt();\n\t\t\tm = cin.nextInt();\n\t\t\twhile(n > 0 && m > 0) {\n\t\t\t\tif(n < m) {\n\t\t\t\t\tint k = n;\n\t\t\t\t\tn = m;\n\t\t\t\t\tm = k;\n\t\t\t\t}\n\t\t\t\tsum += n / m; n %= m;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputReader r = new InputReader(System.in);\n        int n = r.nextInt();\n        while (n-- > 0) {\n            int a = r.nextInt();\n            int b = r.nextInt();\n            int res = 0;\n            while (a > 0 && b > 0) {\n                if (a > b) {\n                    int div = a / b;\n                    a -= div * b;\n                    res += div;\n                } else {\n                    int div = b / a;\n                    b -= div * a;\n                    res += div;\n                }\n            }\n            System.out.println(res);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        s.nextLine();\n        while(s.hasNext()) {\n            int first = s.nextInt();\n            int second = s.nextInt();\n            System.out.println(calculate(first,second));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint T = in.nextInt();\n\t\twhile(T --> 0) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tint count = 0;\n\t\t\t\n\t\t\tint[] arr = {a, b};\n\t\t\tArrays.sort(arr);\n\t\t\twhile(arr[0] != 0) {\n\t\t\t\tcount += arr[1] / arr[0];\n\t\t\t\tarr[1] = arr[1] % arr[0];\n\t\t\t\t\n\t\t\t\tArrays.sort(arr);\n\t\t\t}\n\t\t\tSystem.out.println(count);\n\t\t}\n\t\tin.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        ASubtractions solver = new ASubtractions();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\twhile (n-- > 0) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tint k = 0;\n\t\t\twhile (a != 0 && b != 0) {\n\t\t\t\tif (a > b) {\n\t\t\t\t\tint t = a / b;\n\t\t\t\t\tk += t;\n\t\t\t\t\ta = a - b * t;\n\t\t\t\t} else {\n\t\t\t\t\tint t = b / a;\n\t\t\t\t\tk += t;\n\t\t\t\t\tb = b - a * t;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(k);\n\t\t}\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) {\n\t\tScanner in=new Scanner(System.in);\n\t\tint t=in.nextInt();\n\t\twhile(t--!=0)\n\t\t{\n\t\t    int a=in.nextInt();\n\t\t    int b=in.nextInt();\n\t\t    int min=Math.min(a,b);\n\t\t    int max=Math.max(a,b);\n\t\t    int res=0;\n\t\t    while(min!=0)\n\t\t    {\n\t\t        res=res+max/min;\n\t\t        int temp=min;\n\t\t        min=max%min;\n\t\t        max=temp;\n\t\t    }\n\t\t    System.out.println(res);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n        Reader sn = new Reader();\n        Print p = new Print();\n        int n = sn.nextInt();\n        while((n--) > 0){\n             int a = sn.nextInt();\n             int b = sn.nextInt();\n             int small = Math.min(a , b);\n             int large = Math.max(a , b);\n             long steps = 0;\n             while(small != 0){\n                  steps += (long)(large/small);\n                  int large1 = small;\n                  small = large % small;\n                  large = large1;\n             }\n             p.printLine(Long.toString(steps));\n        }\n        p.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc=new Scanner(System.in);\n\t\tint t=sc.nextInt();\n\t\twhile (t>0) {\n\t\t\tlong a=sc.nextLong();\n\t\t\tlong b=sc.nextLong();\n\t\t\tint op=0;\n\t\t\tif (a>b) {\n\t\t\t\twhile (a%b!=0) {\n\t\t\t\t\top+=a/b;\n\t\t\t\t\ta=a%b;\n\t\t\t\t\tlong c=b;\n\t\t\t\t\tb=a;\n\t\t\t\t\ta=c;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\top+=a/b;\n\t\t\t}\n\t\t\telse{\n\t\t\t\twhile (b%a!=0) {\n\t\t\t\t\top+=b/a;\n\t\t\t\t\tb=b%a;\n\t\t\t\t\tlong c=a;\n\t\t\t\t\ta=b;\n\t\t\t\t\tb=c;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\top+=b/a;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(op);\n\t\t\tt--;\n\t\t}\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint tests = scan.nextInt();\n\n\t\twhile (tests > 0) {\n\n\t\t\ttests--;\n\n\t\t\tint first = scan.nextInt();\n\t\t\tint second = scan.nextInt();\n\n\t\t\tint count = 0;\n\t\t\twhile (first > 0 && second > 0) {\n\t\t\t\t\n\t\t\t\tif (first < second) {\n\n\t\t\t\t\tcount += second / first;\n\t\t\t\t\tsecond = second % first;\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tcount += first / second;\n\t\t\t\t\tfirst = first % second;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(count);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner in = new Scanner(System.in);\n\t\tint t;\n\t\tt=in.nextInt();\n\t\twhile(t!=0)\n\t\t{\n\t\t\tint a=in.nextInt();\n\t\t\tint b=in.nextInt();\n\t\t\tint total=0,neww=0;\n\t\t\tif(a%b==0)\n\t\t\t{\n\t\t\t\tSystem.out.println(a/b);\n\t\t\t}\n\t\t\telse if(b%a==0)\n\t\t\t{\n\t\t\t\tSystem.out.println(b/a);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\twhile(a!=0 && b!=0)\n\t\t\t{\n\t\t\t\tif(a>b)\n\t\t\t\t{\n\t\t\t\t\ttotal=total+(a/b);\n\t\t\t\t\ta=a%b;\n\t\t\t\t\tif(a==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(b>a)\n\t\t\t\t{\n\t\t\t\t\ttotal=total+(b/a);\n\t\t\t\t\tb=b%a;\n\t\t\t\t\tif(b==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(total);\n\t\t\t}\n\t\tt--;\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        ASubtractions solver = new ASubtractions();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "     public static void main(String []args) {\n      Scanner sc=new Scanner(System.in);\n      int n=sc.nextInt();\n      while(n-->0)\n      {\n          int a=sc.nextInt();\n          int b=sc.nextInt();\n          int ans=f(a,b);\n          System.out.println(ans);\n      }\n     }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException\t{\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint qq = readInt();\n\t\twhile(qq-- > 0)\t{\n\t\t\tpw.println(solve(readInt(), readInt()));\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        \n        while(n-->0){\n            int a=sc.nextInt();\n            int b=sc.nextInt();\n            \n            int c=0;\n            while(a!=0 && b!=0){\n                if(a>b){\n                    int t=a;\n                    a=b;\n                    b=t;\n                }\n                c+=b/a;\n                b=b%a;\n            }\n            System.out.println(c);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Template().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\t\tSolver solver = new Solver(in, out);\n\n\t\tsolver.solve();\n        in.close();\n        out.flush();\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tint t=sc.nextInt();\n\t\twhile(t>0)\n\t\t{\n\t\t\tlong a=sc.nextLong(),b=sc.nextLong();\n\t\t\tout.println(solve(a,b));\n\t\t\tt--;\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t    Scanner sc=new Scanner(System.in);\n\t    int n=sc.nextInt();\n\t    while(n-->0){\n\t        long a=sc.nextLong(),b=sc.nextLong();\n\t        long ans=0,cur=0;\n\t        while(a>0 && b>0){\n\t            if(b>a)a=a+b-(b=a);\n\t            cur=(a/b);\n\t            ans+=cur;\n\t            a-=(cur*b);\n\t        }\n\t        System.out.println(ans);\n\t    }\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int numberOfTests = scanner.nextInt();\n        while (numberOfTests-- > 0) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n            int[] res = new int[1];\n            compute(a, b, res);\n            System.out.println(res[0]);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        long n = in.nextLong(), m = in.nextLong();\n        out.print(m / n + (m % n == 0 ? 0 : 1));\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        long n = sc.nl();\n        long k = sc.nl();\n        long ans = (n+k-1)/n;\n        System.out.println(ans);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        l = sc.nextLong();\n        r = sc.nextLong();\n        if (found(l, l + 1, l + 2))\n            System.out.println(A + \" \" + B + \" \" + C);\n        else\n            System.out.println(-1);\n    }\n", "complexity": "constant"}
{"code": "public static void main(String[] args) {\n\tScanner sc=new Scanner(System.in);\n\tlong a=sc.nextLong();\n\tlong b=sc.nextLong();\n\t\n\tif(b-a>(long)2){\n\t\tif(a%(long)2==0){\n\t\t\tSystem.out.print(a+\" \"+(a+1)+\" \"+(a+2));\n\t\t\treturn;\n\t\t}else{\n\t\t\tSystem.out.print(a+1+\" \"+(a+2)+\" \"+(a+3));\n\t\t\treturn;\n\t\t}\n\t\t\n\t}else{\n\t\tif(b-a<=(long)1){\n\t\tSystem.out.println(-1);\n\t\treturn;\n\t\t}\n\t\tif(b-a==(long)2){\n\t\t\tif(a%(long)2==0){\n\t\t\t\tSystem.out.print(a+\" \"+(a+1)+\" \"+(a+2));\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tSystem.out.print(-1);\n\t\t\t\treturn;\n\t\t\t}\t\n\t\t\t\n\t\t\t}\n\t}\n\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter writer = new PrintWriter(System.out);\n        String[] input = reader.readLine().split(\" \");\n\n        long l = Long.parseLong(input[0]);\n        long r = Long.parseLong(input[1]);\n        if (l % 2 == 0) {\n            if (r >= l + 2) {\n                writer.println(l + \" \" + (l + 1) + \" \" + (l + 2));\n            } else {\n                writer.println(-1);\n            }\n        } else {\n            if (r >= l + 3) {\n                writer.println((l + 1) + \" \" + (l + 2) + \" \" + (l + 3));\n            } else {\n                writer.println(-1);\n            }\n        }\n\n        writer.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n       \n        Scanner in = new Scanner(System.in);\n        \n        long l = in.nextLong();\n        long r = in.nextLong();\n        \n        if(r-l < 2 ){\n            System.out.println(\"-1\");\n        }\n        \n        else if(r-l == 2 && l %2 ==1){\n            System.out.println(\"-1\");\n        }\n        else{\n            \n            \n            if(l%2 == 0){\n                System.out.println(l+ \" \"+(l+1)+\" \"+(l+2));\n                \n            }\n            else{\n                System.out.println((l+1)+ \" \"+(l+2)+\" \"+(l+3));\n            }\n        }\n            \n        }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer token = new StringTokenizer(in.readLine());\n        long l = Long.parseLong(token.nextToken());\n        long r = Long.parseLong(token.nextToken());\n        \n        \n        if(r-l<2) {\n            System.out.println(-1);\n            return;\n        }\n        if(l%2==1&&r-l<3) {\n            System.out.println(-1);\n            return;\n        }\n        if(l%2==0) {\n            System.out.println(l+\" \"+(l+1)+\" \"+(l+2));\n            return;\n        }\n        if(l%2==1) {\n            System.out.println((l+1)+\" \"+(l+2)+\" \"+(l+3));\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long l = sc.nextLong();\n        long r = sc.nextLong();\n        if (r - l <= 1) {\n            System.out.println(\"-1\");\n        } else if (r - l >= 3) {\n            if (l % 2 == 0) {\n                System.out.println(l + \" \" + (l + 1) + \" \" + (l + 2));\n            } else {\n                System.out.println((l + 1) + \" \" + (l + 2) + \" \" + (l + 3));\n            }\n        } else {\n            long g1 = GCD(l, (l + 1));\n            long g2 = GCD((l + 1), (l + 2));\n            long g3 = GCD(l, r);\n            if (g1 == 1 && g2 == 1 && g3 != 1) {\n                System.out.println(l + \" \" + (l + 1) + \" \" + r);\n            } else {\n                System.out.println(\"-1\");\n            }\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n  B jk = new B();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String [] args)throws IOException{\n\t\tk = new BufferedReader(new InputStreamReader(System.in));\n\t\tz = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\t\n\t\t\n\t        String[] dat = k.readLine().split(\" \");\n\n\t        long l = Long.parseLong(dat[0]);\n\t        long r = Long.parseLong(dat[1]);\n\t\t\t\n\t\t\tif(r-l<=1){\n\t\t\t\tz.write(-1+\"\\n\");\n\t\t\t}\n\t\t\telse if(r-l == 2){\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif((l&1)!=0){\n\t\t\t\t\tz.write(-1+\"\\n\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tz.write(l+\" \"+(l+1)+\" \"+r+\"\\n\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif((l&1)==0){\n\t\t\t\t\tz.write(l+\" \"+(l+1)+\" \"+(l+2)+\"\\n\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tz.write((l+1)+\" \"+(l+2)+\" \"+(l+3)+\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\tz.flush();\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String s[] = in.readLine().split(\" \");\n        long r = Long.parseLong(s[0]);\n        long l = Long.parseLong(s[1]);\n        if (r % 2 == 0) {\n            if (l - r+1 < 3) {\n                out.println(-1);\n            } else {\n                out.println(r + \" \" + (r + 1) + \" \" + (r + 2));\n            }\n        } else {\n            if (l - r+1 < 4) {\n                out.println(-1);\n            } else {\n                out.println((r + 1) + \" \" + (r + 2) + \" \" + (r + 3));\n            }\n\n        }\n        out.close();\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) throws Exception\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] spl = in.readLine().split(\" \");\n\t\tlong l = Long.parseLong(spl[0]);\n\t\tlong r = Long.parseLong(spl[1]);\n\t\tif(l+2 <= r && l%2==0)\n\t\t{\n\t\t\tSystem.out.println(l+\" \"+(l+1)+\" \"+(l+2));\n\t\t}\n\t\telse if(l+3<=r && (l+1)%2==0)\n\t\t{\n\t\t\tSystem.out.println((l+1)+\" \"+(l+2)+\" \"+(l+3));\n\t\t}\n\t\telse System.out.println(-1);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String... args) throws NumberFormatException,\n        Solution.main(System.in, System.out);\n    }\n        public static void main(InputStream is, OutputStream os)\n            PrintWriter pw = new PrintWriter(os);\n            Scanner sc = new Scanner(is);\n\n            long l = sc.nextLong();\n            long r = sc.nextLong();\n\n            long interval = r-l;\n\n            if(interval == 0 || interval == 1 || (interval == 2 && l % 2 ==1 )){\n                pw.println(-1);\n            } else {\n                if(l % 2 == 1){\n                    l++;\n                }\n                pw.print(l);\n                pw.print(\" \");\n                pw.print(l+1);\n                pw.print(\" \");\n                pw.print(l+2);\n            }\n\n\n\n            pw.flush();\n            sc.close();\n        }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new A483(), \"\", 256 * (1L << 20)).start();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc =new Scanner (System.in);\n        long a=sc.nextLong(); long b=sc.nextLong();\n        \n        if(b-a <=1)\n        \tSystem.out.println(\"-1\");\n        else if(b-a==2 && a%2==1)\n        \tSystem.out.println(\"-1\");\n        else\n        {\n        \tif(a%2==1)\n        \t\tSystem.out.println((a+1)+\" \"+(a+2)+\" \"+(a+3));\n        \telse\n        \t\tSystem.out.println((a)+\" \"+(a+1)+\" \"+(a+2));\n        }\n        sc.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n        Scanner sc = new Scanner(System.in);\n        long l= sc.nextLong();\n        long r = sc.nextLong();\n        if(l%2==0){\n            if(r>=l+2){\n                System.out.println(l + \" \" + (l+1) + \" \" + (l+2));\n            }\n            else{\n                System.out.println(-1);\n            }\n        }\n        else{\n            if(r>=l+3){\n                System.out.println((l+1) + \" \" + (l+2) + \" \" + (l+3));\n            }\n            else{\n                System.out.println(-1);\n            }\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        BigInteger l = sc.nextBigInteger();\n        BigInteger r = sc.nextBigInteger();\n        \n        if (r.subtract(l).compareTo(new BigInteger(\"2\")) == -1) {\n            System.out.println(\"-1\");\n        } else if (r.subtract(l).compareTo(new BigInteger(\"2\")) == 0 && l.mod(new BigInteger(\"2\")) != BigInteger.ZERO) {\n            System.out.println(\"-1\");\n        } else if (l.mod(new BigInteger(\"2\")) != BigInteger.ZERO) {\n            System.out.println(l.add(BigInteger.ONE) + \" \" + l.add(BigInteger.ONE).add(BigInteger.ONE) + \" \" + l.add(BigInteger.ONE).add(BigInteger.ONE).add(BigInteger.ONE));\n        } else {\n            System.out.println(l + \" \" + l.add(BigInteger.ONE) + \" \" + l.add(BigInteger.ONE).add(BigInteger.ONE));\n        }\n    }\n", "complexity": "constant"}
{"code": "public static void main(String[] args) throws NumberFormatException, IOException {\n    BufferedReader br = new BufferedReader (new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        long b =  Long.parseLong(st.nextToken());\n        long c =  Long.parseLong(st.nextToken());\n        if(c-b<2 ||((c-b==2)&& GCD(c,b)==1) ){\n            System.out.println(\"-1\");\n        }else{\n                if(b%2==0 ){\n                    System.out.println(b+\" \"+(b+1)+\" \"+(b+2));\n            }else\n                System.out.println((b+1)+\" \"+(b+2)+\" \"+(b+3));\n        \n    \n    \n}\n        \n\n        \n\n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n\t\ttry {\n\t\t\tString[] str = reader.readLine().split(\" \");\n\t\t\tBigInteger b1 = new BigInteger(str[0]);\n\t\t\tBigInteger b2 = new BigInteger(str[1]);\n\n\t\t\tif(b2.subtract(b1).compareTo(new BigInteger(\"1\"))<1){\n\t\t\t\tSystem.out.println(-1);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(b2.subtract(b1).compareTo(new BigInteger(\"2\"))==0){\n\t\t\t\tBigInteger b = b1.add(new BigInteger(\"1\"));\n\t\t\t\tBigInteger c = b1.add(new BigInteger(\"2\"));\n\n\t\t\t\tif(!b1.gcd(c).equals(new BigInteger(\"1\"))){\n\t\t\t\t\tSystem.out.println(b1.toString()+\" \"+b.toString()+\" \"+c.toString());\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tBigInteger b = b1.add(new BigInteger(\"1\"));\n\t\t\tBigInteger c = b1.add(new BigInteger(\"2\"));\n\t\t\tBigInteger d = b1.add(new BigInteger(\"3\"));\n\n\t\t\tif(b1.remainder(new BigInteger(\"2\")).equals(new BigInteger(\"1\"))){\n\t\t\t\tSystem.out.println(b.toString()+\" \"+c.toString()+\" \"+d.toString());\n\t\t\t}else{\n\t\t\t\tSystem.out.println(b1.toString()+\" \"+b.toString()+\" \"+c.toString());\n\t\t\t}\n\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\tString[] lr = sc.nextLine().split(\" \");\n\t\tlong l = Long.valueOf(lr[0]);\n\t\tlong r = Long.valueOf(lr[1]);\n\n\t\tif (r - l <= 1 || (l == 1 && (r - l) == 2)\n\t\t\t\t|| (l % 2 != 0 && (r - l) < 3))\n\t\t\tSystem.out.println(-1);\n\t\telse {\n\t\t\tif (l == 1)\n\t\t\t\tSystem.out.println(2 + \" \" + 3 + \" \" + 4);\n\t\t\telse {\n\t\t\t\tif (l % 2 == 0) {\n\t\t\t\t\tString res = \"\";\n\t\t\t\t\tres += l + \" \";\n\t\t\t\t\tres += (l + 1) + \" \";\n\t\t\t\t\tres += (l + 2) + \" \";\n\t\t\t\t\tres = res.trim();\n\t\t\t\t\tSystem.out.println(res);\n\t\t\t\t} else {\n\t\t\t\t\tString res = \"\";\n\t\t\t\t\tres += (l + 1) + \" \";\n\t\t\t\t\tres += (l + 2) + \" \";\n\t\t\t\t\tres += (l + 3) + \" \";\n\t\t\t\t\tres = res.trim();\n\t\t\t\t\tSystem.out.println(res);\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputScanner scanner = new InputScanner();\n        try {\n            long l = scanner.nextLong();\n            long r = scanner.nextLong();\n            if ((r - l) < 2) {\n                System.out.println(\"-1\");\n                return;\n            }\n\n            if (l % 2 == 0) {\n                long a = l;\n                long b = l + 1;\n                long c = l + 2;\n                System.out.println(a + \" \" + b + \" \" + c);\n            } else if (r%2==0){\n                long a = r;\n                long b = r-1;\n                long c = r-2;\n                System.out.println(c + \" \" + b + \" \" + a);\n            } else {\n                l++;\n                if ((r - l) < 2) {\n                    System.out.println(\"-1\");\n                    return;\n                }\n                long a = l;\n                long b = l + 1;\n                long c = l + 2;\n                System.out.println(a + \" \" + b + \" \" + c);\n            }\n        } catch (IOException e) {\n\n        }\n\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong l = sc.nextLong(), r = sc.nextLong();\n\t\tif (l % 2 == 0 && r - l >= 2) {\n\t\t\tSystem.out.println(l + \" \" + (l + 1) + \" \" + (l + 2));\n\t\t} else if (l % 2 == 1 && r - l >= 3) {\n\t\t\tSystem.out.println(l + 1 + \" \" + (l + 2) + \" \" + (l + 3));\n\t\t} else {\n\t\t\tSystem.out.println(-1);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner datain = new Scanner(System.in);\n\t\tlong l=datain.nextLong();\n\t\tlong r=datain.nextLong();\n\t\tif(r-l<2){System.out.print(-1);}else{\n\t\t\tif(((r-l)==2)&&(l%2==1)){System.out.print(-1);}else{\n\t\t\t\tif((l%2)==0){System.out.print(\"\"+l+\" \"+(l+1)+\" \"+(l+2));}else{\n\t\t\t\t\tSystem.out.print(\"\"+(l+1)+\" \"+(l+2)+\" \"+(l+3));\n\t\t\t\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer tokenizer=  new StringTokenizer(br.readLine());\n\t\tBigInteger left = new BigInteger(tokenizer.nextToken());\n\t\tBigInteger right= new BigInteger(tokenizer.nextToken());\n\t\tBigInteger val= (right.subtract(left)).add(new BigInteger(\"\"+1));\n\t\tif(val.intValue()<3){\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t\t\n\t\t}\n\n\n\t\tBigInteger a, b, c;\n\t\tBigInteger i=left;\n\t\twhile(i.intValue()<=right.intValue()){\n\t\t\tBigInteger temp1=i;  //a\n\t\t\tBigInteger temp2= i.add(new BigInteger(\"\"+1));//b\n\t\t\tBigInteger j=temp2.add(new BigInteger(\"\"+1));\n\t\t\twhile(j.intValue()<=right.intValue()){\n\t\t\t\tBigInteger b1= temp2;\n\t\t\t\tBigInteger b2 =j;\n\t\t\t\tBigInteger b3 = temp1;\n\t\t\t\tBigInteger gcd= b1.gcd(b2);\n\t\t\t\tif(gcd.intValue()==1){\n\t\t\t\t\tBigInteger gcd2 =b2.gcd(b3);\n\t\t\t\t\tif(gcd2.intValue() !=1){\n\t\t\t\t\t\ta=b3;\n\t\t\t\t\t\tb= b1;\n\t\t\t\t\t\tc= b2;\n\t\t\t\t\t\tSystem.out.print(a+\" \"+b+\" \"+c+\" \");\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\treturn ;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tj=j.add(new BigInteger(\"\"+1));\n\t\t\t}\n\t\t\ti=i.add(new BigInteger(\"\"+1));\n\n\t\t}\n\t\tSystem.out.println(-1);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */\n        Scanner t=new Scanner(System.in);\n        long l=t.nextLong();\n        long r=t.nextLong();\n        if(r-l<2) System.out.println(-1);\n        else if(r-l<3 && l%2!=0){\n            if(l%3!=0) System.out.println(-1);\n            else if ((l+3)%2==0) System.out.println(-1);\n                else System.out.println(l+\" \"+(l+1)+\" \"+(l+3));\n        } else{\n            while (l%2!=0) l++;\n            System.out.println(l+\" \"+(l+1)+\" \"+(l+2));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException,\n\t\tLocale.setDefault(Locale.US);\n\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n\t\t\t\tSystem.out)));\n\t\tlong a = nextLong();\n\t\tlong b = nextLong();\n\t\tif (a % 2 == 1 && b - a == 2 || b - a == 1 || a == b) {\n\t\t\tpw.print(-1);\n\t\t} else {\n\t\t\tif (a % 2 == 1)\n\t\t\t\ta++;\n\t\t\tpw.print(a + \" \" + (a + 1) + \" \" + (a + 2));\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringBuilder qq = new StringBuilder();\n\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\n\t\t// int n = Integer.parseInt(in.readLine());\n\t\tString y[] = in.readLine().split(\" \");\n\t\tlong n = Long.parseLong(y[0]);\n\t\tlong m = Long.parseLong(y[1]);\n\n\t\tif (m - n < 2) {\n\t\t\tSystem.out.println(-1);\n\t\t} else if (m - n == 2) {\n\n\t\t\tif (gcd(n, m) != 1)\n\n\t\t\t\tSystem.out.println(n + \" \" + (n + 1) + \" \" + (n + 2));\n\n\t\t\telse\n\t\t\t\tSystem.out.println(-1);\n\t\t} else {\n\t\t\tif (n % 2 == 0)\n\t\t\t\tSystem.out.println(n + \" \" + (n + 1) + \" \" + (n + 2));\n\t\t\telse\n\t\t\t\tSystem.out.println((n + 1) + \" \" + (n + 2) + \" \" + (n + 3));\n\t\t}\n\n\t\tout.close();\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\nString x[]=br.readLine().split(\" \");\n\t\tlong l=Long.parseLong(x[0]);\n\t\tlong r=Long.parseLong(x[1]);\n\t\tif(l%2!=0)\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\tif(l+2>r)\n\t\t{\n\t\t\tSystem.out.println(\"-1\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(l+\" \"+(l+1)+\" \"+(l+2));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        long l = in.nextLong();\n        long r = in.nextLong();\n\n        if (l % 2 == 1) {\n            l++;\n        }\n\n        if (r - l < 2) {\n            out.print(-1);\n        }\n        else {\n            out.print(l + \" \" + (l + 1) + \" \" + (l + 2));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc= new Scanner(System.in);\n\t\tlong l=sc.nextLong(),r=sc.nextLong();\n\t\tif (l%2==0&&r-l>=2) System.out.print(l+\" \"+(l+1)+\" \"+(l+2));\n\t\telse if (l%2==1&&r-l>=3) System.out.print((l+1)+\" \"+(l+2)+\" \"+(l+3));\n\t\telse System.out.print(\"-1\");\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        long r,l;\n          r = sc.nextLong();\n          l = sc.nextLong();\n\n\n            if ((r+2)>l) { System.out.print(\"-1\"); return;}\n            if ((r % 2) == 0)   {\n              System.out.print(r);\n                System.out.print(\" \");\n                System.out.print(r+1);\n                System.out.print(\" \");\n                System.out.print(r+2);return; }\n               if((r+3)<=l )\n                {  System.out.print(r+1);\n                System.out.print(\" \");\n                  System.out.print(r+2);\n                System.out.print(\" \");\n                  System.out.print(r+3);return; }\n             System.out.print(\"-1\");\n\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\t//Scanner in = new Scanner(new File(\"practice.in\"));\n\t\tScanner in = new Scanner(System.in);\n\n\t\tString str = in.nextLine();\n\t\tlong n = Long.parseLong(str.substring(0, str.indexOf(\" \")));\n\t\tlong m = Long.parseLong(str.substring(str.indexOf(\" \") + 1));\n\t\tif(m - n < 2) {\n\t\t\tSystem.out.println(\"-1\");\n\t\t} else {\n\t\t\tif(m - n == 2 && m % 2 == 1) {\n\t\t\t\tSystem.out.println(\"-1\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println((n + n % 2) + \" \" + (n + 1 + n % 2) + \" \" + (n + 2 + n % 2));\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tlong l = in.nextLong();\n\t\tlong r = in.nextLong();\n\t\tin.close();\n\t\tif (r - l < 2) {\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\tif ((r - l > 2)||(l%2 ==0 )) {\n\t\t\tlong s = l + l%2;\n\t\t\tSystem.out.println(s+\" \"+(s+1)+\" \"+(s+2));\n\t\t} else {\n\t\t\tif (l%2 == 1) {\n\t\t\t\tSystem.out.println(-1);\n\t\t\t} else{\n\t\t\t\tlong s = l;\n\t\t\t\tSystem.out.println(s+\" \"+(s+1)+\" \"+(s+2));\n\t\t\t}\n\t\t}\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString [] line = br.readLine().split(\" \");\n\t\tlong l = Long.parseLong(line[0]);\n\t\tlong r = Long.parseLong(line[1]);\n\t\tif(r-l < 2 || ((r-l == 2) && (l % 2 == 1)))\n\t\t\tSystem.out.println(\"-1\");\n\t\telse\n\t\t{\n\t\t\tLong start = l + (l%2); \n\t\t\tSystem.out.println(start + \" \" + (start + 1) + \" \" + (start + 2));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tlong r = input.nextLong();\n\t\tlong l = input.nextLong();\n\t\tif((l - r + 1) < 3){\n\t\t\tSystem.out.println(-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(r % 2 == 0)\n\t\t\t\tSystem.out.println(r + \" \" + (r +1)+ \" \" + (r+2) );\n\t\t\telse{\n\t\t\t\tif(l -r + 1 >3){\n\t\t\t\t\t++r;\n\t\t\t\t\tSystem.out.println(r + \" \" + (r +1)+ \" \" + (r+2) );\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t }\n\t\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) \n        // Set up scanner\n        Scanner sc = new Scanner(System.in); \n        // System.out.println(\"Enter l\");\n        long l = sc.nextLong();\n        // System.out.println(\"Enter r\");\n        long r = sc.nextLong();\n        \n        if (l==r || l+1 == r)\n        {\n            System.out.println(-1);\n            return;\n        }\n        if (l+2 == r && l%2 == 1)\n        {\n            System.out.println(-1);\n            return;\n        }\n        if (l%2 == 0)\n        {\n            System.out.println(l + \" \" + (l+1) + \" \" + (l+2));\n            return;\n        }\n        System.out.println((l+1) + \" \" + (l+2) + \" \" + (l+3));\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tBigInteger l = new BigInteger(scanner.next());\n\t\tBigInteger r = new BigInteger(scanner.next());\n\t\tif(r.subtract(l).intValue() < 2) {\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\tBigInteger a = l.abs(),b,c;\n\t\t\n\t\tBigInteger toothless = r.subtract(BigInteger.valueOf(1));\n\t\twhile(a.compareTo(toothless) == -1) {\n\t\t\tb = l.add(BigInteger.valueOf(1));\n\t\t\twhile(b.compareTo(r) == -1) {\n\t\t\t\tc = l.add(BigInteger.valueOf(2));\n\t\t\t\twhile(c.compareTo(r) == -1 || c.compareTo(r) == 0) {\n\t\t\t\t\tif(gcd(a,b) == 1 && gcd(b,c) == 1 && gcd(a,c) != 1) {\n\t\t\t\t\t\tSystem.out.println(a + \" \" + b + \" \" + c);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc = c.add(BigInteger.valueOf(1));\n\t\t\t\t}\n\t\t\t\tb = b.add(BigInteger.valueOf(1));\n\t\t\t}\n\t\t\ta = a.add(BigInteger.valueOf(1));\n\t\t}\n\t\tSystem.out.println(-1);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tBigInteger l = sc.nextBigInteger();\n\t\tBigInteger r = sc.nextBigInteger();\n\t\tBigInteger a = l.add(BigInteger.ZERO);\n\t\twhile (a.compareTo(r) < 0) {\n\t\t\tBigInteger b = a.add(BigInteger.ONE);\n\t\t\twhile (b.compareTo(r) < 0) {\n\t\t\t\ttry {\n\t\t\t\t\ta.modInverse(b);\n\t\t\t\t} catch (ArithmeticException e) {\n\t\t\t\t\tb = b.add(BigInteger.ONE);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tBigInteger c = b.add(BigInteger.ONE);\n\t\t\t\twhile (c.compareTo(r) <= 0) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tb.modInverse(c);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\ta.modInverse(c);\n\t\t\t\t\t\t} catch (ArithmeticException e) {\n\t\t\t\t\t\t\tSystem.out.printf(\"%s %s %s\\n\", a.toString(), b.toString(), c.toString());\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (ArithmeticException e) {\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tc = c.add(BigInteger.ONE);\n\t\t\t\t}\n\t\t\t\tb = b.add(BigInteger.ONE);\n\t\t\t}\n\t\t\ta = a.add(BigInteger.ONE);\n\t\t}\n\t\tSystem.out.println(\"-1\");\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[]args) {\n        Scanner in = new Scanner(System.in);\n        long l = in.nextLong();\n        long r = in.nextLong();\n        if(r - l < 2) System.out.println(-1);\n        else {\n            if(l % 2 == 0)\n                System.out.println(l + \" \" + (l+1) + \" \" + (l+2));\n            else {\n                if(r - l < 3) System.out.println(-1);\n                else\n                    System.out.println((l+1) + \" \" + (l+2) + \" \" + (l+3));\n            }\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\t\t\n\t\tnew TaskA().solve();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tlong l = scan.nextLong();\n\t\tlong r = scan.nextLong();\n\t\t\n\t\tlong diff = r-l;\n\t\tboolean exists = false;\n\t\tif(diff >= 3){\n\t\t\tif(l%2 == 1){\n\t\t\t\tl++;\n\t\t\t}\n\t\t\texists = true;\n\t\t} else if(diff == 2 && l%2 == 0){\n\t\t\texists = true;\n\t\t} else if(diff == 2 && gcd(l, r) > 1){\n\t\t\texists = true;\n\t\t}\n\t\t\n\t\tif(!exists){\n\t\t\tSystem.out.println(\"-1\");\n\t\t} else {\n\t\t\tSystem.out.println(l + \" \" + (l+1) + \" \" + (l+2));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        \n        long a=sc.nextLong();\n        long b=sc.nextLong();\n        \n        if(b-a<2){\n            System.out.println(-1);\n        }else if(b-a==2 && a%2==1){\n            System.out.println(-1);\n        }else if(b-a==2 && a%2==0){\n            System.out.println(a+\" \"+(a+1)+\" \"+(a+2));\n        }else{\n            if(a%2==0){\n                System.out.println(a+\" \"+(a+1)+\" \"+(a+2));\n            }else{\n                System.out.println((a+1)+\" \"+(a+2)+\" \"+(a+3));\n            }\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tlong l = in.nextLong();\n\t\tlong r = in.nextLong();\n\t\tlong a = 0;\n\t\tlong b = 0;\n\t\tlong c = 0;\n\t\tif (r - l < 2)\n\t\t\tSystem.out.println(-1);\n\t\telse if (r - l < 3 && l % 2 == 1)\n\t\t\tSystem.out.println(-1);\n\t\telse {\n\t\t\tif (l % 2 == 0) {\n\t\t\t\ta = l;\n\t\t\t\tb = l + 1;\n\t\t\t\tc = l + 2;\n\t\t\t} else {\n\t\t\t\tif (l == 1) {\n\t\t\t\t\ta = 2;\n\t\t\t\t\tb = 3;\n\t\t\t\t\tc = 4;\n\t\t\t\t} else {\n\t\t\t\t\ta = l + 1;\n\t\t\t\t\tb = l + 2;\n\t\t\t\t\tc = l + 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(a + \" \" + b + \" \" + c);\n\t\t}\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        \n        long a=sc.nextLong();\n        long b=sc.nextLong();\n        \n        if(b-a<2){\n            System.out.println(-1);\n        }else if(b-a==2 && a%2==1){\n            System.out.println(-1);\n        }else if(b-a==2 && a%2==0){\n            System.out.println(a+\" \"+(a+1)+\" \"+(a+2));\n        }else{\n            if(a%2==0){\n                System.out.println(a+\" \"+(a+1)+\" \"+(a+2));\n            }else{\n                System.out.println((a+1)+\" \"+(a+2)+\" \"+(a+3));\n            }\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String [] args)throws IOException{\n\t\tk = new BufferedReader(new InputStreamReader(System.in));\n\t\tz = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\t\n\t\t\n\t        String[] dat = k.readLine().split(\" \");\n\n\t        long l = Long.parseLong(dat[0]);\n\t        long r = Long.parseLong(dat[1]);\n\t\t\t\n\t\t\tif(r-l<=1){\n\t\t\t\tz.write(-1+\"\\n\");\n\t\t\t}\n\t\t\telse if(r-l == 2){\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif((l&1)!=0){\n\t\t\t\t\tz.write(-1+\"\\n\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tz.write(l+\" \"+(l+1)+\" \"+r+\"\\n\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(l%2==0){\n\t\t\t\t\tz.write(l+\" \"+(l+1)+\" \"+(l+2)+\"\\n\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tz.write((l+1)+\" \"+(l+2)+\" \"+(l+3)+\"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\tz.flush();\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        System.out.println(new Counterexample().solve());\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] arg) {\n    A o = new A();\n    o.run();\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tlong l = sc.nextLong();\n\t\tlong h = sc.nextLong();\n\t\t\n\t\tsc.close();\n\t\t\n\t\tif(h-l<2) {\n\t\t\tSystem.out.println(-1);\n\t\t\treturn ;\n\t\t}\n\t\t\n\t\tif(h-l==2 && l%2==1) {\n\t\t\tSystem.out.println(-1);\n\t\t\treturn ;\n\t\t}\n\t\t\n\t\tif(l%2==1) {\n\t\t\t++l;\n\t\t}\n\t\t\n\t\tSystem.out.printf(\"%d %d %d\\n\",l,l+1L,l+2L);\n\t}\n", "complexity": "constant"}
{"code": "  public static void main(String [] args) throws IOException {\n    // makes the reader and writer\n    BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n    PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n    \n    // read in \n    StringTokenizer st = new StringTokenizer(f.readLine());\n    BigInteger l = new BigInteger(st.nextToken());\n    BigInteger r = new BigInteger(st.nextToken());\n    \n    // write\n    if (r.subtract(l).intValue()<2 || (r.subtract(l).intValue()==2 && r.mod(new BigInteger(\"2\")).intValue()==1)) out.println(-1);\n    else out.println(l.add(l.mod(new BigInteger(\"2\"))).toString()+\" \"+l.add(l.mod(new BigInteger(\"2\"))).add(new BigInteger(\"1\")).toString()+\" \"+l.add(l.mod(new BigInteger(\"2\"))).add(new BigInteger(\"2\")).toString());\n    \n    // cleanup\n    out.close();\n    System.exit(0);\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tlong l = s.nextLong();\n\t\tlong r = s.nextLong();\n\t\ts.close();\n\t\t\n\t\tif (r-l<2 || (r-l==2 && l%2==1)) {\n\t\t\tSystem.out.print(\"-1\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlong beg = l%2==0 ? l : l+1;\n\t\tif (beg+2>r) System.out.print(\"-1\");\n\t\telse System.out.print(beg+\" \"+(beg+1)+\" \"+(beg+2));\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        if (n % 2 == 0) {\n            System.out.printf(\"%d %d\", 4, n - 4);\n        } else {\n            System.out.printf(\"%d %d\", 9, n - 9);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        if (n%2==0) {\n            System.out.println(4+\" \"+(n-4));\n        } else {\n            System.out.println(9+\" \"+(n-9));\n        }\n\n        in.close();\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) throws Exception {\n    Scanner in = new Scanner(System.in);\n    int n = in.nextInt();\n    if (n % 2 == 0)\n      System.out.println(\"4 \" + (n - 4));\n    else\n      System.out.println(\"9 \" + (n - 9));\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint N = scan.nextInt();\n\t\tscan.close();\n\t\t\n\t\tif ((N%2) == 0) {\n\t\t\tSystem.out.println(4 + \" \" + (N-4));\n\t\t}\n\t\telse {\n\t\t\tif (N > 18) {\n\t\t\t\tSystem.out.println(9 + \" \" + (N-9));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println((N-9) + \" \" + 9);\n\t\t\t}\n\t\t}\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\tif (n == 12)\n\t\t\tSystem.out.println(\"4 8\");\n\t\t\n\t\telse if (n % 2 == 1)\n\t\t\tSystem.out.println((n - 9) + \" 9\");\n\t\t\n\t\telse\n\t\t\tSystem.out.println((n - 6) + \" 6\");\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        //BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));\n        Scanner sc=new Scanner (System.in);\n    //  StringTokenizer st=new StringTokenizer(buf.readLine());\n        int n=sc.nextInt();\n        System.out.println(n%2==0?4+\" \"+(n-4):9+\" \"+(n-9));\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "        public static void main(String[] args)\n        Scanner sc =new Scanner(System.in);    \n        long a=sc.nextLong();\n        if(a%4==0){System.out.println(a/2 + \" \" + a/2);}\n        if(a%4==1){System.out.println(9 + \" \" + (a-9));}\n        if(a%4==2){System.out.println(6 + \" \" + (a-6));}\n        if(a%4==3 && a>15){System.out.println(15 + \" \" + (a-15));}\n        if(a==15){System.out.println(\"6 9\");}\n        \n        }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int n = Integer.valueOf(sc.nextLine());\n        if (n % 2 == 0)\n            System.out.println(4 + \" \" + (n - 4));\n        else {\n            System.out.println(9 + \" \" + (n - 9));\n        }\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\n\t\t\tString input;\n\n\t\t\twhile ((input = reader.readLine()) != null && input.length() > 0) {\n\t\t\t\tint n = Integer.parseInt(input);\n\t\t\t\tint start = 4;\n\t\t\t\tint end = n - start;\n\n\t\t\t\twhile (start <= end) {\n\t\t\t\t\tif ((start % 2 == 0 || start % 3 == 0) && (end % 2 == 0 || end % 3 == 0)) {\n\t\t\t\t\t\tSystem.out.println(start + \" \" + end);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t++start;\n\t\t\t\t\t--end;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n         \n        Scanner x=new Scanner(System.in);\n        \n        int n=x.nextInt();\n                \n                if(n%2==0){\n                    \n                    System.out.println((n-4)+\" \"+\"4\");\n                }\n                else{\n                    \n                    System.out.println((n-9)+\" \"+\"9\");\n                    \n                }\n        \n        \n        \n        \n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tSolution sol = new Solution();\n\t\tfinal boolean CONTEST = true;\n\t\tif (CONTEST) {\n\t\t\tsol.cin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tsol.cout = new PrintWriter(System.out);\n\n\t\t} else {\n\t\t\tsol.cin = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t\tsol.cout = new PrintWriter(\"output.txt\");\n\t\t}\n\t\tsol.solve();\n\t\tsol.cin.close();\n\t\tsol.cout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        if(n%2==0){\n            System.out.println(4 + \" \" + (n-4));\n        }\n        else{\n            int a = Math.min(9,n-9);\n            int b = Math.max(9,n-9);\n            System.out.println(a + \" \" + b);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new InputStreamReader(System.in));\n        int n = sc.nextInt();\n        if (n % 2 == 0) {\n            System.out.println((n - 4) + \" \" + 4);\n        } else {\n            System.out.println((n - 9) + \" \" + 9);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        \n        Scanner s=new Scanner(System.in);\n        int a=s.nextInt();\n      \n          if(a%2==0)\n          {\n              a=a-4;\n              System.out.println(4+\" \"+a);\n          }\n          else\n          {\n              a=a-9;\n              System.out.println(9+\" \"+a);\n          }\n      \n    \n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException\n\t\t// streams\n\t\tboolean file = false;\n\t\tif (file)\n\t\t\tin = new BufferedReader(new FileReader(\"input.txt\"));\n\t\telse\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t// out = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\tout = new BufferedWriter(new FileWriter(\"output.txt\"));\n\t\tStringTokenizer tok;\n\n\t\tint n = Integer.parseInt(in.readLine());\n\t\tif (n % 2 == 0)\n\t\t\tSystem.out.println(4 + \" \" + (n-4));\n\t\telse\n\t\t\tSystem.out.println(9 + \" \" + (n-9));\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws FileNotFoundException, InterruptedException {\n        in = new FastReader(System.in);\n        out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        int a = ((n & 1) == 0) ? a = 6 : 9;\n        int b = n - a;\n        out.println(a + \" \" + b);\n\n        out.flush();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException\n        T t = new T();\n        t.run();\n        t.close();\n    }\n", "complexity": "constant"}
{"code": "public static void main(String[] args)\n    Scanner input = new Scanner(System.in);\n    int n = input.nextInt();\n    if(n%2 == 0) System.out.println(4+\" \"+(n-4));\n    else System.out.println(9+\" \" +(n-9));\n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tif (n % 2 == 0) {\n\t\t\tSystem.out.println(4 + \" \" + (n - 4));\n\t\t} else {\n\t\t\tSystem.out.println(9 + \" \" + (n - 9));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "public static void main(String[] args){\n\tScanner scr= new Scanner(System.in);\nint c=0,e=0,d=0;\nint a=scr.nextInt();\nd=a/2;\nif(a>=11 && a%2==1){\nc=9;\ne=a-9;\n}\nelse{\nc=a-4;e=4;\n}\n\nSystem.out.print(c+\" \"+e);\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n\n        Scanner scan = new Scanner(System.in);\n\n        int n = scan.nextInt();\n\n        if (n % 2 == 0) {\n            System.out.println(4 + \" \" + (n - 4));\n        } else {\n            System.out.println(9 + \" \" + (n - 9));\n        }\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\ts.close();\n\t\t\n\t\tif (n % 2 == 0)\n\t\t\tSystem.out.print(\"4 \" + (n-4));\n\t\telse \n\t\t\tSystem.out.print(\"9 \" + (n-9));\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\t\n\t\tScanner sc=new Scanner(System.in);\n\t\t\n\t\tint N=sc.nextInt();\n\t\t\n\t\tsolve(N);\n\t\t\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String [] args) throws NumberFormatException, IOException{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tint num1,num2;\n\t\tif(n % 2 == 0){\n\t\t\tnum1 = n / 2;\n\t\t\tif(num1 % 2 == 0){\n\t\t\t\tnum2 = num1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnum1--;\n\t\t\t\tnum2 = num1 + 2;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tnum1 = 9;\n\t\t\tnum2 = n - num1;\n\t\t}\n\t\t\n\t\tSystem.out.println(num1+\" \"+num2);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String [] args) {\n        Scanner scan = new Scanner(System.in);\n        int N = scan.nextInt();\n        if( N%2 == 0) {\n            System.out.println( (4)+\" \"+(N-4));\n        }\n        else System.out.println( (9)+\" \"+(N-9));\n        scan .close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint n = sc.nextInt();\n\t\t\n\t\tint a = n / 2;\n\t\tint b = n - a;\n\t\t\n\t\tif (n % 2 == 0) {\n\t\t\tif (a % 2 == 1) {\n\t\t\t\ta++;\n\t\t\t\tb--;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(a + \" \" + b);\n\t\t} else {\n\t\t\tif (a % 2 == 1) {\n\t\t\t\tint x = a;\n\t\t\t\ta = b;\n\t\t\t\tb= x;\n\t\t\t}\n\t\t\t\n\t\t\tif (b % 3 == 0) {\n\t\t\t\t\n\t\t\t} else if (b % 3 == 1) {\n\t\t\t\ta-=2;\n\t\t\t\tb+=2;\n\t\t\t} else {\n\t\t\t\ta+=2;\n\t\t\t\tb-=2;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(a + \" \" + b);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) \n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        \n        int one, two;\n        if(n%2 == 0)\n        {\n            one = two = n/2;\n            if(one%2 != 0 && two%2 != 0)\n            {\n                one--;\n                two++;\n            }\n        }\n        else\n        {\n            one = n - 9;\n            two = 9;\n        }\n        \n        System.out.println(one+\" \"+two);\n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        if (n % 2 == 0) {\n            System.out.println((n - 4) + \" \" + (n - (n - 4)));\n        } else {\n            System.out.println((n - 9) + \" \" + (n - (n - 9)));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        final Scanner sc = new Scanner(System.in);\n        final int n = sc.nextInt();\n        if (n % 2 == 0) {\n            System.out.println(4 + \" \" + (n - 4));\n        } else {\n            System.out.println(9 + \" \" + (n - 9));\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStreamReader fin = new InputStreamReader(System.in);\n        Scanner scr = new Scanner(fin);\n        int n = scr.nextInt();\n        int x = 0;\n        int y = 0;\n        if (n%2 == 0) {\n            x = 4;\n            y = n - x;\n        } else {\n            x = 9;\n            y = n - x;\n        }\n        PrintWriter fout = new PrintWriter(System.out);\n        fout.print(x+\" \"+y);\n        fout.flush();\n        fout.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner in = new FastScanner();\n\t\t\n\t\tnew TA().solve(in.nextLong());\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tint a = scan.nextInt();\n\t\tif(a % 2 == 0) {\n\t\t\tSystem.out.println(4 + \" \" + (a - 4));//ż���4\n\t\t} else {\n\t\t\tSystem.out.println(9 + \" \" + (a - 9));//������\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint a,b;\n\t\tif (n%2==0) {\n\t\t\ta = 4;\n\t\t}else{\n\t\t\ta = 9;\n\t\t}\n\t\tb = n - a;\n\t\tSystem.out.println(a + \" \" + b);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int n = in.nextInt();\n        \n        int a = n/2;\n        int b = (n/2) + (n%2);\n        \n        if ((a%2!=0 && a%3!=0) || (b%2!=0 && b%3!=0)) {\n            a--;\n            b++;\n        }\n        \n        if ((a%2!=0 && a%3!=0) || (b%2!=0 && b%3!=0)) {\n            a--;\n            b++;\n        }\n\n        System.out.println(a + \" \" + b);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        int b;\n        Scanner s3=new Scanner(System.in);\n         b=s3.nextInt();\n      \n          if(b%2==0)\n          {\n              b=b-4;\n              System.out.println(4+\" \"+b);\n          }\n          else\n          {\n              b=b-9;\n              System.out.println(9+\" \"+b);\n          }\n      \n    \n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "constant"}
{"code": "  public static void main(String [] args) throws IOException {\n    // makes the reader and writer\n    BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n    PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n    \n    // read in N\n    int N = Integer.parseInt(f.readLine());\n    \n    // write to out\n    if (N%2==0) out.println(\"4 \"+(N-4));\n    if (N%2==1) out.println(\"9 \"+(N-9));\n    \n    // cleanup\n    out.close();\n    System.exit(0);\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\tScanner sc = new Scanner(System.in);\n\t\n\tint n=sc.nextInt();\n\t\n\tint start=4;\n\t\n\t\n\twhile(true){\n\t\t\n\t\tif((start%2==0||start%3==0)&&((n-start)%2==0||(n-start)%3==0))\n\t\t{\n\t\t\tSystem.out.println(start+\" \"+(n-start));\n\t\t\treturn;\n\t\t}\n\t\telse \n\t\tstart++;\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n\t\t\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer tb;\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tint x = 0,y=0;\n\t\tif(n%2==0){\n\t\t\tx = n-4;\n\t\t\ty = 4;\n\t\t}else{\n\t\t\tx = n-9;\n\t\t\ty = 9;\n\t\t}\n\t\tSystem.out.println(x+\" \"+y);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tA solver = new A();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        if (n % 2 == 0) {\n            System.out.println(\"8 \" + (n - 8));\n        } else {\n            System.out.println(\"9 \" + (n - 9));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\t\n\t\tif(n % 2 == 1)\n\t\t{\n\t\t\tSystem.out.println(9 + \" \" + (n - 9));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(4 + \" \" + (n - 4));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        // TODO Auto-generated method stub\n        \n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        long n=Long.parseLong(br.readLine());\n        if(n%2==0){\n            System.out.println(4+\" \"+(n-4));\n        }\n        else{\n            System.out.println(9+\" \"+(n-9));\n        }\n        \n    }\n", "complexity": "constant"}
{"code": "public static void main(String[] args) throws IOException{\n\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\t//StringTokenizer st=new StringTokenizer(bf.readLine());\n\tint n=Integer.parseInt(bf.readLine());\n\t\n\tif(n%2==0) System.out.println(4+\" \"+(n-4));\n\telse System.out.println(9+\" \"+(n-9));\n\t\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        \n        int uno = 4;\n        int dos = n-4;\n\n        while(isPrime(dos) || isPrime(uno)){\n            dos--;\n            uno++;\n        }\n\n        System.out.println(uno+\" \"+dos);\n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n     int n,a,b;\n     Scanner obj=new Scanner(System.in);\n    \n     n=obj.nextInt();\n    \n     if(n%4==0){a=n/2;b=n/2;System.out.println(a+\" \"+b);}\n     else if(n%2==0 && n%4!=0)\n     {a=n/2-1;b=n/2+1;System.out.println(a+\" \"+b);}\n     \n     else if(n%2!=0)\n     {  a=4;b=0;\n       while(b!=1)\n       { b=n-a;\n         if(b%3==0){ System.out.println(a+\" \"+b);break; }\n         else{a=a+2;}\n       }\n     }\n    }\n", "complexity": "constant"}
{"code": "      public static void main(String args[])throws IOException{\n              Scanner sc = new Scanner(System.in);\n              int a[] = new int[1501];\n              for(int i = 0; i < 3; i++){\n                     a[sc.nextInt()]++;\n              }\n              if(a[1] > 0 || a[2] > 1 || a[3] > 2 || (a[4] == 2 && a[2] == 1)){\n                     System.out.println(\"YES\");\n              }else{\n                     System.out.println(\"NO\");\n              }\n      }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int test = 1;\n        for (int ind = 0; ind < test; ind++) {\n          int [] a=new int[3];\n          a[0]=sc.nextInt();\n          a[1]=sc.nextInt();\n          a[2]=sc.nextInt();\n          Arrays.sort(a);\n          int k1=a[0];\n          int k2=a[1];\n          int k3=a[2];\n          if(k1==1 || k2==1 || k3==1){\n              out.println(\"YES\");\n          }\n          else if((k1==2 && k2==2)||(k2==2 && k3==2)){\n              out.println(\"YES\");\n            }\n            else if(k1==3 && k2==3 && k3==3){\n              out.println(\"YES\");\n          }\n          else if(k1==2 && k2==4 && k3==4){\n              out.println(\"YES\");\n          }\n          else\n              out.println(\"NO\");\n\n        }\n        out.flush();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tint x=Integer.parseInt(br.readLine());\n\t\tint y=Integer.parseInt(br.readLine());\n\t\tSystem.out.print((int)(y%(Math.pow(2, x))));\n\t}\n", "complexity": "constant"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n        Scanner sc=new Scanner(System.in);\n         int n=sc.nextInt();\n         int m=sc.nextInt();\n         int x=m%(int)Math.pow(2,n);\n         System.out.println(x);\n\n\n\n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\ttry (Scanner sc = new Scanner(System.in)) {\n\t\t\t\n\t\t\tint n = sc.nextInt();\n\t\t\tBigInteger m = sc.nextBigInteger();\n\t\t\t\n\t\t\tSystem.out.println(m.mod(BigInteger.valueOf(2).pow(n)));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew aaaaaaaaaaaaaaaa().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) \n\t\tScanner in = new Scanner(System.in);\n\t\tint a = in.nextInt();\n\t\tint b = in.nextInt();\n\t\tint c = in.nextInt();\n\t\tint n = in.nextInt();\n\n\t\tint ans = n - (a + b - c);\n\t\tif(ans < 1 || a >= n || b >= n || c > a || c > b)\n\t\t\tans = -1;\n\t\t\n\t\tSystem.out.println(ans);\n\t\t\n\t\tin.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n        prepareIO(false);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tA t = new A();\n\t\tt.run();\n\t}\n", "complexity": "constant"}
{"code": "  public static void main(String[] args){\n    FastScanner sc = new FastScanner();\n    long a = sc.nextLong();\n    long b = sc.nextLong();\n    long result = 0L;\n\n    while(a != 0 && b != 0) {\n      if(a > b) {\n        result += a/b;\n        a = a % b;\n      } else {\n        result += b/a;\n        b = b % a;\n      }\n\n      long gcd = gcd(a, b);\n      a /= gcd;\n      b /= gcd;\n    }\n\n      System.out.println(result);\n  }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Parser in = new Parser(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String [] args) throws IOException\n\t\tScanner in = new Scanner(System.in);\n\n\t\tSystem.out.println(rec(in.nextLong(), in.nextLong()));\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\t//BufferedReader in = new BufferedReader(new FileReader(\"200C.in\"));\n\t\tStringTokenizer st = new StringTokenizer(in.readLine());\n\t\tlong a = Long.parseLong(st.nextToken());\n\t\tlong b = Long.parseLong(st.nextToken());\n\t\t\n\t\tSystem.out.println(min(a,b));\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        long a=s.nextLong(), b=s.nextLong();\n        long c=0;\n        while(true)  {\n            if(a==b ){\n                System.out.println(c+a);\n                return ;\n            } else if(b==a+1){\n                c+=1;\n                b=a;\n            } else if(b<a){\n\n                long h = a/b-1;\n                if(h<=0){\n                    a-=b;c++;continue;\n                }\n                a-=b*h;\n                c+=h;\n            } else{\n                if(a==1){\n                    long t = b-a;\n                    b = t;\n                    c+=t;\n                    b = a;\n                    continue;\n                }\n                long t = b-a;\n                long h = b/a - 1 ;\n                if(h<=0){\n                    b = t;\n                    c+=1;continue;\n                }\n                c+=h;b-=h*a;\n//                b = a;\n            }\n        }\n\n//        System.out.println(c);\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) throws Throwable {\n    new A().go();\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tin = new Scanner(System.in);\n\t\tnew A().run();\n\t\tin.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)\n        Scanner blabla=new Scanner(System.in);\n        long a,b,c=0,d;\n        a=blabla.nextLong();\n        b=blabla.nextLong();\n        while (b!=0){\n            c+=(a/b);\n            a=a%b;\n            d=a;\n            a=b;\n            b=d;\n        }\n        System.out.println(c);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main().run();\n\t}\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    out.println(go(in.nextLong(),in.nextLong()));\n    out.close();\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tlong a = cin.nextLong();\n\t\tlong b = cin.nextLong();\n\t\tcin.close();\n\t\tR(a, b);\n\t\tSystem.out.println(n);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew taskA().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[])\n        Scanner sc = new Scanner(System.in);\n        System.out.println();\n        long a = sc.nextLong();\n        long b = sc.nextLong();\n        if(a==b) System.out.println(\"1\");\n        else if(b==1) System.out.println(a);\n        else if(a==1) System.out.println(b);\n        else if(a>b) System.out.println(count(a,b));\n        else System.out.println(count(b,a));\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tInputStream input = System.in;\n\t\tPrintStream output = System.out;\n\t\tFile file = new File(\"a.in\");\n\t\tif (file.exists() && file.canRead()) {\n\t\t\tinput = new FileInputStream(file);\n\t\t}\n\t\tbr = new BufferedReader(new InputStreamReader(input));\n\t\tout = new PrintWriter(output);\n\t\tsolve();\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tlong x = sc.nextLong();\n\t\tlong y = sc.nextLong();\n\t\t\n\t\tSystem.out.println(Wilf_tree(x, y));\n\t\t\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException{\n        BufferedReader baca = new BufferedReader(new InputStreamReader(System.in));\n        String[] masukan = baca.readLine().split(\" \");\n        BigInteger a = new BigInteger(masukan[0]);\n        BigInteger b = new BigInteger(masukan[1]);\n        \n        \n        \n        BigInteger i=new BigInteger(\"0\");\n        while(a.compareTo(new BigInteger(\"1\"))!=0){\n            if(a.compareTo(b)==1){\n                i=i.add(a.divide(b));\n                if(a.mod(b)==new BigInteger(\"0\")){\n                    a=new BigInteger(\"1\");\n                    b=new BigInteger(\"0\");\n                }\n                else{\n                    a=a.mod(b);\n                }\n                \n            }\n            else{\n                BigInteger temp =a;\n                a=b;\n                b=temp;             \n            }\n        }\n        if(a.compareTo(new BigInteger(\"1\"))==0){\n            i=i.add(b);\n        }\n        System.out.println(i.toString());\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception {\n\t\tScanner in=new Scanner(System.in);\n\t\tlong a=in.nextLong(),b=in.nextLong();\n\t\tStepgcd(a,b);\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew A().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String... args) throws NumberFormatException,\n\t\tSolution.main(System.in, System.out);\n\t}\n\t\tpublic static void main(InputStream is, OutputStream os)\n\t\t\tPrintWriter pw = new PrintWriter(os);\n\t\t\tScanner sc = new Scanner(is);\n\n\t\t\tlong a = sc.nextLong();\n\t\t\tlong b = sc.nextLong();\n\n\t\t\tpw.println(r(a, b));\n\n\t\t\tpw.flush();\n\t\t\tsc.close();\n\t\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputStreamReader in = new InputStreamReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        new HelloWorld().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.UK);\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong a = sc.nextLong();\n\t\tlong b = sc.nextLong();\n\t\tR(a,b);\n\t\tSystem.out.println(n);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew CF().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tString[] nmd = in.readLine().split(\" \");\n\t\tlong a = Long.valueOf(nmd[0]);\n\t\tlong b = Long.valueOf(nmd[1]);\n\n\t\tlong cnt = 0;\n\t\twhile (true) {\n\t\t\tif (a == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (a >= b) {\n\t\t\t\tcnt += a / b;\n\t\t\t\ta = a % b;\n\t\t\t} else {\n\t\t\t\tif (b % a == 0) {\n\t\t\t\t\tcnt += b / a - 1;\n\t\t\t\t\tb = a;\n\t\t\t\t} else {\n\t\t\t\t\tcnt += b / a;\n\t\t\t\t\tb = b % a;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.println(cnt);\n\t\tout.flush();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tlong a = readLong();\n\t\tlong b = readLong();\n\t\t\n\t\tSystem.out.println(rec(a,b));\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong a = sc.nextLong();\n\t\tlong b = sc.nextLong();\n\t\tlong count = a / b, c;\n\t\ta = a % b;\n\t\twhile(true){\n\t\t\tif (a <= 1 || b <= 1) break;\n\t\t\tc = b - a;\n\t\t\tb = a;\n\t\t\ta = c;\n\t\t\tcount++;\n\t\t\tif (a > b) count += a / b;\n\t\t\ta = a % b;\n\t\t}\n\t\tif (b > 1) count += b;\n\t\tSystem.out.println(count);\t\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws IOException{\n\t\tBufferedReader f= new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tStringTokenizer st=new StringTokenizer(f.readLine());\n\t\tlong a=Long.parseLong(st.nextToken());\n\t\tlong b=Long.parseLong(st.nextToken());\n\t\tlong sum = 0;\n\t\twhile(a!= 0 && b!= 0){\n\t\t\tif (a > b){\n\t\t\t\tlong val = a / b;\n\t\t\t\tsum += val;\n\t\t\t\ta -= val * b;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlong val = b / a;\n\t\t\t\tsum += val;\n\t\t\t\tb -= val * a;\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.println(sum);\n\t\tout.close();\n\t\tSystem.exit(0);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] ss = br.readLine().split(\" +\");\n        long a = Long.parseLong(ss[0]);\n        long b = Long.parseLong(ss[1]);\n        \n        System.out.println(func(a, b));\n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Throwable {\n        Thread thread = new Thread(null, new Main(), \"\", 1 << 26);\n        thread.start();\n        thread.join();\n        if (Main.t != null)\n            throw t;\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String args[]) throws IOException {\n    BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n    String line = stdin.readLine();\n    String[] prms = line.split(\" \");\n    \n    long a = Long.parseLong(prms[0]);\n    long b = Long.parseLong(prms[1]);\n    \n    long cnt = 0;\n    while (a > 0 && b > 0) {\n      if (a >= b) {\n        cnt += a / b;\n        a =  a % b;\n      }\n      long c = a;\n      a = b;\n      b = c;\n    }\n    \n    System.out.println(cnt);\n  }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        long x = nextLong();\n        long y = nextLong();\n        long ans = 0;\n        while (x > 0 && y > 0) {\n            if (x > y) {\n                ans += x / y;\n                x %= y;\n            }\n            else {\n                ans += y / x;\n                y %= x;\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "public static void main(String[] args)\n    Scanner input = new Scanner(System.in);\n    long a = input.nextLong(), b = input.nextLong();\n    System.out.println(gcd(a, b));\n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew A().doit();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long A = in.nextLong();\n        long B = in.nextLong();\n        System.out.println(f(A,B));\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long a = in.nextLong();\n        long b = in.nextLong();\n        resistance(a, b);\n        System.out.println(n);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(f.readLine());\n        long a = Long.parseLong(st.nextToken());\n        long b = Long.parseLong(st.nextToken());\n        System.out.println(f(a,b));\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Throwable {\n\t\tThread thread = new Thread(null, new Solution(), \"\", (1 << 26));\n\t\tthread.start();\n\t\tthread.join();\n\t\tif (throwable != null) {\n\t\t\tthrow throwable;\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputStreamReader in = new InputStreamReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int n = sc.nextInt();\n        pw.println(n/2+1);\n        pw.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)  {\n\n        Scanner in = new Scanner(System.in) ;\n        PrintWriter pw = new PrintWriter(System.out);   \n        long n = in.nextLong() ; \n        long count =1 ; \n        long temp =n/2;\n     temp+=count ;\n      \n       \n        System.out.println(temp);\n }               \n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner input = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\n\t\tSystem.out.println(input.nextInt() / 2 + 1);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tif(n%2 == 0)System.out.println(n/2 +1);\n\t\telse System.out.println((int)Math.ceil((double)n/2));\n\t}\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    int n = Integer.parseInt(br.readLine());\n    StringTokenizer tok = new StringTokenizer(br.readLine());\n    int ax = Integer.parseInt(tok.nextToken());\n    int ay = Integer.parseInt(tok.nextToken());\n    tok = new StringTokenizer(br.readLine());\n    int bx = Integer.parseInt(tok.nextToken());\n    int by = Integer.parseInt(tok.nextToken());\n    tok = new StringTokenizer(br.readLine());\n    int cx = Integer.parseInt(tok.nextToken());\n    int cy = Integer.parseInt(tok.nextToken());\n    boolean ans = (bx < ax && cx < ax && by < ay && cy < ay) ||\n    (bx < ax && cx < ax && by > ay && cy > ay) ||\n    (bx > ax && cx > ax && by < ay && cy < ay) ||\n    (bx > ax && cx > ax && by > ay && cy > ay);\n    System.out.print(ans?\"YES\":\"NO\");\n  }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Reader read = new Reader();\n\n        int n = read.nextInt();\n        int a1 = read.nextInt();\n        int a2 = read.nextInt();\n        int b1 = read.nextInt();\n        int b2 = read.nextInt();\n        int c1 = read.nextInt();\n        int c2 = read.nextInt();\n\n        if (b1 > a1 && b2 > a2 && c1 > a1 && c2 > a2)\n            System.out.print(\"YES\");\n        else if (b1 > a1 && b2 < a2 && c1 > a1 && c2 < a2)\n            System.out.print(\"YES\");\n        else if (b1 < a1 && b2 > a2 && c1 < a1 && c2 > a2)\n            System.out.print(\"YES\");\n        else if (b1 < a1 && b2 < a2 && c1 < a1 && c2 < a2)\n            System.out.print(\"YES\");\n        else\n            System.out.print(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n      FastReader sc = new FastReader();\n      int x= sc.nextInt();\n      int y= sc.nextInt();\n      int z= sc.nextInt();\n      int t1= sc.nextInt();\n      int t2= sc.nextInt();\n      int t3= sc.nextInt();\n      if(Math.abs(x-y)*t1 < (Math.abs(x-z)+Math.abs(x-y))*t2+3*t3 ) System.out.println(\"NO\");\n      else System.out.println(\"YES\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main (String[] args) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        try {\n            String parameterStringList[] = reader.readLine().split(\" \");\n            int x = Integer.parseInt(parameterStringList[0]);\n            int y = Integer.parseInt(parameterStringList[1]);\n            int z = Integer.parseInt(parameterStringList[2]);\n            int t1 = Integer.parseInt(parameterStringList[3]);\n            int t2 = Integer.parseInt(parameterStringList[4]);\n            int t3 = Integer.parseInt(parameterStringList[5]);\n\n            int T1 = Math.abs(x-y) * t1;\n            int T2 = Math.abs(x-z) * t2 + 3*t3 + Math.abs(x-y) * t2;\n\n            if(T2 <= T1) System.out.println(\"YES\");\n            else System.out.println(\"NO\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String...strings) throws Exception {\n\t\tString[] specs = reader.readLine().split(\" \");\n\t\t\n\t\tint x = Integer.parseInt(specs[0]);\n\t\tint y = Integer.parseInt(specs[1]);\n\t\tint z = Integer.parseInt(specs[2]);\n\t\tint t1 = Integer.parseInt(specs[3]);\n\t\tint t2 = Integer.parseInt(specs[4]);\n\t\tint t3 = Integer.parseInt(specs[5]);\n\t\t\n\t\treader.close();\n\t\tString ans = solve(x, y, z, t1, t2, t3);\n\t\twriter.append(ans);\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n", "complexity": "constant"}
{"code": "        public static void main(String[] args){\n            Scanner scan = new Scanner(System.in);\n            int n = scan.nextInt();\n            int v = scan.nextInt();\n\n            System.out.print(solution(n, v));\n        }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)throws Exception\n        Reader.init(System.in);\n        int n = Reader.nextInt();\n        int p = Reader.nextInt();\n        int L = Reader.nextInt();\n        int R = Reader.nextInt();\n        int a = 1;\n        int b = n;\n        int res = 0;\n        \n        if(a == L && b == R)\n        {\n            res = 0;\n        }\n        else if(L != a && R != b && p >= L && p <= R)\n        {\n            res = Math.min(p-L, R-p);\n            res += R- L + 2;\n        }\n        else if(L != a && R != b && p < L )\n        {\n            res += L-p + 1;\n            res += R - L +1;\n        }\n        else if(L != a && R != b && p > R)\n        {\n            res += p-R + 1;\n            res += R - L +1;\n        }\n        else if(a == L && p >=L && p<=R)\n        {\n            res += R - p + 1;\n        }\n        else if(R == b && p>=L && p<=R)\n        {\n            res += p - L + 1;\n        }\n        else if(a == L && p > R)\n        {\n            res += p - R + 1;\n        }\n        else if(R == b && p<L)\n        {\n            res += L - p + 1;\n        }\n            \n            \n        pw.print(res);\n        pw.close();\n \n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) {\n\t\tScanner read = new Scanner(System.in);\n\t\tint n = read.nextInt();\n\t\t\n\t\tif (n % 4 == 0 ||\n\t\t\tn % 7 == 0 ||\n\t\t\tn % 47 == 0 ||\n\t\t\tn % 74 == 0 ||\n\t\t\tn % 447 == 0 ||\n\t\t\tn % 474 == 0 ||\n\t\t\tn % 477 == 0 ||\n\t\t\tn % 744 == 0 ||\n\t\t\tn % 747 == 0 ||\n\t\t\tn % 774 == 0)\t{\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t}\n\t\telse {\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)\n        Scanner in = new Scanner(System.in);\n        int inp = in.nextInt();\n        if(inp%4==0||inp%7==0||inp%47==0||inp%74==0||inp%447==0||inp%474==0||inp%477==0||inp%747==0||inp%774==0||inp%777==0)\n        {\n          System.out.println(\"YES\");  \n        }\n        else System.out.println(\"NO\");\n          \n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in= new Scanner(System.in);\n        int n=in.nextInt();\n        if(n%7==0 || n%4==0 || n%47==0 || n%74==0 || n%447==0 || n%474==0 || n%477==0 || n%747==0 || n%774==0){\n            System.out.println(\"YES\");\n        }else\n            System.out.println(\"NO\");\n        \n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint n = in.nextInt();\n\n\t\tif (n % 4 == 0 || n % 7 == 0 || n % 44 == 0 || n % 47 == 0\n\t\t\t\t|| n % 74 == 0 || n % 77 == 0 || n % 444 == 0 || n % 447 == 0\n\t\t\t\t|| n % 474 == 0 || n % 477 == 0 || n % 744 == 0 || n % 747 == 0\n\t\t\t\t|| n % 774 == 0 || n % 777 == 0)\n\t\t\tSystem.out.println(\"YES\");\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String input = in.nextLine();\n        if (input.equals(\"1\"))\n            System.out.println(\"NO\");\n        else {\n            if (checkNum(input))\n                System.out.println(\"YES\");\n            else {\n                int i = 2;\n                while (i < Integer.parseInt(input)) {\n                    if (checkNum(i + \"\")) {\n                        if (Integer.parseInt(input) % i != 0)\n                            i++;\n                        else\n                            break;\n                    } else\n                        i++;\n                }\n                if (i == Integer.parseInt(input))\n                    System.out.println(\"NO\");\n                else\n                    System.out.println(\"YES\");\n            }\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "constant"}
{"code": "        public static void main(String args[]) throws IOException {\n                new CF().solution();\n        }\n", "complexity": "constant"}
{"code": "   public static void main(String[] args)\n      new LuckyDivision(new Scanner(System.in));\n   }\n", "complexity": "constant"}
{"code": " public static void main(String args[])\n   int n;\n   Scanner in = new Scanner (System.in);\n   n= in.nextInt();\n   if (n%4==0 || n%7==0 || n%44==0 || n%47==0 || n%444==0 || n%447==0 ||\n       n%474==0 || n%477==0 || n%744==0 || n%747==0 || n%774==0 || n%777==0)\n       System.out.println(\"YES\"); else System.out.println(\"NO\");\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\t// begin reading inputs\n\t\t\tInputStreamReader isr = new InputStreamReader(System.in);\n\t\t\tBufferedReader reader = new BufferedReader(isr);\n\n\t\t\t// reading inputs\n\t\t\tint input = Integer.parseInt(reader.readLine());\n\n\t\t\treader.close();\n\t\t\tisr.close();\n\t\t\t// end reading inputs\n\n\t\t\tboolean result = isAlmostLuckyNumber(input);\n\t\t\tSystem.out.println(result ? \"YES\" : \"NO\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint n = in.nextInt();\n\n\t\tif(n%4==0 || n%7==0 || n%47==0 || n%74==0 || n%474==0 || n%447==0 || n%774==0 || n%747==0 || n%477==0 || n%744==0)System.out.println(\"YES\");\n\t\telse System.out.println(\"NO\");\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws Exception {\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = i(r.readLine());\n\t\tboolean i = solve(\"7\", n);\n\t\tboolean j = solve(\"4\", n);\n\t\tif(i || j){\n\t\t\tSystem.out.println(\"YES\");\n\t\t} else {\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String aa[])\n        Scanner ob=new Scanner(System.in);\n        int n;\n        \n        n=ob.nextInt();\n        if(n%4==0||n%7==0||n%44==0||n%47==0||n%444==0||n%447==0||n%474==0||n%477==0||n%744==0||n%747==0||n%774==0||n%777==0)\n        System.out.println(\"YES\");\n        else\n        System.out.println(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "public static void main(String[] args) throws IOException{\nBufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\nString a=buffer.readLine();\nint b=Integer.parseInt(a);\nif(b%4==0 || b%7==0 || b%44==0 || b%47==0 || b%74==0 || b%77==0 || b%444==0 || b%447==0 || b%474==0 || b%477==0 || b%744==0 || b%747==0 || b%774==0 || b%777==0)\nSystem.out.println(\"YES\");\nelse\nSystem.out.println(\"NO\");\n}}\n", "complexity": "constant"}
{"code": "    public static void main(String [] args){\n        Scanner input = new Scanner(System.in);\n        int a = input.nextInt();\n        if(a%4 == 0) System.out.println(\"YES\");\n        else if(a%7 == 0) System.out.println(\"YES\");\n        else if(a%47 == 0) System.out.println(\"YES\");\n        else if(a%74 == 0) System.out.println(\"YES\");\n        else if(a%447 == 0) System.out.println(\"YES\");\n        else if(a%474 == 0) System.out.println(\"YES\");\n        else if(a%477 == 0) System.out.println(\"YES\");\n        else if(a%747 == 0) System.out.println(\"YES\");\n        else if(a%774 == 0) System.out.println(\"YES\");\n        else System.out.println(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        if ((n % 4 == 0) || (n % 7 == 0) || (n % 44 == 0) || (n % 47 == 0) || (n % 74 == 0) || (n % 77 == 0) \n                || (n % 444 == 0) || (n % 447 == 0) || (n % 474 == 0) || (n % 477 == 0) || (n % 744 == 0) \n                || (n % 747 == 0) || (n % 774 == 0) || (n % 777 == 0)) {\n            System.out.println(\"YES\");\n            return;\n        }\n        System.out.println(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "public static void main(String[]args){\nScanner input=new Scanner(System.in);\nint x=input.nextInt();\nif(x%4==0||x%7==0||x%47==0||x%74==0||x%744==0||x%474==0||x%447==0||x%477==0||x%474==0)\nSystem.out.println(\"YES\");\nelse\nSystem.out.println(\"NO\");\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        in = new Scanner(System.in);\n//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n//\t\tin = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n\n        int n = next();\n\n        if (n%4 == 0||n%7 == 0||n%44 == 0||n%47 == 0||n%74 == 0||n%77 == 0||n%444 == 0||n%447 == 0||n%474 == 0||n%744 == 0||n%774 == 0||n%747 == 0||n%477 == 0||n%777==0) out.println(\"YES\");\n        else out.println(\"NO\");\n\n        out.println();\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(System.in);\n\t\tSystem.out.println(divch(in.nextInt(),0)?\"YES\":\"NO\");\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        if (n % 4 == 0 || n % 7 == 0 || n % 47 == 0 || n % 74 == 0 || n % 444 == 0 || n % 447 == 0 || n % 474 == 0 || n % 477 == 0) {\n            System.out.println(\"YES\");\n        } else {\n            System.out.println(\"NO\");\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint l = sc.nextInt();\n\t\tString c = String.valueOf(l);\n\t\tif (String.valueOf(c).contains(\"0\") || String.valueOf(c).contains(\"1\")\n\t\t\t\t|| String.valueOf(c).contains(\"2\")\n\t\t\t\t|| String.valueOf(c).contains(\"3\")\n\t\t\t\t|| String.valueOf(c).contains(\"5\")\n\t\t\t\t|| String.valueOf(c).contains(\"6\")\n\t\t\t\t|| String.valueOf(c).contains(\"8\")\n\t\t\t\t|| String.valueOf(c).contains(\"9\"))\n\t\t\tif (l % 777 == 0 || l % 774 == 0 || l % 747 == 0 || l % 744 == 0\n\t\t\t\t\t|| l % 477 == 0 || l % 474 == 0 || l % 447 == 0\n\t\t\t\t\t|| l % 444 == 0 || l % 77 == 0 || l % 74 == 0\n\t\t\t\t\t|| l % 47 == 0 || l % 44 == 0 || l % 7 == 0 || l % 4 == 0)\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"NO\");\n\t\telse\n\t\t\tSystem.out.println(\"YES\");\n\t}\n", "complexity": "constant"}
{"code": "  public static void main(String[] args){\n    Scanner scan = new Scanner(System.in);\n    int n = scan.nextInt();\n    if (n % 4 == 0 || n % 7 == 0 || n % 47 == 0 || n % 77 == 0 || n % 74 == 0 || n % 447 == 0 || n % 474 == 0 || n % 477 == 0 || n % 747 == 0 || n % 774 == 0 || n % 777 == 0)\n      System.out.println(\"YES\");\n    else\n      System.out.println(\"NO\");\n  }\n", "complexity": "constant"}
{"code": "    public static void main (String args[])\n        Scanner i= new Scanner(System.in);\n        int n,p;\n       \n        n=i.nextInt(); int t=n;\n       if(t%4==0||t%7==0||t%47==0||t%74==0||t%44==0||t%447==0||t%474==0||t%477==0)\n               System.out.print(\"YES\");\n               else System.out.print(\"NO\");\n\n    \n           \n\n\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)throws IOException\n        BufferedReader scan=new BufferedReader(new InputStreamReader(System.in));\n        short num=Short.parseShort(scan.readLine());\n        if(funcion(num))\n        {\n            System.out.println(\"YES\");\n        }\n        else\n            System.out.println(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String args[])\n       Scanner scan=new Scanner(System.in);\n       int n=scan.nextInt();\n       System.out.println((n%4==0||n%7==0||n%47==0||n%74==0||n%447==0||n%474==0||n%477==0||n%744==0||n%747==0||n%774==0)?\"YES\":\"NO\");\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) {\n\t\tnew A().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        \n        int n = in.nextInt();\n        \n        if( n % 4==0 ||\n            n % 7==0 ||\n            n % 47==0 ||\n            n % 74==0 ||\n            n % 447==0 ||\n            n % 474==0 ||\n            n % 477==0 ||\n            n % 744==0 ||\n            n % 774==0 ||\n            n % 777==0\n        )\n            System.out.println(\"YES\");\n        else\n            System.out.println(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int in = sc.nextInt();\n        if(\n                in%4==0||\n                in%7==0||\n                in%44==0||\n                in%47==0||\n                in%74==0||\n                in%77==0||\n                in%444==0||\n                in%447==0||\n                in%474==0||\n                in%477==0||\n                in%744==0||\n                in%747==0||\n                in%774==0||\n                in%777==0\n                \n        )\n            System.out.println(\"YES\");\n        else System.out.println(\"NO\");\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tsc.close();\n\t\t\n\t\tif ( (n % 4 == 0)   ||\n\t\t\t (n % 7 == 0)   ||\n\t\t\t (n % 44 == 0)  ||\n\t\t\t (n % 47 == 0)  ||\n\t\t\t (n % 74 == 0)  ||\n\t\t\t (n % 77 == 0)  ||\n\t\t   \t (n % 444 == 0) ||\n\t\t\t (n % 447 == 0) ||\n\t\t\t (n % 474 == 0) ||\n\t\t\t (n % 477 == 0) ||\n\t\t\t (n % 744 == 0) ||\n\t\t\t (n % 747 == 0) ||\n\t\t\t (n % 774 == 0) ||\n\t\t\t (n % 777 == 0)    )\n\t\t{\n\t\t\tSystem.out.println(\"YES\");\n\t\t} else {\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner scan = new Scanner(System.in);\n\t\tint a = scan.nextInt();\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tq.add(4);\n\t\tq.add(7);\n\t\tboolean luck = false;\n\t\twhile(!q.isEmpty() && !luck)\n\t\t{\n\t\t\tint f = q.poll();\n\t\t\tif(a%f == 0)\n\t\t\t{\n\t\t\t\tluck = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(f<a)\n\t\t\t{\n\t\t\t\tint t = (f+\"\").length();\n\t\t\t\tint tt = (int)Math.pow(10, t);\n\t\t\t\tq.add(tt*4+f);\n\t\t\t\tq.add(tt*7+f);\n\t\t\t}\n\t\t}\n\t\tif(luck)\n\t\t\tSystem.out.println(\"YES\");\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "    public static void main (String args [])\n        Scanner read = new Scanner(System.in);\n        int n = read.nextInt();\n        int n1 = n; boolean q = true;\n        while (n1 > 0)\n        {\n            if (n % n1 == 0)\n            {\n                if (check(n1))\n                {\n                    System.out.print(\"YES\");\n                    q = false;\n                    break;\n                }   \n            }\n            n1--;\n        }\n        if (q) System.out.print(\"NO\");\n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {        \n        //Scanner reader = new Scanner(new File(\"input.txt\"));\n        //PrintWriter writer = new PrintWriter(\"output.txt\");\n        Scanner reader = new Scanner(System.in);\n        writer = new PrintWriter(System.out);\n        \n        n = reader.nextInt();\n        maxstep = String.valueOf(n).length() + 1;\n        \n        g(0, 0);\n        \n        writer.print(\"NO\");\n        writer.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        \n        int n = s.nextInt();\n        int i = -1;\n        boolean ehLuck = false;\n        preencheLucky();\n        while (n >= luck[++i]) {\n            if (i > 13) {\n                break;\n            }\n            if (n % luck[i] == 0) {\n                ehLuck = true;\n                break;\n            }\n        }\n        if (ehLuck) {\n            System.out.println(\"YES\");\n        } else {\n            System.out.println(\"NO\");\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new n122A().run();\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String args[])\n        Scanner obj=new Scanner(System.in);\n        int n;\n        String d=\"0\";\n        n=obj.nextInt();\n        if(n%4==0 || n%7==0 || n%47==0 || n%74==0 || n%447==0 || n%474==0 || n%747==0)\n        d=\"YES\";\n        else if(n%444==0 || n%477==0 || n%744==0 || n%774==0 || n%777==0)\n        d=\"YES\";\n        else\n        d=\"NO\";\n        System.out.print(d);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tint a[]={4,7,44,47,74,77,444,447,474,477,744,747,774,777};\n\t\tint n=in.nextInt();\n\t\tint i=0;\n\t\tboolean yes=false;\n\t\twhile((i<14)&&(a[i]<=n)){\n\t\t\tif(n%a[i]==0){\n\t\t\t\tSystem.out.print(\"YES\");\n\t\t\t\tyes=true;\n\t\t\t\tbreak;\n\t\t\t} i++;\n\t\t}\n\t\tif(!yes)\n\t\tSystem.out.print(\"NO\");\n\t}\n", "complexity": "constant"}
{"code": "    public static void main (String args[])\n        Scanner i= new Scanner(System.in);\n        int n,p;\n        \n       \n        n=i.nextInt(); int t=n;\n        while(n!=0)\n        {\n            p=n%10;\n            if(p!=4||p!=7)\n           { if(t%7==0||t%4==0||t%47==0||t%74==0||t%447==0||t%477==0||t%474==0)\n               System.out.print(\"YES\");\n               else System.out.print(\"NO\");\n\n            break;}\n            else System.out.print(\"NO\");\n            \n            n=(n/10);\n            }\n           \n\n\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "public static void main(String[] args) throws NumberFormatException, IOException {\n\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\tint n = Integer.parseInt(bf.readLine());\n\t  System.out.println((n%4==0||n%7==0||n%47==0||n%74==0||n%447==0||n%474==0||n%477==0||n%744==0||n%747==0||n%774==0)?\"YES\":\"NO\");\n}\n", "complexity": "constant"}
{"code": "   public static void main(String args[]) throws IOException\n    BufferedReader cin=new BufferedReader(new InputStreamReader(System.in));\n    \n    String s=cin.readLine();\n    int l=s.length();\n    int n=Integer.parseInt(s);\n    if(s.equals(\"47\") || s.equals(\"4\") || s.equals(\"7\") || s.equals(\"74\") || s.equals(\"447\") || s.equals(\"477\") || s.equals(\"474\") || s.equals(\"44\") || s.equals(\"77\") || s.equals(\"444\") || s.equals(\"777\") || s.equals(\"747\") || s.equals(\"774\") || s.equals(\"744\"))\n          \n          System.out.println(\"YES\");\n    else if(n%(47)==0 || n%(4)==0 || n%(7)==0 || n%(74)==0 || n%(447)==0 || n%(477)==0 || n%(474)==0 || n%(44)==0 || n%(77)==0 || n%(444)==0 || n%(777)==0  || n%(747)==0  || n%(774)==0  || n%(744)==0)\n            System.out.println(\"YES\");\n    else\n            System.out.println(\"NO\");\n            }\n", "complexity": "constant"}
{"code": "", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);\n\t\tint number=input.nextInt();\n\t\tint flag=0;\n\t\tif(number%4==0)flag=1;\n\t\telse if(number%7==0)flag=1;\n\t\telse if(number%47==0)flag=1;\n\t\telse if(number%74==0)flag=1;\n\t\telse if(number%444==0)flag=1;\n\t\telse if(number%447==0)flag=1;\n\t\telse if(number%474==0)flag=1;\n\t\telse if(number%477==0)flag=1;\n\t\telse if(number%744==0)flag=1;\n\t\telse if(number%747==0)flag=1;\n\t\telse if(number%774==0)flag=1;\n\t\telse if(number%777==0)flag=1;\n\t\tif(flag==1)System.out.println(\"YES\");\n\t\telse System.out.println(\"NO\");\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        if ((n%4==0)||(n%7==0)||(n%44==0)||(n%47==0)||(n%74==0)||(n%77==0)||(n%444==0)||(n%447==0)||(n%474==0)||(n%477==0)||(n%744==0)||(n%747==0)||(n%774==0)||(n%777==0)) {\n            System.out.println(\"YES\");\n        } else {\n            System.out.println(\"NO\");\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Sol122A().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tif (((n % 4) == 0) || ((n % 7) == 0) || ((n % 44) == 0) || ((n % 47) == 0) || ((n % 74) == 0) || ((n % 77) == 0) || ((n % 444) == 0) || ((n % 447) == 0) || ((n % 474) == 0) || ((n % 477) == 0) || ((n % 744) == 0) || ((n % 747) == 0) || ((n % 774) == 0) || ((n % 777) == 0))\n\t\t\tSystem.out.print(\"YES\");\n\t\telse\n\t\t\tSystem.out.print(\"NO\");\n\t\tin.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n       Scanner in = new Scanner(System.in);\n       int n = in.nextInt();\n       boolean ok = (n % 4 == 0) || (n % 7 == 0) || (n % 47 == 0) || (n % 74 == 0) || (n % 447 == 0) || (n % 474 == 0) || (n % 477 == 0) || (n % 744 == 0) || (n % 747 == 0) || (n % 774 == 0);\n       if (ok) System.out.println(\"YES\"); else System.out.println(\"NO\");\n    } \n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        int n=cin.nextInt();\n        if(n%4==0 || n%7==0 || n%44==0 || n%47==0 || n%74==0 || n%77==0 || n%444==0 || n%447==0 || n%474==0 ||\n                n%477==0 || n%744==0 || n%747==0 || n%774==0 ||n%777==0) System.out.print(\"YES\");\n        else System.out.print(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int arr[] = {4,7,47,74,447,474,477,744,747,774};\n        int i=0, x = in.nextInt();\n        while (i<arr.length)\n        if (x%arr[i++] == 0)\n        {\n             System.out.print(\"YES\");\n             return;\n        }\n        System.out.print(\"NO\");\n    }\n", "complexity": "constant"}
{"code": "        public static void main(String args[]) throws IOException {\n                new CF().solution();\n        }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        check = true;\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        String s = n + \"\";\n        recurse(n, s.length(), \"4\");\n        if (!check)\n            System.out.println(\"YES\");\n        else {\n            recurse(n, s.length(), \"7\");\n            if (!check)\n                System.out.println(\"YES\");\n            else\n                System.out.println(\"NO\");\n        }\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    OutputWriter out = new OutputWriter(outputStream);\n    ABirthday solver = new ABirthday();\n    solver.solve(1, in, out);\n    out.close();\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) { new CF1068A(); }\n", "complexity": "constant"}
{"code": "    public static void main(String []args){\n    \t\t\tScanner in = new Scanner(System.in);\n\n    long n=in.nextLong();\n\t\tlong m=in.nextLong();\n\t\tlong k=in.nextLong();\n\t\tlong l=in.nextLong();\n \n\t\tlong j=((k+l)/m);\n\t\tif((k+l)%m!=0)j++;\n\t\tif((k+l>n) || j*m>n) {\n\t\t\tSystem.out.println(-1);\n\t\t}else {\n\t\t\t\n\t\t\tSystem.out.println(j);\n\t\t}\n\n\n    }\n", "complexity": "constant"}
{"code": " \tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tString[] s = new String[2];\n\t\tfor(int i = 0; i < 2; i++){\n\t\t\ts[i] = scanner.next();\n\t\t}\n\t\tint n = s[0].length();\n\t\tchar[][] c = new char[2][n];\n\t\tfor(int i = 0; i < 2; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tc[i][j] = s[i].charAt(j);\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n-1; i++){\n\t\t\tif(c[0][i] == '0' && c[1][i] == '0' && c[0][i+1] == '0'){\n\t\t\t\tc[0][i] = 'X';\n\t\t\t\tc[1][i] = 'X';\n\t\t\t\tc[0][i+1] = 'X';\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c[0][i] == '0' && c[1][i] == '0' && c[1][i+1] == '0'){\n\t\t\t\tc[0][i] = 'X';\n\t\t\t\tc[1][i] = 'X';\n\t\t\t\tc[1][i+1] = 'X';\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c[0][i] == '0' && c[0][i+1] == '0' && c[1][i+1] == '0'){\n\t\t\t\tc[0][i] = 'X';\n\t\t\t\tc[0][i+1] = 'X';\n\t\t\t\tc[1][i+1] = 'X';\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c[0][i+1] == '0' && c[1][i+1] == '0' && c[1][i] == '0'){\n\t\t\t\tc[1][i] = 'X';\n\t\t\t\tc[0][i+1] = 'X';\n\t\t\t\tc[1][i+1] = 'X';\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) { new bhaa().run(); }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner input = new Scanner(System.in);\n\t\tdouble n = input.nextInt();\n\t\tdouble k = input.nextInt();\n\t\tdouble red = 0;\n\t\tdouble green = 0;\n\t\tdouble blue = 0;\n\t\tdouble ans = 0;\n\t\tred = (2 * n) / k;\n\t\tgreen = (5 * n) / k;\n\t\tblue = (8 * n) / k;\n\n\t\tdouble red1 = Math.ceil(red) ;\n\t\tdouble green1 = Math.ceil(green);\n\t\tdouble blue1 = Math.ceil(blue);\n\n\t\tans+=red1;\n\t\tans+=green1;\n\t\tans+=blue1;\n\t\tDouble answer = new Double(ans);\n\t\tint finished = answer.intValue();\n\t\tSystem.out.println(finished);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        long n = scanner.nextLong();\n        long x = scanner.nextLong(), y = scanner.nextLong();\n        long whiteSteps, blackSteps;\n\n        if(x == 1 || y == 1){\n            whiteSteps = (x - 1) + (y - 1);\n        } else {\n            whiteSteps = Math.min((x - 1) + Math.abs(y - x), (y - 1) + Math.abs(y - x));\n        }\n\n        if(x == n || y == n){\n            blackSteps = (n - x) + (n - y);\n        } else {\n            blackSteps = Math.min((n - x) + Math.abs(y - x), (n - y) + Math.abs(y - x));\n        }\n\n        if (whiteSteps <= blackSteps){\n            System.out.println(\"White\");\n        } else {\n            System.out.println(\"Black\");\n        }\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\nScanner input = new Scanner(System.in);\nlong size = input.nextLong();\nlong a = input.nextLong();\nlong b = input.nextLong();\n  long sum = a+b;\n   long d = sum-2;\n   long d1 = size*2 - sum;\nif(d<d1) System.out.println(\"White\");\nelse if(d>d1) System.out.println(\"Black\");\nelse System.out.println(\"White\");\n\n\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args)\n    FastReader fr = new FastReader();\n    long n = fr.nextLong();\n    long x = fr.nextLong();\n    long y = fr.nextLong();\n    long w = Long.min(x,y) - 1 + (x - Long.min(x,y)) + (y - Long.min(x,y));\n    long b = n - Long.max(x,y) + (Long.max(x,y) - x) + (Long.max(x,y) - y);\n    if(w <= b) System.out.println(\"White\");\n    else System.out.println(\"Black\");\n\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[]YAHIA_MOSTAFA){\n\t\tScanner sc =new Scanner(System.in);\n\t\tlong n=sc.nextLong(),x=sc.nextLong(),y=sc.nextLong();\n\t\tlong xb,xw,yb,yw;\n\t\txw=x-1;yw=y-1;xb=n-x;yb=n-y;\n\t\tif (x==n&&y==n){\n\t\t\tSystem.out.println(\"Black\");return;\n\t\t}\n\t\tlong c1=0,c2=0;\n\t\tlong f =Math.max(xb,yb);\n\t\tlong h =Math.max(xw,yw);\n\t\t//System.out.println(h+\" \"+f+\" \"+(h-f));\n\t\tif (h<=f)\n\t\t\tSystem.out.println(\"White\");\n\t\telse\n\t\t\tSystem.out.println(\"Black\");\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong num = sc.nextLong() + 1;\n\t\tsc.close();\n\t\tSystem.out.println(num % 2 == 0 || num == 1 ? num / 2 : num);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[])\n        Scanner sc=new Scanner(System.in);\n        long n=sc.nextLong();\n        if(n==0)\n        System.out.println(0);\n        else if(n%2==1)\n        System.out.println((n+1)/2);\n        else\n        System.out.println(n+1);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tlong n = sc.nextLong();\n\t\tlong k = sc.nextLong();\n\t\tSystem.out.println(solve(n, k));\n\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\t// your code goes here\n\t\t\tlong n,s,p;\n\t\t\tScanner in=new Scanner(System.in);\n\t\t\tn=in.nextLong();\n\t\t\ts=in.nextLong();\n\t\t\tif(n==1 && s<=1)\n\t\t\t{\n\t\t\t    System.out.print(n-1);\n\t\t\t}\n\t        else if(s<n)\n\t        {\n\t            if(s%2!=0)\n\t\t        {System.out.print(s/2);}\n\t\t        else\n\t\t        {System.out.print(s/2-1);}\n\t        }\n\t        else if(s==n)\n\t{\n\t    if(s%2==0)\n\t\t{System.out.println((n/2)-1);}\n\t\telse\n\t\t{System.out.println(n/2);}\n\t}\n\telse if(s<=(2*n-1))\t\n\t{\n\t\tSystem.out.print((2*n+1-s)/2);\n\t}\n\telse\n\t{\n\t\tSystem.out.print(0);\n\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Soldiers().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tBufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n\t\tint num=Integer.parseInt(in.readLine());\n\t\tSystem.out.println((num/2)*(3));\n\t}\t\t\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n=in.nextInt();\n    \n        out.print(n/2+n);\n       \n        out.close();\n        in.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new java.util.Scanner(System.in).nextInt() / 2 * 3);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\t\t\n\t\tSystem.out.println((int)(n+n/2));\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[])throws Exception{\n        br=new BufferedReader(new InputStreamReader(System.in));\n        long n=toLong();\n        long res=n+n/2;\n        System.out.println(res);\n\n\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    new Thread(new Main()).start();\n  }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)\n\nScanner sc = new Scanner(System.in);\nint T =sc.nextInt();\n\nint t =T/2;\nSystem.out.println(t*3);\n\n\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        System.out.println(n + n / 2);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader r=new BufferedReader(new InputStreamReader(System.in));\n\t\tString s=r.readLine();\n\t\t\n\t\tint n=Integer.parseInt(s);\n\t\tSystem.out.println(n*3/2);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\tSystem.out.println(n * 3 / 2);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tSystem.out.println(n / 2 + n);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)\n        Kattio io = new Kattio(System.in);\n\n        int n = io.getInt();\n        int ans = 0;\n        int V = n;\n        int A = n;\n\n        A -= n/2;\n        ans += n/2;\n\n        V -= A;\n        ans += A;\n\n        A -= n/2;\n        ans += n/2;\n\n        io.println(ans);\n        io.flush();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint in = sc.nextInt();\n\t\tSystem.out.println(in/2 + in);\n\t\tSystem.exit(0);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc=new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n         int n=sc.nextInt();\n         pw.print(n+n/2);\n\tpw.close();\n\tsc.close();\n}\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    long n = sc.nextLong();\n    System.out.println(3 * (n / 2));\n  }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        new TaskA1().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n       Scanner in = new Scanner(System.in);\n       PrintStream out = System.out;\n       out.println(in.nextInt() / 2 * 3);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tSystem.out.println(3 * n / 2);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) {\n\t\ttry {\n\t\t\tInputStreamReader isr = new InputStreamReader(System.in);\n\t\t\tBufferedReader br = new BufferedReader(isr);\n\n\t\t\twhile (true) {\n\t\t\t\tString str = br.readLine();\n\t\t\t\tint i = Integer.parseInt(str);\n\n\t\t\t\tSystem.out.println(i*2-i/2);\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception\n        new N72A().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n  = sc.nextInt();\n        \n        int count = 0;\n        \n        count = n/2;\n        \n        count = count + (n - n/2);\n        \n        n = n - n/2;\n            \n        count = count + n;  \n\n        \n        System.out.println(count);\n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        System.out.println(n*3/2);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new TemplateBuf().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        new ProblemA_72().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long n = in.nextLong();\n        System.out.print(String.format(\"%d\",(long)(n*1.5)));\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new A().run();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tA a = new A();\n\t\ta.processInput();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new BetaRound72_Div2_A()).start();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new Thread(new Solution()).start();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        \n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(n/2*3);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner read = new Scanner(System.in);\n        int n = read.nextInt();\n        System.out.println(n*3/2);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(n + n / 2);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)throws Exception{\n        int n = nextInt();\n        \n        out.println(n*3/2);\n        \n        out.flush();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        \n        System.out.println(n/2*3);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner entrada = new Scanner(System.in);\n\t\twhile(entrada.hasNextInt())\n\t\t{\n\t\t\tint n = entrada.nextInt();\n\t\t\tSystem.out.println(n+(n/2));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "        public static void main(String[] args) throws IOException {\n            new A();\n        }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        int n,b = 0;\n        n=in.nextInt();\n        if (n%2==0) {\n            b=n+n/2;\n            System.out.println(b);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        \n        int n = input.nextInt();\n        \n        System.out.println(n * 6 / 4);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException \n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tSystem.out.println(n / 2 * 3);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        \n        System.out.println((n/2)*3);\n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();       \n        System.out.println(n+n/2);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tint n = in.nextInt();\n\t\t\n\t\tout.printf(Locale.US, \"%d\", n/2*3);\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        // TODO code application logic here\n        try\n        {\n            Parserdoubt pd=new Parserdoubt(System.in);\n            //BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n            int n=pd.nextInt();\n            PrintWriter pw=new PrintWriter(System.out);\n            pw.println((n*3)/2);\n            pw.flush();\n        }\n        catch(Exception e)\n        {}\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tSystem.out.println((2*n) - (n/2));\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(in.readLine());\n        System.out.println((n/2) *3);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        new ToyArmy().solve();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception{\n        FastReader sc=new FastReader(); \n        OutputStream outputStream = System.out;\n        PrintWriter out = new PrintWriter(outputStream);\n        int n=sc.nextInt();\n        HashMap<String,Integer> map=new HashMap<String,Integer>();\n        for(int i=0;i<n;i++) {\n            map.put(sc.next(), 1);\n        }\n        ArrayList<String> list=new ArrayList<String>();\n        int count=0;\n        if(!map.containsKey(\"purple\")) {\n            count++;\n            list.add(\"Power\");\n        }\nif(!map.containsKey(\"green\")) {\n    count++;\n    list.add(\"Time\");\n        }\n\nif(!map.containsKey(\"blue\")) {\n    count++;\n    list.add(\"Space\");\n}\n\nif(!map.containsKey(\"orange\")) {\n    count++;\n    list.add(\"Soul\");\n}\n\nif(!map.containsKey(\"red\")) {\n    count++;\n    list.add(\"Reality\");\n}\n\nif(!map.containsKey(\"yellow\")) {\n    count++;\n    list.add(\"Mind\");\n}System.out.println(count);\n    for(String s:list) {\n        System.out.println(s);\n    }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String []args){\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble a,v;\n\t\tdouble l,d,w;\n\t\tdouble time;\n\t\t\n\t\ta = cin.nextDouble();\n\t\tv = cin.nextDouble();\n\t\t\n\t\tl = cin.nextDouble();\n\t\td = cin.nextDouble();\n\t\tw = cin.nextDouble();\n\t\t\n\t\tif(v < w + eps)\n\t\t{\n\t\t\tdouble t1 = v / a;\n\t\t\tdouble len_bond = (v * v) / (2 * a);\n\t\t\tif(len_bond + eps > l)\n\t\t\t{\n\t\t\t\ttime = Math.sqrt(2 * l / a);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdouble t2 = (l - len_bond) / v;\n\t\t\t\ttime = t1 + t2;\n\t\t\t}\n\t\t\tSystem.out.println(time);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdouble len_bondv =  (v * v) / (2 * a);\n\t\t\tdouble len_bondw = (w * w) / (2 * a);\n\t\t\tif(len_bondw + eps > d)\n\t\t\t{\n\t\t\t\tif(len_bondv + eps > l)\n\t\t\t\t\ttime = Math.sqrt(2 * l / a);\n\t\t\t\telse{\n\t\t\t\t\tdouble t1 = v / a;\n\t\t\t\t\tdouble t2 = (l - len_bondv) / v;\n\t\t\t\t\ttime = t1 + t2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdouble len_bonds = (v * v - w * w) / (2 * a);\n\t\t\t\t\n\t\t\t\tif(len_bondv + len_bonds < d + eps)\n\t\t\t\t\ttime = v / a + (d - len_bondv - len_bonds) / v + (v - w) / a;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdouble f = Math.sqrt(d * a + w * w / 2);\n\t\t\t\t\ttime = f / a + (f - w) / a;\n\t\t\t\t}\n\t\t\t\tif (len_bonds + eps > l - d) {\n\t\t\t\t\tdouble lv = Math.sqrt((l - d) * 2 * a + w * w);\n\t\t\t\t\ttime += (lv - w) / a;\n\t\t\t\t} else {\n\t\t\t\t\ttime += (v - w) / a + (l - d - len_bonds) / v;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(time);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) throws IOException\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main (String args[]) throws IOException {\n\t\t\tbeolvas();\n\t\t\tdouble s = l; //hátralévő út\n\t\t\tdouble t = 0; //eltelt idő\n\t\t\t\n\t\t\tif (v <= w ||  Math.sqrt(2*a*d) <= w) { //nincs korlátozás\n\t\t\t\tif (gyorsulut(0,v) > l) {\n\t\t\t\t\tt+=gyorsulido(0, Math.sqrt(2*a*l));\n\t\t\t\t\ts = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ts-=gyorsulut(0,v);\n\t\t\t\t\tt+=gyorsulido(0,v);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t\t//gyorsuló szakaszok a korlátozásig\n\t\t\t\tif (d < gyorsulut(0,v)+gyorsulut(v,w)) {\n\t\t\t\t\tdouble x = Math.sqrt(a*(d-w*w/(2*a))+w*w);\n\t\t\t\t\ts-=gyorsulut(0,w)+2*gyorsulut(w,x);\n\t\t\t\t\tt+=gyorsulido(0,w)+2*gyorsulido(w,x);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ts-=gyorsulut(0,v)+gyorsulut(w,v);\n\t\t\t\t\tt+=gyorsulido(0,v)+gyorsulido(w,v);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//gyorsuló szakaszok a korlátozástól\n\t\t\t\tif (gyorsulut(v,w) > l-d) {\n\t\t\t\t\tdouble y = Math.sqrt(2*a*(l-d)+w*w);\n\t\t\t\t\ts-= gyorsulut(w,y);\n\t\t\t\t\tt+=gyorsulido(w,y);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ts-=gyorsulut(w,v);\n\t\t\t\t\tt+=gyorsulido(w,v);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tt+=s/v; //nem gyorsuló szakaszok ideje\n\t\t\t\n\t\t\tSystem.out.println(t);\n\t\t\t\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tboolean online = System.getProperty(\"ONLINE_JUDGE\") != null;\n\t\tScanner in = online ? new Scanner(System.in) : new Scanner(new FileReader(\"input.txt\"));\n\t\tPrintWriter out = online ? new PrintWriter(System.out) : new PrintWriter(new FileWriter(\"output.txt\"));\n\t\t\n\n\t\ta = in.nextInt();\n\t\tv = in.nextInt();\n\t\tl = in.nextInt();\n\t\td = in.nextInt();\n\t\tw = (double) in.nextInt();\n\t\t\n\t\tdouble t,t1,t2;\n\n\t\tif (v > w) { // ����� ��������� ������, ����� ����� ���\n\t\t\n\t\t\n\t\t// ������� ������ �� �����\n\t\t\n\t\t\tif (2 * d * a > 2 * v * v - w * w) { // ���� ��������� v. ����� ��\n\t\t\t\tt1 = (2 * v - w) * 1.0 / a + (d - (2 * v * v - w * w) * 1.0 / (2 * a)) / v; \n\t\t\t} else if (2 * d * a > w * w) { // ���� �� ���������, �� ���� � ���� - ���������\n\t\t\t\tdouble topv = Math.sqrt(d * a + w * w * 1.0 / 2);\n\t\t\t\tt1 = (2 * topv - w) * 1.0 / a;\n\t\t\t} else { // ���� ����������� �� ������ ����� - �����, ���������\n\t\t\t\tt1 = Math.sqrt(2 * d * 1.0 / a);\n\t\t\t\tw = Math.sqrt(2 * a * d * 1.0); \n\t\t\t}\n\t\t// ������� ������ ����� �����\n\t\t\tt2 = afterMark(l - d, w); \n\t\t\n\t\tt = t1 + t2;\n\t\t\t\n\t\t} else {\n\t\t\tt = afterMark(l, 0.0);\t\t\n\t\t}\n\t\t\n\t\tout.println(t);\n\t\tout.flush();\n\t\treturn;\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        double a = sc.nextDouble();\n        double v = sc.nextDouble();\n        double l = sc.nextDouble();\n        double d = sc.nextDouble();\n        double w = sc.nextDouble();\n\n        double t = 0d;\n        double[] r = acce(0, a, w);\n        if (v <= w || r[1] >= d) t = time(0, a, v, l);\n        else {\n            t += r[0];\n            t += 2d * time(w, a, v, (d - r[1])/2d);\n            t += time(w, a, v, l - d);\n        }\n\n        System.out.println(t);\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    double maxSpeed = in.nextInt();\n    double len = in.nextInt();\n    double delayDist = in.nextInt();\n    double delaySpeed = in.nextInt();\n    \n    double timeToDelaySpeed = delaySpeed/a;\n    double timeToDelay = travelS(a, 0.0, maxSpeed, delayDist);\n    //System.out.printf(\"timeToDelaySpeed=%.5f, timeToDelay=%.5f\\n\", timeToDelaySpeed, timeToDelay);\n    if (timeToDelay < timeToDelaySpeed) { // we won't reach delaySpeed before delay marker\n      // 2 cases: we don't reach max by time we reach end\n      timeToDelay = travelS(a, 0.0, maxSpeed, len);\n      double timeToMax = maxSpeed/a;\n      if (timeToDelay < timeToMax) {\n        System.out.printf(\"%.9f\\n\", timeToDelay);\n        return;\n      }\n      // we do reach max, then travel at max\n      double[] parts = travelA(a, 0.0, maxSpeed);\n      double remainingDist = len - parts[1];\n      double time = parts[0] + remainingDist / maxSpeed;\n      System.out.printf(\"%.9f\\n\", time);\n      return;\n    }\n    if (delaySpeed > maxSpeed) {\n      double time = travelS(a, 0.0, maxSpeed, len);\n      System.out.printf(\"%.9f\\n\", time);\n      return;\n    }\n    \n    // binary search to find best velocity to stop acceleration in beginning\n    double lowV = delaySpeed;\n    double highV = maxSpeed;\n    int loopCount = 1000;\n    double[] initial = null;\n    double[] secondary = null;\n    while (loopCount-->0) {\n      double guessV = (lowV+highV)/2.0;\n      initial = travelA(a, 0.0, guessV);\n      secondary = travelA(a, guessV, Math.min(delaySpeed, maxSpeed));\n      if (initial[1] + secondary[1] < delayDist) { // okay, we can go faster\n        lowV = guessV;\n      } else {\n        highV = guessV;\n      }\n    }\n    double totalTime = 0.0;\n    double finalSpeed = 0.0;\n    initial = travelA(a, 0.0, lowV);\n    secondary = travelA(a, lowV, delaySpeed);\n    totalTime = initial[0] + secondary[0];\n    double totalDist = initial[1] + secondary[1];\n    totalTime += (delayDist-totalDist)/maxSpeed;\n    \n    // now we have delayDist to go, and we are at delaySpeed\n    totalTime += travelS(a, delaySpeed, maxSpeed, len-delayDist);\n    System.out.printf(\"%.9f\\n\", totalTime);\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tLocale.setDefault(Locale.US);\n\t\t} catch (Exception e) {\n\t\t}\n\t\tnew Main().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] arg) {\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        new D().solve();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        double a = in.nextInt();\n        double v = in.nextInt();\n        double l = in.nextInt();\n        double d = in.nextInt();\n        double w = in.nextInt();\n\n        if (v <= w) {\n            double t = v / a;\n            if (0.5 * t * t * a > l) {\n                t = Math.sqrt(2 * l / a);\n            } else {\n                t += (l - 0.5 * t * t * a) / v;\n            }\n            System.out.printf(\"%.5f\", t);\n\n        } else {\n            double total = 0.0;\n            double t = v / a;\n            double t2 = (v - w) / a;\n            double tempt = Math.sqrt(2.0 * d / a);\n            if (tempt * a <= w) {\n                total += tempt;\n                w = tempt*a;\n            } else if (0.5 * t * t * a +v*t2 - 0.5 * t2 * t2 * a > d) {\n                double as = 2.0*a;\n                double bs = 4.0*w;\n                double cs = ((w * w) / (a) - 2.0 * d );\n\n                double delta = bs * bs - 4.0 * as * cs;\n                double root = (-bs + Math.sqrt(delta)) / (2.0 * as);\n                if (root < 0.0) {\n                    root = (-bs - Math.sqrt(delta)) / (2.0 * as);\n                }\n                total += (2.0 * root + w / a);\n            } else {\n                total += t + t2;\n                double smd = (d - 0.5 * t * t * a - v*t2 + 0.5 * t2 * t2 * a) / v;\n                total += smd;\n            }\n            double t3 = (v - w) / a;\n            if (w * t3 + 0.5 * t3 * t3 * a > l - d) {\n                double as = 0.5 * a;\n                double bs = w;\n                double cs = d - l;\n\n                double delta = bs * bs - 4.0 * as * cs;\n                double root = (-bs + Math.sqrt(delta)) / (2.0 * as);\n                if (root < 0.0) {\n                    root = (-bs - Math.sqrt(delta)) / (2.0 * as);\n                }\n                total += root;\n            } else {\n                total += t3;\n                double t4 = (l - (w * t3 + 0.5 * t3 * t3 * a) - d) / v;\n                total += t4;\n            }\n            System.out.printf(\"%.5f\", total);\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Solution().run();\n\t} \n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new Berland().run();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Rules()).start();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tdouble a = in.nextDouble(), v = in.nextDouble(), l = in.nextDouble(),\n\t\t\t\td = in.nextDouble(), w = Math.min(v, in.nextDouble());\n\n\t\tdouble x = v * v / (2 * a), y = d - (v * v - w * w) / (2 * a),\n\t\t\t\tz = d + (v * v - w * w) / (2 * a);\n\t\t//out.println(x + \" \" + y + \" \" + z);\n\t\tdouble L, R, T = 0, V = 0, t;\n\n\t\t//OX\n\t\tL = 0;\n\t\tR = x;\n\t\tif (x > y && x < z) {\n\t\t\tR = (x + y) / 2;\n\t\t} else if (x > l) {\n\t\t\tR = l;\n\t\t}\n\t\tt = getTime(V, a, L, R);\n\t\tV = getVelocity(V, t, L, R);\n\t\t//out.println(\"l: \" + L + \", r: \" + R + \", t: \" + t + \", v: \" + V);\n\t\tT += t;\n\n\t\t//XY\n\t\tif (x < y) {\n\t\t\tT += (y - x) / v;\n\t\t}\n\t\t//out.println(\"t: \" + (T - t));\n\n\t\t//YD\n\t\tL = y;\n\t\tR = d;\n\t\tif (x > y && x < z) {\n\t\t\tL = (x + y) / 2;\n\t\t} else if (x >= z) {\n\t\t\tL = R;\n\t\t}\n\t\tt = getTime(V, -a, L, R);\n\t\tV = getVelocity(V, t, L, R);\n\t\tT += t;\n\t\t//out.println(\"l: \" + L + \", r: \" + R + \", t: \" + t + \", v: \" + V);\n\n\t\t//DZ\n\t\tL = d;\n\t\tR = z;\n\t\tif (x >= z) {\n\t\t\tR = L;\n\t\t} else if (z > l) {\n\t\t\tR = l;\n\t\t}\n\t\tt = getTime(V, a, L, R);\n\t\tV = getVelocity(V, t, L, R);\n\t\tT += t;\n\t\t//out.println(\"l: \" + L + \", r: \" + R + \", t: \" + t + \", v: \" + V);\n\n\t\t//ZL\n\t\tL = z;\n\t\tR = l;\n\t\tif (x > z) {\n\t\t\tL = x;\n\t\t}\n\t\tif (L < R) {\n\t\t\tT += (R - L) / v;\n\t\t}\n\n\t\tout.format(Locale.US, \"%.12f%n\", T);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble a = sc.nextDouble();\n\t\tdouble v = sc.nextDouble();\n\t\tdouble l = sc.nextDouble();\n\t\tdouble d = sc.nextDouble();\n\t\tdouble w = sc.nextDouble();\n\t\tdouble t = 0;\n\t\tif (w >= v) {\n\t\t\tdouble t1 = v / a;\n\t\t\tdouble s1 = a * t1 * t1 / 2;\n\t\t\tif (s1 > l) {\n\t\t\t\tt = Math.sqrt(2 * l / a);\n\t\t\t} else {\n\t\t\t\tt = t1 + (l - s1) / v;\n\t\t\t}\n\t\t} else {\n\t\t\tdouble t2 = Math.sqrt(2 * d / a);\n\t\t\tif (a * t2 <= w) {\n\t\t\t\tdouble t1 = v / a;\n\t\t\t\tdouble s1 = a * t1 * t1 / 2;\n\t\t\t\tif (s1 > l) {\n\t\t\t\t\tt = Math.sqrt(2 * l / a);\n\t\t\t\t} else {\n\t\t\t\t\tt = t1 + (l - s1) / v;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdouble tup = v / a;\n\t\t\t\tdouble tdown = (v - w) / a;\n\t\t\t\tdouble sup = a * tup * tup / 2;\n\t\t\t\tdouble sdown = v * tdown - a * tdown * tdown / 2;\n\t\t\t\tif (sup + sdown <= d) {\n\t\t\t\t\tdouble tmax = (d - sup - sdown) / v;\n\t\t\t\t\tt = tup + tmax + tdown;\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tdouble tw = w / a;\n\t\t\t\t\tdouble sw = a * tw * tw / 2;\n\t\t\t\t\tdouble sl = (d - sw) / 2;\n\t\t\t\t\tdouble dis = w * w + 2 * a * sl;\n\t\t\t\t\tdouble tu1 = (- w - Math.sqrt(dis)) / a;\n\t\t\t\t\tif (tu1 < 0) {\n\t\t\t\t\t\ttu1 = (- w + Math.sqrt(dis)) / a;\n\t\t\t\t\t}\n\t\t\t\t\tt = tw + 2 * tu1;\n\t\t\t\t}\n\t\t\t\tdouble sreup = w * tdown + a * tdown * tdown / 2;\n\t\t\t\tif (sreup <= l - d) {\n\t\t\t\t\tt += tdown;\n\t\t\t\t\tt += (l - d - sreup) / v;\n\t\t\t\t} else {\n\t\t\t\t\tdouble dis = w * w - 2 * a * (d - l);\n\t\t\t\t\tdouble tu1 = (- w - Math.sqrt(dis)) / a;\n\t\t\t\t\tif (tu1 < 0) {\n\t\t\t\t\t\ttu1 = (- w + Math.sqrt(dis)) / a;\n\t\t\t\t\t}\n\t\t\t\t\tt += tu1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(t);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew D5().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)\n        double a = 0, v = 0, l = 0, d = 0, w = 0;\n        try\n        {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            String[] str = br.readLine().split(\" \");\n            a = Double.parseDouble(str[0]);\n            v = Double.parseDouble(str[1]);\n            str = br.readLine().split(\" \");\n            l = Double.parseDouble(str[0]);\n            d = Double.parseDouble(str[1]);\n            w = Double.parseDouble(str[2]);\n        }\n        catch(Exception e)\n        {\n            System.out.println(e);\n        }\n\n        double t1, t2, t3, t4, t5, t, D = 0;\n        \n        if (w > v) w = v;\n        t2 = d / v - v / a + w * w / 2 / a / v;\n        if (t2 >= 0)\n        {\n            t1 = v / a; \n            t3 = t1 - w / a;\n        }\n        else\n        {\n            if (Math.sqrt(2 * d / a) > (w / a))\n            {\n                t1 = Math.sqrt((2 * a * d + w * w) / (a * a * 2));\n                t3 = t1 - w / a;\n            }\n            else\n            {\n                t1 = Math.sqrt(2 * d / a);\n                t3 = 0;\n            }\n            t2 = 0;\n        }\n        t5 = (l - d - v * v / 2 / a + a * (t1 - t3) * (t1 - t3) / 2) / v;\n        if (t5 >= 0) t4 = v / a - (t1 - t3);\n        else\n        {\n            t5 = 0;\n            t4 = -t1 + t3 + Math.sqrt((t1 - t3) * (t1 - t3) + 2 * (l - d) / a);\n        }\n        t = t1 + t2 + t3 + t4 + t5;\n        System.out.println(t);\n        //System.out.println(t1 + \" \" + t2 + \" \" + t3 + \" \" + t4 + \" \" + t5);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        double a = nextInt();\n        double v = nextInt();\n        double L = nextInt();\n        double d = nextInt();\n        double w = nextInt();\n        double ans = 0;\n        if (w >= v)\n            ans = go(0, a, L, v);\n        else {\n            ans = go(Math.min(w, Math.sqrt(2*a*d)), a, L-d, v);\n            if (2*a*d < w*w)\n                ans += Math.sqrt(2*d/a);\n            else {\n                if (d-v*v/(2*a) >= (v*v-w*w)/(2*a))\n                    ans += v/a+(v-w)/a+(d-v*v/(2*a)-(v*v-w*w)/(2*a))/v;\n                else {\n                    double x = Math.sqrt((w*w+2*a*d)/2);\n                    ans += x/a+(x-w)/a;\n                }\n            }\n        }\n        System.out.println(ans);\n        pw.close();\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    double maxSpeed = in.nextInt();\n    double len = in.nextInt();\n    double delayDist = in.nextInt();\n    double delaySpeed = in.nextInt();\n    \n    // two cases: I reach the delayPoint at a speed higher than the delaySpeed, or I don't.\n    double timeToDelayAtMax = travelS(a, 0.0, maxSpeed, delayDist);\n    double timeToDelayAtDelay = travelS(a, 0.0, delaySpeed, delayDist);\n    if (Math.abs(timeToDelayAtMax-timeToDelayAtDelay) < 0.00001) {\n      // I can reach the delayPoint without being delayed\n      double time = travelS(a, 0.0, maxSpeed, len);\n      System.out.printf(\"%.9f\\n\", time);\n      return;\n    }\n    \n    // binary search to find best velocity to stop acceleration in beginning\n    double lowV = delaySpeed;\n    double highV = maxSpeed;\n    int loopCount = 1000;\n    double[] initial = null;\n    double[] secondary = null;\n    while (loopCount-->0) {\n      double guessV = (lowV+highV)/2.0;\n      initial = travelA(a, 0.0, guessV);\n      secondary = travelA(a, guessV, Math.min(delaySpeed, maxSpeed));\n      if (initial[1] + secondary[1] < delayDist) { // okay, we can go faster\n        lowV = guessV;\n      } else {\n        highV = guessV;\n      }\n    }\n    double totalTime = 0.0;\n    double finalSpeed = 0.0;\n    initial = travelA(a, 0.0, lowV);\n    secondary = travelA(a, lowV, delaySpeed);\n    totalTime = initial[0] + secondary[0];\n    double totalDist = initial[1] + secondary[1];\n    totalTime += (delayDist-totalDist)/maxSpeed;\n    \n    // now we have delayDist to go, and we are at delaySpeed\n    totalTime += travelS(a, delaySpeed, maxSpeed, len-delayDist);\n    System.out.printf(\"%.9f\\n\", totalTime);\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew D().inp();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) throws Exception {\n        new D0005();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\tnew Traffic().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Throwable {\n        Thread t = new Thread(new Main());\n        t.start();\n        t.join();\n        if (sError != null)\n            throw sError;\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double a = scanner.nextDouble();\n        double maxV = scanner.nextDouble();\n        double l = scanner.nextDouble();\n        double d = scanner.nextDouble();\n        double w = scanner.nextDouble();\n\n        double r = l - d;\n        w = Math.min(w, maxV);\n\n        List<WayPoint> wayPoints = new ArrayList<WayPoint>(256);\n        double t = 0;\n\n        wayPoints.add(new WayPoint(0));\n\n        double dW = dTo(w, 0, a);\n        if (leq(dW, d)) {\n            wayPoints.add(new WayPoint(w));\n            {\n                double v = v(w, a, (d - dW) / 2);\n                v = Math.min(v, maxV);\n\n                wayPoints.add(new WayPoint(v));\n                wayPoints.add(new WayPoint(w));\n\n                double dW_V = dTo(v, w, a);\n                double vDistance = d - dW - 2 * dW_V;\n                if (!eq(vDistance)) {\n                    t += vDistance / maxV;\n                }\n            }\n            {\n                double dW_MaxV = dTo(maxV, w, a);\n                dW_MaxV = Math.min(dW_MaxV, r);\n                double v = v(w, a, dW_MaxV);\n                wayPoints.add(new WayPoint(v));\n                double dMaxV = r - dW_MaxV;\n                if (!eq(dMaxV)) {\n                    t += dMaxV / maxV;\n                }\n            }\n\n        } else {\n            double dMaxV = dTo(maxV, 0, a);\n            dMaxV = Math.min(dMaxV, l);\n            double v = v(0, a, dMaxV);\n            wayPoints.add(new WayPoint(v));\n            double dv = l - dMaxV;\n            if (!eq(dMaxV)) {\n                t += dv / maxV;\n            }\n        }\n\n        for (int i = 1; i < wayPoints.size(); ++i) {\n            double v0 = wayPoints.get(i - 1).v;\n            double v = wayPoints.get(i).v;\n            t += Math.abs(tTo(v, v0, a));\n        }\n        System.out.println(t);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        double a = in.nextDouble();\n        double v = in.nextDouble();\n        double l = in.nextDouble();\n        double d = in.nextDouble();\n        double w = in.nextDouble();\n        double ans = 0;\n        double maxSpeedBySign = Math.sqrt(2 * a * d);\n        double speedAtSign = -1;\n        if (v <= w) {\n            if (maxSpeedBySign <= v) {\n                ans += Math.sqrt(2 * d / a);\n                speedAtSign = maxSpeedBySign;\n\n            } else {\n                ans += v / a;\n                double distanceLeftTillSign = d - v * v / a / 2;\n                ans += distanceLeftTillSign / v;\n                speedAtSign = v;\n            }\n        } else {\n            if (maxSpeedBySign <= w) {\n                ans += Math.sqrt(2 * d / a);\n                speedAtSign = maxSpeedBySign;\n            } else {\n                double S = d / 2 - w * w / 4 / a;\n                double X = d - S;\n                double speed = Math.sqrt(2 * a * X);\n                if (speed <= v) {\n                    ans += Math.sqrt(2 * X / a);\n                    ans += (speed - w) / a;\n                    speedAtSign = w;\n                } else {\n                    double distanceToAc = v * v / a / 2;\n                    double distanceToDe = (v * v - w * w) / a / 2;\n                    ans += Math.sqrt(2 * distanceToAc / a);\n                    ans += (d - distanceToAc - distanceToDe) / v;\n                    ans += (v - w) / a;\n                }\n                speedAtSign = w;\n            }\n        }\n        l -= d;\n        double timeToGetMaxSpeed = (v - speedAtSign) / a;\n        double timeToReachEnd = (-2 * speedAtSign + Math.sqrt(4 * speedAtSign\n                * speedAtSign + 8 * a * l))\n                / 2 / a;\n        if (timeToGetMaxSpeed < timeToReachEnd) {\n            ans += timeToGetMaxSpeed;\n            double distanceCoveredToMaxSpeed = speedAtSign * timeToGetMaxSpeed\n                    + 0.5 * a * timeToGetMaxSpeed * timeToGetMaxSpeed;\n            l -= distanceCoveredToMaxSpeed;\n            ans += l / v;\n        } else {\n            ans += timeToReachEnd;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tif (LOCAL) {\n\t\t\ttry {\n\t\t\t\tSystem.setIn(new FileInputStream(\"in.txt\"));\n\t\t\t} catch (Throwable e) {\n\t\t\t\tLOCAL = false;\n\t\t\t}\n\t\t}\n\t\tif (!LOCAL) {\n\t\t\ttry {\n\t\t\t\tLocale.setDefault(Locale.US);\n\t\t\t\tSystem.setOut(new PrintStream(new BufferedOutputStream(System.out)));\n\t\t\t} catch (Throwable e) {\n\t\t\t}\n\t\t}\n\t\tnew Main().run();\n\t\tSystem.out.flush();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew D().inp();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tnew d(/*\"d\"*/).run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tString[] data = s.readLine().split(\" \");\n\t\tdouble a = Double.valueOf(data[0]);\n\t\tdouble v = Double.valueOf(data[1]);\n\t\t\n\t\tString[] line = s.readLine().split(\" \");\n\t\tdouble l = Double.valueOf(line[0]);\n\t\tdouble d = Double.valueOf(line[1]);\n\t\tdouble w = Double.valueOf(line[2]);\n\n\t\tdouble ans = solve(a, v, l, d, w);\n\t\tout.println(String.format(\"%.07f\", ans));\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Solution();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tClass<?> here = new Object(){}.getClass().getEnclosingClass();\n\t\ttry {\n\t\t\tString packageName = here.getPackage().getName();\n\t\t\tpackageName = \"src/\" + packageName.replaceAll(\"\\\\.\", \"/\") + \"/\";\n\t\t\tSystem.setIn(new FileInputStream(packageName + \"input.txt\"));\n//\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(packageName + \"output.txt\")));\n\t\t} catch (FileNotFoundException e) {\n\t\t} catch (NullPointerException e) {\n\t\t}\n\n\t\tObject o = Class.forName(here.getName()).newInstance();\n\t\to.getClass().getMethod(\"run\").invoke(o);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        Main sloved = new Main();\n        sloved.run();\n        sloved.out.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        double a = sc.nextDouble();\n        double v = sc.nextDouble();\n        double l = sc.nextDouble();\n        double d = sc.nextDouble();\n        double w = sc.nextDouble();\n\n        double t = 0d;\n        if (v <= w) t = time(0, a, v, l);\n        else {\n            double[] r = acce(0, a, w);\n            if (r[1] >= d) t = time(0, a, v, l);\n            else {\n                t += r[0];\n                t += 2d * time(w, a, v, (d - r[1])/2d);\n                t += time(w, a, v, l - d);\n            }\n        }\n\n        System.out.println(t);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new D()).start();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\t(new FollowTrafficRules()).main();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        new ProblemD_05().run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args)\n        new D();\n    }\n", "complexity": "constant"}
{"code": " \tpublic static void main(String[] args) throws Exception {\n \t\tif (\"Satayev\".equals(System.getProperty(\"user.name\"))) {\n\t\t\tlong start = System.nanoTime();\n\t\t\tnew trafficerules().solve(new FileInputStream(\"input\"));\n\t\t\tSystem.err.printf(\"Time elapsed: %d ms.\\n\", (System.nanoTime()-start)/1000000);\n\t\t}\n\t\telse\n\t\t\tnew trafficerules().solve(System.in);\n \t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tSystem.out.println(n*n+(n-1)*(n-1));\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n    \tScanner s = new Scanner(System.in);\n    \tlong n = s.nextLong();\n    \tif(n >= 0)\n    \t\tSystem.out.println(n);\n    \telse {\n    \t\tString str = (\"\" + n).substring(1);\n    \t\tif(str.length() == 1)\n    \t\t\tSystem.out.println(\"-\" + str);\n    \t\telse {\n    \t\t\tlong one = Long.parseLong(str.substring(0, str.length()-1));\n    \t\t\tlong two = Long.parseLong(str.substring(0, str.length()-2) + str.substring(str.length()-1));\n    \t\t\tif(one > two)\n    \t\t\t\tSystem.out.println((two!=0?\"-\":\"\") + two);\n    \t\t\telse\n    \t\t\t\tSystem.out.println((one!=0?\"-\":\"\") + one);\n    \t\t}\n    \t}\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Thread(new Main()).start();\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) throws Exception {\n    Scanner scan = new Scanner(System.in);\n    int n = scan.nextInt();\n    int res = n;\n    String str = Integer.toString(n);\n    res = Math.max(res, Integer.parseInt(str.substring(0, str.length() - 1)));\n    res = Math.max(res, Integer.parseInt(str.substring(0, str.length() - 2) + str.substring(str.length() - 1)));\n    System.out.println(res);\n  }\n", "complexity": "constant"}
{"code": "        public static void main(String args[]){\n        \tScanner input = new Scanner(System.in);\n        \tString st = input.nextLine();\n        \tSystem.out.println(bank(st));\n        }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args)  {\n    Scanner sc = new Scanner(System.in);\n    PrintStream out = System.out;\n\n    new ProbA().start(sc, out);\n\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws NumberFormatException, IOException{\n\t\tScanner sc = new Scanner();\n\t\tint T = sc.nextInt();\n\t\tif ( T > 0)\n\t\t\tSystem.out.println(T);\n\t\telse{\n\t\t\tString cad = (T + \"\");\n\t\t\tint min = Math.min(cad.charAt(cad.length() - 1) - '0', cad.charAt(cad.length() - 2) - '0');\n\t\t\tif (min == 0 && cad.length() == 3)\n\t\t\t\tSystem.out.println(0);\n\t\t\telse\n\t\t\t\tSystem.out.println(cad.substring(0, cad.length() - 2) + \"\" + min);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        A a = new A();\n        a.processInput();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        init(System.in, System.out);\n        int n = nextInt();\n        //long startTime = System.currentTimeMillis();\n        if (n > 0) {\n            out.write(n + \"\\n\");\n        } else {\n            String s = n + \"\";\n            String s2 = s.substring(0, s.length() - 1);\n            String s3 = s.substring(0, s.length() - 2) + s.charAt(s.length() - 1);\n            int a = Integer.parseInt(s2);\n            int b = Integer.parseInt(s3);\n            int ans = Math.max(a, b);\n            out.write(ans + \"\\n\");\n        }\n        //long runTime = System.currentTimeMillis() - startTime;\n        //out.write(runTime + \"\\n\");\n        out.flush();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] Args) {\n\t\t\tnew Main().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tString s = in.readLine();\n\t\tint n = Integer.parseInt(s);\n\n\t\tif (s.charAt(0) == '-')\n\t\t\tif (Integer.parseInt(s.substring(0, s.length()-1))>Integer.parseInt(s.substring(0, s.length()-2)+s.charAt(s.length()-1)))\n\t\t\t\ts=s.substring(0, s.length()-1);\n\t\t\telse\n\t\t\t\ts=s.substring(0, s.length()-2)+s.charAt(s.length()-1);\n\n\t\tSystem.out.println(Integer.parseInt(s));\n\t\tin.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew A();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int n = nextInt();\n        int n1 = n/10;\n        int s = n % 10;\n        int n2 = n / 100 * 10+s;\n        System.out.println(Math.max(n, Math.max(n1, n2)));\n        pw.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew TaskA().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew CFA().work();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tAccount acnt = new Account();\n\t\tacnt.solve();\n\t\tacnt.print();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        \n        int a = s.nextInt();\n        \n        int f1 = a/10;\n        \n        int b = a;\n        int last = a%10;\n        \n        b/=10;\n        b/=10;\n        b*=10;\n        b+=last;\n        \n        System.out.println(Math.max(a, Math.max(f1, b)));\n        \n        \n        \n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n         Scanner sc = null;\n         PrintWriter pr = null;\n\n         pr=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n         sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n         //sc = new Scanner(new File(\"input.txt\"));\n            \n         long n = sc.nextInt();\n         if (n > 0) pr.println(n);\n         else {\n             long n1 = n / 10;\n             long n2 = n / 100 * 10  + n % 10;\n             if (n1 < n2) pr.println(n2);\n             else pr.println(n1);\n         }\n         \n         pr.close();\n         sc.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner reader = new Scanner(System.in);\n\t\tint in = reader.nextInt();\n\t\tint sign = (int)Math.signum(in);\n\t\t\n\t\tString str = Math.abs(in)+\"\";\n\t\tif(str.length() == 1){\n\t\t\tif(in < 0)\n\t\t\t\tSystem.out.println(0);\n\t\t\telse\n\t\t\t\tSystem.out.println(in);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tint max = in;\n\t\tmax = Math.max(max, sign * Integer.parseInt(str.substring(0,str.length()-1)));\n\t\tmax = Math.max(max, sign * Integer.parseInt(str.substring(0,str.length()-2) + str.charAt(str.length()-1)));\n\t\tSystem.out.println(max);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tint num=0;\n\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\tnum = sc.nextInt();\n\t\tint num2 = num/10;\n\t\tint num3 = num%10;\n\t\tint num4 = (num2/10)*10+num3;\n\t\tfirst fs = new first();\n\t\tint result = fs.max(num,num2,num4);\n\t\tSystem.out.println(result);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception{\n        // TODO code application logic here\n       java.io.BufferedReader br = new java.io.BufferedReader(new \n                 java.io.InputStreamReader(System.in));\n       \n       int ch[],arr[];\n       int x,i,j,k,t,n=Integer.parseInt(br.readLine());\n        //System.out.println(n);\n        \n       if(n>0)\n            System.out.println(n);\n       else\n       {\n           //n= -n;\n           //n=-n;\n           x= n/100;\n           \n           x = x*10 + n%10;\n         //  System.out.println(x);\n           if(n/10 > x)\n               System.out.println(n/10);\n           else\n              System.out.println(x);\n           \n       }\n       \n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args){\n    FastScanner sc = new FastScanner();\n    int n = sc.nextInt();\n    String nStr = Integer.toString(n);\n\n    String nStr1 = nStr.substring(0, nStr.length() - 1);\n    String nStr2 = nStr.substring(0, nStr.length() - 2) + nStr.charAt(nStr.length() - 1);\n\n    int result = Math.max(n, Integer.parseInt(nStr1));\n    result = Math.max(result, Integer.parseInt(nStr2));\n    System.out.println(result);\n  }\n", "complexity": "constant"}
{"code": "  public static void main(String args[]) throws IOException {\n    BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n    String line = stdin.readLine();\n    int n = Integer.parseInt(line);\n    \n    if (n >= 0) {\n      System.out.println(n);\n    } else if (n > -10) {\n      System.out.println(0);\n    } else {\n      String sa = line.substring(0, line.length() - 1);\n      int a = Integer.parseInt(sa);\n      String sb = line.substring(0, line.length() - 2) + line.charAt(line.length() - 1);\n      int b = Integer.parseInt(sb);\n      System.out.println(Math.max(a, b));\n    }\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = in.nextInt();\n\t\tif (n >= 0) {\n\t\t\tout.println(Math.abs(n));\n\t\t} else {\n\t\t\tout.println(Math.max(n/10, (n/100)*10 + n%10));\n\t\t}\n\t\tout.flush();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbf = new BufferedReader(new InputStreamReader(System.in));\n    \ttokenizer = null;\n    \tout = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n    \tint n = nextInt();\n    \tif(n >= 0) out.println(n);\n    \telse {\n    \t\tn = -n;\n    \t\tint a = n % 10; int m = n/10;\n    \t\tint b = m % 10;\n    \t\tif(a >= b) {\n    \t\t\tif(m == 0) out.println(0);\n    \t\t\telse out.println(-m);\n    \t\t}\n    \t\telse {\n    \t\t\tm = (m-b)+a;\n    \t\t\tif(m == 0) out.println(0);\n    \t\t\telse out.println(-m);\n    \t\t}\n    \t}\n    \tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        in = new BufferedReader(new InputStreamReader(System.in));\n        st = new StringTokenizer(\"\");\n        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int n = nextInt();\n        int max = n;\n        max = Math.max(max, n / 10);\n        max = Math.max(max, (n / 100) * 10 + n % 10);\n        System.out.println(max);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tStringBuffer sb=new StringBuffer();\n\t\tint n=Integer.parseInt(br.readLine());\n\t\t\n\t\tif(n<0){\n\t\t\tint temp=-n;\n\t\t\tint temp2=temp/10;\n\t\t\tint x=temp%10;\n\t\t\tint y=temp2%10;\n\t\t\tif(x>y){\n\t\t\t\ttemp=temp/10;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttemp=temp/10 -y +x;\n\t\t\t}\n\t\t\tn=-temp;\n\t\t\t\n\t\t\t\n\t\t}\n\t\tSystem.out.println(n);\n\t\t\n\t\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException,\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tString s = n + \"\";\n\t\tif (n >= 0)\n\t\t\tSystem.out.println(n);\n\t\telse {\n\t\t\tint a = n, b = Integer.parseInt(s.substring(0, s.length() - 1)), c = Integer.parseInt(s.substring(0, s.length()-2)+s.charAt(s.length()-1));\n\t\t\tSystem.out.println(Math.max(a, Math.max(b,c)));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\ts = scanner.nextInt();\n\t\tif (s >= 0) {\n\t\t\tSystem.out.println(s);\n\t\t}\n\t\telse {\n\t\t\tif (s >= -10) {\n\t\t\t\tSystem.out.println(0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint ss = -s;\n\t\t\t\tint a, b;\n\t\t\t\ta = ss % 10;\n\t\t\t\tb = (ss % 100) / 10;\n\t\t\t\tif (a > b) {\n\t\t\t\t\tss = ss / 10;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tss = (ss / 100) * 10 + a;\n\t\t\t\t}\n\t\t\t\tif (ss == 0) {\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(\"-\" + ss);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Throwable{\n\t\tBufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n\t\tString ln=in.readLine().trim();\n\t\tSystem.out.println(max(parseInt(ln),max(parseInt(ln.substring(0,ln.length()-1)),parseInt(ln.substring(0, ln.length()-2)+ln.substring(ln.length()-1)))));\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in=new Scanner(new BufferedInputStream(System.in));\n\t\tPrintStream out=System.out;\n\t\tint n=in.nextInt();\n\t\tif (n>=0) out.println(n);\n\t\telse out.println(Math.max(-((-n)/10), -((-n)/100*10+(-n)%10)));\n\t\tout.close();\n\t\tin.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String [] args ) {\n\t\ttry{\n\t\t\tString str;\t\t\t\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tBufferedOutputStream bos = new BufferedOutputStream(System.out);\n\t\t\tString eol = System.getProperty(\"line.separator\");\n\t\t\tbyte [] eolb = eol.getBytes();\n\t\t\tbyte[] spaceb= \" \".getBytes();\n\n\n\t\t\tstr  = br.readLine();\n\n\t\t\tint n = Integer.parseInt(str);\n\t\t\tint ans = 0;\n\t\t\tif(n>=0) {\n\t\t\t\tans = n;\n\t\t\t} else {\n\t\t\t\t if ( str.length()==2) {\n\t\t\t\t\tif(str.charAt(0)!='-') {\n\t\t\t\t\t\tint a  =Integer.parseInt(str.substring(0,1));\n\t\t\t\t\t\tint b = Integer.parseInt(str.substring(1,2));\n\t\t\t\t\t\tans = Math.max(a, b);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans = Integer.parseInt(str.substring(1,2));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tString s1 = str.substring(0,str.length()-2).concat(str.substring(str.length()-2,str.length()-1));\n\t\t\t\t\tString s2 = str.substring(0,str.length()-2).concat(str.substring(str.length()-1,str.length()));\n\t\t\t\t\tint a = Integer.parseInt(s1);\n\t\t\t\t\tint b = Integer.parseInt(s2);\n\t\t\t\t\tans = Math.max(a, b);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbos.write(new Integer(ans).toString().getBytes());\n\t\t\tbos.write(eolb);\n\t\t\tbos.flush();\n\t\t}  catch(IOException ioe) {\n\t\t\tioe.printStackTrace();\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        new Main().solve();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) { \n        OutputStream outputStream = System.out;\n        PrintWriter out = new PrintWriter(outputStream);\n\n        Application solver = new Application();\n        solver.solve(System.in, out);\n\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n        writer = new PrintWriter(System.out);\n\n        setTime();\n        solve();\n        printTime();\n        printMemory();\n\n        writer.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tif (n < 0) {\n\t\t\t\n\t\t\tint first = n / 10;\n\t\t\tint second = (n / 100)*10 + (n % 10);\n\t\t\tif (first > second)\n\t\t\t\tSystem.out.println(first);\n\t\t\telse\n\t\t\t\tSystem.out.println(second);\n\t\t} else {\n\t\t\tSystem.out.println(n);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "public static void main(String aa[])throws IOException\nBufferedReader b=new BufferedReader(new InputStreamReader(System.in));\nint i=0,m=0,p=0,n=0,k=0,j=0;\nString s,r;\ns=b.readLine();\nr=s;\nn=Integer.parseInt(s);\ns=s.substring(0,s.length()-2);\ns+=r.charAt(r.length()-1);\nr=r.substring(0,r.length()-1);\nm=Integer.parseInt(s);\np=Integer.parseInt(r);\nSystem.out.print((long)Math.max(Math.max(m,n),p));\n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\tFastScanner sc = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tString cur = sc.nextToken();\n\t\tint first = Integer.parseInt(cur);\n\t\tif(cur.length() > 1){\n\t\t\tString second = cur.substring(0,cur.length()-1);\n\t\t\tif(Character.isDigit(second.charAt(second.length()-1))){\n\t\t\t\tfirst = Math.max(first, Integer.parseInt(second));\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(cur.length() > 2){\n\t\t\tString third = cur.substring(0,cur.length()-2) + cur.charAt(cur.length()-1);\n\t\t\tif(Character.isDigit(cur.charAt(cur.length()-2))){\n\t\t\t\tfirst = Math.max(first, Integer.parseInt(third));\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(first);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tTreeSet<Integer> set = new TreeSet<Integer>();\n\t\tset.add(n);\n\t\ttry {\n\t\t\tString s = Integer.toString(n);\n\t\t\ts = s.substring(0, s.length() - 1);\n\t\t\tset.add(Integer.parseInt(s));\n\t\t} catch (Exception e) {\n\t\t}\n\t\ttry {\n\t\t\tString s = Integer.toString(n);\n\t\t\ts = s.substring(0, s.length() - 2) + s.charAt(s.length() - 1);\n\t\t\tset.add(Integer.parseInt(s));\n\t\t} catch (Exception e) {\n\t\t}\n\t\tSystem.out.println(max(set));\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\ttry {\n\t\t\tif (LOCAL_ENV == 1) {\n\t\t\t\tin = new Scanner(new File(\"input.txt\"));\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\tin = new Scanner(System.in);\n\t\t}\n\n\t\tlong n = in.nextLong();\n\n\t\tif (n >= -9) {\n\t\t\tSystem.out.println(n);\n\t\t} else {\n\t\t\tlong absN = Math.abs(n);\n\t\t\tlong m1 = -(absN / 10);\n\t\t\tlong last = absN % 10;\n\t\t\tlong m2 = -((absN / 100) * 10 + last);\n\t\t\tSystem.out.println(Math.max(m1, m2));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString ns = sc.next();\n\t\tsc.close();\n\t\t\n\t\tint n1 = Integer.parseInt(ns);\n\t\tint n2 = Integer.parseInt(ns.substring(0, ns.length() - 1));\n\t\tint n3 = Integer.parseInt(ns.substring(0, ns.length() - 2) + ns.substring(ns.length() - 1));\n\t\t\n\t\tint max = n1;\n\t\tmax = (n2 > max) ? (n2) : (max);\n\t\tmax = (n3 > max) ? (n3) : (max);\n\t\t\n\t\tSystem.out.println(max);\t\t\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStream input = System.in;\n        br = new BufferedReader(new InputStreamReader(input));\n        out = new PrintWriter(System.out);\n        solve();\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\t{\n\t\tint n,i,j;\n\t\tScanner scan = new Scanner(System.in);\n\t\tn = Integer.parseInt(scan.nextLine());\n\t\tif(n>=0)\n\t\t\tSystem.out.println(n);\n\t\telse if(n<0)\t{\n\t\t\tn=-1*n;\n\t\t\ti=n/10;\n\t\t\tj=(n/100)*10+n%10;\n\t\t\ti=-i;\n\t\t\tj=-j;\n\t\t\tif(i>=j)\n\t\t\t\tSystem.out.println(i);\n\t\t\telse\n\t\t\t\tSystem.out.println(j);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\t\n\t\tint n = nextInt();\n\t\tString nn = Integer.toString(n);\n\t\tif(n >= 0){\n\t\t\tprintln(n);\n\t\t} else {\n\t\t\tprintln(Math.max(Integer.parseInt(nn.substring(0,nn.length() - 1)), Integer.parseInt(nn.substring(0, nn.length() - 2) + nn.charAt(nn.length() - 1))));\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n\n        int n = in.nextInt();\n        if (n >= 0) {\n            out.println(n);\n        } else {\n            int res = n;\n            n = Math.abs(n);\n\n            String s = String.valueOf(Math.abs(n));\n            if (s.length() == 1) {\n                res = 0;\n            } else {\n                res = Math.max(-Integer.parseInt(s.substring(0, s.length() - 1)), res);\n                res = Math.max(-Integer.parseInt(s.substring(0, s.length() - 2) + s.charAt(s.length() - 1)), res);\n            }\n\n            out.println(res);\n        }\n\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new TaskA().run();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n,r,l;\n\t\tn = sc.nextInt();\n\t\twhile(n-->0) {\n\t\t\tl = sc.nextInt();\n\t\t\tr = sc.nextInt();\n\n\t\t\tSystem.out.println(f(r)-f(l-1));\n\t\t}\n\t\tsc.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\tFastReader in=new FastReader();\n\tHashMap<Integer,Integer>map=new HashMap<Integer,Integer>();\n\n\tint n=in.nextInt();\n\tint r=in.nextInt();\n\t \n\tdouble theta=(double)360/(double)n;\n\t \n\tdouble b=1-((double)2/(double)(1-Math.cos((double)2*Math.PI/(double)n)));\n\tdouble x=Math.sqrt(1-b)-1;\n\tdouble ans=(double)r/(double)x;\n\tSystem.out.println(ans);\n\n\n\n\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\tFastReader in=new FastReader();\n\tHashMap<Integer,Integer>map=new HashMap<Integer,Integer>();\n\n\tint n=in.nextInt();\n\tint r=in.nextInt();\n\t \n\tdouble theta=(double)360/(double)n;\n\t \n\tdouble b=1-((double)2/(double)(1-Math.cos((double)2*Math.PI/(double)n)));\n\tdouble x=Math.sqrt(1-b)-1;\n\tdouble ans=(double)r/(double)x;\n\tSystem.out.println(ans);\n\n\n\n\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String []args){\n       Scanner sc = new Scanner (System.in);\n    long a [] = new long [14];\n    long b [] = new long [14];\n    long p,q,r,s,max = 0;\n    for(int i = 0; i < 14; i++) a[i] = sc.nextInt();\n    for(int i = 0; i < 14; i++){\n      p = a[i]%14;\n      q = a[i]/14;\n      r = 0;\n      s = 0;\n      for(int j = 0; j < 14; j++) b[j] = a[j];\n      b[i] = 0;\n      int j = (i+1)%14;\n      for(; r < p; r++) {\n        b[j]++;\n        j=(j+1)%14;\n      }\n      for( j = 0; j < 14; j++) {\n        b[j] += q;\n        if(b[j] % 2 == 0) s+= b[j];\n      }\n      max = Math.max(max,s);\n    }\n    System.out.println(max);\n\n\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tScanner sc = new Scanner(System.in);\n\t\tHashSet<String> hs = new HashSet<String>();\n\t\tint[] Arr = new int[14];\n\t\tlong max = 0;\n\t\tfor (int i = 0; i < 14; i++) {\n\t\t\tArr[i] = sc.nextInt();\n\t\t}\n\n\t\tfor (int i = 0; i < 14; i++) {\n\t\t\tint[] arr = Arr.clone();\n\n\t\t\tlong sum = 0;\n\t\t\tint r = arr[i];\n\t\t\tarr[i] = 0;\n\t\t\tfor (int j = i + 1; j < arr.length && r > 0; j++) {\n\t\t\t\tarr[j]++;\n\t\t\t\tr--;\n\t\t\t}\n\t\t\tfor (int j = 0; j < arr.length; j++) {\n\t\t\t\tarr[j] +=( r / 14);\n\t\t\t\tif (j + 1 <= (r % 14)) {\n\t\t\t\t\tarr[j]++;\n\t\t\t\t}\n\t\t\t\tif (arr[j] % 2 == 0) {\n\t\t\t\t\tsum += arr[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, sum);\n\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String inp = in.nextLine();\n    System.out.println(25);\n  }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        long n = input.nextLong();\n        System.out.println(\"25\");\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"25\");\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\t\tString l[] = bf.readLine().split(\" \");\n\t\tSystem.out.println(25);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner br = new Scanner(System.in);\n\t\tlong n = br.nextLong();\n\t\tSystem.out.println(\"25\");\n\t}\n", "complexity": "constant"}
{"code": "\t\tpublic static void main(String[] args) throws InterruptedException {\n\t\t\t//new careercup().run();\n\t\t\t//new CC().run();\n\t\t\t//System.out.println(Integer.MAX_VALUE);\n\t\t\ttry{\n\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\tbr.readLine();\n\t\t\t\tSystem.out.println(25);\n\t\t\t\t\n\t\t\t}catch(IOException io){\n\t\t\t\tio.printStackTrace();\n\t\t\t}\n\t\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) {\n\t\tnew Main().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        System.out.print(25);\n        return ;\n\n    }\n", "complexity": "constant"}
{"code": "    \tpublic static void main(String args[]){\n    \t\tInputReader in = new InputReader(System.in);\n    \t\tOutputStream outputStream = System.out;\n    \t\tPrintWriter out = new PrintWriter(outputStream);\n    \t\t//----------My Code Starts Here----------\n    \t\tlong n=in.nextLong();\n    \t\tif(n==1){\n    \t\t\tSystem.out.println(\"5\");\n    \t\t}\n    \t\telse{\n    \t\t\tSystem.out.println(\"25\");\n    \t\t}\n    \t\tout.close();\n    \t\t//---------------The End------------------\n    \t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        File file = new File(\"System.in\");\n        InputStream input = System.in;\n        PrintStream output = System.out;\n        if (file.exists() && file.canRead()) {\n            input = new FileInputStream(file);\n            output = new PrintStream(\"System.out\");\n        }\n        br = new BufferedReader(new InputStreamReader(input));\n        out = new PrintWriter(output);\n        solve();\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\n\t\tsolve(in, out);\n\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception{\n        String s = br.readLine();\n        pw.print(25);\n        pw.print(\"\\n\");\n        pw.close();\n        br.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        sc.next();\n        System.out.println(25);\n        sc.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        QuickScanner in = new QuickScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tSystem.out.println(\"25\");\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\t// your code goes here\n\t\tScanner s = new Scanner(System.in);\n\t\tlong n = s.nextLong();\n\t\tSystem.out.println(25);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tSystem.out.println(25);\n\t\t\n\n\t\t\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String ar[])throws IOException\n\t\tlong n;\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tn=Long.parseLong(br.readLine());\n\t\tSystem.out.println(\"25\");\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        try (Scanner s = new Scanner(System.in)) {\n            long n = s.nextLong();\n\n            System.out.println(\"25\");\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        System.out.println(25);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner clavier=new Scanner(System.in);\n\t\tlong a=clavier.nextLong();\n\t\tclavier.close();\n\t\tif(a==1)\n\t\t\tSystem.out.println(5);\n\t\telse\n\t\t\tSystem.out.println(25);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        (new Main()).run();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String num = input.nextLine();\n\n        System.out.println(\"25\");\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) {\n\t\tnew Main().run();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tlong n = in.nextLong();\n\t\t\n\t\tSystem.out.println(25);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"25\");\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSystem.out.println(25);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) {\n     \n        new Main().run();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) \n\t\tInputReader in = new InputReader();\n//\t\tScanner in=new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tlong n=in.nextLong();\n\t\t\tout.println(\"25\");\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\tSystem.out.println(25);\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n          \n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args){\n    System.out.println(\"25\");\n  }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) {\n\t\tInputStream intputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(intputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(in, out);\n\t\tout.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n                                            //(new FileReader(\"input.in\"));\n        StringBuilder out = new StringBuilder();\n        StringTokenizer tk;\n        \n        \n        long n = parseLong(in.readLine());\n        \n        System.out.println(\"25\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        scanner.nextLine();\n        System.out.println(25);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in=new Scanner(System.in);\n\t\tn=in.nextLong();\n\t\tSystem.out.println(25);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tBigInteger a = new BigInteger(next());\n\t\tSystem.out.println(BigInteger.valueOf(5).modPow(a, BigInteger.valueOf(100)));\n\t\tpw.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        String s = sc.nextLine();\n        System.out.println(\"25\");\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        \n        pl(\"25\");\n        cAll();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        PrintWriter writer = new PrintWriter(System.out);\n        new Task(new InputReader(System.in), writer).solve();\n        writer.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        //long time = System.currentTimeMillis();\n\n        new Main().run();\n        //time = System.currentTimeMillis() - time;\n        //System.out.println(time + \" ms\");\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n            try (PrintWriter out = new PrintWriter(outputStream)) {\n                TaskB solver = new TaskB();\n                solver.solve(1, in, out);\n            }\n    }\n", "complexity": "constant"}
{"code": "public static void main(String[] args) throws IOException {\n\tinput.init(System.in);\n\tPrintWriter out = new PrintWriter(System.out);\n\tlong n = input.nextLong();\n\tif(n == 1) out.println(5);\n\telse out.println(25);\n\tout.close();\n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n\t// TODO Auto-generated method stub\n\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\tPrintWriter out = new PrintWriter(System.out);\n\tString s = bf.readLine();\n\tout.println(25);\n\t\n\tout.flush();\n\tout.close();\n\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tSystem.out.println(\"25\");\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry (final Scanner sc = new Scanner(System.in)) {\n\t\t\tSystem.out.println(25);\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) \n\t\tInputReader s=new InputReader(System.in);\n        OutputStream outputStream = System.out;\n        //PrintWriter out=new PrintWriter(outputStream);\n        \n       String str=s.nextLine();\n       System.out.println(\"25\");\n        \n        \n        //out.close();\n\t}   \n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tSystem.out.println(25);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tout.printf(\"%d %d %d%n\", 0, 0, n);\n\t\tout.flush();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String... args) {\n        new TaskA(null, null).start();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        Scanner s = new Scanner(System.in);\n        int T = s.nextInt();\n        System.out.println(\"0 0 \"+T);\n        /*if(T==0) {\n\n            return;\n        }\n        if(T==1) {\n            System.out.println(\"0 0 0\");\n            return;\n        }\n        System.out.println();*/\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\n\t\tint prev2=0;\n\t\tint prev1=1;\n\t\tint prev=1;\n\t\tint curr = 2;\n\t\tif(n == 0) {System.out.println(\"0 0 0\"); return;}\n\t\telse if(n == 1) {System.out.println(\"0 0 1\");return;}\n\t\twhile(true){\n\t\t\tif(curr == n) break;\n\t\t\tprev2 = prev1;\n\t\t\tprev1 = prev;\n\t\t\tint temp = prev + curr;\n\t\t\tprev = curr;\n\t\t\tcurr = temp;\n\t\t}\n\t\tSystem.out.println(prev2 + \" \" + prev1 + \" \" + prev1);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew CF125A().work();\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t(new Main()).solve();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner (System.in);\n        System.out.println(\"0 0 \"+ sc.nextInt());\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner cin = new Scanner (System.in);\n        int n = cin.nextInt();\n        long res = 2;\n        long[] a = new long[4];\n        a[0] = 0;\n        a[1] = 1;\n        a[2] = 1;\n        a[3] = 2;\n        if (n == 1){\n            System.out.println(\"0 0 1\");\n            return;\n        }\n        if (n == 2){\n            System.out.println(\"0 1 1\");\n            return;\n        }\n        if (n == 0){\n            System.out.println(\"0 0 0\");\n            return;\n        }\n//        if (n == 1 || n == 2 || n == 0){\n//            System.out.println(\"I'm too stupid to solve this problem\");\n//            return;\n//        }\n        if (n == 3){\n            System.out.println(\"1 1 1\");\n            return;\n        }\n        do{\n            a[3] = res;\n            res = a[2] + a[3];\n            if (res == n){\n                System.out.println (a[0] + \" \" + a[1] + \" \" + a[3]);\n                return;\n            }\n            a[0] = a[1];\n            a[1] = a[2];\n            a[2] = a[3];\n            \n        }while (true);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        \n        int N = r.nextInt();\n        \n        System.out.println(N + \" \" + 0 + \" \" + 0);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String args[])\n        Scanner sn=new Scanner(System.in);\n        int n,n1,n2,n3;\n\n        int arr[]={0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170};\n\n        n=sn.nextInt();\n\n\n        if(n==2)\n        {\n            n1=n2=1;\n            n3=0;\n        }\n        else if(n==1)\n        {\n            n3=n2=0;\n            n1=1;\n        }\n        else if(n==0)\n        {\n            n1=n2=n3=0;\n        }\n        else if(n==3)\n        {\n            n1=n2=n3=1;\n        }\n        else\n        {\n            int index=bsearch(arr,0,arr.length-1,n);\n            n1=arr[index-1];\n            n2=arr[index-3];\n            n3=arr[index-4];\n        }\n\n        System.out.println(n3+\" \"+n2+\" \"+n1);\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Main obj = new Main();\n        obj.doit();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        new HexadecimalsTheorem().solve();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner sn=new Scanner(System.in);\n\t\tint n,n1,n2,n3;\n\n\t\tint arr[]={0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170};\n\n\t\tn=sn.nextInt();\n\n\n\t\tif(n==2)\n\t\t{\n\t\t\tn1=n2=1;\n\t\t\tn3=0;\n\t\t}\n\t\telse if(n==1)\n\t\t{\n\t\t\tn3=n2=0;\n\t\t\tn1=1;\n\t\t}\n\t\telse if(n==0)\n\t\t{\n\t\t\tn1=n2=n3=0;\n\t\t}\n\t\telse if(n==3)\n\t\t{\n\t\t\tn1=n2=n3=1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint index=bsearch(arr,0,arr.length-1,n);\n\t\t\tn1=arr[index-1];\n\t\t\tn2=arr[index-3];\n\t\t\tn3=arr[index-4];\n\t\t}\n\n\t\tSystem.out.println(n3+\" \"+n2+\" \"+n1);\n\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String ar[]) throws Exception { \n        \n        BufferedReader buff = new BufferedReader(new InputStreamReader(System.in));\n        int input = Integer.parseInt(buff.readLine());\n        if(input==0){\n            System.out.println(\"0 0 0\");\n        }else if(input==1){\n            System.out.println(\"0 0 1\");\n        }else if(input==2){\n            System.out.println(\"0 1 1\");\n        }else if(input==3){\n            System.out.println(\"1 1 1\");\n        }else {\n            int output[] = checkFibo(input);\n            int get[] = checkFibo(output[1]);\n            output[0] = get[1];\n            output[1] = get[2];\n            System.out.print(output[0]);\n            System.out.print(\" \" + output[1]);\n            System.out.println(\" \" + output[2]);    \n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tBufferedReader buf = new BufferedReader(\n\t\t\t\tnew InputStreamReader(System.in));\n\t\tint x;\n\t\tArrayList<Integer> arr = new ArrayList<Integer>();\n\t\tarr.add(0);\n\t\tarr.add(1);\n\t\ttry {\n\t\t\twhile ((x = Integer.parseInt(buf.readLine())) != -1) {\n\t\t\t\tif (x == 1) {\n\n\t\t\t\t\tSystem.out.println(arr.get(0) + \" \" + arr.get(0) + \" \"\n\t\t\t\t\t\t\t+ arr.get(1));\n\t\t\t\t} else if (x == 0) {\n\t\t\t\t\tSystem.out.println(arr.get(0) + \" \" + arr.get(0) + \" \"\n\t\t\t\t\t\t\t+ arr.get(0));\n\t\t\t\t} else {\n\t\t\t\t\tint i = 1;\n\t\t\t\t\twhile (x > arr.get(arr.size() - 1)) {\n\t\t\t\t\t\tarr.add(arr.get(i) + arr.get(i - 1));\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(arr.get(0) + \" \" + arr.get(i - 2) + \" \"\n\t\t\t\t\t\t\t+ arr.get(i - 1));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (NumberFormatException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"0 0 \" + sc.nextInt());\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long[] answer = new long[3];\n        if (n == 1) {\n            answer[0] = 0;\n            answer[1] = 0;\n            answer[2] = 1;\n        } else if (n > 1) {\n            long f1 = 0;\n            long f2 = 1;\n            long m = 0;\n            while (m < n) {\n                answer[0] = answer[1];\n                answer[1] = f1;\n                answer[2] = f2;\n                m = f1 + f2;\n                f1 = f2;\n                f2 = m;\n            }\n            answer[2] = answer[1];\n        }\n        System.out.println(answer[0] + \" \" + answer[1] + \" \" + answer[2]);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(\"0 0 \" + n);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew CodeForces().run();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        \n                int n;\n                      n=s.nextInt();\n                      System.out.print(n+\" \"+\"0 0\");            \n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner read = new Scanner(System.in);\n        int num = read.nextInt();\n        int zero, one, two, three;\n        zero = 0;\n        one = 1;\n        two = 1;\n        three = 2;\n        if(num == 0)\n            System.out.println(\"0 0 0\");\n        else if(num == 1)\n            System.out.println(\"0 0 1\");\n        else{\n            while(num != three){\n                zero = one;\n                one = two;\n                two = three;\n                three = three + one;\n            }\n            System.out.println(zero + \" \" + one + \" \" + one);\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String args[])\n        Scanner sn=new Scanner(System.in);\n        int n,n1,n2,n3;\n\n        int arr[]={0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170};\n\n        n=sn.nextInt();\n\n\n        if(n==2)\n        {\n            n1=n2=1;\n            n3=0;\n        }\n        else if(n==1)\n        {\n            n3=n2=0;\n            n1=1;\n        }\n        else if(n==0)\n        {\n            n1=n2=n3=0;\n        }\n        else if(n==3)\n        {\n            n1=n2=n3=1;\n        }\n        else\n        {\n            int index=bsearch(arr,0,arr.length-1,n);\n            n1=arr[index-1];\n            n2=arr[index-3];\n            n3=arr[index-4];\n        }\n\n        System.out.println(n3+\" \"+n2+\" \"+n1);\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int x = scan.nextInt();\n    solve(x);\n\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String args[]) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int f1 = 0;\n        int f2 = 1;\n        int f3 = 1;\n        while (f3 < n) {\n            f1 = f2;\n            f2 = f3;\n            f3 = f1 + f2;\n        }\n        if (n == 0) {\n            System.out.println(0 + \" \" + 0 + \" \" + 0);\n        } else if (f3 == n) {\n            System.out.println(f1 + \" \" + f1 + \" \" + (f2 - f1));\n        } else {\n            System.out.println(\"I'm too stupid to solve this problem\");\n        }\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream in = System.in;\n        OutputStream out = System.out;\n        InputReader reader = new InputReader(in);\n        PrintWriter writer = new PrintWriter(out);\n        solve(reader, writer);\n        writer.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        Solver solver = new Solver();\n        solver.open();\n        solver.solve();\n        solver.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        \n        int n = in.nextInt();\n        \n        out.println(n+\" 0 0\");\n        \n        in.close();\n        out.close();\n        \n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) throws Exception{\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tif(n==0){\n\t\t\tSystem.out.println(\"0 0 0\");\n\t\t\treturn;\n\t\t}\n\t\telse if(n==1){\n\t\t\tSystem.out.println(\"0 0 1\");\n\t\t\treturn;\n\t\t}\n\t\telse if(n==2){\n\t\t\tSystem.out.println(\"0 1 1\");\n\t\t\treturn;\n\t\t}\n\t\telse{\n\t\t\tint ppp=0;\n\t\t\tint pp=1;\n\t\t\tint c=2;\n\t\t\twhile(true){\n\t\t\t\tif(ppp+pp+c==n){\n\t\t\t\t\tSystem.out.println(ppp+\" \"+pp+\" \"+c);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tc=c+pp+ppp;\n\t\t\t\t\tint temp=pp;\n\t\t\t\t\tpp=pp+ppp;\n\t\t\t\t\tppp=temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int num = in.nextInt();\n        LinkedList<Integer> result = new LinkedList<Integer>();\n        int temp0 = 1;\n        int temp1 = 1;\n        int temp2 = 0;\n        result.add(0);\n        result.add(0);\n        result.add(0);\n        result.add(temp0);\n        result.add(temp1);\n        if (num == 2) {\n            System.out.println(0 + \" \" + 1 + \" \" + 1);\n        } else if (num == 0) {\n            System.out.println(0 + \" \" + 0 + \" \" + 0);\n        } else {\n            while (temp2 < num) {\n                temp2 = temp1 + temp0;\n                result.add(temp2);\n                temp0 = temp1;\n                temp1 = temp2;\n            }\n            int length = result.size();\n            System.out.println(result.get(length - 5) + \" \"\n                    + result.get(length - 4) + \" \" + result.get(length - 2));\n        }\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) {\n\t\tint n = scan.nextInt();\n\t\tgo (n);\n\t\n\t} \n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        long fib[] = { 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073L, 4807526976L, 7778742049L, 12586269025L, 20365011074L, 32951280099L, 53316291173L, 86267571272L, 139583862445L, 225851433717L, 365435296162L, 591286729879L, 956722026041L, 1548008755920L, 2504730781961L, 4052739537881L, 6557470319842L, 10610209857723L };\n        int i = Arrays.binarySearch(fib, new Scanner(System.in).nextLong());\n        if (i < 4)\n            if (i == 3)\n                System.out.println(\"0 1 1\");\n            else if (fib[i] == 1)\n                System.out.println(\"0 0 1\");\n            else\n                System.out.println(\"0 0 0\");\n        else\n            System.out.println(fib[i - 4] + \" \" + fib[i - 3] + \" \" + fib[i - 1]);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main (String[] args) {\n\t\tn = scan.nextInt();\n\t\tsolve ();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        List<Integer> fibs = new ArrayList<Integer>();\n        int fib0 = 0;\n        int fib1 = 1;\n        int fibN = fib0+fib1;\n        fibs.add(fib0);\n        fibs.add(fib1);\n        while(fibN < 1000000000){\n            fibs.add(fibN);\n            fib0 = fib1;\n            fib1 = fibN;\n            fibN = fib0+fib1;\n        }\n        int n = Integer.parseInt(br.readLine());\n        \n        if(n == 0){System.out.println(0+\" \"+0+\" \"+0);}\n        else{\n            if(n == 1){System.out.println(0+\" \"+0+\" \"+1);}\n            else{\n                if(n == 2){System.out.println(0+\" \"+1+\" \"+1);}\n                else{\n        int i = fibs.indexOf(n);\n        System.out.println(fibs.get(i-4)+\" \"+fibs.get(i-3)+\" \"+fibs.get(i-1));\n    }}\n        }\n}\n}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tInputReader in = new InputReader(System.in);\n\t\tSystem.out.println(0 + \" \" + 0 + \" \" + in.nextInt());\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        int k = 1;\n        int t = 0;\n        int y = 2;\n        int[] a = new int[100000];\n        if(n==0){\n            System.out.println(0+\" \"+0+\" \"+0);\n        }\n        else \n            if(n==1){\n            System.out.println(0+\" \"+0+\" \"+1);\n            }\n            else \n                if(n==2){\n                System.out.println(0+\" \"+1+\" \"+1);\n                }\n                else{\n                    a[0] = 0;\n                    a[1] = 1;\n                    a[y] = a[y - 2] + a[y - 1];\n                    while (a[y - 1] < n) {\n\n                        a[y] = a[y - 2] + a[y - 1];\n                        ++y;\n\n\n                    }\n                    System.out.println(a[y - 2] + \" \" + a[y - 4] + \" \" + a[y - 5]);\n            }\n        //System.out.println(y);\n        \n\n\n    }\n", "complexity": "constant"}
{"code": " public static void main(String args[]){\n\t Scanner input = new Scanner(System.in);\n\t int n = input.nextInt();\n\t System.out.print(\"0 0 \" + n);\n }\n", "complexity": "constant"}
{"code": "public static void main(String args[]) throws Exception\n     \n     BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n     int n=Integer.parseInt(br.readLine());\n     System.out.println(\"0 0 \"+n);}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s = r.readLine();\n\t\tint n = new Integer(s);\n\t\tSystem.out.println(\"0 0 \"+n);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String [] args){\n        Scanner s = new Scanner(new InputStreamReader(System.in));\n\n        int x = s.nextInt();\n\n       System.out.println(x + \" \" + 0 + \" \" + 0);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws Exception {\n        new A().solve();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));\n        int x = Integer.parseInt(read.readLine());\n        System.out.println(\"0 0 \"+x);\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        // Locale.setDefault(Locale.US);\n        new Thread(new Hexadec()).start();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tlong num =0;\n\t\tnum = input.nextLong();\n\t\twhile (num<0 || num>Math.pow(10,9))\n\t\t{\n\t\t\tSystem.out.println(\"Invalid\");\n\t\t\tnum = input.nextLong();\n\t\t}\n\t\tSystem.out.println(\"0 0 \"+num);\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n    int n = new Scanner(System.in).nextInt();\n    if( n == 0)\n    {\n        System.out.println(0);\n        System.out.println(0);\n        System.out.println(0);\n        return;\n    }\n    int i = 0 , j = 1;\n    while(true)\n    {\n        int t = i + j;\n        if( t == n)\n        break;\n        i = j;\n        j = t;\n    }\n    System.out.println(i);\n    System.out.println(j);\n    System.out.println(0);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[]) {\n\t\tnew a().start();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        long n = sc.nextLong();\n        \n        List<Long> fi = new ArrayList<Long>(); \n        \n        fi.add((long) 0);\n        fi.add((long) 1);\n        \n        while (fi.get(fi.size()-1)<n) {\n            fi.add(fi.get(fi.size()-1)+fi.get(fi.size()-2));\n        }\n        \n        int last = fi.size()-1;\n\n        long z = last-1>=0 ? fi.get(last-1) : 0;\n        long y = last-3>=0 ? fi.get(last-3) : 0;\n        long x = last-4>=0 ? fi.get(last-4) : 0;\n\n        if (x+y+z<n)\n            x=1;\n        \n        System.out.println(x+\" \"+y+\" \"+z);\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(System.in);\n\t\tlong n = in.nextLong();\n\t\tSystem.out.println(\"0 0 \" + n);\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew A199().solve();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        long n = in.nextLong();\n        out.println(0 + \" \" + 0 + \" \" + n);\n\n        in.close();\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew two_squares().run();\n\t}\n", "complexity": "constant"}
{"code": "\t\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tPoint [] square = new Point [4] ; \n\t\tPoint [] rotSquare = new Point[4] ; \n\t\t\n\t\tfor(int i = 0 ; i < 4 ;i++)\n\t\t\tsquare[i] = new Point(sc.nextInt() , sc.nextInt());\n\t\t\n\t\tfor(int i = 0 ; i < 4 ;i++)\n\t\t\trotSquare[i] = new Point(sc.nextInt() , sc.nextInt());\n\t\t\n\t\tboolean can = false ; \n\t\t\n\t\tfor(int x = -100 ; x <= 100 ; x++)\n\t\t\tfor(int y = -100 ; y <= 100 ; y++)\n\t\t\t\tcan |= inside(new Point(x , y), square) & inside(new Point (x , y), rotSquare);\n\t\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\tout.println(can ? \"YES\" : \"NO\");\n\t\t\n\t\tout.flush();\n\t\tout.close();\n\n\t}\n", "complexity": "constant"}
{"code": "\tpublic static void main(String args[])throws IOException{\n\t\tScanner sc=new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\tint x11=sc.nextInt();\n\t\tint y11=sc.nextInt();\n\t\tint x12=sc.nextInt();\n\t\tint y12=sc.nextInt();\n\t\tint x13=sc.nextInt();\n\t\tint y13=sc.nextInt();\n\t\tint x14=sc.nextInt();\n\t\tint y14=sc.nextInt();\n\t\tdouble x1c=(x11+x12+x13+x14)/4.0;\n\t\tdouble y1c=(y11+y12+y13+y14)/4.0;\n\t\tint x21=sc.nextInt();\n\t\tint y21=sc.nextInt();\n\t\tint x22=sc.nextInt();\n\t\tint y22=sc.nextInt();\n\t\tint x23=sc.nextInt();\n\t\tint y23=sc.nextInt();\n\t\tint x24=sc.nextInt();\n\t\tint y24=sc.nextInt();\n\t\tdouble x2c=(x21+x22+x23+x24)/4.0;\n\t\tdouble y2c=(y21+y22+y23+y24)/4.0;\n\t\tdouble a1=area(x11,y11,x12,y12,x13,y13)+area(x11,y11,x13,y13,x14,y14);\n\t\tdouble a2=area(x21,y21,x22,y22,x23,y23)+area(x21,y21,x23,y23,x24,y24);\n\t\tif(a1==area(x11,y11,x12,y12,x21,y21)+area(x11,y11,x21,y21,x14,y14)+area(x21,y21,x12,y12,x13,y13)+area(x21,y21,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a1==area(x11,y11,x12,y12,x22,y22)+area(x11,y11,x22,y22,x14,y14)+area(x22,y22,x12,y12,x13,y13)+area(x22,y22,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a1==area(x11,y11,x12,y12,x23,y23)+area(x11,y11,x23,y23,x14,y14)+area(x23,y23,x12,y12,x13,y13)+area(x23,y23,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a1==area(x11,y11,x12,y12,x24,y24)+area(x11,y11,x24,y24,x14,y14)+area(x24,y24,x12,y12,x13,y13)+area(x24,y24,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a1==area(x11,y11,x12,y12,x2c,y2c)+area(x11,y11,x2c,y2c,x14,y14)+area(x2c,y2c,x12,y12,x13,y13)+area(x2c,y2c,x14,y14,x13,y13)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x11,y11)+area(x21,y21,x11,y11,x24,y24)+area(x11,y11,x22,y22,x23,y23)+area(x11,y11,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x12,y12)+area(x21,y21,x12,y12,x24,y24)+area(x12,y12,x22,y22,x23,y23)+area(x12,y12,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x13,y13)+area(x21,y21,x13,y13,x24,y24)+area(x13,y13,x22,y22,x23,y23)+area(x13,y13,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x14,y14)+area(x21,y21,x14,y14,x24,y24)+area(x14,y14,x22,y22,x23,y23)+area(x14,y14,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tif(a2==area(x21,y21,x22,y22,x1c,y1c)+area(x21,y21,x14,y14,x2c,y2c)+area(x1c,y1c,x22,y22,x23,y23)+area(x1c,y1c,x24,y24,x23,y23)){\n\t\t\tpw.println(\"YES\");\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tpw.println(\"NO\");\n\t\tpw.close();\n\t}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new TwoSquares().solve();\n        out.close();\n    }\n", "complexity": "constant"}
{"code": "  public static void main(String[] args) throws IOException {\n\t Scanner sc = new Scanner(System.in);\n\t\n\t //rec\n\t int xr1=sc.nextInt(), yr1=sc.nextInt(), xr2=sc.nextInt(),yr2=sc.nextInt();\n\t int xr3=sc.nextInt(), yr3=sc.nextInt(), xr4=sc.nextInt(),yr4=sc.nextInt();\n\t\n\t Point pr1 = new Point(xr1, yr1);\n\t Point pr2 = new Point(xr2, yr2);\n\t Point pr3 = new Point(xr3, yr3);\n\t Point pr4 = new Point(xr4, yr4);\n\t \n\t LineSegment lr1 = new LineSegment(pr1, pr2);\n\t LineSegment lr2 = new LineSegment(pr2, pr3);\n\t LineSegment lr3 = new LineSegment(pr3, pr4);\n\t LineSegment lr4 = new LineSegment(pr4, pr1);\n\t \n\t //diamond\n\t int xd1=sc.nextInt(), yd1=sc.nextInt(), xd2=sc.nextInt(),yd2=sc.nextInt();\n\t int xd3=sc.nextInt(), yd3=sc.nextInt(), xd4=sc.nextInt(),yd4=sc.nextInt();\n\t \n\t Point p1 = new Point(xd1, yd1);\n\t Point p2 = new Point(xd2, yd2);\n\t Point p3 = new Point(xd3, yd3);\n\t Point p4 = new Point(xd4, yd4);\n\t \n\t Point [] pt = new Point [5];\n\t pt[0]=p1;  pt[1]=p2;  pt[2]=p3;  pt[3]=p4;  pt[4]=p1;\n\t Polygon pg = new Polygon(pt);\n\t \n\t if(pg.inside(pr1)||pg.inside(pr2)||pg.inside(pr3)||pg.inside(pr4)) {\n\t\t System.out.println(\"YES\");\n\t\t return;\n\t }\n\t\n\t \n\t LineSegment ld1 = new LineSegment(p1, p2);\n\t LineSegment ld2 = new LineSegment(p2, p3);\n\t LineSegment ld3 = new LineSegment(p3, p4);\n\t LineSegment ld4 = new LineSegment(p4, p1);\n\t \n\t Rectangle rec = new Rectangle(new Point(Math.min(Math.min(xr3,xr4),Math.min(xr1,xr2)), Math.min(Math.min(yr3,yr4),Math.min(yr1,yr2))), \n\t\t\t new Point(Math.max(Math.max(xr3,xr4),Math.max(xr1,xr2)), Math.max(Math.max(yr3,yr4),Math.max(yr1,yr2))) );\n\t \n\t if(rec.contains(p1)||rec.contains(p2)||rec.contains(p3)||rec.contains(p4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t if(ld1.intersect(lr1)||ld1.intersect(lr3)||ld1.intersect(lr3)||ld1.intersect(lr4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t if(ld2.intersect(lr1)||ld2.intersect(lr3)||ld2.intersect(lr3)||ld2.intersect(lr4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t if(ld3.intersect(lr1)||ld3.intersect(lr3)||ld3.intersect(lr3)||ld3.intersect(lr4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t if(ld4.intersect(lr1)||ld4.intersect(lr3)||ld4.intersect(lr3)||ld4.intersect(lr4)) {\n\t\t System.out.println(\"YES\");\n\t     return;\n\t }\n\t \n\t System.out.println(\"NO\");\n\t \n\t \n\t \n\t \n}\n", "complexity": "constant"}
{"code": "    public static void main(String[] args) \n        InputStream inputstream = System.in;\n        OutputStream outputstream = System.out;\n        InputReader in = new InputReader(inputstream);\n        OutputWriter out = new OutputWriter(outputstream);\n        mysolver mysol = new mysolver();\n        mysol.solve(in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        new Main().run();\n//        new Thread( null, new Runnable() {\n//            @Override\n//            public void run() {\n//                new Main().run();\n//            }\n//            }, \"LOL\", 256L * 1024 * 1024 / 2 ).run();\n//        }, \"LOL\", 2000 * 1024 * 1024 ).run();\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        n = in.readInt();\n        int m = in.readInt();\n        E = new LinkedList[n];\n        M = new int[n];\n        boolean[][] C = new boolean[n][n];\n        visited = new boolean[n];\n        for (int i = 0; i < n; i++)\n            E[i] = new LinkedList<Integer>();\n        for (int i = 0; i < m; i++) {\n            int x = in.readInt() - 1;\n            int y = in.readInt() - 1;\n            C[x][y] = true;\n            E[x].add(y);\n        }\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int res = 0;\n            int all = 0;\n            for (int j = 0; j < n; j++)\n                if (j != i) {\n                    all += E[j].size();\n                    if (!C[i][j])\n                        res++;\n                    if (!C[j][i])\n                        res++;\n                    else\n                        all--;\n                }\n            if (!C[i][i])\n                res++;\n            center = i;\n            int match = maxMatch();\n            res += (all - match) + (n - match - 1);\n            min = Math.min(min, res);\n        }\n        System.out.println(min);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\tint[] eu = new int[m];\n\t\tint[] ev = new int[m];\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\teu[j] = Integer.parseInt(st.nextToken());\n\t\t\tev[j] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tA[] aa = new A[n + 1];\n\t\tint min = m + n * 3;\n\t\tfor (int ctr = 1; ctr <= n; ctr++) {\n\t\t\tboolean loop = false;\n\t\t\tboolean[] ci = new boolean[n + 1];\n\t\t\tboolean[] co = new boolean[n + 1];\n\t\t\tfor (int i = 0; i <= n; i++)\n\t\t\t\taa[i] = new A();\n\t\t\tint m_ = 0;\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tint u = eu[j];\n\t\t\t\tint v = ev[j];\n\t\t\t\tif (u == ctr && v == ctr)\n\t\t\t\t\tloop = true;\n\t\t\t\telse if (u == ctr && v != ctr)\n\t\t\t\t\tci[v] = true;\n\t\t\t\telse if (u != ctr && v == ctr)\n\t\t\t\t\tco[u] = true;\n\t\t\t\telse {\n\t\t\t\t\taa[u].list.add(v);\n\t\t\t\t\tm_++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint cnt = loop ? 0 : 1;\n\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t\tif (i != ctr) {\n\t\t\t\t\tif (!ci[i])\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\tif (!co[i])\n\t\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\tint m2 = matchings(aa, n);\n\t\t\tcnt += (m_ - m2) + (n - 1 - m2);\n\t\t\tif (min > cnt)\n\t\t\t\tmin = cnt;\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int V = in.readInt();\n        int E = in.readInt();\n        Point[] edges = new Point[E];\n        for (int i = 0; i < edges.length; i++) {\n            edges[i] = new Point(in.readInt() - 1, in.readInt() - 1);\n        }\n        int best = Integer.MAX_VALUE;\n        for (int k = 0; k < V; k++) {\n            int n = V - 1;\n            graph = new ArrayList[n];\n            left = new int[n];\n            vis = new boolean[n];\n            right = new int[n];\n            for (int i = 0; i < graph.length; i++) {\n                graph[i] = new ArrayList<Integer>();\n            }\n            int center = 0;\n            for (int i = 0; i < E; i++) {\n                if (edges[i].x == k || edges[i].y == k) {\n                    center++;\n                    continue;\n                }\n                int src = edges[i].x > k ? edges[i].x - 1 : edges[i].x;\n                int dst = edges[i].y > k ? edges[i].y - 1 : edges[i].y;\n                graph[src].add(dst);\n            }\n            int matching = getMaxMatch();\n            int addToCenterEdges = 2 * V - 1 - center;\n            int removed = E - center - matching;\n            int added = n - matching;\n            best = Math.min(best, added + removed + addToCenterEdges);\n        }\n        System.out.println(best);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\tint[] eu = new int[m];\n\t\tint[] ev = new int[m];\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\teu[j] = Integer.parseInt(st.nextToken());\n\t\t\tev[j] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tA[] aa = new A[n + 1];\n\t\tint min = m + n * 3;\n\t\tfor (int ctr = 1; ctr <= n; ctr++) {\n\t\t\tboolean loop = false;\n\t\t\tboolean[] ci = new boolean[n + 1];\n\t\t\tboolean[] co = new boolean[n + 1];\n\t\t\tfor (int i = 0; i <= n; i++)\n\t\t\t\taa[i] = new A();\n\t\t\tint m_ = 0;\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tint u = eu[j];\n\t\t\t\tint v = ev[j];\n\t\t\t\tif (u == ctr && v == ctr)\n\t\t\t\t\tloop = true;\n\t\t\t\telse if (u == ctr && v != ctr)\n\t\t\t\t\tci[v] = true;\n\t\t\t\telse if (u != ctr && v == ctr)\n\t\t\t\t\tco[u] = true;\n\t\t\t\telse {\n\t\t\t\t\taa[u].list.add(v);\n\t\t\t\t\tm_++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint cnt = loop ? 0 : 1;\n\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t\tif (i != ctr) {\n\t\t\t\t\tif (!ci[i])\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\tif (!co[i])\n\t\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\tint m2 = matchings(aa, n);\n\t\t\tcnt += (m_ - m2) + (n - 1 - m2);\n\t\t\tif (min > cnt)\n\t\t\t\tmin = cnt;\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        \n        int N = sc.nextInt();\n        int M = sc.nextInt();\n        \n        int[] edgeFrom = new int[M];\n        int[] edgeTo = new int[M];\n        for (int i = 0; i < M; i++) {\n        \tedgeFrom[i] = sc.nextInt();\n        \tedgeTo[i] = sc.nextInt();\n        }\n        \n        int best = Integer.MAX_VALUE;\n    \tboolean[][] adjMat = makeAdjMat(N, edgeFrom, edgeTo);\n        for (int i = 0; i < N; i++) {\n        \tboolean[][] mat = copyOfArray2d(adjMat);\n        \tbest = Math.min(best, count(mat, M, i));\n        }\n        \n        System.out.println(best);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        formGraph();\n        System.out.println(getAnswer()); \n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new GeorgeInterestingGraph().solve();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew D().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new GeorgeInterestingGraph().solve();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "public static void main (String[] args) throws java.lang.Exception {\t\t\n\tlong startTime = System.currentTimeMillis();\n\n\tout = new PrintWriter(System.out);\n\tsolve();\t\n\t//out.println((String.format(\"%.2f\",(double)(System.currentTimeMillis()-startTime)/1000)));\n\tout.close();\n}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        \n        int N = sc.nextInt();\n        int M = sc.nextInt();\n        \n        int[] edgeFrom = new int[M];\n        int[] edgeTo = new int[M];\n        for (int i = 0; i < M; i++) {\n        \tedgeFrom[i] = sc.nextInt();\n        \tedgeTo[i] = sc.nextInt();\n        }\n        \n        int best = Integer.MAX_VALUE;\n        for (int i = 0; i < N; i++) {\n        \tboolean[][] mat = makeAdjMat(N, edgeFrom, edgeTo);\n        \tbest = Math.min(best, count(mat, M, i));\n        }\n        \n        System.out.println(best);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        \n        int N = sc.nextInt();\n        int M = sc.nextInt();\n        \n        int[] edgeFrom = new int[M];\n        int[] edgeTo = new int[M];\n        for (int i = 0; i < M; i++) {\n        \tedgeFrom[i] = sc.nextInt();\n        \tedgeTo[i] = sc.nextInt();\n        }\n        \n        int best = Integer.MAX_VALUE;\n    \tboolean[][] adjMat = makeAdjMat(N, edgeFrom, edgeTo);\n        for (int i = 0; i < N; i++) {\n        \tboolean[][] mat = copyOfArray2d(adjMat);\n        \tbest = Math.min(best, count(mat, M, i));\n        }\n        \n        System.out.println(best);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new D().solve();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tif (LOCAL) {\n\t\t\ttry {\n\t\t\t\tSystem.setIn(new FileInputStream(\"./../../in.txt\"));\n\t\t\t\t// System.setOut(new PrintStream(\"./../../out\"));\n\t\t\t} catch (Throwable e) {\n\t\t\t\tLOCAL = false;\n\t\t\t}\n\t\t}\n\t\tlong start = 0;\n\t\tif (LOCAL)\n\t\t\tstart = System.nanoTime();\n\t\tnew Main().run();\n\t\tif (LOCAL)\n\t\t\tSystem.err.printf(\"[Time : %.6f s]%n\",\n\t\t\t\t\t(System.nanoTime() - start) * 1e-9);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new D().solve();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        new Main().run();\n//        new Thread( null, new Runnable() {\n//            @Override\n//            public void run() {\n//                new Main().run();\n//            }\n//            }, \"LOL\", 256L * 1024 * 1024 / 2 ).run();\n//        }, \"LOL\", 2000 * 1024 * 1024 ).run();\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new D().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\tint[] eu = new int[m];\n\t\tint[] ev = new int[m];\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\teu[j] = Integer.parseInt(st.nextToken());\n\t\t\tev[j] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tA[] aa = new A[n + 1];\n\t\tint min = m + n * 3;\n\t\tfor (int ctr = 1; ctr <= n; ctr++) {\n\t\t\tboolean loop = false;\n\t\t\tboolean[] ci = new boolean[n + 1];\n\t\t\tboolean[] co = new boolean[n + 1];\n\t\t\tfor (int i = 0; i <= n; i++)\n\t\t\t\taa[i] = new A();\n\t\t\tint m_ = 0;\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tint u = eu[j];\n\t\t\t\tint v = ev[j];\n\t\t\t\tif (u == ctr && v == ctr)\n\t\t\t\t\tloop = true;\n\t\t\t\telse if (u == ctr && v != ctr)\n\t\t\t\t\tci[v] = true;\n\t\t\t\telse if (u != ctr && v == ctr)\n\t\t\t\t\tco[u] = true;\n\t\t\t\telse {\n\t\t\t\t\taa[u].list.add(v);\n\t\t\t\t\tm_++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint cnt = loop ? 0 : 1;\n\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t\tif (i != ctr) {\n\t\t\t\t\tif (!ci[i])\n\t\t\t\t\t\tcnt++;\n\t\t\t\t\tif (!co[i])\n\t\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\tint m2 = matchings(aa, n);\n\t\t\tcnt += (m_ - m2) + (n - 1 - m2);\n\t\t\tif (min > cnt)\n\t\t\t\tmin = cnt;\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tnew CF().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        \n        int N = sc.nextInt();\n        int M = sc.nextInt();\n        \n        int[] edgeFrom = new int[M];\n        int[] edgeTo = new int[M];\n        for (int i = 0; i < M; i++) {\n        \tedgeFrom[i] = sc.nextInt();\n        \tedgeTo[i] = sc.nextInt();\n        }\n        \n        int best = Integer.MAX_VALUE;\n        for (int i = 0; i < N; i++) {\n        \tboolean[][] mat = makeAdjMat(N, edgeFrom, edgeTo);\n        \tbest = Math.min(best, count(mat, i, M));\n        }\n        \n        System.out.println(best);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(final String[] args) throws IOException {\n        try(Scanner scan = new Scanner(System.in);\n            PrintWriter print = new PrintWriter(System.out)) {\n            final int n = scan.nextInt();\n            final int m = scan.nextInt();\n            final Pair<Integer, Integer>[] arcs = new Pair[m];\n            for(int k = 0; k < m; ++k) {\n                int i = scan.nextInt();\n                int j = scan.nextInt();\n                --i; --j;\n                arcs[k] = new Pair(i, j);\n            }\n            print.println(calcMinNumStepsToCenterPermGraph(new DirectedGraph(n, arcs)));\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        new Main().run();\n//        new Thread( null, new Runnable() {\n//            @Override\n//            public void run() {\n//                new Main().run();\n//            }\n//            }, \"LOL\", 256L * 1024 * 1024 / 2 ).run();\n//        }, \"LOL\", 2000 * 1024 * 1024 ).run();\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String [] args)\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\n\t\tboolean [][] graph = new boolean[n][n];\n\t\tfor(int i = 0 ; i < m ; i++)\n\t\t{\n\t\t\tint a = in.nextInt() - 1;\n\t\t\tint b = in.nextInt() - 1;\n\n\t\t\tgraph[a][b] = true;\n\t\t}\n\n\t\tint res = Integer.MAX_VALUE;\n\t\tfor(int center = 0 ; center < n ; center++)\n\t\t{\n\t\t\tint calc = 0;\n\t\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\t{\n\t\t\t\tif(!graph[center][i])\n\t\t\t\t\tcalc++;\n\t\t\t\tif(!graph[i][center])\n\t\t\t\t\tcalc++;\n\t\t\t}\n\n\t\t\tif(!graph[center][center])\n\t\t\t\tcalc--;\n\n\t\t\tint [] match = new int[n];\n\t\t\tArrays.fill(match, -1);\n\t\t\tint max = 0;\n\n\t\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\t\tif(i != center)\n\t\t\t\t\tif(can(i, graph, new boolean[n], center, match))\n\t\t\t\t\t\tmax++;\n\n\t\t\tint unusable = m - (2*n - 1 - calc) - max;\n\t\t\tcalc += unusable;\n\t\t\tcalc += (2*(n-1) - 2*max)/2;\n\n\t\t\tres = Math.min(res, calc);\n\t\t}\n\n\t\tSystem.out.println(res);\n\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tString input = scan.nextLine();\n\t\tSystem.out.println(F(input));\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        String s = sc.next();\n        for (int l = s.length(); l > 0; --l) {\n            HashSet<String> set = new HashSet<String>();\n            for (int i = 0; i < s.length() - l + 1; ++i)\n                if (set.contains(s.substring(i, i + l))) {\n                    System.out.println(l);\n                    return;\n                } else {\n                    set.add(s.substring(i, i + l));\n                }\n        }\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main( String[] Args )\n        Scanner scan = new Scanner( System.in );\n        String s = scan.next();\n\n        all: for ( int x = s.length() - 1; x >= 0; x-- )\n            for ( int y = 0; x + y <= s.length(); y++ )\n            {\n                String sub = s.substring( y, y + x );\n                if ( s.indexOf( sub, y + 1 ) >= 0 )\n                {\n                    System.out.println( x );\n                    break all;\n                }\n            }\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s = sc.next();\n\t\tMap<String, Boolean> map = new HashMap<String, Boolean>();\n\t\tfor (int i = s.length(); i >= 1; i--) {\n\t\t\tmap.clear();\n\t\t\tfor (int j = 0; j < s.length()-i+1; j++) {\n\t\t\t\tString temp = s.substring(j, j+i);\n\t\t\t\tif (map.containsKey(temp)) {\n\t\t\t\t\tSystem.out.println(i);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmap.put(temp, true);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(0);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder line = new StringBuilder(reader.readLine());\n        int length = 0;\n        for (int head = 0; head < line.length(); head++) {\n            for (int tail = line.length() - 1; tail > head; tail--) {\n                String subString = line.substring(head, tail);\n                if(line.indexOf(subString,head+1)>-1){\n                    length = Math.max(subString.length(), length);\n                }\n            }\n        }\n        System.out.println(length);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s=r.readLine();\n\t\tint max=0;\n\t\tfor(int i=1;i<s.length();i++){\n\t\t\tfor (int j = 0; j <= s.length()-i; j++) {\n\t\t\t\tString sub=s.substring(j,j+i);\n\t\t\t\tif(count(s,sub)>=2)\n\t\t\t\tmax=Math.max(max, i);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        \n        String a = r.next();\n        char[] c = a.toCharArray();\n        \n        for(int l = a.length()-1; l >= 1; l--){\n            for(int i = 0; i <= a.length()-l; i++){\n                int j = i+l-1;\n                \n                for(int s = 0; s <= a.length()-l; s++){\n                    if(i == s)continue;\n                    if(a.substring(i, i+l).equals(a.subSequence(s, s+l))){\n                        System.out.println(l);\n                        System.exit(0);\n                    }\n                        \n                }\n            }\n        }\n        \n        System.out.println(0);\n        \n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main( String[] args ){\n\t\tScanner cin = new Scanner( System.in );\n\t\tString s = cin.next();\n\t\tint n = s.length();\n\t\tchar[] ss = new char[ n ];\n\t\tss = s.toCharArray();\n\t\t\n\t\tint ans = 0;\n\t\t\n\t\tfor (int i=0; i<n; i++)\n\t\t\tfor (int j=i+1; j<n; j++){\n\t\t\t\tint k = 0;\n\t\t\t\twhile ( i+k<n && j+k<n && ss[i+k] == ss[j+k] ) k++;\n\t\t\t\t\n\t\t\t\tans = Math.max( ans, k );\n\t\t\t}\n\t\t\n\t\tSystem.out.println( ans );\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tString s = input.next();\n\t\tint n = s.length();\n\t\tint i = n-1;\n\t\tCharSequence temp;\n\t\tfor(i = n-1; i > 0; i--)\n\t\t\tfor(int j = 0 ; j <= n-i; j++)\n\t\t\t{\n\t\t\t\ttemp = s.subSequence(j, i+j);\n\t\t\t\tif( s.substring(j+1, n).contains(temp) || s.substring(0, j+i-1).contains(temp))\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(i);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\tSystem.out.println(0);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t} catch (SecurityException e) {}\n\t\t\n\t\tnew Main().run();\n\t}\n\n\tBufferedReader in;\n\tPrintWriter out;\n\tStringTokenizer st = new StringTokenizer(\"\");\n\t\n\tvoid run() throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\n\t\tString s = in.readLine();\n\t\t\n\t\tfor (int len = s.length() - 1; len > 0; len--) {\n\t\t\tSet<String> set = new HashSet<String>();\n\t\t\tfor (int i = 0; i + len <= s.length(); i++) {\n\t\t\t\tString ss = s.substring(i, i + len);\n\t\t\t\tif (set.contains(ss)) {\n\t\t\t\t\tout.println(len);\n\t\t\t\t\tout.close();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tset.add(ss);\n\t\t\t}\n\t\t}\n\t\tout.println(0);\n\t\tout.close();\n\t}\n\t\n\tString nextToken() throws IOException {\n\t\twhile (!st.hasMoreTokens())\n\t\t\tst = new StringTokenizer(in.readLine());\n\t\treturn st.nextToken();\n\t}\n\t\n\tint nextInt() throws IOException {\n\t\treturn Integer.parseInt(nextToken());\n\t}\n\t\n\tlong nextLong() throws IOException {\n\t\treturn Long.parseLong(nextToken());\n\t}\n\t\n\tdouble nextDouble() throws IOException {\n\t\treturn Double.parseDouble(nextToken());\n\t}\n\t\n\tString nextLine() throws IOException {\n\t\tst = new StringTokenizer(\"\");\n\t\treturn in.readLine();\n\t}\n\t\n\tboolean EOF() throws IOException {\n\t\twhile (!st.hasMoreTokens()) {\n\t\t\tString s = in.readLine();\n\t\t\tif (s == null)\n\t\t\t\treturn true;\n\t\t\tst = new StringTokenizer(s);\n\t\t}\n\t\treturn false;\n\t}\n}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s = sc.next();\n\t\t\n\t\tint len = s.length();\n\t\tfor(int i=len-1; i>=1; --i) {\n\t\t\tfor(int j=0; j<=len - i; ++j) {\n\t\t\t\tString ss = s.substring(j, j+i);\n\n\t\t\t\tif(s.substring(j+1).indexOf(ss)!=-1) {\n\t\t\t\t\tSystem.out.println(ss.length());\n\t\t\t\t\treturn;\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t\tSystem.out.println(0);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) throws FileNotFoundException, IOException\n    new Thread(new Main()).start();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new A().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws Exception {\n        new A0023();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tString line = s.readLine();\n\t\tint len = line.length();\n\t\tint max = 0;\n\t\tfor (int i = 0 ; i < len ; i++) {\n\t\t\tfor (int j = i+1 ; j <= len ; j++) {\n\t\t\t\tString sch = line.substring(i, j);\n\t\t\t\tfor (int k = i+1 ; k + (j - i) <= len ; k++) {\n\t\t\t\t\tString tch = line.substring(k, k+(j-i));\n\t\t\t\t\tif (sch.equals(tch)) {\n\t\t\t\t\t\tmax = Math.max(max, (j-i));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.println(max);\n\t\tout.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException   {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String s = br.readLine();\n        for(int length = s.length(); length > 0; length--)      {\n            for(int start = 0; start + length <= s.length(); start++)       {\n                String test = s.substring(start, start+length);\n                if(s.indexOf(test) != s.lastIndexOf(test))  {\n                    System.out.println(length);\n                    return;\n                }\n            }\n        }\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        int i, j, current, longest = 0;\n        for (i = 0; i < s.length(); i++) {\n            for (j = 0; j < s.length(); j++) {\n                if (i != j) {\n                    int ti = i, tj = j;\n                    current = 0;\n                    while (ti < s.length() && tj < s.length() && s.charAt(ti) == s.charAt(tj)) {\n                        current++;\n                        ti++;\n                        tj++;\n                    }\n                    if (current > longest) {\n                        longest = current;\n                    }\n                }\n            }\n        }\n        System.out.println(longest);\n    }\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) throws Exception {\n    new Main().doWork();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = sc.nextLine();\n\n        String sub = \"\";\n        int count = 0;\n        int max = 0;\n        for (int i = 0; i < line.length() - 1; i++) {\n            sub = line.substring(i, i + 1);\n\n            int q = i + 1;\n            int p;\n            int r = i;\n            while (q < line.length() && q > 0) {\n                p = q;\n                r = i;\n                int ind = line.indexOf(sub, p);\n                count = 0;\n                if (ind != -1) {\n                    for (int j = ind; j < line.length(); j++) {\n                        if (line.substring(j, j + 1).equalsIgnoreCase(line.substring(r, r + 1))) {\n                            r++;\n                            count++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if (count > max) {\n                        max = count;\n                    }\n                }\n                q = ind + 1;\n                \n            }\n\n        }\n\n        System.out.println(max);\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] agrs) throws IOException{\n        \n        String line = cin.nextLine();\n        \n        HashMap<String, Integer> map = new HashMap<String, Integer>();\n        int ans = 0;\n        for (int i = 0; i < line.length(); ++i) {\n            StringBuffer str = new StringBuffer(\"\");\n            for (int j = i; j < line.length(); ++j) {\n                str.append(line.charAt(j));\n                \n                if (!map.containsKey(str.toString())) {\n                    //cout.println(str.toString());\n                    map.put(str.toString(), 1);\n                } else {\n                    ans = str.length() > ans ? str.length() : ans;\n                }\n            }\n        }\n        \n        cout.println(ans);\n        \n        cin.close();\n        cout.close();\n    }\n", "complexity": "cubic"}
{"code": "", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next(),c;\n        int n = s.length(),a,b;\n        \n        for(int sz = n ; sz >= 1 ; sz--) {\n            for(int i = 0 ; i+sz <= n ; i++) {\n                c = s.substring(i, i+sz);\n                a = s.indexOf(c,0);\n                if(a < 0) continue;\n                b = s.indexOf(c,a+1);\n                if(b < 0) continue;\n                System.out.println(sz);\n                return;\n                \n            } // for j\n        } // for i\n        System.out.println(0);\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws Exception {\n        St.metod();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) \n        Scanner in=new Scanner(System.in);\n        String str=in.next();\n        \n        int i;\n        for(i=str.length()-1;i>=1;i--)\n            if(isOK(str,i))\n            {\n        \tbreak;\n            }\n        \n        System.out.println(i);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner reader = new Scanner(System.in);\n\t\tString in = reader.next();\n\t\t\n\t\tint max = 0;\n\t\t\n\t\tfor(int i = 0; i < in.length(); i++){\n\t\t\tfor(int j = i+1; j < in.length(); j++){\n\t\t\t\t//take this substring\n\t\t\t\tString consider = in.substring(i, j);\n\t\t\t\tfor(int k = i+1; k < in.length(); k++){\n\t\t\t\t\tif(k + consider.length() > in.length())\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if(in.substring(k, k+consider.length()).equals(consider))\n\t\t\t\t\t\tmax = Math.max(max, consider.length());\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(max);\n\t}\t\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        \n        new A().run();\n        \n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new DoubleWord().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        //final String FILENAME = \"dvd\";\n        //in = new BufferedReader(new FileReader(new File(FILENAME + \".in\")));\n        //out = new PrintWriter(new File(FILENAME + \".out\"));\n        in = new BufferedReader(new InputStreamReader(System.in));\n        //in = new Scanner(System.in);\n        out = new PrintWriter(System.out);\n        st = new StringTokenizer(\" \");\n        new Main().run();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new Thread(new A()).start();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tStreamTokenizer in = new StreamTokenizer(new BufferedReader(\n\t\t\t\tnew InputStreamReader(System.in)));\n\t\t\n\t\tin.nextToken();\n\t\tString s = in.sval;\n\t\tint l = s.length();\n\t\tint n = l - 1;\n\t\tString st, sub;\n\t\twhile (n > 0) {\n\t\t\tfor (int i = 0; i < l - n; ++i) {\n\t\t\t\tst = s.substring(i, n + i);\n\t\t\t\tsub = s.substring(i + 1);\n\t\t\t\tif (sub.indexOf(st) != -1) {\n\t\t\t\t\tSystem.out.println(n);\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tn--;\n\t\t}\n\t\tSystem.out.println(0);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws Exception {\n\t\tOverlapedString os = new OverlapedString();\n\t\tBufferedReader stdin =\n\t\t\tnew BufferedReader(new InputStreamReader(System.in));\n\t\tString line;\n\t\twhile ((line = stdin.readLine()) != null) {\n\t\t\tSystem.out.println(os.handleOverlap(line));\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String [] argv)\n\t\tString filePath=null;\n\t\tif(argv.length>0)filePath=argv[0];\n\t\tA a = new A(filePath);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException{\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        int n = s.length();\n        for (int i = n; i >= 1; i--) {\n            Set<String> set = new HashSet<String>();\n            for (int j = 0; j < n-i+1; j++) {\n                String t = s.substring(j, j+i);\n                if (set.contains(t)) {\n                    System.out.println(i);\n                    return;\n                }\n                set.add(t);\n            }\n        }\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "   public static void main(String[] args)\n      new A(new Scanner(System.in));\n   }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        String s = sc.next();\n        for (int l = s.length(); l > 0; --l) {\n            HashSet<String> set = new HashSet<String>();\n            for (int i = 0; i < s.length() - l + 1; ++i)\n                if (set.contains(s.substring(i, i + l))) {\n                    System.out.println(l);\n                    return;\n                } else {\n                    set.add(s.substring(i, i + l));\n                }\n        }\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new YouAreGivenAString().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] arg) {\n        Scanner in = new Scanner(System.in);\n        word = in.next();\n        if (word.length() == 1) {\n            System.out.println(0);\n            return;\n        }\n        for (int i = word.length() - 1; i > 0; i--) {\n            int j = 0;\n            while (j + i <= word.length()) {\n                check(word.substring(j, i+j));\n                j++;\n            }\n        }\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        String str = f.readLine();\n        int max = 0;\n        for (int i = 0; i < str.length(); i++)\n            for (int j = i+1; j <= str.length(); j++) {\n                String s = str.substring(i,j);\n                if (str.indexOf(s) >= 0 && str.substring(str.indexOf(s)+1).indexOf(s) >= 0)\n                    max = Math.max(max, j-i);\n            }\n        System.out.println(max);\n    }   \n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        final String str;\n        final BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        str = r.readLine();\n\n        int max = 0;\n\n        for (int x = 0; x  < str.length(); x++) {\n            for (int y = x + 1; y  < str.length(); y++) {\n                int c = 0;\n                for (;c + x < str.length() && y + c < str.length(); c++) {\n                    if (str.charAt(x + c) != str.charAt(y + c)) {\n                        break;\n                    }\n                }\n\n                if (c > max) {\n                    max = c;\n                }\n            }\n        }\n\n        System.out.println(max);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException, IOException {\n        Scanner in = new Scanner();\n        PrintWriter out = new PrintWriter(System.out);\n        String val = in.next();\n        ArrayList<String> list = new ArrayList();\n        for(int i = 0; i < val.length() ; i++){\n            list.add(val.substring(i));\n        }\n        Collections.sort(list);\n        int result = 0;\n        for(int i = 1; i < list.size() ; i++){\n            String other = list.get(i - 1);\n            int temp = 0;\n            for(int j = 0; j < list.get(i).length() && j < other.length() ; j++){\n                if(other.charAt(j) == list.get(i).charAt(j)){\n                    temp++;\n                }else{\n                    break;\n                }\n            }\n            if(temp > result){\n                result = temp;\n            }\n        }\n        out.println(result);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]){\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFileOutputStream fileOutputStream;\n\t\tFileInputStream fileInputStream;\n\t\tif (readFromFile){\n\t\t\ttry{\n\t\t\t\tfileInputStream = new FileInputStream(new File(\"input.txt\"));\n\t\t\t\tfileOutputStream = new FileOutputStream(new File(\"output.txt\"));\n\t\t\t}catch (FileNotFoundException e){\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\tPrintWriter out = new PrintWriter((readFromFile)?fileOutputStream:outputStream);\n\t\tInputReader in = new InputReader((readFromFile)?fileInputStream:inputStream);\n\t\t\n\t\tSolver s = new Solver(in,out);\n\t\ts.solve();\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        solve();\n        return;\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        String s = sc.next();\n        for (int l = s.length(); l > 0; --l) {\n            HashSet<String> set = new HashSet<String>();\n            for (int i = 0; i < s.length() - l + 1; ++i)\n                if (set.contains(s.substring(i, i + l))) {\n                    System.out.println(l);\n                    return;\n                } else {\n                    set.add(s.substring(i, i + l));\n                }\n        }\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tPandaScanner in = new PandaScanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tA solver = new A();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(\n\t\t\t\tSystem.in)));\n\t\tout = new PrintWriter(System.out);\n\n\t\tString s = nextString();\n\t\tint max = 0;\n\t\tfor (int i=0; i<s.length(); i++) {\n\t\t\tfor (int j=i+1; j<=s.length(); j++) {\n//\t\t\t\tSystem.out.println(i+ \" \"+ j);\n\t\t\t\tString u = s.substring(i,j);\n\t\t\t\tif (s.substring(i+1).indexOf(u) >= 0) {\n\t\t\t\t\tmax = Math.max(max, u.length());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.println(max);\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tString s = null;\n\t\t// citire\n\t\ttry {\n//\t\t\tScanner sc = new Scanner(new File(\"in.txt\"));\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\ts = sc.next();\n\t\t\t\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tint n = s.length();\n\t\t\n\t\tHashSet<String> h = new HashSet<String>();\n\t\tString t=null;\n\t\tboolean b;\n\t\tint lmax = 0;\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tfor (int j=i+1; j<=n; j++) {\n\t\t\t\tt = s.substring(i, j);\n\t\t\t\tb = h.add(t);\n//\t\t\t\tSystem.out.println(t + \"\t\"  + b);\n\t\t\t\tif (b==false) {\n\t\t\t\t\tif (j-i>lmax) {\n\t\t\t\t\t\tlmax = j-i;\n//\t\t\t\t\t\tSystem.out.println(t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(lmax);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String ...args) throws Throwable {\n        Scanner in = new Scanner(System.in);\n        String init = in.nextLine();\n        HashSet<String> h = new HashSet<String>();\n        for (int len = init.length() - 1; len >= 1; --len)  {\n            h.clear();\n            for (int pos = 0; pos + len <= init.length(); ++pos) {\n                String now = init.substring(pos, pos + len);\n                if (h.contains(now)) {\n                    System.out.println(len);\n                    return;\n                }\n                h.add(now);\n            }\n\n        }\n\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String s = br.readLine();\n        s = s.replaceAll(\"\\\\s+\", \" \");\n        System.out.println(lrs(s).length());\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)throws IOException{\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        String s=br.readLine();\n        int max=0;\n        for(int i=0;i<s.length();i++){\n            int len=0;\n            int k=i;\n            boolean flag=false;\n            for(int j=i+1;j<s.length();j++){\n                if(s.charAt(k)==s.charAt(j)){\n                len++;\n                k++;\n                flag=true;\n                }\n                else if(flag==true){\n                    j=j-len;\n                    k=i;\n                    if(max<len)\n                    max=len;\n                    len=0;\n                    flag=false;\n                    \n                }\n                   \n            }\n            if(max<len)\n            max=len;\n        }\n        System.out.print(max);\n    }}\n", "complexity": "cubic"}
{"code": "public static void main(String[] args)\nScanner input = new Scanner(System.in);\nString s = input.nextLine();\nBoolean found = false;\nint i = s.length();\nwhile(found==false)\n{\ni--;\nArrayList<String> sub = new ArrayList<String>();\nfor(int j = 0; j <= s.length() - i; j++)\n{\nif(sub.contains(s.substring(j, j+i)))\nfound = true;\nelse\nsub.add(s.substring(j, j+i));\n}\n\n}\nSystem.out.println(i);\n}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner s = new Scanner(new InputStreamReader(System.in));\n        String str = s.next();\n        int x;\n        int max= 0;\n        \n        for (int i = 0; i < str.length()-1; i++) {\n            for (int j = i+1; j < str.length(); j++) {\n                x = str.indexOf(str.substring(i,j),i+1) ;\n                if (x != -1){\n                    if (j-i > max) max = j-i;\n                }\n            }\n        }\n        System.out.println(max);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner scr = new Scanner(System.in);\n       // System.out.println(\"entet strig\");\n        String str = scr.nextLine();\n        int len =0;\n      //  System.out.println(str.substring(0, str.length()));\n        for(int i=0;i<(str.length()-1);i++)\n        {\n            for(int j=i+1;j<str.length();j++)\n            {\n                String sub = str.substring(i, j);\n                //int a=i+sub.indexOf(sub.charAt(0));\n                int ind = str.indexOf(sub, i+1);\n                if(ind!=-1 && sub.length()>len )\n                {\n                    len = sub.length();\n                }\n            }\n        }\n        System.out.println(len);\n        // TODO code application logic here\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\t\tString s = in.nextLine();\n\t\tint max = 0;\n\t\tfor(int i = 0; i < s.length(); i++)\n\t\t\tfor(int k = s.length(); k > max + i; k--)\n\t\t\t\tif(s.substring(i + 1).contains(s.substring(i,k)))\n\t\t\t\t\tmax = k - i; \n\t\tSystem.out.println(max);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Abra().run();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tString str = in.next();\n\t\tint max = 0;\n\t\tfor(int i=0; i<str.length(); i++) {\n\t\t\tfor(int j=i+1; j<=str.length(); j++) {\n\t\t\t\tString first = str.substring(i,j);\n\t\t\t\tfor(int k=i+1; k<=str.length()-first.length(); k++) {\n\t\t\t\t\tif(str.substring(k,k+first.length()).equals(first))\n\t\t\t\t\t\tmax = Math.max(max,first.length());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) /*throws FileNotFoundException*/ { \n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]){\n        Scanner sc=new Scanner(System.in);\n        String str=sc.next();\n        sc.close();\n        \n        int maxm=0;\n        int ind1,ind2;\n        \n        for(int i=0;i<str.length();i++){\n            for(int j=i+1;j<str.length();j++){\n                int len=0;\n                ind1=i;ind2=j;\n                while(ind2<str.length() && str.charAt(ind1)==str.charAt(ind2)){\n                    ind1++;\n                    ind2++;\n                    len++;\n                }\n                maxm=Math.max(maxm,len);\n            }\n        }\n        System.out.println(maxm);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main( String[] args )\n\t\tString s = in.next();\n\t\tint n = s.length(), ans = 0;\n\t\tfor( int i = 0; i < n; i++ ) for( int j = i+1; j < n; j++ )\n\t\t{\n\t\t\tint l = 0;\n\t\t\twhile( j+l<n && s.charAt(i+l)==s.charAt(j+l) ) l++;\n\t\t\tans = Math.max( ans, l );\n\t\t}\n\t\tSystem.out.println( ans );\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new BetaRound23_A()).start();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        Map<Integer, Integer> mapa = new HashMap<Integer, Integer>();\n        String str = in.next();\n        int len = str.length();\n        int maxCurrent = 0;\n        for (int i = 0; i < len; ++i) {\n            for (int j = 1; j <= len; ++j) {\n                if (i + j > len) continue;\n                //System.out.format(\"Adding from %d to %d -> %s\\n\",i, i+j,str.substring(i, i + j));\n                int hashCode = str.substring(i, i + j).hashCode();\n                Integer current = mapa.get(hashCode);\n                if (current == null)\n                    current = 0;\n                current++;\n                mapa.put(hashCode, current);\n                if (current > 1)\n                    maxCurrent = Math.max(maxCurrent, j);\n            }\n        }\n\n        out.println(maxCurrent);\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "public static void main(String a[])throws IOException\nBufferedReader b=new BufferedReader(new InputStreamReader(System.in));\nint n=0,i=0,k=2;\nString s=\"\\0\",r=\"\\0\";\ns=b.readLine();\nn=s.length()-1;\nwhile(k<=s.length())\n{\nfor(i=0;i<k;i++)\n{\nr=s.substring(i,i+n);\nif(s.indexOf(r)!=s.lastIndexOf(r))\n{\nSystem.out.print(n);\nSystem.exit(0);\n}\n}\nk++;\nn--;\n}\nSystem.out.print(\"0\");\n}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new Scanner(System.in);\n\t\tout = new PrintWriter(System.out);\n//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\n\t\tString s = in.next();\n\t\tint n = s.length();\n\n\t\tint max = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tString[] subs = new String[n - i + 1];\n\t\t\tfor (int j = 0; j + i <= n; j++) subs[j] = s.substring(j, j + i);\n\t\t\tArrays.sort(subs);\n\t\t\tboolean flag = false;\n\t\t\tfor (int j = 0; j < n - i; j++)\n\t\t\t\tif (subs[j].equals(subs[j + 1])) flag = true;\n\t\t\tif (flag) max = Math.max(max, i);\n\t\t}\n\n\t\tout.println(max);\n\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[]args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString W = sc.next();\n\t\tArrayList<String>Q = new ArrayList<String>();\n\t\tfor (int i = 0; i < W.length(); i++){\t\t\t\n\t\t\tString O = \"\";\n\t\t\tfor (int k = i; k < W.length(); k++){\n\t\t\t\tO = O + W.charAt(k);\n\t\t\t\tQ.add(O);\n\t\t\t}\t\t\t\n\t\t}\n\t\tCollections.sort(Q);\n\t\tString tmp = Q.get(0);\n\t\tint y = 0;\n\t\tfor (int i = 1; i < Q.size(); i++){\n\t\t\tif (Q.get(i).equals(tmp)){\n\t\t\t\tif (Q.get(i).length() > y){\n\t\t\t\t\ty = Q.get(i).length();\n\t\t\t\t}\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp = Q.get(i);\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(y);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        //final String FILENAME = \"dvd\";\n        //in = new BufferedReader(new FileReader(new File(FILENAME + \".in\")));\n        //out = new PrintWriter(new File(FILENAME + \".out\"));\n        in = new BufferedReader(new InputStreamReader(System.in));\n        //in = new Scanner(System.in);\n        out = new PrintWriter(System.out);\n        st = new StringTokenizer(\" \");\n        new Main().run();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Solution();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        \n        String s = input.nextLine();\n        \n        int max = 0;\n        \n        for(int i = 0; i < s.length(); i++) {\n            for(int j = i + 1; j <= s.length(); j++) {\n                String tmp = s.substring(i, j);\n                int match = 0;\n                for(int k = 0; k + tmp.length() <= s.length(); k++) {\n                    if(tmp.equals(s.substring(k, k + tmp.length()))) {\n                        match++;                        \n                    }\n                }\n                if(match >= 2) {\n                    max = Math.max(max, tmp.length());\n                }\n            }\n        }\n        System.out.println(max);\n        System.exit(0);\n    }\n", "complexity": "cubic"}
{"code": "     public static void main(String []args)throws Exception\n        String inp=\"\";\n        String res=\"\";\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        inp=br.readLine();\n        for(int i=0;i<inp.length();i++)//counts the length\n        {\n            for(int j=0;j<(inp.length()-i);j++)//start index of string\n            {\n                for(int k=j+1;k<=inp.length()-i;k++)\n                {\n                    if(inp.substring(j,j+i).equals(inp.substring(k,k+i)))\n                       res =inp.substring(j,j+i);\n                }\n            }\n        }\n        System.out.println(res.length());\n\n     }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        if(true) {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            String s = br.readLine();\n            System.out.println(solve(s));\n        }\n        else {\n            for(int i = 0; i < EX.length; ++i) {\n                int result = solve(EX[i]);\n                System.out.println(i + \": \" + result + \" \" + (result == EX_A[i]? \"ja\" : \"NEJ\"));\n            }\n        }\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tString str=sc.nextLine();\n\t\tint max=0;\n\t\tfor(int i=0;i<str.length();i++)\n\t\t{\n\t\t\tfor(int x=0;x+i<=str.length();x++)\n\t\t\t{\n\t\t\t\tif(contains(str,str.substring(x,x+i),x))\n\t\t\t\t{\n\t\t\t\t\t//System.out.println(str.substring(x,x+i));\n\t\t\t\t\tmax=Math.max(max, i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String s = in.readLine();\n        for (int i = s.length() - 1; i > 0; i--)\n            for (int j = 0; j <= s.length() - i; j++)\n                if (s.substring(0, j + i - 1).contains(s.substring(j, j + i))\n                        || s.substring(j + 1).contains(s.substring(j, j + i))) {\n                    System.out.println(i);\n                    return;\n                }\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]){\n        Scanner sc=new Scanner(System.in);\n        String str=sc.next();\n\n        for(int k=str.length()-1;k>=1;k--){\n            for(int i=0;i<=str.length()-k;i++){\n                for(int j=i+1;j<=str.length()-k;j++){\n                    if(str.substring(i,i+k).equals(str.substring(j,j+k))){\n                            System.out.println(k);\n                            return;\n                    }\n                }\n            }\n        }\n        System.out.println(0);\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder text = new StringBuilder(in.nextLine()); String substr; String max=\"\";\n        for(int i=2; i<=text.length(); i++){\n            for(int j=0; j<i; j++){\n                substr = text.substring(j, i);\n                if(text.lastIndexOf(substr) != text.indexOf(substr)){\n                    if(substr.length() > max.length()){  max = substr;}\n                }\n            }\n        }\n        System.out.println(max.length());\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new StringsProb().run();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tInputStream input = System.in;\n\t\t//InputStream input = new FileInputStream(\"fileIn.in\");\n\t\tOutputStream output = System.out;\n\t\t//OutputStream output = new FileOutputStream(\"fileOut.out\");\n\t\tbr = new BufferedReader(new InputStreamReader(input));\n\t\tout = new PrintWriter(output);\n\t\tString in = br.readLine();\n      int len = in.length();\n      int doub = len;\n      boolean found = false;\n      while (!found)\n         {\n         int count = 0;\n         String[] parts = new String[len - doub + 1];\n         for (int i = 0; i < len - doub + 1; i++)\n            parts[i] = in.substring(i,i+doub);\n         for (int i = 1; i < len - doub + 1; i++)\n            for (int j = 0; j < i; j++)\n               if (parts[i].equals(parts[j]))\n                  count++;\n         if (count >= 1)\n            found = true;\n         doub--;\n         }\n      out.println(doub+1);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]){\n\t\tScanner cin = new Scanner(System.in);\n\t\tString str;\n\t\tint i,j,k;\n\t\tint cnt = 0;\n\t\tchar [] strArray;\n\t\t\n\t\tstr = cin.next();\n\t\tstrArray = str.toCharArray();\n\t\t\n\t\tfor(i = 0; i < strArray.length; i ++)\n\t\t\tfor(j = i + 1; j < strArray.length; j ++)\n\t\t\t{\n\t\t\t\tfor(k = 0; (((i + k) < strArray.length && (j + k) < strArray.length) && (strArray[i + k] == strArray[j + k])); k ++)\n\t\t\t\t\tif(k + 1> cnt) cnt = k + 1;\n\t\t\t}\n\t\t\n\t\tSystem.out.println(cnt);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n\tScanner sc = new Scanner(System.in);\n\tchar[] input = sc.nextLine().toCharArray();\n\tint[][] dyn = new int[input.length][input.length];\n\tint max = 0;\n\tfor(int a = 0; a < input.length; a++) {\n\t    for(int b = a + 1; b < input.length; b++) {\n\t\tif(input[a] == input[b]) {\n\t\t    int prev = (a == 0) ? 0 : dyn[a-1][b-1];\n\t\t    dyn[a][b] = prev + 1;\n\t\t    max = (dyn[a][b] > max) ? dyn[a][b] : max;\n\t\t}\n\t    }\n\t}\n\tSystem.out.println(max);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String s = in.nextLine();\n    int i=0,j=0,n=0,t=0,count=0;\n    n=s.length();\n    String s1=\"y\",s2=\"yu6j\";\n    for(t=1;t<n;t++)\n        {\n        for(i=0;i<t;i++)\n            {\n            s1=s.substring(i,i+n-t);\n            for(j=i+1;j<=t;j++)\n                {\n                s2=s.substring(j,j+n-t);\n                if(s1.equalsIgnoreCase(s2))\n                    {\n                    count++;break;\n                    }\n                if(count==1) break;\n                }\n            if(count==1) break;\n            }\n        if(count==1) break;\n        }\n\tif(n==0)\n\t\t{\n\t  System.out.println(\"0\");\n\t\t}\n\telse\n\t{\n    if(count==1)\n    {\n    System.out.println(s1.length());\n    }\n    else  System.out.println(\"0\");\n    }\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)throws IOException {\n\t\tnew A().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]){\n       new CF23A().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)\n        new Solution().calc();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tSystem.out.println(f());\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String... args) {\n        new A().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        String str = s.nextLine();\n        \n        for (int l = str.length()-1; l >= 1; l--) {\n            for (int i = 0; i < str.length()-l+1; i++) {\n                String subs = str.substring(i, i+l);\n                if(str.lastIndexOf(subs) != i){\n                    System.out.println(l);\n                    return;\n                }\n            }\n        }\n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tString str=sc.nextLine();\n\t\tint max=0;\n\t\tfor(int i=0;i<str.length();i++)\n\t\t{\n\t\t\tfor(int x=0;x+i<=str.length();x++)\n\t\t\t{\n\t\t\t\tif(contains(str,str.substring(x,x+i),x))\n\t\t\t\t{\n\t\t\t\t\t//System.out.println(str.substring(x,x+i));\n\t\t\t\t\tmax=Math.max(max, i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        String s = in.nextLine();\n\n        int ans = 0;\n\n        outer: for (int i = s.length() - 1; i >= 1; i--)\n            for (int j = 0; j < s.length() - i; j++) {\n                String sub = s.substring(j, j + i);\n                String str = s.substring(j + 1);\n\n                if (str.contains(sub)) {\n                    ans = i;\n                    break outer;\n                }\n            }\n\n        out.print(ans);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String line = in.readLine();\n        int n = line.length();\n        int maxlenght = 0;\n        for (int i = 0; i < n; i++) {\n            int j = line.indexOf(line.charAt(i), i + 1);\n            while (j != -1) {\n                int k = i;\n                int l = j;\n                while (k < n && l < n && line.charAt(k) == line.charAt(l)) {\n                    k++;\n                    l++;\n                }\n                if (k - i > maxlenght) {\n                    maxlenght = k - i;\n                }\n                j = line.indexOf(line.charAt(i), j + 1);\n            }\n        }\n        System.out.println(maxlenght);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new TaskA()).start();\n//\t\tnew Template().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tnew Main().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)throws java.lang.Exception {\n     BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n     String s = br.readLine();\n     int max = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i+1; j < s.length(); j++) {\n                if(s.substring(i+1).contains(s.substring(i,j)))\n                    max = Math.max(max, j-i);\n\n            }}\n            System.out.println(max);\n\n\n\n    \n    }\n\n}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tString str = new Scanner(System.in).next();\n\t\tSet<String> set = new HashSet<String>();\n\t\tString max = \"\";\n\t\tfor(int l = 1; l < str.length(); ++l){\n\t\t\tfor(int i = 0; i < str.length()-l; ++i){\n\t\t\t\tString substr = str.substring(i, i+l);\n\t\t\t\tif(!set.contains(substr) && str.indexOf(substr) != str.lastIndexOf(substr)){\n\t\t\t\t\tset.add(substr);\n\t\t\t\t\tif(substr.length() > max.length()){\n\t\t\t\t\t\tmax = substr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max.length());\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String args[])\n        Scanner scan = new Scanner(System.in);\n        \n        String str = scan.next();\n        \n        for(int i=str.length();i >= 1;i--)\n        {\n            for(int j=0;j + i <= str.length();j++)\n            {\n                String sub = str.substring(j, j+i);\n                \n                int index = str.indexOf(sub, j+1);\n                \n                \n                if(index > -1)\n                {\n                    System.out.println(i);\n                    return;\n                }\n                \n            }\n        }\n        \n        System.out.println(0);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        if (LOCAL) {\n            try {\n                System.setIn(new FileInputStream(\"in.txt\"));\n            } catch (Throwable e) {\n                LOCAL = false;\n            }\n        }\n        if (!LOCAL) {\n            try {\n                Locale.setDefault(Locale.US);\n                System.setOut(new PrintStream(new BufferedOutputStream(System.out)));\n            } catch (Throwable e) {\n            }\n        }\n        new Main().run();\n        System.out.flush();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[])throws IOException\n        InputStreamReader read=new InputStreamReader(System.in);\n        BufferedReader in=new BufferedReader(read);\n        String s,subs;\n       // System.out.println(\"Enter\");\n        s=in.readLine();\n        int i,j,k,l=0,a=1,sl=0;\n        for(i=0;i<s.length();i++)\n        {\n            a=1;\n            for(j=i;j<s.length();j++)\n            {\n                subs=s.substring(i,i+a);\n                for(k=i;k<(s.length()-a+1);k++)\n                {\n                    if(subs.compareTo(s.substring(k,k+a))==0)\n                    l++;\n                    if(l==2)\n                    {\n                        if(a>sl)\n                        sl=a;\n                        l=0;\n                        break;\n                    }\n                }\n                l=0;\n                a++;\n            }\n        }\n        System.out.println(sl);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new A().solve();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        String k1 = scan.next();\n        HashSet<String> met = new HashSet();\n        String ans = \"\";\n        for (int i=1;i<=k1.length()-1;i++){\n            for (int j=0;j+i<=k1.length();j++){\n                String cur = k1.substring(j, j+i);\n                if (!met.contains(cur)){\n                    met.add(cur);\n                }\n                else {\n                    if (cur.length()>ans.length())ans=cur;\n                }\n            }\n        }\n        System.out.println(ans.length());\n        \n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tString s = nextString();\n\t\t\n\t\tfor (int i = s.length(); i > 0; i--) {\n\t\t\tfor (int j = 0; j+i-1 < s.length(); j++)\n\t\t\t\tfor (int k = j+1; k+i-1 < s.length(); k++)\n\t\t\t\t\tif (s.substring(j, j+i).equals(s.substring(k, k+i))) {\n\t\t\t\t\t\tout.println(i);\n\t\t\t\t\t\tout.flush();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t}\n\t\t\n\t\tout.println(\"0\");\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String [] args){\n        Scanner in = new Scanner(System.in);\n\n        String ins = in.nextLine();\n        HashMap <String,Integer> sub = new HashMap<String,Integer>();\n        for (int i=0;i<ins.length();i++){\n            for (int j=i+1;j<=ins.length();j++){\n                String key = ins.substring(i,j);\n                if (sub.containsKey(key)){\n                    sub.put(key,sub.get(key)+1);\n                } else {\n                    sub.put(key,1);\n                }\n            }\n        }\n\n        int max = 0;\n        for (String key:sub.keySet()){\n            if (sub.get(key) >= 2 && key.length() > max){\n                max = key.length();\n            }\n        }\n\n        System.out.print(max);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException\n        new Thread(null, new A(), \"\", 1 << 20).start();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew A().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n\tBufferedReader reader=new BufferedReader(new InputStreamReader(System.in));\n\tnew Kai(reader).solve();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(final String[] args) {\n\ttry {\n\n\t    solve();\n\t    if (file) {\n\t\tSystem.out.flush();\n\t    }\n\t    if (!file) {\n\t\tout.flush();\n\t    }\n\n\t} finally {\n\t    in.close();\n\t    out.close();\n\t}\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String arg[])throws IOException\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\n\n\n\n          String s=br.readLine();int max=0;\n          for(int i=0;i<s.length();i++)\n          {\n              for(int j=i+1;j<=s.length();j++)\n              {\n                  String g=s.substring(i,j);\n                  //System.out.println(g);\n                  if(max<g.length())\n                  for(int k=i+1;k<=s.length()-g.length();k++)\n                  {\n                      //System.out.println(s.substring(k,k+g.length()));\n                      if(g.compareTo(s.substring(k,k+g.length()))==0)\n                      {\n                          max=g.length();\n                          break;\n                      }\n                      }\n              }\n          }\n          System.out.println(max);\n}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner keyboard = new Scanner(System.in);\n\t\tString input = keyboard.nextLine();\n\t\tboolean con = false;\n\t\tfor( int i = input.length()-1; i > 0 ; i--)\n\t\t{\t\n\t\t\tfor ( int j = 0; j+i< input.length(); j++ )\n\t\t\t\tfor( int k = j+1; k+i <= input.length(); k++ )\n\t\t\t\t\tif( input.substring(j,j+i).equals( input.substring(k,k+i) ) ) \n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.print(i+\"\\n\");\n\t\t\t\t\t\tk = input.length()+1;\n\t\t\t\t\t\tj = input.length();\n\t\t\t\t\t\ti = -1;\n\t\t\t\t\t\tcon = true;\n\t\t\t\t\t}\n\t\t}\n\t\tif( con == false )\n\t\t\tSystem.out.print(0+\"\\n\");\n\t}\t\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        new A().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main (String []args){\n        new P23A();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String s = in.readLine();\n        int ans = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i + 1; j <= s.length(); j++) {\n                String t = s.substring(i, j);\n                if (s.indexOf(t, i + 1)>=0) {\n                    ans = Math.max(ans, j - i);\n                }\n            }\n        }\n        System.out.println(ans);\n    }   \n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew R023A().process();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tString str = new Scanner(System.in).next();\n\t\tSet<String> set = new HashSet<String>();\n\t\tString max = \"\";\n\t\tfor(int l = 1; l < str.length(); ++l){\n\t\t\tfor(int i = 0; i < str.length()-l; ++i){\n\t\t\t\tString substr = str.substring(i, i+l);\n\t\t\t\tif(!set.contains(substr) && str.indexOf(substr) != str.lastIndexOf(substr)){\n\t\t\t\t\tset.add(substr);\n\t\t\t\t\tif(substr.length() > max.length()){\n\t\t\t\t\t\tmax = substr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max.length());\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        Locale.setDefault(Locale.US);\n        new _P023A().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder line = new StringBuilder(reader.readLine());\n        int length = 0;\n        for (int head = 0; head < line.length(); head++) {\n            for (int tail = line.length() - 1; tail > head; tail--) {\n                String subString = line.substring(head, tail);\n                if(line.indexOf(subString,head+1)>-1){\n                    length = Math.max(subString.length(), length);\n                }\n            }\n        }\n        System.out.println(length);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew A().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)\n        Scanner in = new Scanner(System.in);\n        String stroke = in.next();\n        char[] s = new char [stroke.length()];\n        for (int i=0;i<stroke.length();i++)\n            s[i]=stroke.charAt(i);\n        int dlina = 0;\n        for (int i=0;i<s.length-1;i++)\n            for (int j=i+1;j<s.length;j++)\n                for (int k=0;k<(s.length-j);k++)\n                    if (s[i]==s[j])\n                    {\n                        int ik=i+k;\n                        int jk = j+k;\n                        if (s[ik]==s[jk])\n                        {\n                            if (dlina<k+1)\n                                dlina=k+1;      \n                        }\n                        else \n                        break;\n                    }       \n        System.out.println(dlina);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner inScanner = new Scanner(System.in);\n        String string = inScanner.next();\n        int n = string.length();\n        for (int l = n - 1; l > 0; l--) {\n            Set<String> seen = new HashSet<String>();\n            for (int i = 0; i < n - l + 1; i++) {\n                String subString = string.substring(i, i + l);\n                if (seen.contains(subString)) {\n                    System.out.println(l);\n                    return;\n                }\n                seen.add(subString);\n            }\n        }\n        System.out.println(\"0\");\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new TaskA()).start();\n//\t\tnew Template().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        try{\n            Scanner scanner = new Scanner(System.in);\n            String in = scanner.next();\n            int max = 0;\n            for(int j=0;j<in.length()-1;j++){\n                for(int i=j;i<in.length();i++){\n                    if(in.indexOf(in.substring(j, i)) != in.lastIndexOf(in.substring(j, i)) && (i-j)>max){\n                        max = i-j;\n                    }\n                }\n            }\n            System.out.println(max);\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n", "complexity": "cubic"}
{"code": "        public static void main(String[] args){\n                new Solution23A().run();\n        }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        // TODO code application logic here\n        InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    TaskB solver = new TaskB();\n    solver.solve(1, in, out);\n    out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new A()).start();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\tString s = r.readLine();\n\n\t\tSystem.out.println(num(s));\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) throws Exception\n    new GivenString().run();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        in = new Parser(System.in);\n        out = new PrintWriter(System.out);\n        \n//        \n//        char[] ccc = new char[1];\n//        String ddd = \"abcdef\";\n//        ddd.getChars(2, 3, ccc, 0);\n//        \n//        String sssss = new String(ccc);\n//      \n//        System.out.println(sssss);\n//        \n        String s = in.nextString(100);\n        int len = 0;\n        String ss = \"\";\n        \n       \n        l:for (int i = 1; i<=s.length(); i++){\n            for(int j = 0; j+i<=s.length();j++){\n                char[] c = new char[i];\n                char[] cc = new char[i];\n                s.getChars(j, j+i, c, 0);\n                String sss = new String(c);\n                //System.out.println(sss);\n                for(int k = j+1; k+i<=s.length();k++){\n                     \n                    s.getChars(k, k+i, cc, 0);\n                    String ssss = new String(cc);\n                    if(sss.equals(ssss)) {len = i; continue l;}\n                }\n            }\n        }\n        \n        \n        System.out.println(len);\n       // out.flush();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new CodeForces().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        char[] x = in.next().toCharArray();\n        \n        int min = 0;\n        int max = x.length;\n        while(true) {\n            if(max-min == 1)\n                break;\n            int mid = (max+min)/2;\n            boolean eq = false;\n            for (int i = 0; i <= x.length-mid; i++) {\n                for (int j = 0; j <= x.length-mid; j++) {\n                    if(j == i)\n                        continue;\n                    eq = true;\n                    for (int k = 0; k < mid; k++) {\n                        if(x[i+k] != x[j+k]) { \n                            eq = false;\n                            break;\n                        }\n                    }\n                    if(eq)\n                        break;\n                }\n                if(eq) break;\n            }\n            if(eq) {\n                min = mid;\n            } else {\n                max = mid;\n            }\n        }\n        System.out.println(min);\n        \n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) {\n\t\tnew A23().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner sc = new Scanner();\n\t\tString entrada = sc.next();\n\t\tint mejor = 0;\n\t\tfor(int i = 0; i < entrada.length(); i++)\n\t\t{\n\t\t\tfor(int j = i + 1; j <= entrada.length(); j++)\n\t\t\t{\n\t\t\t\tString sub = entrada.substring(i, j);\n\t\t\t\tif(KMP_Matcher(sub, entrada))\n\t\t\t\t\tmejor = Math.max(j - i, mejor);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(mejor);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        new ProblemA_23().run();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s = new String(in.readLine());\n\t\tint len=s.length();\n\t\tint ans=0;\n\t\tfor (int i=0;i<len-1;i++) {\n\t\t\tfor (int j=i+1;j<len;j++) {\n\t\t\t\tint score=0;\n\t\t\t\tboolean flag=true;\n\t\t\t\tfor (int k=0;k+j<len && flag;k++) {\n\t\t\t\t\tif (s.charAt(i+k)==s.charAt(j+k)) {\n\t\t\t\t\t\tscore++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (score>ans) {\n\t\t\t\t\tans=score;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)\n        Scanner in = new Scanner(System.in);\n        String line = in.next();\n        \n        HashSet<String> hash = new HashSet<String>();\n        \n        int ans = 0;\n        for (int len = line.length()-1; len > 0; --len)\n        {\n            for (int i = 0; i + len <= line.length(); ++i)\n            {\n                String sub = line.substring(i, i+len);\n                if (hash.contains(sub))\n                {\n                    ans = Math.max(ans, sub.length());\n                }\n                \n                hash.add(sub);\n            }\n        }\n        \n        System.out.println(ans);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws Exception {\n\n\t\tnew Main().solve();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString input = sc.next();\n\t\t//input+=\"3\";\n\t\tint longest=0;\n\t\tif(input.length()==1){\n\t\t\tSystem.out.println(0);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\tif(input.length()==2){\n\t\t\tif(input.charAt(0)==input.charAt(1)){\n\t\t\t\tSystem.out.println(1);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t\telse{\n\t\t\tSystem.out.println(0);\n\t\t\tSystem.exit(0);}\n\t\t}\n\t\tfor(int a=0;a<input.length()-1;a++){\n\t\t\tfor(int b=a+1;b<input.length();b++){\n\t\t\t\tfor(int c=1;(c+b)<input.length()+1;c++){\n\t\t\t\t//\tSystem.out.printf(\"%s %s %d\\n\", input.substring(a,a+c), input.substring(b,b+c), input.substring(a,a+c).compareTo(input.substring(b,b+c)));\n\t\t\t\t\tif(input.substring(a,a+c).compareTo(input.substring(b,b+c))==0)\n\t\t\t\t\tif(longest<c)longest=c;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(longest);\n\t\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        ProblemA f = new ProblemA();\n        f.solve();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new p1().run();\n\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new CFC23A()).start();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder line = new StringBuilder(reader.readLine());\n        int length = 0;\n        for (int head = 0; head < line.length(); head++) {\n            for (int tail = line.length() - 1; tail > head; tail--) {\n                String subString = line.substring(head, tail);\n                if(line.indexOf(subString,head+1)>-1){\n                    length = Math.max(subString.length(), length);\n                }\n            }\n        }\n        System.out.println(length);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\t\t\n\t\t\n\t\tnew A();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        \n        Scanner in = new Scanner(System.in);\n        char[] input =  in.nextLine().toCharArray();\n        int length = input.length;\n        int max = 0;\n        for(int i=0; i<length; i++){\n            char[] subString = Arrays.copyOfRange(input, 1, input.length);\n            int temp = solve(input, subString);\n            if(temp > max) max = temp;\n            input = Arrays.copyOfRange(input, 1, input.length);\n        }\n        System.out.println(max);\n        \n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        EPhoenixAndComputers solver = new EPhoenixAndComputers();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint md = sc.nextInt();\n\t\tint k = (n + 1) / 2;\n\t\tint[][] dp = new int[k + 1][n + 1]; dp[0][0] = 1;\n\t\tfor (int h = 1; h <= k; h++)\n\t\t\tfor (int l = h; l <= n - h + 1; l++)\n\t\t\t\tdp[h][l] = (int) ((dp[h][l - 1] * 2L + dp[h - 1][l - 1]) * h % md);\n\t\tint ans = 0;\n\t\tfor (int h = 1; h <= k; h++)\n\t\t\tans = (ans + dp[h][n - h + 1]) % md;\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(), md = sc.nextInt();\n        int k = (n + 1) / 2;int ans = 0;\n        int[][] dp = new int[k + 1][n + 1];dp[0][0] = 1;\n        for (int h = 1; h <= k; h++)\n            for (int l = h; l <= n - h + 1; l++)\n                dp[h][l] = (int) ((dp[h][l - 1] * 2L + dp[h - 1][l - 1]) * h % md);\n        for (int h = 1; h <= k; h++)\n            ans = (ans + dp[h][n - h + 1]) % md;\n        System.out.println(ans);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        in = new FastReader();\n        out = new PrintWriter(System.out);\n\n        int t = 1;\n//        t = in.nextInt();\n        while (t-- > 0) {\n            solve();\n        }\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        StringBuilder st = new StringBuilder();\n        int t = 1;\n        for (int test = 0; test < t; test++) {\n            int n = sc.nextInt();\n            int MOD = sc.nextInt();\n\n            long[] factorial = new long[1000];\n            long[] powerOfTwo = new long[1000];\n            factorial[0]=1;\n            powerOfTwo[0]=1;\n            for (int i=1;i<1000;i++) {\n                factorial[i]=i*factorial[i-1];\n                factorial[i] %= MOD;\n                powerOfTwo[i]=2*powerOfTwo[i-1];\n                if (powerOfTwo[i]>=MOD) {\n                    powerOfTwo[i]-=MOD;\n                }\n            }\n            long[] oneOverFactorial = new long[500];\n            oneOverFactorial[0]=1;\n            oneOverFactorial[1]=1;\n            for (int i=2;i<450;i++) {\n                oneOverFactorial[i] = fastPow(factorial[i],MOD-2,MOD);\n            }\n            long dp[][] = new long[n+3][n+3]; // first value number of computers considered\n                                // second value number of computers manually on\n            \n            dp[1][1]=1;\n            for (int i=2;i<=n;i++) { // from left to right, over first i computers\n                dp[i][i]=powerOfTwo[i-1];\n                for (int j=1;j<i-1;j++) { // number of computers turned on manually\n                    for (int k=1;k<=j;k++) {\n                        // want to add dp[j][k]*factorial[k+(i-j-1)]*oneOverFactorial[k]*oneOverFactorial[i-j-1]*powerOfTwo[i-j-2]\n                        long add = dp[j][k]*factorial[k+(i-j-1)];\n                        add %= MOD;\n                        add *= oneOverFactorial[k];\n                        add %= MOD;\n                        add *= oneOverFactorial[i-j-1];\n                        add %= MOD;\n                        add *= powerOfTwo[i-j-2];\n                        add %= MOD;\n                        dp[i][k+(i-j-1)]+=add;\n                        dp[i][k+(i-j-1)]%=MOD;\n                    }\n                }\n            }\n            long ans = 0;\n            for (int i=1;i<=n;i++) {\n                ans+=dp[n][i];\n            }\n            ans %= MOD;\n            System.out.println(ans);\n        }\n        \n        //System.out.print(st.toString());\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]){\n        out = new PrintWriter(System.out);\n        in = new InputReader();\n        new B();\n        out.flush(); out.close();\n    }   \n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) {new Main().run();}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new E().solve();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tMyScanner in = new MyScanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tEPhoenixAndComputers solver = new EPhoenixAndComputers();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "   public static void main(String[] args)throws IOException{\n      BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n      PrintWriter out = new PrintWriter(System.out);\n      \n      StringTokenizer st = new StringTokenizer(f.readLine());\n      \n      int n = Integer.parseInt(st.nextToken());\n      MOD = Long.parseLong(st.nextToken());\n      \n      long[] pow2 = new long[MAX];\n      pow2[0] = 1L;\n      for(int k = 1; k < MAX; k++){\n         pow2[k] = (2L*pow2[k-1] + MOD)%MOD;\n      }\n      \n      fac = new long[MAX];\n      ifac = new long[MAX];\n      fac[0] = 1L;\n      ifac[0] = 1L;\n      for(int k = 1; k < MAX; k++){\n         fac[k] = ((long)k*fac[k-1] + MOD)%MOD;\n         ifac[k] = modInverse(fac[k],MOD);\n      }\n      \n      long[][] dp = new long[n][n+1];                 //what n you're on, what how many computers you've turned on manually\n      \n      //initial\n      for(int k = 0; k < n; k++){\n         dp[k][k+1] = pow2[k];\n      }\n      \n      for(int k = 2; k < n; k++){\n         for(int j = 1; j <= n; j++){\n            if(dp[k-2][j-1] == 0) continue;\n            long start = dp[k-2][j-1];                //number for part up to previous block\n            \n            for(int add = 1; ; add++){\n               if(k+add-1 >= n || j+add-1 > n) break;\n               \n               long adder = (start * pow2[add-1] + MOD)%MOD;\n               adder = (adder * choose(j+add-1,j-1) + MOD)%MOD;\n               dp[k+add-1][j+add-1] = (dp[k+add-1][j+add-1] + adder + MOD)%MOD;\n            }\n         }\n      }\n      \n      long answer = 0L;\n      for(int k = 1; k <= n; k++){\n         answer = (answer + dp[n-1][k] + MOD)%MOD;\n      }\n      out.println(answer);\n      \n      \n      \n      \n      \n      \n      \n      \n      out.close();\n   }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new realfast(), \"\", 128 * (1L << 20)).start();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n//        InputReader in = new InputReader(new FileInputStream(\"input.txt\"));\n//        PrintWriter out = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\"milkvisits.out\")));\n//\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n\n//        long start = System.currentTimeMillis();\n        int n = in.nextInt();\n        long mod = in.nextLong();\n        long[] invs = allInvs(n + 3, mod);\n        long[] facts = new long[n + 2];\n        facts[0] = 1;\n        long[] invFacts = new long[n + 2];\n        invFacts[0] = 1;\n        for (int i = 1; i < n + 2; i++) {\n            facts[i] = (facts[i - 1] * i) % mod;\n            invFacts[i] = (invFacts[i - 1] * invs[i]) % mod;\n        }\n        long[] pow2 = new long[n+3];\n        pow2[0] = 1;\n        for (int i = 1; i < n+3; i++) {\n            pow2[i] = pow2[i-1] * 2 % mod;\n        }\n\n        long[][] dp = new long[n + 2][n + 2];\n        for (int i = 2; i <= n + 1; i++) {\n            dp[i][1] = invFacts[i - 1] * pow2[i - 2] % mod;\n            for (int k = 2; k <= n; k++) {\n                for (int j = i - 2; j >= 1; j--) {\n                    dp[i][k] = (dp[i][k] + dp[j][k - 1] * pow2[ i - j - 2] % mod * invFacts[i - j - 1] % mod) % mod;\n                }\n            }\n        }\n\n        long ans = 0;\n        for (int k = 1; k <= n; k++) {\n\n            ans = (ans + dp[n + 1][k] * facts[n - k + 1] % mod) % mod;\n        }\n        out.println(ans);\n\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        setReader();\n        int n = nextInt(), MOD = nextInt();\n        long[] pow = new long[n+2];\n        pow[0] = 1;\n        for (int i=1; i<=n+1; i++) pow[i] = (pow[i-1] * 2) % MOD;\n        long[][] C = new long[n+2][n+2];\n        for (int i=0; i<=n+1; i++) {\n            C[i][0] = 1;\n            for (int j=1; j<=i; j++) {\n                C[i][j] = (C[i-1][j-1] + C[i-1][j]) % MOD;\n            }\n        }\n        long[][] dp = new long[n+2][n+1];\n        dp[0][0] = 1;\n        for (int i=0; i<=n; i++) {\n            for (int j=0; j<=i; j++) {\n                for (int k=1; i + k + 1 <= n + 1; k++) {\n                    dp[i + k + 1][j + k]+=(((dp[i][j] * C[j + k][k]) % MOD * pow[k-1]) % MOD);\n                    dp[i + k + 1][j + k]%=MOD;\n                }\n            }\n        }\n        long res = 0;\n        for (int i=0; i<=n; i++) res = (res + dp[n+1][i]) % MOD;\n        System.out.println(res);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tString[] st = br.readLine().split(\" \");\n\t\tint n = Integer.parseInt(st[0]);\n\t\tint m = Integer.parseInt(st[1]);\n\n\t\tlong[][] ncr = ncrcoll(405, 405, m);\n\t\tint[] p2 = new int[n + 1];\n\t\tp2[0] = 1;\n\t\tfor (int i = 1; i < p2.length; i++) {\n\t\t\tp2[i] = 2 * p2[i - 1] % m;\n\t\t}\n\n\t\tlong[][] dp = new long[405][405];\n\t\tdp[0][0] = 1;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= i; j++) {\n\t\t\t\tfor (int k = 1; i + k <= n; k++) {\n\t\t\t\t\tdp[i + k + 1][j + k] += ((dp[i][j] * p2[k - 1]) % m * ncr[j + k][k]);\n\t\t\t\t\tdp[i + k + 1][j + k] %= m;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlong ans = 0;\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tans = (ans + dp[n + 1][i]) % m;\n\t\t}\n\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 29);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n        // Start writing your solution here. -------------------------------------\n\n\n\n        /*fac = new long[nn + 1];\n        fac[1] = 1;\n        for(int i = 2; i <= nn; i++)\n            fac[i] = fac[i - 1] * i % MOD;*/\n\n\n        /*pow2 = new long[nn + 1];\n        pow2[0] = 1L;\n        for(int i = 1; i <= nn; i++)\n            pow2[i] = pow2[i - 1] * 2L;*/\n\n\n        /*inv = new long[nn + 1];\n        inv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            inv[i] = (MOD - MOD / i) * inv[(int)(MOD % i)] % MOD;*/\n\n        /*facInv = new long[nn + 1];\n        facInv[0] = facInv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            facInv[i] = facInv[i - 1] * inv[i] % MOD;*/\n\n\n        /*numOfDiffDiv = new int[nn + 1];\n        for(int i = 2; i <= nn; i++)\n            if(numOfDiffDiv[i] == 0)\n                for(int j = i; j <= nn; j += i)\n                    numOfDiv[j] ++;*/\n\n        /*numOfDiv = new int[nn + 1];\n        numOfDiv[1] = 1;\n        for(int i = 2; i <= nn; i++) {\n            for(int j = 2; j * j <= i; j++) {\n                if(i % j == 0) {\n                    numOfDiv[i] = numOfDiv[i / j] + 1;\n                    break;\n                }\n            }\n        }*/\n\n        //primes = sieveOfEratosthenes(100001);\n\n        /*\n        int t = 1;\n        //t = sc.ni();\n        while(t-- > 0) {\n            //boolean res = solve();\n            //out.println(res ? \"YES\" : \"NO\");\n            long res = solve();\n            out.println(res);\n        }*/\n\n\n        int t = 1, tt = 0;\n        //t = sc.ni();\n        for(int i = 1; i <40000; i++) squares.add(i * i);\n        while(tt++ < t) {\n            boolean res = solve();\n            //out.println(\"Case #\" + tt + \": \" + res);\n            //out.println(res ? \"YES\" : \"NO\");\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[]args) throws IOException {\n\t\tsc=new Scanner(System.in);\n\t\tout=new PrintWriter(System.out);\n\t\t//A();\n\t\t//B();\n\t\t//C();\n\t\t//D();\n\t\tE();\n\t\t//F();\n\t\t//G();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String hi[]) throws Exception\n        BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(infile.readLine());\n        int N = Integer.parseInt(st.nextToken());\n        MOD = Long.parseLong(st.nextToken());\n        fac = new long[401];\n        invfac = new long[401];\n        fac[0] = invfac[0] = 1L;\n        for(int i=1; i <= 400; i++)\n        {\n            fac[i] = (fac[i-1]*i)%MOD;\n            invfac[i] = power(fac[i], MOD-2, MOD);\n        }\n        long[] pow2 = new long[401];\n        for(int i=0; i <= 400; i++)\n            pow2[i] = power(2, i, MOD);\n        long[][] dp = new long[N+1][N+1];\n        for(int v=1; v <= N; v++)\n        {\n            dp[v][v] = pow2[v-1];\n            for(int k=1; k <= v; k++)\n                for(int block=1; block <= k; block++)\n                {\n                    if(block == v)\n                        continue;\n                    long temp = (dp[v-block-1][k-block]*calc(k-block, block))%MOD;\n                    temp = (temp*pow2[block-1])%MOD;\n                    dp[v][k] += temp;\n                    if(dp[v][k] >= MOD)\n                        dp[v][k] -= MOD;\n                }\n        }\n        long res = 0L;\n        for(int v=1; v <= N; v++)\n        {\n            res += dp[N][v];\n            if(res >= MOD)\n                res -= MOD;\n        }\n        System.out.println(res);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner fs=new FastScanner();\n\t\tn=fs.nextInt();\n\t\tmod=fs.nextInt();\n\t\tprecomp();\n\t\tdp=new long[n+1][n+1];\n\t\tfor (int i=0; i<dp.length; i++) Arrays.fill(dp[i], -1);\n\t\t\n\t\tlong ans=0;\n\t\tfor (int nXsLeft=2; nXsLeft<=n; nXsLeft++) {\n\t\t\tlong curAns=go(0, nXsLeft);\n\t\t\tans=add(ans, curAns);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        init_io();\n        int N = nint(), M = nint();\n        choose = new int[N+1][];\n        long[] ways = new long[N+1];\n        ways[0] = 1; ways[1] = 1;\n        for (int i = 0; i <= N; i++) choose[i] = new int[i+1];\n        for (int i = 0; i <= N; i++) {\n            choose[i][0] = choose[i][i] = 1;\n            for (int j = 1; j < i; j++) {\n                choose[i][j] = (choose[i-1][j-1] + choose[i-1][j]) % M;\n            }\n        }\n        for (int i = 2; i <= N; i++) {\n            for (int j = 0; j < i; j++) {\n                ways[i] = (ways[i] + choose[i-1][j]) % M;\n            }\n        }\n        long[][] dp = new long[(N+1)/2+1][N+1];\n        dp[0][0] = 1;\n        for (int i = 1; i <= (N+1)/2; i++) {\n            for (int j = 1; j <= N; j++) {\n                for (int k = 1; k <= j; k++) {\n                    dp[i][j] = (dp[i][j] + ways[k] * choose[j][k] % M * dp[i-1][j-k] % M) % M;\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 1; i <= (N+1)/2; i++) {\n            ans = (ans + dp[i][N-(i-1)]) % M;\n        }\n        out.println(ans);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1515E o = new CF1515E(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner fs = new FastScanner();\n    \tPrintWriter out = new PrintWriter(System.out);\n    \t\n    \tint tt = 1;\n    \touter:\n    \twhile(tt-->0) {\n    \t\t\n    \t\tn = fs.nextInt();\n    \t\tmod = fs.nextLong();\n    \t\t\n    \t\tdp = new long[N][N];\n    \t\tprecompute();\n    \t\t\n    \t\tdp[0][0] = 1;\n    \t\t\n    \t\tfor(int i=0;i<n;i++) {\n    \t\t\tfor(int j=0;j<=i;j++) {\n    \t\t\t\tfor(int k=1;i+k<=n;k++) {\n    \t\t\t\t\tdp[i+k+1][j+k] += (((dp[i][j]*pow[k-1])%mod)*C[j+k][k])%mod;\n    \t\t\t\t\tdp[i+k+1][j+k] %= mod;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t\tlong ans = 0;\n    \t\tfor(int i=0;i<=n;i++) {\n    \t\t\tans = (ans + dp[n+1][i])%mod;\n    \t\t}\n    \t\t\n    \t\tout.println(ans);\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t}\n    \t\n    \tout.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            int n=Int(),m=Int();\n\n            Solution sol=new Solution(out);\n            sol.solution(n,m);\n        }\n        out.close();\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n    \tint test=1;\n    \t//test=sc.nextInt();\n    \twhile(test-->0) {\n    \t\tint n = sc.nextInt();\n    \t\tMOD = sc.nextLong();\n    \t\tmemo = new long[n+1];\n    \t\tfill(n);\n    \t\tlong dp[][] = new long[n+5][n+5];\n    \t\tfor(int i=1;i<=n;i++) dp[i][i]=exp(2,i-1);\n    \t\tfor(int i = 2; i <= n; i++) {\n    \t\t\tfor(int j = 1; j < i; j++) {\n    \t\t\t\tfor(int k = 1; k <= j; k++) {\n    \t\t\t\t\tlong val = (dp[i-k-1][j-k]*C[j][k])%MOD;\n    \t\t\t\t\tif(memo[k-1] ==0) memo[k-1] = exp(2, k-1);\n    \t\t\t\t\tval=(val*memo[k-1])%MOD;\n    \t\t\t\t\tdp[i][j]=(dp[i][j]+val)%MOD;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tlong ans = 0;\n    \t\tfor(int i=0;i<=n;i++) ans=(ans+dp[n][i])%MOD;\n    \t\tout.println(ans);\n    \t}\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "public static void main(String []args){\n\nint t=1;\n\nwhile(t-->0){\nint n=ni();mod=nl();\nprecomp();\nlong dp[][]=new long[405][405];dp[0][0]=1l;\nfor(int i=0;i<n;i++){\n    for(int j=0;j<=i;j++){\n       for(int k=1;k+i<=n;k++){ \n          \n          dp[i+k+1][j+k]+=((dp[i][j]*p2[k-1])%mod)*Comb[k+j][k];\n          dp[i+k+1][j+k]%=mod;\n      }\n   }\n }\n\nlong sum=0l;\nfor(int i=0;i<=n;i++)sum=(sum+dp[n+1][i])%mod;\nout.println(sum);\n\n}out.close();}\n\n//-----------------Utility--------------------------------------------\n\nstatic long Comb[][]=new long[405][405];\nstatic long p2[]=new long[405];\nstatic long inv[]=new long[405];\nstatic long factorial[]=new long[405];\nstatic void precomp(){\n\ninv[0]=1;factorial[0]=1l;\n\nfor(long i=1;i<405;i++){factorial[(int)i]=i*factorial[(int)i-1];factorial[(int)i]%=mod;}\n\nfor(int i=1;i<405;i++){ inv[i]=power(factorial[i],mod-2);}\n\nfor(int i=0;i<405;i++){\n \n   for(int j=0;j<=i;j++){\n     Comb[i][j]=(((factorial[i]*inv[j])%mod)*inv[i-j])%mod;\n   }\n }\n\nfor(int i=0;i<405;i++)p2[i]=power(2,i);\n\n}\n\nstatic int Max=Integer.MAX_VALUE; static long mod=1000000007;\nstatic int v(char c){return (int)(c-'a')+1;}\npublic static long power(long x, long y )\n    {\n        //0^0 = 1\n        long res = 1L;\n        x = x%mod;\n        while(y > 0)\n        {\n            if((y&1)==1)\n                res = (res*x)%mod;\n            y >>= 1;\n            x = (x*x)%mod;\n        }\n        return res;\n    }\n//--------------------------------------------------------------------\n\nstatic InputStream inputStream = System.in;\nstatic OutputStream outputStream = System.out;\nstatic FastReader in=new FastReader(inputStream);\nstatic PrintWriter out=new PrintWriter(outputStream);\n\nstatic class FastReader \n{ \n  BufferedReader br; \n  StringTokenizer st; \n \n        FastReader(InputStream is) {\n            br = new BufferedReader(new InputStreamReader(is));\n        }\n \n  public String next() \n  { \n      while (st == null || !st.hasMoreElements()) \n      { \n          try\n          { \n              st = new StringTokenizer(br.readLine()); \n          } \n          catch (IOException  e) \n          { \n              e.printStackTrace(); \n          } \n      } \n      return st.nextToken(); \n  } \n \n  public int nextInt() \n  { \n      return Integer.parseInt(next()); \n  } \n \n  public long nextLong() \n  { \n      return Long.parseLong(next()); \n  } \n \n public  double nextDouble() \n  { \n      return Double.parseDouble(next()); \n  } \n \n \n  String nextLine() \n  { \n      String str = \"\"; \n      try\n      { \n          str = br.readLine(); \n      } \n      catch (IOException e) \n      { \n          e.printStackTrace(); \n      } \n      return str; \n  } \n}\nstatic int ni(){return in.nextInt();}\nstatic long nl(){return in.nextLong();}\nstatic String ns(){return in.nextLine();}\nstatic int[] na(int n){int a[]=new int[n];for(int i=0;i<n;i++){a[i]=ni();} return a;}\n\n}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1515E o = new CF1515E(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int mod = Integer.parseInt(st.nextToken());\n        long[][] dp = new long[n+2][n+1];\n        long[] pow = new long[n+1];\n        pow[0] = 1;\n        for (int i=1; i <= n; i++){\n            pow[i] = pow[i-1]*2;\n            pow[i] %= mod;\n        }\n        long[][] choose = new long[n*2+1][n+1];\n        for (int i=0; i <= n; i++){\n            choose[i][i] = 1;\n        }\n        for (int i=1; i <= n*2; i++){\n            for (int j=0; j <= n; j++){\n                choose[i][j] = choose[i-1][j];\n                if (j > 0){\n                    choose[i][j] += choose[i-1][j-1];\n                }\n                choose[i][j] %= mod;\n            }\n        }\n        dp[0][0] = 1;\n        for (int i=0; i < n; i++){ // number of computers on\n            for (int j=0; j <= i; j++){ // number manually turned on\n                for (int k=1; k+i <= n; k++){ // number of computers manually turned on in next \"block\"\n                    dp[i+k+1][j+k] += (pow[k-1] * choose[j+k][k])%mod * dp[i][j];\n                    dp[i+k+1][j+k] %= mod;\n                }\n            }\n        }\n        long ans = 0;\n        for (int j=0; j <= n; j++){\n            ans += dp[n+1][j];\n            ans %= mod;\n        }\n        System.out.println(ans);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1515E o = new CF1515E(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n\n        solve(s.nextInt(), s.nextLong());\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n=r.nextInt();\n        M=r.nextInt();\n        fac[0]=1;\n        ifac[0]=1;\n        p2[0]=1;\n        for(int i=1;i<=n;++i){\n            fac[i]=mul(fac[i-1],i);\n            ifac[i]=inv(fac[i]);\n            p2[i]=mul(p2[i-1],2);\n        }\n        int ans=0;\n        dp[0][0]=1;\n        for(int i=0;i<=n;++i){\n            for(int k=0;k<=i;++k){\n                for(int j=1;j<=n-i+1;++j){\n                    dp[i+j+1][k+j]=add(dp[i+j+1][k+j],mul(dp[i][k],mul(p2[j-1],bino(j+k,j))));\n                }\n            }\n        }\n        for(int i=0;i<=n+1;++i){\n            ans=add(ans,dp[n+1][i]);\n        }\n        pw.print(ans);\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\n\t\tString[] s2 = br.readLine().split(\" \");\n\n\t\tint n = (int) Long.parseLong(s2[0]);\n\t\tlong m = Long.parseLong(s2[1]);\n\t\tdp = new long[n + 2][n + 2];\n\t\tlong[] power = new long[n + 1];\n\t\tmod = m;\n\t\tlong[][] choose = new long[n + 2][n + 2];\n\t\tgetPow(power, n + 1);\n\t\tgetChoose(choose, n + 2, n + 2);\n\t\tdp[0][0] = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= i; j++) {\n\t\t\t\tfor (int k = 1; k + i <= n; k++) {\n\t\t\t\t//\tSystem.out.println((j + k) + \" \" + k + \" - \" + choose[j + k][k]);\n\t\t\t\t\tdp[i + k + 1][j\n\t\t\t\t\t\t\t+ k] = (dp[i + k + 1][j + k] + (((dp[i][j] * power[k - 1]) % mod) * choose[j + k][k]) % mod)\n\t\t\t\t\t\t\t\t\t% mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlong ans = 0;\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tans = (ans + dp[n + 1][i]) % mod;\n\t\t}\n\t\tpw.println(ans);\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        int t = 1;\n        while (t-- > 0) {\n            int n = sc.nextInt();\n            mod = sc.nextLong();\n            long res = 0;\n            initFac(n + 7);\n            long [] tpow = new long[n + 7];\n            long [][] combo = new long[n + 6][n + 6];\n            for (int i = 0; i <= n; i++) {\n                for (int j = 0; j <= i; j++) {\n                    if (j == 0 || j == i)\n                        combo[i][j] = 1;\n                    else\n                        combo[i][j] = (combo[i - 1][j - 1] + combo[i - 1][j]) % mod;\n                }\n            }\n            tpow[0] = 1;\n            for (int i = 1; i <= n + 6; i++) tpow[i] = (tpow[i - 1] * 2) % mod;\n            // dp[i][auto]\n            long [][] dp = new long[n + 1][n + 1];\n            for (int i = 1; i <= n; i++) dp[i][0] = tpow[i - 1];\n            for (int i = 3; i <= n; i++) {\n                for (int auto = 1; auto <= n / 2; auto++) {\n                    if (!check(i, auto)) continue;\n                    long total = 0;\n                    for (int j = i - 2; j >= 1; j--) {\n                        if (!check(j, auto - 1)) break;\n                        int len = i - j - 1;\n                        long ways = tpow[len - 1];\n                        int picked = j - (auto - 1);\n                        long interleave = combo[len + picked][picked];\n                        ways = (ways * interleave) % mod;\n                        ways = (ways * dp[j][auto - 1]) % mod;\n                        total = (total + ways) % mod;\n                    }\n                    dp[i][auto] = total;\n                    if (i == n) res = (res + dp[i][auto]) % mod;\n                }\n            }\n            res = (res + dp[n][0]) % mod;\n            out.println(res);\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong b = chars.length();\n\t\tint n = sc.nextInt();\n\t\tmod = sc.nextLong();\n\t\tif(n > 110) {\n\t\t\tchar[] s = vals[n-111].toCharArray();\n\t\t\tlong res = 0;\n\t\t\tfor(char c: s) {\n\t\t\t\tres *= b;\n\t\t\t\tres += chars.indexOf(c);\n\t\t\t\tres %= mod;\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t}\n\t\telse {\n\t\t\tc = new long[N+1][N+1];\n\t\t\tc[0][0] = 1;\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tc[i][0] = 1;\n\t\t\t\tfor(int j = 1; j <= i; j++){\n\t\t\t\t\tc[i][j] = (c[i-1][j] + c[i-1][j-1]) % mod;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdpcl = new long[N+1][N+1];\n\t\t\tdpop = new long[N+1][N+1];\n\t\t\tfor(int i = 0; i <= N; i++){\n\t\t\t\tfor(int j = 0; j <= N; j++){\n\t\t\t\t\tdpcl[i][j] = -1;\n\t\t\t\t\tdpop[i][j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j <= n-1; j++){\n\t\t\t\t\tfor(int a = 0; a <= j; a++) {\n\t\t\t\t\t\tlong leftv = dpop(i, a);\n\t\t\t\t\t\tlong rightv = dpop(n-i-1, j-a);\n\t\t\t\t\t\tlong curr = leftv * rightv % mod;\n\t\t\t\t\t\tlong fac = c[j][a];\n\t\t\t\t\t\tlong v = curr * fac % mod;\n\t\t\t\t\t\tres = (res + v) % mod;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        long M = sc.nextInt();\n        long fact[] = new long[n+1];\n        long inv[] = new long[n+1];\n        long ifact[] = new long[n+1];\n        long dp[][] = new long[n+1][n+1];\n        fact[1] = 1;\n        ifact[1] = 1;\n        ifact[0] = 1;\n        inv[1] = 1;\n        dp[1][1] = 1;\n        \n        for(int i = 2; i <= n; i++) {\n            fact[i] = (i*fact[i-1]) % M;\n            inv[i] = (inv[(int)(M % i)]*(M - M/i)) % M;\n            dp[i][i] = (dp[i-1][i-1] * 2) % M;\n            ifact[i] = (ifact[i-1]*inv[i]) % M;\n        }\n            \n        for(int i = 3; i <= n; i++) {\n            for(int j = i/2 + 1; j <= i-1; j++) {\n                for(int k = 2; k <= i-1 && j-k+1 > (i-k)/2; k++) {\n                    dp[i][j] = (dp[i][j] + ((((dp[k-1][k-1]*dp[i-k][j-k+1] % M)*fact[j] % M)*ifact[k-1] % M)*ifact[j-k+1] % M)) % M;   \n                }\n            }   \n        }\n        \n        long sum = 0;\n        for(int i = n/2 + 1; i <= n; i++)\n            sum = (sum + dp[n][i]) % M;\n        \n        System.out.println(sum % M);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] havish) throws Exception{\n\t\t// TODO Auto-generated method stub\n \t\tsc = new MyScanner();\n \t\tout = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tmod = sc.nextLong();\n\t\tlong[] fact = new long[401];\n\t\tlong[] twopowers = new long[401];\n\t\tfact[0] = 1;\n\t\ttwopowers[0] = 1;\n\t\tfor(int j = 1;j<=400;j++){\n\t\t\ttwopowers[j] = twopowers[j-1] * 2L;\n\t\t\ttwopowers[j] %= mod;\n\t\t\tfact[j] = fact[j-1] * j;\n\t\t\tfact[j] %= mod;\n\t\t}\n\t\tlong[][] choose = new long[401][401];\n\t\tfor(int j = 0;j<=400;j++){\n\t\t\tfor(int k = 0;k<=j;k++){\n\t\t\t\tchoose[j][k] = fact[j];\n\t\t\t\tchoose[j][k] *= inv(fact[k]);\n\t\t\t\tchoose[j][k] %= mod;\n\t\t\t\tchoose[j][k] *= inv(fact[j-k]);\n\t\t\t\tchoose[j][k] %= mod;\n\t\t\t}\n\t\t}\n\t\tlong[][] dp = new long[n+1][n+1]; //prefix, # of autos\n\t\tfor(int j = 1;j<=n;j++){\n\t\t\tdp[j][0] = twopowers[j-1];\n\t\t}\n\t\tfor(int k = 0;k<n;k++){  //number of autos\n\t\t\tfor(int j = 1;j<=n;j++){ //prefix\n\t\t\t\tif (k > j)\n\t\t\t\t\tcontinue;\n\t\t\t\tfor(int add = 2; j+add <= n; add++){\n\t\t\t\t\tlong prod = dp[j][k] * choose[j-k+add-1][add-1];\n\t\t\t\t\tprod %= mod;\n\t\t\t\t\tprod *= twopowers[add-2];\n\t\t\t\t\t\n\t\t\t\t\tdp[j+add][k+1] += prod;\n\t\t\t\t\tdp[j+add][k+1] %= mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlong ans = 0;\n\t\tfor(int s = 0;s<=n;s++){\n\t\t\tans+=dp[n][s];\n\t\t\tans %= mod;\n\t\t}\n\t\tout.println(ans);\n \t\tout.close();\n \t\t\n \t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception  {\n\n\t\tlog(400*400*400);\n\t\treader=new InputReader(System.in);\n\t\tint n=reader.readInt();\n\t\tmod=reader.readInt();\n\t\t\n\t\tSystem.out.println(solve(n));\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tint n = readInt(); m = readInt();\n\t\tlong[] fac = new long[n + 1], pow2 = new long[n + 1];\n\t\tlong[][] C = new long[n + 1][n + 1], dp = new long[n + 1][n + 1];\n\t\tfac[0] = pow2[0] = 1;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tfac[i] = i*fac[i - 1]%m;\n\t\t\tpow2[i] = 2*pow2[i - 1]%m;\n\t\t\tfor (int j = 0; j <= i; ++j)\n\t\t\t\tC[i][j] = fac[i]*(pow(fac[j], m - 2)*pow(fac[i - j], m - 2)%m)%m;\n\t\t}\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tdp[i][i] = pow2[i - 1];\n\t\t\tfor (int j = 0; j <= i; ++j)\n\t\t\t\tfor (int k = 1; i + k + 1 <= n; ++k)\n\t\t\t\t\tdp[i + k + 1][j + k] = (dp[i + k + 1][j + k] + dp[i][j]*(C[j + k][k]*pow2[k - 1]%m))%m;\n\t\t}\n\t\tlong ans = 0;\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tans = (ans + dp[n][i])%m;\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\t// TODO Auto-generated method stub\n\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tOutputStream outputStream = System.out;\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\t\n\t\tint T = 1;\n\t\tSolver A = new Solver(in, out); \n\t\t\n\t\tfor(int aa = 0; aa < T; aa++) {\n\t\t\tA.answer(aa + 1);\n\t\t}\n\t\t\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\treadInput();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Main().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new E2().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception  {\n\n\t\tlog(400*400*400);\n\t\treader=new InputReader(System.in);\n\t\tint n=reader.readInt();\n\t\tmod=reader.readInt();\n\t\t\n\t\tSystem.out.println(solve(n));\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n        // Start writing your solution here. -------------------------------------\n\n\n\n        /*fac = new long[nn + 1];\n        fac[1] = 1;\n        for(int i = 2; i <= nn; i++)\n            fac[i] = fac[i - 1] * i % MOD;*/\n\n\n        /*pow2 = new long[nn + 1];\n        pow2[0] = 1L;\n        for(int i = 1; i <= nn; i++)\n            pow2[i] = pow2[i - 1] * 2L;*/\n\n\n        /*inv = new long[nn + 1];\n        inv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            inv[i] = (MOD - MOD / i) * inv[(int)(MOD % i)] % MOD;*/\n\n        /*facInv = new long[nn + 1];\n        facInv[0] = facInv[1] = 1;\n        for (int i = 2; i <= nn; ++i)\n            facInv[i] = facInv[i - 1] * inv[i] % MOD;*/\n\n\n        /*numOfDiffDiv = new int[nn + 1];\n        for(int i = 2; i <= nn; i++)\n            if(numOfDiffDiv[i] == 0)\n                for(int j = i; j <= nn; j += i)\n                    numOfDiv[j] ++;*/\n\n        /*numOfDiv = new int[nn + 1];\n        numOfDiv[1] = 1;\n        for(int i = 2; i <= nn; i++) {\n            for(int j = 2; j * j <= i; j++) {\n                if(i % j == 0) {\n                    numOfDiv[i] = numOfDiv[i / j] + 1;\n                    break;\n                }\n            }\n        }*/\n\n        //primes = sieveOfEratosthenes(100001);\n\n        /*\n        int t = 1;\n        //t = sc.ni();\n        while(t-- > 0) {\n            //boolean res = solve();\n            //out.println(res ? \"YES\" : \"NO\");\n            long res = solve();\n            out.println(res);\n        }*/\n\n\n        int t = 1, tt = 0;\n        //t = sc.ni();\n        for(int i = 1; i <40000; i++) squares.add(i * i);\n        while(tt++ < t) {\n            boolean res = solve();\n            //out.println(\"Case #\" + tt + \": \" + res);\n            //out.println(res ? \"YES\" : \"NO\");\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\treadInput();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n//        Scanner sc = new Scanner(new FileInputStream(\"input\"));\n        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out));\n//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"output\"));\n\n        Runtime runtime = Runtime.getRuntime();\n        long usedMemoryBefore = runtime.totalMemory() - runtime.freeMemory();\n        TIME_START = System.currentTimeMillis();\n        Task t = new Task();\n        t.solve(sc, pw);\n        TIME_END = System.currentTimeMillis();\n        long usedMemoryAfter = runtime.totalMemory() - runtime.freeMemory();\n        pw.close();\n        System.err.println(\"Memory increased: \" + (usedMemoryAfter - usedMemoryBefore) / 1000000);\n        System.err.println(\"Time used: \" + (TIME_END - TIME_START) + \".\");\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        int N = scanner.nextInt();\n        int M = scanner.nextInt();\n        int K = scanner.nextInt();\n        int C = scanner.nextInt();\n        int D = scanner.nextInt();\n        MinCostMaxFlowSolver solver = new EdmondsKarp();\n        int[] people = new int[K];\n        for(int i = 0; i < K; i++) people[i] = scanner.nextInt()-1;\n        Node src = solver.addNode();\n        Node snk = solver.addNode();\n        int amt = 350;\n        Node[][] timeNodes = new Node[N][amt];\n        for(int i = 0; i < N; i++) {\n            for(int j = 1; j < amt; j++) {\n                timeNodes[i][j] = solver.addNode();\n                if (j > 1) solver.link(timeNodes[i][j-1], timeNodes[i][j], Integer.MAX_VALUE, 0);\n            }\n        }\n        for(int i = 0; i < K; i++) {\n            solver.link(src, timeNodes[people[i]][1], 1, 0);\n        }\n        for(int i = 1; i < amt; i++) {\n            for(int j = 0; j < K; j++) {\n                solver.link(timeNodes[0][i], snk, 1, C*i-C);\n            }\n        }\n        for(int i =0; i < M; i++) {\n            int a = scanner.nextInt()-1;\n            int b = scanner.nextInt()-1;\n            for(int j = 1; j < amt-1; j++) {\n                int prev = 0;\n                for(int k = 1; k <= K; k++) {\n                    solver.link(timeNodes[a][j], timeNodes[b][j + 1], 1, D*k*k- prev);\n                    solver.link(timeNodes[b][j], timeNodes[a][j + 1], 1, D*k*k - prev);\n                    prev = D * k * k;\n                }\n            }\n        }\n        long[] ret = solver.getMinCostMaxFlow(src, snk);\n        out.println(ret[1]);\n        out.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new G().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.flush();out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.flush();out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new G().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        int N = scanner.nextInt();\n        int M = scanner.nextInt();\n        int K = scanner.nextInt();\n        int C = scanner.nextInt();\n        int D = scanner.nextInt();\n        MinCostMaxFlowSolver solver = new EdmondsKarp();\n        int[] people = new int[K];\n        for(int i = 0; i < K; i++) people[i] = scanner.nextInt()-1;\n        Node src = solver.addNode();\n        Node snk = solver.addNode();\n        int amt = 150;\n        Node[][] timeNodes = new Node[N][amt];\n        for(int i = 0; i < N; i++) {\n            for(int j = 1; j < amt; j++) {\n                timeNodes[i][j] = solver.addNode();\n                if (j > 1) solver.link(timeNodes[i][j-1], timeNodes[i][j], Integer.MAX_VALUE, 0);\n            }\n        }\n        for(int i = 0; i < K; i++) {\n            solver.link(src, timeNodes[people[i]][1], 1, 0);\n        }\n        for(int i = 1; i < amt; i++) {\n            for(int j = 0; j < K; j++) {\n                solver.link(timeNodes[0][i], snk, 1, C*i-C);\n            }\n        }\n        for(int i =0; i < M; i++) {\n            int a = scanner.nextInt()-1;\n            int b = scanner.nextInt()-1;\n            for(int j = 1; j < amt-1; j++) {\n                int prev = 0;\n                for(int k = 1; k <= K; k++) {\n                    solver.link(timeNodes[a][j], timeNodes[b][j + 1], 1, D*k*k- prev);\n                    solver.link(timeNodes[b][j], timeNodes[a][j + 1], 1, D*k*k - prev);\n                    prev = D * k * k;\n                }\n            }\n        }\n        long[] ret = solver.getMinCostMaxFlow(src, snk);\n        out.println(ret[1]);\n        out.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1187G o = new CF1187G(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] Args) throws Exception {\n\t     Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n\t     int n,m,k;\n\t     Integer lx,ly;\n\t     boolean d[][];\n\t     n = sc.nextInt(); m = sc.nextInt(); k = sc.nextInt();\n\t     d = new boolean [n+1][m+1];\n\t     for(int i=0;i<=n;++i)\n\t      for(int j=0;j<=m;++j)\n\t       d[i][j]=false;\n\t     \n\t     Queue< pair > q = new LinkedList< pair >();\n\t     lx = ly = -1;\n\t     for(int i=0;i<k;++i){\n\t     \tint x,y; x = sc.nextInt(); y = sc.nextInt();\n\t     \tq.add(new pair(x,y)); lx = x; ly = y;\n\t     \td[x][y]=true;\n\t     }\n\t     \n\t     int dx [] = {0,0,1,-1};\n\t     int dy [] = {-1,1,0,0};\n\t     \n\t     \n\t     while(!q.isEmpty()){\n\t     \t pair tp = q.remove();\n\t     \t int x = tp.x; int y = tp.y;\n\t     \t for(int i=0;i<4;++i){\n\t     \t \t int nx = x+dx[i]; int ny = y+dy[i];\n\t     \t \t if(nx<1 || nx>n || ny<1 || ny>m || d[nx][ny] ) continue;\n\t     \t     d[nx][ny]=true;\n\t     \t     q.add(new pair(nx,ny));\n\t     \t     lx = nx; ly = ny;\n\t     \t }\n\t     }\n\t     FileWriter fw = new FileWriter(\"output.txt\");\n\t     fw.write(lx.toString()); fw.write(\" \"); fw.write(ly.toString());;\n\t     fw.flush();\n\t     \t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream;\n\t\ttry {\n\t\t\tinputStream = new FileInputStream(\"input.txt\");\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tOutputStream outputStream;\n\t\ttry {\n\t\t\toutputStream = new FileOutputStream(\"output.txt\");\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tScanner sc = new Scanner(new File(\"input.txt\"));\n\t\tPrintWriter output = new PrintWriter(\"output.txt\");\n\t\tint N = sc.nextInt();\n\t\tint M = sc.nextInt();\n\t\tint K = sc.nextInt();\n\t\tint[] x = new int[K];\n\t\tint[] y = new int[K];\n\t\tfor(int i = 0 ; i < K ; i++){\n\t\t\tx[i] = sc.nextInt();\n\t\t\ty[i] = sc.nextInt();\n\t\t}\n\t\tint max = -1, max_x = -1, max_y = -1;\n\t\tfor(int i = 1 ; i <= N ; i++){\n\t\t\tfor(int j = 1 ; j <= M ; j++){\n\t\t\t\tint min = Integer.MAX_VALUE;\n\t\t\t\tfor(int k = 0 ; k < K ; k++){\n\t\t\t\t\tmin = Math.min(min, Math.abs(x[k] - i) + Math.abs(y[k] - j));\n\t\t\t\t}\n\t\t\t\tif(min > max){\n\t\t\t\t\tmax = min;\n\t\t\t\t\tmax_x = i;\n\t\t\t\t\tmax_y = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toutput.println(max_x + \" \" + max_y);\n\t\toutput.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException\n        in = new FastReader();\n        out = new PrintWriter(new File(\"output.txt\"));\n        solve();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader readData = new BufferedReader(new FileReader(\"input.txt\"));\n\t\tPrintWriter writer = new PrintWriter(new File(\"output.txt\"));\n\t\tString line = readData.readLine();\n\t\tString[] temp = line.split(\" \");\n\t\tint n = Integer.valueOf(temp[0]);\n\t\tint m = Integer.valueOf(temp[1]);\n\t\tint x = 0, y = 0;\n\t\tline = readData.readLine();\n\t\tint k = Integer.valueOf(line);\n\t\tboolean[][] visited = new boolean[n + 1][m + 1];\n\t\tQueue<Integer> qX = new LinkedList<Integer>();\n\t\tQueue<Integer> qY = new LinkedList<Integer>();\n\t\tline = readData.readLine();\n\t\tString[] temp2 = line.split(\" \");\n\t\tfor (int i = 0; i < temp2.length - 1; i+=2) {\n\t\t\tx = Integer.valueOf(temp2[i]);\n\t\t\ty = Integer.valueOf(temp2[i + 1]);\n\t\t\tvisited[x][y] = true;\n\t\t\tqX.add(x);\n\t\t\tqY.add(y);\n\t\t}\n\n\t\twhile (!qX.isEmpty()) {\n\t\t\tx = qX.poll();\n\t\t\ty = qY.poll();\n\t\t\tif (x >= 2 && !visited[x - 1][y]) {\n\t\t\t\tvisited[x - 1][y] = true;\n\t\t\t\tqX.add(x - 1);\n\t\t\t\tqY.add(y);\n\t\t\t}\n\t\t\tif (x + 1 <= n && !visited[x + 1][y]) {\n\t\t\t\tvisited[x + 1][y] = true;\n\t\t\t\tqX.add(x + 1);\n\t\t\t\tqY.add(y);\n\t\t\t}\n\t\t\tif (y >= 2 && !visited[x][y - 1]) {\n\t\t\t\tvisited[x][y - 1] = true;\n\t\t\t\tqX.add(x);\n\t\t\t\tqY.add(y - 1);\n\t\t\t}\n\t\t\tif (y + 1 <= m && !visited[x][y + 1]) {\n\t\t\t\tvisited[x][y + 1] = true;\n\t\t\t\tqX.add(x);\n\t\t\t\tqY.add(y + 1);\n\t\t\t}\n\t\t}\n\t\twriter.write(x + \" \");\n\t\twriter.write(y + \" \");\n\t\twriter.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new FileReader(new File(\"input.txt\")));\n\t\tPrintWriter pw = new PrintWriter(new File(\"output.txt\"));\n\n\t\tStringTokenizer st;\n\n\t\tst = new StringTokenizer(in.readLine());\n\t\t\n\t\tint n = Integer.parseInt(st.nextToken()),\n\t\t\tm = Integer.parseInt(st.nextToken()),\n\t\t\tk = Integer.parseInt(in.readLine());\n\t\t\n\t\tint[][] A = new int[n][m];\n\t\t\n\t\tst = new StringTokenizer(in.readLine());\n\t\tfor (int i = 0 ; i < k ; i++) {\n\t\t\tint x1 = Integer.parseInt(st.nextToken()) - 1,\n\t\t\t\ty1 = Integer.parseInt(st.nextToken()) - 1;\n\t\t\t\n\t\t\tA[x1][y1] = -10000000;\n\t\t\t\n\t\t\tfor (int j = 0 ; j < n ; j++) {\n\t\t\t\tfor (int g = 0 ; g < m ; g++) {\n\t\t\t\t\tif (A[j][g] == 0 || (A[j][g] > (Math.abs(y1 - g) + Math.abs(x1 - j)))) {\n\t\t\t\t\t\tA[j][g] = (Math.abs(y1 - g) + Math.abs(x1 - j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint f = 0, h = 0;\n\t\t\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tfor (int j = 0 ; j < m ; j++) {\n\t\t\t\tif (A[i][j] != -10000000) {\n\t\t\t\t\tf = i;\n\t\t\t\t\th = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tfor (int j = 0 ; j < m ; j++) {\n\t\t\t\tif (A[i][j] > A[f][h] && A[i][j] != -10000000) {\n\t\t\t\t\tf = i;\n\t\t\t\t\th = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t//\tfor (int i = 0 ; i < n ; i++) for (int j = 0 ; j < m ; j++) System.out.println(A[i][j]);\n\t\tpw.println((f + 1) + \" \" + (h + 1));\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        // InputStreamReader stream = new InputStreamReader(System.in);\n        // BufferedReader input = new BufferedReader(stream);\n\n        BufferedReader input = new BufferedReader(new FileReader(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n\n        StringTokenizer dataR = new StringTokenizer(input.readLine());\n        N = Integer.parseInt(dataR.nextToken());\n        M = Integer.parseInt(dataR.nextToken());\n        burning = new boolean[N+1][M+1];\n\n        StringTokenizer dataR1 = new StringTokenizer(input.readLine());\n        int K = Integer.parseInt(dataR1.nextToken());\n\n        StringTokenizer dataR2 = new StringTokenizer(input.readLine());\n        LitTrees = new LinkedList<int[]>();\n        for (int j = 0; j < K; j++){\n            int x = Integer.parseInt(dataR2.nextToken());\n            int y = Integer.parseInt(dataR2.nextToken());\n            int[] coord = {x, y};\n            LitTrees.add(coord);\n            burning[x][y] = true;\n        }\n\n        spread();\n\n        out.println(lastTree[0] + \" \" + lastTree[1]);\n        out.close();\n\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner();\n\t\tint n = in.nextInt() ; \n\t\tint m = in.nextInt(); \n\t\tint k = in.nextInt(); \n\t\tint x[] = new int[k] ; \n\t\tint y[] = new int[k] ; \n\t\tint trees [][] = new int [n][m] ;\n\n\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t\ttrees[i][j]=Integer.MAX_VALUE ;\n\n\t\tfor (int i = 0; i < k; i++)\n\t\t{\n\t\t\tx[i]=in.nextInt()-1; \n\t\t\ty[i]=in.nextInt()-1;\n\t\t\ttrees[x[i]][y[i]]=0 ;\n\t\t}\n\n\t\tint dis = Integer.MIN_VALUE ; ;\n\t\tint xp=0; ;\n\t\tint yp=0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t\tif(trees[i][j] != 0)\n\t\t\t\t\tfor (int j2 = 0; j2 < k; j2++)\n\t\t\t\t\t\ttrees[i][j]=Math.min(trees[i][j], Math.abs(i-x[j2])+Math.abs(j-y[j2]));\n\n\t\tfor (int i = 0; i <n; i++)\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t\tif(trees[i][j] > dis)\n\t\t\t\t{\n\t\t\t\t\tdis=trees[i][j];\n\t\t\t\t\txp=i+1;\n\t\t\t\t\typ=j+1;\n\t\t\t\t}\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\n\t\tout.printf(\"%d %d\\n\", xp ,yp);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry{\n\t\t\tFile file = new File(\"input.txt\");\n\t\t\tScanner sc = new Scanner(file);\n\t\t\tString s = sc.nextLine();\n\t\t\tString[] seperatedd = s.split(\" \");\n\t\t\tint x = Integer.parseInt(seperatedd[0]);\n\t\t\tint y = Integer.parseInt(seperatedd[1]);\n\t\t\tint[][] grid = new int[x][y];\n\t\t\tfor(int i = 0; i < x; i++)\n\t\t\t{\n\t\t\t\tfor(int j = 0; j < y; j++)\n\t\t\t\t{\n\t\t\t\t\tgrid[i][j] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\ts = sc.nextLine();\n\t\t\tint z = Integer.parseInt(s);\n\t\t\tLinkedList<Point> BFS = new LinkedList<Point>();\n\t\t\ts = sc.nextLine();\n\t\t\tString[] seperated = s.split(\" \");\n\t\t\tfor(int i = 0; i < seperated.length; i = i + 2)\n\t\t\t{\n\t\t\t\tPoint temp = new Point();\n\t\t\t\ttemp.x = Integer.parseInt(seperated[i])-1;\n\t\t\t\ttemp.y = Integer.parseInt(seperated[i+1])-1;\n\t\t\t\tgrid[temp.x][temp.y] = 1;\n\t\t\t\tBFS.addLast(temp);\n\t\t\t}\n\t\t\twhile(!BFS.isEmpty())\n\t\t\t{\n\t\t\t\tPoint temp = new Point();\n\t\t\t\ttemp = BFS.removeFirst();\n\t\t\t \tint\tk = temp.x;\n\t\t\t \tint l = temp.y;\n\t\t\t\t\n\t\t\t\tif(!(l+1 >= y || grid[k][l+1] == 1))\n\t\t\t\t{\n\t\t\t\t\tPoint temp1 = new Point();\n\t\t\t\t\ttemp1.x = k;\n\t\t\t\t\ttemp1.y = l+1;\n\t\t\t\t\tgrid[temp1.x][temp1.y] = 1;\n\t\t\t\t\tBFS.addLast(temp1);\n\t\t\t\t}\n\t\t\t\tif(!(k+1 >= x || grid[k+1][l] == 1))\n\t\t\t\t{\n\t\t\t\t\tPoint temp1 = new Point();\n\t\t\t\t\ttemp1.x = k+1;\n\t\t\t\t\ttemp1.y = l;\n\t\t\t\t\tgrid[temp1.x][temp1.y] = 1;\n\t\t\t\t\tBFS.addLast(temp1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\tif(!(l-1 < 0 || grid[k][l-1] == 1))\n\t\t\t\t{\n\t\t\t\t\tPoint temp1 = new Point();\n\t\t\t\t\ttemp1.x = k;\n\t\t\t\t\ttemp1.y = l-1;\n\t\t\t\t\tgrid[temp1.x][temp1.y] = 1;\n\t\t\t\t\tBFS.addLast(temp1);\n\t\t\t\t}\n\t\t\t\tif(!(k-1 < 0 || grid[k-1][l] == 1))\n\t\t\t\t{\n\t\t\t\t\tPoint temp1 = new Point();\n\t\t\t\t\ttemp1.x = k-1;\n\t\t\t\t\ttemp1.y = l;\n\t\t\t\t\tgrid[temp1.x][temp1.y] = 1;\n\t\t\t\t\tBFS.addLast(temp1);\n\t\t\t\t}\n\t\t\t\tif(BFS.isEmpty())\n\t\t\t\t{\n\t\t\ttry {\n\t\t\t\t\t\tFile fil = new File(\"output.txt\");\n\t\t\t\t\t\tPrintWriter out = new PrintWriter(fil);\n\t\t\t\t\t\tint v1 = (int)temp.getX() + 1;\n\t\t\t\t\t\tint v2 = (int)temp.getY() + 1;\n\t\t\t\t\t\tout.println(v1 + \" \" + v2); \n\t\t\t\t        out.close();\t\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tSystem.out.println(\"nbvnb\");\n\t\t}\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\t// TODO Auto-generated method stub\n\n\t\tFireAgain F = new FireAgain();\n\t\t Scanner in = new Scanner (new FileReader(\"input.txt\"));\n\t\t F.out = new PrintStream(new File(\"output.txt\"));\n\t\n\t\tF.x = in.nextInt();\n\t\tF.y = in.nextInt();\n\n\t\tint l = 0;\n\t\tF.vis = new boolean[F.x + 1][F.y + 1];\n\n\t\tint k = in.nextInt();\n\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tPoint P = new Point(in.nextInt(), in.nextInt());\n\t\t\tF.vis[P.x][P.y] = true; // add in set\n\t\t\tF.q.add(P);\n\t\t}\n\n\t\tF.bfs(F.q.peek());\n\n\t}\n", "complexity": "cubic"}
{"code": "\t\t\t\tpublic static void main(String[] args) throws Exception {\n\t\t\t    \tnew Thread(null, new Runnable() {\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\tsoln();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tSystem.out.println(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, \"1\", 1 << 26).start();\n\t\t\t\t\t\n\t\t\t\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(new FileReader(\"input.txt\")); // new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(\"output.txt\"); //new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int fuck = 2001;\n\n\t\tScanner in = new Scanner(new File(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t\tint n = in.nextInt(), m = in.nextInt();\n\t\tint[] D = new int[ fuck*fuck ], Q = new int[ fuck*(fuck + 1) ],\n\t\t\tdx = new int[] { 1, -1, 0, 0},\n\t\t\tdy = new int[] { 0, 0, -1, 1};\n\t\tArrays.fill(D, -1);\n\t\tint H = -1, T = 0;\n\n\t\tint k = in.nextInt(), ans = 0;\n\t\tfor(int i = 0; i < k; ++i) {\n\t\t\tint x = in.nextInt(), y = in.nextInt();\n\t\t\tD[x * fuck + y] = 0;\n\n\t\t\t++H; H %= Q.length;\n\t\t\tans = Q[H] = x * fuck + y;\n\t\t}\n\t\t\n\t\twhile(H >= T) {\n\t\t\tint idx = Q[T++]; T %= Q.length;\n\t\t\tint x = idx / fuck, y = idx % fuck;\n\t\t\tfor(int i = 0; i < 4; ++i) {\n\t\t\t\tint wtf = (dx[i] + x) * fuck + (dy[i] + y);\n\t\t\t\tif(dx[i] + x <= n && dx[i] + x >= 1 && dy[i] + y <= m && dy[i] + y >= 1 && D[wtf] == -1) {\n\t\t\t\t\tD[wtf] = D[idx] + 1;\n\t\t\t\t\t++H; H %= Q.length;\n\t\t\t\t\tQ[H] = wtf;\n\n\t\t\t\t\tif(D[wtf] >= D[ans])\n\t\t\t\t\t\tans = wtf;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tout.println((ans / fuck) + \" \" + (ans % fuck));\n\t\tout.close();\n\t\tin.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tScanner in = new Scanner(\"input.txt\");\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\tn=in.nextInt();\n\t\tm=in.nextInt();\n\t\tburned=new boolean[n][m];\n\t\tint k=in.nextInt();\n\t\tSet<Pair> set=new HashSet<Pair>();\n\t\tPair prev=null;\n\t\tfor(int i=0;i<k;i++)\n\t\t{\n\t\t\tint x=in.nextInt();\n\t\t\tint y=in.nextInt();\n\t\t\tburned[x-1][y-1]=true;\n\t\t\tset.add(prev=new Pair(x-1, y-1));\n\t\t}\n\t\twhile(!set.isEmpty())\n\t\t{\n\t\t\tSet<Pair> tempset=new HashSet<>();\n\t\tfor(Pair p : set)\n\t\t{\n\t\t\tint x=p.x;\n\t\t\tint y=p.y;\n\t\t\tprev=p;\n\t\t\tfor(int i=0;i<4;i++)\n\t\t\t{\n\t\t\t\tif(isvalid(x+dx[i], y+dy[i])&&!burned[x+dx[i]][y+dy[i]])\n\t\t\t\t{\n\t\t\t\t\ttempset.add(new Pair(x+dx[i], y+dy[i]));\n\t\t\t\t\tburned[x+dx[i]][y+dy[i]]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tset=tempset;\n\t\t}\n\t\tout.printf(\"%d %d\\n\",(prev.x+1),(prev.y+1));\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tnew Main().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Solution();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main (String []args) throws FileNotFoundException{\n        new P35C();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new TaskC().start();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner scn = new Scanner(new File(\"input.txt\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\")); \n        \n        int r = scn.nextInt();\n        int c = scn.nextInt();\n        \n        int[][] a = new int[r][c];\n        \n        for(int[] i: a)\n            Arrays.fill(i, 1<<30);\n        \n        int k = scn.nextInt();\n            \n        Queue<State> q = new LinkedList<State>();\n        for(int l = 0; l < k; l++){\n            int i = scn.nextInt()-1;\n            int j = scn.nextInt()-1;\n        \n            a[i][j] = 0;\n            q.add(new State(i, j, 0));\n        }\n        \n        while(!q.isEmpty()){\n            State st = q.poll();\n            \n            a[st.i][st.j] = st.c;\n            \n            for(int d = 0; d < 4; d++){\n                int ii = st.i + di[d];\n                int jj = st.j + dj[d];\n                \n                if(ii < 0 || ii >= r || jj < 0 || jj >= c)continue;\n                if(a[ii][jj] != 1 << 30)continue;\n                \n                a[ii][jj] = st.c+1;\n                q.add(new State(ii, jj, st.c+1));\n            }\n        }\n        \n        int max = 0;\n        for(int i = 0; i < r; i++)\n            for(int j = 0; j < c; j++)\n                max = Math.max(max, a[i][j]);\n        \n        for(int i = 0; i < r; i++)\n            for(int j = 0; j < c; j++)\n                if(a[i][j] == max){\n//                  System.out.println(i+1 + \" \" + (j+1));\n                    out.write((i+1)+\" \"+(j+1));\n                    out.newLine();\n                    \n                    out.close();\n                    \n                    return;\n                }\n        \n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException{\n        BufferedReader f = new BufferedReader(new FileReader(\"input.txt\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n\n        StringTokenizer st1 = new StringTokenizer(f.readLine());\n        int n = Integer.parseInt(st1.nextToken());\n        int m = Integer.parseInt(st1.nextToken());\n\n        boolean[][] visited = new boolean[n][m];\n\n        int k = Integer.parseInt(f.readLine());\n        LinkedList<state1> ll = new LinkedList<state1>();\n        StringTokenizer st = new StringTokenizer(f.readLine());\n        for(int i = 0; i < k; i++) {\n            int x = Integer.parseInt(st.nextToken());\n            int y = Integer.parseInt(st.nextToken());\n\n            ll.add(new state1(x - 1, y - 1));\n            visited[x - 1][y - 1] = true;\n        }\n\n        int lastx = 1;\n        int lasty = 1;\n        while(!ll.isEmpty()) {\n            state1 focus = ll.remove();\n            lastx = focus.x+1;\n            lasty = focus.y+1;\n\n            //System.out.println(lastx + \" \" + lasty);\n\n            visited[focus.x][focus.y] = true;\n            if(focus.x+1 < n && !visited[focus.x+1][focus.y]) {\n                ll.add(new state1(focus.x+1, focus.y));\n                visited[focus.x+1][focus.y] = true;\n            }\n            if(focus.x-1 >= 0 && !visited[focus.x-1][focus.y]) {\n                ll.add(new state1(focus.x-1, focus.y));\n                visited[focus.x-1][focus.y] = true;\n            }\n            if(focus.y+1 < m && !visited[focus.x][focus.y+1]) {\n                ll.add(new state1(focus.x, focus.y+1));\n                visited[focus.x][focus.y+1] = true;\n            }\n            if(focus.y-1 >= 0 && !visited[focus.x][focus.y-1]) {\n                ll.add(new state1(focus.x, focus.y-1));\n                visited[focus.x][focus.y-1] = true;\n            }\n        }\n        out.println(lastx + \" \" + lasty);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc = new Scanner(new File(\"input.txt\"));\n        n = sc.nextInt();\n        m = sc.nextInt();\n        int k = sc.nextInt();\n        fire = new boolean[n][m];\n        Queue<Pos> q = new LinkedList<Pos>();\n        for (int i = 0; i < k; i++) {\n            int x = sc.nextInt();\n            int y = sc.nextInt();\n            q.add(new Pos(x - 1, y - 1));\n            fire[x - 1][y - 1] = true;\n        }\n        int[] di = new int[] { 1, -1, 0, 0 };\n        int[] dj = new int[] { 0, 0, 1, -1};\n        Pos last = null;\n        while (q.size() > 0) {\n            Pos pos = q.poll();\n            last = pos;\n            for (int kk = 0; kk < 4; kk++) {\n                int ni = pos.i + di[kk];\n                int nj = pos.j + dj[kk];\n                if (ni >= 0 && nj >= 0 && ni < n && nj < m) {\n                    if (!fire[ni][nj]) {\n                        fire[ni][nj] = true;\n                        q.add(new Pos(ni, nj));\n                    }\n                }\n            }\n        }\n        PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n        out.println((last.i + 1) + \" \" + (last.j + 1));\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream;\n\t\ttry {\n\t\t\tinputStream = new FileInputStream(\"input.txt\");\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tOutputStream outputStream;\n\t\ttry {\n\t\t\toutputStream = new FileOutputStream(\"output.txt\");\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tPandaScanner in = new PandaScanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tC solver = new C();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws NumberFormatException, IOException \n        Scanner sc = new Scanner(new File(\"input.txt\"));\n        \n        int n = sc.nextInt();\n        int m =sc.nextInt();\n        sc.nextLine();\n        int k =sc.nextInt();\n        int les[][] = new int[n][m];\n        PrintWriter out = new PrintWriter(new FileWriter(\"output.txt\")); \n        //sc.nextLine();\n        ArrayList<Integer[]> list = new ArrayList();\n        sc.nextLine();\n        for(int i = 0;i<k;i++)\n        {\n            \n            Integer[] ii = new Integer[2];\n            ii[0] = sc.nextInt()-1;\n            ii[1] = sc.nextInt()-1;\n            list.add(ii);\n            \n        }\n        sc.close(); \n        int maxr = 0;\n        int maxi = 0;\n        int maxj = 0;\n        for(int i = 0;i<n;i++)\n        {\n            for(int j = 0;j<m;j++)\n            {\n                int minr = 100000;\n                int mini = 0;\n                int minj = 0;\n                for(int f = 0;f<k;f++)\n                {\n                    Integer[] ii = list.get(f);\n                    int ww = Math.abs(ii[0] - i);\n                    int hh = Math.abs(ii[1] - j);\n                    int r = ww+hh;\n                    if(r<minr)\n                    {\n                        minr = r;\n                        mini=i;\n                        minj=j;\n                    }\n                    \n                }\n                if(maxr<minr&&minr<100000)\n                {\n                    maxi = mini;\n                    maxj = minj;\n                    maxr = minr;\n                }\n            }\n        }\n        \n        out.print((maxi+1)+\" \"+(maxj+1));\n        out.close();\n        \n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws Exception{\n\t\tScanner in = new Scanner(new FileReader(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\n\t\tint N = in.nextInt();\n\t\tint M = in.nextInt();\n\t\tint K = in.nextInt();\n\n\t\tint[] X = new int[K], Y = new int[K];\n\t\tfor (int i = 0; i < K; i++){\n\t\t\tX[i] = in.nextInt();\n\t\t\tY[i] = in.nextInt();\n\t\t}\n\n\t\tint d = -1;\n\t\tint a = -1; int b = -1;\n\t\tfor (int i = 1; i <= N; i++)\n\t\t\tfor (int j = 1; j <= M; j++){\n\t\t\t\tint h = Integer.MAX_VALUE;\n\t\t\t\tfor (int p = 0; p < K; p++)\n\t\t\t\t\th = Math.min(h,Math.abs(i-X[p]) + Math.abs(j-Y[p]));\n\t\t\t\tif (h > d){\n\t\t\t\t\td = h; a = i; b = j;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\tout.print(a + \" \" + b);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "cubic"}
{"code": "   public static void main(String[] args) throws Exception\n      new C(new Scanner(new File(\"input.txt\")), new PrintWriter(\"output.txt\"));\n   }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        try(BufferedReader in = new BufferedReader(new FileReader(\"input.txt\"));\n                BufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\")))\n        {\n            StringTokenizer s = new StringTokenizer(in.readLine());\n            n = Integer.parseInt(s.nextToken());\n            m = Integer.parseInt(s.nextToken());\n            k = Integer.parseInt(in.readLine());\n            visited = new boolean[n][m];\n            q = new LinkedList <>();\n            s = new StringTokenizer(in.readLine());\n            for(int i=0;i<k;i++){\n                int x = Integer.parseInt(s.nextToken());\n                int y = Integer.parseInt(s.nextToken());\n                q.add(new Pair(--x,--y));\n            }\n            bfs();\n            String ans = \"\" + (result.x+1) +\" \"+ (result.y+1);\n            out.write(ans);\n        }catch(IOException e){\n\n        }\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\t// TODO Auto-generated method stub\n\t\tScanner scan = new Scanner(\"input.txt\");\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\t\n\t\tint n,m;\n\t\tn = scan.nextInt();\n\t\tm = scan.nextInt();\n\n\t\tboolean visited[][] = new boolean[n][m];\n    \n\t\tint numOfStartingPoints;\n\t\tnumOfStartingPoints = scan.nextInt();\n\t\t    \t\t\n\t\tint resX = 0, resY = 0;\n\t\t\n\t\tQueue<Point> que = new LinkedList<Point>();\n\t\tfor (int i = 0; i < numOfStartingPoints; i++) {\n\t\t\tint x = scan.nextInt() - 1;\n\t\t\tint y = scan.nextInt() - 1;\n\t\t\tque.add(new Point(x, y));\n\t\t\tvisited[x][y] = true;\n\t\t}\n\t\t\n\t\twhile (true) {\n\t\t\tPoint current = que.poll();\n\n\t\t\tif (current == null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tresX = current.x;\n\t\t\t\tresY = current.y;\n\t\t\t\t\n\t\t\t\tif (current.x + 1 < n && !visited[current.x + 1][current.y])\n\t\t\t\t{\n\t\t\t\t\tque.add(new Point(current.x + 1, current.y));\n\t\t\t\t\tvisited[current.x + 1][current.y] = true;\n\n\n\t\t\t\t}\n\t\t\t\tif (current.y + 1 < m && !visited[current.x][current.y + 1])\n\t\t\t\t{\n\t\t\t\t\tque.add(new Point(current.x, current.y + 1));\n\t\t\t\t\tvisited[current.x][current.y + 1] = true;\n\t\t\n\n\t\t\t\t}\n\t\t\t\tif (current.x - 1 >= 0 && !visited[current.x - 1][current.y])\n\t\t\t\t{\n\t\t\t\t\tque.add(new Point(current.x - 1, current.y));\n\t\t\t\t\tvisited[current.x - 1][current.y] = true;\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (current.y - 1 >= 0 && !visited[current.x][current.y - 1])\n\t\t\t\t{\n\t\t\t\t\tque.add(new Point(current.x, current.y - 1));\n\t\t\t\t\tvisited[current.x][current.y - 1] = true;\n\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tout.printf(\"%d %d\\n\", ++resX, ++resY);\n\t\tout.close();\n\t\t    \n\t}\n", "complexity": "cubic"}
{"code": "  public static void main(String... args) throws Exception {\n    br = new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\")));\n    pw = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\"output.txt\")));\n    new P35C().run();\n    br.close();\n    pw.close();\n    System.err.println(\"\\n[Time : \" + (System.currentTimeMillis() - startTime) + \" ms]\");\n  }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)throws FileNotFoundException,IOException{\n\t\tFile file = new File(\"input.txt\");\n\t\tScanner sc = new Scanner(file);\n\t\tFile outFile = new File(\"output.txt\");\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(outFile)));\n\n\t\tint w = sc.nextInt();\n\t\tint h = sc.nextInt();\n\t\tboolean[][] map = new boolean[h+1][w+1]; //false:�u�G�v���ĂȂ�\n\n\t\tint x = -1, y = -1;\n\t\tQueue<Point> open = new LinkedList<Point>();\n\t\tint k = sc.nextInt();\n\t\tfor(int i=0;i<k;i++){\n\t\t\tint tx = sc.nextInt();\n\t\t\tint ty = sc.nextInt();\n\t\t\tmap[ty][tx] = true;\n\t\t\tx = tx;\n\t\t\ty = ty;\n\t\t\topen.add(new Point(x,y));\n\t\t}\n\n\t\tint dx[] = {1,-1,0,0};\n\t\tint dy[] = {0,0,1,-1};\n\t\twhile(!open.isEmpty()){\n\t\t\tPoint p = open.poll();\n\n\t\t\tfor(int i=0;i<4;i++){\n\t\t\t\tint nx = p.x + dx[i];\n\t\t\t\tint ny = p.y + dy[i];\n\n\t\t\t\tif(nx>0 && nx<=w && ny>0 && ny<=h && !map[ny][nx]){\n\t\t\t\t\tmap[ny][nx] = true;\n\t\t\t\t\tx = nx;\n\t\t\t\t\ty = ny;\n\t\t\t\t\topen.add(new Point(nx,ny));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpw.println(x + \" \" + y);\n\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "  public static void main(String... args) throws Exception {\n    br = new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\")));\n    pw = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\"output.txt\")));\n    new P35C().run();\n    br.close();\n    pw.close();\n    System.err.println(\"\\n[Time : \" + (System.currentTimeMillis() - startTime) + \" ms]\");\n  }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\t// TODO Auto-generated method stub\n\t\tFireAgain fa = new FireAgain();\n\t\tScanner Scan = new Scanner(new FileInputStream(\"input.txt\"));\n\t\tfa.out = new PrintStream(new File(\"output.txt\"));\n\t\tfa.n = Scan.nextInt();\n\t\tfa.m = Scan.nextInt();\n\t\tint k = Scan.nextInt();\n\t\tfa.arr = new boolean[2001][2001];\n\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tfa.coordinate = new Point();\n\t\t\tfa.coordinate.x = Scan.nextInt();\n\t\t\tfa.coordinate.y = Scan.nextInt();\n\t\t\tfa.q.add(fa.coordinate);\n\t\t\tfa.arr[fa.coordinate.x][fa.coordinate.y] = true;\n\t\t}\n\n\t\tfa.bfs(fa.q.peek());\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int fuck = 2001;\n\n\t\tScanner in = new Scanner(new File(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\n\t\tint n = in.nextInt(), m = in.nextInt();\n\t\tint[] D = new int[ fuck*fuck ],\n\t\t\tdx = new int[] { 1, -1, 0, 0},\n\t\t\tdy = new int[] { 0, 0, -1, 1};\n\t\tArrays.fill(D, -1);\n\n\t\tArrayDeque<Integer> Q = new ArrayDeque<>();\n\t\tint k = in.nextInt(), ans = 0;\n\t\tfor(int i = 0; i < k; ++i) {\n\t\t\tint x = in.nextInt(), y = in.nextInt();\n\t\t\tD[ans = (x * fuck + y)] = 0;\n\t\t\tQ.offer(ans);\n\t\t}\n\t\t\n\t\twhile(!Q.isEmpty()) {\n\t\t\tint idx = Q.poll();\n\t\t\tint x = idx / fuck, y = idx % fuck;\n\t\t\tfor(int i = 0; i < 4; ++i) {\n\t\t\t\tint wtf = (dx[i] + x) * fuck + (dy[i] + y);\n\t\t\t\tif(dx[i] + x <= n && dx[i] + x >= 1 && dy[i] + y <= m && dy[i] + y >= 1 && D[wtf] == -1) {\n\t\t\t\t\tD[wtf] = D[idx] + 1;\n\t\t\t\t\tQ.offer(wtf);\n\n\t\t\t\t\tif(D[wtf] >= D[ans])\n\t\t\t\t\t\tans = wtf;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tout.println((ans / fuck) + \" \" + (ans % fuck));\n\t\tout.close();\n\t\tin.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\t// TODO Auto-generated method stub\n\t\tScanner read = new Scanner(new FileInputStream(new File(\"input.txt\")));\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t\tint n = read.nextInt(), m = read.nextInt(), k = read.nextInt(), tree[][] = new int[n][m], a[] = new int[k],\n\t\t\t\tb[] = new int[k], x = 0, y = 0, max = -1, d = 0;\n\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\ta[i] = read.nextInt() - 1;\n\t\t\tb[i] = read.nextInt() - 1;\t\n\t\t\ttree[a[i]][b[i]] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tArrays.fill(tree[i], Integer.MAX_VALUE);\n\t\t}\n\t\tfor (int o = 0; o < k; o++) {\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\td = Math.abs(a[o] - i) + Math.abs(b[o] - j);\n\t\t\t\t\tif(d < tree[i][j])\n\t\t\t\t\t\ttree[i][j] = d;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i<n; i++){\n\t\t\tfor(int j = 0; j < m ; j ++){\n\t\t\t\tif(tree[i][j] > max){\n\t\t\t\t\tmax=  tree[i][j];\n\t\t\t\t\tx=  i;\n\t\t\t\t\ty = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.println(x + 1 + \" \" + (y + 1));\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new Fire35C().run(); }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)\n        InputStream inputStream;\n        try\n        {\n            inputStream = new FileInputStream(\"input.txt\");\n        } catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n        OutputStream outputStream;\n        try\n        {\n            outputStream = new FileOutputStream(\"output.txt\");\n        } catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n        FastScanner in = new FastScanner(inputStream);\n        FastPrinter out = new FastPrinter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new FileReader(\"input.txt\"));\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        n = nextInt();\n        m = nextInt();\n        int k = nextInt();\n        used = new boolean[n][m];\n        Deque<point> deq = new ArrayDeque<>();\n        for (int i = 0; i < k; i++) {\n            deq.addLast(new point(nextInt() - 1, nextInt() - 1));\n            used[deq.peekLast().x][deq.peekLast().y] = true;\n        }\n        point last = new point(0, 0);\n        while (!deq.isEmpty()) {\n            point v = deq.pollFirst();\n            int x = v.x;\n            int y = v.y;\n            if (checker(x, y + 1)) {\n                last = new point(x, y + 1);\n                deq.addLast(new point(x, y + 1));\n                used[x][y + 1] = true;\n            }\n            if (checker(x, y - 1)) {\n                last = new point(x, y - 1);\n                deq.addLast(new point(x, y - 1));\n                used[x][y - 1] = true;\n            }\n            if (checker(x + 1, y)) {\n                last = new point(x + 1, y);\n                deq.addLast(new point(x + 1, y));\n                used[x + 1][y] = true;\n            }\n            if (checker(x - 1, y)) {\n                last = new point(x - 1, y);\n                deq.addLast(new point(x - 1, y));\n                used[x - 1][y] = true;\n            }\n        }\n        out.println(last.x + 1 + \" \" + (last.y + 1));\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        BufferedReader in = new BufferedReader//(new InputStreamReader(System.in));\n                                            (new FileReader(\"input.txt\"));\n        StringBuilder out = new StringBuilder();\n        StringTokenizer tk;\n        PrintWriter pw = new PrintWriter(\"output.txt\", \"UTF-8\");\n        \n        int [] dx = {-1,1,0,0},dy = {0,0,-1,1};\n        \n        tk = new StringTokenizer(in.readLine());\n        int n = parseInt(tk.nextToken()),m = parseInt(tk.nextToken());\n        int k = parseInt(in.readLine());\n        \n        int [][] dist = new int[n][m];\n        for(int i=0; i<n; i++) \n            Arrays.fill(dist[i], -1);\n        \n        int ans = -1,atx = -1,aty = -1;\n        \n        Queue<point> q = new LinkedList<point>();\n        \n        tk = new StringTokenizer(in.readLine());\n        while(k-- > 0) {\n            int x = parseInt(tk.nextToken())-1,y = parseInt(tk.nextToken())-1;\n            \n            dist[x][y] = 0;\n            q.add(new point(x,y));\n        }\n        \n        while(!q.isEmpty()) {\n            point p = q.remove();\n            \n            if(dist[p.x][p.y]>ans) {\n                ans = dist[p.x][p.y];\n                atx = p.x+1;\n                aty = p.y+1;\n            }\n            \n            for(int i=0; i<4; i++) {\n                int nx = p.x + dx[i];\n                int ny = p.y + dy[i];\n                \n                if(nx>=0 && nx<n && ny>=0 && ny<m && dist[nx][ny]==-1) {\n                    dist[nx][ny] = dist[p.x][p.y] + 1;\n                    q.add(new point(nx,ny));\n                }\n            }\n        }\n        \n        pw.println(atx+\" \"+aty);\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "\t\tpublic static void main(String[] args) throws FileNotFoundException {\t\t\t\n\t\t\tScanner scn = new Scanner(new FileReader(\"input.txt\"));\n\t\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t\t int n=scn.nextInt(),m=scn.nextInt(),k=scn.nextInt();\n\t\t int[][] inf=new int[k][2];\n\t\t for(int i=0;i<k;i++){\n\t\t\t inf[i][0]=scn.nextInt();inf[i][1]=scn.nextInt();\n\t\t }\n\t\t int ans=0,x=1,y=1;\n\t\t for(int i=1;i<=n;i++){\n\t\t\t for(int j=1;j<=m;j++){\n\t\t\t\t int temp=Integer.MAX_VALUE;\n\t\t\t\t for(int l=0;l<k;l++){\n\t\t\t\t\ttemp=Math.min(temp, Math.abs(i-inf[l][0])+Math.abs(j-inf[l][1])); \n\t\t\t\t }\n\t\t\t\t if(temp>ans){\n\t\t\t\t\t ans=temp;x=i;y=j;\n\t\t\t\t }\n\t\t\t }\n\t\t }\n\t\t out.print(x+ \" \" + y);\n\t   \t out.close();\n\t\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\t// TODO Auto-generated method stub\n\t\tScanner read = new Scanner(new FileInputStream(new File(\"input.txt\")));\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t\tint n = read.nextInt(), m = read.nextInt(), k = read.nextInt(), tree[][] = new int[n][m], a[] = new int[k],\n\t\t\t\tb[] = new int[k], x = 0, y = 0, max = -1, d = 0;\n\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\ta[i] = read.nextInt() - 1;\n\t\t\tb[i] = read.nextInt() - 1;\t\n\t\t\ttree[a[i]][b[i]] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tArrays.fill(tree[i], Integer.MAX_VALUE);\n\t\t}\n\t\tfor (int o = 0; o < k; o++) {\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\td = Math.abs(a[o] - i) + Math.abs(b[o] - j);\n\t\t\t\t\tif(d < tree[i][j])\n\t\t\t\t\t\ttree[i][j] = d;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i<n; i++){\n\t\t\tfor(int j = 0; j < m ; j ++){\n\t\t\t\tif(tree[i][j] > max){\n\t\t\t\t\tmax=  tree[i][j];\n\t\t\t\t\tx=  i;\n\t\t\t\t\ty = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.println(x + 1 + \" \" + (y + 1));\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n        Scanner in=new Scanner(new File(\"input.txt\"));\n        int n,m,k;\n        n=in.nextInt();\n        m=in.nextInt();\n        k=in.nextInt();\n        Vector<Integer> vec=new Vector<Integer>();\n        Vector<Integer> temp=new Vector<Integer>();\n        boolean[][] mas=new boolean[n][m];\n        long time=System.currentTimeMillis();\n        for(int i=0;i<k;i++)\n        {\n            vec.add(in.nextInt()-1);\n            vec.add(in.nextInt()-1);\n            mas[vec.get(vec.size()-2)][vec.get(vec.size()-1)]=true;\n        }\n        int x,y;\n        x=y=0;\n        while(vec.size()!=0)\n        {\n            for(int i=0;i<vec.size();i+=2)\n            {\n                x=vec.get(i);\n                y=vec.get(i+1);\n                if(x>0 && !mas[x-1][y])\n                {\n                    temp.add(x-1);\n                    temp.add(y);\n                    mas[x-1][y]=true;\n                }\n                if(x<n-1 && !mas[x+1][y])\n                {\n                    temp.add(x+1);\n                    temp.add(y);\n                    mas[x+1][y]=true;\n                }\n                if(y>0 && !mas[x][y-1])\n                {\n                    temp.add(x);\n                    temp.add(y-1);\n                    mas[x][y-1]=true;\n                }\n                if(y<m-1 && !mas[x][y+1])\n                {\n                    temp.add(x);\n                    temp.add(y+1);\n                    mas[x][y+1]=true;\n                }\n            }\n            vec=temp;\n            temp=new Vector<Integer>();\n        }\n        pw.println((x+1)+\" \"+(y+1));\n        System.out.println(System.currentTimeMillis()-time);\n        in.close();\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(\"input.txt\");\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        int n = sc.nextInt(), m = sc.nextInt(), k = sc.nextInt();\n        int[][] dist = new int[n][m];\n        for(int[] a : dist) Arrays.fill(a, -1);\n        Queue<Point> q = new LinkedList<>();\n        for(int i = 0; i < k; i++)\n        {\n            int x = sc.nextInt() - 1, y = sc.nextInt() - 1;\n            dist[x][y] = 0;\n            q.add(new Point(x, y));\n        }\n        int ansX = -1, ansY = -1;\n        while(!q.isEmpty())\n        {\n            Point cur = q.remove();\n            ansX = cur.x; ansY = cur.y;\n            for(int i = 0; i < 4; i++)\n            {\n                int x = cur.x + dx[i], y = cur.y + dy[i];\n                if(x != -1 && y != -1 && x != n && y != m && dist[x][y] == -1)\n                {\n                    q.add(new Point(x, y));\n                    dist[x][y] = dist[cur.x][cur.y] + 1;\n                }\n            }\n        }\n        out.println((ansX + 1) + \" \" + (ansY + 1));\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\t\t        \tpublic static void main(String[] args) throws IOException {\n\t\t    \t\n\t\t    \t inFile=new File(\"input.txt\");\n\t\t    \t outFile = new File (\"output.txt\");\n\t\t\t     fWriter = new FileWriter (outFile);\n\t\t\t    pWriter = new PrintWriter (fWriter);\n\t\t\t  Scanner sc = new Scanner (inFile);\n\t\t\t  int n=sc.nextInt();\n\t\t\t  int m=sc.nextInt();\n\t\t\t  char c[][]=new char[n][m];\n\t\t\t  for(int i=0;i<n;i++){\n\t\t\t\t  for(int j=0;j<m;j++){\n\t\t\t\t\t  c[i][j]='.';\n\t\t\t\t  }\n\t\t\t  }\n\t\t\t  setup(n, m);\n\t\t\t  int k=sc.nextInt();\n\t\t\t  for(int i=0;i<k;i++){\n\t\t\t\t  int x=sc.nextInt();\n\t\t\t\t  int y=sc.nextInt();\n\t\t\t\t  queue.add(new Pair(x-1, y-1));\n\t\t\t\t  c[x-1][y-1]='X';\n\t\t\t level[x-1][y-1]=-1;\n\t\t\t Visite[x-1][y-1]=true;\n\t\t\t  }\n\t\t\tBFS(c, n, m);\n\t\t    \tpWriter.close();\n\t\t    \tsc.close();\n\t\t    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException { \n        //InputStream input = System.in;\n        //OutputStream output = System.out;\n        InputReader in = new InputReader(new FileReader(new File(\"input.txt\")));\n        PrintWriter out = new PrintWriter(new FileWriter(new File(\"output.txt\")));\n        //InputReader in = new InputReader(input);\n        //PrintWriter out = new PrintWriter(output);\n        Solution s = new Solution();\n        s.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tScanner sc = new Scanner(\"input.txt\");\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n//\t\tScanner sc = new Scanner(System.in);\n//\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tint N = sc.nextInt(), M = sc.nextInt();\n\t\tint[][] dist = new int[N][M];\n\t\tQueue<Integer> q = new LinkedList<>();\n\t\tint K = sc.nextInt();\n\t\twhile(K-->0)\n\t\t{\n\t\t\tint x = sc.nextInt() - 1, y = sc.nextInt() - 1;\n\t\t\tq.add(x * M + y);\n\t\t\tdist[x][y] = 1;\n\t\t}\n\t\t\n\t\tint max = 0, ansX = -1, ansY = -1;\n\t\twhile(!q.isEmpty())\n\t\t{\n\t\t\tint u = q.remove(), x = u / M, y = u % M;\n\t\t\tif(dist[x][y] > max) \n\t\t\t\tmax = dist[ansX = x][ansY = y];\n\t\t\tfor(int k = 0; k < 4; ++k)\n\t\t\t{\n\t\t\t\tint nx = x + dx[k], ny = y + dy[k];\n\t\t\t\tif(nx >= 0 && ny >= 0 && nx < N && ny < M && dist[nx][ny] == 0)\n\t\t\t\t{\n\t\t\t\t\tdist[nx][ny] = dist[x][y] + 1;\n\t\t\t\t\tq.add(nx * M + ny);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tout.printf(\"%d %d\\n\", ansX + 1, ansY + 1);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tInputStream inputStream = new FileInputStream(\"input.txt\");\n\t\tOutputStream outputStream = new FileOutputStream(\"output.txt\");\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTask solver = new Task();\n\t\tsolver.solve(in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "      public static void main(String hi[]) throws Exception\n         BufferedReader infile = new BufferedReader(new FileReader(\"input.txt\"));\n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         int M = Integer.parseInt(st.nextToken());\n         int K = Integer.parseInt(infile.readLine());\n         int[][] grid = new int[N][M];\n         for(int i=0; i < N; i++)\n            Arrays.fill(grid[i], -1);\n         ArrayDeque<Integer> q = new ArrayDeque<Integer>();\n         st = new StringTokenizer(infile.readLine());\n         while(K-->0)\n         {\n            int a = Integer.parseInt(st.nextToken())-1;\n            int b = Integer.parseInt(st.nextToken())-1;\n            grid[a][b] = 0;\n            q.add(a);   q.add(b);\n         }\n         while(q.size() > 0)\n         {\n            int x = q.poll();\n            int y = q.poll();\n            if(x > 0 && grid[x-1][y] == -1)\n            {\n               grid[x-1][y] = grid[x][y]+1;\n               q.add(x-1); q.add(y);\n            }\n            if(y > 0 && grid[x][y-1] == -1)\n            {\n               grid[x][y-1] = grid[x][y]+1;\n               q.add(x);   q.add(y-1);\n            }\n            if(x+1 < N && grid[x+1][y] == -1)\n            {\n               grid[x+1][y] = grid[x][y]+1;\n               q.add(x+1); q.add(y);\n            }\n            if(y+1 < M && grid[x][y+1] == -1)\n            {\n               grid[x][y+1] = grid[x][y]+1;\n               q.add(x);   q.add(y+1);\n            }\n         }\n         int r = 0;\n         int c = 0;\n         for(int i=0; i < N; i++)\n            for(int j=0; j < M; j++)\n               if(grid[r][c] < grid[i][j])\n               {\n                  r = i;\n                  c = j;\n               }\n         r++;  c++;\n         System.setOut(new PrintStream(new File(\"output.txt\")));\n         System.out.println(r+\" \"+c);\n      }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        IN = new FileInputStream(\"input.txt\");\n        OUT = new FileOutputStream(\"output.txt\");\n        out = new PrintWriter(OUT);\n        in = new BufferedReader(new InputStreamReader(IN));\n        int n = ni();\n        int m = ni();\n        int k = ni();\n        int[] x = new int[k];\n        int[] y = new int[k];\n        for (int i = 0 ; i < k; i++){\n            x[i] = ni() - 1;\n            y[i] = ni() - 1;\n        }\n        int w = Integer.MIN_VALUE;\n        int aa = -1;\n        int ab = -1;\n        for (int i = 0 ; i < n ; i++){\n            for (int j = 0; j < m; j++){\n                int min = Integer.MAX_VALUE;\n                for (int q = 0; q < k; q++){\n                    int cur = Math.abs(i - x[q]) + Math.abs(j - y[q]);\n                    min = Math.min(cur, min);\n                }\n                if (min > w){\n                    w = min;\n                    aa = i;\n                    ab = j;\n                }\n            }\n        }\n        out.println((aa + 1) + \" \" + (ab + 1));\n        \n        out.flush();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStream input = System.in;\n        OutputStream output = System.out;\n        InputReader in = new InputReader(new FileReader(new File(\"input.txt\")));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n        Solution s = new Solution();\n        s.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new File(\"input.txt\"));\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        int n = in.nextInt() , m = in.nextInt();\n        int k = in.nextInt();\n        int[] x = new int[k];\n        int[] y = new int[k];\n        int res = 0;\n        for (int i = 0 ; i < k ; i++) {\n            x[i] = in.nextInt();\n            y[i] = in.nextInt();\n        }\n        int xx = 1 , yy = 1;\n        for (int i = 1 ; i <= n ; i++)\n            for (int j = 1 ; j <= m ; j++) {\n                int cnt = Integer.MAX_VALUE;\n                for (int l = 0 ; l < k ; l++) {\n                    int time = Math.abs(i - x[l]) + Math.abs(j - y[l]);\n                    cnt = Math.min(cnt , time);\n                }\n                if (cnt > res) {\n                    res = cnt;\n                    xx = i;\n                    yy = j;\n                }\n                res = Math.max(res , cnt);\n            }\n        out.print(xx + \" \" + yy);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] Args) throws Exception {\n\t     Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n\t     int n,m,k;\n\t     Integer lx,ly;\n\t     boolean d[][];\n\t     n = sc.nextInt(); m = sc.nextInt(); k = sc.nextInt();\n\t     d = new boolean [n+1][m+1];\n\t     for(int i=0;i<=n;++i)\n\t      for(int j=0;j<=m;++j)\n\t       d[i][j]=false;\n\t     \n\t     Queue< pair > q = new LinkedList< pair >();\n\t     lx = ly = -1;\n\t     for(int i=0;i<k;++i){\n\t     \tint x,y; x = sc.nextInt(); y = sc.nextInt();\n\t     \tq.add(new pair(x,y)); lx = x; ly = y;\n\t     \td[x][y]=true;\n\t     }\n\t     \n\t     int dx [] = {0,0,1,-1};\n\t     int dy [] = {-1,1,0,0};\n\t     \n\t     \n\t     while(!q.isEmpty()){\n\t     \t pair tp = q.remove();\n\t     \t int x = tp.x; int y = tp.y;\n\t     \t for(int i=0;i<4;++i){\n\t     \t \t int nx = x+dx[i]; int ny = y+dy[i];\n\t     \t \t if(nx<1 || nx>n || ny<1 || ny>m || d[nx][ny] ) continue;\n\t     \t     d[nx][ny]=true;\n\t     \t     q.add(new pair(nx,ny));\n\t     \t     lx = nx; ly = ny;\n\t     \t }\n\t     }\n\t     FileWriter fw = new FileWriter(\"output.txt\");\n\t     fw.write(lx.toString()); fw.write(\" \"); fw.write(ly.toString());;\n\t     fw.flush();\n\t     \t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String [] argv)\n\t\tString filePath=null;\n\t\tif(argv.length>0)filePath=argv[0];\n\t\tC c = new C(filePath);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"input.txt\"));\n        BufferedWriter write = new BufferedWriter(new FileWriter(\"output.txt\"));\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        boolean[][] v = new boolean[n][m];\n        int k = sc.nextInt();\n        Queue<Integer> q = new LinkedList<Integer>();\n        for (int i = 0; i < k; i++) {\n            int x = sc.nextInt() - 1;\n            int y = sc.nextInt() - 1;\n            q.add(x);\n            q.add(y);\n            v[x][y] = true;\n        }\n        int lastx = 0;\n        int lasty = 0;\n        while (!q.isEmpty()) {\n            lastx = q.poll();\n            lasty = q.poll();\n            for (int i = 0; i < 4; i++) {\n                int r = lastx + dx[i];\n                int c = lasty + dy[i];\n                if (r >= 0 && c >= 0 && r < n && c < m && !v[r][c]) {\n                    v[r][c] = true;\n                    q.add(r);\n                    q.add(c);\n                }\n            }\n        }\n        write.write((lastx + 1) + \" \" + (lasty + 1));\n        write.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t\n\t\tString dimensions = br.readLine();\n\t\tString extractDim = \"\";\n\t\tint n = 0, m;\n\t\tfor (int i = 0 ; i < dimensions.length() ; i++)\n\t\t{\n\t\t\tif(dimensions.charAt(i) == ' ')\n\t\t\t{\n\t\t\t\tn = Integer.parseInt(extractDim);\n\t\t\t\textractDim = \"\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\textractDim += dimensions.charAt(i);\n\t\t}\n\t\tm = Integer.parseInt(extractDim); \n\t\t\n\t\tString burningTrees = br.readLine();\n\t\t\n\t\tint k = Integer.parseInt(burningTrees);\t\t\n\t\t\n\t\tPoint[] coord = new Point[k];\n\t\t\n\t\tString coordSet = br.readLine();\n\t\tint spaceCount = 0;\n\t\tString newCoord = \"\";\n\t\tint s = 0;\n\t\tfor(int i = 0 ; i < coordSet.length() ; i++)\n\t\t{\n\t\t\tif(coordSet.charAt(i) == ' ')\n\t\t\t\tspaceCount++;\n\t\t\t\n\t\t\tif(spaceCount == 2)\n\t\t\t{\n\t\t\t\tString extractCoord = \"\";\n\t\t\t\tint x = 0, y;\n\t\t\t\tfor (int j = 0 ; j < newCoord.length() ; j++)\n\t\t\t\t{\n\t\t\t\t\tif(newCoord.charAt(j) == ' ')\n\t\t\t\t\t{\n\t\t\t\t\t\tx = Integer.parseInt(extractCoord);\n\t\t\t\t\t\textractCoord = \"\";\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\textractCoord += newCoord.charAt(j);\n\t\t\t\t}\n\t\t\t\ty = Integer.parseInt(extractCoord);\n\t\t\t\t\n\t\t\t\tcoord[s] = new Point(x,y);\n\t\t\t\ts++;\n\t\t\t\tnewCoord = \"\";\n\t\t\t\tspaceCount = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tnewCoord += coordSet.charAt(i);\n\t\t}\n\t\t\n\t\tString extractCoord = \"\";\n\t\tint x = 0, y;\n\t\tfor (int j = 0 ; j < newCoord.length() ; j++)\n\t\t{\n\t\t\tif(newCoord.charAt(j) == ' ')\n\t\t\t{\n\t\t\t\tx = Integer.parseInt(extractCoord);\n\t\t\t\textractCoord = \"\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\textractCoord += newCoord.charAt(j);\n\t\t}\n\t\ty = Integer.parseInt(extractCoord);\n\t\t\n\t\tcoord[s] = new Point(x,y);\n\t\ts++;\n\t\t\n\t\tbr.close();\n\t\t\n\t\tint[][] forest = new int[n+2][m+2];\n\t\t\n\t\tfor(int i = 0 ; i < forest.length ; i++)\n\t\t{\n\t\t\tfor(int j = 0 ; j < forest[i].length ; j++)\n\t\t\t{\n\t\t\t\tif(i == 0 || i == n+1 || j == 0 || j == m+1 )\n\t\t\t\t\tforest[i][j] = 0;\n\t\t\t\telse\n\t\t\t\t\tforest[i][j] = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tQueue<Point> q = new LinkedList<>();\n\t\t\n\t\tfor(int i = 0 ; i < coord.length ; i++)\n\t\t{\n\t\t\tforest[coord[i].x][coord[i].y] = 0;\n\t\t\tq.add(coord[i]);\n\t\t}\n\t\t\n\t\tPoint tree = new Point();\n\t\twhile(!q.isEmpty())\n\t\t{\n\t\t\tPoint temp = q.remove();\n\t\t\tforest[temp.x][temp.y] = 0;\n\t\t\t\n\t\t\tif(q.isEmpty())\n\t\t\t\ttree = new Point(temp.x ,temp.y);\n\t\t\tfor(int i = -1 ; i <= 1 ; i++)\n\t\t\t{\n\t\t\t\tfor(int j = -1; j <= 1; j++)\n\t\t\t\t{\n\t\t\t\t\tif(i != 0 && j != 0 || i == 0 && j == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif(forest[temp.x+i][temp.y+j] == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tforest[temp.x+i][temp.y+j] = 0;\n\t\t\t\t\t\tq.add(new Point(temp.x+i , temp.y+j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"output.txt\"));\n\t\tbw.write(tree.x + \" \" + tree.y);\n\t\tbw.close();\n\t\t\n\t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tInputReader input = new InputReader(new FileReader((\"input.txt\")));\n\t\tint n = input.nextInt();\n\t\tint m = input.nextInt();\n\t\tint k = input.nextInt();\n\t\tboolean[][] visited = new boolean[n][m];\n\t\tQueue<Point> bfs = new LinkedList<Point>();\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tint x = input.nextInt();\n\t\t\tint y = input.nextInt();\n\t\t\tvisited[x - 1][y - 1] = true;\n\t\t\tbfs.add(new Point(x - 1, y - 1));\n\t\t}\n\t\tPoint last = bfs.peek();\n\t\twhile(!bfs.isEmpty()) {\n\t\t\tPoint current = bfs.poll();\n\t\t\tint curX = current.x;\n\t\t\tint curY = current.y;\n\t\t\t//the upper tree\n\t\t\tif(curX - 1 >= 0) {\n\t\t\t\tif(!visited[curX - 1][curY]) {\n\t\t\t\t\tbfs.add(new Point(curX - 1,curY));\n\t\t\t\t\tvisited[curX - 1][curY] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//the tree to the right\n\t\t\tif(curY + 1 < m) {\n\t\t\t\tif(!visited[curX][curY + 1]) {\n\t\t\t\t\tbfs.add(new Point(curX ,curY + 1));\n\t\t\t\t\tvisited[curX][curY + 1] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//the lower tree\n\t\t\tif(curX + 1 < n) {\n\t\t\t\tif(!visited[curX + 1][curY]) {\n\t\t\t\t\tbfs.add(new Point(curX + 1,curY));\n\t\t\t\t\tvisited[curX + 1][curY] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//the point to the left\n\t\t\tif(curY - 1 >= 0) {\n\t\t\t\tif(!visited[curX][curY - 1]) {\n\t\t\t\t\tbfs.add(new Point(curX ,curY - 1));\n\t\t\t\t\tvisited[curX][curY - 1] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(bfs.peek()!= null)\n\t\t\tlast = bfs.peek();\n\t\t}\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t\tout.println((last.x + 1) + \" \" + (last.y + 1));\n\t\tout.close();\n\t\t//System.out.println((last.x + 1) + \" \" + (last.y + 1));\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n//        FastReader sc = new FastReader();\n        Scanner sc=new Scanner(new FileReader(\"input.txt\"));\n        PrintWriter out=new PrintWriter(new File(\"output.txt\"));\n        int n=sc.nextInt(),m=sc.nextInt(),k=sc.nextInt();\n        boolean vis[][]=new boolean[n][m];\n        LinkedList<Integer> q=new LinkedList<>();\n        for (int i=0;i<k;i++){\n            int x=sc.nextInt()-1,y=sc.nextInt()-1;\n            vis[x][y]=true;\n            q.add(x);q.add(y);\n        }\n        int lastx=-1,lasty=-1;\n        int dirX[]={1,-1,0,0},dirY[]={0,0,1,-1};\n        while (!q.isEmpty()){\n            int x=q.removeFirst();\n            int y=q.removeFirst();\n            lastx=x;lasty=y;\n            for (int i=0;i<4;i++){\n                int newx=x+dirX[i],newy=y+dirY[i];\n                if (newx>=0 && newx<n && newy>=0 && newy<m && !vis[newx][newy]){\n                    vis[newx][newy]=true;\n                    q.add(newx);q.add(newy);\n                }\n            }\n        }\n        out.println((lastx+1)+\" \"+(lasty+1));\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        File f = new File(\"input.txt\");\n        Scanner sc = new Scanner(f);\n        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        boolean[][] board = new boolean[n][m];\n        int count = sc.nextInt();\n        Point[] burningTrees = new Point[count];\n        for (int i=0; i<count; i++) {\n            burningTrees[i] = new Point(sc.nextInt() - 1,sc.nextInt() - 1);\n        }\n        Point last = findLastPoint(board,burningTrees);\n        bw.append((last.x + 1) + \" \" + (last.y + 1) + \"\\n\");\n        bw.flush();\n        bw.close();\n        sc.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tfinal boolean oldChecker = false;\n\t\t\n\t\tif(oldChecker) {\n\t\t\tnew Thread(null, new C(), \"yarrr\", 1 << 24).start();\n\t\t} else {\n\t\t\tnew C().run();\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)throws IOException\n        /*PrintWriter out= new PrintWriter(new File(\"input.txt\"));\n        Reader sc=new Reader();*/\n        Scanner sc = new Scanner(new File(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\n        Queue<pair> q=new LinkedList<>();\n        int n=sc.nextInt();\n        int m=sc.nextInt();\n        int t=sc.nextInt();\n        int mark[][]=new int[n+2][m+2];\n        while(t-->0)\n        {\n            int a=sc.nextInt();int b=sc.nextInt();\n            mark[a][b]=1;\n            q.add(new pair(a,b));\n        }\n        int ansx=1;int ansy=1;\n        while(q.size()!=0)\n        {\n            pair p=q.remove();\n            if(mark[Math.max(1,p.x-1)][p.y]==0)\n            {\n                q.add(new pair(Math.max(1,p.x-1),p.y));\n                mark[Math.max(1,p.x-1)][p.y]=1;\n                ansx=Math.max(1,p.x-1);\n                ansy=p.y;\n            }\n            if(mark[Math.min(n,p.x+1)][p.y]==0)\n            {\n                q.add(new pair(Math.min(n,p.x+1),p.y));\n                mark[Math.min(n,p.x+1)][p.y]=1;\n                ansx=Math.min(n,p.x+1);\n                ansy=p.y;\n            }\n            if(mark[p.x][Math.max(1,p.y-1)]==0)\n            {\n                q.add(new pair(p.x,Math.max(1,p.y-1)));\n                mark[p.x][Math.max(1,p.y-1)]=1;\n                ansx=p.x;\n                ansy=Math.max(1,p.y-1);\n            }\n            if(mark[p.x][Math.min(m,p.y+1)]==0)\n            {\n                q.add(new pair(p.x,Math.min(m,p.y+1)));\n                mark[p.x][Math.min(m,p.y+1)]=1;\n                ansx=p.x;\n                ansy=Math.min(m,p.y+1);\n            }\n        }\n        out.println(ansx+\" \"+ansy);\n        out.flush();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[]args) throws IOException{\n        BufferedReader br = new BufferedReader(new FileReader(new File(\"input.txt\")));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\n        String S = br.readLine();\n        String[]J = S.split(\" \");\n        int N = Integer.parseInt(J[0]);\n        int M = Integer.parseInt(J[1]);\n\n        int K = Integer.parseInt(br.readLine());\n        int[]x = new int[K];\n        int[]y = new int[K];\n        S = br.readLine();\n        J = S.split(\" \");       \n        for(int i = 0; i<2*K; i = i + 2){\n            x[i/2] = Integer.parseInt(J[i]);\n            y[i/2] = Integer.parseInt(J[i+1]);\n        }\n        \n        int ans = -1;\n        int ansX = -1;\n        int ansY = -1;\n        \n        for (int i = 1; i<=N; i++){\n            for (int j = 1; j<=M; j++){\n                int W = M + N;\n                for (int k = 0; k<K; k++){\n                    W = Math.min(W, Math.abs(i-x[k]) + Math.abs(j-y[k]));\n                }\n                if (W < ans)continue;\n                ans = W;\n                ansX = i;\n                ansY = j;               \n            }\n        }\n        bw.write(Integer.toString(ansX)+\" \"+Integer.toString(ansY));\n        br.close();\n        bw.close();     \n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main (String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader (inputStream);\n\t\tPrintWriter out = new PrintWriter (outputStream);\n\t\tProblemCFireAgain solver = new ProblemCFireAgain ();\n\t\tsolver.solve (1, in, out);\n\t\tout.close ();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        // InputStreamReader stream = new InputStreamReader(System.in);\n        // BufferedReader input = new BufferedReader(stream);\n\n        BufferedReader input = new BufferedReader(new FileReader(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n\n        StringTokenizer dataR = new StringTokenizer(input.readLine());\n        N = Integer.parseInt(dataR.nextToken());\n        M = Integer.parseInt(dataR.nextToken());\n        burning = new boolean[N+1][M+1];\n\n        StringTokenizer dataR1 = new StringTokenizer(input.readLine());\n        int K = Integer.parseInt(dataR1.nextToken());\n\n        StringTokenizer dataR2 = new StringTokenizer(input.readLine());\n        LitTrees = new LinkedList<int[]>();\n        for (int j = 0; j < K; j++){\n            int x = Integer.parseInt(dataR2.nextToken());\n            int y = Integer.parseInt(dataR2.nextToken());\n            int[] coord = {x, y};\n            LitTrees.add(coord);\n            burning[x][y] = true;\n        }\n\n        // while(ExistsAliveTree()){\n        //     spread();\n        // }\n\n        spread();\n\n        // System.out.println(LitTrees.getLast()[0] + \" \" + LitTrees.getLast()[1]);\n        out.println(lastTree[0] + \" \" + lastTree[1]);\n        out.close();\n\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew C().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[])throws Exception{\n\t\tScanner in =new Scanner(new File(\"input.txt\"));//System.in);//\n\t\tPrintWriter out=new PrintWriter(new File(\"output.txt\"));//System.out);//\n\t\tn = in.nextInt();\n\t\tm = in.nextInt();\n\t\tint k = in.nextInt();\n\t\t//a=new int[n+1][m+1];\n\t\t/*for (int i = 1; i<=n; i++)\n\t\t\tfor (int j = 1; j<=m; j++)\n\t\t\t\ta[i][j] = 40001;\n\t\t*/\n\t\tint x[]=new int[k];\n\t\tint y[]=new int[k];\n\t\tfor (int i = 0; i<k; i++){\n\t\t\tx[i] = in.nextInt();\n\t\t\ty[i] = in.nextInt();\n\t\t}\n\t\t\n\t\tint max = 0;\n\t\tint xx = 1; int yy= 1;\n\t\tfor (int i = 1; i<=n; i++)\n\t\t\tfor (int j = 1; j<=m; j++){\n\t\t\t\tint count = Integer.MAX_VALUE;\n\t\t\t\tfor (int l =0; l<k; l++)\n\t\t\t\t\tcount = Math.min(Math.abs(i - x[l]) + Math.abs(j - y[l]), count);\n\t\t\n\t\t\t\tif (max < count){\n\t\t\t\t\tmax = count;\n\t\t\t\t\txx = i; yy = j;\n\t\t\t\t}\n\t\t\t}\n\t\tout.println(xx + \" \" + yy);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)throws Exception {\n        n = nextInt();\n        m = nextInt();\n        int k = nextInt();\n        int[][] mas = new int[k][2];\n        \n        for(int i = 0; i<k; i++) {\n            mas[i][0] = nextInt()-1;\n            mas[i][1] = nextInt()-1;\n        }\n        \n        mind = new int[n][m];\n        used = new boolean[n][m];\n        for(int i = 0; i<n; i++) {\n            Arrays.fill(mind[i], Integer.MAX_VALUE);\n        }\n        \n        ArrayDeque<int[]> ad = new ArrayDeque<int[]>();\n        \n        for(int i = 0; i<k; i++) {\n            ad.add(new int[] {mas[i][0], mas[i][1], 0});\n        }\n        \n        while(!ad.isEmpty()) {\n            int[] cur = ad.remove();\n            \n            if(used[cur[0]][cur[1]])continue;\n            int x = cur[0]; int y = cur[1]; int d = cur[2];\n            mind[x][y] = ++d;\n            used[x][y] = true;\n            //if(isValid(x+1,y+1) && !used[x+1][y+1])   ad.add(new int[] {x+1,  y+1, d});\n            if(isValid(x+1,y)   && !used[x+1][y])   ad.add(new int[] {x+1,  y,   d});\n            //if(isValid(x+1,y-1) && !used[x+1][y-1])   ad.add(new int[] {x+1,  y-1, d});\n            if(isValid(x,y+1)   && !used[x][y+1])   ad.add(new int[] {x,    y+1, d});\n            if(isValid(x,y-1)   && !used[x][y-1])   ad.add(new int[] {x,    y-1, d});\n            //if(isValid(x-1,y+1) && !used[x-1][y+1])   ad.add(new int[] {x-1,  y+1, d});\n            if(isValid(x-1,y)   && !used[x-1][y])   ad.add(new int[] {x-1,  y,   d});\n            //if(isValid(x-1,y-1) && !used[x-1][y-1])   ad.add(new int[] {x-1,  y-1, d});\n        }\n        \n        int max = Integer.MIN_VALUE;\n        int maxx = 0, maxy = 0;\n        \n        for(int i = 0; i<n; i++) {\n            for(int j = 0; j<m; j++) {\n                if(mind[i][j] > max) {\n                    max = mind[i][j];\n                    maxx = i+1;\n                    maxy = j+1;\n                }\n            }\n        }\n        \n        out.println(maxx + \" \" + maxy);\n        out.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew C().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tScanner sc = new Scanner(new File(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tArrayList<ArrayList<Integer>> fire = new ArrayList<ArrayList<Integer>>();\n\t\twhile (k-- != 0) {\n\t\t\tArrayList<Integer> t = new ArrayList<Integer>();\n\t\t\tt.add(sc.nextInt());\n\t\t\tt.add(sc.nextInt());\n\t\t\tfire.add(t);\n\t\t}\n\t\t\n\t\tint maxI = 0, maxJ = 0, maxManhatten = -1;\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\tfor(int j = 1; j <= m; j++){\n\t\t\t\tint curManhatten = Integer.MAX_VALUE;\n\t\t\t\tfor(int u = 0; u < fire.size(); u++)\n\t\t\t\t\tcurManhatten = Math.min(curManhatten, manhatten(i, j, fire.get(u).get(0), fire.get(u).get(1)));\n\t\t\t\t\n\t\t\t\tif(curManhatten > maxManhatten){\n\t\t\t\t\tmaxManhatten = curManhatten;\n\t\t\t\t\tmaxI = i;\n\t\t\t\t\tmaxJ = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\tout.print(maxI + \" \" + maxJ);\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\t\tpublic static void main(String[] args) throws IOException {\t\t\t\n\t\t\tReader scn=new Reader(\"input.txt\");\n\t\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t\t int n=scn.nextInt(),m=scn.nextInt(),k=scn.nextInt();\n\t\t int[][] inf=new int[k][2];\n\t\t for(int i=0;i<k;i++){\n\t\t\t inf[i][0]=scn.nextInt();inf[i][1]=scn.nextInt();\n\t\t }\n\t\t int ans=0,x=1,y=1;\n\t\t for(int i=1;i<=n;i++){\n\t\t\t for(int j=1;j<=m;j++){\n\t\t\t\t int temp=Integer.MAX_VALUE;\n\t\t\t\t for(int l=0;l<k;l++){\n\t\t\t\t\ttemp=Math.min(temp, Math.abs(i-inf[l][0])+Math.abs(j-inf[l][1])); \n\t\t\t\t }\n\t\t\t\t if(temp>ans){\n\t\t\t\t\t ans=temp;x=i;y=j;\n\t\t\t\t }\n\t\t\t }\n\t\t }\n\t\t out.print(x + \" \" + y);\n\t   \t out.close();\n\t\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        PrintWriter out = new PrintWriter(new FileOutputStream(new File(\n                \"output.txt\")));\n        //PrintWriter out = new PrintWriter(System.out);\n        Scanner in = new Scanner();\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int k = in.nextInt();\n        int[][] map = new int[n][m];\n        LinkedList<Point> q = new LinkedList();\n        int reX = -1;\n        int reY = -1;\n        for (int i = 0; i < k; i++) {\n            int x = in.nextInt() - 1;\n            int y = in.nextInt() - 1;\n            reX = x;\n            reY = y;\n            map[x][y] = 1;\n            q.add(new Point(x, y));\n        }\n\n        while (!q.isEmpty()) {\n            Point p = q.poll();\n            // System.out.println(map[p.x][p.y] + \" \" + p.x + \" \" + p.y);\n            for (int i = 0; i < 4; i++) {\n                int x = p.x + X[i];\n                int y = p.y + Y[i];\n                if (x >= 0 && y >= 0 && x < n && y < m && map[x][y] == 0) {\n                    map[x][y] = 1 + map[p.x][p.y];\n                    if (map[x][y] > map[reX][reY]) {\n                        reX = x;\n                        reY = y;\n                    }\n\n                    q.add(new Point(x, y));\n                }\n            }\n        }\n        out.println((reX + 1) + \" \" + (reY + 1));\n        out.close();\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)\n        InputStream inputStream;\n        try\n        {\n            inputStream = new FileInputStream(\"input.txt\");\n        } catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n        OutputStream outputStream;\n        try\n        {\n            outputStream = new FileOutputStream(\"output.txt\");\n        } catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n        FastScanner in = new FastScanner(inputStream);\n        FastPrinter out = new FastPrinter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        new Thread(null, new C(), \"\", MAX_STACK_SIZE * (1L << 20)).start();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n//\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n//\t\tMyScanner sc = new MyScanner();\n\t\tScanner sc = new Scanner(new File(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\n\t\tn = sc.nextInt();\n\t\tm = sc.nextInt();\n\t\tk = sc.nextInt();\n\t\tArrayDeque<iPair> qq = new ArrayDeque<>();\n\t\tboolean[][] vis = new boolean[n+1][m+1];\n\t\tfor(int i = 0; i < k; i++) {\n\t\t\tint u = sc.nextInt();\n\t\t\tint v = sc.nextInt();\n\t\t\tqq.add(new iPair(u, v));\n\t\t\tvis[u][v] = true;\n\t\t}\n\t\tiPair last = null;\n\t\twhile(!qq.isEmpty()) {\n\t\t\tiPair pp = qq.poll();\n\t\t\tint i = pp.f;\n\t\t\tint j = pp.s;\n\t\t\tif(isValid(i-1, j) && !vis[i-1][j]) {\n\t\t\t\tqq.add(new iPair(i-1, j));\n\t\t\t\tvis[i-1][j] = true;\n\t\t\t}\n\t\t\tif(isValid(i+1, j) && !vis[i+1][j]) {\n\t\t\t\tqq.add(new iPair(i+1, j));\n\t\t\t\tvis[i+1][j] = true;\n\t\t\t}\n\t\t\tif(isValid(i,  j-1) && !vis[i][j-1]) {\n\t\t\t\tqq.add(new iPair(i, j-1));\n\t\t\t\tvis[i][j-1] = true;\n\t\t\t}\n\t\t\tif(isValid(i, j+1) && !vis[i][j+1]) {\n\t\t\t\tqq.add(new iPair(i, j+1));\n\t\t\t\tvis[i][j+1] = true;\n\t\t\t}\n\t\t\tlast = pp;\n\t\t}\n\t\tout.println(last.f + \" \" + last.s);\n\t\tsc.close();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws Exception {\n\t\tScanner sc = new Scanner(\"input.txt\");\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\n\t\tint n = sc.nextInt(), m = sc.nextInt();\n\t\tint[][] grid = new int[n][m];\n\t\tfor (int[] i : grid)\n\t\t\tArrays.fill(i, -1);\n\t\tQueue<Pair> q = new LinkedList<>();\n\t\tint k = sc.nextInt();\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tint x = sc.nextInt() - 1, y = sc.nextInt() - 1;\n\t\t\tgrid[x][y] = 0;\n\t\t\tq.add(new Pair(x, y));\n\t\t}\n\t\tPair p = new Pair(-1, -1);\n\t\twhile (!q.isEmpty()) {\n\t\t\tp = q.poll();\n\t\t\tfor (int i = 0; i < dx.length; i++) {\n\t\t\t\tint tx = p.x + dx[i], ty = p.y + dy[i];\n\t\t\t\tif (tx >= 0 && tx < n && ty >= 0 && ty < m && grid[tx][ty] == -1) {\n\t\t\t\t\tgrid[tx][ty] = grid[p.x][p.y] + 1;\n\t\t\t\t\tq.add(new Pair(tx, ty));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.println(p);\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args){\n\t\tString buffer = null;\n\t\tStringTokenizer st = null;\n\t\tForest f = null;\n\t\tList<Pair> pairs = new LinkedList<Pair>();\n\t\tInteger N,M,K,x,y;\n\t\ttry {\n\t\t\tBufferedReader in = new BufferedReader(\n\t\t\t\t\t\t\tnew FileReader(\"input.txt\")\n\t\t\t\t\t\t\t);\n\t\t\tFileWriter out = new FileWriter(\"output.txt\");\n\t\t\tbuffer = in.readLine();\n\t\t\tst = new StringTokenizer(buffer);\n\t\t\tN = new Integer(st.nextToken());\n\t\t\tM = new Integer(st.nextToken());\n\t\t\tf = new Forest(N,M);\n\t\t\tbuffer = in.readLine();\n\t\t\tst = new StringTokenizer(buffer);\n\t\t\tK = new Integer(st.nextToken());\n\t\t\tbuffer = in.readLine();\n\t\t\tst = new StringTokenizer(buffer);\n\t\t\tfor(int i = 0; i<K; i++){\n\t\t\t\tx = new Integer(st.nextToken());\n\t\t\t\ty = new Integer(st.nextToken());\n\t\t\t\tf.desk[x-1][y-1] = 1;\n\t\t\t\tpairs.add(new Pair(x-1,y-1));\n\t\t\t}\n\t\t\tPair res = solve(f,pairs);\n\t\t\t\n\t\t\tout.write(res.toString());\n\t\t\tout.flush();\n\t\t} catch (Exception e) {\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tnew FireAgain().run();\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader r = new BufferedReader(new FileReader(\"input.txt\"));\n\t\tString s = r.readLine();\n\t\tString[] sp = s.split(\" \");\n\t\tn = new Integer(sp[0]);\n\t\tm = new Integer(sp[1]);\n\t\tboolean[][] v = new boolean[n][m];\n\t\tr.readLine();\n\t\ts = r.readLine();\n\t\tsp = s.split(\" \");\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tfor (int i = 0; i < sp.length; i += 2) {\n\t\t\tv[new Integer(sp[i]) - 1][new Integer(sp[i + 1]) - 1] = true;\n\t\t\tq.add(new Integer(sp[i]) - 1);\n\t\t\tq.add(new Integer(sp[i + 1]) - 1);\n\t\t}\n\n\t\tint[] dx = { 1, -1, 0, 0 };\n\t\tint[] dy = { 0, 0, 1, -1 };\n\t\tint lx = -1;\n\t\tint ly = -1;\n\t\twhile (!q.isEmpty()) {\n\t\t\tint x = q.remove();\n\t\t\tint y = q.remove();\n\t\t\tlx = x;\n\t\t\tly = y;\n\t\t\tfor (int i = 0; i < dy.length; i++) {\n\t\t\t\tint nx = x + dx[i];\n\t\t\t\tint ny = y + dy[i];\n\t\t\t\tif (valid(nx, ny) && !v[nx][ny]) {\n\t\t\t\t\tv[nx][ny] = true;\n\t\t\t\t\tq.add(nx);\n\t\t\t\t\tq.add(ny);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlx++;\n\t\tly++;\n\t\tBufferedWriter wr=new BufferedWriter(new FileWriter(\"output.txt\"));\n\t\twr.write(\"\"+lx + \" \" + ly);\n\t\twr.newLine();\n\t\twr.close();\n\t\t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String... strings) throws InterruptedException {\n\t\tnew Thread(new Solution()).start();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        try {\n            InputStream input = System.in;\n            OutputStream output = System.out;\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\n            out = new PrintWriter(new PrintStream(new File(\"output.txt\")));\n            solve();\n            out.close();\n            br.close();\n        } catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastReader input = new FastReader();\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\n\n\t\tn = input.nextInt();\n\t\tm = input.nextInt();\n\t\tgrid = new int[n][m];\n\n\t\tint k = input.nextInt();\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tArrays.fill(grid[i], Integer.MAX_VALUE);\n\t\t}\n\n\t\tQueue<Pair> q = new LinkedList<Pair>();\n\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tint x = input.nextInt() - 1;\n\t\t\tint y = input.nextInt() - 1;\n\n\t\t\tq.add(new Pair(x, y));\n\t\t\tgrid[x][y] = 0;\n\n\t\t\twhile (!q.isEmpty()) {\n\t\t\t\tPair cur = q.poll();\n\t\t\t\tfor (int j = 0; j < dr.length; j++) {\n\t\t\t\t\tint r = cur.x;\n\t\t\t\t\tint c = cur.y;\n\t\t\t\t\tint nr = r + dr[j];\n\t\t\t\t\tint nc = c + dc[j];\n\t\t\t\t\tint dist = grid[r][c] + 1;\n\n\t\t\t\t\tif (isValid(nr, nc) && grid[nr][nc] > dist) {\n\t\t\t\t\t\tgrid[nr][nc] = dist;\n\n\t\t\t\t\t\tq.add(new Pair(nr, nc));\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tint max = -1;\n\t\tint x = -1;\n\t\tint y = -1;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (grid[i][j] > max) {\n\t\t\t\t\tmax = grid[i][j];\n\t\t\t\t\tx = i + 1;\n\t\t\t\t\ty = j + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.println(x + \" \" + y);\n\t\tout.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tFastScanner scan = null;\n\t\tPrintWriter out = null;\n\t\ttry{\n\t\t\tscan = new FastScanner(new FileInputStream(\"input.txt\"));\n\t\t\tout = new PrintWriter(new FileOutputStream(\"output.txt\"));\n\t\t}catch(FileNotFoundException e){\n\t\t\tscan = new FastScanner(System.in);\n\t\t\tout = new PrintWriter(System.out);\n\t\t}\n\t\t\n\t\t n = scan.nextInt();\n\t\t m = scan.nextInt();\n\t\tint k = scan.nextInt();\n\t\tint[][] board = new int[n+1][m+1];\n\t\tString[] ins = scan.nextLine().split(\" \",-1);\n\t\tList<Integer> ps = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < 2 * k; i += 2){\n\t\t\tint a = Integer.parseInt(ins[i]);\n\t\t\tint b = Integer.parseInt(ins[i+1]);\n\t\t\tboard[a][b] = 1;\n\t\t\tps.add(a * 2001 + b);\n\t\t}\n\t\t\n\t\tint retx = 1, rety = 1;\n\t\tint[] dx = {0,1,0,-1};\n\t\tint[] dy = {1,0,-1,0};\n\t\twhile(true){\n\t\t\tboolean find = false;\n\t\t\tList<Integer> ps2 = new ArrayList<Integer>();\n\t\t\tfor(Integer p : ps){\n\t\t\t\tint i = p / 2001;\n\t\t\t\tint j = p % 2001;\n\t\t\t\tfor(int q = 0; q < 4; q++){\n\t\t\t\t\tint nx = i + dx[q];\n\t\t\t\t\tint ny = j + dy[q];\n\t\t\t\t\tif(in(nx,ny) && board[nx][ny] == 0){\n\t\t\t\t\t\tboard[nx][ny] = 1;\n\t\t\t\t\t\tretx = nx;\n\t\t\t\t\t\trety = ny;\n\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\tps2.add(nx * 2001 + ny);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tboard[i][j] = 2;\n\t\t\t}\n\t\t\tps = ps2;\n\t\t\tif(!find) break;\n\t\t}\n\t\tout.println(retx + \" \" + rety);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner();\n        n = sc.nextInt(); m = sc.nextInt(); k = sc.nextInt();\n        int[] xs = new int[k], ys = new int[k];\n        for(int i = 0; i < k; i++) {\n            xs[i] = sc.nextInt() - 1; ys[i] = sc.nextInt() - 1;\n        }\n\n        int[][] dist = bfs(xs, ys);\n\n        int x = 0, y = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < m; j++)\n                if(dist[i][j] > dist[x][y]) {\n                    x = i; y = j;\n                }\n        x++; y++;\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        out.println(x + \" \" + y);\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "        public static void main(String[] args) throws IOException {\n            Run run = new Run();\n            Thread thread = new Thread(run);\n            thread.run();\n        }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream;\n        try {\n            inputStream = new FileInputStream(\"input.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        OutputStream outputStream;\n        try {\n            outputStream = new FileOutputStream(\"output.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        CFireAgain solver = new CFireAgain();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"input.txt\"));\n        String[] s = in.readLine().split(\" \");\n        int n = Integer.parseInt(s[0]);\n        int m = Integer.parseInt(s[1]);\n        int k = Integer.parseInt(in.readLine());\n        s = in.readLine().split(\" \");\n        Point[] inp = new Point[k];\n        int p = 0;\n        for (int i = 0; i < k; i++) {\n            inp[i] = new Point(Integer.parseInt(s[p++]),\n                    Integer.parseInt(s[p++]));\n        }\n        int max = -1;\n        int maxx = -1;\n        int maxy = -1;\n        int i;\n        int j, dist;\n        for (i = 1; i <= n; i++) {\n            for (j = 1; j <= m; j++) {\n                dist = 1000000;\n                for (int l = 0; l < inp.length; l++) {\n                    dist = Math.min(\n                            Math.abs(inp[l].x - i) + Math.abs(inp[l].y - j),\n                            dist);\n                }\n                if (dist > max) {\n                    max = dist;\n                    maxx = i;\n                    maxy = j;\n                }\n            }\n        }\n        String res = maxx + \" \" + maxy + \"\\n\";\n        FileWriter out = new FileWriter(new File(\"output.txt\"));\n        out.append(res);\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new TaskC().start();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        input = new BufferedReader(new FileReader(\"input.txt\")); \n        output = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n        new incendio();\n        output.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tLocale.setDefault(Locale.US);\n\t\tnew Thread(new Solution()).start();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)throws IOException, URISyntaxException {\n        Reader.init(new FileInputStream(\"input.txt\"));\n        StringBuilder s=new StringBuilder();\n        boolean[][]vis=new boolean[Reader.nextInt()][Reader.nextInt()];\n        int k=Reader.nextInt(),r,c;\n        Queue<Point>q=new LinkedList<Point>();\n        while(k-->0) {\n            r=Reader.nextInt()-1;\n            c=Reader.nextInt()-1;\n            vis[r][c]=true;\n            q.add(new Point(r,c));\n        }\n        Point end=null;\n        int[]x={0,0,1,-1},y={1,-1,0,0};\n        int a,b,i;\n        while(!q.isEmpty()) {\n            end=q.poll();\n            for(i=0;i<4;i++) {\n                a=end.x+x[i];\n                b=end.y+y[i];\n                if(a>=0&&b>=0&&a<vis.length&&b<vis[a].length&&!vis[a][b]) {\n                    vis[a][b]=true;\n                    q.add(new Point(a,b));\n                }\n            }\n        }\n        s.append(end.x+1).append(' ').append(end.y+1);\n        PrintWriter p=new PrintWriter(\"output.txt\");\n        p.println(s);\n        p.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        FileWriter fw=new FileWriter(\"output.txt\");\n        boolean[][] grid = new boolean[n][m];\n        int[] dx = new int[] { 1, 0, -1, 0 };\n        int[] dy = new int[] { 0, -1, 0, 1 };\n        int k = sc.nextInt();\n        LinkedList<Struct> a = new LinkedList<Struct>();\n        for (int i = 0; i < k; i++) {\n            a.add(new Struct(sc.nextInt() - 1, sc.nextInt() - 1, 0));\n        }\n        int max = Integer.MIN_VALUE, maxX = -1, maxY = -1;\n        while (!a.isEmpty()) {\n            Struct tmp = a.remove();\n            if (grid[tmp.x][tmp.y] == true)\n                continue;\n            grid[tmp.x][tmp.y] = true;\n            if (tmp.count > max) {\n                max = tmp.count;\n                maxX = tmp.x;\n                maxY = tmp.y;\n            }\n            for (int i = 0; i < 4; i++) {\n                int nx = tmp.x + dx[i];\n                int ny = tmp.y + dy[i];\n                if (nx < n && nx >= 0 && ny < m && ny >= 0) {\n                    if (grid[nx][ny] == false) {\n                        a.add(new Struct(nx, ny, tmp.count + 1));\n                    }\n                }\n            }\n        }\n        fw.write((maxX + 1) + \" \" + (maxY + 1)+\"\\n\");\n        System.out.println((maxX + 1) + \" \" + (maxY + 1));\n        fw.flush();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream;\n        try {\n            inputStream = new FileInputStream(\"input.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        OutputStream outputStream;\n        try {\n            outputStream = new FileOutputStream(\"output.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        FireAgain solver = new FireAgain();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t\t\t\t} catch (SecurityException e) {}\n\t\t\t\t\tnew Main().run();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1L << 24).start(); \n\t}\n\n\tBufferedReader in;\n\tPrintWriter out;\n\tStringTokenizer st = new StringTokenizer(\"\");\n\t\n\tint N;\n\tint M;\n\tboolean[][] used;\n\tQueue<Integer> queue;\n\t\n\tint[] dx = { -1, 0, 1, 0 };\n\tint[] dy = { 0, -1, 0, 1 };\n\tint ans = -1;\n\t\n\tvoid run() throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(\"output.txt\");\n\t\t\n\t\tN = nextInt();\n\t\tM = nextInt();\n\t\tused = new boolean [N][M];\n\t\tqueue = new ArrayDeque<Integer> (N * M);\n\t\tfor (int K = nextInt(); K --> 0; )\n\t\t\taddState(nextInt() - 1, nextInt() - 1);\n\t\twhile (!queue.isEmpty()) {\n\t\t\tint cv = queue.poll();\n\t\t\tint cx = cv / M;\n\t\t\tint cy = cv % M;\n\t\t\tfor (int d = 0; d < dx.length; d++) {\n\t\t\t\tint nx = cx + dx[d];\n\t\t\t\tint ny = cy + dy[d];\n\t\t\t\tif (0 <= nx && nx < N && 0 <= ny && ny < M && !used[nx][ny])\n\t\t\t\t\taddState(nx, ny);\n\t\t\t}\n\t\t}\n\t\tout.println((1 + ans / M) + \" \" + (1 + ans % M));\n\t\tout.close();\n\t}\n\t\n\tvoid addState(int x, int y) {\n\t\tused[x][y] = true;\n\t\tqueue.add(ans = code(x, y));\n\t}\n\n\tint code(int x, int y) {\n\t\treturn x * M + y;\n\t}\n\n\tString nextToken() throws IOException {\n\t\twhile (!st.hasMoreTokens()) {\n\t\t\tst = new StringTokenizer(in.readLine());\n\t\t}\n\t\t\n\t\treturn st.nextToken();\n\t}\n\t\n\tint nextInt() throws IOException {\n\t\treturn Integer.parseInt(nextToken());\n\t}\n\t\n\tlong nextLong() throws IOException {\n\t\treturn Long.parseLong(nextToken());\n\t}\n\t\n\tdouble nextDouble() throws IOException {\n\t\treturn Double.parseDouble(nextToken());\n\t}\n\t\n\tString nextLine() throws IOException {\n\t\tst = new StringTokenizer(\"\");\n\t\treturn in.readLine();\n\t}\n\t\n\tboolean EOF() throws IOException {\n\t\twhile (!st.hasMoreTokens()) {\n\t\t\tString s = in.readLine();\n\t\t\t\n\t\t\tif (s == null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tst = new StringTokenizer(s);\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner s = new Scanner(new File(\"input.txt\")/*System.in*/);\n        int n = s.nextInt();\n        int m = s.nextInt();\n        int k = s.nextInt();\n//        pair[] arr = new pair[n];\n        Queue<pair> q = new LinkedList<>();\n        PrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n        boolean[][] visited = new boolean[n][m];\n        for (int i = 0; i < k; i++) {\n            int x = s.nextInt() - 1;\n            int y  = s.nextInt() - 1;\n            visited[x][y] = true;\n            pair p = new pair(x,y);\n//            arr[i] = p;\n            q.add(p);\n        }\n\n        q.add(null);\n        int[] dx = {0,0,1,-1};\n        int[] dy = {1,-1,0,0};\n        int ansX = q.peek().x;\n        int ansY = q.peek().y;\n        while(true){\n            if(q.peek() == null){\n                q.poll();\n                q.add(null);\n            }\n            pair p = q.poll();\n            if(p == null){\n                break;\n            }\n            for (int i = 0; i < 4; i++) {\n                if(isValid(p.x + dx[i],p.y+dy[i],n,m) && !visited[p.x + dx[i]][p.y+dy[i]]){\n                    q.add(new pair(p.x + dx[i],p.y+dy[i]));\n                    ansX = p.x + dx[i];\n                    ansY = p.y + dy[i];\n                    visited[ansX][ansY] = true;\n                }\n            }\n        }\n        out.println((ansX+1) + \" \" + (ansY+1));\n        out.close();\n\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tScanner sc = new Scanner(new File(\"input.txt\"));\n\t\tPrintWriter output = new PrintWriter(\"output.txt\");\n\t\tint N = sc.nextInt();\n\t\tint M = sc.nextInt();\n\t\tint K = sc.nextInt();\n\t\tint[] x = new int[K];\n\t\tint[] y = new int[K];\n\t\tfor(int i = 0 ; i < K ; i++){\n\t\t\tx[i] = sc.nextInt();\n\t\t\ty[i] = sc.nextInt();\n\t\t}\n\t\tint max = -1, max_x = -1, max_y = -1;\n\t\tfor(int i = 1 ; i <= N ; i++){\n\t\t\tfor(int j = 1 ; j <= M ; j++){\n\t\t\t\tint min = Integer.MAX_VALUE;\n\t\t\t\tfor(int k = 0 ; k < K ; k++){\n\t\t\t\t\tmin = Math.min(min, Math.abs(x[k] - i) + Math.abs(y[k] - j));\n\t\t\t\t}\n\t\t\t\tif(min > max){\n\t\t\t\t\tmax = min;\n\t\t\t\t\tmax_x = i;\n\t\t\t\t\tmax_y = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toutput.println(max_x + \" \" + max_y);\n\t\toutput.flush();\n\t}\n", "complexity": "cubic"}
{"code": "public static void main(String a[])throws IOException\nBufferedReader b = new BufferedReader(new FileReader(\"input.txt\"));\nPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\nint l=0,x2=0,x=0,y1=0,y=0,max=-1,min=100000,x1=0,n=0,j=0,k=0,p=0,m=0,i=0;\nString s;\ns=b.readLine();\nStringTokenizer c=new StringTokenizer(s);\nn=Integer.parseInt(c.nextToken());\nm=Integer.parseInt(c.nextToken());\nk=Integer.parseInt(b.readLine());\nint e[][]=new int[k][2];\ns=b.readLine();\nStringTokenizer z=new StringTokenizer(s);\nfor(i=0;i<k;i++)\n{\ne[i][0]=Integer.parseInt(z.nextToken());\ne[i][1]=Integer.parseInt(z.nextToken());\n}\nfor(i=1;i<=n;i++)\n{\nfor(j=1;j<=m;j++)\n{\nfor(l=0;l<k;l++)\n{\np=(int)Math.abs(e[l][0]-i)+(int)Math.abs(e[l][1]-j);\nif(p<min)\n{\nmin=p;\nx1=i;\ny1=j;\n}\n}\nif(min>max)\n{\nmax=min;\nx=x1;\ny=y1;\n}\nmin=100000;\n}\n}\nout.print(x+\" \"+y);\nout.close();\n}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new FileReader(new File(\"input.txt\")));\n        PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int[][] T = new int[n][m];\n        int k = in.nextInt();\n        int[] X = new int[k];\n        int[] Y = new int[k];\n        for (int i = 0; i < k; i++) {\n            X[i] = in.nextInt() - 1;\n            Y[i] = in.nextInt() - 1;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < m; j++) {\n                int min = Integer.MAX_VALUE;\n                for (int ii = 0; ii < k; ii++)\n                    min = Math.min(min,\n                            Math.abs(i - X[ii]) + Math.abs(j - Y[ii]));\n                max = Math.max(max, T[i][j] = min);\n            }\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < m; j++)\n                if (T[i][j] == max) {\n                    out.println((i + 1) + \" \" + (j + 1));\n                    out.flush();\n                    return;\n                }\n\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader s = new BufferedReader(new FileReader(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n//\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n//\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tString[] nm = s.readLine().split(\" \");\n\t\tint n = Integer.valueOf(nm[0]);\n\t\tint m = Integer.valueOf(nm[1]);\n\t\tint k = Integer.valueOf(s.readLine());\n\t\t\n\t\tint[][] dp = new int[n][m];\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tArrays.fill(dp[i], Integer.MAX_VALUE);\n\t\t}\n\t\tString[] st = s.readLine().split(\" \");\n\t\tint[][] trees = new int[k][2];\n\t\tfor (int l = 0 ; l < k ; l++) {\n\t\t\ttrees[l][0] = Integer.valueOf(st[l*2])-1;\n\t\t\ttrees[l][1] = Integer.valueOf(st[l*2+1])-1;\n\t\t}\n\t\t\n\t\tint maxtime = -1;\n\t\tint max_x = -1;\n\t\tint max_y = -1;\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tfor (int j = 0 ; j < m ; j++) {\n\t\t\t\tint minDist = n+m;\n\t\t\t\tfor (int l = 0 ; l < k ; l++) {\n\t\t\t\t\tminDist = Math.min(minDist, Math.abs(i - trees[l][0]) + Math.abs(j - trees[l][1]));\n\t\t\t\t}\n\t\t\t\tif (maxtime < minDist) {\n\t\t\t\t\tmaxtime = minDist;\n\t\t\t\t\tmax_x = i+1;\n\t\t\t\t\tmax_y = j+1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tout.println(max_x + \" \" + max_y);\n\t\tout.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        //new Thread(null, new _Solution(), \"\", 128 * (1L << 20)).start();\n        new Problem().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(new FileReader(\"input.txt\")); // new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(\"output.txt\"); //new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String [] args) throws IOException{\n\t\tScanner in = new Scanner(new FileInputStream(\"input.txt\"));\n\t\t//Scanner in = new Scanner(System.in);\n\t\tFile file = new File(\"output.txt\");\n\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\tif (!file.exists()) {\n\t\t     file.createNewFile();\n\t\t}\n\t\t\n\t\tint N = in.nextInt();\n\t\tint M = in.nextInt();\n\t\tint K = in.nextInt();\n\t\tint [][] fireTime = new int[N][M];\n\t\tfor (int i=0; i<K; i++){\n\t\t\tint x = in.nextInt()-1;\n\t\t\tint y = in.nextInt()-1;\n\t\t\tfireTime[x][y] = -1;\n\t\t\t\n\t\t\tfor (int j=1; j<=x+y; j++){\n\t\t\t\tfor (int p=0; p<=j; p++){\n\t\t\t\t\tif (x-j+p >= 0 && y-p >=0 && (fireTime[x-j+p][y-p] == 0 || fireTime[x-j+p][y-p] > j)){\n\t\t\t\t\t\tfireTime[x-j+p][y-p] = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j=1; j<=x+M-1-y; j++){\n\t\t\t\tfor (int p=0; p<=j; p++){\n\t\t\t\t\tif (x-j+p >= 0 && y+p < M && (fireTime[x-j+p][y+p] == 0 || fireTime[x-j+p][y+p] > j)){\n\t\t\t\t\t\tfireTime[x-j+p][y+p] = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j=1; j<=N-1-x+y; j++){\n\t\t\t\tfor (int p=0; p<j; p++){\n\t\t\t\t\tif (x+j-p < N && y-p >= 0 && (fireTime[x+j-p][y-p] == 0 || fireTime[x+j-p][y-p] > j)){\n\t\t\t\t\t\tfireTime[x+j-p][y-p] = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j=1; j<=N-1-x+M-1-y; j++){\n\t\t\t\tfor (int p=0; p<=j; p++){\n\t\t\t\t\t//System.out.println(j+\" \"+p);\n\t\t\t\t\tif (x+j-p < N && y+p < M && (fireTime[x+j-p][y+p] == 0 || fireTime[x+j-p][y+p] > j)){\n\t\t\t\t\t\t//System.out.println(j);\n\t\t\t\t\t\tfireTime[x+j-p][y+p] = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint max = -1;\n\t\tint tx = 1;\n\t\tint ty = 1;\n\t\tfor (int i=0; i<N; i++){\n\t\t\tfor (int j=0; j<M; j++){\n\t\t\t\t//System.out.print(fireTime[i][j]+\" \");\n\t\t\t\tif (fireTime[i][j] > max){\n\t\t\t\t\tmax = fireTime[i][j];\n\t\t\t\t\ttx = i+1;\n\t\t\t\t\tty = j+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//System.out.println();\n\t\t}\n\t\t//System.out.println(tx+\" \"+ty);\n\t\tString output = tx+\" \"+ty;\n\t\t\n\t\tbyte[] bA = output.getBytes();\n\t\tfos.write(bA);\n\t\tfos.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main (String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader (inputStream);\n\t\tPrintWriter out = new PrintWriter (outputStream);\n\t\tProblemCFireAgain solver = new ProblemCFireAgain ();\n\t\tsolver.solve (1, in, out);\n\t\tout.close ();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\t// TODO Auto-generated method stub\n\t\tFireAgain fa = new FireAgain();\n\t\tScanner Scan = new Scanner(new FileInputStream(\"input.txt\"));\n\t\tfa.out = new PrintStream(new File(\"output.txt\"));\n\t\tfa.n = Scan.nextInt();\n\t\tfa.m = Scan.nextInt();\n\t\tint k = Scan.nextInt();\n\t\tfa.arr = new boolean[2001][2001];\n\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tfa.coordinate = new Point();\n\t\t\tfa.coordinate.x = Scan.nextInt();\n\t\t\tfa.coordinate.y = Scan.nextInt();\n\t\t\tfa.q.add(fa.coordinate);\n\t\t\tfa.arr[fa.coordinate.x][fa.coordinate.y] = true;\n\t\t}\n\n\t\tfa.bfs(fa.q.peek());\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tScanner in = new Scanner(\"input.txt\");\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\tn=in.nextInt();\n\t\tm=in.nextInt();\n\t\tburned=new boolean[n][m];\n\t\tint k=in.nextInt();\n\t\tQueue<Pair> queue=new LinkedList<>();\n\t\tPair prev=null;\n\t\tfor(int i=0;i<k;i++)\n\t\t{\n\t\t\tint x=in.nextInt();\n\t\t\tint y=in.nextInt();\n\t\t\tburned[x-1][y-1]=true;\n\t\t\tqueue.add(prev=new Pair(x-1, y-1));\n\t\t}\n\t\twhile(!queue.isEmpty())\n\t\t{\n\t\t\tQueue<Pair> tempqueue=new LinkedList<>();\n\t\tfor(Pair p : queue)\n\t\t{\n\t\t\tint x=p.x;\n\t\t\tint y=p.y;\n\t\t\tprev=p;\n\t\t\tfor(int i=0;i<4;i++)\n\t\t\t{\n\t\t\t\tif(isvalid(x+dx[i], y+dy[i])&&!burned[x+dx[i]][y+dy[i]])\n\t\t\t\t{\n\t\t\t\t\ttempqueue.add(new Pair(x+dx[i], y+dy[i]));\n\t\t\t\t\tburned[x+dx[i]][y+dy[i]]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tqueue=tempqueue;\n\t\t}\n\t\tout.printf(\"%d %d\\n\",(prev.x+1),(prev.y+1));\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) { \n        R035CRetry obj = new R035CRetry();\n        obj.solve();\n        obj.finish();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc=new Scanner(new File(\"input.txt\"));\n//        Scanner sc=new Scanner(System.in);\n        PrintWriter pw=new PrintWriter(\"output.txt\");\n        int n=sc.nextInt(),m=sc.nextInt(),k=sc.nextInt();\n        Queue<Integer> pq=new ArrayDeque<>();\n        boolean[] vis=new boolean[n*m];\n        for(int i=0;i<k;i++){\n            int r=sc.nextInt()-1,c=sc.nextInt()-1;\n            pq.add(m*r+c);\n            vis[m*r+c]=true;\n        }\n        sc.close();\n        int ans=0;\n        while(pq.size()!=0){\n            int x=pq.remove();\n\n            ans=x;\n            if(n!=1 && x%n==0){\n                if(x+m<n*m&&!vis[x+m]){\n                    pq.add(x+m);\n                    vis[x+m]=true;\n                }\n                if(x-m>=0&&!vis[x-m]){\n                    pq.add(x-m);\n                    vis[x-m]=true;\n                }\n                if(x+1<n*m&&!vis[x+1]){\n                    pq.add(x+1);\n                    vis[x+1]=true;\n                }\n            }\n            else if(n!=1 && (x+1)%n==0){\n                if(x+m<n*m&&!vis[x+m]){\n                    pq.add(x+m);\n                    vis[x+m]=true;\n                }\n                if(x-m>=0&&!vis[x-m]){\n                    pq.add(x-m);\n                    vis[x-m]=true;\n                }\n                if(x-1>=0&&!vis[x-1]){\n                    pq.add(x-1);\n                    vis[x-1]=true;\n                }\n            }\n            else{\n                if(x+m<n*m&&!vis[x+m]){\n                    pq.add(x+m);\n                    vis[x+m]=true;\n                }\n                if(x-m>=0&&!vis[x-m]){\n                    pq.add(x-m);\n                    vis[x-m]=true;\n                }\n                if(x-1>=0&&!vis[x-1]){\n                    pq.add(x-1);\n                    vis[x-1]=true;\n                }\n                if(x+1<n*m&&!vis[x+1]){\n                    pq.add(x+1);\n                    vis[x+1]=true;\n                }\n            }\n        }\n        pw.println((ans/m+1)+\" \"+(ans%m+1));\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"input.txt\"));\n        PrintWriter out = new PrintWriter(\"output.txt\");\n\n        String[] raw = in.readLine().split(\" \");\n        int n = Integer.parseInt(raw[0]);\n        int m = Integer.parseInt(raw[1]);\n\n        int k = Integer.parseInt(in.readLine());\n\n        raw = in.readLine().split(\" \");\n\n        boolean[][] map = new boolean[n][m];\n        LinkedList<Point> queue = new LinkedList<>();\n\n        for (int i = 0; i < k; i++) {\n            Point fireStarter = new Point(Integer.parseInt(raw[i * 2]) - 1, Integer.parseInt(raw[i * 2 + 1]) - 1);\n\n            queue.addLast(fireStarter);\n        }\n\n        int treesLeft = n * m;\n\n        while (true) {\n            Point firepoint = queue.removeFirst();\n\n            if (map[firepoint.x][firepoint.y])\n                continue;\n\n            treesLeft--;\n            map[firepoint.x][firepoint.y] = true;\n\n            if (treesLeft == 0) {\n                out.printf(\"%d %d\", firepoint.x + 1, firepoint.y + 1);\n                out.flush();\n                return;\n            }\n\n            if (firepoint.x > 0 && !map[firepoint.x - 1][firepoint.y])\n                queue.add(new Point(firepoint.x - 1, firepoint.y));\n\n            if (firepoint.y > 0 && !map[firepoint.x][firepoint.y - 1])\n                queue.add(new Point(firepoint.x, firepoint.y - 1));\n\n            if (firepoint.x < n - 1 && !map[firepoint.x + 1][firepoint.y])\n                queue.add(new Point(firepoint.x + 1, firepoint.y));\n\n            if (firepoint.y < m - 1 && !map[firepoint.x][firepoint.y + 1])\n                queue.add(new Point(firepoint.x, firepoint.y + 1));\n\n//\n//            for (int i = 0; i < n; i++) {\n//                for (int j = 0; j < m; j++) {\n//                    System.out.printf(\"%d \", map[i][j] ? 1 : 0);\n//                }\n//                System.out.println();\n//            }\n//            System.out.println(\"\\n-------\\n\");\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"input.txt\"));\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        String [] use = null;\n        use = br.readLine().split(\" \");\n        N = parseInt(use[0]);\n        M = parseInt(use[1]);\n        int K = parseInt(br.readLine());\n        use = br.readLine().split(\" \");\n        for(int i = 0 ; i < 2 * K ; i += 2){\n            int f = parseInt(use[i]) - 1;\n            int t = parseInt(use[i + 1]) - 1;\n            bfs.offer(new state(f, t, 0));\n        }\n        Point ans = runBFS();\n        out.println(ans.x + \" \" + ans.y);\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) {\n    new Thread(new Solution()).start();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new FireAgain().run();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Main().run();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) { \n        R035C obj = new R035C();\n        obj.solve();\n        obj.finish();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)\n        InputStream inputStream;\n        try\n        {\n            inputStream = new FileInputStream(\"input.txt\");\n        } catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n        OutputStream outputStream;\n        try\n        {\n            outputStream = new FileOutputStream(\"output.txt\");\n        } catch (IOException e)\n        {\n            throw new RuntimeException(e);\n        }\n        FastScanner in = new FastScanner(inputStream);\n        FastPrinter out = new FastPrinter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        P035C solution = new P035C();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        //new Thread(null, new _Solution(), \"\", 128 * (1L << 20)).start();\n        new Problem().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        // BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n          BufferedReader in=new BufferedReader(new FileReader(\"input.txt\"));\n          BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\n         StringTokenizer s = new StringTokenizer(in.readLine());\n         int n=Integer.parseInt(s.nextToken());\n         int m=Integer.parseInt(s.nextToken());\n         fired=new boolean[n][m];\n         Pair result=null;\n         s = new StringTokenizer(in.readLine());\n         int firenum=Integer.parseInt(s.nextToken());\n         s = new StringTokenizer(in.readLine());\n         int i;\n         ArrayList<Integer> tree=new ArrayList<>();\n         for(i=0;i<firenum*2;i++){\n             tree.add(Integer.parseInt(s.nextToken())-1);\n         }\n        for(i=0;i<2*firenum-1;i+=2){\n           fired[tree.get(i)][tree.get(i+1)]=true;\n           q.add(new Pair(tree.get(i),tree.get(i+1)));\n        }\n        index=(Pair) q.peek();\n         result=bfs((int)index.getKey(),(int)index.getValue(),n,m);\n       int x1=(int)result.getKey()+1;\n       int x2=(int)result.getValue()+1;\n        String str = x1 + \" \" + x2;\n        writer.write(str);\n\n        writer.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader _br = new BufferedReader(new FileReader(new File(\"input.txt\")));\n\t\tPrintWriter _pw = new PrintWriter(new FileWriter(new File(\"output.txt\")));\n\t\tnew C(_br, _pw).run();\n\t\t_br.close();\n\t\t_pw.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException \n\n\t      FileInputStream in = null;\n\t      FileOutputStream out = null;\n\t\n\t      try \n\t      {\n\t         in = new FileInputStream(\"input.txt\");\n\t         out = new FileOutputStream(\"output.txt\");\n\t         \n\t\t  \t\tScanner sc = new Scanner(in);\n\n\t      \n\t\tint h = sc.nextInt();\n\t\tint w = sc.nextInt();\n\t\t\n\t\tint k = sc.nextInt();\n\t\t\n\t\tint[] xk = new int[k];\n\t\tint[] yk = new int[k];\n\t\t\n\t\tfor(int i = 0; i < k; i++)\n\t\t{\n\t\t\tint y = sc.nextInt()-1;\n\t\t\tint x = sc.nextInt()-1;\n\t\t\t\n\t\t\txk[i] = x;\n\t\t\tyk[i] = y;\n\t\t}\n\n\t\tint best = -1;\n\t\tint bestx = -1;\n\t\tint besty = -1;\n\t\tfor(int x = 0; x < w; x++)\n\t\t{\n\t\t\tfor(int y = 0; y < h; y++)\n\t\t\t{\n\t\t\t\tint cur = 99999;\n\t\t\t\tfor(int f = 0; f < k; f++)\n\t\t\t\t{\n\t\t\t\t\tcur = Math.min(cur, Math.abs(xk[f] - x)+Math.abs(yk[f] - y));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(cur > best)\n\t\t\t\t{\n\t\t\t\t\tbest = cur;\n\t\t\t\t\tbestx = x;\n\t\t\t\t\tbesty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n//\t\tSystem.out.println((besty+1) + \" \" + (bestx+1));\n\t\tString s = (besty+1) + \" \" + (bestx+1);\n\n\t\tout.write(s.getBytes());\n\t\t\n\t      }finally \n\t      {\n\t         if (in != null) \n\t         {\n\t            in.close();\n\t         }\n\t         if (out != null) \n\t         {\n\t            out.close();\n\t         }\n\t      }\t\t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew C().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(\"input.txt\");\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\n\t\t// Scanner sc = new Scanner(System.in);\n\t\t// PrintWriter out = new PrintWriter(System.out);\n\t\tN = sc.nextInt();\n\t\tM = sc.nextInt();\n\t\tK = sc.nextInt();\n\t\tb = new Pair[K];\n\t\tfor (int i = 0; i < K; i++)\n\t\t\tb[i] = new Pair(sc.nextInt() - 1, sc.nextInt() - 1);\n\n\t\tPair last = bfs();\n\t\tout.println((last.x) + \" \" + (last.y));\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream;\n\t\ttry {\n\t\t\tinputStream = new FileInputStream(\"input.txt\");\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tOutputStream outputStream;\n\t\ttry {\n\t\t\toutputStream = new FileOutputStream(\"output.txt\");\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream;\n        try {\n            inputStream = new FileInputStream(\"input.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        OutputStream outputStream;\n        try {\n            outputStream = new FileOutputStream(\"output.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "        public static void main(String[] args){\n                new Solution35C().run();\n        }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Fire_Again fire_again = new Fire_Again();\n        BufferedReader bufferedReader =\n                new BufferedReader(new FileReader(\"input.txt\"));\n        String[] nm = bufferedReader.readLine().split(\" \");\n        N = Integer.parseInt(nm[0]) + 1;\n        M = Integer.parseInt(nm[1]) + 1;\n        K = Integer.parseInt(bufferedReader.readLine());\n        used = new boolean[N][M];\n        String[] rc = bufferedReader.readLine().split(\" \");\n        for(int k = 0;k < rc.length;k+=2) {\n            int r = Integer.parseInt(rc[k]);\n            int c = Integer.parseInt(rc[k+1]);\n            pos.add(fire_again.new Pos(r,c,0));\n        }\n        fire_again.bfs();\n        PrintStream ps = new PrintStream(\"output.txt\");\n        ps.printf(\"%d %d\\n\",fire_again.lastRow,fire_again.lastCol);\n        ps.flush();\n        ps.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream;\n        try {\n            inputStream = new FileInputStream(\"input.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        OutputStream outputStream;\n        try {\n            outputStream = new FileOutputStream(\"output.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n//        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n//        InputStream inputStream = System.in;\n//        OutputStream outputStream = System.out;\n//        InputReader s = new InputReader(inputStream);\n//        PrintWriter out = new PrintWriter(outputStream);\n        \n        \n         // input.txt / output.txt\n         File file = new File(\"input.txt\") ; \n         Scanner s = new Scanner(file) ; \n        \n        int n = s.nextInt();\n        int m = s.nextInt(); \n        \n        marked = new boolean [n + 1 ][m + 1] ; \n        \n        int k = s.nextInt();\n        \n        Queue<Point> queue = new LinkedList<Point>(); \n        \n        \n        for(int i =0 ; i < k ; ++i){\n            int tempX = s.nextInt() ;\n            int tempY = s.nextInt() ; \n            marked[tempX][tempY] = true ; \n            queue.add(new Point(tempX , tempY));             \n        }\n        \n         Point c = null ;\n        \n         while(!queue.isEmpty()){\n             c = queue.poll() ; \n            \n            if(c.x>1 && !marked[c.x-1][c.y]){\n                marked[c.x -1 ][c.y] = true ; \n                queue.add(new Point(c.x-1,c.y));\n            }\n            \n            if(c.y>1 && !marked[c.x][c.y-1]){\n                marked[c.x][c.y-1] = true ; \n                queue.add(new Point(c.x,c.y-1));\n            }\n            \n            if(c.x < n  && !marked[c.x+1][c.y]){\n                marked[c.x + 1 ][c.y] = true ; \n                queue.add(new Point(c.x + 1,c.y));\n            }\n            \n            if(c.y < m && !marked[c.x][c.y+1]){\n                marked[c.x][c.y+1] = true ; \n                queue.add(new Point(c.x,c.y+1));\n            }\n        }\n        PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n        out.println(c.x+\" \"+c.y); \n        out.close();\n\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tbr = new BufferedReader(new FileReader(\"input.txt\"));\n\t\tpw = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\n\t\t//int qq = 1;\n\t\tint qq = Integer.MAX_VALUE;\n\t\t//int qq = readInt();\n\t\tfor(int casenum = 1; casenum <= qq; casenum++)\t{\n\t\t\tint r = readInt();\n\t\t\tint c = readInt();\n\t\t\tint n = readInt();\n\t\t\tint[][] dist = new int[r][c];\n\t\t\tfor(int i = 0; i < r; i++) {\n\t\t\t\tArrays.fill(dist[i], 1 << 25);\n\t\t\t}\n\t\t\tLinkedList<State> q = new LinkedList<State>();\n\t\t\twhile(n-- > 0) {\n\t\t\t\tq.add(new State(readInt()-1, readInt()-1));\n\t\t\t\tdist[q.peekLast().x][q.peekLast().y] = 0;\n\t\t\t}\n\t\t\tint[] dx = new int[]{-1,1,0,0};\n\t\t\tint[] dy = new int[]{0,0,-1,1};\n\t\t\tState ret = q.peekLast();\n\t\t\twhile(!q.isEmpty()) {\n\t\t\t\tState curr = q.removeFirst();\n\t\t\t\tret = curr;\n\t\t\t\tfor(int k = 0; k < dx.length; k++) {\n\t\t\t\t\tint nx = curr.x + dx[k];\n\t\t\t\t\tint ny = curr.y + dy[k];\n\t\t\t\t\tif(nx >= 0 && nx < r && ny >= 0 && ny < c && dist[nx][ny] > 1 + dist[curr.x][curr.y]) {\n\t\t\t\t\t\tdist[nx][ny] = 1 + dist[curr.x][curr.y];\n\t\t\t\t\t\tq.add(new State(nx, ny));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpw.println(ret.x+1 + \" \" + (ret.y+1));\n\t\t}\n\t\texitImmediately();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tFile f = new File(\"input.txt\");\n\t\tScanner sc = new Scanner(f);\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tboolean[][] grid = new boolean[n][m];\n\t\tfor (int i = 0; i < n; i++) for (int j = 0; j < m; j++) \n\t\t\tgrid[i][j] = false;\n\t\tQueue<Pair> q = new LinkedList<>();\n\t\tint cnt = sc.nextInt();\n\t\tfor (int i = 0; i < cnt; i++) {\n\t\t\tint x = sc.nextInt();\n\t\t\tint y = sc.nextInt();\n\t\t\tx--;\n\t\t\ty--;\n\t\t\tgrid[x][y] = true;\n\t\t\tq.add(new Pair(x, y));\n\t\t}\n\t\tPair last = new Pair(-1, -1);\n\t\twhile (!q.isEmpty()) {\n\t\t\tPair current = q.poll();\n\t\t\tlast = current;\n\t\t\tfor (int i = -1; i <= 1; i++) {\n\t\t\t\tfor (int j = -1; j <= 1; j++) {\n\t\t\t\t\tif (i != 0 && j != 0) continue;\n\t\t\t\t\tif (inside(current.x + i, current.y + j, n, m) &&\n\t\t\t\t\t\t\t!grid[current.x + i][current.y + j]) {\n\t\t\t\t\t\tgrid[current.x + i][current.y + j] = true;\n\t\t\t\t\t\tq.add(new Pair(current.x + i, current.y + j));\n\t\t\t\t\t\t//bw.append((current.x + i) + \" \" + (current.y + j) + \"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tbw.append((last.x + 1) + \" \" + (last.y + 1) + \"\\n\");\n\t\tbw.flush();\n\t\tbw.close();\n\t\t\n\t\tsc.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tThread t = new Thread(null, null, \"~\", Runtime.getRuntime().maxMemory()){\n\t\t\t@Override\n\t\t\tpublic void run(){\n\t\t\t\ttry {\n\t\t\t\t\tsolve();\n\t\t\t\t} catch(Exception e) {\n\t\t\t\t\tSystem.err.println(\"ERROR\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tt.start();\n\t\tt.join();\t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFile in = new File(\"input.txt\"), out = new File(\"output.txt\");\n\t\tScanner s;\n\t\tPrintWriter pw;\n\t\tif (in.exists()) {\n\t\t\ts = new Scanner(in);\n\t\t\tpw = new PrintWriter(out);\n\t\t} else {\n\t\t\ts = new Scanner(System.in);\n\t\t\tpw = new PrintWriter(System.out);\n\t\t}\n\t\tint n = s.nextInt(), m = s.nextInt();\n\t\tint k = s.nextInt();\n\t\tList<int[]> list = new ArrayList<int[]>();\n\t\tfor (int t = 0; t < k; ++t) {\n\t\t\tlist.add(new int[] { s.nextInt() - 1, s.nextInt() - 1 });\n\t\t}\n\t\tint max = 0, mi = 1, mj = 1;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tfor (int j = 0; j < m; ++j) {\n\t\t\t\tint min = Integer.MAX_VALUE;\n\t\t\t\tfor (int[] p : list) {\n\t\t\t\t\tmin = Math.min(min, Math.abs(i - p[0]) + Math.abs(j - p[1]));\n\t\t\t\t}\n\t\t\t\tif (min > max) {\n\t\t\t\t\tmax = Math.max(max, min);\n\t\t\t\t\tmi = i + 1;\n\t\t\t\t\tmj = j + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpw.println(mi + \" \" + mj);\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException \n\t\tScanner sc = new Scanner(\"input.txt\");\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\n\t\tQueue<Pair> q = new LinkedList<Pair>();\n\t\tint n = sc.nextInt(),m = sc.nextInt() , k = sc.nextInt();\n\t\tboolean [][] vis = new boolean[n][m];\n\t\twhile(k-->0)\n\t\t\tq.add(new Pair(sc.nextInt()-1,sc.nextInt()-1));\n\t\n\t\tint ansX = 1 , ansY = 1;\n\t\t\n\t\twhile(!q.isEmpty())\n\t\t{\n\t\t\tPair cur = q.poll();\n\t\t\tif(vis[cur.i][cur.j])continue;\n\t\t\tansX = cur.i ; ansY = cur.j;\n\t\t\tvis[cur.i][cur.j] = true;\n\t\t\tfor (int i = 0; i < di.length; i++) {\n\t\t\t\tint ni = cur.i + di[i] , nj = cur.j + dj[i];\n\t\t\t\tif(ni>=0 && ni<n && nj>=0 && nj<m && !vis[ni][nj])\n\t\t\t\t\tq.add(new Pair(ni,nj));\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.append(++ansX+\" \"+ ++ansY);\n\t\tout.flush();\n\t\t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tScanner c = new Scanner(new FileReader(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\n\t\tint N=c.nextInt();\n\t\tint M=c.nextInt();\n\t\tint A[][]=new int[N][M];\n\t\tfor(int i=0;i<N;i++)\n\t\t\tArrays.fill(A[i],Integer.MAX_VALUE/100);\n\t\tint K=c.nextInt();\n\t\tfor(int i=0;i<K;i++)\n\t\t\t{\n\t\t\tint x=c.nextInt()-1;\n\t\t\tint y=c.nextInt()-1;\n\t\t\tfor(int i1=0;i1<N;i1++)\n\t\t\t\t{\n\t\t\t\tfor(int j1=0;j1<M;j1++)\n\t\t\t\t\tA[i1][j1]=Math.min(A[i1][j1],Math.abs(i1-x)+Math.abs(j1-y));\n\t\t\t\t}\n\t\t\t}\n\t\tint maxi=0;\n\t\tint maxj=0;\n\t\tfor(int i=0;i<N;i++)\n\t\t\t{\n\t\t\tfor(int j=0;j<M;j++)\n\t\t\t\t{\n\t\t\t\tif(A[i][j]>A[maxi][maxj])\n\t\t\t\t\t{\n\t\t\t\t\tmaxi=i;\n\t\t\t\t\tmaxj=j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tout.println((maxi+1)+\" \"+(maxj+1));\n\t\tout.close();\n\t\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new FireAgain().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream;\n        try {\n            inputStream = new FileInputStream(\"input.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        OutputStream outputStream;\n        try {\n            outputStream = new FileOutputStream(\"output.txt\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new BetaRound35_C()).start();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new ArFireAgain().solve();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n        // Sworn to fight and die\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew Main ().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) { new Cbeta35(); }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"input.txt\"));\n        PrintWriter out = new PrintWriter(\"output.txt\");\n\n        int N = in.nextInt();\n        int M = in.nextInt();\n\n        a = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                a[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        int k = in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < k; i++) {\n            int x = in.nextInt();\n            int y = in.nextInt();\n            a[x - 1][y - 1] = 1;\n            burn(x - 1, y - 1);\n        }\n        int max = Integer.MIN_VALUE;\n        int x = 0;\n        int y = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if(a[i][j]>max){\n                    max = a[i][j];\n                    x = i+1;\n                    y = j+1;\n                }\n            }\n        }\n        out.printf(\"%d %d\",x,y);\n        out.close();\n        in.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) { \n        R035CRetry obj = new R035CRetry();\n        obj.solve();\n        obj.finish();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(new File(\"input.txt\"));\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t\tint[] dx = {0,0,1,-1};\n\t\tint[] dy = {1,-1,0,0};\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] seen = new int[n][m];\n\t\tfor(int i=0; i<n; i++)\n\t\t\tArrays.fill(seen[i], -1);\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tint k = in.nextInt();\n\t\tfor(int i=0; i<k; i++) {\n\t\t\tint x = in.nextInt()-1;\n\t\t\tint y = in.nextInt()-1;\n\t\t\tq.add(x);\n\t\t\tq.add(y);\n\t\t\tq.add(0);\n\t\t\tseen[x][y] = 0;\n\t\t}\n\t\twhile(!q.isEmpty()) {\n\t\t\tint x = q.poll();\n\t\t\tint y = q.poll();\n\t\t\tint t = q.poll();\n\t\t\tfor(int i=0; i<dx.length; i++) {\n\t\t\t\tint nx = x + dx[i];\n\t\t\t\tint ny = y + dy[i];\n\t\t\t\tif(nx < 0 || nx >= n || ny < 0 || ny >= m)\n\t\t\t\t\tcontinue;\n\t\t\t\tif(seen[nx][ny] != -1) continue;\n\t\t\t\tseen[nx][ny] = t+1;\n\t\t\t\tq.add(nx);\n\t\t\t\tq.add(ny);\n\t\t\t\tq.add(t+1);\n\t\t\t}\n\t\t}\n\t\tint best=-1,x=0,y=0;\n\t\tfor(int i=0; i<n; i++)\n\t\t\tfor(int j=0; j<m; j++)\n\t\t\t\tif(seen[i][j] > best) {\n\t\t\t\t\tbest = seen[i][j];\n\t\t\t\t\tx = i+1;\n\t\t\t\t\ty = j+1;\n\t\t\t\t}\n\t\tout.println(x + \" \" +y);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\tSystem.setOut(new PrintStream(\"output.txt\"));\n        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s[] = r.readLine().split(\"\\\\s+\");\n\t\tint n = Integer.parseInt(s[0]);\n\t\tint m = Integer.parseInt(s[1]);\n\t\tint k = Integer.parseInt(r.readLine());\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = 0; j < m; j++)\n\t\t\t\ta[i][j] = Integer.MAX_VALUE;\n\t\t}\n\t\tassert k >= 1 && k < n * m;\n\t\tint max = 0;\n\t\tStringTokenizer st = new StringTokenizer(r.readLine());\n\t\tassert st.countTokens() == k;\n\t\tfor(; k > 0; k--) {\n\t\t\tint x = Integer.parseInt(st.nextToken()) - 1;\n\t\t\tint y = Integer.parseInt(st.nextToken()) - 1;\n\t\t\tassert x >= 1 && x <= n && y >= 1 && y <= n;\n\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\t\tint d = Math.abs(i - x) + Math.abs(j - y);\n\t\t\t\t\tif(a[i][j] > d)\n\t\t\t\t\t\ta[i][j] = d;\n\t\t\t\t\tif(k == 1 && a[i][j] > max)\n\t\t\t\t\t\tmax = a[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\tif(a[i][j] == max) {\n\t\t\t\t\tSystem.out.println((i + 1) + \" \" + (j + 1));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException{\n        Scanner sc = new Scanner(new File(\"input.txt\"));\n        PrintWriter pw = new PrintWriter(new File(\"output.txt\"));\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int k = sc.nextInt();\n        int[]x = new int[k+1], y = new int[k+1];\n        for (int i = 1; i <= k; i++) {\n            y[i] = sc.nextInt();\n            x[i] = sc.nextInt();\n        }\n        int max = -1, y0 = 0, x0 = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                int min = n+m+2;\n                for (int j2 = 1; j2 <= k; j2++) {\n                    min = Math.min(min, Math.abs(i-y[j2])+Math.abs(j-x[j2]));\n                }\n                if (min > max) {\n                    max = min;\n                    y0 = i;\n                    x0 = j;\n                }\n            }\n        }\n        pw.println(y0+\" \"+x0);\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n\t\n\tFile in = new File(\"input.txt\");\n\tFile out = new File(\"output.txt\");\n\tScanner sc;\n\tPrintWriter pw;\n\ttry{\n\t    sc = new Scanner(in);\n\t    pw = new PrintWriter(out);\n\t}catch(Exception e){\n\t    sc = new Scanner(System.in);\n\t    pw = null;\n\t}\n\n\tint max_x = sc.nextInt();\n\tint max_y = sc.nextInt();\n\tint start_num = sc.nextInt();\n\tHashSet<int[]> start = new HashSet<int[]>();\n\tfor(int i=0; i<start_num; i++){\n\t    int[] cell = new int[2];\n\t    cell[0] = sc.nextInt();\n\t    cell[1] = sc.nextInt();\n\t    start.add(cell);\n\t}\n\n\tint[] result = new int[]{1,1};\n\tint resultLen = 0;\n\tfor(int i=1; i<=max_x; i++){\n\t    for(int j=1; j<=max_y; j++){\n\t\tint[] sh = new int[]{1,1};\n\t\tint shLen = Integer.MAX_VALUE;\n\t\tfor(int[] fired: start){\n\t\t    int len = Math.abs(i - fired[0]) + Math.abs(j - fired[1]);\n\t\t    if(len < shLen){\n\t\t\tsh[0] = i;\n\t\t\tsh[1] = j;\n\t\t\tshLen = len;\n\t\t    }\n\t\t}\n\t\tif(shLen > resultLen){\n\t\t    result[0] = sh[0];\n\t\t    result[1] = sh[1];\n\t\t    resultLen = shLen;\n\t\t}\n\t    }\n\t}\n\tpw.print(result[0] + \" \" + result[1]);\n\tpw.close();\n\treturn ;\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        FastIO io = new FastIO();\n\n        int width = io.nextInt();\n        int height = io.nextInt();\n\n        int initials = io.nextInt();\n\n        boolean[][] visited = new boolean[width][height];\n\n        Queue<Coordinate> q = new ArrayDeque<>();\n\n        for (int i = 0; i < initials; i++) {\n            q.add(new Coordinate(io.nextInt() - 1, io.nextInt() - 1));\n        }\n\n        Coordinate oneOfLast = null;\n\n        while (!q.isEmpty()) {\n            int len = q.size();\n            for (int times = 0; times < len; times++) {\n                Coordinate c = q.poll();\n                if (visited[c.x][c.y]) {\n                    continue;\n                }\n\n                oneOfLast = c;\n                visited[c.x][c.y] = true;\n\n                int[][] deltas = new int[][]{\n                        {-1, 0}, {0, -1}, {1, 0}, {0, 1}\n                };\n\n                for (int[] delta : deltas) {\n                    int ci = c.y + delta[0];\n                    int cj = c.x + delta[1];\n\n                    if (ci >= 0 && cj >= 0 && ci < height && cj < width) {\n                        q.add(new Coordinate(cj, ci));\n                    }\n                }\n            }\n        }\n\n        io.println((oneOfLast.x + 1) + \" \" + (oneOfLast.y + 1));\n\n        io.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tint[] fac = new int[n + 1];\n\t\tt = new int[n];\n\t\tg = new int[n];\n\t\tint[] cnt = new int[3];\n\t\tfac[0] = 1;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfac[i] = (int) (i * 1L * fac[i - 1] % MOD);\n\t\tint T = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tt[i] = sc.nextInt();\n\t\t\tg[i] = sc.nextInt() - 1;\n\t\t\tcnt[g[i]]++;\n\n\t\t}\n\t\tmemo1 = new int[n][cnt[0] + 1][T + 1];\n\t\tmemo2 = new int[n][cnt[1] + 1][cnt[2] + 1][T + 1];\n\t\tmemo3 = new int[4][cnt[0] + 1][cnt[1] + 1][cnt[2] + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tArrays.fill(memo1[i][j], -1);\n\t\t\tfor (int j = 0; j <= cnt[1]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[2]; k++)\n\t\t\t\t\tArrays.fill(memo2[i][j][k], -1);\n\n\t\t}\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[1]; k++)\n\t\t\t\t\tArrays.fill(memo3[i][j][k], -1);\n\t\tint ans = 0;\n\t\tfor (int cnt0 = 0; cnt0 <= cnt[0]; cnt0++)\n\t\t\tfor (int sum0 = 0; sum0 <= T; sum0++)\n\t\t\t\tfor (int cnt1 = 0; cnt1 <= cnt[1]; cnt1++)\n\t\t\t\t\tfor (int cnt2 = 0; cnt2 <= cnt[2]; cnt2++) {\n\t\t\t\t\t\tlong ways = dp1(0, cnt0, sum0) * 1L * dp2(0, cnt1, cnt2, T - sum0) % MOD;\n\t\t\t\t\t\tways = ways * dp3(cnt0, cnt1, cnt2, 3) % MOD;\n\t\t\t\t\t\tways *= fac[cnt0];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt1];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt2];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tans += ways;\n\t\t\t\t\t\tif (ans >= MOD)\n\t\t\t\t\t\t\tans -= MOD;\n\t\t\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskG2 solver = new TaskG2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint t = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[n];\n\t\tint[] bb = new int[n];\n\t\tint[] cc = new int[n];\n\t\tint na = 0, nb = 0, nc = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint g = Integer.parseInt(st.nextToken());\n\t\t\tif (g == 1)\n\t\t\t\taa[na++] = a;\n\t\t\telse if (g == 2)\n\t\t\t\tbb[nb++] = a;\n\t\t\telse\n\t\t\t\tcc[nc++] = a;\n\t\t}\n\t\tint[][][] dp = init(n, na, nb, nc);\n\t\tint[][][] dab = solve2(aa, bb, t, na, nb);\n\t\tint[][] dc = solve1(cc, t, nc);\n\t\tint ans = 0;\n\t\tfor (int tab = 0; tab <= t; tab++) {\n\t\t\tint tc = t - tab;\n\t\t\tfor (int ma = 0; ma <= na; ma++)\n\t\t\t\tfor (int mb = 0; mb <= nb; mb++) {\n\t\t\t\t\tint xab = dab[tab][ma][mb];\n\t\t\t\t\tif (xab == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int mc = 0; mc <= nc; mc++) {\n\t\t\t\t\t\tint xc = dc[tc][mc];\n\t\t\t\t\t\tif (xc == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tans = (int) ((ans + (long) xab * xc % MD * dp[ma][mb][mc]) % MD);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tint[] fac = new int[n + 1];\n\t\tt = new int[n];\n\t\tg = new int[n];\n\t\tint[] cnt = new int[3];\n\t\tfac[0] = 1;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfac[i] = (int) (i * 1L * fac[i - 1] % MOD);\n\t\tint T = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tt[i] = sc.nextInt();\n\t\t\tg[i] = sc.nextInt() - 1;\n\t\t\tcnt[g[i]]++;\n\n\t\t}\n\t\tmemo1 = new int[n][cnt[0] + 1][T + 1];\n\t\tmemo2 = new int[n][cnt[1] + 1][cnt[2] + 1][T + 1];\n\t\tmemo3 = new int[4][cnt[0] + 1][cnt[1] + 1][cnt[2] + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tArrays.fill(memo1[i][j], -1);\n\t\t\tfor (int j = 0; j <= cnt[1]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[2]; k++)\n\t\t\t\t\tArrays.fill(memo2[i][j][k], -1);\n\n\t\t}\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[1]; k++)\n\t\t\t\t\tArrays.fill(memo3[i][j][k], -1);\n\t\tint ans = 0;\n\t\tfor (int cnt0 = 0; cnt0 <= cnt[0]; cnt0++)\n\t\t\tfor (int sum0 = 0; sum0 <= T; sum0++)\n\t\t\t\tfor (int cnt1 = 0; cnt1 <= cnt[1]; cnt1++)\n\t\t\t\t\tfor (int cnt2 = 0; cnt2 <= cnt[2]; cnt2++) {\n\t\t\t\t\t\tlong ways = dp1(0, cnt0, sum0) * 1L * dp2(0, cnt1, cnt2, T - sum0) % MOD;\n\t\t\t\t\t\tways = ways * dp3(cnt0, cnt1, cnt2, 3) % MOD;\n\t\t\t\t\t\tways *= fac[cnt0];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt1];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt2];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tans += ways;\n\t\t\t\t\t\tif (ans >= MOD)\n\t\t\t\t\t\t\tans -= MOD;\n\t\t\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew template().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn=sc.nextInt();\n\t\tint []fac=new int [n+1];\n\t\tt=new int [n];\n\t\tg=new int [n];\n\t\tint []cnt=new int [3];\n\t\tfac[0]=1;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfac[i]=(int) (i*1L*fac[i-1]%MOD);\n\t\tint T=sc.nextInt();\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tt[i]=sc.nextInt();\n\t\t\tg[i]=sc.nextInt()-1;\n\t\t\tcnt[g[i]]++;\n\t\t\t\n\t\t}\n\t\tmemo1=new int [n][cnt[0]+1][T+1];\n\t\tmemo2=new int [n][cnt[1]+1][cnt[2]+1][T+1];\n\t\tmemo3=new int [4][cnt[0]+1][cnt[1]+1][cnt[2]+1];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<=cnt[0];j++) \n\t\t\t\tArrays.fill(memo1[i][j], -1);\n\t\t\tfor(int j=0;j<=cnt[1];j++) \n\t\t\t\tfor(int k=0;k<=cnt[2];k++)\n\t\t\t\t\tArrays.fill(memo2[i][j][k], -1);\n\t\t\t\n\t\t}\n\t\tfor(int i=0;i<4;i++)\n\t\t\tfor(int j=0;j<=cnt[0];j++)\n\t\t\t\tfor(int k=0;k<=cnt[1];k++)\n\t\t\t\t\tArrays.fill(memo3[i][j][k], -1);\n\t\tint ans=0;\n\t\tfor(int cnt0=0;cnt0<=cnt[0];cnt0++)\n\t\t\tfor(int sum0=0;sum0<=T;sum0++)\n\t\t\t\tfor(int cnt1=0;cnt1<=cnt[1];cnt1++)\n\t\t\t\t\tfor(int cnt2=0;cnt2<=cnt[2];cnt2++) {\n\t\t\t\t\t\tlong ways= dp1(0,cnt0,sum0)*1L*dp2(0,cnt1,cnt2,T-sum0)%MOD;\n\t\t\t\t\t\tways=ways*dp3(cnt0,cnt1,cnt2,3)%MOD;\n\t\t\t\t\t\tways*=fac[cnt0];\n\t\t\t\t\t\tways%=MOD;\n\t\t\t\t\t\tways*=fac[cnt1];\n\t\t\t\t\t\tways%=MOD;\n\t\t\t\t\t\tways*=fac[cnt2];\n\t\t\t\t\t\tways%=MOD;\n\t\t\t\t\t\tans+=ways;\n\t\t\t\t\t\tif(ans>=MOD)\n\t\t\t\t\t\t\tans-=MOD;\n\t\t\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tint[] fac = new int[n + 1];\n\t\tt = new int[n];\n\t\tg = new int[n];\n\t\tint[] cnt = new int[3];\n\t\tfac[0] = 1;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfac[i] = (int) (i * 1L * fac[i - 1] % MOD);\n\t\tint T = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tt[i] = sc.nextInt();\n\t\t\tg[i] = sc.nextInt() - 1;\n\t\t\tcnt[g[i]]++;\n\n\t\t}\n\t\tmemo1 = new int[n][cnt[0] + 1][T + 1];\n\t\tmemo2 = new int[n][cnt[1] + 1][cnt[2] + 1][T + 1];\n\t\tmemo3 = new int[4][cnt[0] + 1][cnt[1] + 1][cnt[2] + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tArrays.fill(memo1[i][j], -1);\n\t\t\tfor (int j = 0; j <= cnt[1]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[2]; k++)\n\t\t\t\t\tArrays.fill(memo2[i][j][k], -1);\n\n\t\t}\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[1]; k++)\n\t\t\t\t\tArrays.fill(memo3[i][j][k], -1);\n\t\tint ans = 0;\n\t\tfor (int cnt0 = 0; cnt0 <= cnt[0]; cnt0++)\n\t\t\tfor (int sum0 = 0; sum0 <= T; sum0++)\n\t\t\t\tfor (int cnt1 = 0; cnt1 <= cnt[1]; cnt1++)\n\t\t\t\t\tfor (int cnt2 = 0; cnt2 <= cnt[2]; cnt2++) {\n\t\t\t\t\t\tlong ways = dp1(0, cnt0, sum0) * 1L * dp2(0, cnt1, cnt2, T - sum0) % MOD;\n\t\t\t\t\t\tways = ways * dp3(cnt0, cnt1, cnt2, 3) % MOD;\n\t\t\t\t\t\tways *= fac[cnt0];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt1];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt2];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tans += ways;\n\t\t\t\t\t\tif (ans >= MOD)\n\t\t\t\t\t\t\tans -= MOD;\n\t\t\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskG2 solver = new TaskG2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tint[] fac = new int[n + 1];\n\t\tt = new int[n];\n\t\tg = new int[n];\n\t\tint[] cnt = new int[3];\n\t\tfac[0] = 1;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfac[i] = (int) (i * 1L * fac[i - 1] % MOD);\n\t\tint T = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tt[i] = sc.nextInt();\n\t\t\tg[i] = sc.nextInt() - 1;\n\t\t\tcnt[g[i]]++;\n\n\t\t}\n\t\tmemo1 = new int[n][cnt[0] + 1][T + 1];\n\t\tmemo2 = new int[n][cnt[1] + 1][cnt[2] + 1][T + 1];\n\t\tmemo3 = new int[4][cnt[0] + 1][cnt[1] + 1][cnt[2] + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tArrays.fill(memo1[i][j], -1);\n\t\t\tfor (int j = 0; j <= cnt[1]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[2]; k++)\n\t\t\t\t\tArrays.fill(memo2[i][j][k], -1);\n\n\t\t}\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[1]; k++)\n\t\t\t\t\tArrays.fill(memo3[i][j][k], -1);\n\t\tint ans = 0;\n\t\tfor (int cnt0 = 0; cnt0 <= cnt[0]; cnt0++)\n\t\t\tfor (int sum0 = 0; sum0 <= T; sum0++)\n\t\t\t\tfor (int cnt1 = 0; cnt1 <= cnt[1]; cnt1++)\n\t\t\t\t\tfor (int cnt2 = 0; cnt2 <= cnt[2]; cnt2++) {\n\t\t\t\t\t\tlong ways = dp1(0, cnt0, sum0) * 1L * dp2(0, cnt1, cnt2, T - sum0) % MOD;\n\t\t\t\t\t\tways = ways * dp3(cnt0, cnt1, cnt2, 3) % MOD;\n\t\t\t\t\t\tways *= fac[cnt0];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt1];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt2];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tans += ways;\n\t\t\t\t\t\tif (ans >= MOD)\n\t\t\t\t\t\t\tans -= MOD;\n\t\t\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            int n=Int();\n            int k=Int();\n            int A[][]=new int[n][2];\n            int a=0,b=0,c=0;\n            for(int i=0;i<A.length;i++){\n                A[i][0]=Int();\n                A[i][1]=Int()-1;\n\n                if(A[i][1]==0)a++;\n                else if(A[i][1]==1)b++;\n                else c++;\n            }\n            Solution sol=new Solution(out);\n            sol.solution(A,k,a,b,c);\n        }\n        out.close();\n\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tint[] fac = new int[n + 1];\n\t\tt = new int[n];\n\t\tg = new int[n];\n\t\tint[] cnt = new int[3];\n\t\tfac[0] = 1;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfac[i] = (int) (i * 1L * fac[i - 1] % MOD);\n\t\tint T = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tt[i] = sc.nextInt();\n\t\t\tg[i] = sc.nextInt() - 1;\n\t\t\tcnt[g[i]]++;\n\n\t\t}\n\t\tmemo1 = new int[n][cnt[0] + 1][T + 1];\n\t\tmemo2 = new int[n][cnt[1] + 1][cnt[2] + 1][T + 1];\n\t\tmemo3 = new int[4][cnt[0] + 1][cnt[1] + 1][cnt[2] + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tArrays.fill(memo1[i][j], -1);\n\t\t\tfor (int j = 0; j <= cnt[1]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[2]; k++)\n\t\t\t\t\tArrays.fill(memo2[i][j][k], -1);\n\n\t\t}\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[1]; k++)\n\t\t\t\t\tArrays.fill(memo3[i][j][k], -1);\n\t\tint ans = 0;\n\t\tfor (int cnt0 = 0; cnt0 <= cnt[0]; cnt0++)\n\t\t\tfor (int sum0 = 0; sum0 <= T; sum0++)\n\t\t\t\tfor (int cnt1 = 0; cnt1 <= cnt[1]; cnt1++)\n\t\t\t\t\tfor (int cnt2 = 0; cnt2 <= cnt[2]; cnt2++) {\n\t\t\t\t\t\tlong ways = dp1(0, cnt0, sum0) * 1L * dp2(0, cnt1, cnt2, T - sum0) % MOD;\n\t\t\t\t\t\tways = ways * dp3(cnt0, cnt1, cnt2, 3) % MOD;\n\t\t\t\t\t\tways *= fac[cnt0];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt1];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt2];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tans += ways;\n\t\t\t\t\t\tif (ans >= MOD)\n\t\t\t\t\t\t\tans -= MOD;\n\t\t\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tint[] fac = new int[n + 1];\n\t\tt = new int[n];\n\t\tg = new int[n];\n\t\tint[] cnt = new int[3];\n\t\tfac[0] = 1;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfac[i] = (int) (i * 1L * fac[i - 1] % MOD);\n\t\tint T = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tt[i] = sc.nextInt();\n\t\t\tg[i] = sc.nextInt() - 1;\n\t\t\tcnt[g[i]]++;\n\n\t\t}\n\t\tmemo1 = new int[n][cnt[0] + 1][T + 1];\n\t\tmemo2 = new int[n][cnt[1] + 1][cnt[2] + 1][T + 1];\n\t\tmemo3 = new int[4][cnt[0] + 1][cnt[1] + 1][cnt[2] + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tArrays.fill(memo1[i][j], -1);\n\t\t\tfor (int j = 0; j <= cnt[1]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[2]; k++)\n\t\t\t\t\tArrays.fill(memo2[i][j][k], -1);\n\n\t\t}\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[1]; k++)\n\t\t\t\t\tArrays.fill(memo3[i][j][k], -1);\n\t\tint ans = 0;\n\t\tfor (int cnt0 = 0; cnt0 <= cnt[0]; cnt0++)\n\t\t\tfor (int sum0 = 0; sum0 <= T; sum0++)\n\t\t\t\tfor (int cnt1 = 0; cnt1 <= cnt[1]; cnt1++)\n\t\t\t\t\tfor (int cnt2 = 0; cnt2 <= cnt[2]; cnt2++) {\n\t\t\t\t\t\tlong ways = dp1(0, cnt0, sum0) * 1L * dp2(0, cnt1, cnt2, T - sum0) % MOD;\n\t\t\t\t\t\tways = ways * dp3(cnt0, cnt1, cnt2, 3) % MOD;\n\t\t\t\t\t\tways *= fac[cnt0];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt1];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt2];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tans += ways;\n\t\t\t\t\t\tif (ans >= MOD)\n\t\t\t\t\t\t\tans -= MOD;\n\t\t\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskG2 solver = new TaskG2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint t = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[n];\n\t\tint[] bb = new int[n];\n\t\tint[] cc = new int[n];\n\t\tint na = 0, nb = 0, nc = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint g = Integer.parseInt(st.nextToken());\n\t\t\tif (g == 1)\n\t\t\t\taa[na++] = a;\n\t\t\telse if (g == 2)\n\t\t\t\tbb[nb++] = a;\n\t\t\telse\n\t\t\t\tcc[nc++] = a;\n\t\t}\n\t\tint[][][] dp = init(n, na, nb, nc);\n\t\tint[][][] dab = solve2(aa, bb, t, na, nb);\n\t\tint[][] dc = solve1(cc, t, nc);\n\t\tint ans = 0;\n\t\tfor (int tab = 0; tab <= t; tab++) {\n\t\t\tint tc = t - tab;\n\t\t\tfor (int ma = 0; ma <= na; ma++)\n\t\t\t\tfor (int mb = 0; mb <= nb; mb++) {\n\t\t\t\t\tint xab = dab[tab][ma][mb];\n\t\t\t\t\tif (xab == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int mc = 0; mc <= nc; mc++) {\n\t\t\t\t\t\tint xc = dc[tc][mc];\n\t\t\t\t\t\tif (xc == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tans = (int) ((ans + (long) xab * xc % MD * dp[ma][mb][mc]) % MD);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskG2 solver = new TaskG2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 27);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new Round568G().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint t = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[n];\n\t\tint[] bb = new int[n];\n\t\tint[] cc = new int[n];\n\t\tint na = 0, nb = 0, nc = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint g = Integer.parseInt(st.nextToken());\n\t\t\tif (g == 1)\n\t\t\t\taa[na++] = a;\n\t\t\telse if (g == 2)\n\t\t\t\tbb[nb++] = a;\n\t\t\telse\n\t\t\t\tcc[nc++] = a;\n\t\t}\n\t\tint[][][] dp = init(n, na, nb, nc);\n\t\tint[][][] dab = solve2(aa, bb, t, na, nb);\n\t\tint[][] dc = solve1(cc, t, nc);\n\t\tint ans = 0;\n\t\tfor (int tab = 0; tab <= t; tab++) {\n\t\t\tint tc = t - tab;\n\t\t\tfor (int ma = 0; ma <= na; ma++)\n\t\t\t\tfor (int mb = 0; mb <= nb; mb++) {\n\t\t\t\t\tint xab = dab[tab][ma][mb];\n\t\t\t\t\tif (xab == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int mc = 0; mc <= nc; mc++) {\n\t\t\t\t\t\tint xc = dc[tc][mc];\n\t\t\t\t\t\tif (xc == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tans = (int) ((ans + (long) xab * xc % MD * dp[ma][mb][mc]) % MD);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = sc.nextInt();\n\t\tint[] fac = new int[n + 1];\n\t\tt = new int[n];\n\t\tg = new int[n];\n\t\tint[] cnt = new int[3];\n\t\tfac[0] = 1;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfac[i] = (int) (i * 1L * fac[i - 1] % MOD);\n\t\tint T = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tt[i] = sc.nextInt();\n\t\t\tg[i] = sc.nextInt() - 1;\n\t\t\tcnt[g[i]]++;\n\n\t\t}\n\t\tmemo1 = new int[n][cnt[0] + 1][T + 1];\n\t\tmemo2 = new int[n][cnt[1] + 1][cnt[2] + 1][T + 1];\n\t\tmemo3 = new int[4][cnt[0] + 1][cnt[1] + 1][cnt[2] + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tArrays.fill(memo1[i][j], -1);\n\t\t\tfor (int j = 0; j <= cnt[1]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[2]; k++)\n\t\t\t\t\tArrays.fill(memo2[i][j][k], -1);\n\n\t\t}\n\t\tfor (int i = 0; i < 4; i++)\n\t\t\tfor (int j = 0; j <= cnt[0]; j++)\n\t\t\t\tfor (int k = 0; k <= cnt[1]; k++)\n\t\t\t\t\tArrays.fill(memo3[i][j][k], -1);\n\t\tint ans = 0;\n\t\tfor (int cnt0 = 0; cnt0 <= cnt[0]; cnt0++)\n\t\t\tfor (int sum0 = 0; sum0 <= T; sum0++)\n\t\t\t\tfor (int cnt1 = 0; cnt1 <= cnt[1]; cnt1++)\n\t\t\t\t\tfor (int cnt2 = 0; cnt2 <= cnt[2]; cnt2++) {\n\t\t\t\t\t\tlong ways = dp1(0, cnt0, sum0) * 1L * dp2(0, cnt1, cnt2, T - sum0) % MOD;\n\t\t\t\t\t\tways = ways * dp3(cnt0, cnt1, cnt2, 3) % MOD;\n\t\t\t\t\t\tways *= fac[cnt0];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt1];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tways *= fac[cnt2];\n\t\t\t\t\t\tways %= MOD;\n\t\t\t\t\t\tans += ways;\n\t\t\t\t\t\tif (ans >= MOD)\n\t\t\t\t\t\t\tans -= MOD;\n\t\t\t\t\t}\n\t\tout.println(ans);\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        sc = new FastScanner();\n        pw = new PrintWriter(System.out);\n        \n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        for (int i = 2; i <= 3200; i++) {\n            boolean p = true;\n            for (int j = 2; j*j <= i; j++) {\n                if (i%j==0) {\n                    p = false;\n                    break;\n                }\n            }\n            if (p) primes.add(i);\n        }\n        int Q = sc.ni();\n        for (int q = 0; q < Q; q++) {\n            int N = sc.ni();\n            int K = sc.ni();\n            int[] nums = new int[N+1];\n            for (int i = 1; i <= N; i++) nums[i] = sc.ni();\n            for (int i = 1; i <= N; i++) {\n                for (int p: primes) {\n                    int c = 0;\n                    while (nums[i] % p == 0) {\n                        nums[i] /= p;\n                        c++;\n                    }\n                    if (c%2==1) nums[i] *= p;\n                }\n            }\n\n            TreeSet<Integer> ts = new TreeSet<Integer>();\n            HashMap<Integer,Integer> last = new HashMap<Integer,Integer>();\n\n            int[][] dp = new int[N+1][K+1];\n            for (int i = 1; i <= N; i++) {\n                if (last.containsKey(nums[i])) {\n                    ts.add(last.get(nums[i]));\n                }\n                last.put(nums[i],i);\n                int[] inds = new int[K+1];\n                int ind = 0;\n                for (int x: ts.descendingSet()) {\n                    inds[ind] = x;\n                    if (ind==K) break;\n                    ind++;\n                }\n                for (int j = 0; j <= K; j++) {\n                    dp[i][j] = INF;\n                    if (j > 0) dp[i][j] = dp[i][j-1];\n                    for (int k = 0; k <= j; k++) {\n                        dp[i][j] = Math.min(dp[i][j],dp[inds[k]][j-k]+1);\n                    }\n                }\n            }\n            pw.println(dp[N][K]);\n        }\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception{\n        Scanner sc=new Scanner(System.in);\n        PrintWriter out =new PrintWriter(System.out);\n        int size=(int)1e7+1;\n        int[] pr=new int[size];\n        for(int i=0;i<size;i++){\n            pr[i]=i;\n        }\n        for(int i=2;i*i<size;i++){\n          int val=i*i;\n            for(int j=val;j<=size;j+=val){\n                 pr[j]=j/val;\n            }\n        }\n        int t=sc.nextInt();\n        int[] dp=new int[size];\n        Arrays.fill(dp,-1);\n        while(t-->0){\n            int n=sc.nextInt();\n            int k=sc.nextInt();\n            int[] ar=new int[n];\n            for(int i=0;i<n;i++){\n                int a=sc.nextInt();\n                ar[i]=pr[a];\n            }\n            int[] ans=new int[k+1];\n            int[] ind=new int[k+1];\n            for(int i=0;i<n;i++){\n                for(int h=k;h>=0;h--){\n                    if(dp[ar[i]]>=ind[h]){\n                        ans[h]++;\n                        ind[h]=i;\n                    }\n                    if(h>0 && (ans[h-1]<ans[h] ||(ans[h-1]==ans[h] && ind[h-1]>ind[h])))\n                    {\n                        ans[h]=ans[h-1];\n                        ind[h]=ind[h-1];\n                    }\n                }\n                dp[ar[i]]=i;\n            }\n            out.println(ans[k]+1);\n            for(int i=0;i<n;i++)dp[ar[i]]=-1;\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(f.readLine());\n        int t = Integer.parseInt(st.nextToken());\n        primes = new ArrayList<>();\n        mind = new int[MAXA + 1];\n        for (int i = 2; i <= MAXA; i++) {\n            if (mind[i] == 0) {\n                primes.add(i);\n                mind[i] = i;\n            }\n            for (int x : primes) {\n                if (x > mind[i] || x * i > MAXA) break;\n                mind[x * i] = x;\n            }\n        }\n        int[] count = new int[MAXA + 1];\n        for (int on8y = 0; on8y < t; on8y++) {\n            st = new StringTokenizer(f.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int k = Integer.parseInt(st.nextToken());\n            int[] a = new int[n];\n            Arrays.fill(a, 1);\n            st = new StringTokenizer(f.readLine());\n            for (int i = 0; i < n; i++) {\n                int x = Integer.parseInt(st.nextToken());\n                int cnt = 0;\n                int last = 0;\n                while (x > 1) {\n                    int p = mind[x];\n                    if (last == p) cnt++;\n                    else {\n                        if (cnt % 2 == 1) a[i] *= last;\n                        last = p;\n                        cnt = 1;\n                    }\n                    x /= p;\n                }\n                if (cnt % 2 == 1) a[i] *= last;\n            }\n            int[][] mnleft = new int[n][k + 1];\n            for (int j = 0; j < k + 1; j++) {\n                int l = n;\n                int now = 0;\n                for (int i = n - 1; i >= 0; i--) {\n                    while (l - 1 >= 0 && now + ((count[a[l - 1]] > 0) ? 1 : 0) <= j) {\n                        l--;\n                        now += (count[a[l]] > 0) ? 1 : 0;\n                        count[a[l]]++;\n                    }\n                    mnleft[i][j] = l;\n                    if (count[a[i]] > 1) now--;\n                    count[a[i]]--;\n                }\n            }\n            int[][] dp = new int[n + 1][k + 1];\n            for (int i = 0; i < n + 1; i++) {\n                Arrays.fill(dp[i], (int) 1e9 + 1);\n            }\n            for (int i = 0; i < k + 1; i++) dp[0][i] = 0;\n            for (int i = 1; i <= n; i++) {\n                for (int j = 0; j <= k; j++) {\n                    if (j > 0) dp[i][j] = dp[i][j - 1];\n                    for (int lst = 0; lst <= j; lst++) {\n                        dp[i][j] = Math.min(dp[i][j], dp[mnleft[i - 1][lst]][j - lst] + 1);\n                    }\n                }\n            }\n            int ans = (int) 1e9 + 1;\n            for (int c : dp[n]) ans = Math.min(ans, c);\n            System.out.println(ans);\n\n        }\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1497E2 o = new CF1497E2(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new E3().run(); }\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) throws IOException {\n    InputStreamReader in = new InputStreamReader(System.in);\n    BufferedReader br = new BufferedReader(in);\n\n    int t = Integer.parseInt(br.readLine());\n\n    // get primes up to 10000\n    /*\n    boolean[] prime = new boolean[10001];\n    for (int i = 0; i <= 10000; i++) {\n      prime[i] = true;\n    }\n\n    for (int p = 2; p * p <= 10000; p++) {\n      if (prime[p]) {\n        for (int i = p * p; i <= 10000; i += p) {\n          prime[i] = false;\n        }\n      }\n    }\n    ArrayList<Integer> primes = new ArrayList<>();\n\n    for (int i = 2; i < 10001; i++) {\n      if (prime[i]) {\n        primes.add(i);\n      }\n    }\n    */\n    int A = 10000000;\n    int[] convert = new int[A+1];\n    for (int a = 1; a <= A; a++) {\n      convert[a] = a;\n    }\n    for (int a = 2; a <= A/a; a++) {\n      int sq = a*a;\n      for (int b = sq; b <= A; b += sq) {\n        while (convert[b] % sq == 0) {\n          convert[b] /= sq;\n        }\n      }\n    }\n\n    int[] prevIndex = new int[A+1];\n    for (int i = 0; i <= A; i++) {\n      prevIndex[i] = -1;\n    }\n\n    for (int c = 0; c < t; c++) {\n      StringTokenizer st = new StringTokenizer(br.readLine());\n\n      int n = Integer.parseInt(st.nextToken());\n      int k = Integer.parseInt(st.nextToken());\n\n      int[] a = new int[n];\n      int maxA = 0;\n\n      st = new StringTokenizer(br.readLine());\n\n      for (int i = 0; i < n; i++) {\n        /*\n        int raw = Integer.parseInt(st.nextToken());\n        \n        for (int p : primes) {\n          if (p*p > raw) {\n            break;\n          }\n          while (raw % (p*p) == 0) {\n            raw /= p*p;\n          }\n        }\n        a[i] = raw;\n        */\n\n        a[i] = convert[Integer.parseInt(st.nextToken())];\n        maxA = Math.max(maxA, a[i]);\n      }\n\n      // hard version has extra here\n      // better version O(nk)\n\n      int[] partitions = new int[k+1];\n      int[] partIndex = new int[k+1];\n\n      for (int i = 0; i < n; i++) {\n        int cur = a[i];\n        for (int j = k; j >= 0; j--) {\n          if (prevIndex[cur] >= partIndex[j]) {\n            partitions[j]++;\n            partIndex[j] = i;\n          }\n          if (j > 0 && (partitions[j-1] < partitions[j] || partitions[j-1] == partitions[j] && partIndex[j-1] > partIndex[j])) {\n            partitions[j] = partitions[j-1];\n            partIndex[j] = partIndex[j-1];\n          }\n        }\n        prevIndex[cur] = i;\n      }\n\n      System.out.println(partitions[k]+1);\n\n      for (int i = 0; i < n; i++) {\n        int cur = a[i];\n        prevIndex[cur] = -1;\n      }\n\n\n      /* this should work (O(n*k^2))\n      int[][] minLeftIndex = new int[n][k+1];\n    \n      for (int j = 0; j <= k; j++) {\n        HashMap<Integer, Integer> interval = new HashMap<>();\n        int leftIndex = 0; // the right index is i in this case\n        int removed = 0;\n\n        for (int i = 0; i < n; i++) {\n          if (!interval.containsKey(a[i])) {\n            interval.put(a[i], 0);\n          }\n          interval.put(a[i], interval.get(a[i])+1);\n          if (interval.get(a[i]) > 1) {\n            removed++;\n          }\n          while (removed > j) {\n            interval.put(a[leftIndex], interval.get(a[leftIndex])-1);\n            if (interval.get(a[leftIndex]) > 0) {\n              removed--;\n            }\n            leftIndex++;\n          }\n          minLeftIndex[i][j] = leftIndex;\n          //System.out.println(i + \" \" + j + \" \" + leftIndex);\n        }\n      }\n\n      int[][] dp = new int[n][k+1];\n\n      // dp at all i = 0 = 0\n      for (int i = 0; i < n; i++) {\n        for (int j = 0; j <= k; j++) {\n          int min = Integer.MAX_VALUE;\n          for (int l = 0; l <= j; l++) {\n            if (minLeftIndex[i][l] > 0) {\n              min = Math.min(min, dp[minLeftIndex[i][l]-1][j-l] + 1); // \n            } else {\n              min = 0;\n            }\n            \n          }\n          if (min != Integer.MAX_VALUE) {\n            dp[i][j] = min;\n          }\n        }\n      }\n      \n      System.out.println(dp[n-1][k]+1);\n\n      \n\n      */\n\n      // easy solution\n      /*\n      HashSet<Integer> hs = new HashSet<>();\n\n      int segments = 1;\n\n      for (int i = 0; i < n; i++) {\n        if (hs.contains(a[i])) {\n          segments++;\n          hs.clear();\n        }\n        hs.add(a[i]);\n      }\n      System.out.println(segments);\n      */\n    } \n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n//        generate();\n        int T = sc.nextInt();\n        int MAX = (int) 1e7;\n        int[] canonical = new int[MAX + 1];\n        canonical[1] = 1;\n        for (int factor = 2; factor <= MAX; factor++) {\n            if (canonical[factor] == 0) {\n                for (int mult = factor; mult <= MAX; mult += factor) {\n                    int prev = canonical[mult / factor];\n                    if (prev % factor == 0) {\n                        canonical[mult] = prev / factor;\n                    } else {\n                        canonical[mult] = prev * factor;\n                    }\n                }\n            }\n        }\n        int[] last = new int[MAX + 1];\n        while (T-->0) {\n            int N = sc.nextInt();\n            int K = sc.nextInt();\n            int[] a = new int[N + 1];\n            int[][] dp = new int[2][K + 1];\n            int[][] start = new int[2][K + 1];\n            int ptr = 0;\n            for (int i = 1; i <= N; i++) {\n                int nxt = 1 ^ ptr;\n                a[i] = canonical[sc.nextInt()];\n                for (int k = 0; k <= K; k++) {\n                    if (start[ptr][k] > last[a[i]]) {\n                        // extend it for free (unique)\n                        dp[nxt][k] = dp[ptr][k];\n                        start[nxt][k] = start[ptr][k];\n                    } else {\n                        // start anew\n                        dp[nxt][k] = dp[ptr][k] + 1;\n                        start[nxt][k] = i;\n                    }\n                    // Use a change (only if existing segment)\n                    if (i > 1 && k > 0 && start[ptr][k - 1] <= last[a[i]]) {\n                        // if this cost beats the old cost, or if it has a later start point, it's better.\n                        if (dp[ptr][k - 1] < dp[nxt][k] || (dp[ptr][k - 1] == dp[nxt][k] && start[ptr][k - 1] > start[nxt][k])) {\n                            dp[nxt][k] = dp[ptr][k - 1];\n                            start[nxt][k] = start[ptr][k - 1];\n                        }\n                    }\n                }\n//                System.out.println(Arrays.toString(start[nxt]));\n//                System.out.println(Arrays.toString(dp[nxt]));\n                last[a[i]] = i;\n                ptr = nxt;\n            }\n            for (int v : a) {\n                last[v] = 0;\n            }\n            // always allowed to waste initial changes by starting offset, so mono decr\n            out.println(dp[ptr][K]);\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "       public static void main(String[] args) throws Exception{\n               Scanner sc=new Scanner(System.in);\n        PrintWriter out=new PrintWriter(System.out);\n       int t=sc.nextInt();\n       int[] arr=new int[10000002];\n       for(int i=0;i<arr.length;i++){\n           arr[i]=i;\n       }\n       for(int i=2;i*i<arr.length;i++){\n           int b=i*i;\n          for(int j=b;j<arr.length;j+=b){\n              arr[j]=j/b;\n          }\n       }\n      int[] pp = new int[10000001]; Arrays.fill(pp, -1);\n       while(t-->0){\n           \n        int n=sc.nextInt();\n        int k=sc.nextInt();\n        int[] aa=new int[n];\n         for(int i=0;i<n;i++){\n             int a=sc.nextInt();\n             aa[i]=arr[a];\n         }\n        \n         int[] mp = new int[k + 1];\n\t\t\tint[] ip = new int[k + 1];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tint a = aa[i];\n\t\t\t\tfor (int h = k; h >= 0; h--) {\n\t\t\t\t\tif (pp[a] >= ip[h]) {\n\t\t\t\t\t\tmp[h]++;\n\t\t\t\t\t\tip[h] = i;\n\t\t\t\t\t}\n\t\t\t\t\tif (h > 0 && (mp[h - 1] < mp[h] || mp[h - 1] == mp[h] && ip[h - 1] > ip[h])) {\n\t\t\t\t\t\tmp[h] = mp[h - 1];\n\t\t\t\t\t\tip[h] = ip[h - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpp[a] = i;\n\t\t\t}\n         \n       \n        out.println(mp[k]+1);\n        \n       for (int i = 0; i < n; i++) {\n\t\t\t\tpp[aa[i]] = -1;\n\t\t\t}\n        \n       }\n           \n           out.close();\n}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] omkar) throws Exception{\n\t\t// TODO Auto-generated method stub\n \t\tsc = new MyScanner();\n \t\tout = new PrintWriter(System.out);\n \t\tint t = sc.nextInt();\n \t\tprimes = new ArrayList<>();\n \t\tprime(3165);\n \t\tint[] freq = new int[10000001];\n \t\twhile(t--> 0){\n \t\t\tint n = sc.nextInt();\n \t\t\tint k = sc.nextInt();\n \t\t\tint[] arr = readArrayInt(n);\n \t\t\tfor(int j = 0;j<n;j++){\n \t\t\t\tarr[j] = factorize(arr[j]);\n \t\t\t}\n \t\t\tint[][] left = new int[n][k+1];\n \t\t\tfor(int m = 0;m<=k;m++){\n \t\t\t\tint l = 0;\n \t\t\t\tint count = 0;\n \t\t\t\tfor(int i = 0;i<n;i++){\n \t\t\t\t\tif (freq[arr[i]] > 0){\n \t\t\t\t\t\tcount++;\n \t\t\t\t\t}\n \t\t\t\t\tfreq[arr[i]]++;\n \t\t\t\t\twhile(count > m){\n \t\t\t\t\t\tfreq[arr[l]]--;\n \t\t\t\t\t\tif (freq[arr[l]] > 0){\n \t\t\t\t\t\t\tcount--;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tl++;\n \t\t\t\t\t}\n \t\t\t\t\tleft[i][m] = l;\n \t\t\t\t}\n \t\t\t\twhile(l < n){\n \t\t\t\t\tfreq[arr[l]]--;\n \t\t\t\t\tl++;\n \t\t\t\t}\n \t\t\t\t\n \t\t\t}\n \t\t\tlong[][] dp = new long[n][k+1];\n \t\t\tfor(int i=0;i<n;i++){\n \t\t\t\tArrays.fill(dp[i],  Integer.MAX_VALUE);\n \t\t\t}\n \t\t\tfor(int i = 0;i<n;i++){\n \t\t\t\tfor(int j = 0;j<=k;j++){\n \t\t\t\t\tfor(int s = 0;s<=j;s++){\n \t\t\t\t\t\tif (left[i][s] == 0){\n \t\t\t\t\t\t\tdp[i][j] = 1;\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tdp[i][j] = Math.min(dp[i][j],  dp[left[i][s]-1][j-s]+1);\n\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t\n \t\t\t}\n \t\t\tout.println(dp[n-1][k]);\n \t\t\t\n \t\t}\n\t \t\t\n \t\tout.close();\n \t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1497E2 o = new CF1497E2(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tint t = in.nextInt();\n\t\tint max = (int)(1e7) + 1;\n\t\t\n\t\tboolean[] prime = new boolean[max + 1]; \n\t\tArrays.fill(prime, true);\n\t\tprime[0] = prime[1] = false;\n\t\tspf = new int[max];\n\t\tfor (int i = 2; i < max; i++) spf[i] = i;\n\t\tfor (int i = 2; i * i < max; i++) {\n\t\t\tif (prime[i]) {\n\t\t\t\tspf[i] = i;\n\t\t\t\tfor (int j = i * i; j < max; j += i) {\n\t\t\t\t\tprime[j] = false;\n\t\t\t\t\tspf[j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[] cnts = new int[max];\n\t\t\n\t\tfor ( ; t > 0; t--) {\n\t\t\tint n = in.nextInt();\n\t\t\tint k = in.nextInt();\n\t\t\tint[] vals = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tvals[i] = factor(in.nextInt());\n\t\t\t\n\t\t\t// left[i][x] = l where al ... ai such that in x moves it is valid subsequence\n\t\t\tint[][] left = new int[n + 1][k + 1];\n\t\t\t// x y z w a b c\n\t\t\t\n\t\t\tfor (int x = 0; x <= k; x++) {\n\t\t\t\tint l = n;\n\t\t\t\tint now = 0;\n\t\t\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\t\t\twhile (l - 1 >= 0 && now + ((cnts[vals[l - 1]] > 0) ? 1 : 0) <= x) {\n\t\t\t\t\t\tl--;\n\t\t\t\t\t\tnow += ((cnts[vals[l]] > 0) ? 1 : 0);\n\t\t\t\t\t\t// System.out.println(now);\n\t\t\t\t\t\tcnts[vals[l]]++;\n\t\t\t\t\t}\n\t\t\t\t\t// System.out.println(i + \" \" + x + \" \" + l + \" \" + now);\n\t\t\t\t\tleft[i][x] = l;\n\t\t\t\t\tif (cnts[vals[i]] > 1) now--;\n\t\t\t\t\tcnts[vals[i]]--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// for (int[] x: left)\n\t\t\t\t// System.out.println(Arrays.toString(x));\n\t\t\n\t\t\t\t\n\t\t\tint oo = (int)(1e9);\n\t\t\t\n\t\t\tint[][] dp = new int[n + 1][k + 1];\n\t\t\t\n\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t\tArrays.fill(dp[i], oo);\n\t\t\t\n\t\t\tfor (int i = 1; i <= n; i++) {\n\t\t\t\tfor (int j = 0; j <= k; j++) {\n\t\t\t\t\tif (j > 0) dp[i][j] = dp[i][j - 1];\n\t\t\t\t\tfor (int x = 0; x <= j; x++) {\n\t\t\t\t\t\tint l = left[i - 1][x];\n\t\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[l][j - x] + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int i = 0; i <= k; i++) {\n\t\t\t\tmin = Math.min(min, dp[n][i]);\n\t\t\t}\n\t\t\t\n\t\t\tout.println(min);\n\t\t}\n\t\t\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String hi[]) throws Exception\n        int[] prime = new int[MAX+1];\n        for(int d=2; d <= MAX; d++)\n            if(prime[d] == 0)\n                for(int v=d; v <= MAX; v+=d)\n                    if(prime[v] == 0)\n                        prime[v] = d;\n        FastScanner infile = new FastScanner();\n        int T = infile.nextInt();\n        StringBuilder sb = new StringBuilder();\n        int[] freq = new int[MAX+1];\n        int[] ts = new int[MAX+1];\n        int time = 0;\n        while(T-->0)\n        {\n            int N = infile.nextInt();\n            int K = infile.nextInt();\n            int[] arr = infile.nextInts(N);\n            for(int i=0; i < N; i++)\n            {\n                int key = 1;\n                while(arr[i] > 1)\n                {\n                    int p = prime[arr[i]];\n                    int cnt = 0;\n                    while(arr[i]%p == 0)\n                    {\n                        arr[i] /= p;\n                        cnt ^= 1;\n                    }\n                    if(cnt == 1)\n                        key *= p;\n                }\n                arr[i] = key;\n            }\n            int[][] right = new int[N][K+1];\n            for(int k=0; k <= K; k++)\n            {\n                int dex = 0;\n                int cnt = 0;\n                for(int i=0; i < N; i++)\n                {\n                    while(dex < N && cnt <= k)\n                    {\n                        if(ts[arr[dex]] == time && freq[arr[dex]] >= 1 && cnt+1 > k)\n                            break;\n                        if(ts[arr[dex]] == time && freq[arr[dex]] >= 1)\n                            cnt++;\n                        if(ts[arr[dex]] < time)\n                        {\n                            ts[arr[dex]] = time;\n                            freq[arr[dex]] = 0;\n                        }\n                        freq[arr[dex]]++;\n                        dex++;\n                    }\n                    right[i][k] = dex;\n                    if(freq[arr[i]] >= 2)\n                        cnt--;\n                    freq[arr[i]]--;\n                }\n                time++;\n            }\n            int[][] dp = new int[N+1][K+1];\n            for(int i=1; i <= N; i++)\n                Arrays.fill(dp[i], N);\n            for(int i=0; i < N; i++)\n                for(int a=0; a <= K; a++)\n                {\n                    dp[i+1][a] = min(dp[i+1][a], dp[i][a]+1);\n                    for(int b=0; b <= K-a; b++)\n                        dp[right[i][b]][a+b] = min(dp[right[i][b]][a+b], dp[i][a]+1);\n                }\n            int res = dp[N][0];\n            for(int k=1; k <= K; k++)\n                res = min(res, dp[N][k]);\n            sb.append(res+\"\\n\");\n        }\n        System.out.print(sb);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception{\n        Scanner sc=new Scanner(System.in);\n        PrintWriter out =new PrintWriter(System.out);\n        int size=(int)1e7+1;\n        int[] pr=new int[size];\n        for(int i=0;i<size;i++){\n            pr[i]=i;\n        }\n        for(int i=2;i*i<size;i++){\n           if(pr[i]==i){int val=i*i;\n            for(int j=val;j<=size;j+=val){\n                 pr[j]=j/val;\n            }\n           }\n        }\n        int t=sc.nextInt();\n        int[] dp=new int[size];\n        Arrays.fill(dp,-1);\n        while(t-->0){\n            int n=sc.nextInt();\n            int k=sc.nextInt();\n            int[] ar=new int[n];\n            for(int i=0;i<n;i++){\n                int a=sc.nextInt();\n                ar[i]=pr[a];\n            }\n            int[] ans=new int[k+1];\n            int[] ind=new int[k+1];\n            for(int i=0;i<n;i++){\n                for(int h=k;h>=0;h--){\n                    if(dp[ar[i]]>=ind[h]){\n                        ans[h]++;\n                        ind[h]=i;\n                    }\n                    if(h>0 && (ans[h-1]<ans[h] ||(ans[h-1]==ans[h] && ind[h-1]>ind[h])))\n                    {\n                        ans[h]=ans[h-1];\n                        ind[h]=ind[h-1];\n                    }\n                }\n                dp[ar[i]]=i;\n            }\n            out.println(ans[k]+1);\n            for(int i=0;i<n;i++)dp[ar[i]]=-1;\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n//        generate();\n        int MAX = (int) 1e7;\n        int[] spf = new int[MAX + 1];\n        for (int i = 2; i <= MAX; i++) {\n            if (spf[i] == 0) {\n                spf[i] = i;\n                for (int j = i + i; j <= MAX; j += i) {\n                    if (spf[j] == 0) {\n                        spf[j] = i;\n                    }\n                }\n            }\n        }\n        int[] freq = new int[MAX + 1];\n        int T = sc.nextInt();\n        while (T-->0) {\n            int N = sc.nextInt();\n            int K = sc.nextInt();\n            int[] a = new int[N + 1];\n            for (int i = 1; i <= N; i++) {\n                a[i] = sc.nextInt();\n                int canonical = 1;\n                while (a[i] > 1) {\n                    int factor = spf[a[i]];\n                    int parity = 0;\n                    while (a[i] % factor == 0) {\n                        a[i] /= factor;\n                        parity ^= 1;\n                    }\n                    if (parity == 1) {\n                        canonical *= factor;\n                    }\n                }\n                a[i] = canonical;\n            }\n            int[][] transition = new int[K + 1][N + 1];\n//            HashMap<Integer, Integer> freq = new HashMap<>();\n            for (int k = 0; k <= K; k++) {\n                int l = N + 1;\n                int duplicates = 0;\n                for (int r = N; r >= 1; r--) {\n                    while (l - 1 >= 1) {\n                        int nextDuplicates = duplicates;\n                        if (freq[a[l - 1]] >= 1) {\n                            nextDuplicates++;\n                        }\n                        if (nextDuplicates <= k) {\n                            duplicates = nextDuplicates;\n                            freq[a[l - 1]]++;\n                            l--;\n                        } else {\n                            break;\n                        }\n                    }\n                    transition[k][r] = l;\n                    if (--freq[a[r]] >= 1) {\n                        duplicates--;\n                    }\n                }\n            }\n            int[][] dp = new int[K + 1][N + 1];\n            int oo = (int) 1e9;\n            for (int[] row : dp) {\n                Arrays.fill(row, oo);\n            }\n            for (int k = 0; k <= K; k++) {\n                dp[k][0] = 0;\n            }\n            for (int r = 1; r <= N; r++) {\n                for (int k = 0; k <= K; k++) {\n                    for (int delta = 0; delta <= k; delta++) {\n                        dp[k][r] = min(dp[k][r], dp[k - delta][transition[delta][r] - 1] + 1);\n                    }\n                }\n            }\n            out.println(dp[K][N]);\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Reader in = new Reader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\n        build_prime();\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            run(in, out);\n        }\n\n        out.flush();\n        in.close();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Reader in = new Reader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\n        build_prime();\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            run(in, out);\n        }\n\n        out.flush();\n        in.close();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        SquareFreeDivisionHardVersion solver = new SquareFreeDivisionHardVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new SolutionE(), \"Main\", 1 << 26).start();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(System.out);\n\n        int primes[]=new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n                73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,\n                173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269,\n                271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\n                383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\n                491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n                613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\n                733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\n                1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721,\n                1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847,\n                1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973,\n                1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373,\n                3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517,\n                3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999};\n\n        int T=Int();\n        for(int t=0;t<T;t++){\n            int n=Int();\n            int k=Int();\n            int A[]=new int[n];\n            for(int i=0;i<n;i++){\n                A[i]=Int();\n            }\n            Sol sol=new Sol();\n            sol.solution(out,A,k,primes);\n        }\n        out.flush();\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n//        generate();\n        int T = sc.nextInt();\n        int MAX = (int) 1e7;\n        int[] canonical = new int[MAX + 1];\n        canonical[1] = 1;\n        for (int factor = 2; factor <= MAX; factor++) {\n            if (canonical[factor] == 0) {\n                for (int mult = factor; mult <= MAX; mult += factor) {\n                    int prev = canonical[mult / factor];\n                    if (prev % factor == 0) {\n                        canonical[mult] = prev / factor;\n                    } else {\n                        canonical[mult] = prev * factor;\n                    }\n                }\n            }\n        }\n//        System.out.println(Arrays.toString(canonical));\n        int[] freq = new int[MAX + 1];\n        while (T-->0) {\n            int N = sc.nextInt();\n            int K = sc.nextInt();\n            int[] a = new int[N + 1];\n            for (int i = 1; i <= N; i++) {\n                a[i] = canonical[sc.nextInt()];\n            }\n            int[][] transition = new int[K + 1][N + 1];\n//            HashMap<Integer, Integer> freq = new HashMap<>();\n            for (int k = 0; k <= K; k++) {\n                int l = N + 1;\n                int duplicates = 0;\n                for (int r = N; r >= 1; r--) {\n                    while (l - 1 >= 1) {\n                        int nextDuplicates = duplicates;\n                        if (freq[a[l - 1]] >= 1) {\n                            nextDuplicates++;\n                        }\n                        if (nextDuplicates <= k) {\n                            duplicates = nextDuplicates;\n                            freq[a[l - 1]]++;\n                            l--;\n                        } else {\n                            break;\n                        }\n                    }\n                    transition[k][r] = l;\n                    if (--freq[a[r]] >= 1) {\n                        duplicates--;\n                    }\n                }\n            }\n            int[][] dp = new int[K + 1][N + 1];\n            int oo = (int) 1e9;\n            for (int[] row : dp) {\n                Arrays.fill(row, oo);\n            }\n            for (int k = 0; k <= K; k++) {\n                dp[k][0] = 0;\n            }\n            for (int r = 1; r <= N; r++) {\n                for (int k = 0; k <= K; k++) {\n                    for (int delta = 0; delta <= k; delta++) {\n                        dp[k][r] = min(dp[k][r], dp[k - delta][transition[delta][r] - 1] + 1);\n                    }\n                }\n            }\n            out.println(dp[K][N]);\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        input_output();\n        Main solver = new Main();\n        solver.solve();\n        out.close(); \n        out.flush(); \n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\t\n\t\tis = System.in;\n\t\tint n = ni();\n\t\tint[] a = na(n);\n\t\tlong[] fact = new long[n+2];\n\t\tfact[0] = 1;\n\t\tfor (int i = 1; i < fact.length; i++) {\n\t\t\tfact[i] = (fact[i-1]*i)%mod;\n\t\t}\n\t\t\n\t\tHashMap<Integer,ArrayList<Integer>> hm = new HashMap<>();\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tint cp = a[i];\n\t\t\tint sfree = 1;\n\t\t\tfor(int p = 2; p*p <= a[i] && cp > 1; p++){\n\t\t\t\tint count = 0;\n\t\t\t\twhile(cp % p == 0){\n\t\t\t\t\tcp /= p;\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(count % 2 == 1) sfree *= p;\n\t\t\t}\n\t\t\tif(cp != 1) sfree *= cp;\n\t\t\tif(!hm.containsKey(sfree)) hm.put(sfree, new ArrayList<Integer>());\n\t\t\thm.get(sfree).add(a[i]);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tcounts = new int[hm.size()];\n\t\tint dex = 0;\n\t\t\n\t\t//System.out.println(hm);\n\t\tlong bigmult = 1;\n\t\tfor(Integer key : hm.keySet()){\n\t\t\tArrayList<Integer> list = hm.get(key);\n\t\t\tcounts[dex++] = list.size();\n\t\t\tbigmult = bigmult*fact[list.size()] % mod;\n//\t\t\tHashMap<Integer,Integer> dups = new HashMap<>();\n//\t\t\tfor(int x : list){\n//\t\t\t\tif(!dups.containsKey(x)){\n//\t\t\t\t\tdups.put(x, 0);\n//\t\t\t\t}\n//\t\t\t\tdups.put(x, dups.get(x)+1);\n//\t\t\t}\n\t\t\t\n//\t\t\tfor (int k : dups.keySet()) {\n//\t\t\t\tint amount = dups.get(k);\n//\t\t\t\tlong tomult = new BigInteger(fact[amount]+\"\").modInverse(new BigInteger(mod+\"\")).longValue();\n//\t\t\t\tbigmult*= tomult;\n//\t\t\t\tbigmult %= mod;\n//\t\t\t}\n\t\t\t\n\t\t}\n\t\tArrays.sort(counts);\n\t\tsufsum = new int[counts.length];\n\t\tfor(int i = counts.length-2; i >= 0; i--){\n\t\t\tsufsum[i] = sufsum[i+1]+counts[i+1];\n\t\t}\n\t\t\t\n\t\tchoose = new long[2*n+3][2*n+3];\n\t\tfor(int i = 0; i < choose.length; i++){\n\t\t\tchoose[i][0] = 1;\n\t\t\tfor(int j = 1; j <=i; j++){\n\t\t\t\tchoose[i][j] = (choose[i-1][j]+choose[i-1][j-1])%mod;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmemo = new long[counts.length][700];\n\t\tfor (int i = 0; i < memo.length; i++) {\n\t\t\tArrays.fill(memo[i], -1);\n\t\t}\n\t\t//System.out.println(\"bigmult: \" + bigmult);\n\t\tSystem.out.println((bigmult*dp(counts.length-2,counts[counts.length-1]-1))%mod);\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew C();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tfact[0] = 1;\n\t\tfor (int i = 1; i < 305; i++) {\n\t\t\tfact[i] = fact[i - 1] * i % MOD;\n\t\t}\n\t\tiFact[304] = I304;\n\t\tfor (int i = 303; i >= 0; i--) {\n\t\t\tiFact[i] = iFact[i + 1] * (i + 1) % MOD;\n\t\t}\n\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter printer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tint len = Integer.parseInt(reader.readLine());\n\t\tlong[] groups = new long[len + 1];\n\t\tint[] gSizes = new int[len + 1];\n\t\tint nG = 0;\n\n\t\tStringTokenizer inputData = new StringTokenizer(reader.readLine());\n\t\tiLoop:\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tlong nxt = Integer.parseInt(inputData.nextToken());\n\t\t\tfor (int j = 1; j <= nG; j++) {\n\t\t\t\tif (isSquare(nxt * groups[j])) {\n\t\t\t\t\tgSizes[j]++;\n\t\t\t\t\tcontinue iLoop;\n\t\t\t\t}\n\t\t\t}\n\t\t\tgroups[++nG] = nxt;\n\t\t\tgSizes[nG] = 1;\n\t\t}\n\n\t\tlong[][] dp = new long[nG + 1][len];\n\n\t\tdp[0][0] = 1;\n\n\t\tint fTotal = 0;\n\t\tfor (int fG = 0; fG < nG; fG++) {\n\t\t\tfor (int fB = 0; fB < len; fB++) {\n\t\t\t\tif (dp[fG][fB] == 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tint nGSize = gSizes[fG + 1];\n\t\t\t\tfor (int nS = 1; nS <= Math.min(nGSize, fTotal + 1); nS++) {\n\t\t\t\t\tfor (int nBR = 0; nBR <= Math.min(fB, nS); nBR++) {\n\t\t\t\t\t\tlong nW = dp[fG][fB] * fact[nGSize] % MOD * comb(nGSize - 1, nS - 1) % MOD * comb(fB, nBR) % MOD\n\t\t\t\t\t\t\t\t* comb(fTotal + 1 - fB, nS - nBR) % MOD;\n\t\t\t\t\t\tdp[fG + 1][fB - nBR + nGSize - nS] = (dp[fG + 1][fB - nBR + nGSize - nS] + nW) % MOD;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfTotal += gSizes[fG + 1];\n\t\t}\n\t\tprinter.println(dp[nG][0]);\n\t\tprinter.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 27);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        setupCombo(301);\n        FastScanner sc = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        \n        int N = sc.nextInt();\n        long[] a = sc.nextLongs(N);\n        boolean[] vis = new boolean[N];\n        int[] groups = new int[N + 1];\n        int G = 0;\n        for (int i = 0; i < N; i++) {\n            if (!vis[i]) {\n                vis[i] = true;\n                int elems = 1;\n                for (int j = i + 1; j < N; j++) {\n                    long prod = a[i] * a[j];\n                    long root = (long) Math.sqrt(prod);\n                    if (!vis[j] && prod == root * root) {\n                        vis[j] = true;\n                        elems++;\n                    }\n                }\n                groups[++G] = elems;\n            }\n        }\n\n        long[][] dp = new long[G + 1][N + 1];\n        // dp[g][bad] = ways to interleave first g groups for a given # of bad pairs\n        dp[0][0] = 1;\n        // dp[0][k] = 0, k != 0\n        int total = 0;\n        for (int prefix = 1; prefix <= G; prefix++) {\n            int amt = groups[prefix];\n            for (int prevBad = 0; prevBad <= max(0, total - 1); prevBad++) {\n                for (int fixed = 0; fixed <= min(prevBad, amt); fixed++) {\n                    for (int slots = max(1, fixed); slots <= min(amt, total + 1); slots++) {\n                        int introduced = amt - slots;\n                        long ways = mult(\n                                choose[prevBad][fixed],\n                                choose[total + 1 - prevBad][slots - fixed],\n                                choose[amt - 1][slots - 1],\n                                fact[amt],\n                                dp[prefix - 1][prevBad]\n                        );\n                        int currBad = prevBad + introduced - fixed;\n                        dp[prefix][currBad] = (dp[prefix][currBad] + ways) % mod;\n                    }\n                }\n            }\n            total += amt;\n//            System.out.println(Arrays.toString(dp[prefix]));\n        }\n        out.println(dp[G][0]);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        setupCombo(301);\n        FastScanner sc = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int N = sc.nextInt();\n        long[] a = new long[N];\n        HashMap<Long, Integer> clusters = new HashMap<>();\n        for (int i = 0; i < N; i++) {\n            a[i] = removeSquares(sc.nextLong());\n            clusters.merge(a[i], 1, Integer::sum);\n        }\n        int G = clusters.size();\n        int[] groups = new int[G + 1];\n        int ptr = 1;\n        for (int amt : clusters.values()) {\n            groups[ptr++] = amt;\n        }\n        long[][] dp = new long[G + 1][N + 1];\n        // dp[g][bad] = ways to interleave first g groups for a given # of bad pairs\n        dp[0][0] = 1;\n        // dp[0][k] = 0, k != 0\n        int total = 0;\n        /*\n        intuition for runtime analysis:\n        Say there were k groups, each size n / k\n\n        The outer loop is k, 2nd loop is n worst case,\n        and the inner 2 are bounded by n / k (amt per group)\n        k * n * (n / k) * (n / k) = n^3 / k, which works despite 4 loops!!\n\n        Seems hard to convert into pull-dp since prevBad has a more direct\n        meaning in the arrangements, so using that as our variable makes more sense\n         */\n        for (int prefix = 1; prefix <= G; prefix++) {\n            int amt = groups[prefix];\n            // key bugs here and there: USE THE CORRECT BOUNDS\n            for (int prevBad = 0; prevBad <= max(0, total - 1); prevBad++) {\n                for (int fixed = 0; fixed <= min(prevBad, amt); fixed++) {\n                    for (int slots = max(1, fixed); slots <= min(amt, total + 1); slots++) {\n                        int introduced = amt - slots;\n                        long ways = mult(\n                                choose[prevBad][fixed],\n                                choose[total + 1 - prevBad][slots - fixed],\n                                choose[amt - 1][slots - 1],\n                                fact[amt],\n                                dp[prefix - 1][prevBad] // key bug: NEED TO RELATE PREVIOUS DP\n                        );\n                        int currBad = prevBad + introduced - fixed;\n                        dp[prefix][currBad] = (dp[prefix][currBad] + ways) % mod;\n                    }\n                }\n            }\n            total += amt;\n//            System.out.println(Arrays.toString(dp[prefix]));\n        }\n        out.println(dp[G][0]);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        OnTheBench solver = new OnTheBench();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C2().run(); }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws Exception\n\t\tint n=sc.nextInt();build();\n\t\t\n\t\tint[] a=new int[n];parent=new int[n];size=new int[n];\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\ta[i]=sc.nextInt();\n\t\t\t\n\t\t\tparent[i]=i;\n\t\t\t\n\t\t\tsize[i]=1;\n\t\t}\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int j=i+1;j<n;j++)\n\t\t\t{\n\t\t\t\tlong curr=a[i]*1L*a[j],now=(long)Math.sqrt(curr);\n\t\t\t\t\n\t\t\t\tif(now*now==curr)\n\t\t\t\t{\n\t\t\t\t\tmerge(i,j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tList<Integer> list=new ArrayList<>();\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(getParent(i)==i)\n\t\t\t{\n\t\t\t\tlist.add(size[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t//\tout.println(list);\n\t\t\n\t\tint res=0;int[] poly=new int[1];poly[0]=1;\n\t\t\n\t\tfor(int i=0;i<list.size();i++)\n\t\t{\n\t\t\tint size=list.get(i);\n\t\t\t\n\t\t\tint[] arr=new int[size];arr[0]=1;\n\t\t\t\n\t\t\tfor(int j=1;j<size;j++)\n\t\t\t{\n\t\t\t\tint now1=C(size,j),now2=mul(fact[size-1],inv_fact[size-1-j]);\n\t\t\t\t\n\t\t\t\tint qq=mul(now1,now2);\n\t\t\t\t\n\t\t\t\tarr[j]=qq;\n\t\t\t}\n\t\t\t\n\t\t\tpoly=mul_poly(poly,arr,poly.length-1,size-1);\n\t\t}\n\t\t\n\t\tfor(int i=1,x=1;i<poly.length;i++,x*=-1)\n\t\t{\n\t\t\tint now=add(x,mod);\n\t\t\t\n\t\t\tint curr=mul(fact[n-i],poly[i]);\n\t\t\t\n\t\t\tcurr=mul(curr,now);\n\t\t\t\n\t\t\tres=add(res,curr);\n\t\t}\n\t\t\n\t//\tout.println(res);\n\t\t\n\t\tint zz=mul(res,mod-1);res=add(fact[n],zz);\n\t\t\n\t\tout.println(res);out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tn = in.nextInt();\n\t\tfact = new long[301];\n\t\tfact[0] = 1;\n\t\tfor (int i = 1; i < fact.length; i++) {\n\t\t\tfact[i] = fact[i - 1] * i;\n\t\t\tfact[i] %= MOD;\n\t\t}\n\t\tHashMap<Long, Integer> map = new HashMap<Long, Integer>();\n\t\tfs = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlong v = in.nextLong();\n\t\t\tlong r = 1;\n\t\t\tfor (int d = 2; d * d <= v; d++) {\n\t\t\t\tint cnt = 0;\n\t\t\t\twhile (v % d == 0) {\n\t\t\t\t\tv /= d;\n\t\t\t\t\tcnt ^= 1;\n\t\t\t\t}\n\t\t\t\tif (cnt == 1) {\n\t\t\t\t\tr *= d;\n\t\t\t\t}\n\t\t\t}\n\t\t\tr *= v;\n\t\t\tif (!map.containsKey(r)) {\n\t\t\t\tmap.put(r, map.size());\n\t\t\t}\n\t\t\tfs[map.get(r)]++;\n\t\t}\n\t\tcfs = new int[n];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tcfs[i] = cfs[i - 1] + fs[i - 1];\n\t\t}\n\t\tmemo = new long[n+1][n+1];\n\t\tfor(long[] arr : memo)\n\t\t\tArrays.fill(arr, -1);\n\t\tSystem.out.println(go(0, 0));\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C2().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C2().run(); }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tint n=in.nextInt();\n\t\tfac = new long[n+1];\n\t\tfaci = new long[n+1];\n\t\tfac[0]=faci[0]=1;\n\t\tfor(int i=1; i<=n; ++i)\n\t\t\tfaci[i]=modI(fac[i]=fac[i-1]*i%M, M);\n\t\tList<List<Integer>> grps = new ArrayList<List<Integer>>();\n\t\tfor(int i=0; i<n; ++i) {\n\t\t\tint ai=in.nextInt();\n\t\t\tfor(int j=0; ; ++j) {\n\t\t\t\tif(j>=grps.size())\n\t\t\t\t\tgrps.add(new ArrayList<Integer>());\n\t\t\t\tif(grps.get(j).size()>0&&!ps((long)grps.get(j).get(0)*ai))\n\t\t\t\t\tcontinue;\n\t\t\t\tgrps.get(j).add(ai);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tlong[][] dp = new long[grps.size()][n-grps.size()+1];\n\t\tdp[0][grps.get(0).size()-1]=fac[grps.get(0).size()];\n\t\tint ad=grps.get(0).size();\n\t\tfor(int i=1; i<grps.size(); ++i) {\n\t\t\tfor(int j=0; j<dp[i-1].length; ++j) {\n\t\t\t\tif(dp[i-1][j]==0)\n\t\t\t\t\tcontinue;\n\t\t\t\tfor(int k=0; k<grps.get(i).size(); ++k)\n\t\t\t\t\tfor(int l=Math.max(grps.get(i).size()+j-k-ad-1, 0); l<=Math.min(grps.get(i).size()-k, j); ++l)\n\t\t\t\t\t\tdp[i][j+k-l]=(fac[grps.get(i).size()]*nck(j, l)%M*nck(ad+1-j, grps.get(i).size()-k-l)%M*nck(grps.get(i).size()-1, k)%M*dp[i-1][j]+dp[i][j+k-l])%M;\n\t\t\t}\n\t\t\tad+=grps.get(i).size();\n\t\t}\n\t\t//out.println(Arrays.deepToString(dp));\n\t\tout.println(dp[grps.size()-1][0]);\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) {\n    StringBuilder solution = new StringBuilder();\n    int rows = FR.nextInt();\n    int cols = FR.nextInt();\n    int moves = FR.nextInt();\n\n    Map<Integer, Integer> horizontalEdgeWeights = new HashMap<Integer, Integer>();\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols - 1; c++) {\n        int hash = getHash(r, c);\n        horizontalEdgeWeights.put(hash, FR.nextInt());\n      }\n    }\n\n    Map<Integer, Integer> verticalEdgeWeights = new HashMap<Integer, Integer>();\n    for (int r = 0; r < rows - 1; r++) {\n      for (int c = 0; c < cols; c++) {\n        int hash = getHash(r, c);\n        verticalEdgeWeights.put(hash, FR.nextInt());\n      }\n    }\n    \n    List<List<Integer>> result = getResult(rows, cols, moves, horizontalEdgeWeights, verticalEdgeWeights);\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols; c++) {\n        int value = (result != null ? result.get(r).get(c) : -1);\n        solution.append(value + \" \");\n      }\n      solution.append(\"\\n\");\n    }\n\n\t\tPW.print(solution.toString());\n    PW.close();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        solve();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\t/**/\n\t\tDataInputStream in = new DataInputStream(System.in);\n\t\t/*/\n\t\tDataInputStream in = new DataInputStream(new FileInputStream(\"src/d.in\"));\n\t\t/**/\n\t\t\n\t\tin.read(buf, 0, 1<<26);\n\t\t\n\t\tint n = nni();\n\t\tint m = nni();\n\t\tint k = nni();\n\t\t\n\t\tif (k%2==1) {\n\t\t\tfor (int i = 0; i < n; ++i) {\n\t\t\t\tStringBuilder ans = new StringBuilder();\n\t\t\t\tString sp = \"\";\n\t\t\t\tfor (int j = 0; j < m; ++j) {\n\t\t\t\t\tans.append(sp+\"-1\");\n\t\t\t\t\tsp = \" \";\n\t\t\t\t}\n\t\t\t\tSystem.out.println(ans);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tint[][] lr = new int[n][m-1];\n\t\tint[][] ud = new int[n-1][m];\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tfor (int j = 0; j < m-1; ++j) {\n\t\t\t\tlr[i][j] = nni();\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n-1; ++i) {\n\t\t\tfor (int j = 0; j < m; ++j) {\n\t\t\t\tud[i][j] = nni();\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[][][] ans = new int[k/2+1][n][m];\n\t\t\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tfor (int j = 0; j < m; ++j) {\n\t\t\t\tfor (int q = 1; q <= k/2; ++q) {\n\t\t\t\t\tans[q][i][j] = 123456789;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int uq = 0; uq < k/2; ++uq) {\n\t\t\tfor (int ui = 0; ui < n; ++ui) {\n\t\t\t\tfor (int uj = 0; uj < m; ++uj) {\n\t\t\t\t\tint w = ans[uq][ui][uj];\n\t\t\t\t\tif (ui>0 && w+ud[ui-1][uj]<ans[uq+1][ui-1][uj]) {\n\t\t\t\t\t\tans[uq+1][ui-1][uj] = w+ud[ui-1][uj];\n\t\t\t\t\t}\n\t\t\t\t\tif (ui<n-1 && w+ud[ui][uj]<ans[uq+1][ui+1][uj]) {\n\t\t\t\t\t\tans[uq+1][ui+1][uj] = w+ud[ui][uj];\n\t\t\t\t\t}\n\t\t\t\t\tif (uj>0 && w+lr[ui][uj-1]<ans[uq+1][ui][uj-1]) {\n\t\t\t\t\t\tans[uq+1][ui][uj-1] = w+lr[ui][uj-1];\n\t\t\t\t\t}\n\t\t\t\t\tif (uj<m-1 && w+lr[ui][uj]<ans[uq+1][ui][uj+1]) {\n\t\t\t\t\t\tans[uq+1][ui][uj+1] = w+lr[ui][uj];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tStringBuilder as = new StringBuilder();\n\t\t\tString sp = \"\";\n\t\t\tfor (int j = 0; j < m; ++j) {\n\t\t\t\tas.append(sp+ans[k/2][i][j]*2);\n\t\t\t\tsp = \" \";\n\t\t\t}\n\t\t\tSystem.out.println(as);\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tf = new FastIO();\n\n\t\tint n = f.ni(), m = f.ni(), k = f.ni(), i, j;\n\t\tve = new long[n-1][];\n\t\the = new long[n][];\n\n\t\tlong[][] ans = new long[n][m], pans = new long[n][m], temp;\n\n\t\tfor(i = 0; i < n; i++)\n\t\t\the[i] = f.nla(m-1);\n\n\t\tfor(i = 0; i < n-1; i++)\n\t\t\tve[i] = f.nla(m);\n\n\t\tif(k%2 == 1)\n\t\t{\n\t\t\tfor(i = 0; i < n; i++)\n\t\t\t\tArrays.fill(ans[i], -1L);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tk /= 2;\n\n\t\t\twhile(k-->0)\n\t\t\t{\n\t\t\t\tfor(i = 0; i < n; i++)\n\t\t\t\t{\n\t\t\t\t\tfor(j = 0; j < m; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tans[i][j] = Integer.MAX_VALUE;\n\n\t\t\t\t\t\tif(i != 0)\n\t\t\t\t\t\t\tans[i][j] = Math.min(ans[i][j], pans[i-1][j] + 2*edge(i, j, i-1, j));\n\n\t\t\t\t\t\tif(i != n-1)\n\t\t\t\t\t\t\tans[i][j] = Math.min(ans[i][j], pans[i+1][j] + 2*edge(i, j, i+1, j));\n\n\t\t\t\t\t\tif(j != 0)\n\t\t\t\t\t\t\tans[i][j] = Math.min(ans[i][j], pans[i][j-1] + 2*edge(i, j, i, j-1));\n\n\t\t\t\t\t\tif(j != m-1)\n\t\t\t\t\t\t\tans[i][j] = Math.min(ans[i][j], pans[i][j+1] + 2*edge(i, j, i, j+1));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// f.err(k + \"\\n\");\n\t\t\t\t// errorprint(ans, n, m);\n\n\t\t\t\ttemp = pans;\n\t\t\t\tpans = ans;\n\t\t\t\tans = temp;\n\t\t\t}\n\n\t\t\ttemp = pans;\n\t\t\tpans = ans;\n\t\t\tans = temp;\n\t\t}\n\n\t\tfor(i = 0; i < n; i++)\n\t\t{\n\t\t\tfor(j = 0; j < m; j++)\n\t\t\t{\n\t\t\t\tf.out(ans[i][j] + \" \");\n\t\t\t}\n\n\t\t\tf.out(\"\\n\");\n\t\t}\n\n\t\tf.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n//\t\tScanner sc=new Scanner(System.in);\n\t\tFastScanner sc = new FastScanner();\n\t\tFastOutput out = new FastOutput(System.out);\n\t\tint n=sc.nextInt();\n\t\tint m=sc.nextInt();\n\t\tint k=sc.nextInt();\n\t\tint ans[][][]=new int[n][m][11];\n\t\tint arr[][]=new int[n*m][4];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m-1;j++){\n\t\t\t\tint x=sc.nextInt();\n\t\t\t\tarr[i*m+j][3]=x;\n\t\t\t\tarr[i*m+j+1][2]=x;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n-1;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tint x=sc.nextInt();\n\t\t\t\tarr[i*m+j][1]=x;\n\t\t\t\tarr[(i+1)*m+j][0]=x;\n\t\t\t}\n\t\t}\n\t\tif(k%2==1){\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tStringBuilder sb=new StringBuilder(\"\");\n\t\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\t\tans[i][j][10]=-1;\n\t\t\t\t\tsb.append(ans[i][j][10]+\" \");\n\t\t\t\t}\n\t\t\t\tout.println(sb.toString());\n\t\t\t}\n\t\t}else{\n\t\t\t\n\t\t\tfor(int ceng=1;ceng<=k/2;ceng++){\n\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\t\t\tans[i][j][ceng]=Integer.MAX_VALUE/3;\n\t\t\t\t\t\tfor(int dr=0;dr<4;dr++){\n\t\t\t\t\t\t\tint nx=i+dir[dr][0];\n\t\t\t\t\t\t\tint ny=j+dir[dr][1];\n\t\t\t\t\t\t\tif(nx<n&&ny<m&&nx>=0&&ny>=0){\n\t\t\t\t\t\t\t\tans[i][j][ceng]=Math.min(ans[i][j][ceng], ans[nx][ny][ceng-1]+arr[i*m+j][dr]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tStringBuilder sb=new StringBuilder(\"\");\n\t\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\t\tsb.append(ans[i][j][k/2]*2+\" \");\n\t\t\t\t}\n\t\t\t\tout.println(sb.toString());\n\t\t\t}\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n\n        int n = i();\n        int m = i();\n        int k = i();\n\n        int[][] a = new int[n][m - 1];\n        for (int i = 0; i < n; i++) {\n            a[i] = input(m - 1);\n        }\n\n        int[][] b = new int[n - 1][m];\n        for (int i = 0; i < n - 1; i++) {\n            b[i] = input(m);\n        }\n\n        if (k % 2 > 0) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    out.print(-1 + \" \");\n                }\n                out.println();\n            }\n            out.flush();\n            return;\n        }\n\n        int[][][] f = new int[n][m][k / 2 + 1];\n\n        for (int s = 1; s <= k / 2; s++) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    int ans = -1;\n\n                    if (j > 0) {\n                        ans = f[i][j - 1][s - 1] + a[i][j - 1];\n                    }\n                    if (i > 0) {\n                        int t = f[i - 1][j][s - 1] + b[i - 1][j];\n                        ans = ans == -1 ? t : Math.min(ans, t);\n                    }\n                    if (i < n - 1) {\n                        int t = f[i + 1][j][s - 1] + b[i][j];\n                        ans = ans == -1 ? t : Math.min(ans, t);\n                    }\n                    if (j < m - 1) {\n                        int t = f[i][j + 1][s - 1] + a[i][j];\n                        ans = ans == -1 ? t : Math.min(ans, t);\n                    }\n\n                    f[i][j][s] = ans;\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                out.print(f[i][j][k / 2] * 2 + \" \");\n            }\n            out.println();\n        }\n        out.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new D2().run(); }\n", "complexity": "cubic"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            int n=Int(),m=Int(),k=Int();\n            List<int[]>g[]=new ArrayList[n*m+1];\n            for(int i=0;i<g.length;i++){\n                g[i]=new ArrayList<>();\n            }\n            for(int i=0;i<n;i++){\n                for(int j=0;j<m-1;j++){\n                    int w=Int();\n                    int u=i*m+j;\n                    int v=i*m+(j+1);\n                    g[u].add(new int[]{v,w});\n                    g[v].add(new int[]{u,w});\n                }\n            }\n\n            for(int i=0;i<n-1;i++){\n                for(int j=0;j<m;j++){\n                    int w=Int();\n                    int u=i*m+j;\n                    int v=(i+1)*m+j;\n                    g[u].add(new int[]{v,w});\n                    g[v].add(new int[]{u,w});\n                }\n            }\n\n            Solution sol=new Solution(out);\n            sol.solution(n,m,k,g);\n        }\n        out.close();\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        sc = new FastScanner();\n        pw = new PrintWriter(System.out);\n\n        int N = sc.ni();\n        int M = sc.ni();\n        int K = sc.ni();\n        int[][] LR = new int[N][M-1];\n        for (int i = 0; i < N; i++) {\n            LR[i] = sc.intArray(M-1,0);\n        }\n        int[][] UD = new int[N-1][M];\n        for (int i = 0; i < N-1; i++) {\n            UD[i] = sc.intArray(M,0);\n        }\n\n        if (K%2==0) {\n            int T = K/2;\n            int[][] dist = new int[N][M];\n\n            for (int step = 1; step <= T; step++) {\n                int[][] newDist = new int[N][M];\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < M; j++) {\n                        newDist[i][j] = INF;\n\n                        //up\n                        if (i > 0) {\n                            newDist[i][j] = Math.min(newDist[i][j],UD[i-1][j]+dist[i-1][j]);\n                        }\n\n                        //down\n                        if (i < N-1) {\n                            newDist[i][j] = Math.min(newDist[i][j],UD[i][j]+dist[i+1][j]);\n                        }\n\n                        //left\n                        if (j > 0) {\n                            newDist[i][j] = Math.min(newDist[i][j],LR[i][j-1]+dist[i][j-1]);\n                        }\n\n                        //right\n                        if (j < M-1) {\n                            newDist[i][j] = Math.min(newDist[i][j],LR[i][j]+dist[i][j+1]);\n                        }\n                    }\n                }\n                dist = newDist;\n            }\n            \n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < M; j++) {\n                    pw.print((2*dist[i][j]) + \" \");\n                }\n                pw.println();\n            }\n        } else {\n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < M; j++) {\n                    pw.print(\"-1 \");\n                }\n                pw.println();\n            }\n        }\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        sc = new _Scanner(System.in);\n        pw = new PrintWriter(System.out);\n        //long startTime = System.currentTimeMillis();\n        //int t = sc.nextInt();\n        int t = 1;\n        while (t-- > 0) {\n            solve();\n        }\n        pw.flush();\n        //System.out.println(\"time: \" + (System.currentTimeMillis() - startTime));\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        DExplorerSpace solver = new DExplorerSpace();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n\n        sc = new Scanner(System.in);\n        out = new PrintWriter(System.out);\n        //int t = sc.nextInt();\n        for(int i=0; i<1; i++) {\n            solve();\n        }\n        out.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] havish) throws Exception{\n\t\t// TODO Auto-generated method stub\n \t\tsc = new MyScanner();\n \t\tout = new PrintWriter(System.out);\n \t\tint n = sc.nextInt();\n \t\tint m = sc.nextInt();\n \t\tint k = sc.nextInt();\n \t\tpaths = new long[n+1][m+1][4]; //up down left right;\n \t\tpowers501 = new long[5];\n \t\tpowers501[0] = 1;\n \t\tfor(int j = 1;j<5;j++){\n \t\t\tpowers501[j] = 501L*powers501[j-1];\n \t\t}\n \t\tlong[][][]dp = new long[n+1][m+1][k/2+2];\n \t\tfor(int i = 1;i<=n;i++){\n \t\t\tfor(int j = 1;j<=m-1;j++){\n \t\t\t\tint val = sc.nextInt();\n \t\t\t\tpaths[i][j][3] = val;\n \t\t\t\tpaths[i][j+1][2] = val;\n// \t\t\t\tpaths.put(powers501[3]*i + powers501[2]*j + powers501[1]*i + powers501[0]*(j+1), val);\n// \t\t\t\tpaths.put(powers501[3]*i + powers501[2]*(j+1) + powers501[1]*i + powers501[0]*j, val);\n \t\t\t}\n \t\t}\n \t\tfor(int i = 1;i<=n-1;i++){\n \t\t\tfor(int j = 1;j<=m;j++){\n \t\t\t\tint val = sc.nextInt();\n// \t\t\t\tpaths.put(powers501[3]*(i+1) + powers501[2]*j + powers501[1]*i + powers501[0]*j, val);\n// \t\t\t\tpaths.put(powers501[3]*i + powers501[2]*j + powers501[1]*(i+1) + powers501[0]*j, val);\n \t\t\t\tpaths[i][j][1] = val;\n \t\t\t\tpaths[i+1][j][0] = val;\n \t\t\t\t\n \t\t\t}\n \t\t}\n \t\tfor(int j = 1;j<=n;j++){\n \t\t\tfor(int i = 1;i<=m;i++){\n \t\t\t\tArrays.fill(dp[j][i],  Integer.MAX_VALUE);\n \t\t\t\tdp[j][i][0] = 0;\n \t\t\t}\n \t\t}\n \t\tfor(int steps = 1;steps<k/2+2;steps++){\n \t\t\tfor(int i = 1;i<=n;i++){\n \t\t\t\tfor(int j = 1;j<=m;j++){\n \t\t\t\t\tif (i-1 > 0) {\n \t\t\t\t\t\tdp[i][j][steps] = Math.min(dp[i-1][j][steps-1] + getVal(i, j, i-1, j), dp[i][j][steps]);\n \t\t\t\t\t}\n \t\t\t\t\tif (j-1 > 0) {\n \t\t\t\t\t\tdp[i][j][steps] = Math.min(dp[i][j-1][steps-1] + getVal(i, j, i, j-1), dp[i][j][steps]);\n \t\t\t\t\t}\n \t\t\t\t\t\n \t\t\t\t\tif (i+1 <= n) {\n \t\t\t\t\t\tdp[i][j][steps] = Math.min(dp[i+1][j][steps-1] + getVal(i, j, i+1, j), dp[i][j][steps]);\n \t\t\t\t\t}\n \t\t\t\t\tif (j+1 <= m) {\n \t\t\t\t\t\tdp[i][j][steps] = Math.min(dp[i][j+1][steps-1] + getVal(i, j, i, j+1), dp[i][j][steps]);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (k%2 == 1){\n \t\t\tfor(int j = 1;j<=n;j++){\n \t\t\t\tfor(int s = 1;s<=m;s++){\n \t\t\t\t\tout.print(-1 + \" \");\n \t\t\t\t}\n \t\t\t\tout.println();\n \t\t\t}\n \t\t}\n \t\telse{\n \t\t\tfor(int j = 1;j<=n;j++){\n \t\t\t\tfor(int s = 1;s<=m;s++){\n \t\t\t\t\tout.print(dp[j][s][k/2]*2L + \" \");\n \t\t\t\t}\n \t\t\t\tout.println();\n \t\t\t}\n \t\t}\n \t\t\n \t\t\n\t \t\t\n \t\tout.close();\n \t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        n = input.nextInt();\n        m = input.nextInt();\n        int k = input.nextInt();\n        hor = new int[n][m - 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m - 1; j++) {\n                hor[i][j] = input.nextInt();\n            }\n        }\n        ver = new int[n - 1][m];\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < m; j++) {\n                ver[i][j] = input.nextInt();\n            }\n        }\n        if (k % 2 != 0) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    System.out.print(-1 + \" \");\n                }\n                System.out.println(\"\");\n            } \n        } else {\n            dp = new long[n][m][k + 1];\n            for (int i = 0; i < n; i++)\n                for (int j = 0; j < m; j++)\n                    for (int x = 0; x <= k; x++) {\n                        dp[i][j][x] = Long.MAX_VALUE;\n                    }\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    minCost(i, j, k);\n                    System.out.print(dp[i][j][k] + \" \");\n                }\n                System.out.println(\"\");\n            }\n        }\n        \n        input.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tfor (int i = 0; i < 505; i++) {\n\t\t\tfor (int j = 0; j < 505; j++) {\n\t\t\t\tfor (int k = 0; k < 15; k++) {\n\t\t\t\t\tdp[i][j][k] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tn = in.iscan(); m = in.iscan(); k =in.iscan();\n\t\thorW = new int[n+1][m]; verW = new int[n][m+1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= m-1; j++) {\n\t\t\t\thorW[i][j] = in.iscan();\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n-1; i++) {\n\t\t\tfor (int j = 1; j <= m; j++) {\n\t\t\t\tverW[i][j] = in.iscan();\n\t\t\t}\n\t\t}\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= m; j++) {\n\t\t\t\tif (k % 2 == 1) {\n\t\t\t\t\tout.print(-1 + \" \");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tout.print(dfs(i, j, k/2) * 2 + \" \");\n\t\t\t}\n\t\t\tout.println();\n\t\t}\n\t\tout.close();\n\t} \n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        MyScanner scanner = new MyScanner();\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        int k = scanner.nextInt();\n        int[][] d1 = new int[n][m-1];\n        int[][] d2 = new int[n-1][m];\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<m-1;j++) {\n                d1[i][j] = scanner.nextInt();\n            }\n        }\n        for(int i=0;i<n-1;i++) {\n            for(int j=0;j<m;j++) {\n                d2[i][j] = scanner.nextInt();\n            }\n        }\n        deal(n,m,k,d1,d2);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws IOException {\n        Scan input=new Scan();\n        StringBuilder ans=new StringBuilder(\"\");\n        \n        n=input.scanInt();\n        m=input.scanInt();\n        k=input.scanInt();\n        \n        dp=new int[n][m][k];\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<m;j++) {\n                for(int kk=0;kk<k;kk++) {\n                    dp[i][j][kk]=-1;\n                }\n            }\n        }\n        \n        uu=new int[n][m];\n        rr=new int[n][m];\n        dd=new int[n][m];\n        ll=new int[n][m];\n        \n        for(int i=0;i<n;i++) {\n            for(int j=0;j<m-1;j++) {\n                int tmp=input.scanInt();\n                rr[i][j]=tmp;\n                ll[i][j+1]=tmp;\n            }\n        }\n        \n        for(int i=0;i<n-1;i++) {\n            for(int j=0;j<m;j++) {\n                int tmp=input.scanInt();\n                dd[i][j]=tmp;\n                uu[i+1][j]=tmp;\n            }\n        }\n        \n        for(int i=0;i<n;i++) {\n            for(int j=0;j<m;j++) {\n                if(k%2!=0) {\n                    ans.append(-1+\" \");\n                    continue;\n                }\n                ans.append((2*solve(i,j,k/2))+\" \");\n            }\n            ans.append(\"\\n\");\n        }\n        \n        System.out.println(ans);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1517D o = new CF1517D(); o.main(); o.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        FastScanner in = new FastScanner();\n        FastWriter out = new FastWriter();\n        int n=in.nextInt();\n        int m=in.nextInt();\n        int k=in.nextInt();\n        int[][] right=new int[n][m-1];\n        int[][] down=new int[n-1][m];\n        for (int i = 0; i < n; i++) {\n            right[i]=in.nextArray(m-1);\n        }\n        for (int i = 0; i < n - 1; i++) {\n            down[i]=in.nextArray(m);\n        }\n        if(k%2!=0){\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    out.print(\"-1 \");\n                }\n                out.println();\n            }\n        }else {\n            int[][] dp=new int[n][m];\n            int[][] dp1=new int[n][m];\n            for (int i = 0; i < k / 2; i++) {\n                for (int j = 0; j < n; j++) {\n                    for (int l = 0; l < m; l++) {\n                        int ans=Integer.MAX_VALUE;\n                        if(j>0){\n                            ans=Math.min(ans,dp[j-1][l]+down[j-1][l]);\n                        }\n                        if(l>0){\n                            ans=Math.min(ans,dp[j][l-1]+right[j][l-1]);\n                        }\n                        if(j!=n-1){\n                            ans=Math.min(ans,dp[j+1][l]+down[j][l]);\n                        }\n                        if(l!=m-1){\n                            ans=Math.min(ans,dp[j][l+1]+right[j][l]);\n                        }\n                        dp1[j][l]=ans;\n                    }\n                }\n                dp=dp1;\n                dp1=new int[n][m];\n            }\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    out.println((2*dp[i][j])+\" \");\n                }\n                out.println();\n            }\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[][] costRight = new int[n][m - 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m - 1; j++) {\n\t\t\t\tcostRight[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] costDown = new int[n - 1][m];\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tcostDown[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tif (k % 2 == 1) {\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tpw.print(-1 + \" \");\n\t\t\t\t}\n\t\t\t\tpw.println();\n\t\t\t}\n\t\t\tpw.close();\n\t\t\treturn;\n\t\t}\n\t\tint[][][] dp = new int[k + 1][n][m];\n\t\tfor (int w = 2; w <= k; w += 2) {\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tdp[w][i][j] = (int) 1e9;\n\t\t\t\t\tif (i + 1 < n)\n\t\t\t\t\t\tdp[w][i][j] = Math.min(dp[w][i][j], 2 * costDown[i][j] + dp[w - 2][i + 1][j]);\n\t\t\t\t\tif (i - 1 >= 0)\n\t\t\t\t\t\tdp[w][i][j] = Math.min(dp[w][i][j], 2 * costDown[i - 1][j] + dp[w - 2][i - 1][j]);\n\t\t\t\t\tif (j + 1 < m)\n\t\t\t\t\t\tdp[w][i][j] = Math.min(dp[w][i][j], 2 * costRight[i][j] + dp[w - 2][i][j + 1]);\n\t\t\t\t\tif (j - 1 >= 0)\n\t\t\t\t\t\tdp[w][i][j] = Math.min(dp[w][i][j], 2 * costRight[i][j - 1] + dp[w - 2][i][j - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tpw.print(dp[k][i][j] + \" \");\n\t\t\t}\n\t\t\tpw.println();\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) {\n    int n = scan.nextInt();\n    int m = scan.nextInt();\n    int k = scan.nextInt();\n    int x[][] = new int[n][m];\n    int y[][] = new int[n][m];\n    for(int i=0; i<n; ++i) {\n      for(int j=0; j<m-1; ++j) {\n        x[i][j] = scan.nextInt();\n      }\n    }\n    for(int i=0; i<n-1; ++i) {\n      for(int j=0; j<m; ++j) {\n        y[i][j] = scan.nextInt();\n      }\n    }\n    Main mm = new Main(x,y,k);\n    mm.go();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n    \tint test=1;\n    \t//test=sc.nextInt();\n    \twhile(test-->0) {\n    \t\tn=sc.nextInt();m=sc.nextInt();\n    \t\tint k=sc.nextInt();\n    \t\tif(k%2!=0) {\n    \t\t\tfor(int i=0;i<n;i++) {\n    \t\t\t\tfor(int j=0;j<m;j++) out.print(-1+\" \");\n    \t\t\t\tout.println();\n    \t\t\t}\n    \t\t\tcontinue;\n    \t\t}\n    \t\thor=new int[n][m-1];\n    \t\tver=new int[n-1][m];\n    \t\tfor(int i=0;i<n;i++) {\n    \t\t\tfor(int j=0;j<m-1;j++) {\n    \t\t\t\thor[i][j]=sc.nextInt();\n    \t\t\t}\n    \t\t}\n    \t\tfor(int i=0;i<n-1;i++) {\n    \t\t\tfor(int j=0;j<m;j++) {\n    \t\t\t\tver[i][j]=sc.nextInt();\n    \t\t\t}\n    \t\t}\n    \t\tdp=new int[n][m][k+1];\n    \t\tfor(int i=0;i<n;i++) {\n    \t\t\tfor(int j=0;j<m;j++) {\n    \t\t\t\tout.print(solve(i,j,k)+\" \");\n    \t\t\t}\n    \t\t\tout.println();\n    \t\t}\n    \t\t\n    \t}\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\n        int i;\n\n        String[] s=br.readLine().trim().split(\" \");\n        N=Integer.parseInt(s[0]);\n        M=Integer.parseInt(s[1]);\n        K=Integer.parseInt(s[2]);\n\n        edge=new ArrayDeque[N][M];\n        for(i=0;i<N;i++)\n        {\n            for(int j=0;j<M;j++)\n                edge[i][j]=new ArrayDeque<>();\n        }\n\n        w1=new long[N][M-1];\n        w2=new long[N-1][M];\n        dp=new long[N][M][K/2+1];\n\n        for(i=0;i<N;i++)\n        {\n            s=br.readLine().trim().split(\" \");\n            for(int j=0;j<M-1;j++) w1[i][j]=Integer.parseInt(s[j])*2L;\n        }\n        for(i=0;i<N-1;i++)\n        {\n            s=br.readLine().trim().split(\" \");\n            for(int j=0;j<M;j++) w2[i][j]=Integer.parseInt(s[j])*2L;\n        }\n\n        for(i=0;i<N;i++)\n        {\n            for(int j=0;j<M;j++)\n                Arrays.fill(dp[i][j],-1);\n        }\n\n        if(K%2==1)\n        {\n            K/=2;\n            answer();\n            System.exit(0);\n        }\n\n        K/=2;\n        for(i=0;i<N;i++)\n        {\n            for(int j=0;j<M;j++)\n                solve(i,j,K);\n        }\n\n        answer();\n    }\n", "complexity": "cubic"}
{"code": "\t  public static void main(String[] args)  throws IOException\n\t\t    //CHECK FOR N=1\n       \t//CHECK FOR N=1\n\t    //CHECK FOR N=1\t\t\t\n       \t//CHECK FOR N=1\n\t\t  \n\t\t  \n\t\t  \n\t\t   PrintWriter out=new PrintWriter(System.out);\n\t\t  // StringBuffer sb=new StringBuffer(\"\");\n\t\t  int ttt=1;\n\t\t//  ttt =i(); \t\n\t\t   \n\t        outer :while (ttt-- > 0) \n\t\t\t{\n\n\t        \tint n=i();\n\t        \tint m=i();\n\t        \tint k=i();\n\t        \tint A[][]=input(n,m-1);\n\t        \tint B[][]=input(n-1, m);\n\t        \tdp=new long[n+1][m+1][k+1];\n\t        \tfor(int ii=0;ii<n;ii++) {\n\t        \t\tfor(int jj=0;jj<m;jj++) {\n\t        \t\t\tArrays.fill(dp[ii][jj],-1);\n\t        \t\t}\n\t        \t}\n\t        \tif(k%2!=0) {\n\t        \t\tfor(int i=0;i<n;i++) {\n\t        \t\t\tfor(int j=0;j<m;j++) {\n\t        \t\t\t\tSystem.out.print(\"-1 \");\n\t        \t\t\t}\n\t        \t\t\tSystem.out.println();\n\t        \t\t}\n\t        \t}\n\t        \telse {\n\t        \tgo(A, B, 0, 0, k/2, n, m);\n\t        \tfor(int i=0;i<n;i++) {\n        \t\t\tfor(int j=0;j<m;j++) {\n        \t\t\t\tSystem.out.print(dp[i][j][k/2]*2+\" \");\n        \t\t\t}\n        \t\t\tSystem.out.println();\n        \t\t}\n\t        \t}\n\t        \t\n\t\t\t}\n\t\t     out.close();\n    \t//System.out.println(sb.toString());\n\t     \n\t     \n\t    //CHECK FOR N=1                    //CHECK FOR M=0\n        //CHECK FOR N=1                    //CHECK FOR M=0\n       \t//CHECK FOR N=1\n       \t//CHECK FOR N=1\n       \t//CHECK FOR N=1\n\t\t        \t\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)\n\t\tFastScanner fs = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn = fs.nextInt(); m = fs.nextInt(); k = fs.nextInt();\n\t\thor = new int[n][m]; ver = new int[n][m];\n\t\tdp = new long[505][505][24];\n\t\tfor(int i=0;i<505;i++)for(int j=0;j<505;j++)for(int k=0;k<24;k++)dp[i][j][k] = -1;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int j=0;j<m-1;j++)\n\t\t\t{\n\t\t\t\tint a = fs.nextInt();\n\t\t\t\thor[i][j] = a;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(int row=0;row<n-1;row++)\n\t\t{\n\t\t\tfor(int col =0;col<m;col++)\n\t\t\t{\n\t\t\t\tint a = fs.nextInt();\n\t\t\t\tver[row][col] = a;\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tfor(int row=0;row<n;row++)\n\t\t{\n\t\t\tfor(int col=0;col<m;col++)\n\t\t\t{\n\t\t\t\tlong d = dist(row,col);\n\t\t\t\tif(d<Integer.MAX_VALUE)\n\t\t\t\t{\n\t\t\t\t\tout.print(d+\" \");\n\t\t\t\t}\n\t\t\t\telse out.print(\"-1 \");\n\t\t\t}\n\t\t\tout.println();\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tboolean oj = true;\n\t\tif (oj) {\n\t\t\tsc = new FastScanner();\n\t\t\tout = new PrintWriter(System.out);\n\t\t} else {\n\t\t\tsc = new FastScanner(100);\n\t\t\tout = new PrintWriter(\"output.txt\");\n\t\t}\n\t\tint t = 1;\n//\t\tt = sc.nextInt();\n\t\twhile (t-- > 0) {\n\t\t\tprocess();\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new Thread(null ,new Runnable(){\n            public void run()\n            {\n                try{\n                    solve();\n                } catch(Exception e){\n                    e.printStackTrace();\n                }\n            }\n        },\"1\",1<<26).start();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[])\n        FastReader input=new FastReader();\n        PrintWriter out=new PrintWriter(System.out);\n        int T=1;\n        while(T-->0)\n        {\n            int n=input.nextInt();\n            int m=input.nextInt();\n            int k=input.nextInt();\n            int arr1[][]=new int[n+1][m];\n            for(int i=1;i<=n;i++)\n            {\n                for(int j=1;j<m;j++)\n                {\n                    arr1[i][j]=input.nextInt();\n                }\n            }\n            int arr2[][]=new int[n][m+1];\n            for(int i=1;i<n;i++)\n            {\n                for(int j=1;j<=m;j++)\n                {\n                    arr2[i][j]=input.nextInt();\n                }\n            }\n            if(k%2==0)\n            {\n                int dp[][][]=new int[n+1][m+1][k+1];\n                for(int l=2;l<=k;l+=2)\n                {\n                    for(int i=1;i<=n;i++)\n                    {\n                        for(int j=1;j<=m;j++)\n                        {\n                            int min=Integer.MAX_VALUE;\n                            if(j+1<=m)\n                            {\n                                min=Math.min(min,dp[i][j+1][l-2]+2*arr1[i][j]);\n                            }\n                            if(i+1<=n)\n                            {\n                                min=Math.min(min,dp[i+1][j][l-2]+2*arr2[i][j]);\n                            }\n                            if(j-1>=1)\n                            {\n                                min=Math.min(min,dp[i][j-1][l-2]+2*arr1[i][j-1]);\n                            }\n                            if(i-1>=1)\n                            {\n                                min=Math.min(min,dp[i-1][j][l-2]+2*arr2[i-1][j]);\n                            }\n                            dp[i][j][l]=min;\n                        }\n                    }\n                }\n                for(int i=1;i<=n;i++)\n                {\n                    for(int j=1;j<=m;j++)\n                    {\n                        out.print(dp[i][j][k]+\" \");\n                    }\n                    out.println();\n                }\n            }\n            else\n            {\n                for(int i=1;i<=n;i++)\n                {\n                    for(int j=1;j<=m;j++)\n                    {\n                        out.print(-1+\" \");\n                    }\n                    out.println();\n                }\n            }\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        if (isOnlineJudge()) {\n            in = new BufferedReader(new InputStreamReader(System.in));\n            out = new BufferedWriter(new OutputStreamWriter(System.out));\n            new ExplorerSpace().solve();\n            out.flush();\n        } else {\n            Thread judge = new Thread();\n            in = new BufferedReader(new FileReader(\"input.txt\"));\n            out = new BufferedWriter(new FileWriter(\"output.txt\"));\n            judge.start();\n            new ExplorerSpace().solve();\n            out.flush();\n            judge.suspend();\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n\n            n=input.nextInt();\n            m=input.nextInt();\n           int k=input.nextInt();\n           h=new int[n][m-1];\n            for (int i = 0; i <n ; i++) {\n                for (int j = 0; j <m-1 ; j++) {\n                    h[i][j]=input.nextInt();\n                }\n            }\n            v=new int[n][m];\n            for (int i = 0; i <n-1 ; i++) {\n                for (int j = 0; j <m ; j++) {\n                    v[i][j]=input.nextInt();\n                }\n            }\n            int ans[][]=new int[n][m];\n           dp=new int[501][501][11];\n        for (int aa[]:ans\n             ) { Arrays.fill(aa,-1);\n\n        }\n        if (k%2==0) {\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    ans[i][j] = dfs(i, j, k / 2) * 2;\n                }\n\n            }\n        }\n        for (int i = 0; i <n ; i++) {\n            for (int j = 0; j <m ; j++) {\n                System.out.print(ans[i][j]+\" \");\n            }\n            System.out.println();\n\n        }\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Soumit sc = new Soumit();\n\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int k = sc.nextInt();\n\n        StringBuilder sb = new StringBuilder();\n        if(k%2==1){\n            for(int i=0;i<n;i++){\n                for(int j=0;j<m;j++){\n                    sb.append(\"-1 \");\n                }\n                sb.append(\"\\n\");\n            }\n            System.out.println(sb);\n            System.exit(0);\n        }\n\n        k/=2;\n\n        long[][] horizontaledge = new long[n][m-1];\n        long[][] verticaledge = new long[n-1][m];\n        for(int i=0;i<n;i++)\n            horizontaledge[i] = sc.nextLongArray(m-1);\n        for(int i=0;i<n-1;i++)\n            verticaledge[i] = sc.nextLongArray(m);\n\n        long[][][] dp = new long[11][n][m];\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                dp[0][i][j] = 0;\n            }\n        }\n        for(int i=1;i<=k;i++){\n            for(int j1=0;j1<n;j1++){\n                for(int j2=0;j2<m;j2++){\n                    long min = Long.MAX_VALUE/2000;\n                    //for up\n                    if(isValid(n, m, j1-1, j2)){\n                        min = Math.min(dp[i-1][j1-1][j2]+verticaledge[j1-1][j2], min);\n                    }\n\n                    //for down\n                    if(isValid(n, m, j1+1, j2)){\n                        min = Math.min(min, dp[i-1][j1+1][j2]+verticaledge[j1][j2]);\n                    }\n\n                    //for left\n                    if(isValid(n, m, j1, j2-1)){\n                        min = Math.min(min, dp[i-1][j1][j2-1]+horizontaledge[j1][j2-1]);\n                    }\n\n                    //for right\n                    if(isValid(n, m, j1, j2+1)){\n                        min = Math.min(min, dp[i-1][j1][j2+1]+horizontaledge[j1][j2]);\n                    }\n\n                    dp[i][j1][j2] = min;\n                }\n            }\n        }\n\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                sb.append(dp[k][i][j]*2).append(\" \");\n            }\n            sb.append(\"\\n\");\n        }\n\n        System.out.println(sb);\n\n        sc.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n       \n        //int tc = sc.ni();\n        int tc = 1;\n        for (int rep = 0; rep < tc; rep++) {\n            solve(sc,pw);\n            //pw.println(solve(sc,pw));\n           \n        }\n        \n        \n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception{\n    \tsc=new MScanner(System.in);\n    \tpw = new PrintWriter(System.out);\n        int tc=1;\n//        tc=sc.nextInt();\n        for(int i=1;i<=tc;i++) {\n//            pw.printf(\"Case #%d:\", i);\n            main();\n        }\n        pw.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tinput_output();\n\t\tMain solver = new Main();\n\t\tsolver.solve();\n\t\tout.close();\n\t\tout.flush();\n\t}\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) {\n    StringBuilder solution = new StringBuilder();\n    int rows = FR.nextInt();\n    int cols = FR.nextInt();\n    int moves = FR.nextInt();\n\n    List<List<Integer>> horizontalEdgeWeights = new ArrayList<List<Integer>>(rows);\n    for (int r = 0; r < rows; r++) {\n      horizontalEdgeWeights.add(new ArrayList<Integer>(cols-1));\n\n      for (int c = 0; c < cols - 1; c++) {\n        horizontalEdgeWeights.get(r).add(FR.nextInt());\n      }\n    }\n\n    List<List<Integer>> verticalEdgeWeights = new ArrayList<List<Integer>>(rows-1);\n    for (int r = 0; r < rows - 1; r++) {\n      verticalEdgeWeights.add(new ArrayList<Integer>(cols));\n\n      for (int c = 0; c < cols; c++) {\n        verticalEdgeWeights.get(r).add(FR.nextInt());\n      }\n    }\n    \n    List<List<Integer>> result = getResult(rows, cols, moves, horizontalEdgeWeights, verticalEdgeWeights);\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols; c++) {\n        int value = (result != null ? result.get(r).get(c) : -1);\n        solution.append(value + \" \");\n      }\n      solution.append(\"\\n\");\n    }\n\n\t\tPW.print(solution.toString());\n    PW.close();\n  }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\n\t\tFastScanner sc = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tint h = sc.nexI();\n\t\tint w = sc.nexI();\n\t\tint k = sc.nexI();\n\t\t\n\t\t\n\t\tGraph grid = new Graph(h*w);\n\t\t\n\t\tfor(int i=0; i<h; i++) {\n\t\t\tfor(int j=1; j<w; j++) {\n\t\t\t\tlong w1 = sc.nexL();\n\t\t\t\tgrid.add2(getad(w, i, j-1), getad(w, i, j), w1);\n\t\t\t}\n\t\t}\n\t\tfor(int i=1; i<h; i++) {\n\t\t\tfor(int j=0; j<w; j++) {\n\t\t\t\tlong w1 = sc.nexL();\n\t\t\t\tgrid.add2(getad(w, i-1, j), getad(w, i, j), w1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(k%2 != 0) {\n\t\t\tint[][] anss = new int[h][w];\n\t\t\tfill(anss,-1);\n\t\t\tfor(int i=0; i<h; i++) {\n\t\t\t\tprtspas(anss[i]);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\tif((h*w) == 1) {\n\t\t\tSystem.out.println(-1);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlong[][] mincos = new long[(k/2)+1][h*w];\n\t\tfill(mincos[0],0L);\n\t\t\n\t\tfor(int t=1; t<=(k/2); t++) {\n\t\t\tfill(mincos[t], INFL);\n\t\t\tfor(int i=0; i<h; i++) {\n\t\t\t\tfor(int j=0; j<w; j++) {\n\t\t\t\t\tint ad = getad(w, i, j);\n\t\t\t\t\tfor(Edge e: grid.get(ad)) {\n\t\t\t\t\t\tmincos[t][ad] = min(mincos[t][ad], mincos[t-1][e.v2]+e.w);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(int i=0; i<(h*w); i++) {\n\t\t\tmincos[k/2][i]*=2L;\n\t\t}\n\t\tfor(int i=0; i<h; i++) {\n\t\t\tprtspas(Arrays.copyOfRange(mincos[k/2], i*w, i*w + w));\n\t\t}\n\t\t\n\t\tout.flush();\n\t\treturn;\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new Main(), \"Main\", 1 << 27).start();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[]args)throws IOException\n        boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n        if(oj){sc=new AnotherReader();out=new PrintWriter(System.out);}\n        else{sc=new AnotherReader(100);out=new PrintWriter(\"output.txt\");}\n        int t=1;\n       // t=ni();\n        while(t-->0) {process();}\n        out.flush();out.close();  \n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner sc = new FastScanner();\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[][] lr = new int[n][m-1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m-1; j++){\n\t\t\t\tlr[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] ud = new int[n-1][m];\n\t\tfor(int i = 0; i < n-1; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tud[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tif(k % 2 == 1) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\tsb.append(-1+\" \");\n\t\t\t\t}\n\t\t\t\tsb.replace(sb.length()-1, sb.length(), \"\\n\");\n\t\t\t}\n\t\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\tpw.println(sb.toString().trim());\n\t\t\tpw.flush();\n\t\t}\n\t\telse {\n\t\t\tint[][] dir = {{0,1},{0,-1},{1,0},{-1,0}};\n\t\t\tlong[][][] dp = new long[k/2+1][n][m];\n\t\t\tfor(int s = 1; s <= k/2; s++) {\n\t\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\t\tdp[s][i][j] = Long.MAX_VALUE;\n\t\t\t\t\t\tfor(int[] d: dir) {\n\t\t\t\t\t\t\tint u = i + d[0], v = j + d[1];\n\t\t\t\t\t\t\tif(u >= 0 && u < n && v >= 0 && v < m) {\n\t\t\t\t\t\t\t\tlong w = calc(i, j, u, v, lr, ud);\n\t\t\t\t\t\t\t\tdp[s][i][j] = Math.min(dp[s][i][j], dp[s-1][u][v] + 2*w);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\tsb.append(dp[k/2][i][j]+\" \");\n\t\t\t\t}\n\t\t\t\tsb.replace(sb.length()-1, sb.length(), \"\\n\");\n\t\t\t}\n\t\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\tpw.println(sb.toString().trim());\n\t\t\tpw.flush();\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String args[])\n        Scanner sc=new Scanner(System.in);\n        //int cases = sc.nextInt();\n\n        //for(int i=0;i<cases;i++)\n        {\n            int n = sc.nextInt();\n            int m=sc.nextInt();\n            int steps=sc.nextInt();\n            long arr[][][] = new long[n][m][5];\n            for(int j=0;j<n;j++)\n            {\n                for(int k=0;k<m-1;k++)\n                {\n                    long num=sc.nextLong();\n                    arr[j][k][1]=num;\n                    arr[j][k+1][3]=num;\n                }\n            }\n\n            for(int j=0;j<n-1;j++)\n            {\n                for(int k=0;k<m;k++)\n                {\n                    long num=sc.nextLong();\n                    arr[j][k][2]=num;\n                    arr[j+1][k][4]=num;\n                }\n            }\n\n            long temp[][]=new long[n][m];\n            long ans[][]=new long[n][m];\n            for(int i=0;i<steps/2;i++)\n            {\n                for(int j=0;j<n;j++)\n                {\n                    for(int k=0;k<m;k++)\n                    {\n                        long min=Long.MAX_VALUE;\n                        if(k>0)\n                        {\n                            long f=arr[j][k][3]+ans[j][k-1];\n                            min=Math.min(min,f);\n                        }\n\n                        if(k<m-1)\n                        {\n                            long f=arr[j][k][1]+ans[j][k+1];\n                            min=Math.min(min,f);\n                        }\n\n                        if(j>0)\n                        {\n                            long f=arr[j][k][4]+ans[j-1][k];\n                            min=Math.min(min,f);\n                        }\n\n                        if(j<n-1)\n                        {\n                            long f=arr[j][k][2]+ans[j+1][k];\n                            min=Math.min(min,f);\n                        }\n\n                        temp[j][k]=min;\n                    }\n                }\n\n                for(int j=0;j<n;j++)\n                {\n                    for(int k=0;k<m;k++)\n                    {\n                        ans[j][k]=temp[j][k];\n                    }\n                }\n            }\n\n\n            StringBuilder p=new StringBuilder();\n            for(int j=0;j<n;j++)\n            {\n                for(int k=0;k<m;k++)\n                {\n                    if(steps%2!=0)\n                    {\n                        p.append(-1+\" \");\n                    }\n                    else\n                    {\n                    p.append(2*ans[j][k]+\" \");}\n                }\n\n                p.append(\"\\n\");\n            }\n\n\n            System.out.println(p);\n        }\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        int test = 1;\n//        test = sc.nextInt();\n        for (int i = 1; i <= test; i++){\n//            out.print(\"Case #\"+i+\": \");\n            solve();\n        }\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[]args) throws IOException {\n\t\tsc=new Scanner(System.in);\n\t\tout=new PrintWriter(System.out);\n\t\t//A();\n\t\t//B();\n\t\t//C();\n\t\tD();\n\t\t//E();\n\t\t//F();\n\t\t//G();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tn = ini();\n\t\tm = ini();\n\t\tk = ini();\n\t\t\n\t\tif (k%2!=0) {\n\t\t\tfor(int i=0; i<n; i++) {\n\t\t\t\tfor(int j=0; j<m; j++) {\n\t\t\t\t\tprint(-1+\" \");\n\t\t\t\t}\n\t\t\t\tprintln();\n\t\t\t}\n\t\t\tout.flush();\n\t\t\treturn;\n\t\t}\n\n\t\thor = new int[n][m-1];\n\t\tver = new int[n-1][m];\n\t\t\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tfor(int j=0; j<m-1; j++) {\n\t\t\t\thor[i][j] = ini();\n\t\t\t}\n\t\t}\n\t\tfor(int i=0; i<n-1; i++) {\n\t\t\tfor(int j=0; j<m; j++) {\n\t\t\t\tver[i][j] = ini();\n\t\t\t}\n\t\t}\n\t\t\n\t\tdp = new Integer[n][m][k+1];\n\t\t\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tfor(int j=0; j<m; j++) {\n\t\t\t\tprint(2*solve(i, j, k/2)+\" \");\n\t\t\t}\n\t\t\tprintln();\n\t\t}\n\t\t\n\t\tout.flush();\n\t\tout.close();\n\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Main m = new Main();\n        m.run();\n        m.out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[]args) throws IOException {\n\t\tsc=new Scanner(System.in);\n\t\tout=new PrintWriter(System.out);\n\t\t//A();\n\t\t//B();\n\t\t//C();\n\t\tD();\n\t\t//E();\n\t\t//F();\n\t\t//G();\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "public static void main (String[] args)\n\tMyScanner s =  new MyScanner();\n     \n    int n = s.nextInt();\n    int m = s.nextInt();\n    int k = s.nextInt();\n    \n    int[][] h = new int[n][m-1];\n    \n    for(int i = 0; i<n; i++)\n    {\n    \tfor(int j = 0; j<m-1; j++)\n    \t{\n    \t\th[i][j] = s.nextInt();\n    \t}\n    }\n    \n    int[][] v = new int[n-1][m];\n    \n    for(int i = 0; i<n-1; i++)\n    {\n    \tfor(int j = 0; j<m; j++)\n    \t{\n    \t\tv[i][j] = s.nextInt();\n    \t}\n    }\n    \n    \n   solution(n,m,k,h,v);\n    \n    out.flush();\n    out.close();\n    \n}\n", "complexity": "cubic"}
{"code": "    public static void main(String args[])throws Exception\n        BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder sb=new StringBuilder();\n        String s[]=bu.readLine().split(\" \");\n        int n=Integer.parseInt(s[0]),m=Integer.parseInt(s[1]),k=Integer.parseInt(s[2]);\n        int i,j,max=n*m,in[][]=new int[n][m],x=0;\n        if(k%2==1)  //not possible\n        {\n            for(i=0;i<n;i++)\n            {\n                for(j=0;j<m;j++) sb.append(\"-1 \");\n                sb.append(\"\\n\");\n            }\n            System.out.print(sb);\n            return;\n        }\n\n        for(i=0;i<n;i++)\n        for(j=0;j<m;j++) in[i][j]=x++;\n\n        ArrayList<Edge> g[]=new ArrayList[max];\n        for(i=0;i<max;i++) g[i]=new ArrayList<>();\n        for(i=0;i<n;i++)\n        {\n            s=bu.readLine().split(\" \");\n            for(j=0;j<m-1;j++)\n            {\n                int u=in[i][j],v=in[i][j+1],w=Integer.parseInt(s[j]);\n                g[u].add(new Edge(v,w));\n                g[v].add(new Edge(u,w));\n            }\n        }\n        for(i=0;i<n-1;i++)\n        {\n            s=bu.readLine().split(\" \");\n            for(j=0;j<m;j++)\n            {\n                int u=in[i][j],v=in[i+1][j],w=Integer.parseInt(s[j]);\n                g[u].add(new Edge(v,w));\n                g[v].add(new Edge(u,w));\n            }\n        }\n\n        k/=2;\n        int dp[][]=new int[k][max];\n        for(i=0;i<max;i++)\n        {\n            dp[0][i]=Integer.MAX_VALUE;\n            for(Edge e:g[i])\n            dp[0][i]=Math.min(dp[0][i],2*e.w);\n        }\n\n        for(i=1;i<k;i++)\n        for(j=0;j<max;j++)\n        {\n            dp[i][j]=Integer.MAX_VALUE;\n            for(Edge e:g[j])\n            dp[i][j]=Math.min(dp[i][j],dp[i-1][e.v]+2*e.w);\n        }\n\n        for(i=0;i<n;i++)\n        {\n            for(j=0;j<m;j++)\n            sb.append(dp[k-1][in[i][j]]+\" \");\n            sb.append(\"\\n\");\n        }\n        System.out.print(sb);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(final String[] args) throws FileNotFoundException {\n        final Solution s = new Solution();\n        final Long t1 = System.currentTimeMillis();\n        s.solve();\n        System.err.println(System.currentTimeMillis() - t1 + \" ms\");\n        s.out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tInputReader in = new InputReader(System.in);\n\t\t// Scanner in = new Scanner(System.in);\n\t\t// Scanner in = new Scanner(new BufferedReader(new\n\t\t// InputStreamReader(System.in)));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t// InputReader in = new InputReader(new\n\t\t// File(\"ethan_traverses_a_tree.txt\"));\n\t\t// PrintWriter out = new PrintWriter(new\n\t\t// File(\"ethan_traverses_a_tree-output.txt\"));\n\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\n\t\tint[][][] cost = new int[n][m][4];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m - 1; j++) {\n\t\t\t\tint u = in.nextInt();\n\t\t\t\tcost[i][j][1] = u;\n\t\t\t\tcost[i][j + 1][3] = u;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tint u = in.nextInt();\n\t\t\t\tcost[i][j][0] = u;\n\t\t\t\tcost[i + 1][j][2] = u;\n\t\t\t}\n\t\t}\n\n\t\tif (k % 2 == 0) {\n\t\t\tk = k / 2;\n\t\t\tint[][][] dp = new int[k + 1][n][m];\n\n\t\t\tfor (int i = 0; i <= k; i++) {\n\t\t\t\tfor (int x = 0; x < n; x++) {\n\t\t\t\t\tfor (int y = 0; y < m; y++) {\n\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\tdp[i][x][y] = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tint min = 1000000000;\n\n\t\t\t\t\t\t\tfor (int way = 0; way < to.length; way++) {\n\t\t\t\t\t\t\t\tint nextx = x + to[way][0];\n\t\t\t\t\t\t\t\tint nexty = y + to[way][1];\n\n\t\t\t\t\t\t\t\tif (nextx >= 0 && nextx < n && nexty >= 0 && nexty < m) {\n\t\t\t\t\t\t\t\t\tmin = Math.min(min, dp[i - 1][nextx][nexty] + cost[x][y][way]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdp[i][x][y] = min;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tif (j == m - 1) {\n\t\t\t\t\t\tout.printf(\"%d\\n\", dp[k][i][j] * 2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.printf(\"%d \", dp[k][i][j] * 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tif (j == m - 1) {\n\t\t\t\t\t\tout.printf(\"-1\\n\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.printf(\"-1 \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tnew E().run();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner fs=new FastScanner();\n\t\tint h=fs.nextInt(), w=fs.nextInt(), k=fs.nextInt();\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t\tif (k%2==1) {\n\t\t\tfor (int y=0; y<h; y++) {\n\t\t\t\tfor (int x=0; x<w; x++) {\n\t\t\t\t\tif (x!=0) out.print(\" \");\n\t\t\t\t\tout.print(-1);\n\t\t\t\t}\n\t\t\t\tout.println();\n\t\t\t}\n\t\t\tout.close();\n\t\t\treturn;\n\t\t}\n\t\tk/=2;\n\t\t\n\t\tint[][] rightCost=new int[w-1][h];\n\t\tint[][] downCost=new int[w][h-1];\n\t\tfor (int y=0; y<h; y++) \n\t\t\tfor (int x=0; x<w-1; x++)\n\t\t\t\trightCost[x][y]=fs.nextInt();\n\t\tfor (int y=0; y<h-1; y++)\n\t\t\tfor (int x=0; x<w; x++)\n\t\t\t\t downCost[x][y]=fs.nextInt();\n\t\t\n\t\tlong[][] dp=new long[w][h];\n\t\tlong[][] dpNext=new long[w][h];\n\t\tfor (int i=0; i<k; i++) {\n\t\t\tfor (int x=0; x<w; x++) {\n\t\t\t\tfor (int y=0; y<h; y++) {\n\t\t\t\t\tlong ans=(long)1e18;\n\t\t\t\t\tif (x!=0) ans=Math.min(ans, dp[x-1][y]+rightCost[x-1][y]);\n\t\t\t\t\tif (y!=0) ans=Math.min(ans, dp[x][y-1]+downCost[x][y-1]);\n\t\t\t\t\tif (x!=w-1) ans=Math.min(ans, dp[x+1][y]+rightCost[x][y]);\n\t\t\t\t\tif (y!=h-1) ans=Math.min(ans, dp[x][y+1]+downCost[x][y]);\n\t\t\t\t\tdpNext[x][y]=ans;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp=dpNext;\n\t\t\tdpNext=new long[w][h];\n\t\t}\n\t\t//TODO: double answer\n\t\tfor (int y=0; y<h; y++) {\n\t\t\tfor (int x=0; x<w; x++) {\n\t\t\t\tif (x!=0) out.print(\" \");\n\t\t\t\tout.print(2*dp[x][y]);\n\t\t\t}\n\t\t\tout.println();\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringBuilder sb = new StringBuilder();\n\t\t\n\t\t//idea 1 : K/2번까지만 실행해서, 그 최솟값 *2를 하면 된다\n\t\t//bfs로 i,j칸에 크거나 같은 값을 가지고 진입하면, 즉시 cut\n\t\tStringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n\t\tn = pint(st.nextToken());\n\t\tm = pint(st.nextToken());\n\t\tk = pint(st.nextToken());\n\t\t\n\t\t//up down left right\n\t\t//0 is wall\n\t\tmap = new int[n][m][4];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine(), \" \");\n\t\t\tfor (int j = 0; j < m-1; j++) {\n\t\t\t\tint temp = pint(st.nextToken());\n\t\t\t\tmap[i][j][3]=temp;\n\t\t\t\tmap[i][j+1][2]=temp;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n-1; i++) {\n\t\t\tst = new StringTokenizer(br.readLine(), \" \");\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tint temp = pint(st.nextToken());\n\t\t\t\tmap[i][j][1]=temp;\n\t\t\t\tmap[i+1][j][0]=temp;\n\t\t\t}\n\t\t}\n\t\t\n\t\tans = new int[n][m][k/2+1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif(k%2==1) {\n\t\t\t\t\tsb.append(\"-1 \");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint min=rec(i,j,0,k/2);\n\t\t\t\t\n\t\t\t\tsb.append(min*2).append(\" \");\n\t\t\t\t\n\t\t\t}sb.append(\"\\n\");\n\t\t}\n\t\t\n\t\tSystem.out.println(sb);\n\t\t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\t// int t = Integer.parseInt(br.readLine());\n//\t\twhile (t-- > 0) {\n\t\tString[] s2 = br.readLine().split(\" \");\n\t\tint n = Integer.parseInt(s2[0]);\n\t\tint m = Integer.parseInt(s2[1]);\n\t\tint k = Integer.parseInt(s2[2]);\n\t\tdp=new long[n][m][k+1];\n\t\tint[][] hori = new int[n][m - 1];\n\t\tint[][] verti = new int[n - 1][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString str = (br.readLine());\n\t\t\tString[] s1 = str.split(\" \");\n\t\t\tfor (int j = 0; j < m - 1; j++) {\n\t\t\t\thori[i][j] = Integer.parseInt(s1[j]);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tString str = (br.readLine());\n\t\t\tString[] s1 = str.split(\" \");\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tverti[i][j] = Integer.parseInt(s1[j]);\n\t\t\t}\n\t\t}\n\t\tlong[][]ans=new long[n][m];\n\t\tif(k%2!=0) {\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tfor(int j=0;j<m;j++) {\n\t\t\t\t\tans[i][j]=-1;\n\t\t\t\t}\n\t\t\t}\n\t\t}else {\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tfor(int j=0;j<m;j++) {\n\t\t\t\t\tans[i][j]=findAns(i,j,k,hori,verti,n,m,Integer.MAX_VALUE);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tStringBuilder str=new StringBuilder();\n\t\t\tfor(int j=0;j<m;j++) {\n\t\t\t\tstr.append(ans[i][j]+\" \");\n\t\t\t}pw.println(str.toString());\n\t\t}\n\t\t// }\n\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n        StringTokenizer line = new StringTokenizer(in.readLine());\n        int n = Integer.parseInt(line.nextToken());\n        int m = Integer.parseInt(line.nextToken());\n        int k = Integer.parseInt(line.nextToken());\n        int[][] edges1 = new int[n][m - 1];\n        int[][] edges2 = new int[n - 1][m];\n        for(int i = 0; i < n; i++) {\n            line = new StringTokenizer(in.readLine());\n            for(int j = 0; j < m - 1; j++) {\n                edges1[i][j] = Integer.parseInt(line.nextToken());\n            }\n        }\n        for(int i = 0; i < n - 1; i++) {\n            line = new StringTokenizer(in.readLine());\n            for(int j = 0; j < m; j++) {\n                edges2[i][j] = Integer.parseInt(line.nextToken());\n            }\n        }\n        if(k % 2 == 1) {\n            for(int i = 0; i < n; i++) {\n                StringBuilder sb = new StringBuilder();\n                for (int j = 0; j < m; j++) {\n                    sb.append(-1);\n                    if(j < m - 1) sb.append(' ');\n                }\n                out.println(sb.toString());\n            }\n        }else {\n            int[][][] dp = new int[n][m][k + 1];\n            for(int i = 0; i < n; i++) {\n                for(int j = 0; j < m; j++) {\n                    Arrays.fill(dp[i][j], Integer.MAX_VALUE);\n                    dp[i][j][0] = 0;\n                }\n            }\n            for(int a = 2; a <= k; a += 2) {\n                for(int i = 0; i < n; i++) {\n                    for(int j = 0; j < m; j++) {\n                        if(i > 0) {\n                            dp[i][j][a] = Math.min(dp[i][j][a], dp[i - 1][j][a - 2] + 2 * edges2[i - 1][j]);\n                        }\n                        if(i < n - 1) {\n                            dp[i][j][a] = Math.min(dp[i][j][a], dp[i + 1][j][a - 2] + 2 * edges2[i][j]);\n                        }\n                        if(j > 0) {\n                            dp[i][j][a] = Math.min(dp[i][j][a], dp[i][j - 1][a - 2] + 2 * edges1[i][j - 1]);\n                        }\n                        if(j < m - 1) {\n                            dp[i][j][a] = Math.min(dp[i][j][a], dp[i][j + 1][a - 2] + 2 * edges1[i][j]);\n                        }\n                    }\n                }\n            }\n            for(int i = 0; i < n; i++) {\n                StringBuilder sb = new StringBuilder();\n                for(int j = 0; j < m; j++) {\n                    sb.append(dp[i][j][k]);\n                    if(j < m - 1) sb.append(' ');\n                }\n                out.println(sb.toString());\n            }\n        }\n        in.close();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String hi[]) throws Exception\n        FastScanner infile = new FastScanner();\n        int N = infile.nextInt();\n        int M = infile.nextInt();\n        int K = infile.nextInt();\n        int[][] weights1 = new int[N][M-1];\n        for(int r=0; r < N; r++)\n            weights1[r] = infile.nextInts(M-1);\n        int[][] weights2 = new int[N-1][M];\n        for(int r=0; r < N-1; r++)\n            weights2[r] = infile.nextInts(M);\n        //all are -1 if K is odd\n        int[][] res = new int[N][M];\n        if(K%2 == 1)\n        {\n            StringBuilder sb = new StringBuilder();\n            for(int r=0; r < N; r++)\n            {\n                for(int c=0; c < M; c++)\n                    sb.append(\"-1 \");\n                sb.append(\"\\n\");\n            }\n            System.out.print(sb);\n            return;\n        }\n        int[][] dp = new int[N][M];\n        StringBuilder sb = new StringBuilder();\n        for(int k=0; k < K/2; k++)\n        {\n            int[][] next = new int[N][M];\n            for(int r=0; r < N; r++)\n                Arrays.fill(next[r], INF);\n            for(int r=0; r < N; r++)\n                for(int c=0; c < M; c++)\n                {\n                    if(r > 0)\n                        next[r-1][c] = min(next[r-1][c], dp[r][c]+weights2[r-1][c]);\n                    if(r+1 < N)\n                        next[r+1][c] = min(next[r+1][c], dp[r][c]+weights2[r][c]);\n                    if(c > 0)\n                        next[r][c-1] = min(next[r][c-1], dp[r][c]+weights1[r][c-1]);\n                    if(c+1 < M)\n                        next[r][c+1] = min(next[r][c+1], dp[r][c]+weights1[r][c]);\n                }\n            dp = next;\n        }\n        for(int r=0; r < N; r++)\n        {\n            for(int x: dp[r])\n                sb.append((2*x)+\" \");\n            sb.append(\"\\n\");\n        }\n        System.out.print(sb);\n    }\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) throws IOException {\n    StringBuilder solution = new StringBuilder();\n    int rows = FR.nextInt();\n    int cols = FR.nextInt();\n    int moves = FR.nextInt();\n\n    Map<Integer, Integer> horizontalEdgeWeights = new HashMap<Integer, Integer>();\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols - 1; c++) {\n        int hash = getHash(r, c);\n        horizontalEdgeWeights.put(hash, FR.nextInt());\n      }\n    }\n\n    Map<Integer, Integer> verticalEdgeWeights = new HashMap<Integer, Integer>();\n    for (int r = 0; r < rows - 1; r++) {\n      for (int c = 0; c < cols; c++) {\n        int hash = getHash(r, c);\n        verticalEdgeWeights.put(hash, FR.nextInt());\n      }\n    }\n    \n    List<List<Integer>> result = getResult(rows, cols, moves, horizontalEdgeWeights, verticalEdgeWeights);\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols; c++) {\n        int value = (result != null ? result.get(r).get(c) : -1);\n        solution.append(value + \" \");\n      }\n      solution.append(\"\\n\");\n    }\n\n\t\tBW.write(solution.toString());\n    BW.close();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = rni(), m = ni(), k = ni(), ans[][] = new int[n][m];\n        WGraph g = wgraph(n * m);\n        for (int i = 0; i < n; ++i) {\n            r();\n            for (int j = 0; j < m - 1; ++j) {\n                g.c(i * m + j, i * m + j + 1, ni());\n            }\n        }\n        for (int i = 0; i < n - 1; ++i) {\n            r();\n            for (int j = 0; j < m; ++j) {\n                g.c(i * m + j, (i + 1) * m + j, ni());\n            }\n        }\n        if (k % 2 == 1) {\n            for (int[] row : ans) {\n                fill(row, -1);\n                prln(row);\n            }\n            close();\n            return;\n        }\n        k >>= 1;\n        for (int l = 0; l < k; ++l) {\n            int nans[][] = new int[n][m];\n            for (int[] row : nans) {\n                fill(row, IBIG);\n            }\n            for (int i = 0; i < n * m; ++i) {\n                for (int ed[] : g.get(i)) {\n                    int j = ed[0], d = ed[1];\n                    if (ans[i / m][i % m] + d < nans[j / m][j % m]) {\n                        nans[j / m][j % m] = ans[i / m][i % m] + d;\n                    }\n                }\n            }\n            ans = nans;\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                ans[i][j] *= 2;\n            }\n        }\n        for (int[] row : ans) {\n            prln(row);\n        }\n        close();\n    }\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) {\n    StringBuilder solution = new StringBuilder();\n    int rows = FR.nextInt();\n    int cols = FR.nextInt();\n    int moves = FR.nextInt();\n\n    int[][] horizontalEdgeWeights = new int[rows][cols-1];\n\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols - 1; c++) {\n        horizontalEdgeWeights[r][c] = FR.nextInt();\n      }\n    }\n\n    int[][] verticalEdgeWeights = new int[rows-1][cols];\n    for (int r = 0; r < rows - 1; r++) {\n      for (int c = 0; c < cols; c++) {\n        verticalEdgeWeights[r][c] = FR.nextInt();\n      }\n    }\n\n    int[][] result = getResult(rows, cols, moves, horizontalEdgeWeights, verticalEdgeWeights);\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols; c++) {\n        solution.append(result[r][c] + \" \");\n      }\n      solution.append(\"\\n\");\n    }\n\n\t\tPW.print(solution.toString());\n    PW.close();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws Exception {\n        int t = 1;\n        while(t-- > 0){\n            func();\n        }\n        bw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        FastScanner58 fs = new FastScanner58();\n        PrintWriter pw = new PrintWriter(System.out);\n        //int t = fs.ni();\n        int t = 1;\n        // for (int tc = 0; tc < t; tc++) {\n        for (int tc = 0; tc < t; tc++) {\n            int n = fs.ni();\n            int m = fs.ni();\n            int k = fs.ni();\n            int[][] a = new int[n][m - 1];\n            int[][] b = new int[n - 1][m];\n            for (int i = 0; i < n; i++) {\n                a[i] = fs.intArray(m - 1);\n            }\n            for (int i = 0; i < n - 1; i++) {\n                b[i] = fs.intArray(m);\n            }\n            int[][] res = new int[n][m];\n            Integer[][][] dp = new Integer[n][m][k / 2 + 1];\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    res[i][j] = recur(i, j, k / 2, dp, a, b) * 2;\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < res.length; i++) {\n                for (int j = 0; j < m; j++) {\n                    //matrix[i][j]++;\n                    if (k%2==1) {\n                        sb.append(-1 + \" \");\n                    } else {\n                        sb.append(res[i][j] + \" \");\n                    }\n                }\n                sb.append(\"\\n\");\n            }\n            pw.println(sb);\n        }\n        pw.close();\n    }\n\n    public static int recur(int i, int j, int k, Integer[][][] dp, int[][] a, int[][] b) {\n        if (k == 0) {\n            return 0;\n        }\n        int n = (int) (1e9);\n        if (dp[i][j][k] != null) {\n            return dp[i][j][k];\n        }\n        if (i != 0) {\n            n = Math.min(n, recur(i - 1, j, k - 1, dp, a, b) + b[i - 1][j]);\n        }\n        if (j != 0) {\n            n = Math.min(n, recur(i, j - 1, k - 1, dp, a, b) + a[i][j - 1]);\n        }\n        if (i != a.length - 1) {\n            n = Math.min(n, recur(i + 1, j, k - 1, dp, a, b) + b[i][j]);\n        }\n        if (j != b[0].length - 1) {\n            n = Math.min(n, recur(i, j + 1, k - 1, dp, a, b) + a[i][j]);\n        }\n        return dp[i][j][k] = n;\n    }\n}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        solve();\n        pw.flush();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        FastScanner fs=new FastScanner();\n        PrintWriter pr = new PrintWriter(System.out);\n//        int T=fs.nextInt();\n//        for (int tt=1; tt<=T; tt++) {\n            int n = fs.nextInt(), m = fs.nextInt(), k = fs.nextInt();\n            int[][] right = new int[n][m -1], down = new int[n - 1][m];\n            for(int i = 0; i < n; i++) right[i] = fs.readArray(m - 1);\n            for(int i = 0; i < n - 1; i++) down[i] = fs.readArray(m);\n            if (k % 2 == 1) {\n                for (int i = 0; i < n; i++) {\n                    for (int j = 0; j < m; j++) pr.print(-1 + \" \");\n                    pr.println();\n                }\n            } else {\n                int[][][] dp = new int[k / 2 + 1][n][m];\n\n                for(int r = 1; 2 * r <= k; r++) {\n                    for(int i = 0; i < n; i++) Arrays.fill(dp[r][i], INF);\n                    for(int i = 0; i < n; i++)\n                        for(int j = 0; j  + 1 < m; j++) {\n                            int cost = right[i][j];\n                            dp[r][i][j] = Integer.min(dp[r][i][j], dp[r - 1][i][j + 1] + cost);\n                            dp[r][i][j + 1] = Integer.min(dp[r][i][j + 1], dp[r - 1][i][j] + cost);\n                        }\n                    for(int i = 0; i + 1 < n; i++)\n                        for(int j = 0; j < m; j++) {\n                            int cost = down[i][j];\n                            dp[r][i][j] = Integer.min(dp[r][i][j], dp[r - 1][i + 1][j] + cost);\n                            dp[r][i + 1][j] = Integer.min(dp[r][i + 1][j], dp[r - 1][i][j] + cost);\n                        }\n                }\n                for(int i = 0; i < n; i++) {\n                    for(int j = 0; j < m; j++) {\n                        pr.print(2 * dp[k/2][i][j] + \" \");\n                    }\n                    pr.println();\n                }\n            }\n\n\n//        }\n\n        pr.flush();\n        pr.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws IOException{\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(System.out);\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        N = Integer.parseInt(st.nextToken());\n        M = Integer.parseInt(st.nextToken());\n        K = Integer.parseInt(st.nextToken());\n        if(K % 2 == 1){\n            for(int i = 0; i < N; i++){\n                for(int j = 0; j < M; j++){\n                    pw.print(\"-1 \");\n                }\n                pw.println();\n            }\n            br.close(); pw.close();\n            return;\n        }\n        graph = new ArrayList[N][M];\n        for(int i = 0; i < N; i++){\n            for(int j = 0; j < M; j++){\n                graph[i][j] = new ArrayList<Integer>();\n            }\n        }\n        for(int i = 0; i < N; i++){\n            st = new StringTokenizer(br.readLine());\n            for(int j = 0; j < M-1; j++){\n                int w = Integer.parseInt(st.nextToken());\n                graph[i][j].add(w);\n            }\n        }\n        for(int i = 0; i < N; i++){\n            graph[i][M-1].add(0);\n        }\n        for(int i = 0; i < N-1; i++){\n            st = new StringTokenizer(br.readLine());\n            for(int j = 0; j < M; j++){\n                int w = Integer.parseInt(st.nextToken());\n                graph[i][j].add(w);\n            }\n        }\n        K /= 2;\n        for(int i = 0; i < M; i++) graph[N-1][i].add(0);\n        long ans[][][] = new long[K+1][N][M];\n        for(int i = 0; i < N; i++){\n            Arrays.fill(ans[0][i], 0);\n        }\n        for(int i = 1; i <= K; i++){\n            for(int x = 0; x < N; x++){\n                for(int y = 0; y < M; y++){\n                    long cur = (long)1e17;\n                    if(x < N-1){\n                        cur = (long)Math.min(cur, graph[x][y].get(1) + ans[i-1][x+1][y]);\n                    }\n                    if(y < M-1){\n                        cur = (long)Math.min(cur, graph[x][y].get(0) + ans[i-1][x][y+1]);\n                    }\n                    if(x > 0){\n                        cur = (long)Math.min(cur, graph[x-1][y].get(1) + ans[i-1][x-1][y]);\n                        //pw.println(\"CUR: \" + cur + \" X: \" + x + \" Y: \" + y + \" get = \" + graph[x-1][y].get(0));\n                    }\n                    if(y > 0){\n                        cur = (long)Math.min(cur, graph[x][y-1].get(0) + ans[i-1][x][y-1]);\n                    }\n                    ans[i][x][y] = cur;\n                }\n            }\n        }\n        for(int i = 0; i < N; i++){\n            for(int j = 0; j < M; j++){\n                pw.print(ans[K][i][j] * 2 + \" \");\n            }\n            pw.println();\n        }\n        br.close(); pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        FastScanner fs = new FastScanner();\n        n = fs.nextInt();\n        m =fs.nextInt();\n        k = fs.nextInt();\n        rows = new int[n][m-1];\n        cols = new int[n-1][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m-1; j++){\n                rows[i][j] = fs.nextInt();\n            }\n        }\n        for(int i = 0; i < n-1; i++){\n            for(int j = 0; j < m; j++){\n                cols[i][j] = fs.nextInt();\n            }\n        }\n        int [][][] res = new int[100][n][m];\n        for(int o = 2; o <= k; o+=2){\n            for(int i = 0; i < n; i++){\n                for(int j = 0; j < m; j++){\n                    res[o][i][j] = 0x3f3f3f3f;\n                    if(i>0){\n                        res[o][i][j] = Math.min(res[o][i][j], res[o-2][i-1][j] + 2*cols[i-1][j]);\n                    }\n                    if(i+1<n){\n                        res[o][i][j] = Math.min(res[o][i][j], res[o-2][i+1][j] + 2 * cols[i][j]);\n                    }\n                    if(j>0){\n                        res[o][i][j] = Math.min(res[o][i][j], res[o-2][i][j-1] + 2 * rows[i][j-1]);\n                    }\n                    if(j+1<m){\n                        res[o][i][j] = Math.min(res[o][i][j], res[o-2][i][j+1] + 2 * rows[i][j]);\n                    }\n                }\n            }\n        }\n\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m;j ++){\n                if(k%2==1){\n                    System.out.print(-1+\" \");\n                }else{\n                    System.out.print(res[k][i][j] + \" \");\n                }\n\n            }\n            System.out.println();\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n=r.nextInt();\n        int m=r.nextInt();\n        int k=r.nextInt();\n        int [][]hor=new int[n][m-1];\n        int [][]ver=new int[n-1][m];\n        for(int i=0;i<n;++i){\n            for(int j=0;j<m-1;++j) hor[i][j]=r.nextInt();\n        }\n        for(int i=0;i<n-1;++i){\n            for(int j=0;j<m;++j) ver[i][j]=r.nextInt();\n        }\n        int [][]dp=new int[n][m];\n        if(k%2!=0){\n            for(int i=0;i<n;++i){\n                for(int j=0;j<m;++j) dp[i][j]=-1;\n            }\n        }\n        else{\n            int [][]new_dp=new int[n][m];\n            for(int step=0;step<k/2;++step){\n                for(int i=0;i<n;++i){\n                    for(int j=0;j<m;++j){\n                        new_dp[i][j]=INF;\n                        if(i>0){\n                            new_dp[i][j]=Math.min(new_dp[i][j],dp[i-1][j]+ver[i-1][j]*2);\n                        }\n                        if(i<n-1){\n                            new_dp[i][j]=Math.min(new_dp[i][j],dp[i+1][j]+ver[i][j]*2);\n                        }\n                        if(j>0){\n                            new_dp[i][j]=Math.min(new_dp[i][j],dp[i][j-1]+hor[i][j-1]*2);\n                        }\n                        if(j<m-1){\n                            new_dp[i][j]=Math.min(new_dp[i][j],dp[i][j+1]+hor[i][j]*2);\n                        }\n                    }\n                }\n                for(int i=0;i<n;++i){\n                    for(int j=0;j<m;++j){\n                        dp[i][j]=new_dp[i][j];\n                    }\n                }\n            }\n        }\n        for(int i=0;i<n;++i){\n            for(int j=0;j<m;++j){\n                pw.print(dp[i][j]+\" \");\n            }\n            pw.println();\n        }\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "public static void main (String[] args)\n\tMyScanner s =  new MyScanner();\n     \n    int n = s.nextInt();\n    int m = s.nextInt();\n    int k = s.nextInt();\n    \n    int[][] h = new int[n][m-1];\n    \n    for(int i = 0; i<n; i++)\n    {\n    \tfor(int j = 0; j<m-1; j++)\n    \t{\n    \t\th[i][j] = s.nextInt();\n    \t}\n    }\n    \n    int[][] v = new int[n-1][m];\n    \n    for(int i = 0; i<n-1; i++)\n    {\n    \tfor(int j = 0; j<m; j++)\n    \t{\n    \t\tv[i][j] = s.nextInt();\n    \t}\n    }\n    \n    \n   solution(n,m,k,h,v);\n    \n    out.flush();\n    out.close();\n    \n}\n", "complexity": "cubic"}
{"code": "", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        sc = new InputReader(inputStream);\n        pw = new PrintWriter(outputStream);\n        solve();\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException \n\t\tBufferedReader scan = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tString[] in = scan.readLine().split(\" \");\n\t\trow = parse(in[0]);\n\t\tcol = parse(in[1]);\n\t\tint k = parse(in[2]);\n\t\t\n\t\tint[][] xMove = new int[row][col-1];\n\t\tfor(int i = 0; i < row; i++)\n\t\t{\n\t\t\tin = scan.readLine().split(\" \");\n\t\t\tfor(int j = 0; j < col - 1; j++)\n\t\t\t\txMove[i][j] = parse(in[j]);\n\t\t}\n\t\t\n\t\tint[][] yMove = new int[row - 1][col];\n\t\tfor(int i = 0; i < row - 1; i++)\n\t\t{\n\t\t\tin = scan.readLine().split(\" \");\n\t\t\tfor(int j = 0; j < col; j++)\n\t\t\t\tyMove[i][j] = parse(in[j]);\n\t\t}\n\t\t\n\t\t\n\t\tint[][] output = new int[row][col];\n\t\t\n\t\tif(k % 2 != 0)\n\t\t\tfill(-1, output);\n\t\t\n\t\telse\n\t\t{\n\t\t\tPoint[][] grid = new Point[row][col];\n\t\t\tfor(int i = 0; i < row; i++)\n\t\t\t\tfor(int j = 0; j < col; j++)\n\t\t\t\t\tgrid[i][j] = new Point(i, j);\n\t\t\t\n\t\t\tparseMoves(grid, xMove, yMove);\n\t\t\t\n\t\t\tsolve(grid, k, output);\n\t\t}\n\t\t\n\t\tprint(output, out);\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DExplorerSpace solver = new DExplorerSpace();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        int t = 1;\n        for (int i = 0; i < t; i++) {\n            solve(sc, pw);\n        }\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new Reader();\n        out = new PrintWriter(new OutputStreamWriter(System.out));\n\n//        int t = in.nextInt();\n//        for (int i = 0; i < t; i++) {\n//        }\n        run();\n\n        out.flush();\n        in.close();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 29);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String str[]){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int k = sc.nextInt();\n        int arr[][] = new int[n][m];\n        int cross[][] = new int[n][m-1];\n        int up[][] = new int[n-1][m];\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m-1;j++){\n                cross[i][j] = sc.nextInt();\n            }\n        }\n        for(int i=0;i<n-1;i++){\n            for(int j=0;j<m;j++){\n                up[i][j] = sc.nextInt();\n            }\n        }\n        int[][] fans = new int[n][m];\n            if (k % 2 != 0) {\n                for (int i = 0; i < n; i++) {\n                    for (int j = 0; j < m; j++) {\n                        fans[i][j] = -1;\n                    }\n                }\n            }\n            else {\n                int[][][] ans = new int[(k/2)+1][n][m];\n                for (int l = 1; l <= k / 2; l++){\n                    for (int i = 0; i < n ; i++) {\n                        for (int j = 0; j < m; j++) {\n                            int min = Integer.MAX_VALUE;\n                            if(i>0){\n                                min = Math.min(min, up[i-1][j] + ans[l-1][i-1][j]);\n                            }\n                            if(j>0){\n                                min = Math.min(min, cross[i][j-1] + ans[l-1][i][j-1]);\n                            }\n                            if(i<n-1){\n                                min = Math.min(min, up[i][j] + ans[l-1][i+1][j]);\n                            }\n                            if(j<m-1){\n                                min = Math.min(min, cross[i][j] + ans[l-1][i][j+1]);\n                            }\n                            ans[l][i][j] = min;\n                        }\n                    }\n                }\n                for (int i = 0; i < n; i++) {\n                    for (int j = 0; j < m; j++) {\n                        fans[i][j] = 2*ans[k/2][i][j];\n                    }\n                }\n            }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                System.out.print(fans[i][j]+\" \");\n            }\n            System.out.println();\n        }\n\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        int test = 1;\n//        test = sc.nextInt();\n        for (int i = 1; i <= test; i++){\n//            out.print(\"Case #\"+i+\": \");\n            solve();\n        }\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        init_io();\n        int N = nint(), M = nint(), K = nint();\n        if (K % 2 == 0) {\n            int[][][] grid = new int[K+1][N][M];\n            int[][][] edges = new int[4][N][M];\n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < M-1; j++) {\n                    edges[0][i][j] = edges[2][i][j+1] = nint();\n                }\n            }\n            for (int i = 0; i < N-1; i++) {\n                for (int j = 0; j < M; j++) {\n                    edges[1][i][j] = edges[3][i+1][j] = nint();\n                }\n            }\n            for (int k = 1; k <= K/2; k++) {\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < M; j++) {\n                        int min = Integer.MAX_VALUE;\n                        if (i != N-1) {\n                            min = Math.min(min, grid[k-1][i+1][j] + edges[1][i][j]);\n                        }\n                        if (j != M-1) {\n                            min = Math.min(min, grid[k-1][i][j+1] + edges[0][i][j]);\n                        }\n                        if (i != 0) {\n                            min = Math.min(min, grid[k-1][i-1][j] + edges[3][i][j]);\n                        }\n                        if (j != 0) {\n                            min = Math.min(min, grid[k-1][i][j-1] + edges[2][i][j]);\n                        }\n                        grid[k][i][j] = min;\n                    }\n                }\n            }\n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < M; j++) {\n                    out.print(grid[K/2][i][j]*2 + \" \");\n                }\n                out.println();\n            }\n        }\n        else {\n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < M; j++) {\n                    out.print(-1 + \" \");\n                }\n                out.println();\n            }\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main (String[] args) throws java.lang.Exception\n        // your code goes here\n        Scanner sc=new Scanner(System.in);\n        n=sc.nextInt();\n        m=sc.nextInt();\n        k=sc.nextInt();\n        right=new int[n][m-1];\n        down=new int[n-1][m];\n        for(int i=0;i<n;i++)\n            for(int j=0;j<m-1;j++)\n                right[i][j]=sc.nextInt();\n        for(int i=0;i<n-1;i++)\n            for(int j=0;j<m;j++)\n                down[i][j]=sc.nextInt();\n        if(k%2==1) {\n            for(int i=0;i<n;++i) {\n                for (int j = 0; j < m; j++)\n                    System.out.print(-1 + \" \");\n                System.out.println();\n            }\n        }\n        else\n        {\n            k/=2;\n            dp=new int[n][m][k+1];\n            for(int i=0;i<n;++i)\n                for(int j=0;j<m;j++)\n                    for(int z=1;z<=k;z++)\n                        dp[i][j][z]=-1;\n            for(int i=0;i<n;++i)\n                for(int j=0;j<m;j++)\n                    recur(i,j,k);\n            for(int i=0;i<n;++i) {\n                for (int j = 0; j < m; j++)\n                    System.out.print((dp[i][j][k] * 2) + \" \");\n                System.out.println();\n            }\n        }\n    }\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n\n    int t = sc.nextInt();\n    for (int tc = 0; tc < t; ++tc) {\n      int n = sc.nextInt();\n      int[] a = new int[n];\n      for (int i = 0; i < a.length; ++i) {\n        a[i] = sc.nextInt();\n      }\n\n      System.out.println(solve(a));\n    }\n\n    sc.close();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\n        int i,N;\n\n        int T=Integer.parseInt(br.readLine().trim());\n        StringBuilder sb=new StringBuilder();\n\n        while (T-->0)\n        {\n            N=Integer.parseInt(br.readLine().trim());\n\n            int[] a=new int[N];\n            for(i=0;i<N;i++) a[i]=Integer.parseInt(br.readLine().trim());\n\n            int end=1;\n            int[][] ans=new int[N][N+10];\n\n            ans[0][0]=1;\n            for(i=1;i<N;i++)\n            {\n                while (true)\n                {\n                    if(ans[i-1][end]==a[i]-1) break;\n                    end--;\n                }\n                for(int j=0;j<end;j++) ans[i][j]=ans[i-1][j];\n\n                ans[i][end]=a[i];\n                end++;\n            }\n\n            for(i=0;i<N;i++)\n            {\n                for(int j=0;j<N&&ans[i][j]!=0;j++)\n                {\n                    sb.append(ans[i][j]);\n                    if(ans[i][j+1]!=0) sb.append('.');\n                }\n                sb.append(\"\\n\");\n            }\n        }\n        System.out.println(sb);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(System.out);\n        solve();\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        in = new FastReader();\n        out = new PrintWriter(System.out);\n\n        int t = 1;\n        t = in.nextInt();\n        while (t-- > 0) {\n            solve();\n        }\n\n        out.flush();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint c = 1;\n\t\tint t = Integer.parseInt(br.readLine());\n\n\t\twhile (t-- > 0) {\n\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\n\t\t\t// map.put(1, 0);\n\t\t\tint curr = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tint tt = Integer.parseInt(br.readLine());\n\t\t\t\tif (tt == 1) {\n\t\t\t\t\tcurr++;\n\t\t\t\t\tmap.put(curr, 1);\n\t\t\t\t} else {\n\t\t\t\t\tArrayList<Integer> list = new ArrayList<Integer>(map.keySet());\n\t\t\t\t\tCollections.sort(list);\n\t\t\t\t\tfor (int a = list.size() - 1; a >= 0; a--) {\n\t\t\t\t\t\tif (map.get(list.get(a)) == tt - 1) {\n\t\t\t\t\t\t\tmap.put(list.get(a), tt);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurr--;\n\t\t\t\t\t\t\tmap.remove(list.get(a));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tArrayList<Integer> list = new ArrayList<Integer>(map.keySet());\n\t\t\t\tCollections.sort(list);\n\t\t\t\tStringBuilder str=new StringBuilder();\n\t\t\t\tfor(int a=0;a<list.size();a++) {\n\t\t\t\t\tif(list.size()-1==a) {\n\t\t\t\t\t\tstr.append(map.get(list.get(a)));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstr.append(map.get(list.get(a))+\".\");\n\t\t\t\t}pw.println(str);\n\n\t\t\t}\n\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String args[])\n        FastReader input=new FastReader();\n        PrintWriter out=new PrintWriter(System.out);\n        int T=input.nextInt();\n        while(T-->0)\n        {\n            int n=input.nextInt();\n            int b[]=new int[n];\n            for(int i=0;i<n;i++)\n            {\n                b[i]=input.nextInt();\n            }\n            StringBuilder sb=new StringBuilder(\"\");\n            int arr[]=new int[n+1];\n            out.println('1');\n            sb.append('1');\n            int size=1;\n            arr[size-1]=1;\n            for(int i=1;i<n;i++)\n            {\n                int a=b[i];\n                if(a==1)\n                {\n                    size++;\n                    arr[size-1]=1;\n                    sb.append(\".1\");\n                    out.println(sb.toString());\n                }\n                else\n                {\n                    sb=new StringBuilder(\"\");\n                    int in=0;\n                    for(int j=size-1;j>=0;j--)\n                    {\n                        if(arr[j]==a-1)\n                        {\n                            in=j;\n                            break;\n                        }\n                    }\n                    for(int j=0;j<in;j++)\n                    {\n                        sb.append(arr[j]+\".\");\n                    }\n                    sb.append(a);\n                    size=in+1;\n                    arr[size-1]=a;\n                    out.println(sb.toString());\n                }\n            }\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        solve(in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        StringBuilder ans = new StringBuilder();\n        int t = ri();\n//        int t = 1;\n        while (t-- > 0)\n        {\n            int n=ri();\n            int[] arr=rai(n);\n\n            List<Integer> list = new ArrayList<>();\n            for(int i:arr)\n            {\n                if(i==1)\n                {\n                    list.add(i);\n                }\n                else\n                {\n                    int ind = list.size()-1;\n                    while(list.size()>0 && list.get(ind)+1!=i )\n                    {\n                        list.remove(list.size()-1);\n                        ind=list.size()-1;\n                    }\n                    if(list.size()>0)\n                    {\n                        list.remove(list.size()-1);\n                    }\n                    list.add(i);\n                }\n\n                for(int j=0;j<list.size()-1;j++)\n                {\n                    ans.append(list.get(j)).append(\".\");\n                }\n                ans.append(list.get(list.size()-1)).append(\"\\n\");\n            }\n        }\n        out.print(ans.toString());\n        out.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint t = sc.nextInt();\n\t\twhile (t-- > 0) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] arr = sc.nextIntArr(n);\n\t\t\tStack<Integer> st = new Stack<Integer>();\n\t\t\tst.add(arr[0]);\n\t\t\tprint(st, pw);\n\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\tif (arr[i] == 1) {\n\t\t\t\t\tst.add(arr[i]);\n\t\t\t\t} else {\n\t\t\t\t\twhile (st.peek() != arr[i] - 1) {\n\t\t\t\t\t\tst.pop();\n\t\t\t\t\t}\n\t\t\t\t\tst.pop();\n\t\t\t\t\tst.add(arr[i]);\n\t\t\t\t}\n\t\t\t\tprint(st, pw);\n\t\t\t}\n\t\t}\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\t// your code goes here\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint t = Integer.parseInt(br.readLine());\n\t\tfor(int q=0;q<t;q++){\n\t\t      String s = br.readLine();\n\t\t      int n = Integer.parseInt(s);\n\t\t      int a[] = new int[1000];\n\t\t      int index=0;\n\t\t      for(int i=0;i<n;i++){\n\t\t            int x = Integer.parseInt(br.readLine());\n\t\t            for(int j=index;j>=0;j--){\n\t\t                  if(x-1==a[j]){\n\t\t                        a[j]=x;\n\t\t                  \n\t\t                  for(int k=0;k<j;k++){\n\t\t                        System.out.print(a[k]+\".\");\n\t\t                  }\n\t\t                  System.out.print(a[j]);\n\t\t                  System.out.println();\n\t\t                  for(int k=j+1;k<1000;k++){\n\t\t                        if(a[k]!=0)\n\t\t                        a[k]=0;\n\t\t                        else \n\t\t                        break;\n\t\t                  }\n\t\t                  index=j+1;\n\t\t                //  System.out.println(a[j]+\"*\"+j);\n\t\t                  break;\n\t\t                  }\n\t\t            }\n\t\t      }\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tin = new Reader();\n\t\tout = new Writer();\n\t\tint t = in.nextInt();\n\t\twhile(t-->0) solve();\n\t\tout.exit();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t// TODO Auto-generated method stub\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\tint t = Integer.parseInt(br.readLine());\n\t\t\n\t\twhile(t --> 0) {\n\t\t\t\n\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\tar = new int[n];\n\t\t\tlocation = 0;\n\t\t\tmap = new HashMap<String, ArrayList<String>>();\n\t\t\tsb = new StringBuilder();\n\t\t\tN = n;\n\t\t\t\t\t\t\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\t\n\t\t\t\tar[i] = Integer.parseInt(br.readLine());\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tint idx = 2;\n\t\t\tlocation = 1;\n\t\t\t\n\t\t\tsb.append(\"1\\n\");\n\t\t\t\n\t\t\twhile(location < n) {\n\t\t\t\t\n\t\t\t\tif(ar[location] == 1) {\n\t\t\t\t\t\n\t\t\t\t\tnl((idx-1)+\".\");\n\t\t\t\t\t\n\t\t\t\t}else {\n\t\t\t\t\t\n\t\t\t\t\tsb.append(idx+\"\\n\");\n\t\t\t\t\tidx++;\n\t\t\t\t\tlocation++;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(sb);\n\t\t\t\n\t\t}\t\n\t\t\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new CF_1523_C().run();}catch(Exception e){e.printStackTrace();System.exit(1);}}}, \"1\", 1 << 28).start();\n        else new CF_1523_C().run();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[])throws Exception\n        BufferedReader bu=new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder sb=new StringBuilder();\n        int t=Integer.parseInt(bu.readLine());\n        while(t-->0)\n        {\n            int n=Integer.parseInt(bu.readLine());\n            int cur[]=new int[n],i,cr=-1;\n            for(i=0;i<n;i++)\n            {\n                int j,d=Integer.parseInt(bu.readLine()),f=-1;\n                for(j=cr;j>=0;j--)\n                if(cur[j]==d-1) {f=j; break;}\n\n                if(f==-1)\n                {\n                    cr++;\n                    f=cr;\n                }\n                cur[f]=d;\n                cr=f;\n                for(j=f+1;j<n;j++) cur[j]=0;\n                sb.append(cur[0]);\n                for(j=1;j<n;j++)\n                if(cur[j]==0) break;\n                else sb.append(\".\"+cur[j]);\n                sb.append(\"\\n\");\n            }\n        }\n        System.out.print(sb);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n       \n        int tc = sc.ni();\n//        int tc = 1;\n        for (int rep = 0; rep < tc; rep++) {\n            int N = sc.ni();\n            int[] arr = sc.intArray(N);\n            pw.println(solve(arr));\n        }\n        \n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        // String[] parts=br.readLine().split(\" \");\n        // int n=Integer.parseInt(parts[0]);\n        // int k=Integer.parseInt(parts[1]);\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int tests = Integer.parseInt(br.readLine());\n\n        for (int test = 1;test <= tests;test++) {\n            String[] parts = br.readLine().split(\" \");\n            int n = Integer.parseInt(parts[0]);\n            \n            StringBuilder temp = new StringBuilder();\n\n            int curr = Integer.parseInt(br.readLine());\n            temp.append(\"1\");\n            System.out.println(1);\n            for(int i = 0;i < n - 1;i++){\n                curr = Integer.parseInt(br.readLine());\n                if(curr == 1){\n                    temp.append('.').append('1');\n                    System.out.println(temp);\n                }else{\n                    while(temp.length() > 0){\n                        int idx = temp.length() - 1;\n                        while(idx >= 0 && temp.charAt(idx) != '.') idx--;\n                        idx++;\n\n                        int val = Integer.parseInt(temp.substring(idx));\n                        temp.delete(idx,temp.length());\n                        if(curr == val + 1){\n                            temp.append(String.valueOf(curr));\n                            break;\n                        }\n                        temp.deleteCharAt(temp.length() - 1);\n                    }\n                    System.out.println(temp);\n                }\n            }\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[]args)throws IOException\n        boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n        if(oj){sc=new AnotherReader();out=new PrintWriter(System.out);}\n        else{sc=new AnotherReader(100);out=new PrintWriter(\"output.txt\");}\n        int t=1;\n        t=ni();\n        while(t-- > 0) {process();}\n        out.flush();out.close();  \n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        int t = fs.nextInt();\n        while(t-->0) {\n            run_case();\n        }\n\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        final FastScanner fs = new FastScanner();\n        final int t = fs.nextInt();\n        final StringBuilder sb = new StringBuilder();\n        for (int test = 0; test < t; test++) {\n            final int n = fs.nextInt();\n            final Deque<Node> dq = new ArrayDeque<>();\n            dq.offerLast(new Node(\"\", 0));\n            for (int i = 0; i < n; i++) {\n                final int next = fs.nextInt();\n                if (dq.getFirst().val + 1 != next) {\n                    if (next == 1) {\n                        final Node peek = dq.getFirst();\n                        final String p = peek.path.isEmpty() ? String.valueOf(peek.val)\n                                                             : (peek.path + '.' + peek.val);\n                        dq.addFirst(new Node(p, 1));\n                    } else {\n                        while (dq.getFirst().val + 1 != next) {\n                            dq.removeFirst();\n                        }\n                        dq.getFirst().val++;\n                    }\n                } else {\n                    dq.getFirst().val++;\n                }\n                add(sb, dq.getFirst(), dq.getFirst().val);\n            }\n        }\n        System.out.println(sb);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        // code goes here\n        int t = fr.nextInt();\n        while (t-- > 0){\n            int n = fr.nextInt();\n            int[] arr = fr.nextIntArray(n);\n            sb.append(1).append(\"\\n\");\n            List<Integer> state = new ArrayList<>();\n            state.add(1);\n            for(int i = 1; i < n; i++){\n                List<Integer> nextState = new ArrayList<>();\n                boolean found = false;\n                int till = -1;\n                for(int j = state.size() - 1; j >= 0; j--){\n                    if(state.get(j) + 1 == arr[i]){\n                        till = j;\n                        found = true;\n                        break;\n                    }\n                }\n                if(found){\n                    for(int j = 0; j < till; j++){\n                        nextState.add(state.get(j));\n                    }\n                    nextState.add(arr[i]);\n                    sb.append(nextState.get(0));\n                    for(int z = 1; z < nextState.size(); z++){\n                        sb.append(\".\").append(nextState.get(z));\n                    }\n                    sb.append(\"\\n\");\n                }\n                if(!found){\n                    nextState.addAll(state);\n                    nextState.add(arr[i]);\n                    sb.append(nextState.get(0));\n                    for(int z = 1; z < nextState.size(); z++){\n                        sb.append(\".\").append(nextState.get(z));\n                    }\n                    sb.append(\"\\n\");\n                }\n                state = nextState;\n            }\n        }\n        System.out.print(sb.toString());\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tReader scan = new Reader();\n\t\tint t = scan.nextInt();\n\t\tfor(int tt = 0;tt<t;tt++) {\n\t\t\t\n\t\t\tint n = scan.nextInt();\n\t\t\tint arr[] = new int[n];\n\t\t\tfor(int i = 0;i<n;i++) arr[i] = scan.nextInt();\n\t\t\t\n\t\t\tList<Integer> list = new ArrayList<>();\n\t\t\tint j = -1;\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\tfor(int i = 0;i<n;i++) {\n\t\t\t\tif(list.isEmpty() || arr[i]==1) { //add\n\t\t\t\t\tlist.add(arr[i]);\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\telse if(arr[i] == list.get(j)+1) { //replace\n\t\t\t\t\tlist.set(j, arr[i]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor(int k = j;k>=0;k--) {\n\t\t\t\t\t\tif(arr[i] == list.get(k)+1) {//replace\n\t\t\t\t\t\t\tlist.set(k, arr[i]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {//delete\n\t\t\t\t\t\t\tlist.remove(k);\n\t\t\t\t\t\t\tj--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ts.delete(0, s.length());\n\t\t\t\tfor(Integer p:list) {\n\t\t\t\t\ts.append(p+\".\");\n\t\t\t\t}\n\t\t\t\ts.deleteCharAt(s.length()-1);\n\t\t\t\tSystem.out.println(s.toString());\n\t\t\t}\n\t\t}\n\n\t\tscan.close();\n\t\t\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Main m = new Main();\n        m.solve();\n        m.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        C2 sol = new C2();\n        try {\n            sol.run();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// br = new BufferedReader(new FileReader(\".in\"));\n\t\t// out = new PrintWriter(new FileWriter(\".out\"));\n\t\t//new Thread(null, new (), \"peepee\", 1<<28).start();\n\t\tread();\n\t\tint t= RI();\n\t\twhile(t-->0) {\n\t\t\tread();\n\t\t\tint n = RI();\n\t\t\tList<Integer> cur = new ArrayList<Integer>();\n\t\t\tint[] lvl = new int[n+10];\n\t\t\twhile(n-->0) {\n\t\t\t\tread();\n\t\t\t\tint x = RI();\n\t\t\t\t\n\t\t\t\tif (cur.size() == 0) {\n\t\t\t\t\tcur.add(x);\n\t\t\t\t\tlvl[cur.size()]=x;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\twhile (!cur.isEmpty()) {\n\t\t\t\t\t\tif (x == 1+lvl[cur.size()]) {\n\t\t\t\t\t\t\tint size = cur.size();\n\t\t\t\t\t\t\tcur.remove(size-1);\n\t\t\t\t\t\t\tcur.add(1+lvl[size]);\n\t\t\t\t\t\t\tlvl[size] = x;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// Either add to a new level or go to existing one.\n\t\t\t\t\t\t\tif (x == 1) {\n\t\t\t\t\t\t\t\t// add\n\t\t\t\t\t\t\t\tcur.add(x);\n\t\t\t\t\t\t\t\tlvl[cur.size()] = x;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlvl[cur.size()] = 0;\n\t\t\t\t\t\t\t\tcur.remove(cur.size()-1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (cur.size() == 0) {\n\t\t\t\t\t\tcur.add(x);\n\t\t\t\t\t\tlvl[cur.size()]=x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < cur.size(); i++) {\n\t\t\t\t\tout.print(cur.get(i));\n\t\t\t\t\tif (i != cur.size()-1) out.print(\".\");\n\t\t\t\t}\n\t\t\t\tout.println();\n\t\t\t}\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        sc = new FastScanner();\n        pw = new PrintWriter(System.out);\n \n        int Q = sc.ni();\n        for (int q = 0; q < Q; q++) {\n            int N = sc.ni();\n            int[] nums = sc.intArray(N, 0);\n            pw.println(1);\n            ArrayDeque<Integer> ad = new ArrayDeque<Integer>();\n            ad.push(1);\n            for (int i = 1; i < N; i++) {\n                if (nums[i]==1) {\n                    ad.push(1);\n                } else {\n                    while (!ad.isEmpty()) {\n                        int d = ad.pop();\n                        if (d==nums[i]-1) {\n                            ad.push(nums[i]);\n                            break;\n                        }\n                    }\n                }\n                printAD(ad);\n            }\n        }\n\n        pw.close(); \n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintStream out = System.out;\n\n        int t = Integer.parseInt(br.readLine());\n\n        for (int i = 0; i < t; i++) {\n            int n = Integer.parseInt(br.readLine());\n            ArrayList<Integer> depth = new ArrayList<>();\n            int y = 0;\n            String[] ans = new String[n];\n            for (int x = 0; x < n; x++) {\n                int in = Integer.parseInt(br.readLine());\n                if (in == 1) {\n                    if (y == depth.size()) depth.add(1);\n                    else depth.set(y, 1);\n                    y++;\n                    StringBuilder curr = new StringBuilder();\n                    curr.append(depth.get(0));\n                    for (int a = 1; a < y; a++) {\n                        curr.append('.');\n                        curr.append(depth.get(a));\n                    }\n                    ans[x] = curr.toString();\n                    continue;\n                }\n                for (int d = y-1; d >= 0; d--) {\n                    if (depth.get(d) == in-1) {\n                        y = d+1;\n                        depth.set(d, depth.get(d)+1);\n                        StringBuilder curr = new StringBuilder();\n                        for (int a = 0; a < d; a++) {\n                            curr.append(depth.get(a));\n                            curr.append('.');\n                        }\n                        curr.append(in);\n                        ans[x] = curr.toString();\n                        break;\n                    }\n                }\n            }\n            //Arrays.sort(ans);\n            for (String x : ans) out.println(x);\n        }\n\n        System.out.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] havish) throws Exception{\n\t\t// TODO Auto-generated method stub\n \t\tsc = new MyScanner();\n \t\tout = new PrintWriter(System.out);\n \t\tint t = sc.nextInt();\n \t\twhile(t-->0) {\n \t \t\tint n = sc.nextInt();\n \t \t\t\n \t \t\tStack<Integer> st = new Stack<>();\n \t \t\tStack<Integer> temporary = new Stack<>();\n \t \t\tfor(int j = 0;j<n;j++){\n \t \t\t\tint val = sc.nextInt();\n \t \t\t\tboolean found = false;\n \t \t\t\twhile(!st.isEmpty()){\n \t \t\t\t\tint temp = st.peek();\n \t \t\t\t\tif (val == temp+1){\n \t \t\t\t\t\tfound = true;\n \t \t\t\t\t\tst.pop();\n \t \t\t\t\t\tbreak;\n \t \t\t\t\t}\n \t \t\t\t\telse{\n \t \t\t\t\t\ttemporary.add(st.pop());\n \t \t\t\t\t}\n \t \t\t\t}\n \t \t\t\tif (!found){\n\t \t \t\t\twhile(!temporary.isEmpty()){\n\t \t \t\t\t\tst.add(temporary.pop());\n\t \t \t\t\t}\n \t \t\t\t}\n \t \t\t\tst.add(val);\n \t \t\t\tArrayList<Integer> arr = new ArrayList<>();\n \t \t\t\t\n \t \t\t\tfor(int s : st){\n \t \t\t\t\tarr.add(s);\n \t \t\t\t}\n \t \t\t\tfor (int s =0 ;s<arr.size()-1;s++){\n \t \t\t\t\tout.print(arr.get(s));\n \t \t\t\t\tout.print(\".\");\n \t \t\t\t}\n \t \t\t\tout.println(arr.get(arr.size()-1));\n \t \t\t\ttemporary.clear();\n \t \t\t}\n \t\t\t\n \t\t}\n \t\t\n \t\tout.close();\n \t\t\n \t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)throws Exception{ new ques3().run();} \n", "complexity": "cubic"}
{"code": "    public static void main(String hi[]) throws Exception\n        BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(infile.readLine());\n        int T = Integer.parseInt(st.nextToken());\n        StringBuilder sb = new StringBuilder();\n        while(T-->0)\n        {\n            st = new StringTokenizer(infile.readLine());\n            int N = Integer.parseInt(st.nextToken());\n            int[] arr = new int[N];\n            for(int i=0; i < N; i++)\n                arr[i] = Integer.parseInt(infile.readLine());\n            ArrayList<Integer>[] buckets = new ArrayList[N];\n            buckets[0] = new ArrayList<Integer>();\n            buckets[0].add(arr[0]);\n            //first element always 1?\n            for(int i=1; i < N; i++)\n            {\n                ArrayList<Integer> ls = new ArrayList<Integer>();\n                if(arr[i] == 1)\n                {\n                    for(int x: buckets[i-1])\n                        ls.add(x);\n                    ls.add(1);\n                }\n                else\n                {\n                    int dex = -1;\n                    for(int a=0; a < buckets[i-1].size(); a++)\n                        if(buckets[i-1].get(a) == arr[i]-1)\n                            dex = a;\n                    for(int a=0; a < dex; a++)\n                        ls.add(buckets[i-1].get(a));\n                    ls.add(arr[i]);\n                }\n                buckets[i] = ls;\n            }\n            //output answer\n            for(int a=0; a < N; a++)\n            {\n                for(int i=0; i < buckets[a].size()-1; i++)\n                {\n                    sb.append(buckets[a].get(i));\n                    sb.append(\".\");\n                }\n                sb.append(arr[a]);\n                sb.append(\"\\n\");\n            }\n        }\n        System.out.print(sb);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tint t = input.nextInt();\n\t\tfor(int test = 0; test < t; test++){\n\t\t\tn = input.nextInt();\n\t\t\tint num = input.nextInt();\n\t\t\tif(num == 1){\n\t\t\t\tn--;\n\t\t\t\trecur(\"\");\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"ERROR\");\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\n\t\tint t=sc.nextInt();\n\t\twhile(t-->0) {\n\t\t\tint n=sc.nextInt();\n\t\t\tint[]a=sc.nextIntArray(n);\n\t\t\tLinkedList<Integer>ll=new LinkedList<Integer>();\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tif(a[i]==1) {\n\t\t\t\t\tll.addLast(a[i]);\n\t\t\t\t}else if(ll.isEmpty()) {\n\t\t\t\t\tll.addLast(a[i]);\n\t\t\t\t\t\n\t\t\t\t}else {\n\t\t\t\t\twhile(!(ll.getLast()==a[i]-1)) {\n\t\t\t\t\t\tll.removeLast();\n\t\t\t\t\t}\n\t\t\t\t\tll.removeLast();\n\t\t\t\t\tll.addLast(a[i]);\n\t\t\t\t}\n\t\t\t\tint ii=0;\n\t\t\t\tfor(int j:ll) {\n\t\t\t\t\tpw.print(j);\n\t\t\t\t\tif(ii!=ll.size()-1){\n\t\t\t\t\t\tpw.print('.');\n\t\t\t\t\t}\n\t\t\t\t\tii++;\n\t\t\t\t}\n\t\t\t\tpw.println();\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tpw.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\t/**/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/c.in\"))));\n\t\t/**/\n\t\t\n\t\tint t = sc.nextInt();\n\t\tfor (int z = 0; z < t; ++z) {\n\t\t\tint n = sc.nextInt();\n\t\t\tArrayList<Integer> al = new ArrayList<>();\n\t\t\tfor (int i = 0; i < n; ++i) {\n\t\t\t\tint x = sc.nextInt();\n\t\t\t\tif (x==1) {\n\t\t\t\t\tal.add(x);\n\t\t\t\t} else {\n\t\t\t\t\twhile (al.get(al.size()-1)!=x-1) {\n\t\t\t\t\t\tal.remove(al.size()-1);\n\t\t\t\t\t}\n\t\t\t\t\tal.remove(al.size()-1);\n\t\t\t\t\tal.add(x);\n\t\t\t\t}\n\t\t\t\tStringBuilder pr = new StringBuilder();\n\t\t\t\tString d = \"\";\n\t\t\t\tfor (int xx : al) {\n\t\t\t\t\tpr.append(d+xx);\n\t\t\t\t\td = \".\";\n\t\t\t\t}\n\t\t\t\tSystem.out.println(pr);\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException{\n        Scanner sc=new Scanner(System.in);\n      //  Reader sc=new Reader();\n        PrintWriter out=new PrintWriter(System.out);\n        int t = sc.nextInt();\n\t\twhile(t-->0) {\n\t\t    int n=sc.nextInt();\n\t\t     ArrayList<Integer> al[]=new ArrayList[n+1];\n\t\t     \n\t\t    for(int i=0;i<=n;i++)\n\t\t    al[i]=new ArrayList<>();\n\t\t    \n\t\t    al[0].add(1);\n\t\t    \n\t\t    int y;\n\t\t    y=sc.nextInt();\n\t\t    boolean flag=true;\n\t\t    for(int i=1;i<=n-1;i++) {\n\t\t         int x=sc.nextInt();\n\t\t        int idx=al[i-1].size()-1;\n\t\t        if(x!=1) {\n\t\t            while(flag) {\n\t\t                int ans=x-1;\n\t\t                if(al[i-1].get(idx)==ans) {\n\t\t                    idx--;\n\t\t                   break;\n\t\t                }\n\t\t                idx--;\n\t\t            }\n\t\t        }\n\t\t        for(int j=0;j<=idx;j++) {\n\t\t            al[i].add(al[i-1].get(j));\n\t\t        }\n\t\t        al[i].add(x);\n\t\t    }\n\t\t    \n\t\t    for(int i=0;i<=n-1;i++) {\n\t\t        out.print(al[i].get(0));\n\t\t        for(int j=1;j<=al[i].size()-1;j++) {\n\t\t            out.print(\".\"+al[i].get(j));\n\t\t        }\n\t\t        out.println();\n\t\t    }\n\t\n        \n  }\n\t\t  \n\t\t  out.flush();\n\t\t  out.close();\n\t\t \n\t\t  \n  \n\t\t  \n        }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException{\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        int t = Integer.parseInt(f.readLine());\n        while(t-->0){\n            int n = Integer.parseInt(f.readLine());\n            int[] arr = new int[n];\n            for(int i = 0; i < n; i++){\n                arr[i] = Integer.parseInt(f.readLine());\n            }\n            int[] levels = new int[n];\n            int curr_level = 0;\n            for(int i = 0; i < n; i++){\n                if(levels[curr_level] == arr[i]-1){\n                    levels[curr_level]++;\n                }else if(arr[i] == 1){\n                    curr_level++;\n                    levels[curr_level]++;\n                }else if(arr[i] > 1){\n                    while(curr_level > 0 && levels[curr_level] != arr[i]-1){\n                        levels[curr_level] = 0;\n                        curr_level--;\n                    }\n                    levels[curr_level]++;\n                }\n                StringBuilder ostring = new StringBuilder();\n                for(int level = 0; level <= curr_level; level++){\n                    ostring.append(levels[level]);\n                    if(level != curr_level) ostring.append(\".\");\n                }\n                out.println(ostring);\n            }\n\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C().run(); }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(in, out);\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder sb = new StringBuilder();\n        int t = Integer.parseInt(buffer.readLine());\n        while (t-- > 0) {\n            int n = Integer.parseInt(buffer.readLine());\n            ArrayList<Integer>list = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                int a = Integer.parseInt(buffer.readLine());\n                if (a == 1)\n                    list.add(1);\n                else {\n                    for (int j = list.size()-1; j >= 0; j--) {\n                        if (list.get(j)+1 == a)\n                            break;\n                        list.remove(list.size()-1);\n                    }\n                    list.remove(list.size()-1);\n                    list.add(a);\n                }\n                for (int j = 0; j < list.size(); j++) {\n                    sb.append(list.get(j));\n                    if (j == list.size()-1)\n                        sb.append(\"\\n\");\n                    else\n                        sb.append(\".\");\n                }\n            }\n        }\n        System.out.println(sb);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 29);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)\n\t\tFastReader fr=new FastReader();\n\n\t\tbyte t=fr.nextByte();\n\t\twhile(t-->0)\n\t\t{\n\t\t\tshort n=fr.nextShort();\n\t\t\tshort a[]=new short [n];\n\t\t\tfor (short i=-1;++i<n;)\n\t\t\t\ta[i]=fr.nextShort();\n\t\t\t\n\t\t\tString s=\"1\";\n\t\t\tSystem.out.println(s);\n\n\t\t\tfor(short i=0;++i<n;)\n\t\t\t{\n\t\t\t\tif(a[i]==1)\n\t\t\t\t{\n\t\t\t\t\ts+=\".1\";\n\t\t\t\t\tSystem.out.println(s);\n\t\t\t\t}\n\t\t\t\telse if(a[i]==a[i-1]+1)\n\t\t\t\t{\n\t\t\t\t\tint c=s.lastIndexOf(\".\");\n\t\t\t\t\ts=s.substring(0,c+1)+a[i];\n\t\t\t\t\tSystem.out.println(s);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\t\t\t\t\n\t\t\t\t\tfor(;;)\n\t\t\t\t\t{\n\t\t\t\t\t\ts=s.substring(0,s.lastIndexOf(\".\"));\n\t\t\t\t\t\tint c=s.lastIndexOf(\".\");\n\n\t\t\t\t\t\tint b=Integer.parseInt(s.substring(c+1,s.length()));\n\t\t\t\t\t\tif(b+1==a[i])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ts=s.substring(0,c+1)+a[i];\n\t\t\t\t\t\t\tSystem.out.println(s);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n    \t\n\t\t\n    \tFastScanner fs = new FastScanner();\n    \tPrintWriter out = new PrintWriter(System.out);\n  \t\t\n    \tint tt = fs.nextInt();\n    \touter:\n    \twhile(tt-->0) {\n    \t\t\n    \t\tint n = fs.nextInt();\n    \t\tint[] a = fs.readArray(n);\n    \t\t\n    \t\tArrayList<Integer>[] l = new ArrayList[n];\n    \t\tfor(int i=0;i<n;i++) l[i] = new ArrayList<Integer>();\n    \t\t\n    \t\tl[0].add(1);\n    \t\t\n    \t\tfor(int i=1;i<n;i++) {\n    \t\t\tif(a[i]==1) {\n    \t\t\t\tfor(int j=0;j<l[i-1].size();j++) l[i].add(l[i-1].get(j));\n    \t\t\t\tl[i].add(1);\n    \t\t\t}\n    \t\t\telse {\n    \t\t\t\tint ind = -1;\n    \t\t\t\tfor(int j=l[i-1].size()-1;j>=0;j--) {\n    \t\t\t\t\tif(l[i-1].get(j)+1==a[i]) {\n    \t\t\t\t\t\tind = j; break;\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\tfor(int j=0;j<ind;j++) l[i].add(l[i-1].get(j));\n    \t\t\t\tl[i].add(a[i]);\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t\tfor(int i=0;i<n;i++) {\n    \t\t\tout.print(l[i].get(0));\n    \t\t\tfor(int j=1;j<l[i].size();j++) out.print(\".\"+l[i].get(j));\n    \t\t\tout.println();\n    \t\t}\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t}\n    \t\n    \tout.close();\n    \t\t\n    \t\n    \t\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t// long start = System.nanoTime();\n\t\tsolve();\n\t\t// System.out.println(\"Elapsed: \" + (System.nanoTime() - start) / 1000000 +\n\t\t// \"ns\");\n\t\tout.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner scn = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        for (int tc = scn.nextInt(); tc > 0; tc--) {\n            int N = scn.nextInt();\n            int[] arr = new int[N];\n            for (int i = 0; i < N; i++) {\n                arr[i] = scn.nextInt();\n            }\n            StringBuilder[] ans = new StringBuilder[N];\n            ans[0] = new StringBuilder(\"1\");\n            ArrayDeque<Integer> st = new ArrayDeque<>();\n            st.addLast(0);\n            for (int i = 1; i < N; i++) {\n                // System.out.println(st);\n                ans[i] = new StringBuilder();\n                if (arr[i] == 1) {\n                    st.addLast(i);\n                    ans[i].append(ans[i - 1].toString() + \".1\");\n                } else {\n                    while (arr[st.getLast()] != arr[i] - 1) {\n                        st.removeLast();\n                    }\n                    int pos = st.removeLast();\n                    String[] prev = ans[pos].toString().split(\"[.]\");\n                    for (int j = 0, sz = prev.length - 1; j < sz; j++) {\n                        ans[i].append(prev[j] + \".\");\n                    }\n                    ans[i].append(arr[i] + \"\");\n                    st.addLast(i);\n                }\n            }\n            for (StringBuilder str : ans) {\n                out.println(str);\n            }\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args)throws IOException {\n        FastReader in=new FastReader(System.in);\n        int t=in.nextInt();\n        StringBuilder sb=new StringBuilder();\n        int i,j,tc=0;\n        while(tc++<t) {\n            int n=in.nextInt();\n            int arr[]=new int[n];\n            for(i=0;i<n;i++)\n                arr[i]=in.nextInt();\n            int ans[]=new int[n+4];\n            ans[0]=1;\n            int pos=0;\n            sb.append(\"1\\n\");\n            for(i=1;i<n;i++){\n                if(arr[i]==arr[i-1]+1){\n                    ans[pos]=ans[pos]+1;\n                }\n                else if(arr[i]==1){\n                    pos++;\n                    ans[pos]=1;\n                }\n                else{\n                    while(ans[pos]!=arr[i]-1)\n                        pos--;\n                    ans[pos]=ans[pos]+1;\n                }\n                for(j=0;j<=pos;j++){\n                    if(j<pos)\n                        sb.append(ans[j]).append(\".\");\n                    else\n                        sb.append(ans[j]).append(\"\\n\");\n                }\n\n            }\n        }\n        System.out.println(sb);\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws IOException {\n        new Thread(null, new Main(), \"random\", 1 << 26).start();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String args[]) throws IOException {\n        Scan input=new Scan();\n        StringBuilder ans=new StringBuilder(\"\");\n        int test=input.scanInt();\n        for(int tt=1;tt<=test;tt++) {\n            int n=input.scanInt();\n            \n            ArrayList<Integer> arrli[]=new ArrayList[n];\n            for(int i=0;i<n;i++) {\n                arrli[i]=new ArrayList<>();\n            }\n            \n            for(int i=0;i<n;i++) {\n                int tmp=input.scanInt();\n                if(i==0) {\n                    arrli[0].add(1);\n                    continue;\n                }\n                if(tmp==1) {\n                    for(int j=0;j<arrli[i-1].size();j++) {\n                        arrli[i].add(arrli[i-1].get(j));\n                    }\n                    arrli[i].add(tmp);\n                    continue;\n                }\n                int indx=-1;\n                for(int j=0;j<arrli[i-1].size();j++) {\n                    if(arrli[i-1].get(j)==tmp-1) {\n                        indx=j;\n                    }\n                }\n                for(int j=0;j<indx;j++) {\n                    arrli[i].add(arrli[i-1].get(j));\n                }\n                arrli[i].add(tmp);\n            }\n            for(int i=0;i<n;i++) {\n               for(int j=0;j<arrli[i].size();j++) {\n                   ans.append(arrli[i].get(j));\n                   if(j!=arrli[i].size()-1) {\n                       ans.append(\".\");\n                   }\n               }\n               ans.append(\"\\n\");\n            }\n        }\n        System.out.println(ans);\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args)\n\t\tFastScanner fs = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint t = fs.nextInt();\n\t\tfor(int tt=0;tt<t;tt++)\n\t\t{\n\t\t\tint n = fs.nextInt();\n\t\t\tint[] arr = fs.readArray(n);\n\t\t\tList<String> ans = new ArrayList();\n\t\t\tList<Integer> temp = new ArrayList();\n\t\t\ttemp.add(arr[0]);\n\t\t\tans.add(\"\"+arr[0]);\n\t\t\tfor(int i=1;i<n;i++)\n\t\t\t{\n\t\t\t\tint ch = arr[i];\n\t\t\t\tif(ch == 1)\n\t\t\t\t{\n\t\t\t\t\ttemp.add(1);\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tfor(int j=0;j<temp.size();j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tsb.append(temp.get(j));\n\t\t\t\t\t\tif(j != temp.size()-1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.append('.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tans.add(sb.toString());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint j = temp.size()-1;\n\t\t\t\t\twhile(j>=0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(ch - temp.get(j) == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttemp.set(j,ch);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tj--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint extra = temp.size()-1;\n\t\t\t\t\twhile(extra>j)\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp.remove(temp.size()-1);\n\t\t\t\t\t\textra--;\n\t\t\t\t\t}\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tfor(int jj=0;jj<temp.size();jj++)\n\t\t\t\t\t{\n\t\t\t\t\t\tsb.append(temp.get(jj));\n\t\t\t\t\t\tif(jj != temp.size()-1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.append('.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tans.add(sb.toString());\n\t\t\t\t}\n//\t\t\t\tout.println(\"Here: \"+temp);\n\t\t\t}\n\t\t\tfor(String str:ans)\n\t\t\t{\n\t\t\t\tout.println(str);\n\t\t\t}\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        int T = Integer.parseInt(br.readLine());\n        while (T-- > 0) {\n            int N = Integer.parseInt(br.readLine());\n            Stack<LN> nodes = new Stack<>();\n            int a0 = Integer.parseInt(br.readLine());\n            LN root = new LN(1, 0, \"\");\n            nodes.add(root);\n            pw.println(root);\n            for (int i = 0; i < N - 1; i++) {\n                int ai = Integer.parseInt(br.readLine());\n                while (!nodes.isEmpty()) {\n                    LN nn = nodes.pop();\n                    if (ai == 1) {\n                        LN e = new LN(1, nn.depth + 1, nn.toString());\n                        nodes.add(nn);\n                        nodes.add(e);\n                        pw.println(e);\n                        break;\n                    } else if (nn.lv == ai - 1) {\n                        LN e = new LN(ai, nn.depth, nn.base);\n                        nodes.add(e);\n                        pw.println(e);\n                        break;\n                    }\n                }\n            }\n        }\n        pw.flush();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, null, \"_\", 1 << 27) {\n            public void run() {\n                try {\n                    solve();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner sc = new FastScanner();\n\t\tint T = sc.nextInt();\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(T-->0) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] arr = new int[n];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = sc.nextInt();\n\t\t\t}\n\t\t\tint[] p = new int[n];\n\t\t\tint[] base = new int[n];\n\t\t\tp[0] = -1;\n\t\t\tbase[0] = -1;\n\t\t\tboolean[] used = new boolean[n];\n\t\t\tfor(int i = 1; i < n; i++) {\n\t\t\t\tif(arr[i] == 1) {\n\t\t\t\t\tp[i] = i-1;\n\t\t\t\t\tbase[i] = i-1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor(int j = i-1; j >= 0; j--) {\n\t\t\t\t\t\tif(used[j]) continue;\n\t\t\t\t\t\tif(arr[j] == arr[i]-1) {\n\t\t\t\t\t\t\tp[i] = j; used[j] = true; \n\t\t\t\t\t\t\tbase[i] = base[j]; break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse used[j] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tStringBuilder[] res = new StringBuilder[n];\n\t\t\tres[0] = new StringBuilder(\"1\");\n\t\t\tsb.append(\"1\\n\");\n\t\t\tfor(int i = 1; i < n; i++) {\n\t\t\t\tif(base[i] == -1) { \n\t\t\t\t\tres[i] = new StringBuilder();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tres[i] = new StringBuilder(res[base[i]]);\n\t\t\t\t\tres[i].append(\".\");\n\t\t\t\t}\n\t\t\t\tres[i].append(arr[i]+\"\");\n\t\t\t\tsb.append(res[i]);\n\t\t\t\tsb.append(\"\\n\");\n\t\t\t}\n\t\t}\t\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tpw.println(sb.toString().trim());\n\t\tpw.flush();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int i = 0; i < t ; i++) {\n            int n = sc.nextInt();\n            ArrayList<Stack<Integer>> ar = new ArrayList<Stack<Integer>>();\n            for (int j = 0; j < n + 1; j++) {\n                ar.add(new Stack<Integer>());\n            }\n            HashMap <Integer , Integer> hm = new HashMap<Integer, Integer>();\n            StringBuilder cur = new StringBuilder();\n            int l = 0;\n            for (int j = 0; j < n; j++) {\n                int a = sc.nextInt();\n                if( a == 1)\n                {\n                    if(cur.length() == 0)\n                        cur.append(\"1\");\n                    else\n                        cur.append(\".1\");\n                    l++;\n                    ar.get(1).add(l);\n                    hm.put(l , 1);\n                }\n                else\n                {\n                    int newl = ar.get( a - 1).pop();\n                    for (int k = newl + 1; k <= l ; k++) {\n                        ar.get(hm.get(k)).pop();\n                        hm.remove(k);\n                        cur.delete(cur.lastIndexOf(\".\")  + 1, cur.length());\n                        cur.delete(cur.length() - 1 , cur.length());\n                    }\n                    cur.delete(cur.lastIndexOf(\".\")  + 1, cur.length());\n                    cur.append(a);\n                    ar.get(a).add(newl);\n                    hm.put(newl , a);\n                    l = newl;\n                }\n                System.out.println(cur);\n            }\n\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        FastScanner57 fs = new FastScanner57();\n        PrintWriter pw = new PrintWriter(System.out);\n        int t = fs.ni();\n        //int t = 1;\n        for (int tc = 0; tc < t; tc++) {\n            int n = fs.ni();\n            int[] q = new int[n+5];\n            int ind = 0;\n            q[0] = 1;\n            for (int i = 0; i < n; i++) {\n                int a = fs.ni();\n                while (q[ind]!=a) ind--;\n                StringBuilder sb = new StringBuilder();\n                for (int j = 0; j < ind; j++) {\n                    sb.append(q[j]-1);\n                    sb.append(\".\");\n                }\n                    sb.append(a);\n                    q[ind]++;\n                    q[ind+1] = 1;\n                    ind++;\n                    pw.println(sb);\n            }\n        }\n        pw.close();\n\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        //Scanner f = new Scanner(new File(\"uva.in\"));\n        //Scanner f = new Scanner(System.in);\n        //BufferedReader f = new BufferedReader(new FileReader(\"uva.in\"));\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int t = Integer.parseInt(f.readLine());\n        while(t-- > 0) {\n            int n = Integer.parseInt(f.readLine());\n            nodes = new HashMap<>();\n            nodes.put(\"\", 0);\n            String cur = \"\";\n            for(int i = 0; i < n; i++) {\n                int a = Integer.parseInt(f.readLine());\n                while(nodes.get(cur) != a-1) {\n                    cur = cur.substring(0, cur.lastIndexOf(\".\"));\n                }\n                nodes.put(cur, a);\n                cur = cur+\".\"+a;\n                nodes.put(cur, 0);\n            }\n            dfs(\"\", out);\n        }\n        f.close();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        FastIO in = new FastIO(args);\n        int t = in.ni();\n        while (t-- > 0) {\n            int n = in.ni();\n            LinkedList<Integer> l = new LinkedList<>();\n            ArrayList<LinkedList<Integer>> al = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                int p = in.ni();\n                if (p == 1) {\n                    l.addFirst(1);\n                } else {\n                    while (true) {\n                        if (l.peekFirst() == p - 1) {\n                            l.addFirst(l.removeFirst() + 1);\n                            break;\n                        } else {\n                            l.removeFirst();\n                        }\n                    }\n                }\n                al.add(new LinkedList<>(l));\n            }\n            for (LinkedList<Integer> ll : al) {\n                while (ll.size() > 1) {\n                    System.out.print(ll.removeLast() + \".\");\n                }\n                System.out.println(ll.remove());\n            }\n            System.out.println();\n        }\n        in.bw.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n        int t = sc.nextInt();\n        for(int i=0;i<t;i++) {\n            int n = sc.nextInt();\n            int[] arr = new int[n];\n            for(int j=0;j<n;j++) arr[j] = sc.nextInt();\n            deal(n,arr);\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String args[]) throws IOException\n\t\tf = new FastIO();\n\n\t\tint t, n, a, i;\n\t\tNode r, p, c;\n\t\t\n\t\tt = f.ni();\n\t\t\n\t\twhile(t-->0)\n\t\t{\n\t\t\tn = f.ni();\n\t\t\tr = p = new Node(-1, null);\n\t\t\t// f.out(\"1\\n\");\n\n\t\t\tfor(i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\ta = f.ni();\n\t\t\t\tif(a != 1)\n\t\t\t\t{\n\t\t\t\t\twhile(a != p.i + 1)\n\t\t\t\t\t\tp = p.p;\n\t\t\t\t\tp = p.p;\n\t\t\t\t}\n\t\t\t\t// if(a == p.i + 1)\n\t\t\t\t// \tp = p.p;\n\t\t\t\t// else if(p.p != null && a == p.p.i + 1)\n\t\t\t\t// \tp = p.p.p;\n\t\t\t\tc = new Node(a, p);\n\t\t\t\tp.c.add(c);\n\t\t\t\tp = c;\n\t\t\t}\n\n\t\t\tdfs(r, \"\");\n\t\t}\n\n\t\tf.flush();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastIO io = new FastIO();\n\t\tint test=io.nextInt();\n\t\twhile(test>0)\n\t\t{\n\t\t    int n=io.nextInt();\n\t\t    int arr[]=new int[n];\n\t\t    for(int i=0;i<n;i++)arr[i]=io.nextInt();\n\t\t    List<int[]> list=new ArrayList<>();\n\t\t    Stack<int[]> stk=new Stack<>();\n\t\t    int temp[]={1};\n\t\t    list.add(temp);\n\t\t    stk.push(temp);\n\t\t    for(int i=1;i<n;i++)\n\t\t    {\n\t\t        if(arr[i]==1)\n\t\t        {\n\t\t            int t[]=stk.peek();\n\t\t            int nt[]=new int[t.length+1];\n\t\t            for(int j=0;j<t.length;j++)nt[j]=t[j];\n\t\t            nt[nt.length-1]=arr[i];\n\t\t            stk.push(nt);\n\t\t            list.add(nt);\n\t\t            continue;\n\t\t        }\n\t\t        while(stk.size()>0)\n\t\t        {\n\t\t            int t[]=stk.peek();\n\t\t            if(t[t.length-1]+1==arr[i]){\n\t\t                int nt[]=new int[t.length];\n\t\t                for(int j=0;j<t.length-1;j++)nt[j]=t[j];\n\t\t                nt[t.length-1]=arr[i];\n\t\t                stk.pop();\n\t\t                stk.push(nt);\n\t\t                list.add(nt);\n\t\t                break;\n\t\t            }\n\t\t            else\n\t\t            {\n\t\t                stk.pop();\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    for(int i=0;i<list.size();i++)\n\t\t    {\n\t\t        StringBuilder sb=new StringBuilder();\n\t\t        sb.append(list.get(i)[0]);\n\t\t        for(int j=1;j<list.get(i).length;j++)\n\t\t        {\n\t\t            sb.append(\".\"+list.get(i)[j]);\n\t\t        }\n\t\t        io.println(sb.toString());\n\t\t    }\n\t\t    test--;\n\t\t}\n\t\tio.close();\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main (String[] args) throws IOException {\n        int t = Integer.parseInt(br.readLine());\n        while(t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            int prev = 1;\n            ArrayList<Integer> nums = new ArrayList<>();\n            nums.add(1);\n            String till = \"1\";\n            for(int i=0;i<n;i++) {\n                int ln = Integer.parseInt(br.readLine());\n                if(i == 0) {\n                    bw.write(\"1\\n\");\n                    continue;\n                }\n                if(ln == 1) {\n                    nums.add(1);\n                }else if(ln == prev + 1) {\n                    nums.set(nums.size()-1, ln);\n                }else {\n                    int idx = -1;\n                    for(int j=nums.size()-1;j>=0;j--) {\n                        if(nums.get(j) == ln-1) {\n                            idx = j;\n                            break;\n                        }\n                    }\n                    ArrayList<Integer> temp = new ArrayList<>();\n                    for(int j=0;j<idx;j++) {\n                        temp.add(nums.get(j));\n                    }\n                    temp.add(ln);\n                    nums.clear();\n                    nums = temp;\n                }\n                for(int j=0;j<nums.size()-1;j++) {\n                    bw.write(nums.get(j) + \".\");\n                }\n                bw.write(nums.get(nums.size()-1) + \"\\n\");\n                prev = ln;\n            }\n            \n        }\n        bw.flush();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main (String[] args) throws Exception\n\t\tfinal long mod=(long) (1e9+7);  \n\t\tfinal long mod1=(long) 998244353;\n\t\tReader s=new Reader();\n\t\t  PrintWriter pt=new PrintWriter(System.out);\n\t\t  \n\t\t  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\t  int T=s.nextInt();\n//\t\t  int T=Integer.parseInt(br.readLine());\n//\t\t  int T=1;\n\t\t  while(T-->0)\n\t\t  {\n\t\t\t  int n=s.nextInt();\n\t\t\t  int arr[]=new int[n];\n\t\t\t  int brr[]=new int[n];\n\t\t\t  int e=-1;\n\t\t\t  for(int i=0;i<n;i++) {\n\t\t\t\t  arr[i]=s.nextInt();\n\t\t\t\t  if(e==-1) {\n\t\t\t\t\t  brr[e+1]=arr[i];\n\t\t\t\t\t  e++;\n\t\t\t\t  }\n\t\t\t\t  else {\n\t\t\t\t\t  if(arr[i]==1) {\n\t\t\t\t\t\t  e++;\n\t\t\t\t\t\t  brr[e]=arr[i];\n\t\t\t\t\t  }\n\t\t\t\t\t  else {\n\t\t\t\t\t\t  int j=e;\n\t\t\t\t\t\t  for(j=e;j>=0;j--) {\n\t\t\t\t\t\t\t  if((arr[i]-1)==brr[j])\n\t\t\t\t\t\t\t\t  break;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  e=j;\n\t\t\t\t\t\t  brr[e]=arr[i];\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t\t  pt.print(brr[0]);\n\t\t\t\t  for(int j=1;j<=e;j++) {\n\t\t\t\t\t  pt.print(\".\"+brr[j]);\n\t\t\t\t  }\n\t\t\t\t  pt.println();\n\t\t\t  }\n\t\t\t  \n\t\t\t  \n\t\t\t  \n\t\t\t  \n\t\t      \n\t    \t  \n\t\t  }\n\t\t\t  \n\t\t      \n\t\t  \n\t\t  pt.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n        int t = sc.nextInt();\n        while (t-- > 0) {\n            int n = sc.nextInt();\n            Stack<Integer> s = new Stack<>();\n            int [] a = new int[n];\n            for (int i = 0; i < n; ++i) a[i] = sc.nextInt();\n            for (int i = 0; i < n; i++) {\n                if (a[i] == 1) {\n                    s.push(1);\n                } else {\n                    while (s.peek() != a[i] - 1) {\n                        s.pop();\n                    }\n                    s.pop();\n                    s.push(a[i]);\n                }\n                print(s);\n            }\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args){\n        FastScanner in = new FastScanner();\n        FastWriter out = new FastWriter();\n        Scanner sc=new Scanner(System.in);\n        int t=in.nextInt();\n        //int t=1;\n        while (t-->0){\n            int n=in.nextInt();\n            int[] ar=in.nextArray(n);\n            int[] level=new int[1005];\n            int j=1;\n            level[1]=1;\n            out.println(1);\n            for (int i = 1; i < n; i++) {\n                if(ar[i]==1) {\n                    j++;\n                    level[j] = 1;\n                }else {\n                    while (j>=1){\n                        if(level[j]+1!=ar[i]){\n                            j--;\n                        }else {\n                            break;\n                        }\n                    }\n                    level[j]++;\n                }\n                for (int k = 1; k <= j; k++) {\n                    if(k==j){\n                        out.print(level[k]);\n                    }else {\n                        out.print(level[k]+\".\");\n                    }\n                }\n                out.println();\n            }\n        }\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "   public static void main(String[] args)throws IOException{\n      BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n      PrintWriter out = new PrintWriter(System.out);\n      \n      int t = Integer.parseInt(f.readLine());\n      \n      for(int q = 1; q <= t; q++){\n\n         int n = Integer.parseInt(f.readLine());\n      \n         int[] array = new int[n];\n         for(int k = 0; k < n; k++){\n            array[k] = Integer.parseInt(f.readLine());\n         }\n         \n         StringJoiner sj = new StringJoiner(\"\\n\");\n         Stack<Entry> stack = new Stack<Entry>();\n         \n         //first element should be 1\n         sj.add(\"1\");\n         stack.push(new Entry(\"1\",1));\n         \n         for(int k = 1; k < n; k++){\n            if(array[k] == 1){\n               //add new depth\n               String s = stack.peek().s + \".1\";\n               sj.add(s);\n               stack.push(new Entry(s,1));\n            } else {\n               while(!stack.isEmpty() && stack.peek().last != array[k]-1){\n                  stack.pop();\n               }\n               \n               if(stack.isEmpty()) break;             //shouldn't happen\n               \n               String s = \"\";\n               int index = stack.peek().s.lastIndexOf(\".\");\n               if(index == -1) s = \"\" + array[k];\n               else s = stack.peek().s.substring(0,index+1) + array[k];\n               sj.add(s);\n               stack.pop();\n               stack.push(new Entry(s,array[k]));\n            }\n         }\n         \n         out.println(sj.toString());\n      }\n      \n      \n      \n      \n      out.close();\n   }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        for (int i = 0, t = sc.nextInt(); i < t; i++) {\n            int n = sc.nextInt();\n            LinkedList<Set<Integer>> stack = new LinkedList<>();\n            for (int j = 0; j < n; j++) {\n                printStack(stack);\n                int val = sc.nextInt();\n                if (val == 1) {\n                    Set<Integer> branch = new HashSet<>();\n                    branch.add(val);\n                    stack.push(branch);\n                    continue;\n                }\n                Set<Integer> branch = stack.peek();\n                assert branch != null;\n                while (branch.contains(val) || branch.stream().max(Integer::compareTo).get() + 1 != val) {\n                    stack.pop();\n                    branch = stack.peek();\n                }\n                branch.add(val);\n            }\n            printStack(stack);\n        }\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner fs=new FastScanner();\n\t\tint T=fs.nextInt();\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t\tfor (int tt=0; tt<T; tt++) {\n\t\t\tint n=fs.nextInt();\n\t\t\tint[] a=fs.readArray(n);\n\t\t\tint[] stack=new int[n];\n\t\t\tint size=0;\n\t\t\tfor (int i:a) {\n\t\t\t\tif (i==1) {\n\t\t\t\t\tstack[size++]=i;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\twhile (stack[size-1]!=i-1) {\n\t\t\t\t\t\tsize--;\n\t\t\t\t\t}\n\t\t\t\t\tsize--;\n\t\t\t\t\tstack[size++]=i;\n\t\t\t\t}\n\t\t\t\tfor (int j=0; j<size; j++) {\n\t\t\t\t\tout.print(stack[j]);\n\t\t\t\t\tif (j!=size-1) out.print('.');\n\t\t\t\t}\n\t\t\t\tout.println();\n\t\t\t}\n\t\t\t\n//\t\t\tint[] mapTo=new int[n];\n//\t\t\tArrays.fill(mapTo, -1);\n//\t\t\tArrayDeque<Integer>[] occsOf=new ArrayDeque[1001];\n//\t\t\tfor (int i=0; i<occsOf.length; i++) occsOf[i]=new ArrayDeque<>();\n//\t\t\tint lastOne=-1;\n//\t\t\t\n//\t\t\tfor (int i=0; i<n; i++) {\n//\t\t\t\tif (a[i]==1) {\n//\t\t\t\t\tmapTo[i]=lastOne;\n//\t\t\t\t\tlastOne=i;\n//\t\t\t\t}\n//\t\t\t}\n//\t\t\tfor (int value=2; value<occsOf.length; value++) {\n//\t\t\t\tfor (int i:occsOf[value]) {\n//\t\t\t\t\tint mapsTo=occsOf[value-1].removeFirst();\n//\t\t\t\t\tmapTo[i]=mapsTo;\n//\t\t\t\t}\n//\t\t\t}\n//\t\t\tSystem.out.println(Arrays.toString(mapTo));\n//\t\t\tfor (int i=0; i<n; i++) {\n//\t\t\t\tArrayList<Integer> listBackwards=new ArrayList<>();\n//\t\t\t\tlistBackwards.add(a[i]);\n//\t\t\t\tint at=i;\n//\t\t\t\twhile (true) {\n////\t\t\t\t\tSystem.out.println(\"x\");\n//\t\t\t\t\tif (mapTo[at]==-1) {\n//\t\t\t\t\t\tbreak;\n//\t\t\t\t\t}\n//\t\t\t\t\tif (a[mapTo[at]]!=a[at]-1) {\n//\t\t\t\t\t\tlistBackwards.add(a[mapTo[at]]);\n//\t\t\t\t\t}\n//\t\t\t\t\tat=mapTo[at];\n//\t\t\t\t}\n//\t\t\t\tfor (int j=listBackwards.size()-1; j>=0; j--) {\n//\t\t\t\t\tout.print(listBackwards.get(j));\n//\t\t\t\t\tif (j!=0) out.print('.');\n//\t\t\t\t}\n//\t\t\t\tout.println();\n//\t\t\t}\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n    \ttry{\n            new Thread(null, new c1523(), \"process\", 1<<26).start();\n        }\n        catch(Exception e){\n            System.out.println(e);\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String args[])\n        Scanner sc=new Scanner(System.in);\n        long mod=1000000007l;\n        int cases=sc.nextInt();\n\n\n        while(cases>0)\n        {\n            cases--;\n            Stack<Integer> stack=new Stack<>();\n\n            int n=sc.nextInt();\n\n            for(int j=0;j<n;j++)\n            {\n                int x=sc.nextInt();\n                if(x==1)\n                {\n                    stack.add(1);\n                }\n                else\n                {\n                    int p=stack.pop();\n                    if(p==x-1)\n                    {\n                        stack.add(x);\n                    }\n                    else {\n                        while (p != x-1) {\n                            p = stack.pop();\n                        }\n\n                        stack.add(x);\n\n                    }\n\n                }\n                StringBuilder f=new StringBuilder();\n                Stack<Integer> temp=new Stack<>();\n\n                while(stack.isEmpty()==false)\n                {\n                    temp.add(stack.pop());\n                }\n\n                while(temp.isEmpty()==false)\n                {\n                    int z=temp.pop();\n                    f.append(z+\".\");\n                    stack.add(z);\n                }\n\n\n                System.out.println(f.substring(0,f.length()-1));\n\n            }\n\n        }\n\n    }\n", "complexity": "cubic"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    CCompressionAndExpansion solver = new CCompressionAndExpansion();\n    int testCount = Integer.parseInt(in.next());\n    for (int i = 1; i <= testCount; i++)\n      solver.solve(i, in, out);\n    out.close();\n  }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        sc = new InputReader(inputStream);\n        pw = new PrintWriter(outputStream);\n        solve();\n        pw.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int t = 0; t < T; t++) {\n            int N = in.nextInt();\n            List<Integer> list = new ArrayList<>();\n            for (int i = 0; i < N; i++) {\n                int n = in.nextInt();\n                if (n == 1) {\n                    list.add(n);\n                } else {\n                    for (int j = list.size() - 1; j >= 0; j--) {\n                        if (list.get(j) == n - 1) {\n                            list.set(j, n);\n                            break;\n                        }\n                        list.remove(j);\n                    }\n                }\n                for (int j = 0; j < list.size(); j++) {\n                    System.out.print(list.get(j) + (j == list.size() - 1 ? \"\\n\" : \".\"));\n                }\n            }\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int T = Integer.parseInt(br.readLine());\n        for (int t = 0; t < T; t++) {\n            int N = Integer.parseInt(br.readLine());\n            Stack<Integer> stack = new Stack();\n            for (int i = 0; i < N; i++) {\n                int a = Integer.parseInt(br.readLine());\n                if (a != 1) {\n                    while (stack.peek() + 1 != a) {\n                        stack.pop();\n                    }\n                    stack.pop();\n                }\n                stack.push(a);\n\n                boolean dummy = false;\n                for (int j : stack) {\n                    if (dummy) {\n                        pw.print(\".\");\n                    }\n                    pw.print(j);\n                    dummy = true;\n                }\n                pw.println();\n            }\n        }\n\n        pw.close();\n        br.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        Soumit sc = new Soumit();\n\n        int t = sc.nextInt();\n        StringBuilder sb = new StringBuilder();\n        while (t-->0){\n            int n = sc.nextInt();\n            int[] arr = sc.nextIntArray(n);\n\n            Stack<Node> mainstk = new Stack<>();\n\n            Node pnode = new Node();\n            pnode.stk.push(1);\n            pnode.sb.append(\"1\");\n            mainstk.push(pnode);\n            sb.append(pnode.sb).append(\"\\n\");\n\n            for(int i=1;i<n;i++){\n                int val = arr[i];\n                if(val==1){\n                    Node node = new Node();\n                    node.stk.push(1);\n                    node.sb.append(mainstk.peek().sb).append(\".1\");\n                    mainstk.push(node);\n                    sb.append(node.sb).append(\"\\n\");\n                }\n                else {\n                    while (true) {\n                        Node node = mainstk.pop();\n                        if (node.stk.peek()==val-1) {\n                            node.stk.push(val);\n                            if(mainstk.isEmpty()){\n                                node.sb = new StringBuilder();\n                                node.sb.append(val);\n                                sb.append(val).append(\"\\n\");\n                            }\n                            else{\n                                Node peeknode = mainstk.peek();\n                                node.sb = new StringBuilder();\n                                node.sb.append(peeknode.sb).append(\".\").append(val);\n                                sb.append(peeknode.sb).append(\".\").append(val).append(\"\\n\");\n                            }\n                            mainstk.push(node);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        System.out.println(sb);\n\n        sc.close();\n    }\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint testcases = Integer.parseInt(st.nextToken());\n\t\tfor(int lmn=0;lmn<testcases;lmn++){\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint n = Integer.parseInt(st.nextToken());\n\t\t\t// int k = Integer.parseInt(st.nextToken());\n\t\t\t// st = new StringTokenizer(br.readLine());\n\t\t\tArrayList<Integer> a = new ArrayList<>();\n\t\t\tfor(int lmn1 = 0;lmn1<n;lmn1++){\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t\tint a1 = Integer.parseInt(st.nextToken());\n\t\t\t\tif(a.size()>0 && (a1==1)){\n\t\t\t\t\t// a.add(a1);\n\t\t\t\t}\n\t\t\t\telse if(a.size()>0){\n\t\t\t\t\tif(a.size()==1){\n\t\t\t\t\t\ta.remove(0);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint i = a.size()-1;\n\t\t\t\t\t\twhile(a.size()>0 && i>=0 && a.get(i)+1 != a1){\n\t\t\t\t\t\t\ta.remove(i);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ta.remove(a.size()-1);\n\t\t\t\t\t\t// System.out.println(a+\" \"+i);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// while(a.size()>0 && a.get(a.size()-1)+1<a1){\n\t\t\t\t// \ta.remove(a.size()-1);\n\t\t\t\t// }\n\t\t\t\tif(a.size()==0){\n\t\t\t\t\ta.add(a1);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ta.add(a1);\n\t\t\t\t}\n\t\t\t\tif(a.size()==1){\n\t\t\t\t\tSystem.out.println(a.get(0));\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor(int i=0;i<a.size()-1;i++){\n\t\t\t\t\t\t\n\t\t\t\t\t\tSystem.out.print(a.get(i)+\".\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(a.get(a.size()-1));\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t}\n\t\t}\n\t\t\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s = new Scanner(System.in);\n\t\tint t = s.nextInt();\n\t\twhile (t-->0) {\n\t\t\t\n\t\t\tint n = s.nextInt();\n\t\t\tint[] arr = new int[n];\n\t\t\tfor (int i=0; i<n; i++) {\n\t\t\t\tarr[i] = s.nextInt();\n\t\t\t}\n\n//\t\t\tint deep = 0;\n//\t\t\tSystem.out.println(n+\"     n\");\n\t\t\tList<Integer> al = new ArrayList<>();\n\t\t\tal.add(1);\n\t\t\tSystem.out.println(1);\n\t\t\tfor(int i=1; i<n;i++) {\n\t\t\t\tint len = al.size();\n//\t\t\t\tfor (int d =0; d<len; d++) {\n//\t\t\t\t\tSystem.out.print(al.get(d)+\" \");\n//\t\t\t\t}\n//\t\t\t\tSystem.out.println();\n\t\t\t\tif (arr[i] == 1) {\n\t\t\t\t\tfor(int j=0; j<len; j++) {\n\t\t\t\t\t\tSystem.out.print(al.get(j)+\".\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t\tal.add(1);\n\t\t\t\t}else if (arr[i] == arr[i-1] && arr[i]==1) {\n\t\t\t\t\t\n\t\t\t\t\tfor(int j=0; j<len; j++) {\n\t\t\t\t\t\tSystem.out.print(al.get(j)+\".\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t\tal.add(1);\n\t\t\t\t}else {\n\t\t\t\t\tfor (int j=len-1; j>-1; j--) {\n\t\t\t\t\t\tif (al.get(j)+1 == arr[i]) {\n\t\t\t\t\t\t\tfor(int k=0; k<j; k++) {\n\t\t\t\t\t\t\t\tSystem.out.print(al.get(k)+\".\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\t\t\t\tal.set(j, al.get(j)+1);\n\t\t\t\t\t\t\tal.subList(j+1, len).clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\ts.close();\n\t\t\n\n\t}\n", "complexity": "cubic"}
{"code": "\tpublic static void main(String[] args) throws IOException \n\t\tReader sc=new Reader();Solution G=new Solution();//MyMath mm=new MyMath();\n\t\tPrintWriter o = new PrintWriter(System.out);\n\t\tint t=1;t=sc.nextInt();\n\t\tint mod=(int)1e9+7;\n\t\tint x,x0,x1,x2;int y,y0,y1,y2;int s,s0,s1,s2;\n\t\tint n,m;int a[],b[],in[],in1[];\n\t\tlong k,l;boolean v[],b1,b2;String ss;char c1[];\n\t\t//long l;long a[]; \n\t\tArrayList<ArrayList<Integer>> ll=new ArrayList<>();\n\t\tArrayList<Integer> a1=new ArrayList<>();\n\t\tArrayList<Integer> a2=new ArrayList<>();\n\t\tPriorityQueue<Integer> pq1=new PriorityQueue<>();\n\t\tPriorityQueue<Integer> pq2=new PriorityQueue<>(Collections.reverseOrder());\n\t\tArrayDeque<Integer> dq=new ArrayDeque<>();\n\t\tTreeSet<Integer> h0=new TreeSet<>();\n\t\tTreeSet<Integer> h1=new TreeSet<>();\n\t\tTreeMap<Integer,Integer> h=new TreeMap<>();\n\t\ttry{\n\t\twhile (t-->0)\n\t\t{\n\t\t    n=sc.nextInt();a=sc.nextArr(n);b=new int[(int)1e4];\n\t\t    a1.add(a[0]);b[1]=a[0];\n\t\t    for (int i=1;i<n;i++)\n\t\t    {\n\t\t        G.func(o,a1);\n\t\t        x=a1.get(a1.size()-1);\n\t\t        if (a[i]==1)\n\t\t        {\n\t\t            a1.add(a[i]);\n\t\t            b[a1.size()]=a[i];\n\t\t        }\n\t\t        else if (a[i]==x+1)\n\t\t        {\n\t\t            a1.remove(a1.size()-1);\n\t\t            a1.add(a[i]);\n\t\t            b[a1.size()]=a[i];\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            while (a1.get(a1.size()-1)!=a[i]-1)\n\t\t            a1.remove(a1.size()-1);\n\t\t            a1.remove(a1.size()-1);\n\t\t            a1.add(a[i]);\n\t\t        }\n\t\t    }\n\t\t    G.func(o,a1);\n\t\t    //o.println();\n\t\t    //o.println(n);\n\t\t    //o.println();\n\t\t    //o.println();\n\t\t    //o.println(h);\n\t\t    //o.println(x2);\n\t\t    //o.println();\n\t\t    h0.clear();ll.clear();a1.clear();a2.clear();h1.clear();h.clear();pq1.clear();pq2.clear();\n\t\t}\n\t\t}\n\t\tcatch (Throwable e)\n\t\t{\n\t\t    e.printStackTrace();\n\t\t}\n\t\t//o.println(\"HI\");\n\t\t\n        o.flush();\n        o.close();\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws java.io.IOException {\n        Scanner sc=new Scanner(System.in);\n        int t=sc.nextInt();\n        while(t-->0)\n        {\n            int n=sc.nextInt();\n            int[] arr=new int[n];\n            for(int i=0;i<n;++i)\n            {\n                arr[i]=sc.nextInt();\n            }\n            ArrayList<Integer> cur=new ArrayList<>();\n            cur.add(1);\n            System.out.println(1);\n            for(int i=1;i<n;++i)\n            {\n                if(arr[i]==1)\n                {\n                    cur.add(1);\n                    pri(cur);\n                    continue;\n                }\n                int len=cur.size();\n                while(cur.get(len-1)!=arr[i]-1)\n                {\n                    cur.remove(len-1);\n                    len--;\n                }\n                cur.set(len-1,arr[i]);\n                pri(cur);\n                continue;\n            }\n        }\n    }\n", "complexity": "cubic"}
{"code": "    public static void main (String[] args) throws IOException {\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        int t=Integer.parseInt(br.readLine());\n        PrintWriter p=new PrintWriter(System.out);\n        while(t-->0)\n        {\n            //StringTokenizer st=new StringTokenizer(br.readLine());\n            int n=Integer.parseInt(br.readLine());\n            String a[]=new String[n];\n            for(int i=0;i<n;i++)\n            {\n                a[i]=br.readLine();\n            }\n            String pre=\"1\";\n            for(int i=1;i<n;i++)\n            {\n                if(a[i].equals(\"1\"))\n                {\n                    a[i]=pre+\".1\";\n                    pre=a[i];\n                    continue;\n                }\n                int li=pre.lastIndexOf('.');\n                while(li!=-1 && Integer.parseInt(pre.substring(li+1))+1!=Integer.parseInt(a[i]))\n                {\n                    pre=pre.substring(0,li);\n                    li=pre.lastIndexOf('.');\n                }\n                //li=pre.lastIndexOf('.');\n                if(li!=-1)\n                a[i]=pre.substring(0,li+1)+a[i];\n                pre=a[i];\n            }\n            for(int i=0;i<n;i++)\n            {\n                p.println(a[i]);\n            }\n            p.flush();\n        }\n\t}\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n        int t = Integer.parseInt(in.readLine());\n        while(t-- > 0) {\n            int n = Integer.parseInt(in.readLine());\n            int[] a = new int[n];\n            for(int i = 0; i < n; i++) {\n                a[i] = Integer.parseInt(in.readLine());\n            }\n            boolean[][] used = new boolean[n][n + 1];\n            boolean[] used2 = new boolean[n];\n            String[][] res = new String[n][2];\n            res[0][0] = \"1\";\n            res[0][1] = \"\";\n            for(int i = 1; i < n; i++) {\n                if(a[i] == 1) {\n                    for(int j = i - 1; j >= 0; j--) {\n                        if(!used[j][a[i]] && !used2[j]) {\n                            res[i][0] = res[j][0] + \".1\";\n                            res[i][1] = res[j][0];\n                            used[j][a[i]] = true;\n                            break;\n                        }\n                    }\n                }else {\n                    for(int j = i - 1; j >= 0; j--) {\n                        if(!used[j][a[i]] && !used2[j] && a[j] == a[i] - 1) {\n                            if(res[j][1].equals(\"\")) {\n                                res[i][0] = \"\" + a[i];\n                            }else {\n                                res[i][0] = res[j][1] + \".\" + a[i];\n                            }\n                            res[i][1] = res[j][1];\n                            used[j][a[i]] = true;\n                            break;\n                        }\n                        used2[j] = true;\n                    }\n                }\n            }\n            for(int i = 0; i < n; i++) {\n                out.println(res[i][0]);\n            }\n        }\n        in.close();\n        out.close();\n    }\n", "complexity": "cubic"}
{"code": "    public static void main(String[] args) throws Exception {\n        //https://i...content-available-to-author-only...e.com/ebRGa6\n        InputReader in = new InputReader(System.in);\n\n        FastWriter out = new FastWriter(System.out);\n\n\n//\n//        f[0] = 1;\n//        f[1] = 1;\n//        for (int i = 2; i < 200001; ++i) {\n//            f[i] = f[i-1] * i;\n//            f[i] %= 1000000007;\n//        }\n        int t = in.readInt();\n\n\n        while (t-- > 0) {\n\n            int n = in.readInt();\n\n            Stack<Integer> s = new Stack<>();\n\n            System.out.println(\"1\");\n            int i1 = in.readInt();\n            assert i1 == 1;\n            s.add(1);\n            for (int i = 1; i < n; ++i) {\n                int next = in.readInt();\n                if (next == 1) {\n                } else {\n                    while ((s.peek() + 1) != next) {\n                        s.pop();\n                    }\n                    s.pop();\n                }\n\n                s.add(next);\n                StringBuilder ans = new StringBuilder();\n                for (int c: s) {\n                    ans.append(c).append(\".\");\n                }\n                out.println(ans.substring(0, ans.length() - 1));\n                out.flush();\n            }\n\n        }\n\n    }\n", "complexity": "cubic"}
{"code": "      public static void main(String hi[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));\n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         long[] sums = new long[N];\n         ArrayList<Integer>[] boxes = new ArrayList[N];\n         for(int i=0; i < N; i++)\n         {\n            boxes[i] = new ArrayList<Integer>();\n            st = new StringTokenizer(infile.readLine());\n            int a = Integer.parseInt(st.nextToken());\n            while(a-->0)\n               boxes[i].add(Integer.parseInt(st.nextToken()));\n            for(int x: boxes[i])\n               sums[i] += x;\n         }\n         long lmaosum = 0L;\n         for(long x: sums)\n            lmaosum += x;\n         if(Math.abs(lmaosum)%N != 0)\n         {\n            System.out.println(\"No\");\n            return;\n         }\n         long target = lmaosum/N;\n         //fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck\n         HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n         for(int k=0; k < N; k++)\n            for(int x: boxes[k])\n               map.put((long)x, k);\n         HashMap<Long, Long> edges = new HashMap<Long, Long>();\n         for(int k=0; k < N; k++)\n            for(int x: boxes[k])\n            {\n               long nextval = target-sums[k]+x;\n               if(map.containsKey(nextval))\n                  edges.put((long)x, nextval);\n            }\n         Node[] dp = new Node[1<<N];\n         dp[0] = new Node(-69, -69, 0);\n         //precompute subsets ass\n         Node[] subsets = new Node[1<<N];\n         for(int b=0; b < N; b++)\n            for(int i=0; i < boxes[b].size(); i++)\n            {\n               if(!edges.containsKey((long)boxes[b].get(i)))\n                  continue;\n               long curr = edges.get((long)boxes[b].get(i));\n               //shit shit shit shit shit shit shit shit shit shit\n               int submask = 0;  boolean cyclic = true;\n               while(curr != boxes[b].get(i))\n               {\n                  int k = map.get(curr);\n                  if((submask&(1<<k)) > 0 || !edges.containsKey((long)curr))\n                  {\n                     cyclic = false;\n                     break;\n                  }\n                  submask |= 1<<k;\n                  curr = edges.get((long)curr);\n               }\n               submask |= (1<<b);\n               if(cyclic)\n                  subsets[submask] = new Node(-69, i, b);\n            }\n         for(int mask=1; mask < (1<<N); mask++)\n            outer:for(int submask=mask; submask > 0; submask=(submask-1)&mask)\n               if(dp[mask^submask] != null && subsets[submask] != null)\n               {\n                  dp[mask] = new Node(mask^submask, subsets[submask].dex, subsets[submask].start);\n                  break outer;\n               }\n         if(dp[(1<<N)-1] == null)\n            System.out.println(\"No\");\n         else\n         {\n            StringBuilder sb = new StringBuilder(\"Yes\\n\");\n            long[][] res = new long[N][2];\n            for(int i=0; i < N; i++)\n               res[i][1] = -1L;\n            int currmask = (1<<N)-1;\n            while(currmask != 0)\n            {\n               int submask = dp[currmask].mask;\n               int i = dp[currmask].dex;\n               int b = dp[currmask].start;\n               long nextval = target-sums[b]+boxes[b].get(i);\n               int curr = map.get(nextval);\n               res[map.get(nextval)][0] = nextval;\n               res[map.get(nextval)][1] = b;\n               while(true) //lol\n               {\n                  int lol = map.get(nextval);\n                  nextval = edges.get(nextval);\n                  res[map.get(nextval)][0] = nextval;\n                  if(res[map.get(nextval)][1] != -1)\n                     break;\n                  res[map.get(nextval)][1] = lol;\n               }\n               currmask = dp[currmask].mask;\n            }\n            for(int k=0; k < N; k++)\n               sb.append(res[k][0]+\" \").append(res[k][1]+1).append(\"\\n\");\n            System.out.print(sb);\n         }\n      }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tprocess();\n\n\t}\n", "complexity": "np"}
{"code": "      public static void main(String hi[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));\n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         long[] sums = new long[N];\n         ArrayList<Integer>[] boxes = new ArrayList[N];\n         for(int i=0; i < N; i++)\n         {\n            boxes[i] = new ArrayList<Integer>();\n            st = new StringTokenizer(infile.readLine());\n            int a = Integer.parseInt(st.nextToken());\n            while(a-->0)\n               boxes[i].add(Integer.parseInt(st.nextToken()));\n            for(int x: boxes[i])\n               sums[i] += x;\n         }\n         long lmaosum = 0L;\n         for(long x: sums)\n            lmaosum += x;\n         if(Math.abs(lmaosum)%N != 0)\n         {\n            System.out.println(\"No\");\n            return;\n         }\n         long target = lmaosum/N;\n         //fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck fuck\n         HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n         for(int k=0; k < N; k++)\n            for(int x: boxes[k])\n               map.put((long)x, k);\n         HashMap<Long, Long> edges = new HashMap<Long, Long>();\n         for(int k=0; k < N; k++)\n            for(int x: boxes[k])\n            {\n               long nextval = target-sums[k]+x;\n               if(map.containsKey(nextval))\n                  edges.put((long)x, nextval);\n            }\n         Node[] dp = new Node[1<<N];\n         dp[0] = new Node(-69, -69, 0);\n         //precompute subsets ass\n         Node[] subsets = new Node[1<<N];\n         for(int b=0; b < N; b++)\n            for(int i=0; i < boxes[b].size(); i++)\n            {\n               if(!edges.containsKey((long)boxes[b].get(i)))\n                  continue;\n               long curr = edges.get((long)boxes[b].get(i));\n               //shit shit shit shit shit shit shit shit shit shit\n               int submask = 0;  boolean cyclic = true;\n               while(curr != boxes[b].get(i))\n               {\n                  int k = map.get(curr);\n                  if((submask&(1<<k)) > 0 || !edges.containsKey((long)curr))\n                  {\n                     cyclic = false;\n                     break;\n                  }\n                  submask |= 1<<k;\n                  curr = edges.get((long)curr);\n               }\n               submask |= (1<<b);\n               if(cyclic)\n                  subsets[submask] = new Node(-69, i, b);\n            }\n         for(int mask=1; mask < (1<<N); mask++)\n            outer:for(int submask=mask; submask > 0; submask=(submask-1)&mask)\n               if(dp[mask^submask] != null && subsets[submask] != null)\n               {\n                  dp[mask] = new Node(mask^submask, subsets[submask].dex, subsets[submask].start);\n                  break outer;\n               }\n         if(dp[(1<<N)-1] == null)\n            System.out.println(\"No\");\n         else\n         {\n            StringBuilder sb = new StringBuilder(\"Yes\\n\");\n            long[][] res = new long[N][2];\n            for(int i=0; i < N; i++)\n               res[i][1] = -1L;\n            int currmask = (1<<N)-1;\n            while(currmask != 0)\n            {\n               int submask = dp[currmask].mask;\n               int i = dp[currmask].dex;\n               int b = dp[currmask].start;\n               long nextval = target-sums[b]+boxes[b].get(i);\n               int curr = map.get(nextval);\n               res[map.get(nextval)][0] = nextval;\n               res[map.get(nextval)][1] = b;\n               while(true)\n               {\n                  int lol = map.get(nextval);\n                  nextval = edges.get(nextval);\n                  res[map.get(nextval)][0] = nextval;\n                  if(res[map.get(nextval)][1] != -1)\n                     break;\n                  res[map.get(nextval)][1] = lol;\n               }\n               currmask = dp[currmask].mask;\n            }\n            for(int k=0; k < N; k++)\n               sb.append(res[k][0]+\" \").append(res[k][1]+1).append(\"\\n\");\n            System.out.print(sb);\n         }\n      }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFastScanner fs=new FastScanner();\n\t\tint nBoxes=fs.nextInt();\n\t\tlong[] sums=new long[nBoxes];\n\t\tHashMap<Long, Integer> boxOf=new HashMap<>();\n\t\tint[][] boxes=new int[nBoxes][];\n\t\tlong total=0;\n\t\tfor (int i=0; i<nBoxes; i++) {\n\t\t\tint size=fs.nextInt();\n\t\t\tboxes[i]=new int[size];\n\t\t\tfor (int j=0; j<size; j++) {\n\t\t\t\tboxes[i][j]=fs.nextInt();\n\t\t\t\tboxOf.put((long)boxes[i][j], i);\n\t\t\t\tsums[i]+=boxes[i][j];\n\t\t\t}\n\t\t\ttotal+=sums[i];\n\t\t}\n\t\tif (total%nBoxes!=0) {\n\t\t\tSystem.out.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlong target=total/nBoxes;\n\t\tint[][] masks=new int[nBoxes][];\n\t\tArrayList<Integer>[][] maskLoops=new ArrayList[nBoxes][];\n\t\tfor (int i=0; i<nBoxes; i++) {\n\t\t\tmasks[i]=new int[boxes[i].length];\n\t\t\tmaskLoops[i]=new ArrayList[boxes[i].length];\n\t\t\tfor (int j=0; j<maskLoops[i].length; j++) maskLoops[i][j]=new ArrayList<>();\n\t\t\t\n\t\t\tinner:for (int j=0; j<boxes[i].length; j++) {\n\t\t\t\tlong startVal=boxes[i][j], lookingFor=target-(sums[i]-startVal);\n\t\t\t\tmaskLoops[i][j].add((int)lookingFor);\n\t\t\t\tint mask=1<<i;\n\t\t\t\twhile (lookingFor!=startVal) {\n\t\t\t\t\tif (!boxOf.containsKey(lookingFor)) continue inner;\n\t\t\t\t\tint nextBox=boxOf.get(lookingFor);\n\n\t\t\t\t\t//if we have already used this box, it won't work\n\t\t\t\t\tif ((mask&(1<<nextBox))!=0) continue inner;\n\t\t\t\t\t\n\t\t\t\t\tmask|=1<<nextBox;\n\t\t\t\t\tlookingFor=target-(sums[nextBox]-lookingFor);\n\t\t\t\t\t/*if (lookingFor!=startVal) */maskLoops[i][j].add((int)lookingFor);\n\t\t\t\t}\n//\t\t\t\tSystem.out.println(\"Mask loops for box: \"+i+\" starting at \"+startVal+\" gives \"+);\n\t\t\t\t\n\t\t\t\t//otherwise it worked\n\t\t\t\tmasks[i][j]=mask;\n\t\t\t}\n\t\t}\n\t\t\n\t\tboolean[] possible=new boolean[1<<nBoxes];\n\t\tint[] maskFrom=new int[1<<nBoxes];\n\t\tint[] indexToUse=new int[1<<nBoxes];\n\t\tpossible[0]=true;\n\t\tfor (int mask=1; mask<1<<nBoxes; mask++) {\n\t\t\tint lowestBit=Integer.numberOfTrailingZeros(Integer.lowestOneBit(mask));\n\t\t\t/*\n\t\t\tfor (int i:masks[lowestBit]) {\n\t\t\t\tif ((mask&i)==i && possible[mask^i]) {\n\t\t\t\t\tpossible[mask]=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t\t\n\t\t\tfor (int i=0; i<masks[lowestBit].length; i++) {\n\t\t\t\tint m=masks[lowestBit][i];\n\t\t\t\tif ((mask&m)==m && possible[mask^m]) {\n\t\t\t\t\tpossible[mask]=true;\n\t\t\t\t\tmaskFrom[mask]=mask^m;\n\t\t\t\t\tindexToUse[mask]=i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!possible[(1<<nBoxes)-1]) {\n\t\t\tSystem.out.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t\tArrayList<ArrayList<Integer>> loops=new ArrayList<>();\n\t\tint mask=(1<<nBoxes)-1;\n\t\twhile (mask!=0) {\n//\t\t\tSystem.out.println(\"At mask: \"+Integer.toBinaryString(mask));\n\t\t\tint lowestBit=Integer.numberOfTrailingZeros(Integer.lowestOneBit(mask));\n\t\t\tloops.add(maskLoops[lowestBit][indexToUse[mask]]);\n\t\t\tmask=maskFrom[mask];\n\t\t}\n\t\t\n//\t\tSystem.out.println(\"Loops: \"+loops);\n\t\t\n\t\tint[] takeFrom=new int[nBoxes];\n\t\tint[] boxGiveTo=new int[nBoxes];\n\t\tfor (ArrayList<Integer> loop:loops) {\n\t\t\tfor (int i=0; i<loop.size(); i++) {\n\t\t\t\tint cur=loop.get(i), next=loop.get((i+1)%loop.size());\n\t\t\t\tint curBox=boxOf.get((long)cur), nextBox=boxOf.get((long)next);\n\t\t\t\ttakeFrom[nextBox]=next;\n\t\t\t\tboxGiveTo[nextBox]=curBox;\n\t\t\t}\n\t\t}\n\t\tfor (int i=0; i<nBoxes; i++) {\n\t\t\tSystem.out.println(takeFrom[i]+\" \"+(boxGiveTo[i]+1));\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tprocess();\n\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tprocess();\n\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 27);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tFS in = new FS();\n\t\tK = in.nextInt();\n\t\tsz = new int[K];\n\t\tvalToBucket = new HashMap<Long, Integer>();\n\t\tvs = new long[K][];\n\t\tcurSum = new long[K];\n\t\tsum = 0;\n\t\tfor(int i = 0; i < K; i++) {\n\t\t\tsz[i] = in.nextInt();\n\t\t\tvs[i] = new long[sz[i]];\n\t\t\tfor(int j = 0; j < sz[i]; j++) {\n\t\t\t\tlong v = in.nextLong();\n\t\t\t\tsum += v;\n\t\t\t\tcurSum[i] += v;\n\t\t\t\tvs[i][j] = v;\n\t\t\t\tvalToBucket.put(v, i);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(sum % K != 0) {\n\t\t\tSystem.out.println(\"No\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tsum /= K;\n\t\tmaskIfPick = new int[K][];\n\t\t//go through if i pick each node\n\t\tfor(int i = 0; i < K; i++) {\n\t\t\tmaskIfPick[i] = new int[sz[i]];\n\t\t\tfor(int j = 0; j < sz[i]; j++) {\n\t\t\t\t\n\t\t\t\tint mask = (1<<i);\n\t\t\t\tboolean works = false;\n\t\t\t\tlong curLookfor = (sum - (curSum[i]-vs[i][j]));\n\t\t\t\twhile(true) {\n\t\t\t\t\tif(!valToBucket.containsKey(curLookfor)) break;\n\t\t\t\t\tint nextBucket = valToBucket.get(curLookfor);\n\t\t\t\t\tif(nextBucket == i) {\n\t\t\t\t\t\tworks = curLookfor == vs[i][j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse if((mask & (1<<nextBucket)) > 0) break;\n\t\t\t\t\telse {\n\t\t\t\t\t\tmask |= (1<<nextBucket);\n\t\t\t\t\t\tcurLookfor = (sum - (curSum[nextBucket]-curLookfor));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(works) maskIfPick[i][j] = mask;\n\t\t\t}\n\t\t}\n//\t\tSystem.out.println(\"S= \"+sum);\n\t\tdp = new int[1<<K];\n\t\tArrays.fill(dp, -1);\n\t\tint res = go(0);\n\t\tif(res == 0) {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t\tpickId = new int[K];\n\t\t\tnewBox = new int[K];\n\t\t\tArrays.fill(pickId, -1);\n\t\t\tbuildback(0);\n\t\t\tfor(int i = 0; i < K; i++) {\n\t\t\t\tSystem.out.println(vs[i][pickId[i]]+\" \"+(newBox[i]+1));\n\t\t\t}\n\t\t}\n\t\t\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        int k = sc.nextInt();\n        int cur = 0;\n        a = new long[75007]; long sum = 0;\n        type = new int[75007];\n        map = new HashMap<>();\n        long [] typeSum = new long[k];\n        for (int i = 0; i < k; i++) {\n            int n = sc.nextInt(); long temp = sum;\n            for (int j = 0; j < n; j++) {\n                cur++;\n                a[cur] = sc.nextLong();\n                type[cur] = i;\n                map.put(a[cur], cur);\n                sum += a[cur];\n            }\n            typeSum[i] = sum - temp;\n        }\n        boolean notDiv = sum % k != 0;\n        long need = sum / k;\n        int n = cur;\n        adj = new ArrayList[n + 1];\n        for (int i = 1; i <= n; i++) adj[i] = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            long delta = need - typeSum[type[i]];\n            long find = a[i] + delta;\n            if (map.containsKey(find)) {\n                if (type[map.get(find)] != type[i] || delta == 0) adj[i].add(map.get(find));\n            }\n        }\n        vis = new int[n + 1];\n        good = new boolean[1 << k];\n        good[0] = true;\n        nodes = new HashSet[1 << k];\n        for (int i = 1; i <= n; i++) {\n            if (vis[i] == 0) {\n                cy = new HashSet<>();\n                boolean b = dfs(i);\n                int mask = 0;\n                for (Integer node: cy) {\n                    mask |= (1 << type[node]);\n                }\n                if (mask != 0) nodes[mask] = cy;\n                good[mask] = true;\n            }\n        }\n        dp = new int[1 << k];\n        Arrays.fill(dp, -1);\n        int possible = solve((1 << k) - 1);\n        if (possible == 1 && !notDiv) {\n            ArrayList<Integer> masks = dfs2((1 << k) - 1);\n\n            long [] num = new long[k];\n            int [] ret = new int[k];\n            for (Integer mask: masks) {\n                for (Integer node: nodes[mask]) {\n                    num[type[node]] = a[node];\n                    ret[type[adj[node].get(0)]] = type[node] + 1;\n                }\n            }\n            boolean good = true; Set<Integer> soFar = new HashSet<>();\n            for (int i = 0; i < ret.length; i++) {\n                if (soFar.contains(ret[i])) good = false;\n                soFar.add(ret[i]);\n            }\n            if (!good) {\n                out.println(\"No\");\n                out.close();\n                return;\n            }\n            out.println(\"Yes\");\n            for (int i = 0; i < k; i++) {\n                out.println(num[i] + \" \" + ret[i]);\n            }\n        } else {\n            out.println(\"No\");\n        }\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        Reader sc = new Reader();\n        int k = sc.nextInt();\n        int[][] buckets = new int[k][];\n        long[] bucketSum = new long[k];\n        Map<Integer, Integer> map = new HashMap<>(k * 10000);\n        long target = 0;\n        for (int i = 0; i < k; i++) {\n            int n = sc.nextInt();\n            int[] arr = new int[n];\n            for (int j = 0; j < n; j++) {\n                arr[j] = sc.nextInt();\n                target += arr[j];\n                map.put(arr[j], i);\n                bucketSum[i] += arr[j];\n            }\n            buckets[i] = arr;\n        }\n        if ((target % k) != 0) {\n            System.out.println(\"No\");\n            return;\n        } else {\n            target /= k;\n        }\n\n        int[] bitmask = new int[1 << (k )];\n        Arrays.fill(bitmask, -1);\n\n\n        for (int i = 0; i < k; i++) {\n            for (int j = 0; j < buckets[i].length; j++) {\n                int start = buckets[i][j];\n                int next = (int) (target - bucketSum[i]) + start;\n\n                Set<Integer> visited = new HashSet<>();\n                Set<Integer> visitedBuckets = new HashSet<>();\n\n                visited.add(start);\n                visitedBuckets.add(i);\n                int bitset = 1 << i;\n\n                while (map.containsKey(next)) {\n                    int bucket = map.get(next);\n                    if (start == next) {\n                        bitmask[bitset] = start;\n                        break;\n                    } else if (visited.contains(next)) {\n                        break;\n                    } else if (visitedBuckets.contains(bucket)) {\n                        break;\n                    }\n                    visited.add(next);\n                    visitedBuckets.add(bucket);\n                    next = (int) (target - bucketSum[bucket]) + next;\n                    bitset |= 1 << bucket;\n                }\n            }\n        }\n\n        boolean[] dp = new boolean[1 << (k ) ];\n        Arrays.fill(dp, false);\n        int[] build = new int[1 << k];\n        Arrays.fill(build, -1);\n\n        for (int i = 0; i < dp.length; i++) {\n            dp[i] = bitmask[i] != -1;\n        }\n        for (int m = 0; m < (1 << k); m++) {\n            if (!dp[m]) {\n                for (int s = m; s != 0; s = (s - 1) & m) {\n                    if (dp[s] && dp[(m ^ s)])   {\n                        dp[m] = true;\n                        build[m] = s;\n                        break;\n                    }\n                }\n            }\n        }\n        System.out.println(dp[dp.length - 1] ? \"Yes\" : \"No\");\n        ArrayList<Integer> path = new ArrayList<>();\n        rec(path, build, bitmask, (1 << k) - 1);\n\n        int[] picked = new int[k];\n        int[] out = new int[k];\n        if (dp[dp.length - 1]) {\n            for (int i : path) {\n                int prev = i;\n                int next = (int) (target - bucketSum[map.get(prev)]) + prev;\n                picked[map.get(next)] = next;\n                out[map.get(next)] = map.get(prev);\n                while (next != i) {\n                    int t = next;\n                    next = (int) (target - bucketSum[map.get(next)]) + next;\n                    prev = t;\n                    out[map.get(next)] = map.get(prev);\n                    picked[map.get(next)] = next;\n\n\n                }\n            }\n            for (int i = 0; i < out.length; i++) {\n                System.out.println((picked[i]) + \" \" + (out[i] + 1));\n            }\n        }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new a(), \"process\", 1<<26).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception { new C().run(); }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tprocess();\n\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\t\n\t\t\n\t\tint N = sc.nextInt();\n\t\tArrayList<Integer>[] l = new ArrayList[N];\n\t\tHashMap<Long,Integer> map = new HashMap<Long,Integer>();\n\t\tlong sum = 0;\n\t\tlong[] s = new long[N];\n\t\tfor(int i=0;i<N;i++) {\n\t\t\tl[i] = new ArrayList<Integer>();\n\t\t\tint n = sc.nextInt();\n\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\tint a = sc.nextInt();\n\t\t\t\tmap.put((long)a, i);\n\t\t\t\ts[i] += a;\n\t\t\t\tsum += a;\n\t\t\t\tl[i].add(a);\n\t\t\t}\n\t\t}\n\t\tif(Math.abs(sum)%N!=0) {\n\t\t\tSystem.out.println(\"NO\");\n\t\t\treturn;\n\t\t}\n\t\tlong make = sum/N;\n\t\tboolean[] dp = new boolean[(1<<N)];\n\t\tint[] first = new int[(1<<N)];\n\t\tint[] bef = new int[(1<<N)];\n\n\t\tArrays.fill(first,mod);\n\t\tfor(int i=0;i<N;i++) {\n\t\t\tfor(int a:l[i]) {\n\t\t\t\tint used = 0;\n\t\t\t\tboolean f = true;\n\t\t\t\tlong now = a;\n\t\t\t\tint see = i;\n\t\t\t\twhile(true) {\n\t\t\t\t\tlong next = make-(s[see]-now);\n\t\t\t\t\t\n\t\t\t\t\tif(next==a) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(!map.containsKey(next)) {\n\t\t\t\t\t\tf = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tint k = map.get(next);\n\t\t\t\t\t\tif(mp.contains(used,k)&&k!=i) {\n\t\t\t\t\t\t\tf = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tused = mp.bitadd(used,k);\n\t\t\t\t\t\t\tnow = next;\n\t\t\t\t\t\t\tsee = k;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(f) {\n\t\t\t\t\tdp[mp.bitadd(used,i)] = true;\n\t\t\t\t\tfirst[mp.bitadd(used,i)] = a;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tdp[0] = true;\n\t\tfor(int i=1;i<(1<<N);i++) {\n\t\t\tfor(int j=i;j>0;j=(j-1)&i) {\n\t\t\t\tif(dp[i^j]&&dp[j]) {\n\t\t\t\t\tdp[i]=true;\n\t\t\t\t\tbef[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!dp[(1<<N)-1]) {\n\t\t\tSystem.out.println(\"NO\");\n\t\t}else {\n\t\t\tSystem.out.println(\"YES\");\n\t\t\tArrayDeque<Integer> q = new ArrayDeque<Integer>();\n\t\t\tint[] ans1 = new int[N];\n\t\t\tint[] ans2 = new int[N];\n\t\t\tq.add((1<<N)-1);\n\t\t\twhile(!q.isEmpty()) {\n\t\t\t\tint Q = q.poll();\n\t\t\t\tif(first[Q]==mod) {\n\t\t\t\t\tq.add(bef[Q]);\n\t\t\t\t\tq.add(Q^bef[Q]);\n\t\t\t\t}else {\n\t\t\t\t\t\n\t\t\t\t\tint a = first[Q];\n\t\t\t\t\tlong now = a;\n\t\t\t\t\tint befo = map.get((long)a);\n\t\t\t\t\twhile(true) {\n\t\t\t\t\t\tlong next = make-(s[befo]-now);\n\t\t\t\t\t\tif(next==a) {\n\t\t\t\t\t\t\tint k = map.get(next);\n\t\t\t\t\t\t\tans1[k] = (int)next;\n\t\t\t\t\t\t\tans2[k] = befo;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint k = map.get(next);\n\t\t\t\t\t\tans1[k] = (int)next;\n\t\t\t\t\t\tans2[k] = befo;\n\t\t\t\t\t\tnow = next;\n\t\t\t\t\t\tbefo = k;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<N;i++) {\n\t\t\t\tSystem.out.println(ans1[i]+\" \"+(ans2[i]+1));\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\n\t}\n", "complexity": "np"}
{"code": "    /*I/O, and other boilerplate*/ @Override public void run() { try { in = new BufferedReader(new InputStreamReader(System.in));out = new PrintWriter(System.out);sc = new FastScanner(in);if (multiple) { int q = sc.nextInt();for (int i = 0; i < q; i++) solve(); } else solve(); System.out.print(ANS); } catch (Throwable uncaught) { Main.uncaught = uncaught; } finally { out.close(); }} public static void main(String[] args) throws Throwable{ Thread thread = new Thread(null, new Main(), \"\", (1 << 26));thread.start();thread.join();if (Main.uncaught != null) {throw Main.uncaught;} } static Throwable uncaught; BufferedReader in; FastScanner sc; PrintWriter out; } class FastScanner { BufferedReader in; StringTokenizer st; public FastScanner(BufferedReader in) {this.in = in;}public String nextToken() throws Exception { while (st == null || !st.hasMoreTokens()) { st = new StringTokenizer(in.readLine()); }return st.nextToken(); }public int nextInt() throws Exception { return Integer.parseInt(nextToken()); }public long nextLong() throws Exception { return Long.parseLong(nextToken()); }public double nextDouble() throws Exception { return Double.parseDouble(nextToken()); }\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[]) throws Exception\n\t\tnew Thread(null, new Main(),\"Main\",1<<26).start();\n\t}\t\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\t\tFastScanner fastScanner = new FastScanner();\n        int proximoInt = fastScanner.nextInt();\n        double proximoDouble = fastScanner.nextInt();\n        long[] graph = new long[proximoInt];\n        for(Integer i = 0; i < proximoInt; i++) {\n            for(Integer j =0; j < proximoInt; j++) {\n                Integer val = fastScanner.nextInt();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t graph[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n\n        int szLeft = proximoInt/2;\n        int szRight = proximoInt - szLeft;\n\n        int[] dp = new int[1 << szLeft];\n        int maxMask = 1 << szLeft;\n\n        for(int mask = 1; mask <maxMask; mask++) {\n            int curMask = mask;\n\n            for(int j = 0; j < szLeft; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= graph[j + szRight] >> szRight;\n                    dp[mask] = Math.max(dp[mask], dp[mask ^ (1 << j)]);\n                }\n            }\n            if (mask == curMask) {\n                dp[mask] = Math.max(dp[mask],Integer.bitCount(mask));\n            }\n        }\n        int ans = 0;\n        int rmaxMask = 1 << szRight;\n        for(int mask = 0; mask < rmaxMask; mask++) {\n            int curMask = mask;\n            int oMask = maxMask -1;\n            for(int j = 0; j < szRight; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= (graph[j] & (rmaxMask-1));\n                    oMask &= graph[j] >> szRight;\n                }\n            }\n            if (curMask != mask) continue;\n            ans = Math.max(ans, Integer.bitCount(mask) + dp[oMask]);\n        }\n        proximoDouble/=ans;\n        saida.println(proximoDouble * proximoDouble * (ans * (ans-1))/2);\n        saida.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        BufferedReader bff=new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter wff=new PrintWriter(System.out);\n        String[] st=bff.readLine().split(\" \");\n        int V=Integer.parseInt(st[0]);\n        int K=Integer.parseInt(st[1]);\n        BronKerbosch bk=new BronKerbosch(V);\n        for(int i=0;i<V;i++){\n            st=bff.readLine().split(\" \");\n            for(int j=0;j<V;j++){\n                if(st[j].equals(\"1\")){\n                    bk.anadir(i,j);\n                }\n            }\n        }\n        long num=bk.numeroCamarilla();\n        wff.printf(\"%.12f\\n\", num * (num - 1.0) / 2 * K / num * K / num);\n        wff.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        MyInput in = new MyInput(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception { new E2().run(); }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\t\tEscanear fastScanner = new Escanear();\n        int proximoInt = fastScanner.nextInt();\n        double proximoDouble = fastScanner.nextInt();\n        long[] graph = new long[proximoInt];\n        for(Integer i = 0; i < proximoInt; i++) {\n            for(Integer j =0; j < proximoInt; j++) {\n                Integer val = fastScanner.nextInt();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t graph[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n\n        int szLeft = proximoInt/2;\n        int szRight = proximoInt - szLeft;\n\n        int[] dp = new int[1 << szLeft];\n        int maxMask = 1 << szLeft;\n\n        for(int mask = 1; mask <maxMask; mask++) {\n            int curMask = mask;\n\n            for(int j = 0; j < szLeft; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= graph[j + szRight] >> szRight;\n                    dp[mask] = Math.max(dp[mask], dp[mask ^ (1 << j)]);\n                }\n            }\n            if (mask == curMask) {\n                dp[mask] = Math.max(dp[mask],Integer.bitCount(mask));\n            }\n        }\n        int ans = 0;\n        int rmaxMask = 1 << szRight;\n        for(int mask = 0; mask < rmaxMask; mask++) {\n            int curMask = mask;\n            int oMask = maxMask -1;\n            for(int j = 0; j < szRight; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= (graph[j] & (rmaxMask-1));\n                    oMask &= graph[j] >> szRight;\n                }\n            }\n            if (curMask != mask) continue;\n            ans = Math.max(ans, Integer.bitCount(mask) + dp[oMask]);\n        }\n        proximoDouble/=ans;\n        saida.println(proximoDouble * proximoDouble * (ans * (ans-1))/2);\n        saida.flush();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[]args) throws Exception\n\t\t\tint n=ni();\n\t\t\tdouble ke=ni();\n\t\t\tboolean[][]a=new boolean[n][n];\n\t\t\tfor(int i=0; i<n; i++)\n\t\t\t\tfor(int j=0; j<n; j++)\n\t\t\t\t\ta[i][j]=ni()==0;\n\t\t\tint left=n/2;\n\t\t\tint[]ldp=new int[1<<left];\n\t\t\tint[]rdp=new int[1<<(n-left)];\n\t\t\tint[]pow=new int[25];\n\t\t\tpow[0]=1;\n\t\t\tfor(int i=1; i<25; i++)\n\t\t\t\tpow[i]=pow[i-1]<<1;\n\t\t\tfor(int i=0; i<pow[left]; i++)\n\t\t\t\tou:for(int j=0; j<left; j++)\n\t\t\t\t\tif((i>>j)%2==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tint te=i;\n\t\t\t\t\t\tfor(int k=0; te>0; k++,te>>=1)\n\t\t\t\t\t\t\tif(a[j][k]&&(te&1)!=0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tldp[i+pow[j]]=max(ldp[i+pow[j]],ldp[i]);\n\t\t\t\t\t\t\t\tcontinue ou;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tldp[i+pow[j]]=max(ldp[i+pow[j]],ldp[i]+1);\n\t\t\t\t\t}\n\t\t\tint right=n-left;\n\t\t\tfor(int i=0; i<pow[right]; i++)\n\t\t\t\tou:for(int j=0; j<right; j++)\n\t\t\t\t\tif((i>>j)%2==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tint lul=j+left;\n\t\t\t\t\t\tint te=i;\n\t\t\t\t\t\tfor(int k=left; te>0; k++,te>>=1)\n\t\t\t\t\t\t\tif(a[lul][k]&&(te&1)!=0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trdp[i+pow[j]]=max(rdp[i+pow[j]],rdp[i]);\n\t\t\t\t\t\t\t\tcontinue ou;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\trdp[i+pow[j]]=max(rdp[i+pow[j]],rdp[i]+1);\n\t\t\t\t\t}\n\t\t\tint maxi=0;\n\t\t\tfor(int i=0; i<pow[left]; i++)\n\t\t\t{\n\t\t\t\tint lol=0;\n\t\t\t\tint te=i;\n\t\t\t\tfor(int j=0; te>0; j++,te>>=1)\n\t\t\t\t\tif((te&1)!=0)\n\t\t\t\t\t\tfor(int k=0; k<right; k++)\n\t\t\t\t\t\t\tif(a[j][k+left])\n\t\t\t\t\t\t\t\tlol|=pow[k];\n\t\t\t\tmaxi=max(maxi,ldp[i]+rdp[pow[right]-1-lol]);\n\t\t\t}\n\t\t\tpr((ke*ke*(maxi-1))/(2*maxi));\n\t\tSystem.out.println(output);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\t\tEscanear escanear = new Escanear();\n\t\tint proximoInt = escanear.proximoNum();\n        long[] aux = new long[proximoInt];\n        double proximoDouble = escanear.proximoNum();\n        for(Integer i = 0; i < proximoInt; i++) {\n            for(Integer j =0; j < proximoInt; j++) {\n                Integer val = escanear.proximoNum();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t aux[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n        int esquerda = proximoInt/2;\n        int direita = proximoInt - esquerda;\n\t\tint maiorMascara = 1 << esquerda;\n\t\tint[] depois = new int[1 << esquerda];\n\t\tInteger mascara = 1;\n\t\twhile (mascara < maiorMascara) {\n\t\t\tint mascaraAtual = mascara;\n\n            for(int j = 0; j < esquerda; j++) {\n                if (((1 << j) & mascara) > 0) {\n                    mascaraAtual &= aux[j + direita] >> direita;\n                    depois[mascara] = Math.max(depois[mascara], depois[mascara ^ (1 << j)]);\n                }\n            }\n            if (mascara == mascaraAtual) {\n                depois[mascara] = Math.max(depois[mascara],Integer.bitCount(mascara));\n\t\t\t}\n\t\t\tmascara++;\n\t\t}\n        // for(int mascara = 1; mascara < maiorMascara; mascara++) {\n        //     int mascaraAtual = mascara;\n\n        //     for(int j = 0; j < esquerda; j++) {\n        //         if (((1 << j) & mascara) > 0) {\n        //             mascaraAtual &= aux[j + direita] >> direita;\n        //             depois[mascara] = Math.max(depois[mascara], depois[mascara ^ (1 << j)]);\n        //         }\n        //     }\n        //     if (mascara == mascaraAtual) {\n        //         depois[mascara] = Math.max(depois[mascara],Integer.bitCount(mascara));\n        //     }\n        // }\n        int auxiliar = 0;\n        int mascaraMaxima = 1 << direita;\n        for(int masc = 0; masc < mascaraMaxima; masc++) {\n            int mascaraCorrente = masc;\n            int mascaraValor = maiorMascara -1;\n            for(int j = 0; j < direita; j++) {\n                if (((1 << j) & masc) > 0) {\n                    mascaraCorrente &= (aux[j] & (mascaraMaxima-1));\n                    mascaraValor &= aux[j] >> direita;\n                }\n            }\n            if (mascaraCorrente != masc) continue;\n            auxiliar = Math.max(auxiliar, Integer.bitCount(masc) + depois[mascaraValor]);\n        }\n        proximoDouble/=auxiliar;\n        saida.println(proximoDouble * proximoDouble * (auxiliar * (auxiliar-1))/2);\n        saida.flush();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner sc=new Scanner(System.in);\n\t\tn=Integer.parseInt(sc.next());\n\t\ta=new int [n+10][n+10];\n\t\tint cap=Integer.parseInt(sc.next());\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tfor(int j=1;j<=n;++j)\n\t\t\t\ta[i][j]=Integer.parseInt(sc.next());\n\t\tint m=(n+1)>>1;\n\t\tisClique=new boolean [1<<m];\n\t\tArrays.fill(isClique,false);\n\t\tDFS1(1,m,0);\n\t\tmaxClique=new int [1<<(n-m)];\n\t\tArrays.fill(maxClique,0);\n\t\tDFS2(m+1,n,m+1,0);\n\t\tfor(int i=1;i<1<<(n-m);++i)\n\t\t\tfor(int j=m+1;j<=n;++j)\n\t\t\t\tif((i>>(j-m-1)&1)==1)\n\t\t\t\t\tmaxClique[i]=Math.max(maxClique[i],maxClique[i-(1<<(j-m-1))]);\n\t\tint ans=0,tmp[]=new int [m+10];\n\t\tfor(int i=0;i<1<<m;++i)\n\t\t\tif(isClique[i])\n\t\t\t{\n\t\t\t\tint mask=0,cnt=0;\n\t\t\t\tfor(int j=1;j<=m;++j)\n\t\t\t\t\tif((i>>(j-1)&1)==1)\n\t\t\t\t\t\ttmp[++cnt]=j;\n\t\t\t\tfor(int j=m+1;j<=n;++j)\n\t\t\t\t{\n\t\t\t\t\tboolean mark=true;\n\t\t\t\t\tfor(int k=1;k<=cnt;++k)\n\t\t\t\t\t\tif(a[j][tmp[k]]==0)\n\t\t\t\t\t\t\tmark=false;\n\t\t\t\t\tif(mark)\n\t\t\t\t\t\tmask|=1<<(j-m-1);\n\t\t\t\t}\n\t\t\t\tans=Math.max(ans,cnt+maxClique[mask]);\n\t\t\t}\n\t\tSystem.out.printf(\"%.9f\\n\",cap*cap*(ans-1)/2.0/ans);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n//\t\tfor (int i = 1; i <= n; i++)\n//\t\t\tSystem.err.printf(\"%d %.12f\\n\",i, (k*k*((i-1)/(2.0*i))));\n\t\tadjMatrix = new boolean[n][n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\tadjMatrix[i][j] = sc.nextInt() == 1;\n\t\t\n\t\tlong[] edges = new long[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tlong val = 0;\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\tif(adjMatrix[i][j] || i == j)\n\t\t\t\t\tval |= 1l<<j;\n\t\t\tedges[i] = val;\n\t\t}\n\t\t\n\t\tint h = n/2;\n\t\t\n\t\tint[] cliques = new int[1<<h];\n\t\tfor (int i = 1; i < 1<<h; i++)\n\t\t{\n\t\t\tint nodes = i;\n\t\t\tfor (int j = 0; j < h; j++)\n\t\t\t\tif((i & (1 << j)) != 0)\n\t\t\t\t\tnodes &= edges[j];\n\t\t\tif(nodes == i)\n\t\t\t\tcliques[i] = Integer.bitCount(i);\n\t\t}\n\t\t\n\t\tfor (int i = 1; i < 1<<h; i++)\n\t\t\tfor (int j = 0; j < h; j++)\n\t\t\t\tif((i & (1 << j)) != 0)\n\t\t\t\t\tcliques[i] = Math.max(cliques[i], cliques[i ^ (1<<j)]);\n\t\t\n\t\tint max = 0;\n\t\tfor (int i = 0; i < cliques.length; i++)\n\t\t\tmax = Math.max(max, cliques[i]);\n\t\tfor (int i = 1; i < 1<<(n-h); i++)\n\t\t{\n\t\t\tlong all = -1l;\n\t\t\tlong tmp = (1l*i)<<h;\n\t\t\tfor (int j = h; j < n; j++)\n\t\t\t\tif((tmp & (1l << j)) != 0)\n\t\t\t\t\tall &= edges[j];\n\t\t\tlong node = all&tmp;\n\t\t\tif(node != tmp)\n\t\t\t\tcontinue;\n\t\t\tint connected = (int)(all & ((1<<h)-1));\n\t\t\tmax = Math.max(max, cliques[connected] + Integer.bitCount(i));\n\t\t}\n\t\t\n\t\tSystem.out.printf(\"%.12f\\n\", (k*k*((max-1)/(2.0*max))));\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        (new E()).solve(in);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {new Thread(null, new Runnable() { public void run() {try {\n\t\tsol();\n\t} catch (Throwable e) {\n\t\t\n\t\te.printStackTrace();\n\t}}}, \"2\",1<<26).start();}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\t\tEscanear escanear = new Escanear();\n        int proximoInt = escanear.proximoNum();\n        double proximoDouble = escanear.proximoNum();\n        long[] aux = new long[proximoInt];\n        for(Integer i = 0; i < proximoInt; i++) {\n            for(Integer j =0; j < proximoInt; j++) {\n                Integer val = escanear.proximoNum();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t aux[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n\n        int esquerda = proximoInt/2;\n        int direita = proximoInt - esquerda;\n\n        int[] depois = new int[1 << esquerda];\n        int maiorMascara = 1 << esquerda;\n\n        for(int mascara = 1; mascara <maiorMascara; mascara++) {\n            int mascaraAtual = mascara;\n\n            for(int j = 0; j < esquerda; j++) {\n                if (((1 << j) & mascara) > 0) {\n                    mascaraAtual &= aux[j + direita] >> direita;\n                    depois[mascara] = Math.max(depois[mascara], depois[mascara ^ (1 << j)]);\n                }\n            }\n            if (mascara == mascaraAtual) {\n                depois[mascara] = Math.max(depois[mascara],Integer.bitCount(mascara));\n            }\n        }\n        int auxiliar = 0;\n        int mascaraMaxima = 1 << direita;\n        for(int mascara = 0; mascara < mascaraMaxima; mascara++) {\n            int mascaraCorrente = mascara;\n            int mascaraValor = maiorMascara -1;\n            for(int j = 0; j < direita; j++) {\n                if (((1 << j) & mascara) > 0) {\n                    mascaraCorrente &= (aux[j] & (mascaraMaxima-1));\n                    mascaraValor &= aux[j] >> direita;\n                }\n            }\n            if (mascaraCorrente != mascara) continue;\n            auxiliar = Math.max(auxiliar, Integer.bitCount(mascara) + depois[mascaraValor]);\n        }\n        proximoDouble/=auxiliar;\n        saida.println(proximoDouble * proximoDouble * (auxiliar * (auxiliar-1))/2);\n        saida.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\t\tEscanear escanear = new Escanear();\n\t\tint proximoInt = escanear.proximoNum();\n        long[] aux = new long[proximoInt];\n        double proximoDouble = escanear.proximoNum();\n        for(Integer i = 0; i < proximoInt; i++) {\n            for(Integer j =0; j < proximoInt; j++) {\n                Integer val = escanear.proximoNum();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t aux[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n        int esquerda = proximoInt/2;\n        int direita = proximoInt - esquerda;\n\t\tint maiorMascara = 1 << esquerda;\n\t\tint[] depois = new int[1 << esquerda];\n\t\tInteger mascara = 1;\n\t\twhile (mascara < maiorMascara) {\n\t\t\tint mascaraAtual = mascara;\n            for(int j = 0; j < esquerda; j++) {\n                if (((1 << j) & mascara) > 0) {\n                    mascaraAtual &= aux[j + direita] >> direita;\n                    depois[mascara] = Math.max(depois[mascara], depois[mascara ^ (1 << j)]);\n                }\n            }\n            if (mascara.equals(mascaraAtual)) {\n                depois[mascara] = Math.max(depois[mascara],Integer.bitCount(mascara));\n\t\t\t}\n\t\t\tmascara++;\n\t\t}\n        int auxiliar = 0;\n        int mascaraMaxima = 1 << direita;\n        for(int i = 0; i < mascaraMaxima; i++) {\n            int mascaraCorrente = i;\n            int mascaraValor = maiorMascara -1;\n            for(int j = 0; j < direita; j++) {\n                if (((1 << j) & i) > 0) {\n                    mascaraCorrente &= (aux[j] & (mascaraMaxima-1));\n                    mascaraValor &= aux[j] >> direita;\n                }\n            }\n            if (mascaraCorrente != i) continue;\n            auxiliar = Math.max(auxiliar, Integer.bitCount(i) + depois[mascaraValor]);\n        }\n        proximoDouble/=auxiliar;\n        saida.println(proximoDouble * proximoDouble * (auxiliar * (auxiliar-1))/2);\n        saida.flush();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tst = new StringTokenizer(reader.readLine());\n\t\tn = Integer.parseInt(st.nextToken());\n\t\tk = Integer.parseInt(st.nextToken());\n\n\t\tgraph = new boolean[n][n];\n\t\tdp = new int[1 << (n / 2)];\n\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tst = new StringTokenizer(reader.readLine());\n\n\t\t\tfor (int j = 0; j < n; ++j)\n\t\t\t\tgraph[i][j] = st.nextToken().equals(\"1\");\n\t\t}\n\n\t\treader.close();\n\n\t\t/* fill dp for first subset */\n\t\tint size1 = n / 2;\n\t\tint border = 1 << size1;\n\t\tfor (int mask = 1; mask < border; ++mask) {\n\t\t\t/* check if mask is complete graph */\n\n\t\t\tboolean isComplete = true;\n\t\t\tfor (int i = 0; i < size1; ++i) {\n\t\t\t\tif (((mask >> i) & 1) == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tfor (int j = i + 1; j < size1; ++j) {\n\t\t\t\t\tif (((mask >> j) & 1) == 0)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (!graph[i][j]) {\n\t\t\t\t\t\tisComplete = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!isComplete)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (isComplete)\n\t\t\t\tdp[mask] = Integer.bitCount(mask);\n\t\t}\n\n\t\tfor (int mask = 1; mask < border; ++mask) {\n\t\t\tfor (int i = 0; i < size1; ++i) {\n\t\t\t\tif (((mask >> i) & 1) == 0) {\n\t\t\t\t\tdp[mask | (1 << i)] = Math.max(dp[mask | (1 << i)], dp[mask]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/* process second subset */\n\t\tmaxCliqueSize = 1;\n\t\tint size2 = n - n /2;\n\t\tborder = (1 << size2);\n\n\t\tfor (int mask = 0; mask < border; ++mask) {\n\n\t\t\tboolean isComplete = true;\n\t\t\tfor (int i = 0; i < size2; ++i) {\n\t\t\t\tif (((mask >> i) & 1) == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tfor (int j = i + 1; j < size2; ++j) {\n\t\t\t\t\tif (((mask >> j) & 1) != 0 && !graph[i + size1][j + size1]) {\n\t\t\t\t\t\tisComplete = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!isComplete)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!isComplete)\n\t\t\t\tcontinue;\n\n\t\t\tint mask1 = (1 << size1) - 1;\n\n\t\t\tfor (int i = 0; i < size2; ++i) {\n\t\t\t\tif (((mask >> i) & 1) == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tfor (int j = 0; j < size1; ++j) {\n\t\t\t\t\tif (!graph[j][i + size1] && ((mask1 >> j) & 1) != 0)\n\t\t\t\t\t\tmask1 ^= (1 << j);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmaxCliqueSize = Math.max(maxCliqueSize, dp[mask1] + Integer.bitCount(mask));\n\t\t}\n\n\t\t// System.out.println(maxCliqueSize);\n\t\tdouble answer = (1.0 * k * k * (maxCliqueSize - 1) / (2 * maxCliqueSize));\n\t\tSystem.out.printf(\"%.15f\", answer);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out, false);\n        int n = scanner.nextInt();\n        double k = scanner.nextInt();\n        long[] graph = new long[n];\n        for(Integer i = 0; i < n; i++) {\n            for(Integer j =0; j < n; j++) {\n                Integer val = scanner.nextInt();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t graph[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n\n        int szLeft = n/2;\n        int szRight = n - szLeft;\n\n        int[] dp = new int[1 << szLeft];\n        int maxMask = 1 << szLeft;\n\n        for(int mask = 1; mask <maxMask; mask++) {\n            int curMask = mask;\n\n            for(int j = 0; j < szLeft; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= graph[j + szRight] >> szRight;\n                    dp[mask] = Math.max(dp[mask], dp[mask ^ (1 << j)]);\n                }\n            }\n            if (mask == curMask) {\n                dp[mask] = Math.max(dp[mask],Integer.bitCount(mask));\n            }\n        }\n        int ans = 0;\n        int rmaxMask = 1 << szRight;\n        for(int mask = 0; mask < rmaxMask; mask++) {\n            int curMask = mask;\n            int oMask = maxMask -1;\n            for(int j = 0; j < szRight; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= (graph[j] & (rmaxMask-1));\n                    oMask &= graph[j] >> szRight;\n                }\n            }\n            if (curMask != mask) continue;\n            ans = Math.max(ans, Integer.bitCount(mask) + dp[oMask]);\n        }\n        k/=ans;\n        out.println(k * k * (ans * (ans-1))/2);\n        out.flush();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc=new Scanner(System.in);\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t\tint n=sc.nextInt(),k=sc.nextInt();\n\t\tboolean [][]adj=new boolean[n][n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t\tadj[i][j]=sc.nextInt()==1;\n\t\tint n1=n/2,n2=n-n1;\n\t\tint []clique=new int [1<<n1];\n\t\tfor(int msk=1;msk<1<<n1;msk++)\n\t\t{\n\t\t\tboolean ok=true;\n\t\t\tfor(int i=0;i<n1;i++) if((msk & 1<<i) !=0)\n\t\t\t\tfor(int j=i+1;j<n1;j++)\n\t\t\t\t\tif((msk & 1<<j) !=0 && !adj[i][j])\n\t\t\t\t\t\tok=false;\n\t\t\tif(ok)\n\t\t\t\tclique[msk]=Integer.bitCount(msk);\n\t\t}\n\t\t\n\t\tint []edges=new int [n2];\n\t\tfor(int i=0;i<n2;i++)\n\t\t{\n\t\t\tint msk=0;\n\t\t\tfor(int j=0;j<n1;j++)\n\t\t\t\tif(adj[i+n1][j])\n\t\t\t\t\tmsk|=1<<j;\n\t\t\tedges[i]=msk;\n\t\t}\n\t\tint max=0;\n\t\tfor(int msk=1;msk<1<<n1;msk++)\n\t\t\tfor(int i=0;i<n1;i++)\n\t\t\t\tif((msk & 1<<i) !=0)\n\t\t\t\t\tmax=Math.max(max, clique[msk]=Math.max(clique[msk], clique[msk^(1<<i)]));\n\t\t\n\t\tfor(int msk=1;msk<1<<n2;msk++)\n\t\t{\n\t\t\tint all=(1<<n1)-1;\n\t\t\tfor(int j=0;j<n2;j++)\n\t\t\t\tif((msk & 1<<j) !=0)\n\t\t\t\t\tall &=edges[j];\n\t\t\tboolean ok=true;\n\t\t\tfor(int i=0;i<n2;i++) if((msk & 1<<i) !=0)\n\t\t\t\tfor(int j=i+1;j<n2;j++)\n\t\t\t\t\tif((msk & 1<<j) !=0 && !adj[i+n1][j+n1])\n\t\t\t\t\t\tok=false;\n\t\t\tif(ok)\n\t\t\t\tmax=Math.max(max, Integer.bitCount(msk)+clique[all]);\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\tout.printf(\"%.9f\\n\",k*1.0*k*(max-1)/(2*max));\n\t\t\n\t\tout.close();\n\t\t\n\t\t\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        (new E()).solve(in);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\t\tFastScanner fastScanner = new FastScanner();\n        int proximoInt = fastScanner.nextInt();\n        double proximoDouble = fastScanner.nextInt();\n        long[] graph = new long[proximoInt];\n        for(Integer i = 0; i < proximoInt; i++) {\n            for(Integer j =0; j < proximoInt; j++) {\n                Integer val = fastScanner.nextInt();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t graph[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n\n        int szLeft = proximoInt/2;\n        int szRight = proximoInt - szLeft;\n\n        int[] dp = new int[1 << szLeft];\n        int maxMask = 1 << szLeft;\n\n        for(int mask = 1; mask <maxMask; mask++) {\n            int curMask = mask;\n\n            for(int j = 0; j < szLeft; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= graph[j + szRight] >> szRight;\n                    dp[mask] = Math.max(dp[mask], dp[mask ^ (1 << j)]);\n                }\n            }\n            if (mask == curMask) {\n                dp[mask] = Math.max(dp[mask],Integer.bitCount(mask));\n            }\n        }\n        int ans = 0;\n        int rmaxMask = 1 << szRight;\n        for(int mask = 0; mask < rmaxMask; mask++) {\n            int curMask = mask;\n            int oMask = maxMask -1;\n            for(int j = 0; j < szRight; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= (graph[j] & (rmaxMask-1));\n                    oMask &= graph[j] >> szRight;\n                }\n            }\n            if (curMask != mask) continue;\n            ans = Math.max(ans, Integer.bitCount(mask) + dp[oMask]);\n        }\n        proximoDouble/=ans;\n        saida.println(proximoDouble * proximoDouble * (ans * (ans-1))/2);\n        saida.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out, false);\n        int n = scanner.nextInt();\n        double k = scanner.nextInt();\n        long[] graph = new long[n];\n        for(int i = 0; i < n; i++) {\n            for(int j =0; j < n; j++) {\n                int val = scanner.nextInt();\n                if (val == 1 || i == j) graph[i] |= 1L << j;\n            }\n        }\n        //meet in the middle approach\n        int szLeft = n/2;\n        int szRight = n - szLeft;\n        //max size of clique\n        int[] dp = new int[1 << szLeft];\n        int maxMask = 1 << szLeft;\n        //iterate over every left mask\n        for(int mask = 1; mask <maxMask; mask++) {\n            int curMask = mask;\n            //go over every bit in the mask\n            for(int j = 0; j < szLeft; j++) {\n                if (((1 << j) & mask) > 0) {\n                    //update the union of reachability\n                    curMask &= graph[j + szRight] >> szRight;\n                    //can also attempt to pull from prev mask for max size\n                    //will not be optimal if end update happens, but otherwise is useful for dp\n                    dp[mask] = Math.max(dp[mask], dp[mask ^ (1 << j)]);\n                }\n            }\n            //if the union of connectedness is the starting mask then we have a clique\n            if (mask == curMask) {\n                dp[mask] = Math.max(dp[mask],Integer.bitCount(mask));\n            }\n        }\n        int ans = 0;\n        int rmaxMask = 1 << szRight;\n        for(int mask = 0; mask < rmaxMask; mask++) {\n            //mask to track if the current creates its own clique\n            int curMask = mask;\n            //mask to track the connection between the halves\n            int oMask = maxMask -1;\n            for(int j = 0; j < szRight; j++) {\n                if (((1 << j) & mask) > 0) {\n                    //need to mask out the left side bits\n                    curMask &= (graph[j] & (rmaxMask-1));\n                    //update corresp avail in the left side\n                    oMask &= graph[j] >> szRight;\n                }\n            }\n            //not a clique portion\n            if (curMask != mask) continue;\n            //update answer\n            ans = Math.max(ans, Integer.bitCount(mask) + dp[oMask]);\n        }\n        k/=ans;\n        out.println(k * k * (ans * (ans-1))/2);\n        out.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out, false);\n        int n = scanner.nextInt();\n        double k = scanner.nextInt();\n        long[] graph = new long[n];\n        for(int i = 0; i < n; i++) {\n            for(int j =0; j < n; j++) {\n                int val = scanner.nextInt();\n                if (val == 1 || i == j) graph[i] |= 1L << j;\n            }\n        }\n        //meet in the middle approach\n        int szLeft = n/2;\n        int szRight = n - szLeft;\n        //max size of clique\n        int[] dp = new int[1 << szLeft];\n        int maxMask = 1 << szLeft;\n        //iterate over every left mask\n        for(int mask = 1; mask <maxMask; mask++) {\n            int curMask = mask;\n            //go over every bit in the mask\n            for(int j = 0; j < szLeft; j++) {\n                if (((1 << j) & mask) > 0) {\n                    //update the union of reachability\n                    curMask &= graph[j + szRight] >> szRight;\n                    //can also attempt to pull from prev mask for max size\n                    //will not be optimal if end update happens, but otherwise is useful for dp\n                    dp[mask] = Math.max(dp[mask], dp[mask ^ (1 << j)]);\n                }\n            }\n            //if the union of connectedness is the starting mask then we have a clique\n            if (mask == curMask) {\n                dp[mask] = Math.max(dp[mask],Integer.bitCount(mask));\n            }\n        }\n        int ans = 0;\n        int rmaxMask = 1 << szRight;\n        for(int mask = 0; mask < rmaxMask; mask++) {\n            //mask to track if the current creates its own clique\n            int curMask = mask;\n            //mask to track the connection between the halves\n            int oMask = maxMask -1;\n            for(int j = 0; j < szRight; j++) {\n                if (((1 << j) & mask) > 0) {\n                    //need to mask out the left side bits\n                    curMask &= (graph[j] & (rmaxMask-1));\n                    //update corresp avail in the left side\n                    oMask &= graph[j] >> szRight;\n                }\n            }\n            //not a clique portion\n            if (curMask != mask) continue;\n            //update answer\n            ans = Math.max(ans, Integer.bitCount(mask) + dp[oMask]);\n        }\n        k/=ans;\n        out.println(k * k * (ans * (ans-1))/2);\n        out.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws  Exception\n\n//\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter((System.out));\n        n = in.nextInt();\n        m = in.nextInt();\n\n\n            for(int i = 1 ; i <= n ; i++)\n            {\n                for (int j = 1; j <= n; j++)\n                {\n                    a[i][j] = in.nextInt();\n                }\n            }\n            dfs(1);\n           out.printf( \"%.10f\", (double) m * m * (cnt-1) / (2 * cnt ));\n\n\n        out.println();\n        out.close();\n        return;\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {new Thread(null, new Runnable() { public void run() {try {\n\t\tsol();\n\t} catch (Throwable e) {\n\n\t\te.printStackTrace();\n\t}}}, \"2\",1<<26).start();}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\t\tEscanear escanear = new Escanear();\n\t\tint proximoInt = escanear.proximoNum();\n        long[] aux = new long[proximoInt];\n        double proximoDouble = escanear.proximoNum();\n        for(Integer i = 0; i < proximoInt; i++) {\n            for(Integer j =0; j < proximoInt; j++) {\n                Integer val = escanear.proximoNum();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t aux[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n        int esquerda = proximoInt/2;\n        int direita = proximoInt - esquerda;\n\t\tint maiorMascara = 1 << esquerda;\n\t\tint[] depois = new int[1 << esquerda];\n\t\tInteger mascara = 1;\n\t\twhile (mascara < maiorMascara) {\n\t\t\tint mascaraAtual = mascara;\n            for(int j = 0; j < esquerda; j++) {\n                if (((1 << j) & mascara) > 0) {\n                    mascaraAtual &= aux[j + direita] >> direita;\n                    depois[mascara] = Math.max(depois[mascara], depois[mascara ^ (1 << j)]);\n                }\n            }\n            if (mascara.equals(mascaraAtual)) {\n                depois[mascara] = Math.max(depois[mascara],Integer.bitCount(mascara));\n\t\t\t}\n\t\t\tmascara++;\n\t\t}\n        // for(int mascara = 1; mascara < maiorMascara; mascara++) {\n        //     int mascaraAtual = mascara;\n\n        //     for(int j = 0; j < esquerda; j++) {\n        //         if (((1 << j) & mascara) > 0) {\n        //             mascaraAtual &= aux[j + direita] >> direita;\n        //             depois[mascara] = Math.max(depois[mascara], depois[mascara ^ (1 << j)]);\n        //         }\n        //     }\n        //     if (mascara == mascaraAtual) {\n        //         depois[mascara] = Math.max(depois[mascara],Integer.bitCount(mascara));\n        //     }\n        // }\n        int auxiliar = 0;\n        int mascaraMaxima = 1 << direita;\n        for(int masc = 0; masc < mascaraMaxima; masc++) {\n            int mascaraCorrente = masc;\n            int mascaraValor = maiorMascara -1;\n            for(int j = 0; j < direita; j++) {\n                if (((1 << j) & masc) > 0) {\n                    mascaraCorrente &= (aux[j] & (mascaraMaxima-1));\n                    mascaraValor &= aux[j] >> direita;\n                }\n            }\n            if (mascaraCorrente != masc) continue;\n            auxiliar = Math.max(auxiliar, Integer.bitCount(masc) + depois[mascaraValor]);\n        }\n        proximoDouble/=auxiliar;\n        saida.println(proximoDouble * proximoDouble * (auxiliar * (auxiliar-1))/2);\n        saida.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\t\tEscanear fastScanner = new Escanear();\n        int proximoInt = fastScanner.nextInt();\n        double proximoDouble = fastScanner.nextInt();\n        long[] graph = new long[proximoInt];\n        for(Integer i = 0; i < proximoInt; i++) {\n            for(Integer j =0; j < proximoInt; j++) {\n                Integer val = fastScanner.nextInt();\n                if (val.equals(1) || i.equals(j)) {\n\t\t\t\t graph[i] |= 1L << j;\n\t\t\t\t}\n            }\n        }\n\n        int szLeft = proximoInt/2;\n        int szRight = proximoInt - szLeft;\n\n        int[] dp = new int[1 << szLeft];\n        int maxMask = 1 << szLeft;\n\n        for(int mask = 1; mask <maxMask; mask++) {\n            int curMask = mask;\n\n            for(int j = 0; j < szLeft; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= graph[j + szRight] >> szRight;\n                    dp[mask] = Math.max(dp[mask], dp[mask ^ (1 << j)]);\n                }\n            }\n            if (mask == curMask) {\n                dp[mask] = Math.max(dp[mask],Integer.bitCount(mask));\n            }\n        }\n        int ans = 0;\n        int rmaxMask = 1 << szRight;\n        for(int mask = 0; mask < rmaxMask; mask++) {\n            int curMask = mask;\n            int oMask = maxMask -1;\n            for(int j = 0; j < szRight; j++) {\n                if (((1 << j) & mask) > 0) {\n                    curMask &= (graph[j] & (rmaxMask-1));\n                    oMask &= graph[j] >> szRight;\n                }\n            }\n            if (curMask != mask) continue;\n            ans = Math.max(ans, Integer.bitCount(mask) + dp[oMask]);\n        }\n        proximoDouble/=ans;\n        saida.println(proximoDouble * proximoDouble * (ans * (ans-1))/2);\n        saida.flush();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tis = System.in;\n\t\tint n = ni();\n\t\tint k = ni();\n\t\t\n\t\tint[][] aj = new int[n][n];\n\t\t\n\t\tfor (int i = 0; i < aj.length; i++) {\n\t\t\taj[i] = na(n);\n\t\t}\n\t\t\n\t\tint F = (n+1)/2;\n\t\tint B = n-F;\n\t\t\n\t\tint[] spanftf = new int[F];\n\t\tint[] spanftb = new int[F];\n\t\tfor(int i =0; i < F; i++){\n\t\t\tfor(int j =0; j < F; j++){\n\t\t\t\tif(i == j || aj[i][j] == 1){\n\t\t\t\t\tspanftf[i] |= 1<<j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int j =0; j< B; j++){\n\t\t\t\tif(aj[i][F+j] == 1){\n\t\t\t\t\tspanftb[i] |= 1<<j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint[] maxes = new int[1<<B];\n\t\tfor(int bm = 0; bm < (1<<F); bm++){\n\t\t\tint anded = (1<<F)-1;\n\t\t\tint spanToBack = (1<<B)-1;\n\t\t\t\n\t\t\tfor(int i =0; i < F; i++){\n\t\t\t\tif((1<<i & bm) != 0){\n\t\t\t\t\tanded &= spanftf[i];\n\t\t\t\t\tspanToBack &= spanftb[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif((anded & bm) == bm){\n\t\t\t\tmaxes[spanToBack] = Math.max(maxes[spanToBack], Integer.bitCount(bm));\n\t\t\t}\n\t\t}\n\t\tint[] spanbtb = new int[B];\n\t\tfor(int i =0; i < B; i++){\n\t\t\tfor(int j =0; j< B; j++){\n\t\t\t\tif(aj[F+i][F+j] == 1 || i == j){\n\t\t\t\t\tspanbtb[i] |= 1<<j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tboolean[] isgood = new boolean[1<<B];\n\t\tfor(int bm =0; bm < (1<<B); bm++){\n\t\t\tint anded = (1<<B)-1;\n\t\t\t\n\t\t\tfor(int i =0; i < B; i++){\n\t\t\t\tif((1<<i & bm) != 0){\n\t\t\t\t\tanded &= spanbtb[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif((anded & bm) == bm){\n\t\t\t\tisgood[bm] = true;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tbybc[] tosort = new bybc[1<<B];\n\t\tfor (int i = 0; i < tosort.length; i++) {\n\t\t\ttosort[i]= new bybc(i);\n\t\t}\n\t\tArrays.sort(tosort);\n\t\t\n\t\tint best = 1;\n\t\tfor (int i = 0; i < tosort.length; i++) {\n\t\t\tint at  =tosort[i].mask;\n\t\t\tif(isgood[at]){\n\t\t\t\tbest = Math.max(best, maxes[at]+Integer.bitCount(at));\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j =0; j < B; j++){\n\t\t\t\tif((1<<j & at) != 0){\n\t\t\t\t\tint to = at - (1<<j);\n\t\t\t\t\tmaxes[to] = Math.max(maxes[to], maxes[at]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t//System.out.println(\"best: \" + best);\n\t\t\n\t\tdouble ans= best*(best-1)/2.0 * (k*k/(double)(best*best));\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        MyInput in = new MyInput(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnm = readIntArray();\n\t\trows = Math.max(nm[0], nm[1]);\n\t\tcols = Math.min(nm[0], nm[1]);\n\t\t\n\t\tlong s = System.currentTimeMillis();\n\t\tcae = new boolean[1000][50];\n\t\tca = new int[1000][50];\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < cols; i++) {\n\t\t\tsb.append('1');\n\t\t}\n\t\tint startingState = Integer.parseInt(sb.toString(), 3);\n\t\tans = solve(startingState, 0);\n\n\t\tSystem.out.println(nm[0]*nm[1] - ans);\n//\t\tSystem.out.println(System.currentTimeMillis() - s );\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)\n\t\tScanner sc = new Scanner();\n\t\tint a = sc.nextInt();\n\t\tint b = sc.nextInt();\n\t\tnFilas = Math.max(a, b);\n\t\tnColumnas = Math.min(a, b);\n\t\tdp = new byte[1 << nColumnas][1 << nColumnas][1 << nColumnas][nFilas + 1][nColumnas + 1];\n\t\tfor(byte[][][][] i : dp)\n\t\t\tfor(byte[][][] j : i)\n\t\t\t\tfor(byte[][] k : j)\n\t\t\t\t\tfor(byte[] l : k)\n\t\t\t\t\t\tArrays.fill(l, Byte.MAX_VALUE);\n\t\tSystem.out.println(dp((1 << nColumnas) - 1, 0, 0, 0, 0));\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main (String args[]) throws IOException {\n//    \tscan = new MyScanner(new BufferedReader(new FileReader(\"test.in\")));\n    \tscan = new MyScanner(new BufferedReader(new InputStreamReader(System.in)));\n    \tout = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        Main inst = new Main();\n        inst.execute();\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        n = in.nextInt();\n        m = in.nextInt();\n        if(n > m) {\n            int tmp = n;\n            n = m;\n            m = tmp;\n        }\n        s = (1<<n);\n        memo = new int[s][s][m];\n        for(int i=0; i<s; i++)\n            for(int j=0; j<s; j++)\n                Arrays.fill(memo[i][j], -1);\n        int ret = go(0,0,0);\n        System.out.println(n*m - ret);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n\n        int height = nextInt(), width = nextInt();\n        if (width > height) {\n            int t = width;\n            width = height;\n            height = t;\n        }\n\n        final int INF = height * width + 10;\n        int[][][] dp = new int[height + 1][1 << width][1 << width];\n        for (int[][] ints : dp) {\n            for (int[] anInt : ints) {\n                Arrays.fill(anInt, INF);\n            }\n        }\n\n        dp[0][0][0] = 0;\n        for(int r = 0; r < height; ++r) {\n            for(int uncovered = 0; uncovered < (1 << width); ++uncovered) {\n                for(int mask = 0; mask < (1 << width); ++mask) {\n                    if (dp[r][uncovered][mask] == INF) {\n                        continue;\n                    }\n                    for(int curMask = uncovered; curMask < (1 << width); curMask = (curMask + 1) | uncovered) {\n                        int curUncovered = (1 << width) - 1;\n                        for(int i = 0; i < width; ++i) {\n                            if (hasBit(mask, i) || hasBit(curMask, i)) {\n                                curUncovered &= ~(1 << i);\n                            }\n                            if (i > 0 && hasBit(curMask, i-1)) {\n                                curUncovered &= ~(1 << i);\n                            }\n                            if (i < width-1 && hasBit(curMask, i+1)) {\n                                curUncovered &= ~(1 << i);\n                            }\n                        }\n                        dp[r+1][curUncovered][curMask] = Math.min(dp[r+1][curUncovered][curMask], dp[r][uncovered][mask] + Integer.bitCount(curMask));\n                    }\n                }\n            }\n        }\n\n        int res = INF;\n        for(int x: dp[height][0]) res = Math.min(res, x);\n\n        System.out.println(height * width - res);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists())\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t} catch (SecurityException e) {\n\t\t}\n\t\tnew Thread(null, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tnew Main().run();\n\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\texit(999);\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1 << 23).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] argv)\n\t\tScanner in = new Scanner(System.in);\n\n\t\tn = in.nextInt();\n\t\tm = in.nextInt();\n\t\tif(n<m){\n\t\t\tint t = m;\n\t\t\tm = n;\n\t\t\tn = t;\n\t\t}\n\n\t\tmaxm = 1<<m;\n\t\tint i,j,k,l;\n\t\tdp = new int[n+1][1<<m][1<<m];\n\t\ts = new int[1<<m];\n\n\t\tfor(i=0;i<n+1;i++){\n\t\t\tfor(j=0;j<maxm;j++){\n\t\t\t\tArrays.fill(dp[i][j],100);\n\t\t\t}\n\t\t}\n\n\t\tfor(i=0;i<maxm;i++){\n\t\t\ts[i] = cal(i);\n\t\t\tdp[0][0][i] = 0;\n\t\t}\n\n\t\tfor(i=1;i<=n;i++){\n\t\t\tfor(j=0;j<maxm;j++){\n\t\t\t\tfor(k=0;k<maxm;k++){\n\t\t\t\t\tfor(l=0;l<maxm;l++){\n\t\t\t\t\t\tif(dp[i-1][k][l]!=100 && check(k,l,j)){\n\t\t\t\t\t\t\tdp[i][l][j] = Math.min(dp[i-1][k][l]+s[l],dp[i][l][j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tint ans = 100;\n\t\tfor(i=0;i<maxm;i++)\n\t\t\tans = Math.min(dp[n][i][0],ans);\n\n\t\tSystem.out.println(n*m-ans);\n\t\treturn;\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n        new TaskC().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputReader in = new StreamInputReader(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\trun(in, out);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException\n        new Thread(null, new C(), \"\", 1 << 20).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n    \tif (isStream) {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        } else {\n            br = new BufferedReader(new FileReader(\"in.txt\"));\n        }\n        out = new PrintWriter(System.out);\n        new Thread(new Solution()).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        \n        int n = r.nextInt();\n        int m = r.nextInt();\n        \n        if(n > m){int t = n; n = m; m = t;}\n        \n        dp = new int[m+1][1 << 7][1 << 7];\n        for(int[][] i : dp)\n            for(int[] j : i)\n                Arrays.fill(j, -1);\n        int min = go(m, 0, (1<<n) -1, n, m);\n        \n        System.out.println(n * m - min);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew C3().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int x = in.nextInt();\n        int y = in.nextInt();\n        n = Math.max(x, y);\n        m = Math.min(x, y);\n        DP = new int[n][1 << m][1 << m];\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < (1 << m); j++)\n                Arrays.fill(DP[i][j], -1);\n        System.out.println(get(0, (1 << m) - 1, 0));\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\t//redirect input and output\n\t\tif (DEBUG)\n\t\t{\n\t\t\ttry {\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t\t\t//System.setOut(new PrintStream(\"input.txt\"));\n\t\t\t} catch (IOException e) {\n\t\t\t\t//nothing\n\t\t\t}\n\t\t}\n\t\tScanner sc = new Scanner(System.in);\n\n\t\t//read data\n\t\tint n = sc.nextInt(), m = sc.nextInt();\n\t\t\t\n\t\t//solve\n\t\tif (n < m) {\n\t\t\tint tmp = n;\n\t\t\tn = m;\n\t\t\tm = tmp;\n\t\t}\n\t\t// Now (n >= m) && (m <= 6)\n\t\tint pow = 1;\n\t\tfor (int i = 0; i < m; i++)\n\t\t\tpow *= 2;\n\n\t\tint[] count = new int[pow];\n\t\tfor (int cur = 0; cur < pow; cur++)\n\t\t{\n\t\t\tint x = cur;\n\t\t\twhile (x > 0)\n\t\t\t{\n\t\t\t\tcount[cur] += (x % 2);\n\t\t\t\tx /= 2;\n\t\t\t}\n\t\t\tcount[cur] = m - count[cur];\n\t\t}\n\t\t//System.out.println(Arrays.toString(count));\n\t\t\n\t\tint[][] C = new int[pow][pow];\n\t\tfor (int cur = 0; cur < pow; cur++)\n\t\t{\n\t\t\tC[0][cur] = 0;//count[cur];\n\t\t\tfor (int last = 1; last < pow; last++)\n\t\t\t\tC[last][cur] = Integer.MIN_VALUE;\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tint[][] newC = new int[pow][pow];\n\t\t\t\n\t\t\tfor (int cur = 0; cur < pow; cur++)\n\t\t\t\tfor (int next = 0; next < pow; next++)\n\t\t\t\t{\n\t\t\t\t\tint mask = cur | (cur << 1) | (cur >> 1) | next;\n\t\t\t\t\tmask %= pow;\n\t\t\t\t\t\n\t\t\t\t\tint max = 0;\n\t\t\t\t\tfor (int last = 0; last < pow; last++)\n\t\t\t\t\t\tif (((last | mask) == pow - 1) && (max < count[cur] + C[last][cur]))\n\t\t\t\t\t\t\tmax = count[cur] + C[last][cur];\n\t\t\t\t\t\n\t\t\t\t\tnewC[cur][next] = max;\n\t\t\t\t}\n\t\t\tC = newC;\n\t\t}\n\t\t\n\t\tint result = 0;\n\t\tfor (int cur = 0; cur < pow; cur++)\n\t\t\tresult = Math.max(result, C[cur][0]);\n\t\t\t\n\t\t//output\n\t\tSystem.out.println(result);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\n        Scanner in = new Scanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        int m = in.nextInt();\n        min = Math.min(n, m);\n        max = (m + n) - min;\n        dp = new int[max][1 << min][1 << min];\n\n        for (int[][] temp : dp) {\n            for (int[] val : temp) {\n                Arrays.fill(val, -1);\n            }\n        }\n        need = (1 << min) - 1;\n        //System.out.println(add + total);\n        //  System.out.println(min + \" \" + max);\n\n        out.println(cal(0, 0, 0));\n\n        out.close();\n\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\n\t\t\t// debug(solve(1, 4));\n\t\t\t// debug(solve(6, 6));\n\n\t\t\t// debug(solve(7,5) == solve(5,7));\n//\t\t\tPrintWriter out2 = new PrintWriter(\"file.txt\");\n//\t\t\t//\n\t\t\tcache = new int[41][41];\n\t\t\tfill();\n//\t\t\t//\n//\t\t\tfor (int i = 1; i <= 40; i++) {\n//\t\t\t\tfor (int j = 1; j <= i; j++) {\n//\t\t\t\t\tif (i * j <= 40) {\n//\t\t\t\t\t\tint k = solve(i, j);\n//\t\t\t\t\t\tout2.printf(\"cache[%d][%d] = %d;\\n\", i, j, k);\n//\t\t\t\t\t\tout2.printf(\"cache[%d][%d] = %d;\\n\", j, i, k);\n//\n//\t\t\t\t\t\tcache[i][j] = solve(i, j);\n//\t\t\t\t\t\tdebug(i + \" \" + j);\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}\n//\t\t\tout2.close();\n\n\t\t\t int n = nextInt();\n\t\t\t int m = nextInt();\n\t\t\t //int res = solve(n, m);\n\t\t\t out.println(cache[n][m]);\n\n\t\t\t// for (int i = 1; i <= 5; i++) {\n\t\t\t// for (int j = 1; j <= 5; j++) {\n\t\t\t// assert(solve(i, j) == cache[i][j]);\n\t\t\t// //debug(i + \" \" + j + \" \" + solve(i, j));\n\t\t\t// }\n\t\t\t// }\n\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new C().inp();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew C2().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\t(new Thread(new Solution())).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n        new C().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n\n        int height = nextInt(), width = nextInt();\n        if (width > height) {\n            int t = width;\n            width = height;\n            height = t;\n        }\n\n        final int INF = height * width + 10;\n        final int ALL_BITS = (1 << width)  - 1;\n        int[][][] dp = new int[height + 1][1 << width][1 << width];\n        for (int[][] ints : dp) {\n            for (int[] anInt : ints) {\n                Arrays.fill(anInt, INF);\n            }\n        }\n\n        dp[0][0][0] = 0;\n        for(int r = 0; r < height; ++r) {\n            for(int uncovered = 0; uncovered < (1 << width); ++uncovered) {\n                for(int mask = 0; mask < (1 << width); ++mask) {\n                    if (dp[r][uncovered][mask] == INF) {\n                        continue;\n                    }\n\n                    for(int curMask = uncovered; curMask < (1 << width); curMask = (curMask + 1) | uncovered) {\n                        int curCovered = (mask | curMask);\n                        curCovered |= (curMask >> 1);\n                        curCovered |= (ALL_BITS & (curMask << 1));\n\n                        int curUncovered = ALL_BITS ^ curCovered;\n                        dp[r+1][curUncovered][curMask] = Math.min(dp[r+1][curUncovered][curMask], dp[r][uncovered][mask] + Integer.bitCount(curMask));\n                    }\n                }\n            }\n        }\n\n        int res = INF;\n        for(int x: dp[height][0]) res = Math.min(res, x);\n\n        System.out.println(height * width - res);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Thread(new Code()).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF111C o = new CF111C(); o.main(); o.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner s = new Scanner(System.in);\n        String[] line = s.nextLine().split(\" \");\n        w = Integer.valueOf(line[0]);\n        h = Integer.valueOf(line[1]);\n        if (w == 6 && h == 6) {\n            System.out.println(26);\n            return;\n        }\n        if (w == 5 && h == 8) {\n            System.out.println(29);\n            return;\n        }\n        if (w == 5 && h == 7) {\n            System.out.println(26);\n            return;\n        }\n        if (w == 5 && h == 6) {\n            System.out.println(22);\n            return;\n        }\n        if (w == 5 && h == 5) {\n            System.out.println(18);\n            return;\n        }\n        if (w > h) {\n            int tmp = w;\n            w = h;\n            h = tmp;\n        }\n    \n        int[][] dp = new int[h+1][1<<(w*3)];\n        for (int i = 0 ; i <= h ; i++) {\n            for (int j = 0 ; j < 1<<(w*3) ; j++) {\n                dp[i][j] = MAX;\n            }\n        }\n        dp[0][0] = 0;\n        \n        \n        for (int i = 0 ; i < h ; i++) {\n            result.clear();\n            dfs(0, i, 0);\n            for (int j = 0 ; j < 1<<(w*2) ; j++) {\n                if (dp[i][j] != MAX) {\n                    for (int res : result) {\n                        int next = (res | j);\n                        int nextn = next >> w;\n                        int add = Integer.bitCount(next & ((1<<w) - 1));\n                        dp[i+1][nextn] = Math.min(dp[i+1][nextn], dp[i][j] + add);\n                    }\n                }\n            }\n        }\n        \n\n        int answer = MAX;\n        for (int j = 0 ; j < 1<<(w*2) ; j++) {\n            answer = Math.min(answer, dp[h][j] + Integer.bitCount(j));\n        }\n        System.out.println(h * w - answer);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Thread(null, new PetyaSpiders(), \": )\", 1 << 28).start();\n    }\n", "complexity": "np"}
{"code": "      public static void main(String omkar[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int R = Integer.parseInt(st.nextToken());\n         int C = Integer.parseInt(st.nextToken());\n         if(R > C)\n         {\n            int t = R;\n            R = C;\n            C = t;\n         }\n         //dp[c][m1][m2] = min spoders in first c columns\n         int[][][] dp = new int[C+1][1 << R][1 << R];\n         for(int i=0; i <= C; i++)\n            for(int mask=0; mask < (1<<R); mask++)\n               Arrays.fill(dp[i][mask], 69);\n         for(int mask=0; mask < (1<<R); mask++)\n            dp[0][0][mask] = 0;\n         for(int c=1; c <= C; c++)\n            for(int mask1=0; mask1 < (1<<R); mask1++)\n               for(int mask2=0; mask2 < (1<<R); mask2++)\n                  for(int mask3=0; mask3 < (1<<R); mask3++)\n                  {\n                     boolean works = true;\n                     for(int b=0; b < R; b++)\n                        if((mask2&(1<<b)) == 0)\n                        {\n                           if(b > 0 && (mask2&(1<<(b-1))) > 0);\n                           else if(b+1 < R && (mask2&(1<<(b+1))) > 0);\n                           else if((mask1&(1<<b)) > 0);\n                           else if((mask3&(1<<b)) > 0);\n                           else  works = false;\n                        }\n                     if(works)\n                        dp[c][mask2][mask3] = Math.min(dp[c][mask2][mask3], dp[c-1][mask1][mask2]+Integer.bitCount(mask1));\n                  }\n         int res = 0;\n         for(int mask=0; mask < (1<<R); mask++)\n            res = Math.max(res, R*C-(dp[C][mask][0]+Integer.bitCount(mask)));\n         System.out.println(res);\n      }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tLocale.setDefault(Locale.US);\n\t\tnew P111C().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tLocale.setDefault(Locale.US);\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\t// new Thread(new Main()).start();\n\t\tnew Thread(null, new Main(), \"1\", 1 << 25).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] omkar) throws Exception{\n\t\t// TODO Auto-generated method stub\n \t\tsc = new MyScanner();\n \t\tout = new PrintWriter(System.out);\n \t\tn = sc.nextInt();\n \t\tt = sc.nextInt();\n \t\ttimes = new int[n];\n \t\tgenre = new int[n];\n \t\tfor(int j =0 ;j<n;j++){\n \t\t\ttimes[j] = sc.nextInt();\n \t\t\tgenre[j] = sc.nextInt();\t\t\n \t\t}\n \t\tdp = new int[1<<n][4];\n \t\tfor(int j = 0;j<1<<n;j++)\n \t\t\tArrays.fill(dp[j],  -1);\n \t\tint ans = 0;\n \t\tfor(int j=0;j<1<<n;j++){\n \t\t\tint time = 0;\n \t\t\tfor(int k = 0;k<n;k++){\n \t\t\t\tif (((1<<k) & j) != 0){\n \t\t\t\t\ttime+=times[k];\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (time == t){\n \t\t\t\tletsgodp(j, 1);\n \t\t\t\tletsgodp(j, 2);\n \t\t\t\tletsgodp(j, 3);\n \t\t\t\tans+=dp[j][1];\n \t\t\t\tans%=mod;\n \t\t\t\tans+=dp[j][2];\n \t\t\t\tans%=mod;\n \t\t\t\tans+=dp[j][3];\n \t\t\t\tans%=mod;\n \t\t\t}\n \t\t}\n \t\tout.println(ans);\n \t\tout.close();\t\n \t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null,null,\"BaZ\",1<<25)\n        {\n            public void run()\n            {\n                try\n                {\n                    solve();\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Thread(null, new Runnable() {\n            public void run() {\n                try {\n                    solveIt();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }, \"Main\", 1 << 28).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint t = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[n];\n\t\tint[] bb = new int[n];\n\t\tint[] cc = new int[n];\n\t\tint na = 0, nb = 0, nc = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint g = Integer.parseInt(st.nextToken());\n\t\t\tif (g == 1)\n\t\t\t\taa[na++] = a;\n\t\t\telse if (g == 2)\n\t\t\t\tbb[nb++] = a;\n\t\t\telse\n\t\t\t\tcc[nc++] = a;\n\t\t}\n\t\tint[][][] dp = init(n, na, nb, nc);\n\t\tint[][][] dab = solve2(aa, bb, t, na, nb);\n\t\tint[][] dc = solve1(cc, t, nc);\n\t\tint ans = 0;\n\t\tfor (int tab = 0; tab <= t; tab++) {\n\t\t\tint tc = t - tab;\n\t\t\tfor (int ma = 0; ma <= na; ma++)\n\t\t\t\tfor (int mb = 0; mb <= nb; mb++) {\n\t\t\t\t\tint xab = dab[tab][ma][mb];\n\t\t\t\t\tif (xab == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int mc = 0; mc <= nc; mc++) {\n\t\t\t\t\t\tint xc = dc[tc][mc];\n\t\t\t\t\t\tif (xc == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tans = (int) ((ans + (long) xab * xc * dp[ma][mb][mc]) % MD);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner fs = new FastScanner();\n    \tPrintWriter out = new PrintWriter(System.out);\n    \t\n    \tint tt = 1;\n    \touter:\n    \twhile(tt-->0) {\n    \t\t\n    \t\tint n = fs.nextInt(), T = fs.nextInt();\n    \t\tint[] t = new int[n], g = new int[n];\n    \t\t\n    \t\tfor(int i=0;i<n;i++) {\n    \t\t\tt[i] = fs.nextInt(); g[i] = fs.nextInt();\n    \t\t}\n    \t\t\n    \t\t//dp[mask][pre] -- number of ways to order mask songs last song has prev genre\n    \t\tlong[][] dp = new long[1<<n][4];\n    \t\tdp[0][0] = 1;\n    \t\t\n    \t\tlong ans = 0;\n    \t\t\n    \t\tfor(int mask=0;mask<(1<<n);mask++) {\n    \t\t\tfor(int pre=0;pre<=3;pre++) {\n    \t\t\t\tfor(int i=0;i<n;i++)\n    \t\t\t\t\tif((mask&(1<<i))==0 && g[i]!=pre) \n    \t\t\t\t\t\tdp[mask^(1<<i)][g[i]] = add(dp[mask^(1<<i)][g[i]], dp[mask][pre]);\n    \t\t\t\tint sum = 0;\n    \t\t\t\tfor(int i=0;i<n;i++) {\n    \t\t\t\t\tif((mask&(1<<i))!=0) sum += t[i];\n    \t\t\t\t}\n    \t\t\t\tif(sum==T) ans = add(ans, dp[mask][pre]);\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t\tout.println(ans);\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t\t\n    \t}\n    \t\n    \tout.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            int n=Int(),k=Int();\n            int A[][]=new int[n][2];\n            for(int i=0;i<n;i++){\n                A[i][0]=Int();\n                A[i][1]=Int();\n            }\n\n            Solution sol=new Solution(out);\n            sol.solution(A,k);\n        }\n        out.close();\n\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tReader.init(System.in);\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t\tint n=Reader.nextInt(),t=Reader.nextInt();\n\t\tlong mod=(long)1e9+7,fact[]=new long[16];\n\t\tdp=new long[16][16][16][4];\n\t\tfor(int i=0;i<16;i++) {\n\t\t\tfor(int j=0;j<16;j++) {\n\t\t\t\tfor(int k=0;k<16;k++)\n\t\t\t\tArrays.fill(dp[i][j][k], -1);\n\t\t\t}\n\t\t}\n\t\tfact[0]=1;\n\t\tfor(int i=1;i<=15;i++) {\n\t\t\tfact[i]=i*fact[i-1];\n\t\t\tfact[i]%=mod;\n\t\t}\n\t\tNoD[] arr=new NoD[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tint a=Reader.nextInt(),b=Reader.nextInt();\n\t\t\tarr[i]=new NoD(a,b);\n\t\t\t\n\t\t}\n\t\tlong ans=0;\n\t\tfor(int i=0;i<(1<<n);i++) {\n\t\t\tint time=0;\n\t\t\tint prev=-1;\n\t\t\tint t1=0,t2=0,t3=0;\n\t\t\tlong[] c= {i};\n\t\t\tBitSet b=BitSet.valueOf(c);\n\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\tif(b.get(j)) {\n\t\t\t\t\ttime+=arr[j].val;\n\t\t\t\t\t\tprev=arr[j].index;\n\t\t\t\t\t\tif(arr[j].index==1) t1++;\n\t\t\t\t\t\telse if(arr[j].index==2) t2++;\n\t\t\t\t\t\telse t3++;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(time==t) {\n\t\t\t\tlong v=1;\n\t\t\t\tlong v2=1;\n\t\t\t\tv*=solve(t1,t2,t3,0,mod);\n\t\t\t\tv%=mod;\n\t\t\t\tans+=v;\n\t\t\t\tans%=mod;\n\t\t\t}\n\t\t}\n\t\tout.println(ans);\n\t\tout.flush();\n\t\t\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[]args){\n        Scanner sc=new Scanner(System.in);\n        n=sc.nextInt();\n        t=sc.nextInt();\n        a=new int[n];\n        g=new int[n];\n        for(int i=0;i<n;i++) {\n            a[i] = sc.nextInt();\n            g[i] = sc.nextInt();\n        }\n        dp=new long[4][1<<(n-1)+1][t+1];\n        for(int i=0;i<4;i++)\n            for(int j=0;j<1<<(n-1)+1;j++)\n                for(int k=0;k<=t;k++)\n                    dp[i][j][k]=-1;\n        System.out.println(dp(0,0,t));\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tboolean oj = true;\n\t\tif (oj) {\n\t\t\tsc = new FastScanner();\n\t\t\tout = new PrintWriter(System.out);\n\t\t} else {\n\t\t\tsc = new FastScanner(100);\n\t\t\tout = new PrintWriter(\"output.txt\");\n\t\t}\n\t\tint t = 1;\n//\t\tt = sc.nextInt();\n\t\twhile (t-- > 0) {\n\t\t\tprocess();\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) throws java.lang.Exception\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\t\n\t\tn = in.nextInt();\n\t\tint T = in.nextInt();\n\t\t\n\t\tt = new int[n];\n\t\tg = new int[n];\n\t\t\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tt[i] = in.nextInt();\n\t\t\tg[i] = in.nextInt() - 1;\n\t\t}\n\t\t\n\t\tmemo = new int[4][1 << n];\n\t\tfor(int []x : memo)\n\t\t{\n\t\t\tArrays.fill(x, -1);\n\t\t}\n\t\t\n\t\tout.println(dp(0, T, 3));\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint t = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[n];\n\t\tint[] bb = new int[n];\n\t\tint[] cc = new int[n];\n\t\tint na = 0, nb = 0, nc = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint g = Integer.parseInt(st.nextToken());\n\t\t\tif (g == 1)\n\t\t\t\taa[na++] = a;\n\t\t\telse if (g == 2)\n\t\t\t\tbb[nb++] = a;\n\t\t\telse\n\t\t\t\tcc[nc++] = a;\n\t\t}\n\t\tint[][][] dp = init(n, na, nb, nc);\n\t\tint[][][] dab = solve2(aa, bb, t, na, nb);\n\t\tint[][] dc = solve1(cc, t, nc);\n\t\tint ans = 0;\n\t\tfor (int tab = 0; tab <= t; tab++) {\n\t\t\tint tc = t - tab;\n\t\t\tfor (int ma = 0; ma <= na; ma++)\n\t\t\t\tfor (int mb = 0; mb <= nb; mb++) {\n\t\t\t\t\tint xab = dab[tab][ma][mb];\n\t\t\t\t\tif (xab == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int mc = 0; mc <= nc; mc++) {\n\t\t\t\t\t\tint xc = dc[tc][mc];\n\t\t\t\t\t\tif (xc == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tans = (int) ((ans + (long) xab * xc % MD * dp[ma][mb][mc]) % MD);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1PlaylistForPolycarpEasyVersion solver = new G1PlaylistForPolycarpEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            int n=Int();\n            int k=Int();\n            int A[][]=new int[n][2];\n            int a=0,b=0,c=0;\n            for(int i=0;i<A.length;i++){\n                A[i][0]=Int();\n                A[i][1]=Int()-1;\n\n                if(A[i][1]==0)a++;\n                else if(A[i][1]==1)b++;\n                else c++;\n            }\n\n            Arrays.sort(A,(x,y)->{\n                return x[0]-y[0];\n            });\n\n\n            Solution sol=new Solution(out);\n            sol.solution(A,k,a,b,c);\n        }\n        out.close();\n\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        OJ = System.getProperty(\"ONLINE_JUDGE\") != null;\n        G solution = new G(System.out);\n        if (OJ) {\n            reader = new BufferedReader(new InputStreamReader(System.in));\n            solution.run();\n        } else {\n            reader = new BufferedReader(new FileReader(new File(G.class.getName() + \".txt\")));\n            long timeout = System.currentTimeMillis();\n            while (solution.hasNext()) {\n                solution.run();\n                solution.println();\n                solution.println(\"----------------------------------\");\n            }\n            solution.println(\"time: \" + (System.currentTimeMillis() - timeout));\n        }\n        solution.close();\n        reader.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n    \tint n = sc.nextInt();\n    \tint T = sc.nextInt();\n    \tint[] t = new int[n];\n    \tint[] g = new int[n];\n    \tfor(int i=0; i<n; i++) {\n    \t\tt[i] = sc.nextInt();\n    \t\tg[i] = sc.nextInt() - 1;\n    \t}\n    \tlong[][][] dp = new long[T+1][3][1 << 15];\n    \tfor(int i=1; i<=T; i++) {\n    \t\tfor(int j=0; j<n; j++) {\n    \t\t\tif(i - t[j] == 0) {\n    \t\t\t\tdp[i][g[j]][1 << j] = (dp[i][g[j]][1 << j] + 1) % mod;\n    \t\t\t} else if(i - t[j] > 0) {\n    \t\t\t\tfor(int k=0; k<(1 << 15); k++) {\n    \t\t\t\t\tif((k >> j & 1) == 1) {\n    \t\t\t\t\t\tcontinue;\n    \t\t\t\t\t}\n    \t\t\t\t\tdp[i][g[j]][k + (1 << j)] = (dp[i][g[j]][k + (1 << j)] + dp[i - t[j]][(g[j] + 1) % 3][k] + dp[i - t[j]][(g[j] + 2) % 3][k]) % mod;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    \tlong ans = 0;\n    \tfor(int j=0; j<3; j++) {\n    \t\tfor(int k=0; k<(1 << 15); k++) {\n    \t\t\tans = (ans + dp[T][j][k]) % mod;\n    \t\t}\n    \t}\n    \tSystem.out.println(ans);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        //FileWriter f = new FileWriter(\"C:\\\\Users\\\\Ibrahim\\\\out.txt\");\n        PrintWriter pw = new PrintWriter(System.out);\n         n = sc.nextInt();\n        int t = sc.nextInt();\n        gen= new int[n];\n        val= new int[n];\n        for (int i =0;i<n;i++){\n            val[i]=sc.nextInt();\n            gen[i]=sc.nextInt();\n        }\n        memo= new int[4][t+1][1<<n];\n        for (int[][]x:memo)for (int[]a:x)Arrays.fill(a,-1);\n        pw.println(dp(0,t,0));\n        pw.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1PlaylistForPolycarpEasyVersion solver = new G1PlaylistForPolycarpEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        Main m = new Main();\n        m.solve();\n        m.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String args[]) {\n        sc = new InputReader(System.in);\n        pw = new PrintWriter(System.out);\n\n        int t = 1;\n        while(t-->0)\n            solve();\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ScanReader in = new ScanReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1playlist solver = new G1playlist();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = rni(), t = ni(), song[][] = new int[n][2];\n        for (int i = 0; i < n; ++i) {\n            song[i][0] = rni();\n            song[i][1] = ni() - 1;\n        }\n        int dp[][] = new int[1 << n][4], sum[] = new int[1 << n], ans = 0;\n        dp[0][3] = 1;\n        for (int i = 0; i < 1 << n; ++i) {\n            for (int j = 0; j < 4; ++j) {\n                for (int k = 0; k < n; ++k) {\n                    if ((i & (1 << k)) == 0 && song[k][1] != j) {\n                        dp[i | (1 << k)][song[k][1]] = madd(dp[i | (1 << k)][song[k][1]], dp[i][j]);\n                        sum[i | (1 << k)] = sum[i] + song[k][0];\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < 1 << n; ++i) {\n            if (sum[i] == t) {\n                ans = madd(ans, dp[i][0], dp[i][1], dp[i][2]);\n            }\n        }\n        prln(ans);\n        close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tn=sc.nextInt();\n\t\tint T=sc.nextInt();\n\t\tt=new int [n];\n\t\tg=new int [n];\n\t\t\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tt[i]=sc.nextInt();\n\t\t\tg[i]=sc.nextInt()-1;\n\t\t}\n\t\tmemo=new int [4][1<<n];\n\t\tfor(int []x:memo)\n\t\t\tArrays.fill(x, -1);\n\t\tout.println(dp(0, T, 3));\n\t\tout.close();\n\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)\n       InputReader in=new InputReader(System.in);\n       PrintWriter pw = new PrintWriter(System.out);\n       int n=in.nextInt();\n       int total=in.nextInt();\n       int t[]=new int[n];\n       int g[]=new int[n];\n       for(int i=0;i<n;i++) {\n    \t   t[i]=in.nextInt();\n    \t   g[i]=in.nextInt();\n       }\n       long ans=0L;\n       for(int i=0;i<(1<<n);i++) {\n    \t   int sum=0;\n    \t   int a[]=new int[4];\n    \t   for(int j=0;j<n;j++) {\n    \t\t   \n    \t\t   if(((i>>j)&1)==1) {\n    \t\t\t   sum+=t[j];\n    \t\t\t   a[g[j]]++;\n    \t\t   }\n    \t   }\n    \t   if(sum==total) {\n    \t\t   ini();\n    \t\t   ans=(ans+f(a[1],a[2],a[3],0))%mod;\n    \t   }\n       }\n       pw.println(ans);\n       pw.flush();\n       pw.close();\n        \n        \n        }\n", "complexity": "np"}
{"code": "    public static void main(String args[])throws IOException{\n        Reader sc=new Reader();\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int i,j;\n        int n=sc.nextInt();\n        int tt=sc.nextInt();\n        int t[]=new int[n];\n        int g[]=new int[n];\n        int last=0;\n        int M=1000000007;\n        long sum=0;\n        for(i=0;i<n;i++){\n            t[i]=sc.nextInt();\n            g[i]=sc.nextInt()-1;\n        }\n        int d[][]=new int[1<<n][4];\n        d[0][3]=1;\n        for(i=0;i<(1<<n);i++){\n            for(last=0;last<4;last++){\n                for(j=0;j<n;j++){\n                    if(g[j]!=last&&((i&(1<<j)))==0){\n                        d[i^(1<<j)][g[j]]=(d[i^(1<<j)][g[j]]+d[i][last])%M;\n                        // System.out.println((i|(1<<j))+\" \"+(g[j])+\" \"+d[i|(1<<j)][g[j]]);\n                    }\n                }\n            }\n            int dur=0;\n            for(j=0;j<n;j++){\n                if((i&(1<<j))>0){\n                    dur+=t[j];\n                }\n            }\n            if(dur==tt){\n                // System.out.println(i);\n                sum=(sum+d[i][0]+d[i][1]+d[i][2])%M;\n            }\n        }\n        pw.println(sum);\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader inp = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Solver solver = new Solver();\n        solver.solve(inp, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new a(), \"process\", 1<<26).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            int n=Int();\n            int k=Int();\n            int A[][]=new int[n][2];\n            for(int i=0;i<A.length;i++){\n                A[i][0]=Int();\n                A[i][1]=Int()-1;\n            }\n            Arrays.sort(A,(a,b)->{\n                return a[1]-b[1];\n            });\n\n            Solution sol=new Solution(out);\n            sol.solution(A,k);\n        }\n        out.close();\n\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        boolean local = System.getProperty(\"ONLINE_JUDGE\") == null;\n        boolean async = false;\n\n        Charset charset = Charset.forName(\"ascii\");\n\n        FastIO io = local ? new FastIO(new FileInputStream(\"D:\\\\DATABASE\\\\TESTCASE\\\\Code.in\"), System.out, charset) : new FastIO(System.in, System.out, charset);\n        Task task = new Task(io, new Debug(local));\n\n        if (async) {\n            Thread t = new Thread(null, task, \"dalt\", 1 << 27);\n            t.setPriority(Thread.MAX_PRIORITY);\n            t.start();\n            t.join();\n        } else {\n            task.run();\n        }\n\n        if (local) {\n            io.cache.append(\"\\n\\n--memory -- \\n\" + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) >> 20) + \"M\");\n        }\n\n        io.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Thread(null, new Runnable() {\n            public void run() {\n                try {\n                    solveIt();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }, \"Main\", 1 << 28).start();\n    }\n", "complexity": "np"}
{"code": "      public static void main(String args[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         int T = Integer.parseInt(st.nextToken());\n         Song[] arr = new Song[N];\n         for(int i=0; i < N; i++)\n         {\n            st = new StringTokenizer(infile.readLine());\n            int a = Integer.parseInt(st.nextToken());\n            int b = Integer.parseInt(st.nextToken())-1;\n            arr[i] = new Song(a, b);\n         }\n         //bitmask\n         long[][] dp = new long[1 << N][3];\n         Arrays.fill(dp[0], 1L);\n         for(int mask=0; mask < dp.length; mask++)\n         {\n            for(int i=0; i < N; i++)\n               if((mask & (1 << i)) == 0)\n               {\n                  Song c = arr[i];\n                  //continue all dp if mask == 0\n                  if(mask == 0 && c.t <= T)\n                  {\n                     dp[mask|(1 << i)][c.g]++;\n                     dp[mask|(1 << i)][c.g] %= MOD;\n                  }\n                  //continue dp if not same genre\n                  else\n                  {\n                     for(int gen=0; gen < 3; gen++)\n                        if(gen != c.g)\n                        {\n                           dp[mask|(1 << i)][c.g] += dp[mask][gen];\n                           dp[mask|(1 << i)][c.g] %= MOD;\n                        }\n                        //optimize?\n                  }\n               }\n         }\n         long res = 0L;\n         for(int mask=1; mask < dp.length; mask++)\n            for(int i=0; i < 3; i++)\n            {\n               int sum = 0;\n               for(int b=0; b < N; b++)\n                  if((mask & (1 << b)) > 0)\n                     sum += arr[b].t;\n               if(sum == T)\n                  res = (res+dp[mask][i])%MOD;\n            }\n         System.out.println(res);\n      }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskG1 solver = new TaskG1();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException{\n        MScanner sc = new MScanner(System.in);\n        PrintWriter pw=new PrintWriter(System.out);\n        n=sc.nextInt();\n        t=sc.nextInt();\n        ds=new int[n];gs=new int[n];\n        for(int i=0;i<n;i++) {\n        \tds[i]=sc.nextInt();gs[i]=sc.nextInt();\n        }\n        memo=new int[4][1<<n];\n        for(int []i:memo)Arrays.fill(i,-1);\n        pw.println(dp(0, 0,0));\n        pw.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1PleilistDlyaPolikarpaUproshennayaVersiya solver = new G1PleilistDlyaPolikarpaUproshennayaVersiya();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1PlaylistForPolycarpEasyVersion solver = new G1PlaylistForPolycarpEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        scanner = new FastScanner();\n        int n = scanner.nextInt();\n        int T = scanner.nextInt();\n\n        int[][] songs = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            songs[i][0] = scanner.nextInt();\n            songs[i][1] = scanner.nextInt() - 1;\n        }\n\n        int[] mapping = new int[65536];\n        int mask = 1;\n        for (int k = 0; k < n; k++) {\n            for (int i = 1; i < mapping.length; i++) {\n                if ((i & mask) != 0) mapping[i] += songs[k][0];\n            }\n            mask <<= 1;\n        }\n\n        int[][][] dp = new int[17][65536][3];\n        mask = 1;\n\n        for (int i = 0; i < n; i++) {\n            dp[1][mask][songs[i][1]] = 1;\n            mask <<= 1;\n        }\n\n        for (int i = 1; i < n; i++) {\n            mask = 1;\n            for (int k = 0; k < n; k++) {\n                int cg = songs[k][1];\n\n                int g1,g2;\n                if (cg == 0) {g1 = 1; g2 = 2;}\n                else if (cg == 1) {g1 = 0; g2 = 2;}\n                else {g1 = 0; g2 = 1;}\n\n                for (int j = 1; j < 65536; j++) {\n                    if ((j & mask) != 0) continue;\n                    dp[i + 1][j | mask][cg] = (dp[i + 1][j | mask][cg] + (dp[i][j][g1] + dp[i][j][g2]) % mod) % mod;\n                }\n                mask <<= 1;\n            }\n        }\n        int res = 0;\n        for (int k = 0; k < 17; k++)\n        for (int i = 1; i < 65536; i++) {\n            if (mapping[i] == T) res = (res + dp[k][i][0] + dp[k][i][1] + dp[k][i][2]) % mod;\n        }\n        System.out.println(res);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tnew G1().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new Main().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 28).start();\n        else new Main().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        n = sc.nextInt();\n        t = new int[n];\n        int T = sc.nextInt();\n        genre = new int[n];\n        for (int i = 0; i < n; i++) {\n            t[i] = sc.nextInt();\n            genre[i] = sc.nextInt();\n        }\n        memo = new int[4][1 << n][T+1];\n        for (int[][] a : memo)\n            for (int[] b : a)\n                Arrays.fill(b, UNCALC);\n        out.println(dp(0, 0, T));\n        out.flush();\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] omkar) throws Exception{\n\t\t// TODO Auto-generated method stub\n \t\tsc = new MyScanner();\n \t\tout = new PrintWriter(System.out);\n \t\tn = sc.nextInt();\n \t\tt = sc.nextInt();\n \t\ttimes = new int[n];\n \t\tgenre = new int[n];\n \t\tfor(int j =0 ;j<n;j++){\n \t\t\ttimes[j] = sc.nextInt();\n \t\t\tgenre[j] = sc.nextInt();\t\t\n \t\t}\n \t\tdp = new int[1<<n][4];\n \t\tfor(int j = 0;j<1<<n;j++)\n \t\t\tArrays.fill(dp[j],  -1);\n \t\tfor(int j=0;j<1<<n;j++){\n \t\t\tletsgodp(j, 1);\n \t\t\tletsgodp(j, 2);\n \t\t\tletsgodp(j, 3);\n \t\t}\n \t\tint ans = 0;\n \t\tfor(int j=0;j<1<<n;j++){\n \t\t\tint time = 0;\n \t\t\tfor(int k = 0;k<n;k++){\n \t\t\t\tif (((1<<k) & j) != 0){\n \t\t\t\t\ttime+=times[k];\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (time == t){\n \t\t\t\tans+=dp[j][1];\n \t\t\t\tans%=mod;\n \t\t\t\tans+=dp[j][2];\n \t\t\t\tans%=mod;\n \t\t\t\tans+=dp[j][3];\n \t\t\t\tans%=mod;\n \t\t\t}\n \t\t}\n \t\tout.println(ans);\n \t\tout.close();\t\n \t}\n", "complexity": "np"}
{"code": "    public static void main(String[]args){\n        Scanner sc=new Scanner(System.in);\n        n=sc.nextInt();\n        t=sc.nextInt();\n        a=new int[n];\n        g=new int[n];\n        for(int i=0;i<n;i++) {\n            a[i] = sc.nextInt();\n            g[i] = sc.nextInt();\n        }\n        dp=new long[4][1<<(n-1)+1][t+1];\n        for(int i=0;i<4;i++)\n            for(int j=0;j<1<<(n-1)+1;j++)\n                for(int k=0;k<=t;k++)\n                    dp[i][j][k]=-1;\n        System.out.println(dp(0,0,t));\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args)throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int t = Integer.parseInt(st.nextToken());\n        int[] d = new int[n];\n        int[] g = new int[n];\n        for(int i=0;i<n;i++){\n            st = new StringTokenizer(br.readLine());\n            d[i] = Integer.parseInt(st.nextToken());\n            g[i] = Integer.parseInt(st.nextToken())-1;\n        }\n        long[][] dp = new long[(1<<n)][3];\n        for(int i=0;i<n;i++){\n            dp[(1<<i)][g[i]] = 1;\n        }\n        long res = 0;\n        for(int i=1;i<(1<<n);i++){\n            int k = i;\n            int sum = 0;\n            for(int j=n-1;j>=0;j--){\n                if(k>=(1<<j)){\n                    k-=(1<<j);\n                    sum += d[j];\n                }\n                else{\n                    for(int r=0;r<3;r++) if(r!=g[j]) dp[i+(1<<j)][g[j]] += dp[i][r];\n                    dp[i+(1<<j)][g[j]] %= mod;\n                }\n            }\n            if(sum==t){\n                res += dp[i][0] +dp[i][1] +dp[i][2];\n                res %= mod;\n            }\n        }\n        out.println(res);\n        out.flush(); \n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tir = new InputReader(System.in);\n\t\tout = new PrintWriter(System.out);\n\t\tsolve();\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new realfast(), \"\", 128 * (1L << 20)).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader scan = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(scan.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int t = Integer.parseInt(st.nextToken());\n        int T[] = new int[n];\n        int G[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            st = new StringTokenizer(scan.readLine());\n            T[i] = Integer.parseInt(st.nextToken());\n            G[i] = Integer.parseInt(st.nextToken());\n        }\n        long ans = 0;\n        for (int mask = 1; mask < (1 << n); mask++) {\n            int sum = 0;\n            int g1 = 0;\n            int g2 = 0;\n            int g3 = 0;\n\n            for (int i = 0; i < n; i++) {\n                if (((1 << i) & mask) > 0) {\n                    sum += T[i];\n                    if (G[i] == 1) g1++;\n                    if (G[i] == 2) g2++;\n                    if (G[i] == 3) g3++;\n                }\n            }\n            cnt = 0;\n            if (sum == t) f(g1, g2, g3, -1);\n            for (long i = 1; i <= g1; i++) cnt *= i;\n            for (long i = 1; i <= g2; i++) cnt *= i;\n            for (long i = 1; i <= g3; i++) cnt *= i;\n            ans += cnt;\n        }\n        System.out.println(ans % 1000000007);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        inputClass in = new inputClass(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1PlaylistForPolycarpEasyVersion solver = new G1PlaylistForPolycarpEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1PlaylistForPolycarpEasyVersion solver = new G1PlaylistForPolycarpEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1PlaylistForPolycarpEasyVersion solver = new G1PlaylistForPolycarpEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader scan = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(scan.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int t = Integer.parseInt(st.nextToken());\n        int T[] = new int[n];\n        int G[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            st = new StringTokenizer(scan.readLine());\n            T[i] = Integer.parseInt(st.nextToken());\n            G[i] = Integer.parseInt(st.nextToken());\n        }\n        long ans = 0;\n        for (int mask = 1; mask < (1 << n); mask++) {\n            int sum = 0;\n            int g1 = 0;\n            int g2 = 0;\n            int g3 = 0;\n\n            for (int i = 0; i < n; i++) {\n                if (((1 << i) & mask) > 0) {\n                    sum += T[i];\n                    if (G[i] == 1) g1++;\n                    if (G[i] == 2) g2++;\n                    if (G[i] == 3) g3++;\n                }\n            }\n            cnt = 0;\n            if (sum == t) f(g1, g2, g3, -1);\n            for (long i = 1; i <= g1; i++) cnt *= i;\n            for (long i = 1; i <= g2; i++) cnt *= i;\n            for (long i = 1; i <= g3; i++) cnt *= i;\n            ans += cnt;\n        }\n        System.out.println(ans % 1000000007);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint t = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[n];\n\t\tint[] bb = new int[n];\n\t\tint[] cc = new int[n];\n\t\tint na = 0, nb = 0, nc = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint g = Integer.parseInt(st.nextToken());\n\t\t\tif (g == 1)\n\t\t\t\taa[na++] = a;\n\t\t\telse if (g == 2)\n\t\t\t\tbb[nb++] = a;\n\t\t\telse\n\t\t\t\tcc[nc++] = a;\n\t\t}\n\t\tint[][][] dp = init(n, na, nb, nc);\n\t\tint[][][] dab = solve2(aa, bb, t, na, nb);\n\t\tint[][] dc = solve1(cc, t, nc);\n\t\tint ans = 0;\n\t\tfor (int tab = 0; tab <= t; tab++) {\n\t\t\tint tc = t - tab;\n\t\t\tfor (int ma = 0; ma <= na; ma++)\n\t\t\t\tfor (int mb = 0; mb <= nb; mb++) {\n\t\t\t\t\tint xab = dab[tab][ma][mb];\n\t\t\t\t\tif (xab == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int mc = 0; mc <= nc; mc++) {\n\t\t\t\t\t\tint xc = dc[tc][mc];\n\t\t\t\t\t\tif (xc == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tans = (int) ((ans + (long) xab * xc % MD * dp[ma][mb][mc]) % MD);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n\t\tString[] dat = br.readLine().split(\" \");\n\n\t\tint n = Integer.parseInt(dat[0]);\n\t\tint T = Integer.parseInt(dat[1]);\n\n\t\tint[] st = new int[n];\n\t\tbyte[] sg = new byte[n];\n\n\t\tdp = new int[1 << (n + 1)][4];\n\n\t\tfor (int j = 0; j < 1 << (n + 1); j++) {\n\t\t\tfor (int k = 0; k < 4; k++) {\n\t\t\t\tdp[j][k] = -1;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdat = br.readLine().split(\" \");\n\t\t\tst[i] = Integer.parseInt(dat[0]);\n\t\t\tsg[i] = Byte.parseByte(dat[1]);\n\t\t}\n\n\t\tshort visited = 0;\n\n\t\tint count = recur(0, visited, st, sg, T, 0);\n\n\t\tbw.write(count + \"\\n\");\n\n\t\tbw.close();\n\n\t}\n", "complexity": "np"}
{"code": "    public static void main (String[] args) throws Exception {\n        String st[]=nl();\n        n=pi(st[0]);\n        T=pi(st[1]);\n        input=new int[n];\n        type=new int[n];\n        for(int i=0;i<n;i++){\n            st=nl();\n            input[i]=pi(st[0]);\n            type[i]=pi(st[1]);\n        }\n        dp=new long[1<<n][4];\n        for(long arr[]:dp)\n            Arrays.fill(arr,-1);\n        long ans=dfs(0,0);\n       // debug(dp);\n\n        out.println(ans);\n/****************************************Solutions Ends**************************************************/\n        out.flush();\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        G1PlaylistForPolycarpEasyVersion solver = new G1PlaylistForPolycarpEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint t = Integer.parseInt(st.nextToken());\n\t\tint[] aa = new int[n];\n\t\tint[] bb = new int[n];\n\t\tint[] cc = new int[n];\n\t\tint na = 0, nb = 0, nc = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint g = Integer.parseInt(st.nextToken());\n\t\t\tif (g == 1)\n\t\t\t\taa[na++] = a;\n\t\t\telse if (g == 2)\n\t\t\t\tbb[nb++] = a;\n\t\t\telse\n\t\t\t\tcc[nc++] = a;\n\t\t}\n\t\tint[][][] dp = init(n, na, nb, nc);\n\t\tint[][][] dab = solve2(aa, bb, t, na, nb);\n\t\tint[][] dc = solve1(cc, t, nc);\n\t\tint ans = 0;\n\t\tfor (int tab = 0; tab <= t; tab++) {\n\t\t\tint tc = t - tab;\n\t\t\tfor (int ma = 0; ma <= na; ma++)\n\t\t\t\tfor (int mb = 0; mb <= nb; mb++) {\n\t\t\t\t\tint xab = dab[tab][ma][mb];\n\t\t\t\t\tif (xab == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int mc = 0; mc <= nc; mc++) {\n\t\t\t\t\t\tint xc = dc[tc][mc];\n\t\t\t\t\t\tif (xc == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tans = (int) ((ans + (long) xab * xc % MD * dp[ma][mb][mc]) % MD);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Solution();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int x0 = in.nextInt(), y0 = in.nextInt(), n = in.nextInt();\n        for (int i = 0; i < n; i++) {\n            x[i] = in.nextInt();\n            y[i] = in.nextInt();\n        }\n        x[n] = x0;\n        y[n] = y0;\n        int[][] gra = new int[26][26];\n        for (int i = 0; i < n + 1; i++) {\n            for (int j = i+1; j < n+1; j++) {\n                gra[i][j] = gra[j][i] = dis(i,j);\n            }\n        }\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for (int i = 0; i < 1 << n; i++) {\n            if (dp[i] != -1) {\n                for (int j = 0; j < n; j++) {\n                    if (((1<<j)&i) == 0) {\n                        int t = i | (1<<j), tmp = dp[i] + 2*gra[j][n];\n                        if (dp[t] == -1 || dp[t] > tmp) {\n                            dp[t] = tmp;\n                            pre[t] = i;\n                        }\n                        for (int k = 0; k < n; k++) {\n                            if ((t&(1<<k)) == 0) {\n                                int t2 = t | (1<<k), tmp2 = dp[i] + gra[n][j] + gra[j][k] + gra[k][n];\n                                if (dp[t2] == -1 || dp[t2] > tmp2) {\n                                    dp[t2] = tmp2;\n                                    pre[t2] = i;\n                                }\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        int end = (1<<n)-1, cnt = 0;\n        int[] ans = new int[60];\n        System.out.println(dp[end]);\n        while (end != 0) {\n            int pr = pre[end];\n            int tem = pr^end;\n            int a = 0, b = 0;\n            for (int i = 0; i < n; i++) {\n                if (((1<<i)&tem)!=0) {\n                    b=a;\n                    a=i+1;\n                }\n            }\n            ans[cnt++] = 0;\n            ans[cnt++] = a;\n            if (b>0) {\n                ans[cnt++] = b;\n            }\n            end = pr;\n        }\n        ans[cnt++] = 0;\n        for (int i = cnt-1; i >= 0; i--) {\n            System.out.print(ans[i] + \" \");\n        }\n        System.out.print(\"\\n\");\n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    new CF_8C().run();\n  }\n", "complexity": "np"}
{"code": "public static void main(String[] args) throws IOException {       \n   new Thread(new Main()).start();\n//\tnew Main().run();\n}\n", "complexity": "np"}
{"code": "    public static void main(String args[]) throws Exception{\n\t   new Main().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String[] line = in.readLine().split(\" \");\n        int Xs = Integer.parseInt(line[0]);\n        int Ys = Integer.parseInt(line[1]);\n        int n = Integer.parseInt(in.readLine());\n        \n        int[][] points = new int[n+1][2];\n        points[n][0] = Xs;//set starting point as last point for finding distances\n        points[n][1] = Ys;\n        \n        for(int i=0; i< n ; i++)\n        {\n            line = in.readLine().split(\" \");\n            points[i][0] = Integer.parseInt(line[0]);\n            points[i][1] = Integer.parseInt(line[1]);\n        }\n        \n        \n        int[][] distances = new int[n+1][n+1];\n        ComputeDistances(points, distances, n);\n        \n        int[] dp = new int[1<<n];\n        int[] path = new int[1<<n];\n        ComputeLowestPath(dp, path, distances, n);\n        OutputLowestAndPath(dp, path, n);\n        \n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew CF8C().runIO();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        Point start = new Point(in.nextInt(), in.nextInt());\n        n = in.nextInt();\n        Point[] A = new Point[n];\n        for (int i = 0; i < n; i++)\n            A[i] = new Point(in.nextInt(), in.nextInt());\n        DP = new int[1 << n];\n        Next = new Point[1 << n];\n        Arrays.fill(DP, -1);\n        pair = new int[n][n];\n        single = new int[n];\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n; j++) {\n                int dx1 = A[i].x - start.x;\n                int dy1 = A[i].y - start.y;\n                int dx2 = A[j].x - A[i].x;\n                int dy2 = A[j].y - A[i].y;\n                int dx3 = A[j].x - start.x;\n                int dy3 = A[j].y - start.y;\n                pair[i][j] = dx1 * dx1 + dy1 * dy1 + dx2 * dx2 + dy2 * dy2\n                        + dx3 * dx3 + dy3 * dy3;\n                single[i] = 2 * (dx1 * dx1 + dy1 * dy1);\n            }\n        int ans = get(0);\n        System.out.println(ans);\n        int mask = 0;\n        while (mask + 1 != (1 << n)) {\n            Point temp = Next[mask];\n            if (temp.y == -1)\n                System.out.print(\"0 \" + (temp.x + 1) + \" \");\n            else {\n                System.out\n                        .print(\"0 \" + (temp.x + 1) + \" \" + (temp.y + 1) + \" \");\n                mask |= (1 << temp.y);\n            }\n            mask |= (1 << temp.x);\n        }\n        System.out.println(\"0\");\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\t// generateRandom();\n\t\t\n\t\tint[] pt = readPoint(s);\n\t\tint n = Integer.valueOf(s.readLine());\n\t\tint[][] xp = new int[n+1][];\n\t\tfor (int i = 1 ; i <= n ; i++) {\n\t\t\txp[i] = readPoint(s);\n\t\t}\n\t\txp[0] = pt;\n\t\t\n\t\tint[][] dist = new int[n+1][n+1];\n\t\tfor (int i = 0 ; i <= n ; i++) {\n\t\t\tfor (int j = 0 ; j <= n ; j++) {\n\t\t\t\tint dx = Math.abs(xp[i][0] - xp[j][0]);\n\t\t\t\tint dy = Math.abs(xp[i][1] - xp[j][1]);\n\t\t\t\tdist[i][j] = dx*dx + dy*dy;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[][] dist2 = new int[n+1][n+1];\n\t\tfor (int i = 0 ; i <= n ; i++) {\n\t\t\tfor (int j = 0 ; j <= n ; j++) {\n\t\t\t\tdist2[i][j] = dist[0][i] + dist[i][j] + dist[j][0];\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[] dp = new int[1<<n];\n\t\tint[][] dp_prev = new int[2][1<<n];\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\n\t\tdp[0] = 0;\n\t\t\n\t\tfor (int i = 0 ; i < (1<<n) ; i++) {\n\t\t\tif (dp[i] == Integer.MAX_VALUE) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint base = dp[i];\n\t\t\t// two\n\t\t\tfor (int y = 0 ; y < n ; y++) {\n\t\t\t\tif ((i & (1<<y)) >= 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfor (int z = y+1 ; z < n ; z++) {\n\t\t\t\t\tif ((i & (1<<z)) >= 1) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tint ti = i | (1<<y) | (1<<z);\n\t\t\t\t\tint d = dist2[y+1][z+1];\n\t\t\t\t\tif (dp[ti] > base + d) {\n\t\t\t\t\t\tdp[ti] = base + d;\n\t\t\t\t\t\tdp_prev[0][ti] = z+1;\n\t\t\t\t\t\tdp_prev[1][ti] = y+1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tint bestOnes = 0;\n\t\tfor (int i = 0 ; i < (1<<n) ; i++) {\n\t\t\tif (dp[i] == Integer.MAX_VALUE) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint sub = (1<<n) - 1 - i;\n\t\t\tint add = 0;\n\t\t\tfor (int j = 0 ; j < n ; j++) {\n\t\t\t\tif ((sub & (1<<j)) >= 1) {\n\t\t\t\t\tadd += dist[0][j+1] * 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dp[i] + add < dp[(1<<n)-1]) {\n\t\t\t\tdp[(1<<n)-1] = dp[i] + add;\n\t\t\t\tbestOnes = sub;\n\t\t\t}\n\t\t}\n\t\t\n\t\tStringBuffer b = new StringBuffer();\n\t\tb.append(\" 0\");\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tif ((bestOnes & (1<<i)) >= 1) {\n\t\t\t\tb.append(\" \").append(i+1).append(\" \").append(0);\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.println(dp[(1<<n)-1]);\n\t\tint nptn = (1<<n)-1-bestOnes;\n\t\twhile (nptn >= 1) {\n\t\t\tint i1 = dp_prev[0][nptn];\n\t\t\tint i2 = dp_prev[1][nptn];\n\t\t\tif (i1 >= 1) {\n\t\t\t\tnptn -= 1<<(i1-1);\n\t\t\t\tb.append(\" \").append(i1);\n\t\t\t}\n\t\t\tif (i2 >= 1) {\n\t\t\t\tnptn -= 1<<(i2-1);\n\t\t\t\tb.append(\" \").append(i2);\n\t\t\t}\n\t\t\tb.append(\" \").append(0);\n\t\t}\n\t\tout.println(b.substring(1));\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Order()).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner();\n        PrintWriter out = new PrintWriter(System.out);\n        // System.out.println(1 << 24);\n        hand = new Point(in.nextInt(), in.nextInt());\n        n = in.nextInt();\n        data = new Point[n];\n        for (int i = 0; i < n; i++) {\n            data[i] = new Point(in.nextInt(), in.nextInt());\n        }\n        pre = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                pre[i][j] = distance(data[i], data[j]);\n            }\n        }\n\n\n        next = new int[1 << n];\n        dp = new int[1 << n];\n        Arrays.fill(dp, -1);\n\n        out.println(cal(0));\n\n\n        int start = 0;\n\n        do {\n            int m = next[start];\n            int val = m - start;\n            out.print(0 + \" \");\n            for (int i = 0; i < n; i++) {\n                if (((1 << i) & val) != 0) {\n                    out.print((i + 1) + \" \");\n                }\n            }\n            // out.print(0 + \" \")  ;\n            start = m;\n        } while (start != (1 << n) - 1);\n        out.println(0);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String[] parsedString = parsedString = in.readLine().split(\" \");\n        int xStart = parseInt(parsedString[0]);\n        int yStart = parseInt(parsedString[1]);\n        int objectNum = parseInt(in.readLine());\n\n        int[] xLocs = new int[objectNum + 1];\n        int[] yLocs = new int[objectNum + 1];\n        int[] bitMasks = new int[1 << objectNum];\n        Arrays.fill(bitMasks, MAX_VALUE);\n        int[] previous = new int[1 << objectNum];\n\n        xLocs[objectNum] = xStart;\n        yLocs[objectNum] = yStart;\n        for (int i = 0; i < objectNum; i++) {\n            parsedString = in.readLine().split(\" \");\n            xLocs[i] = parseInt(parsedString[0]);\n            yLocs[i] = parseInt(parsedString[1]);\n        }\n\n        //go through all pairs and find time requirement for each pair of objects\n        //the entry at point [i][j] is equal to the time it takes to get from point i to point j\n        int[][] times = new int[objectNum + 1][objectNum + 1];\n        for (int i = 0; i <= objectNum; i++) {\n            for (int j = 0; j <= objectNum; j++) {\n                times[i][j] = times[j][i] = (xLocs[i] - xLocs[j]) * (xLocs[i] - xLocs[j]) + (yLocs[i] - yLocs[j]) * (yLocs[i] - yLocs[j]);\n            }\n        }\n\n        //each value in bitmasks represents the minimum time necessary to get\n        //the unmasked bits\n        //so bitmasks[5] (5=101) is the fastest time in which you can get\n        //items 1 and 3\n        bitMasks[0] = 0; //collecting zero objects takes 0 time\n        for (int i = 0; i < (1 << objectNum); i++) {\n            if (bitMasks[i] != MAX_VALUE) {\n                for (int j = 0; j < objectNum; j++) {\n                    if (((1 << j) & i) == 0) { //if our current j object hasn't been picked up yet\n                        int curState = (1 << j) | i; //ith state after picking up j object\n                        int curTime = bitMasks[i] + 2 * times[objectNum][j]; //time required to get object j from bag at state i\n\n                        if (curTime < bitMasks[curState]) {\n                            bitMasks[curState] = curTime; //put fastest time in for gettingto our current state\n                            previous[curState] = i;\n                        }\n\n                        //find another thing while you're out\n                        for (int k = 0; k < objectNum; k++) {\n                            if (((1 << k) & curState) == 0) { //if the kth position in our current state hasn't been picked up\n                                int kState = ((1 << k) | curState); //curstate after picking up the kth object\n                                //kTime is time it takes to go from bag, to j, to k and back\n                                int kTime = bitMasks[i] + times[objectNum][j] + times[j][k] + times[k][objectNum];\n\n                                if (kTime < bitMasks[kState]) {\n                                    bitMasks[kState] = kTime;  //put shortest time for getting to kState in\n                                    previous[kState] = i;\n                                }\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n        int finalState = (1 << objectNum) - 1;\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(bitMasks[finalState]).append('\\n');\n\n        Deque<Integer> outputQ = new ArrayDeque<>();\n        outputQ.add(0);\n        int curState = finalState;\n        while (curState > 0) {\n            //difference is the objects picked up in this state but not in previous state\n            int difference = curState ^ previous[curState];\n            int firstItem = -1;\n            int secondItem = -1;\n\n            for (int i = 0; i < objectNum; i++) {\n                if (((1 << i) & difference) > 0) { //if the ith object was picked up in this state\n                    secondItem = firstItem; //keep track of how many items are picked up\n                    firstItem = i;\n                }\n            }\n\n            if (secondItem != -1) {\n                //put in two items followed by a return to 0\n                outputQ.add(firstItem + 1);\n                outputQ.add(secondItem + 1);\n                outputQ.add(0);\n            } else {\n                outputQ.add(firstItem + 1);\n                outputQ.add(0);\n            }\n\n            curState = previous[curState];\n        }\n\n        sb.append(outputQ.removeLast());\n        while (!outputQ.isEmpty()) {\n            sb.append(' ').append(outputQ.removeLast());\n        }\n        System.out.print(sb);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tout = new PrintWriter(System.out);\n\n\t\to = new Point(sc.nextInt(), sc.nextInt());\n\t\tn = sc.nextInt();\n\t\ta = new Point[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = new Point(sc.nextInt(), sc.nextInt());\n\t\t\n\t\tdp = new int[(1 << n) + 5];\n\t\tArrays.fill(dp, -1);\n\t\tout.println(rec(0));\n\t\tout.print(0 + \" \");\n\t\tpath(0);\n\t\tout.println();\n\t\t\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().solve();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(in);\n\n        int x = sc.nextInt();\n        int y = sc.nextInt();\n\n        n = sc.nextInt();\n        int[] dx = new int[n];\n        int[] dy = new int[n];\n\n        for(int i=0;i<n;i++){\n            dx[i] = sc.nextInt();\n            dy[i] = sc.nextInt();\n        }\n\n        d = new int[n];\n        for(int i=0;i<n;i++){\n            d[i] = (x-dx[i])*(x-dx[i]) + (y-dy[i])*(y-dy[i]);\n        }\n\n        t = new int[n][n];\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                t[i][j] = (dx[i]-dx[j])*(dx[i]-dx[j]) + (dy[i]-dy[j])*(dy[i]-dy[j]);\n            }\n        }\n//        out.println(Arrays.toString(d));\n//        out.println(Arrays.deepToString(t));\n\n        solve();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tlong prevTime = System.currentTimeMillis();\n\t\t\t\t\tnew Main().run();\n\t\t\t\t\tSystem.err.println(\"Total time: \"\n\t\t\t\t\t\t\t+ (System.currentTimeMillis() - prevTime) + \" ms\");\n\t\t\t\t\tSystem.err.println(\"Memory status: \" + memoryStatus());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1L << 24).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n\tnew Thread(new Order8C()).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Bag().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        try(Scanner in = new Scanner(System.in)) {\n            int bx = in.nextInt();\n            int by = in.nextInt();\n            int n = in.nextInt();\n            int[][] xy = new int[n][2];\n            int[] res = new int[1 << n];\n            int[] last = new int[1 << n];\n            for (int i = 0; i < n; i++) {\n                xy[i] = new int[]{in.nextInt(), in.nextInt()};\n            }\n            int[] ds = new int[n];\n            for (int i = 0; i < ds.length; i++) {\n                ds[i] = time(xy[i][0], xy[i][1], bx, by);\n            }\n            int[][] d = new int[n][n];\n            for (int i = 0; i < d.length; i++) {\n                for (int j = 0; j < d.length; j++) {\n                    d[i][j] = time(xy[i][0], xy[i][1], xy[j][0], xy[j][1]);\n                }\n            }\n            Arrays.fill(res, Integer.MAX_VALUE);\n            res[0] = 0;\n            for (int i = 0; i < (1 << n); i++) {\n                for (int j = 0; j < n; j++) {\n                    if ((i & mask(j)) != 0) {\n                        if (res[i - mask(j)] + 2*ds[j] < res[i]) {\n                            res[i] = res[i - mask(j)] + 2*ds[j];\n                            last[i] = i - mask(j);\n                        }\n                        for (int k = j + 1; k < n; k++) {\n                            if ((i & mask(k)) != 0) {\n                                if (res[i - mask(k) - mask(j)] + ds[j] + ds[k] + d[j][k] < res[i]) {\n                                    res[i] = res[i - mask(k) - mask(j)] + ds[j] + ds[k] + d[j][k];\n                                    last[i] = i - mask(j) - mask(k);\n                                }\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n\n            int cur = (1 << n) - 1;\n            System.out.println(res[cur]);\n            int k = cur;\n            while (k != 0) {\n                System.out.print(\"0 \");\n                int diff = k - last[k];\n                for (int i = 0; i < n && diff != 0; i++) {\n                    if (((diff >> i) & 1) != 0) {\n                        System.out.print((i + 1) + \" \");\n                        diff -= (1 << i);\n                    }\n                }\n                k = last[k];\n            }\n            System.out.println(\"0\");\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args)\n        new C();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Throwable {\n//      Thread t = new Thread(null, new Main(), \"1\", 1 << 27);\n//      t.start();\n//      t.join();\n        new Main().run();\n        if (sError instanceof OutOfMemoryError) {\n            throw sError;\n        }\n//      if (sError != null) {\n//          throw sError;\n//      }\n    }\n", "complexity": "np"}
{"code": "public static void main(String[] args)\n    Scanner input = new Scanner(System.in);\n    int x = input.nextInt(), y = input.nextInt();\n    int n = input.nextInt();\n    int[] xs = new int[n], ys = new int[n];\n    for(int i = 0; i<n; i++)\n    {\n        xs[i] = input.nextInt();\n        ys[i] = input.nextInt();\n    }\n    ds = new int[n];\n    g = new int[n][n];\n    for(int i = 0; i<n; i++)\n    {\n        ds[i] = (x - xs[i])  *  (x - xs[i]) + (y - ys[i]) * (y - ys[i]);\n        for(int j = 0; j<n; j++)\n        {\n            g[i][j] = (xs[i] - xs[j]) * (xs[i] - xs[j]) + (ys[i] - ys[j]) * (ys[i] - ys[j]);\n        }\n    }\n    int[] dp = new int[1<<n];\n    Arrays.fill(dp, 987654321);\n    dp[0] = 0;\n    for(int i = 0; i<(1<<n); i++)\n    {\n        if(dp[i] == 987654321) continue;\n        for(int a = 0; a<n; a++)\n        {\n            if((i & (1<<a)) > 0) continue;\n            dp[i | (1<<a)] = Math.min(dp[i | (1<<a)], dp[i] + 2*ds[a]);\n            for(int b = a+1; b<n; b++)\n            {\n                if((i & (1<<b)) > 0) continue;\n                dp[i | (1<<a) | (1<<b)] = Math.min(dp[i | (1<<a) | (1<<b)], dp[i] + ds[a] + ds[b] + g[a][b]);\n            }\n            break;\n        }\n    }\n    Stack<Integer> stk = new Stack<Integer>();\n    stk.add(0);\n    int i = (1<<n) - 1;\n    //System.out.println(Arrays.toString(dp));\n\n    trace:\n    while(i > 0)\n    {\n        //System.out.println(i);\n        for(int a = 0; a<n; a++)\n        {\n            if((i & (1<<a)) == 0) continue;\n            if( dp[i] == dp[i - (1<<a)] + 2*ds[a])\n            {\n                stk.add(a+1);\n                stk.add(0);\n                i -= (1<<a);\n                continue trace;\n            }\n            for(int b = a+1; b<n; b++)\n            {\n                if((i & (1<<b)) == 0) continue;\n                if(dp[i] == dp[i - (1<<a) - (1<<b)] + ds[a] + ds[b] + g[a][b])\n                {\n                    stk.add(a+1);\n                    stk.add(b+1);\n                    stk.add(0);\n                    i -= (1<<a) + (1<<b);\n                    continue trace;\n                }\n            }\n            //break;\n        }\n    }\n    System.out.println(dp[(1<<n) - 1]);\n    while(!stk.isEmpty()) System.out.print(stk.pop()+\" \");\n}\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    try {\n      in = new BufferedReader(new InputStreamReader(System.in));\n      out = new PrintWriter(System.out);\n      solve();\n      out.close();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tPoint s = new Point(sc.nextInt(), sc.nextInt());\n\t\tn = sc.nextInt();\n\t\tPoint[] a = new Point[n];\n\t\tfor(int i = 0; i < n; ++i)\n\t\t\ta[i] = new Point(sc.nextInt(), sc.nextInt());\n\t\tdS = new int[n];\n\t\tdd = new int[n][n];\n\t\tfor(int i = 0; i < n; ++i)\n\t\t{\n\t\t\tdS[i] = dist2(s, a[i]);\n\t\t\tfor(int j = 0; j < n; ++j)\n\t\t\t\tdd[i][j] = dist2(a[i], a[j]);\n\t\t}\n\n\t\tmemo = new int[1 << n];\n\t\tArrays.fill(memo, -1);\n\t\tout.println(dp(0, 0));\n\t\tprint(0, 0);\n\t\tout.println(sb);\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Throwable {\n        Thread t = new Thread(new Main());\n        t.start();\n        t.join();\n        if (sError != null)\n            throw sError;\n    }\n", "complexity": "np"}
{"code": "   public static void main(String[] args)\n      new C(new Scanner(System.in));\n   }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String[] parsedString;\n        int objectNum = 0;\n        int xStart=0;\n        int yStart=0;\n\n        parsedString = in.readLine().split(\" \");\n        xStart = Integer.parseInt(parsedString[0]);\n        yStart = Integer.parseInt(parsedString[1]);\n        objectNum = Integer.parseInt(in.readLine());\n\n        int[] xLocs = new int[objectNum+1];\n        int[] yLocs = new int[objectNum+1];\n        int[] bitMasks = new int[1<<objectNum];\n        Arrays.fill(bitMasks, -1);\n        int[] previous = new int[1<<objectNum];\n\n        xLocs[objectNum]=xStart;\n        yLocs[objectNum]=yStart;\n        for(int i=0; i<objectNum; i++){\n            parsedString = in.readLine().split(\" \");\n            xLocs[i] = Integer.parseInt(parsedString[0]);\n            yLocs[i] = Integer.parseInt(parsedString[1]);\n        }\n\n        //go through all pairs and find time requirement for each pair of objects\n        //the entry at point [i][j] is equal to the time it takes to get from point i to point j\n        int[][] times = new int[objectNum+1][objectNum+1];\n        for(int i=0;i<=objectNum;i++){\n            for(int j=0; j<=objectNum;j++){\n                times[i][j] = times[j][i] = (xLocs[i]-xLocs[j])*(xLocs[i]-xLocs[j])+(yLocs[i]-yLocs[j])*(yLocs[i]-yLocs[j]);\n            }\n        }\n\n        //each value in bitmasks represents the minimum time necessary to get\n        //the unmasked bits\n        //so bitmasks[5] (5=101) is the fastest time in which you can get\n        //items 1 and 3\n        bitMasks[0] = 0; //collecting zero objects takes 0 time\n        //1<<n makes the n+1 position in the bit string = 1\n        //1<<2 = 100\n        for (int i=0; i<(1<<objectNum); i++){\n            if(bitMasks[i]==-1) {\n\n            }else{\n                for(int j=0; j<objectNum; j++){\n                    if(((1<<j)&i) == 0){ //if our current j object hasn't been picked up yet\n                        int curState = (1<<j) | i; //ith state after picking up j object\n                        int curTime = bitMasks[i] + 2*times[objectNum][j]; //time required to get object j from bag at state i\n\n                        if(bitMasks[curState] == -1 || curTime < bitMasks[curState]){\n                            bitMasks[curState] = curTime; //put fastest time in for gettingto our current state\n                            previous[curState] = i;\n                        }\n\n\n                        for(int k=0; k<objectNum; k++){\n                            if(((1<<k) & curState) == 0){ //if the kth position in our current state hasn't been picked up\n                                int kState = ((1<<k) | curState); //curstate after picking pu kth object\n                                //kTime is time it takes to go from bag, to j, to k and back\n                                int kTime = bitMasks[i] + times[objectNum][j] + times[j][k] + times[k][objectNum];\n\n                                if(bitMasks[kState] == -1 || kTime < bitMasks[kState]){\n                                    bitMasks[kState] = kTime;  //put shortest tiem in for getting to kState\n                                    previous[kState] = i;\n                                }\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n\n        }\n\n        int finalState = (1<<objectNum)-1;\n\n        System.out.println(bitMasks[finalState]);\n\n        Deque<Integer> outputQ = new ArrayDeque<Integer>();\n        outputQ.add(0);\n        int curState = finalState;\n        while(curState>0){\n            //1100 ^ 1101 = 0001\n            //difference is the objects picked up in this state but not in previous state\n            int difference = curState ^ previous[curState];\n            int firstItem = -1;\n            int secondItem = -1;\n\n            for(int i=0; i<objectNum; i++){\n                if(((1<<i)&difference)>0){ //if the ith object was picked up in this state\n                    secondItem=firstItem; //keep track of how many items are picked up\n                    firstItem=i;\n                }\n            }\n\n            if(secondItem!=-1){\n                //put in two items followed by a return to 0\n\n                outputQ.add(firstItem+1);\n                outputQ.add(secondItem+1);\n                outputQ.add(0);\n            }\n            else{\n                outputQ.add(firstItem + 1);\n                outputQ.add(0);\n            }\n\n            curState = previous[curState];\n        }\n\n        System.out.print(outputQ.removeLast());\n        while(!outputQ.isEmpty()){\n            System.out.print(\" \");\n            System.out.print(outputQ.removeLast());\n        }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\t\t\n\t\t\n\t\tString[] input = br.readLine().split(\" \");\n\t\tItem handbag = new Item(Integer.parseInt(input[0]), Integer.parseInt(input[1]));\n\t\t\n\t\tN = Integer.parseInt(br.readLine()) + 1;\n\t\titems = new Item[N];\n\t\tfor(int n = 1; n < N; n++){\n\t\t\tinput = br.readLine().split(\" \");\n\t\t\titems[n] = new Item(Integer.parseInt(input[0]), Integer.parseInt(input[1]));\n\t\t}\t\t\n\t\titems[0] = handbag;\n\t\t\n\t\t// x << n is a right shift operator \n\t\t// which will remove the last n bits from x\n\t\t// Ex 1 << 2 => 4\n\t\tbits = new int[1 << N]; // Ex: 1 << 3 = 8; 1 << 5 = 64\n\t\tArrays.fill(bits, -1); // Init bits array to hold -1 values\n\t\t\n\t\tint ans = solve(1 << 0); // Start solving with bit #1\n\t\tpw.println(ans); // Min time needed to put items in handbag\n\t\t\n\t\tpw.print(\"0\"); // Init output with handbag location\n\t\tprintOptPath(1 << 0); // Print possible optimum path to pick up items\n\t\t\n\t\tpw.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew C().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew C().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        long start;\n        if (debug)\n            start = System.nanoTime();\n        InputStream inputStream;\n        OutputStream outputStream;\n        if (useFiles) {\n            inputStream = new FileInputStream(fileName + \".in\");\n            outputStream = new FileOutputStream(fileName + \".out\");\n        } else {\n            inputStream = System.in;\n            outputStream = System.out;\n        }\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task(in, out);\n        solver.solve();\n        if(debug)\n            out.println((System.nanoTime() - start) / 1e+9);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s = br.readLine();\n\t\tint si = s.indexOf(' ', 0);\n\t\tint x = Integer.parseInt(s.substring(0, si));\n\t\tint y = Integer.parseInt(s.substring(si + 1));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tint[] xx = new int[n + 1];\n\t\tint[] yy = new int[n + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ts = br.readLine();\n\t\t\tsi = s.indexOf(' ', 0);\n\t\t\txx[i] = Integer.parseInt(s.substring(0, si));\n\t\t\tyy[i] = Integer.parseInt(s.substring(si + 1));\n\t\t}\n\t\txx[n] = x;\n\t\tyy[n] = y;\n\t\tint[][] dd = new int[n + 1][n + 1];\n\t\tfor (int i = 0; i <= n; i++)\n\t\t\tfor (int j = i + 1; j <= n; j++) {\n\t\t\t\tint dx = xx[i] - xx[j];\n\t\t\t\tint dy = yy[i] - yy[j];\n\t\t\t\tdd[i][j] = dx * dx + dy * dy;\n\t\t\t}\n\t\tint[] aa = new int[1 << n];\n\t\tint[] bb = new int[1 << n];\n\t\tfor (int k = 1; k < 1 << n; k++) {\n\t\t\tint a = -1;\n\t\t\tfor (int b = 0; b < n; b++)\n\t\t\t\tif ((k & 1 << b) > 0) {\n\t\t\t\t\ta = b;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tint l = k ^ 1 << a;\n\t\t\tint d = dd[a][n] + dd[a][n];\n\t\t\taa[k] = aa[l] + d;\n\t\t\tbb[k] = l;\n\t\t\tfor (int b = a + 1; b < n; b++)\n\t\t\t\tif ((k & 1 << b) > 0) {\n\t\t\t\t\tl = k ^ 1 << a ^ 1 << b;\n\t\t\t\t\td = dd[a][n] + dd[b][n] + dd[a][b];\n\t\t\t\t\tif (aa[l] + d < aa[k]) {\n\t\t\t\t\t\taa[k] = aa[l] + d;\n\t\t\t\t\t\tbb[k] = l;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tint k = (1 << n) - 1;\n\t\tSystem.out.println(aa[k]);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(0);\n\t\twhile (k != 0) {\n\t\t\tint l = bb[k];\n\t\t\tint m = k ^ l;\n\t\t\tfor (int b = 0; b < n; b++)\n\t\t\t\tif ((m & 1 << b) > 0)\n\t\t\t\t\tsb.append(' ').append(b + 1);\n\t\t\tsb.append(' ').append(0);\n\t\t\tk = l;\n\t\t}\n\t\tSystem.out.println(sb);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Bag().run();\n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int ox = sc.nextInt();\n    int oy = sc.nextInt();\n    int n = sc.nextInt();\n    int[] ix = new int[n];\n    int[] iy = new int[n];\n    int[] single = new int[n];\n    int[][] pair = new int[n][n];\n    for (int i = 0; i < n; i++) {\n      ix[i] = sc.nextInt();\n      iy[i] = sc.nextInt();\n      single[i] = dis(ox, oy, ix[i], iy[i]) * 2;\n      for (int j = 0; j < i; j++) {\n        pair[i][j] = pair[j][i] = dis(ix[i], iy[i], ix[j], iy[j]) + (single[i] + single[j]) / 2;\n      }\n    }\n    int[] min = new int[1 << n];\n    int[] pre = new int[1 << n];\n    for (int set = 1; set < 1 << n; set++) {\n      int i;\n      for (i = 0; i < n; i++) {\n        if ((set & (1 << i)) != 0) {\n          break;\n        }\n      }\n      min[set] = min[set ^ (1 << i)] + single[i];\n      pre[set] = set ^ (1 << i);\n      for (int j = 0; j < n; j++) {\n        if ((set & (1 << j)) == 0) {\n          continue;\n        }\n        if (min[set] > min[set ^ (1 << i) ^ (1 << j)] + pair[i][j]) {\n          min[set] = min[set ^ (1 << i) ^ (1 << j)] + pair[i][j];\n          pre[set] = set ^ (1 << i) ^ (1 << j);\n        }\n      }\n    }\n    System.out.println(min[(1 << n) - 1]);\n    for (int set = (1 << n) - 1; set != 0; set = pre[set]) {\n      System.out.print(\"0 \");\n      for (int i = 0; i < n; i++) {\n        if (((set ^ pre[set]) & (1 << i)) != 0) {\n          System.out.print((i + 1) + \" \");\n        }\n      }\n    }\n    System.out.println(\"0\");\n    sc.close();\n  }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Bag().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tsx = in.nextInt();\n\t\tsy = in.nextInt();\n\t\tArrays.fill(dp, -2);\n\n\t\tint n = in.nextInt();\n\t\tpoints = new int[n][3];\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tpoints[i][0] = in.nextInt();\n\t\t\tpoints[i][1] = in.nextInt();\n\t\t\tpoints[i][2] = (sx - points[i][0]) * (sx - points[i][0]) + (sy - points[i][1]) * (sy - points[i][1]);\n\t\t}\n\n\t\t//System.out.println(\"ANS\");\n\t\tSystem.out.println(solve(0));\n\t\t\n\t\tint mask=0;\n\t\twhile(true){\n\t\t\tSystem.out.print(0+\" \");\n\t\t\tif (mask==(1<<n)-1) break;\n\t\t\tint x = sol[mask];\n\t\t\tint count=0;\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tif ((x&(1<<i))!=0) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tSystem.out.print((i+1)+\" \");\n\t\t\t\t\tmask|=(1<<i);\n\t\t\t\t}\n\t\t\t\tif (count==2) break;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)\n\t\tint[][] objetos = new int[n][2];\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tobjetos[i][0] = sc.nextInt();\n\t\t\tobjetos[i][1] = sc.nextInt();\n\t\t\tdistancia[i] = (X - objetos[i][0]) * (X - objetos[i][0]) + (Y - objetos[i][1]) * (Y - objetos[i][1]);\n\t\t}\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tfor(int j = 0; j < n; j++)\n\t\t\t\tdistancias[i][j] = (objetos[i][0] - objetos[j][0]) * (objetos[i][0] - objetos[j][0]) + (objetos[i][1] - objetos[j][1]) * (objetos[i][1] - objetos[j][1]);\n\t\tint ans = dp((1 << n) - 1);\n\t\tSystem.out.println(ans);\n\t\tint current = (1 << n) - 1;\n\t\twhile(current != 0)\n\t\t{\n\t\t\tint next = dpNext[current];\n\t\t\tint differents = next ^ current;\n\t\t\tSystem.out.print(\"0 \");\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\tif((differents & (1 << i)) != 0)\n\t\t\t\t\tSystem.out.print((i + 1) + \" \");\n\t\t\tcurrent = next;\n\t\t}\n\t\tSystem.out.println(\"0\");\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint xs = sc.nextInt();\n\t\tint ys = sc.nextInt();\n\t\tint n = sc.nextInt();\n\t\tint[]x = new int[n], y = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tx[i] = sc.nextInt();\n\t\t\ty[i] = sc.nextInt();\n\t\t}\n\t\tint[]single = new int[n];\n\t\tint[][]pair = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsingle[i] = 2*((x[i]-xs)*(x[i]-xs)+(y[i]-ys)*(y[i]-ys));\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i+1; j < n; j++) {\n\t\t\t\tpair[i][j] = (x[i]-xs)*(x[i]-xs)+(y[i]-ys)*(y[i]-ys)+(x[j]-xs)*(x[j]-xs)+(y[j]-ys)*(y[j]-ys)+(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);\n\t\t\t}\n\t\t}\n\t\tint[]best = new int[1 << n], prev = new int[1 << n];\n\t\tfor (int mask = 1; mask < (1 << n); mask++) {\n\t\t\tint i = 0;\n\t\t\twhile ((mask & (1 << i))==0)\n\t\t\t\ti++;\n\t\t\tbest[mask] = best[mask ^ (1 << i)]+single[i];\n\t\t\tprev[mask] = i+1;\n\t\t\tfor (int j = i+1; j < n; j++) {\n\t\t\t\tif ((mask & (1 << j)) != 0) {\n\t\t\t\t\tint temp = best[mask ^ (1 << i) ^ (1 << j)]+pair[i][j];\n\t\t\t\t\tif (temp < best[mask]) {\n\t\t\t\t\t\tbest[mask] = temp;\n\t\t\t\t\t\tprev[mask] = (i+1)*100+(j+1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(best[(1 << n) - 1]);\n\t\tSystem.out.print(\"0 \");\n\t\tint cur = (1 << n) - 1;\n\t\twhile (cur > 0) {\n\t\t\tint a = prev[cur]  % 100;\n\t\t\tint b = prev[cur] / 100;\n\t\t\tif (a > 0) {\n\t\t\t\tSystem.out.print(a+\" \");\n\t\t\t\tcur ^= 1 << (a-1);\n\t\t\t}\n\t\t\tif (b > 0) {\n\t\t\t\tSystem.out.print(b+\" \");\n\t\t\t\tcur ^= 1 << (b-1);\n\t\t\t}\n\t\t\tSystem.out.print(0+\" \");\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Bag().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\thx = sc.nextInt();\n\t\thy = sc.nextInt();\n\t\tN = sc.nextInt();\n\t\tX = new int[N];\n\t\tY = new int[N];\n\t\tfor (int i = 0; i < N; ++i) {\n\t\t\tX[i] = sc.nextInt();\n\t\t\tY[i] = sc.nextInt();\n\t\t}\n\t\tDP = new int[1 << N];\n\t\tArrays.fill(DP, -1);\n\t\tint ans = recur(0);\n\t\tArrayList<Integer> aa = new ArrayList<Integer>();\n\t\tint U = 0;\n\t\taa.add(0);\n\t\tint test = 0;\n\t\twhile (U != (1 << N) - 1) {\n\t\t\tint a = 0;\n\t\t\tfor (int i = 0; i < N; ++i) {\n\t\t\t\tif (((1 << i) & U) == 0) {\n\t\t\t\t\ta = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint ans2 = recur(U | (1 << a)) + 2 * (pw(X[a] - hx) + pw(Y[a] - hy));\n\t\t\tint temp = 2 * (pw(X[a] - hx) + pw(Y[a] - hy));\n\t\t\tint best = -1;\n\t\t\tfor (int i = a + 1; i < N; ++i) {\n\t\t\t\tif (((1 << i) & U) == 0) {\n\t\t\t\t\tint ans3 = recur(U|(1<<a)|(1<<i)) + pw(X[a]-X[i])+pw(Y[a]-Y[i]) + pw(X[a]-hx)+pw(Y[a]-hy) + pw(X[i]-hx)+pw(Y[i]-hy);\n\t\t\t\t\tif (ans3 < ans2) {\n\t\t\t\t\t\tans2 = ans3;\n\t\t\t\t\t\tans2 = ans3;\n\t\t\t\t\t\tbest = i;\n\t\t\t\t\t\ttemp = pw(X[a]-X[i])+pw(Y[a]-Y[i]) + pw(X[a]-hx)+pw(Y[a]-hy) + pw(X[i]-hx)+pw(Y[i]-hy);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (best == -1) {\n\t\t\t\taa.add(a + 1);\n\t\t\t\taa.add(0);\n\t\t\t\tU |= (1 << a);\n\t\t\t} else {\n\t\t\t\taa.add(a + 1);\n\t\t\t\taa.add(best + 1);\n\t\t\t\taa.add(0);\n\t\t\t\tU |= (1 << a) | (1 << best);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t\tfor (int i = 0; i < aa.size(); ++i) {\n\t\t\tSystem.out.print(aa.get(i) + \" \");\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    vec2 cen = new vec2(in.nextInt(),in.nextInt());\n    n = in.nextInt();\n    cost = new int[n][n];\n    vec2[] v = new vec2[n];\n    for(int i=0; i<n; i++)\n      v[i] = new vec2(in.nextInt(),in.nextInt());\n    for(int i=0; i<n; i++)\n      for(int j=0; j<n; j++)\n        cost[i][j] = v[i].dist(cen) + v[i].dist(v[j]) + v[j].dist(cen);\n    memo = new int[1<<n];\n    bb = new int[1<<n];\n    Arrays.fill(memo,-1);\n    out.println(go(0));\n    build(0);\n    out.close();\n  }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new StreamInputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        run(in, out);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tnew Thread(null, new ProblemC_008(), \"\", 128 * (1L << 20)).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        new Task2().solve();\n\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException{\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\n        String[] line=in.readLine().split(\"\\\\s+\");\n        int xs= Integer.parseInt(line[0]);\n        int ys= Integer.parseInt(line[1]);\n        int n=Integer.parseInt(in.readLine());\n        int []x=new int[n];\n        int []y=new int[n];\n        for(int i=0;i<n;++i){\n            line=in.readLine().split(\"\\\\s+\");\n            x[i]= Integer.parseInt(line[0]);\n            y[i]= Integer.parseInt(line[1]);\n        }\n        int maxBitmap=1<<n;\n        long[] dis=new long[maxBitmap];\n        int[] last=new int[maxBitmap];\n        dis[0]=0;\n        int ci=0;\n        int[][] dismap=new int[n][n];\n        \n        for(int i=0;i<n;++i){\n            for(int j=0;j<=i;++j){\n                int delx,dely;\n                if(i==j){\n                    delx=x[i]-xs;\n                    dely=y[i]-ys;\n                }else{\n                    delx=x[i]-x[j];\n                    dely=y[i]-y[j];\n                }\n                dismap[i][j]=delx*delx+dely*dely;\n            }\n        }\n        \n        for(int i=1;i<maxBitmap;++i){\n            if((i&(1<<ci))==0)\n                ++ci;\n            int i2=i-(1<<ci);\n            \n            long min=dis[i2]+2*dismap[ci][ci];\n            last[i]=ci;\n            for(int j=0;j<ci;++j){\n                if((i&(1<<j))!=0){\n                    long m=dis[i2-(1<<j)]+dismap[ci][ci]+dismap[j][j]+dismap[ci][j];\n                    if(m<min){\n                        min=m;\n                        last[i]=j;\n                    }\n                }\n            }\n            dis[i]=min;\n        }\n        \n        out.write(\"\"+dis[maxBitmap-1]);\n        out.newLine();\n        out.write(\"0\");\n        \n        int bmap=maxBitmap-1;\n        ci=n-1; \n        while(bmap!=0){\n            while((bmap&(1<<ci))==0&&ci>=0)--ci;\n            int ci2=last[bmap];\n            if(ci2!=ci){\n                out.write(\" \"+(ci+1)+\" \"+(ci2+1)+ \" 0\");\n                bmap-=(1<<ci)+(1<<ci2);\n            }else{\n                out.write(\" \"+(ci+1)+\" 0\");\n                bmap-=1<<ci;\n            }\n        }\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tnew Round8_C() ;\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new B();\n    }\n", "complexity": "np"}
{"code": "public static void main(String[] args)\n    Scanner input = new Scanner(System.in);\n    int x = input.nextInt(), y = input.nextInt();\n    int n = input.nextInt();\n    int[] xs = new int[n], ys = new int[n];\n    for(int i = 0; i<n; i++)\n    {\n        xs[i] = input.nextInt();\n        ys[i] = input.nextInt();\n    }\n    ds = new int[n];\n    g = new int[n][n];\n    for(int i = 0; i<n; i++)\n    {\n        ds[i] = (x - xs[i])  *  (x - xs[i]) + (y - ys[i]) * (y - ys[i]);\n        for(int j = 0; j<n; j++)\n        {\n            g[i][j] = (xs[i] - xs[j]) * (xs[i] - xs[j]) + (ys[i] - ys[j]) * (ys[i] - ys[j]);\n        }\n    }\n    int[] dp = new int[1<<n];\n    Arrays.fill(dp, 987654321);\n    dp[0] = 0;\n    for(int i = 0; i<(1<<n); i++)\n    {\n        if(dp[i] == 987654321) continue;\n        for(int a = 0; a<n; a++)\n        {\n            if((i & (1<<a)) > 0) continue;\n            dp[i | (1<<a)] = Math.min(dp[i | (1<<a)], dp[i] + 2*ds[a]);\n            for(int b = a+1; b<n; b++)\n            {\n                if((i & (1<<b)) > 0) continue;\n                dp[i | (1<<a) | (1<<b)] = Math.min(dp[i | (1<<a) | (1<<b)], dp[i] + ds[a] + ds[b] + g[a][b]);\n            }\n            break;\n        }\n    }\n    Stack<Integer> stk = new Stack<Integer>();\n    stk.add(0);\n    int i = (1<<n) - 1;\n    //System.out.println(Arrays.toString(dp));\n\n    trace:\n    while(i > 0)\n    {\n        //System.out.println(i);\n        for(int a = 0; a<n; a++)\n        {\n            if((i & (1<<a)) == 0) continue;\n            if( dp[i] == dp[i - (1<<a)] + 2*ds[a])\n            {\n                stk.add(a+1);\n                stk.add(0);\n                i -= (1<<a);\n                continue trace;\n            }\n            for(int b = a+1; b<n; b++)\n            {\n                if((i & (1<<b)) == 0) continue;\n                if(dp[i] == dp[i - (1<<a) - (1<<b)] + ds[a] + ds[b] + g[a][b])\n                {\n                    stk.add(a+1);\n                    stk.add(b+1);\n                    stk.add(0);\n                    i -= (1<<a) + (1<<b);\n                    continue trace;\n                }\n            }\n            //break;\n        }\n    }\n    System.out.println(dp[(1<<n) - 1]);\n    while(!stk.isEmpty()) System.out.print(stk.pop()+\" \");\n}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint xS=sc.nextInt(),yS=sc.nextInt();\n\t\tn=sc.nextInt();\n\t\tx=new int [n+1];\n\t\ty=new int [n+1];\n\t\tx[0]=xS;y[0]=yS;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\t\n\t\t\tx[i]=sc.nextInt();\n\t\t\ty[i]=sc.nextInt();\n\t\t\n\t\t}\t\n\t\tmemo=new int [1<<(n+1)];\n\t\tArrays.fill(memo,-1);\n\t\tsb=new StringBuilder();\n\n\t\tsb.append(dp(0)+\"\\n\");\n\t\tprint(0);\n\t\tsb.append(\"0\");\n\t\tSystem.out.println(sb);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Bag().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n         x=sc.nextInt();y=sc.nextInt();\n         a=new Point[sc.nextInt()];\n        for(int i=0;i<a.length;i++) {\n            a[i]=new Point(sc.nextInt(), sc.nextInt());\n        }\n        end=(1<<a.length)-1;\n        dp=new int[1<<a.length];\n        Arrays.fill(dp, -1);\n        dist=new int[a.length][a.length];\n        dist1=new int[a.length];\n        for(int i=0;i<a.length;i++) {\n            dist1[i]=(a[i].x-x)*(a[i].x-x)+(a[i].y-y)*(a[i].y-y);\n            for(int j=i+1;j<a.length;j++) {\n                \n                dist[i][j]=dist1[i]+\n                (a[j].x-a[i].x)*(a[j].x-a[i].x)+(a[j].y-a[i].y)*(a[j].y-a[i].y)+\n                (a[j].x-x)*(a[j].x-x)+(a[j].y-y)*(a[j].y-y);\n                //System.out.println(dist[i][j]);\n            }\n        }\n        path=new int[dp.length];\n        System.out.println(doit(0));\n        int e=0;\n        int cur=path[e];\n        StringBuffer bf=new StringBuffer();\n        bf.append(0+\" \");\n        int count=0;\n        for(int i=0;count<a.length;i++) {\n            //System.out.println(Integer.toBinaryString(cur)+\" \"+cur);\n            for(int j=0;j<a.length;j++) {\n                if(((1<<j)|cur)==cur) {\n                    bf.append((j+1)+\" \"); count++;\n                }\n            }\n            e|=cur;\n            cur=path[e];\n            bf.append(0+\" \");\n        }\n        System.out.println(bf);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws java.lang.Exception {\n\t\tBufferedReader kek = new BufferedReader(new InputStreamReader(System.in));\n\t\t//Scanner skek = new Scanner(System.in);\n\t\tPrintWriter outkek = new PrintWriter(System.out);\n\n\t\tString[] input = kek.readLine().split(\" \");\n\t\tint X0 = Integer.parseInt(input[0]), Y0 = Integer.parseInt(input[1]), N = Integer.parseInt(kek.readLine());\n\t\t\n\t\tint[] xCoords = new int[N + 1];\n\t\tint[] yCoords = new int[N + 1];\n\t\tint[][] distances = new int[N + 1][N + 1]; \n\t\txCoords[N] = X0;\n\t\tyCoords[N] = Y0;\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\tinput = kek.readLine().split(\" \");\n\t\t\txCoords[i] = Integer.parseInt(input[0]);\n\t\t\tyCoords[i] = Integer.parseInt(input[1]);\n\t\t}\n\t\t\n\t\tfor(int i = 0; i <= N; i++){\n\t\t\tfor(int j = i + 1; j <= N; j++){\n\t\t\t\tint temp = xCoords[i] - xCoords[j];\n\t\t\t\tint temp2 = yCoords[i] - yCoords[j];\n\t\t\t\tdistances[i][j] = (temp * temp) + (temp2 * temp2);\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[] aa = new int[1 << N];\n\t\tint[] bb = new int[1 << N];\n\t\t\n\t\tfor(int i = 1; i < 1 << N; i++){\n\t\t\tint a = -1;\n\t\t\tfor(int j = 0; j < N; j++){\n\t\t\t\tif((i & 1 << j) > 0){\n\t\t\t\t\ta = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint l = i ^ 1 << a;\n\t\t\tint dist = distances[a][N] + distances[a][N];\n\t\t\taa[i] = aa[l] + dist;\n\t\t\tbb[i] = l;\n\t\t\t\n\t\t\tfor(int k = a + 1; k < N; k++){\n\t\t\t\tif((i & 1 << k) > 0) {\n\t\t\t\t\tl = i ^ 1 << a ^ 1 << k;\n\t\t\t\t\tdist = distances[a][N] + distances[k][N] + distances[a][k];\n\t\t\t\t\tif(aa[l] + dist < aa[i]){\n\t\t\t\t\t\taa[i] = aa[l] + dist;\n\t\t\t\t\t\tbb[i] = l;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint fin = (1 << N) - 1;\n\t\toutkek.println(aa[fin]);\n\t\toutkek.print('0');\n\t\twhile (fin != 0){\n\t\t\tint temp1 = bb[fin];\n\t\t\tint temp2 = fin ^ temp1;\n\t\t\tfor(int i = 0; i < N; i++){\n\t\t\t\tif((temp2 & 1 << i) > 0){\n\t\t\t\t\toutkek.print(\" \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\toutkek.print(\" 0\");\n\t\t\tfin = temp1;\n\t\t}\n\t\tkek.close();\n\t\toutkek.close();\n\t}\t\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int x = s.nextInt();\n        int y = s.nextInt();\n        int n = s.nextInt();\n        int[] xx = new int[n+1];\n        int[] yy = new int[n+1];\n        for(int i = 0;i<n;i++){\n            xx[i] = s.nextInt();\n            yy[i] = s.nextInt();\n        }\n//        int[][] dp = new int[n][n];\n//        for(int i = 0;i<n;i++){\n//            Arrays.fill(dp[i],-1);\n//        }\n        xx[n] = x;\n        yy[n] = y;\n        int[][] dp = new int[n + 1][n + 1];\n        for (int i = 0; i <= n; i++)\n            for (int j = i + 1; j <= n; j++) {\n                int dx = xx[i] - xx[j];\n                int dy = yy[i] - yy[j];\n                dp[i][j] = dx * dx + dy * dy;\n            }\n            int[] aa = new int[1 << n];\n            int[] bb = new int[1 << n];\n            for (int k = 1; k < 1 << n; k++) {\n                int a = -1;\n                for (int b = 0; b < n; b++)\n                    if ((k & 1 << b) > 0) {\n                        a = b;\n                        break;\n                    }\n                int l = k ^ 1 << a;\n                int d = dp[a][n] + dp[a][n];\n                aa[k] = aa[l] + d;\n                bb[k] = l;\n                for (int b = a + 1; b < n; b++)\n                    if ((k & 1 << b) > 0) {\n                        l = k ^ 1 << a ^ 1 << b;\n                        d = dp[a][n] + dp[b][n] + dp[a][b];\n                        if (aa[l] + d < aa[k]) {\n                            aa[k] = aa[l] + d;\n                            bb[k] = l;\n                        }\n                    }\n            }\n            int k = (1 << n) - 1;\n            System.out.println(aa[k]);\n            StringBuilder sb = new StringBuilder();\n            sb.append(0);\n            while (k != 0) {\n                int l = bb[k];\n                int m = k ^ l;\n                for (int b = 0; b < n; b++)\n                    if ((m & 1 << b) > 0)\n                        sb.append(' ').append(b + 1);\n                sb.append(' ').append(0);\n                k = l;\n            }\n            System.out.println(sb);\n        }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main().solution();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new BetaRound8_C(), \"\", 256 * 1024 * 1024).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] arg) {\n        new MainC().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\t//long t = System.currentTimeMillis();\n\t\tnew C().run();\n\t\t//System.out.println(System.currentTimeMillis() - t);\n\t}\n", "complexity": "np"}
{"code": "public static void main(String[] args)\n    Scanner input = new Scanner(System.in);\n    int x = input.nextInt(), y = input.nextInt();\n    n = input.nextInt();\n    int[] xs = new int[n], ys = new int[n];\n    for(int i = 0; i<n; i++)\n    {\n        xs[i] = input.nextInt();\n        ys[i] = input.nextInt();\n    }\n    ds = new int[n];\n    g = new int[n][n];\n    for(int i = 0; i<n; i++)\n    {\n        ds[i] = (x - xs[i])  *  (x - xs[i]) + (y - ys[i]) * (y - ys[i]);\n        for(int j = 0; j<n; j++)\n        {\n            g[i][j] = (xs[i] - xs[j]) * (xs[i] - xs[j]) + (ys[i] - ys[j]) * (ys[i] - ys[j]);\n        }\n    }\n    int[] dp = new int[1<<n];\n    Arrays.fill(dp, 987654321);\n    dp[0] = 0;\n    for(int i = 0; i<(1<<n); i++)\n    {\n        if(dp[i] == 987654321) continue;\n        for(int a = 0; a<n; a++)\n        {\n            if((i & (1<<a)) > 0) continue;\n            dp[i | (1<<a)] = Math.min(dp[i | (1<<a)], dp[i] + 2*ds[a]);\n            for(int b = a+1; b<n; b++)\n            {\n                if((i & (1<<b)) > 0) continue;\n                dp[i | (1<<a) | (1<<b)] = Math.min(dp[i | (1<<a) | (1<<b)], dp[i] + ds[a] + ds[b] + g[a][b]);\n            }\n            break;\n        }\n    }\n    Stack<Integer> stk = new Stack<Integer>();\n    stk.add(0);\n    int i = (1<<n) - 1;\n    //System.out.println(Arrays.toString(dp));\n\n    trace:\n    while(i > 0)\n    {\n        //System.out.println(i);\n        for(int a = 0; a<n; a++)\n        {\n            if((i & (1<<a)) == 0) continue;\n            if( dp[i] == dp[i - (1<<a)] + 2*ds[a])\n            {\n                stk.add(a+1);\n                stk.add(0);\n                i -= (1<<a);\n                continue trace;\n            }\n            for(int b = a+1; b<n; b++)\n            {\n                if((i & (1<<b)) == 0) continue;\n                if(dp[i] == dp[i - (1<<a) - (1<<b)] + ds[a] + ds[b] + g[a][b])\n                {\n                    stk.add(a+1);\n                    stk.add(b+1);\n                    stk.add(0);\n                    i -= (1<<a) + (1<<b);\n                    continue trace;\n                }\n            }\n            //break;\n        }\n    }\n    System.out.println(dp[(1<<n) - 1]);\n    while(!stk.isEmpty()) System.out.print(stk.pop()+\" \");\n}\n", "complexity": "np"}
{"code": "    public static void main(String args[]) throws Exception {\n        new C0008();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String [] args) throws IOException\n\t\tnew Thread(null, new Main(), \"\", 1 << 20).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)\n\t\t(new LookingForOrder()).main();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputReader0 in = new InputReader0(System.in);\n\t\tint x = in.nextInt(), y = in.nextInt();\n\t\tint n = in.nextInt();\n\t\tr = 1 << n;\n\t\tv = r - 1;\n\t\tdp = new int[r];\n\t\tnextstate = new int[r];\n\t\tpos = new int[n + 1][2];\n\t\tpos[0][0] = x;\n\t\tpos[0][1] = y;\n\t\tfor (int i = 1; i < pos.length; i++) {\n\t\t\tpos[i][0] = in.nextInt();\n\t\t\tpos[i][1] = in.nextInt();\n\t\t}\n\t\tdist = new int[n + 1][n + 1];\n\t\tfor (int i = 0; i < dist.length; i++) {\n\t\t\tfor (int j = i + 1; j < dist.length; j++) {\n\t\t\t\tdist[i][j] = dist[j][i] = distace(pos[i][0], pos[j][0], pos[i][1], pos[j][1]);\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(solve(0));\n\t\tSystem.out.print(\"0 \");\n\t\tprint(0);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Bag().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\thx = sc.nextInt();\n\t\thy = sc.nextInt();\n\t\tN = sc.nextInt();\n\t\tX = new int[N];\n\t\tY = new int[N];\n\t\tfor(int i = 0; i < N;i++){\n\t\t\tX[i] = sc.nextInt();\n\t\t\tY[i] = sc.nextInt();\n\t\t}\n\t\tDP = new int[1<<N];\n\t\tArrays.fill(DP,-1);\n\t\tint ans = recur(0);\n\t\tArrayList<Integer> aa = new ArrayList<Integer>();\n\t\tint U = 0;\n\t\taa.add(0);\n\t\tint test = 0;\n\t\twhile(U != (1<<N)-1){\n\t\t\tint a = 0;\n\t\t\tfor(int i = 0; i < N;i++)\n\t\t\t\tif(((1<<i)&U) == 0){\n\t\t\t\t\ta = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\t\t\n\t\t\tint ans2 = recur(U|(1<<a))+2*(pw(X[a]-hx)+pw(Y[a]-hy));\n\t\t\tint temp = 2*(pw(X[a]-hx)+pw(Y[a]-hy));\n\t\t\tint best = -1;\n\t\t\tfor(int i = a+1;i<N;i++){\n\t\t\t\tif(((1<<i)&U) == 0){\n\t\t\t\t\tint ans3 = pw(X[a]-X[i])+pw(Y[a]-Y[i])+pw(X[a]-hx)+pw(Y[a]-hy)+pw(X[i]-hx)+pw(Y[i]-hy)+recur(U|(1<<a)|(1<<i));\n\t\t\t\t\tif(ans3 < ans2){\n\t\t\t\t\t\tans2 = ans3;\n\t\t\t\t\t\tbest = i;\n\t\t\t\t\t\ttemp = pw(X[a]-X[i])+pw(Y[a]-Y[i])+pw(X[a]-hx)+pw(Y[a]-hy)+pw(X[i]-hx)+pw(Y[i]-hy);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(best == -1){\n\t\t\t\taa.add(a+1);\n\t\t\t\taa.add(0);\n\t\t\t\tU |= (1<<a);\n\t\t\t}else{\n\t\t\t\taa.add(a+1);\n\t\t\t\taa.add(best+1);\n\t\t\t\taa.add(0);\n\t\t\t\tU |= (1<<a) | (1<<best);\n\t\t\t}\n\t\t\ttest += temp;\n\t\t}\n//\t\tSystem.out.println(test);\n\t\tif(test != ans)\n\t\t\tthrow new RuntimeException();\n\t\tSystem.out.println(ans);\n\t\tfor(int i = 0; i < aa.size();i++)\n\t\t\tSystem.out.print(aa.get(i)+(i == aa.size()-1?\"\":\" \"));\n\t\tSystem.out.println();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)\n\t\tint[][] objetos = new int[n][2];\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tobjetos[i][0] = sc.nextInt();\n\t\t\tobjetos[i][1] = sc.nextInt();\n\t\t\tdistancia[i] = (X - objetos[i][0]) * (X - objetos[i][0]) + (Y - objetos[i][1]) * (Y - objetos[i][1]);\n\t\t}\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tfor(int j = 0; j < n; j++)\n\t\t\t\tdistancias[i][j] = (objetos[i][0] - objetos[j][0]) * (objetos[i][0] - objetos[j][0]) + (objetos[i][1] - objetos[j][1]) * (objetos[i][1] - objetos[j][1]);\n\t\tint ans = dp((1 << n) - 1);\n\t\tSystem.out.println(ans);\n\t\tint current = (1 << n) - 1;\n\t\twhile(current != 0)\n\t\t{\n\t\t\tint next = dpNext[current];\n\t\t\tint differents = next ^ current;\n\t\t\tSystem.out.print(\"0 \");\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\tif((differents & (1 << i)) != 0)\n\t\t\t\t\tSystem.out.print((i + 1) + \" \");\n\t\t\tcurrent = next;\n\t\t}\n\t\tSystem.out.println(\"0\");\n\t}\n", "complexity": "np"}
{"code": "  public static void main(String[] args) throws Exception {\n    Reader.init(System.in);\n    BufferedWriter cout = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    x[0] = Reader.nextInt();\n    y[0] = Reader.nextInt();\n    n = Reader.nextInt();\n    for (int i=1; i<=n; i++) {\n      x[i] = Reader.nextInt();\n      y[i] = Reader.nextInt();\n    }\n    for (int i=0; i<=n; i++)\n      for (int j=0; j<=n; j++)\n        dist[i][j] = sqr(x[i] - x[j]) + sqr(y[i] - y[j]);\n    \n    int[] f = new int[1 << n];\n    int[] r = new int[1 << n];\n    for (int mask=1; mask<(1 << n); mask++) {\n      int lowbit = mask & -mask;\n      int lowbitPos = bitPos[lowbit % M];\n      f[mask] = dist[lowbitPos + 1][0] * 2 + f[mask ^ lowbit];\n      r[mask] = lowbit;\n        for (int i=mask^(lowbit); i>0; i=i^(i & -i)) {\n          int otherBit = i & -i;\n          int otherBitPos = bitPos[otherBit % M];\n          int tmp = dist[0][lowbitPos + 1] + dist[lowbitPos + 1][otherBitPos + 1] + dist[otherBitPos + 1][0] + f[mask ^ otherBit ^ lowbit];\n          if (tmp < f[mask]) {\n            f[mask] = tmp;\n            r[mask] = lowbit | otherBit;\n          }\n      }\n    }\n    \n    System.out.println(f[(1 << n) - 1]);\n    int mask = (1 << n) - 1;\n    while(mask > 0) {\n      if ((r[mask] ^ (r[mask] & -r[mask])) == 0) {\n        System.out.print(\"0 \" + (bitPos[r[mask] % M] + 1) + \" \");\n      }\n      else {\n        int bit1 = r[mask] & -r[mask];\n        int bit2 = r[mask] ^ bit1;\n        System.out.print(\"0 \" + (bitPos[bit1 % M] + 1) + \" \" + (bitPos[bit2 % M] + 1) + \" \");\n      }\n      mask ^= r[mask];\n    }\n    System.out.println(\"0\");\n      \n    cout.close();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tori = new Coor(in.nextInt(),in.nextInt());\n\t\tn = in.nextInt();\n\t\tp = new Coor[n];\n\t\tdp = new int[1<<n];\n\t\tpre = new Coor[1<<n];\n\t\tfor (int i = 0;i < n;i++) {\n\t\t\tp[i] = new Coor(in.nextInt(),in.nextInt());\n\t\t}\n\t\tArrays.fill(dp,-1);\n\t\tdp[0] = 0;\n\t\tSystem.out.println( getdp((1<<n)-1));\n\t\t//System.out.printf(\"%d\",0);\n\t\tSystem.out.printf(\"%d\",0);\n\t\ttrace((1<<n)-1);\n\t\tSystem.out.println();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Bag().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException\t{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tState curr = new State(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n\t\tn = Integer.parseInt(br.readLine());\n\t\tState[] list = new State[n];\n\t\tfor(int i = 0; i < n; i++)\t{\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tlist[i] = new State(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n\t\t}\n\t\tdist = new int[n][n];\n\t\thome = new int[n];\n\t\tfor(int i = 0; i < n; i++)\t{\n\t\t\thome[i] = dist(curr, list[i]);\n\t\t}\n\t\tfor(int i = 0; i < n; i++)\t{\n\t\t\tdist[i][i] = 2 * home[i];\n\t\t\tfor(int j = i+1; j < n; j++)\t\t{\n\t\t\t\tdist[i][j] = dist(list[i], list[j]) + home[i] + home[j];\n\t\t\t}\n\t\t}\n\t\tbest = new int[1 << (n)];\n\t\tArrays.fill(best, -1);\n\t\tbest[0] = 0;\n\t\tSystem.out.println(solve(-1 + (1<<n)));\n\t\tret = new LinkedList<Integer>();\n\t\tresolve(-1 + (1<<n));\n\t\tfor(int x: ret)\n\t\t\tSystem.out.print(x + \" \");\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tpw = new PrintWriter(System.out);\n\t\t\n\t\tbag = new int[2];\n\t\tbag[0] = sc.nextInt();\n\t\tbag[1] = sc.nextInt();\n\t\t\n\t\tn = sc.nextInt();\n\t\titems = new int[n][2];\n\t\t\n\t\tfor(int i = 0;i<n;i++)\n\t\t{\n\t\t\titems[i][0] = sc.nextInt();\n\t\t\titems[i][1] = sc.nextInt();\n\t\t}\n\t\t\n\t\t//System.out.println((items[0][1]-bag[1])*(items[0][1]-bag[1]));\n\t\t\n\t\t\n\t\tmem = new int[1<<n];\n\t\t\n\t\tArrays.fill(mem, -1);\n\t\t\n\t\tpw.println(dp(0));\n\t\ttrace(0);\n\t\tpw.print(0);\n\t\t\n\t\tpw.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        init();\n        Scanner s = new Scanner(System.in);\n        x = s.nextInt(); y = s.nextInt();\n        n = s.nextInt();\n        xs = new int[n]; ys = new int[n];\n        tb = new int[1 << n]; prevs = new int[1 << n];\n\n        for (int i = 0; i < n; i++) {\n            xs[i] = s.nextInt(); ys[i] = s.nextInt();\n            tb[1 << i] = sqr(x - xs[i]) + sqr(y - ys[i]) << 1;\n        }\n\n        int all = (1 << n) - 1;\n        out.println(recur(all));\n        StringBuilder sb = new StringBuilder();\n        int p = prevs[all];\n        int c = all;\n        while(p != 0 && p != c) {\n            if ((p ^ (p & -p)) == 0) sb.append(\"0 \" + (es.get(p & -p) + 1) + \" \");\n            else sb.append(\"0 \" + (es.get(p & -p) + 1) + \" \" + (es.get(p ^ (p & -p)) + 1) + \" \");\n            c = c ^ p;\n            p = prevs[c];\n        }\n\n        if ((c ^ (c & -c)) == 0) sb.append(\"0 \" + (es.get(c & -c) + 1) + \" 0\");\n        else sb.append(\"0 \" + (es.get(c & -c) + 1) + \" \" + (es.get(c ^ (c & -c)) + 1) + \" 0\");\n        out.println(sb);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String [] args) throws IOException {\n        BufferedReader scanner = new BufferedReader(new InputStreamReader(System.in));\n\n        String [] pieces = scanner.readLine().split(\"\\\\s+\");\n\n        //totally had to steal the vast majority of this from http://codeforces.com/contest/8/submission/9745593\n\n        Point origin = new Point(Integer.parseInt(pieces[0]), Integer.parseInt(pieces[1]));\n\n        N = Integer.parseInt(scanner.readLine());\n\n        Point [] points = new Point[N + 1];\n        distances = new int[N  + 1][N + 1];\n        parents = new int[N + 1][N + 1];\n        longNames = new String[N][N];\n        shortNames = new String[N];\n\n        for (int i = 0; i < N; ++i) {\n            pieces = scanner.readLine().split(\"\\\\s+\");\n\n            points[i] = new Point(Integer.parseInt(pieces[0]), Integer.parseInt(pieces[1]));\n        }\n\n        points[N] = origin;\n\n        for (int i = 0; i <= N; ++i) {\n            if (i < N) {\n                shortNames[i] = (i + 1) + \" \";\n            }\n\n            for (int j = 0; j <= N; ++j) {\n                if (i < N && j < N) {\n                    longNames[i][j] = (i + 1) + \" \" + (j + 1) + \" \";\n                }\n\n                distances[i][j] = 2 * points[i].distance(points[j]);\n                parents[i][j] = points[i].distance(points[N]) + points[i].distance(points[j]) + points[j].distance(points[N]);\n            }\n        }\n\n        distance = new int[1 << N];\n        parent = new int[1 << N];\n        answers = new String[1 << N];\n        Arrays.fill(distance, -1);\n        distance[0] = 0;\n\n        int result = rec((1 << N) - 1);\n        StringBuilder answer = new StringBuilder();\n\n        for (int i = distance.length - 1; parent[i] != i; i = parent[i]) {\n            answer.append(\"0 \");\n            answer.append(answers[i]);\n        }\n\n        answer.append(\"0\");\n        System.out.println(result);\n        System.out.println(answer.toString());\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException,\n        Thread th = new Thread(null, new Solution(), \"\", 536870912);\n        th.start();\n        th.join();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) \n\n\t\tx=in.nextInt();\n\t\ty=in.nextInt();\n\t\tn=in.nextInt();\n\t\txx=new int[n];\n\t\tyy=new int[n];\n\t\tdp=new int[1<<n];\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\txx[i]=in.nextInt();\n\t\t\tyy[i]=in.nextInt();\n\t\t}\n\t\tdist=new int[n];\n\t\tg=new int[n][n];\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tdist[i]=square(abs(xx[i]-x))+square(abs(yy[i]-y));\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\n\t\t\t\tg[i][j]=square(abs(xx[i]-xx[j]))+square(yy[i]-yy[j]);\n\t\t\t\t//System.out.println(\"i \"+i+\" j \"+j+\" \"+g[i][j]);\n\t\t\t}\n\t\t}\n\t\tArrays.fill(dp, Integer.MAX_VALUE/2);\n\t\tdp[0]=0;\n\t\tfor(int i=0;i<(1<<n);i++)\n\t\t{\n\t\t\t//we have to find dp[i]\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\n\t\t\t\tif((i&(1<<j))>0)   //not visited j\n\t\t\t\tcontinue;\n\t\t\t\tdp[i|(1<<j)]=min(dp[i|(1<<j)], dp[i]+2*dist[j]);\n\t\t\t\tfor(int k=j+1;k<n;k++)\n\t\t\t\t{\n\t\t\t\t\tif((i&(1<<k))>0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tdp[i|(1<<j)|(1<<k)]=min(dp[i|(1<<j)|(1<<k)], dp[i]+dist[j]+dist[k]+g[j][k]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\n\t\tout.println(dp[(1<<n)-1]);\n\t\tStack<Integer> stack=new Stack<>();\n\t\tstack.push(0);\n\t\tint i=(1<<n)-1;\n\t\twhile(i>0)\n\t\t{\n\t\t\tboolean tocontinue=false;\n\t\t\tfor(int a=0;a<n;a++)\n\t\t\t{\n\t\t\t\tif((i&(1<<a))==0)\n\t\t\t\t\tcontinue;\n\t\t\t\tif(dp[i]==(dp[i^(1<<a)]+2*dist[a]))\n\t\t\t\t{\n\t\t\t\t\tstack.push(a+1);\n\t\t\t\t\tstack.push(0);\n\t\t\t\t\ti-=(1<<a);\n\t\t\t\t\ttocontinue=true;\n\t\t\t\t}\n\t\t\t\tif(tocontinue)\n\t\t\t\t\tcontinue;\n\t\t\t\tfor(int b=a+1;b<n;b++)\n\t\t\t\t{\n\t\t\t\t\tif((i & (1<<b)) == 0) continue;\n\t\t\t\t\tif(dp[i]==(dp[i^(1<<a)^(1<<b)]+dist[a]+dist[b]+g[a][b]))\n\t\t\t\t\t{\n\t\t\t\t\t\ti-=(1<<a);\n\t\t\t\t\t\ti-=(1<<b);\n\t\t\t\t\t\tstack.push(a+1);\n\t\t\t\t\t\tstack.push(b+1);\n\t\t\t\t\t\tstack.push(0);\n\t\t\t\t\t\ttocontinue=true;\n\t\t\t\t\t}\n\t\t\t\t\tif(tocontinue)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(tocontinue)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tfor(int ii : stack)\n\t\t\tout.print(ii+\" \");\n\t\tout.close();\n\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tsc = new StringTokenizer(br.readLine());\n\t\tint a = nxtInt();\n\t\tint b = nxtInt();\n\t\tn = nxtInt() + 1;\n\t\tx = new int[n];\n\t\ty = new int[n];\n\t\tdp = new int[1 << n];\n\t\tArrays.fill(dp, -1);\n\t\tx[0] = a;\n\t\ty[0] = b;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tx[i] = nxtInt();\n\t\t\ty[i] = nxtInt();\n\t\t}\n\t\tout.println(solve(1 << 0));\n\t\tout.print(0);\n\t\tprnt(1 << 0);\n\t\tout.println();\n\t\tbr.close();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int bx = in.nextInt();\n        int by = in.nextInt();\n        in.nextLine();\n        int n = in.nextInt();\n        int[][] objects = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            objects[i][0] = in.nextInt();\n            objects[i][1] = in.nextInt();\n        }\n\n        int[] cs = new int[n];\n        for (int i = 0; i < n; i++) {\n            cs[i] = 2 * time(objects[i], new int[] { bx, by });\n        }\n\n        int[][] cd = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                cd[j][i] = cd[i][j] = time(objects[i], new int[] { bx, by }) + time(objects[j], new int[] { bx, by }) + time(objects[i], objects[j]);\n            }\n        }\n\n        int maxMask = 1 << n;\n        int[] dp = new int[maxMask];\n        int[] path = new int[maxMask];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n\n        for (int g = 1; g < maxMask; g++) {\n            int min = Integer.MAX_VALUE;\n            int minPath = 0;\n            int h = 31;\n            while ((g & (1 << h)) == 0)\n                h--;\n            h++;\n            int l = 0;\n            while ((g & (1 << l)) == 0)\n                l++;\n            if ((g & 1 << l) > 0) {\n                int oneleft = g ^ (1 << l);\n                int t = cs[l] + dp[oneleft];\n                if (t < min) {\n                    min = t;\n                    minPath = oneleft;\n                }\n                for (int j = l + 1; j < h; j++) {\n                    if ((oneleft & 1 << j) > 0) {\n                        int twoleft = oneleft ^ (1 << j);\n                        t = cd[l][j] + dp[twoleft];\n                        if (t < min) {\n                            min = t;\n                            minPath = twoleft;\n                        }\n                    }\n                }\n            }\n            dp[g] = min;\n            path[g] = minPath;\n        }\n\n        System.out.println(dp[maxMask - 1]);\n\n        int previous = maxMask - 1;\n        int pathElt = path[previous];\n        System.out.print(\"0 \");\n        while (previous > 0) {\n            int bits = previous - pathElt;\n            int h = 31;\n            while ((bits & (1 << h)) == 0)\n                h--;\n            int l = 0;\n            while ((bits & (1 << l)) == 0)\n                l++;\n            String el = h == l ? \"\" + (h + 1) : (h + 1) + \" \" + (l + 1);\n            System.out.print(el + \" \" + 0 + \" \");\n            previous = pathElt;\n            pathElt = path[pathElt];\n        }\n        System.out.println();\n\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tMyScanner sc = new MyScanner(System.in);\n\t\tString s = sc.nextLine();\n\t\tn = sc.nextInt();\n\t\tmem = new int[1 << n];\n\t\tArrays.fill(mem, -1);\n\t\tmap = new HashMap<>();\n\t\tmap.put(0, s);\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tmap.put(i, sc.nextLine());\n\t\t}\n\t\tint val = dp(0);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tpw.println(val);\n\t\tsb = new StringBuilder();\n\t\tsb.append(\"0 \");\n\t\tbuild(0);\n\t\tpw.println(sb);\n\t\tpw.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] argv) {\n\t\tFastScanner scan = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tx = scan.nextInt();\n\t\ty = scan.nextInt();\n\t\t\n\t\tn = scan.nextInt();\n\t\t\n\t\ta = new int[n+1];\n\t\tb = new int[n+1];\n\t\tdx = new int[n+1];\n\t\td = new int[n+1][n+1];\n\t\tfor(int i = 0; i < n; ++i){\n\t\t\ta[i] = scan.nextInt();\n\t\t\tb[i] = scan.nextInt();\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < n; ++i){\n\t\t\tdx[i] = dist(i);\n\t\t}\n\t\tfor(int i = 0; i < n; ++i){\n\t\t\tfor(int j = 0; j < n; ++j){\n\t\t\t\td[i][j] = dist(i,j);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdp = new int[1 << n];\n\t\tbefore = new int[1 << n];\n\t\tArrays.fill(dp, INF);\n\t\tdp[0] = 0;\n\t\tfor(int state = 0; state < (1<<n); state++){\n\t\t\t//if(dp[state] == INF) continue;\n\t\t\tfor(int i = 0; i < n; ++i){\n\t\t\t\tint ii = (1 << i);\n\t\t\t\tif((state & ii) > 0){\n\t\t\t\t\tif(dp[state - ii] == INF) continue;\n\t\t\t\t\tint newdist = dp[state - ii] + dx[i] + dx[i];\n\t\t\t\t\tif(dp[state] > newdist){\n\t\t\t\t\t\tdp[state] = newdist;\n\t\t\t\t\t\tbefore[state] = state - ii;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else continue;\n\t\t\t\t\n\t\t\t\tfor(int j = i + 1; j < n; ++j){\n\t\t\t\t\tif(i == j) continue;\n\t\t\t\t\tint jj = (1 << j);\n\t\t\t\t\tif((state & jj) > 0){\n\t\t\t\t\t\tif(dp[state - ii - jj] == INF) continue;\n\t\t\t\t\t\tint newdist = dp[state - ii - jj] + dx[i] + d[i][j] + dx[j];\n\t\t\t\t\t\tif(dp[state] > newdist){\n\t\t\t\t\t\t\tdp[state] = newdist;\n\t\t\t\t\t\t\tbefore[state] = state - ii - jj;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(dp[(1<<n)-1]);\n\t\tint state = (1<<n) - 1;\n\t\tStringBuffer ret = new StringBuffer();\n\t\twhile(state > 0){\n\t\t\tint nstate = before[state];\n\t\t\tboolean find = false;\n\t\t\tString made = \"\";\n\t\t\tfor(int i = 0; i < n; ++i){\n\t\t\t\tif(((state & (1<<i)) > 0) && ((nstate & (1<<i)) == 0)){\n\t\t\t\t\tfind = true;\n\t\t\t\t\tmade = made + \" \" + (i + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(find){\n\t\t\t\tmade = made + \" 0\";\n\t\t\t\tret.append(made, 0, made.length());\n\t\t\t}\n\t\t\tstate = nstate;\n\t\t}\n\t\tout.println(\"0\" + ret.toString());\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\t\n\t\t// Hooray bitmasks! I'm good at these :)\n\t\t\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\t// Handbag coordinates..\n\t\tint hb_x = in.nextInt(), hb_y = in.nextInt();\n\t\tint n = in.nextInt();\n\t\tint[] ox = new int[n];\n\t\tint[] oy = new int[n];\n\t\t\n\t\t// Dynamic programming: Also store a matrix of the time to reach one\n\t\t//  object from the other.\n\t\t// This considers the handbag to be object 0\n\t\tint[][] dt = new int[n][n];\n\t\tint[] hbd = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tox[i] = in.nextInt();\n\t\t\toy[i] = in.nextInt();\n\t\t\thbd[i] = (ox[i] - hb_x) * (ox[i] - hb_x)\n\t\t\t\t\t+ (oy[i] - hb_y) * (oy[i] - hb_y);\n\t\t}\n\t\t\n\t\t// Compute elapsed times...\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tdt[i][j] = (ox[i] - ox[j]) * (ox[i] - ox[j])\n\t\t\t\t\t\t+ (oy[i] - oy[j]) * (oy[i] - oy[j]);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fill up an array with the amount of time it takes to grab\n\t\t//  all objects with the specified bitmask.\n\t\tint[] sofar = new int[1 << n];\n\t\tint[] masks = new int[1 << n];\n\t\tsofar[0] = 0;\n\t\tfor (int i = 1; i < (1 << n); i++) {\n\t\t\tsofar[i] = -1;\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < (1 << n); i++) {\n\t\t\tif (sofar[i] != -1) {\n\t\t\t\tfor (int maskbit = 0; maskbit < n; maskbit++) {\n\t\t\t\t\t// Look for first object in bitmask to grab...\n\t\t\t\t\tif (((1 << maskbit) & i) == 0) {\n\t\t\t\t\t\tint iffirst = ((1 << maskbit) | i);\n\t\t\t\t\t\tint fromold = sofar[i] + 2 * hbd[maskbit];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (sofar[iffirst] == -1 || sofar[iffirst] > fromold) {\n\t\t\t\t\t\t\t// A better way to get to position J was found, use it.\n\t\t\t\t\t\t\tsofar[iffirst] = fromold;\n\t\t\t\t\t\t\tmasks[iffirst] = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Find another thing while you're out...\n\t\t\t\t\t\tfor (int otherone = 0; otherone < n; otherone++) {\n\t\t\t\t\t\t\tif (((1 << otherone) & iffirst) == 0) {\n\t\t\t\t\t\t\t\tint iffollow = ((1 << otherone) | iffirst);\n\t\t\t\t\t\t\t\tint fromi = sofar[i] + hbd[maskbit] + dt[maskbit][otherone] + hbd[otherone];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Did we find a better way to get to iffollow state?\n\t\t\t\t\t\t\t\tif (sofar[iffollow] == -1 || sofar[iffollow] > fromi) {\n\t\t\t\t\t\t\t\t\tsofar[iffollow] = fromi;\n\t\t\t\t\t\t\t\t\tmasks[iffollow] = i;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// After all this time, we have an answer.\n\t\t// The minimum time will be the value of sofar at the very end,\n\t\t//  which will have the case of if all objects were picked up.\n\t\t// Clever, no?\n\t\t// The logic came from http://www.darrensun.com/codeforces-round-8/\n\t\t// Wish I could claim it mine, but it is not so.\n\t\t\n\t\tint end_val = (1 << n) - 1;\n\t\t\n\t\tSystem.out.println(sofar[end_val]);\n\t\tSystem.out.print(0);\n\t\twhile (end_val > 0) {\n\t\t\t// Which objects were collected in the prvious trip?\n\t\t\tint diff = end_val ^ masks[end_val];\n\t\t\tint obj1 = -1, obj2 = -1;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (((1 << i) & diff) > 0) {\n\t\t\t\t\tobj2 = obj1;\n\t\t\t\t\tobj1 = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (obj2 >= 0) {\n\t\t\t\t// Two objects were collected this trip, output them both.\n\t\t\t\tSystem.out.print(\" \" + (obj1 + 1) + \" \" + (obj2 + 1) + \" 0\");\n\t\t\t} else {\n\t\t\t\t// Only one object was collected here.\n\t\t\t\tSystem.out.print(\" \" + (obj1 + 1) + \" 0\");\n\t\t\t}\n\t\t\tend_val = masks[end_val];\n\t\t}\n\t\t\n\t\tin.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\tint xs = NextInt();\n\t\tint ys = NextInt();\n\t\tint n = NextInt();\n\t\n\t\tint x[] = new int[n];\n\t\tint y[] = new int[n];\n\t\tint single[] = new int[n];\n\t\tint pair[][] = new int[n][n];\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tx[i] = NextInt();\n\t\t\ty[i] = NextInt();\n\t\t}\n\t\tfor (int i = 0; i < n; ++i) \n\t\t\tsingle[i] = 2 * dist(xs, ys, x[i], y[i]);\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tfor (int j = 0; j < n; ++j)\n\t\t\t\tpair[i][j] = dist(xs, ys, x[i], y[i]) + \n\t\t\t\t\t\t\t dist(x[i], y[i], x[j], y[j]) +\n\t\t\t\t\t\t\t dist(x[j], y[j], xs, ys);\n\t\tint dp[] = new int[1 << n];\n\t\tint prev[] = new int[1 << n];\n\t\tfor (int mask = 0; mask < (1 << n); ++mask) {\n\t\t\tint p = -1;\n\t\t\tfor (int i = 0; i < n; ++i)\n\t\t\t\tif (((mask >> i) & 1) != 0) {\n\t\t\t\t\tp = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (p == -1) continue;\n\t\t\tdp[mask] = dp[mask ^ (1 << p)] + single[p];\n\t\t\tprev[mask] = p;\n\t\t\tfor (int j = p + 1; j < n; ++j) {\n\t\t\t\tif (((mask >> j) & 1) != 0) {\n\t\t\t\t\tint res = pair[p][j] + dp[mask ^ (1 << p) ^ (1 << j)];\n\t\t\t\t\tif (res < dp[mask]) {\n\t\t\t\t\t\tdp[mask] = res;\n\t\t\t\t\t\tprev[mask] = p + 100 * j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint cur = (1 << n) - 1;\n\t\tSystem.out.printf(\"%d\\n0 \", dp[cur]);\n\t\twhile(cur != 0) {\n\t\t\tif (prev[cur] < 100) {\n\t\t\t\tSystem.out.printf(\"%d %d \", prev[cur] + 1, 0);\n\t\t\t\tcur ^= (1 << prev[cur]);\n\t\t\t} else {\n\t\t\t\tint i = prev[cur] / 100;\n\t\t\t\tint j = prev[cur] % 100;\n\t\t\t\tSystem.out.printf(\"%d %d %d \", i + 1, j + 1, 0);\n\t\t\t\tcur = cur ^ (1 << i) ^ (1 << j);\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] argv) {\n        Main solved = new Main();\n        int T = 1;\n        // T = solved.cin.nextInt();\n        for (int nT = 1; nT <= T; ++nT) {\n            solved.run(nT);\n        }\n        solved.out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tn = in.nextInt();\n\t\tprob = new double[n][n];\n\t\tmemo = new double[1<<n];\n\t\tfor(int i=0; i<n; i++)\n\t\t\tfor(int j=0; j<n; j++)\n\t\t\t\tprob[i][j] = in.nextDouble();\n\t\tmemo[(1<<n)-1] = 1;\n\t\tfor(int k=(1<<n)-1; k>0; k--) {\n\t\t\tint numWays = Integer.bitCount(k);\n\t\t\tnumWays = (numWays*(numWays-1))/2;\n\t\t\tfor(int first = 0; first < n; first++) {\n\t\t\t\tif(!isSet(k,first)) continue;\n\t\t\t\tfor(int second = first+1; second < n; second++) {\n\t\t\t\t\tif(!isSet(k,second)) continue;\n\t\t\t\t\tmemo[reset(k,first)] += prob[second][first]*memo[k]/numWays;\n\t\t\t\t\tmemo[reset(k,second)] += prob[first][second]*memo[k]/numWays;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0; i<n; i++)\n\t\t\tSystem.out.printf(\"%.6f \", memo[set(0,i)]);\n\t\tSystem.out.println();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Fish().start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n  \n        Scanner S=new Scanner(System.in);\n        while(S.hasNext())\n        {\n            n=S.nextInt();\n            int i,j;\n            for(i=0;i<n;i++) for(j=0;j<n;j++) p[i][j]=S.nextDouble();\n            DP();\n            for(i=0;i<n;i++) \n            {\n                if(i!=0) PR(\" \");\n                PR(f[1<<i]);\n            }\n            PR(\"\\n\");\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n  \n        Scanner S=new Scanner(System.in);\n        while(S.hasNext())\n        {\n            n=S.nextInt();\n            int i,j;\n            for(i=0;i<n;i++) for(j=0;j<n;j++) p[i][j]=S.nextDouble();\n            DP();\n            for(i=0;i<n;i++) \n            {\n                if(i!=0) PR(\" \");\n                PR(f[1<<i]);\n            }\n            PR(\"\\n\");\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        n = in.nextInt();\n        dp = new double[1<<n];\n        p = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                p[i][j]= in.nextDouble();                \n            }\n        }\n        for (int i = 0; i <(1<<n); i++) {\n            dp[i] = -1;            \n        }\n        dp[(1<<n)-1]=1;\n        DecimalFormat d = new DecimalFormat(\"0.000000\");\n        System.out.print(d.format(f(1<<0)));\n        for (int i = 1; i < n; i++) {\n            System.out.print(\" \"+d.format(f(1<<i)));\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String g[])\n\n        Scanner sc = new Scanner(System.in);\n        n=sc.nextInt();\n        m = new double[(1<<n) +1];\n        vis = new boolean[(1<<n) +1];\n        a = new double[n][n];\n\n        for(int i=0;i<n;i++)\n                {\n            for(int j=0;j<n;j++)\n            {\n                //System.out.println(\"read\"+(c++));\n                a[i][j] = sc.nextDouble();\n            }\n                }\n\n        s = new double[1<<n]; // 2^n\n        int perm=0;\n        m[0]=1;\n        p();\n\n//      System.out.println(\"answers : \");\n\n        int c=((1<<n)-1);\n        for(int i=0;i<n;i++)\n        {\n            perm = c-(1<<i);\n//          System.out.printf(\"permutation = %x, prob = %f\\n\",perm,m[perm]);\n            System.out.printf(\"%.6f \",m[perm]);\n        }\n//      getPerms(0);\n//      p(perm);\n\n//      double res[] = new double[n];\n//      for(int i=0;i<n;i++)\n        {\n//          for(int j=0;j<n;j++)\n//          if((i&(i-1))!=0)\n//              continue;\n\n//          res[i] =\n//              p(perm,n);\n//          System.out.println(m[i][j]);\n        }\n\n//      int cur=(1<<n)-1;\n//\n//int i=0;\n//      for(i=0;i<n;i++)\n//      {\n//          int val=(cur-(1<<i));\n//          int L = n-1;\n//          System.out.printf(\"running for %x .... P = %f\\n\",val,getProb(val,L));\n//\n//      }\n\n        //getP((1<<n)-1));\n\n//      for(int i=0;i<m.length;i++)\n//      {\n//          System.out.println(m[perm]);\n//      }\n\n\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args)\n        try\n        {\n            Parserdoubt pd=new Parserdoubt(System.in);\n            PrintWriter pw=new PrintWriter(System.out);\n            int fishes=pd.nextInt();\n            arr=new double[fishes][fishes];\n            for(int i=0;i<fishes;i++)\n                for(int j=0;j<fishes;j++)\n                    arr[i][j]=Double.parseDouble(pd.nextString());\n            double dp[]=new double[(1<<fishes)];\n            dp[dp.length-1]=1.0;\n            for(int c=dp.length-1;c>=0;c--)\n            {\n                \n                if((c&(c-1))==0)\n                    continue;\n                for(int i=0;i<fishes;i++)\n                    for(int j=i+1;j<fishes;j++)\n                    {\n                        if(((1<<i)&c)!=0&&((1<<j)&c)!=0)\n                        {\n                            dp[c&~(1<<j)]+=arr[i][j]*dp[c];\n                            dp[c&~(1<<i)]+=arr[j][i]*dp[c];\n                        }\n                    }\n            }\n            double s=0.0;\n            for(int i=0;i<fishes;i++)\n                s+=dp[1<<i];\n            for(int i=0;i<fishes;i++)\n                dp[1<<i]/=s;\n            int i=0;\n            for(i=0;i<fishes-1;i++)\n                pw.printf(\"%.6f \",dp[1<<i]);\n            pw.printf(\"%.6f\\n\",dp[1<<i]);\n            pw.close();\n        }\n        catch(Exception e)\n        {}\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Fish().start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Template().run();\n    }\n", "complexity": "np"}
{"code": "   public static void main(String[] args)\n      new E(new Scanner(System.in));\n   }\n", "complexity": "np"}
{"code": "    public static void main(String args[]) {\n        new Fish();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n \n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n \n\t\tN = sc.nextInt();\n\t\t\n\t\ta = new double[N][N];\n\t\tfor(int i = 0; i < N; ++i)\n\t\t\tfor(int j = 0; j < N; ++j)\n\t\t\t\ta[i][j] = sc.nextDouble();\n\t\tmemo = new double[1<<N][];\n\t\t\n\t\tf();\n\t\t\n\t\tdouble[] ret = dp((1<<N) - 1);\n\t\tfor(int i = 0; i < N - 1; ++i)\n\t\t\tout.printf(\"%.8f \",ret[i]);\n\t\tout.printf(\"%.8f\\n\", ret[N-1]);\n \n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskE solver = new TaskE();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "  public static void main(String args[]){\n    new e().run();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)throws Exception\n\t\tScanner scan= new Scanner(System.in);\n\t\tinit();\n\t\tn=scan.nextInt();\n\t\tint m= (1<<n)-1;\n\t\tfor(int i=0; i<n; i++)\n\t\t\tfor(int j=0; j<n; j++)\n\t\t\t\tprob[i][j]= scan.nextDouble();\n\t\tdp[0][m]=1;\n\t\t\n\t\tfor(int i=0; i<(n-1); i++)\n\t\t{\n\t\t\tfor(int j=0; j<=m; j++)\n\t\t\t\tif(dp[i%2][j]>0)\n\t\t\t\t\tfor(Integer next: adj[j])\n\t\t\t\t\t\tdp[(i+1)%2][next]+= value(j,next)*dp[i%2][j];\n\t\t\tArrays.fill(dp[i%2],0);\n\t\t}\n\t\n\t\tfor(int i=0; i<n; i++)\n\t\t{\n\t\t\tif(i!=0)\n\t\t\tSystem.out.print(\" \");\n\t\t\tSystem.out.printf(\"%.6f\",dp[(n-1)%2][1<<i]);\t\t\n\t\t}\n\t\t\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew e().main();\n\t}\n", "complexity": "np"}
{"code": "    public static void main (String []args){\n        new P16E();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n  \n        Scanner S=new Scanner(System.in);\n        while(S.hasNext())\n        {\n            n=S.nextInt();\n            int i,j;\n            for(i=0;i<n;i++) for(j=0;j<n;j++) p[i][j]=S.nextDouble();\n            DP();\n            for(i=0;i<n;i++) \n            {\n                if(i!=0) PR(\" \");\n                PR(f[1<<i]);\n            }\n            PR(\"\\n\");\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        //System.setIn(new FileInputStream(\"1\"));\n        in = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(System.out);\n\n        int n = nextInt();\n        double[][] a = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                a[i][j] = nextDouble();\n            }\n        }\n        double[] dp = new double[1 << n];\n        dp[(1 << n) - 1] = 1.0;\n        for (int mask = (1 << n) - 2; mask > 0; mask--) {\n            int count = Integer.bitCount(mask);\n            double pPair = 2.0 / (count * (count + 1));\n            double ans = 0.0;\n            for (int i = 0; i < n; i++) {\n                if (((1 << i) & mask) == 0) {\n                    double p = dp[(1 << i) | mask];\n                    double s = 0.0;\n                    for (int j = 0; j < n; j++) {\n                        if (((1 << j) & mask) != 0)\n                            s += a[j][i];\n                    }\n                    ans += pPair * p * s;\n                }\n            }\n            dp[mask] = ans;\n        }\n\n        for (int i = 0; i < n; i++) {\n            out.print(dp[1 << i]);\n            out.print(' ');\n        }\n        \n        in.close();\n        out.close();\n    }\n", "complexity": "np"}
{"code": "public static void main(String [] args){\n\tScanner in=new Scanner(System.in);\n\tint n=in.nextInt();\n\tdouble value[][]=new double[n][n];\n\tfor(int i=0;i<n;i++)\n\t\tfor(int j=0;j<n;j++)value[i][j]=in.nextDouble();\n\t\tdouble ans[]=new double[1<<n];\n\t\tint mask=(1<<n);\n\t\tans[(1<<n)-1]=1.0;\n\t\tfor(int i=mask-1;i>=0;i--){\n\t\tint cnt=Integer.bitCount(i);\n\t\tint pairs=cnt*(cnt-1)/2;\n\t\tfor(int j=0;j<n;j++){\n\t\tif(((i>>j)&1)==0)continue;\n\t\tfor(int k=j+1;k<n;k++){\n\t\tif(((i>>k)&1)==0)continue;\n\t\tans[i^(1<<k)]+=ans[i]*value[j][k]/pairs;\n\t\tans[i^(1<<j)]+=ans[i]*value[k][j]/pairs;\n\t\t}\n\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t\tSystem.out.print(ans[1<<i]+\" \");\n\t\t\n}\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n        new Main().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws NumberFormatException,\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        n = Integer.parseInt(bf.readLine());\n        p = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            StringTokenizer st = new StringTokenizer(bf.readLine());\n            for (int j = 0; j < n; j++) {\n                p[i][j] = Double.parseDouble(st.nextToken());\n            }\n        }\n \n        dp = new double[1 << n];\n \n        Arrays.fill(dp, -1.0);\n \n        dp[(1 << n) - 1] = 1.;\n \n        for (int i = 0; i < n - 1; i++) {\n            System.out.print(f(1 << i) + \" \");\n        }\n \n        System.out.println(f((1 << (n - 1))));\n \n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    InputReader in = new InputReader(System.in);\n    PrintWriter out = new PrintWriter(System.out);\n    new CF16E().solve(in, out);\n    out.close();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tn = new Integer(br.readLine());\n\t\tarr = new double[n][n];\n\t\tStringTokenizer st;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tarr[i][j] = Double.parseDouble(st.nextToken());\n\t\t\t}\n\t\t}\n\t\texp = 1<<n;\n\t\tdp = new double[exp];\n\t\tdies = new double[n][exp];\n\t\tfor (int all = 0; all < exp; all++) {\n\t\t\tdp[all] = -1;\n\t\t\tint countAlive = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif((all&(1<<i))!=0)\n\t\t\t\t\tcountAlive++;\n\t\t\t}\n\t\t\tif(countAlive <2)continue;\n\t\t\tdouble x=1.0/(countAlive*(countAlive-1)/2.0);\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tdies[i][all]=0;\n\t\t\t\tint mask=1<<i;\n\t\t\t\tif((mask&all)>0){\n\t\t\t\t\tfor(int j=0; j<n; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tint mask2=1<<j;\n\t\t\t\t\t\tif((mask2&all)>0)\n\t\t\t\t\t\t\tdies[i][all]+=arr[j][i];\n\t\t\t\t\t}\n\t\t\t\t\tdies[i][all]*=x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int myFish=0; myFish<n; myFish++){\n\t\t\tif(myFish>0)System.out.printf(\" \");\n\t\t\tSystem.out.printf(\"%.6f\",ff(1<<myFish));\n\t\t}\n\t\tSystem.out.println();\t\n \n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Locale.setDefault(Locale.US);\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        double[][]p = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                p[i][j] = sc.nextDouble();\n            }\n        }\n        double[]dp = new double[1<<n];\n        dp[(1 << n)-1] = 1;\n        for (int mask = (1 << n)-1; mask > 0; mask--) {\n            int t = Integer.bitCount(mask);\n            if (t==1)\n                continue;\n            double p0 = 1.0/(t*(t-1)/2);\n            for (int i = 0; i < n; i++) {\n                if ((mask & (1 << i)) != 0) {\n                    for (int j = 0; j < n; j++) {\n                        if (j != i && (mask & (1 << j)) != 0)\n                            dp[(mask ^ (1 << i))] += dp[mask] * p[j][i]*p0;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            System.out.print(dp[1 << i]+\" \");\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String args[]) {\n        new Fish();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\t\t\n\t\tn = nextInt();\n\t\tt = 1 << n;\n\t\tm = new double[n][n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\tm[i][j] = nextDouble();\n\t\t\n\t\tmemo = new double[t];\n\t\tArrays.fill(memo, Double.POSITIVE_INFINITY);\n\t\tfor (int i = 0; i < n; i++) out.print(String.format(Locale.US, \"%.6f\", solve(1 << i)) + \" \");\n\t\tout.println();\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        in.useLocale(Locale.US);\n        int n = in.nextInt();\n\n        double[] dp = new double[1 << n];\n        Arrays.fill(dp, 0);\n        dp[(1 << n) - 1] = 1;//?\n\n        double[][] prob = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                prob[i][j] = in.nextDouble();\n            }\n        }\n\n        \n        for (int t = (1 << n) - 1; t >= 0; t--) {\n            int k = Integer.bitCount(t);\n            for (int i = 0; i < n; i++) {\n                if ((t & (1 << i)) > 0) {\n                    for (int j = 0; j < n; j++) {\n                        if ((t & (1 << j)) > 0) {\n                            if (i != j) {\n                                dp[t - (1 << j)] += dp[t] * prob[i][j] / (k*(k-1)/2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            System.out.print(dp[1 << i] + \" \");\n        }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tdouble[][] aa = new double[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\taa[i][j] = Double.parseDouble(st.nextToken());\n\t\t}\n\t\tdouble[][] pp = new double[1 << n][n];\n\t\tfor (int k = 0; k < n; k++)\n\t\t\tpp[1 << k][k] = 1;\n\t\tfor (int b = 1; b < 1 << n; b++) {\n\t\t\tint c = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif ((b & 1 << i) == 0)\n\t\t\t\t\tcontinue;\n\t\t\t\tc++;\n\t\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\t\tif ((b & 1 << j) == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int k = 0; k < n; k++) {\n\t\t\t\t\t\tif ((b & 1 << k) == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tpp[b][k] += aa[i][j] * pp[b ^ 1 << j][k];\n\t\t\t\t\t \tpp[b][k] += aa[j][i] * pp[b ^ 1 << i][k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (c > 1) {\n\t\t\t\tdouble p = (double) c * (c - 1) / 2;\n\t\t\t\tfor (int k = 0; k < n; k++)\n\t\t\t\t\tpp[b][k] /= p;\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint b = (1 << n) - 1;\n\t\tfor (int k = 0; k < n; k++)\n\t\t\tsb.append(pp[b][k]).append(k == n - 1 ? '\\n' : ' ');\n\t\tSystem.out.print(sb);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)\n\t\ttry\n\t\t{\n\t\t\tnew Main().run();\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args)\n        try\n        {\n            Parserdoubt pd=new Parserdoubt(System.in);\n            PrintWriter pw=new PrintWriter(System.out);\n            int fishes=pd.nextInt();\n            arr=new double[fishes][fishes];\n            for(int i=0;i<fishes;i++)\n                for(int j=0;j<fishes;j++)\n                    arr[i][j]=Double.parseDouble(pd.nextString());\n            double dp[]=new double[(1<<fishes)];\n            dp[dp.length-1]=1.0;\n            for(int c=dp.length-1;c>=0;c--)\n            {\n                int count=Integer.bitCount(c);\n                if(count<=1)\n                    continue;\n                for(int i=0;i<fishes;i++)\n                    for(int j=i+1;j<fishes;j++)\n                    {\n                        if(((1<<i)&c)!=0&&((1<<j)&c)!=0)\n                        {\n                            dp[c&~(1<<j)]+=arr[i][j]*dp[c];\n                            dp[c&~(1<<i)]+=arr[j][i]*dp[c];\n                        }\n                    }\n            }\n            double s=0.0;\n            for(int i=0;i<fishes;i++)\n                s+=dp[1<<i];\n            for(int i=0;i<fishes;i++)\n                dp[1<<i]/=s;\n            int i=0;\n            for(i=0;i<fishes-1;i++)\n                pw.printf(\"%.6f \",dp[1<<i]);\n            pw.printf(\"%.6f\\n\",dp[1<<i]);\n            pw.close();\n        }\n        catch(Exception e)\n        {}\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException\t{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tgrid = new double[n][n];\n\t\tfor(int i = 0; i < n; i++)\t{\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tfor(int j = 0; j < n; j++)\t{\n\t\t\t\tgrid[i][j] = Double.parseDouble(st.nextToken());\n\t\t\t}\n\t\t}\n\t\tboolean[] seen = new boolean[1<<n];\n\t\tdouble[] prob = new double[1<<n];\n\t\tprob[(1<<n)-1] = 1;\n\t\tLinkedList<Integer> q = new LinkedList<Integer>();\n\t\tq.add((1<<n)-1);\n\t\twhile(!q.isEmpty())\t{\n\t\t\tint curr = q.removeFirst();\n\t\t\tif(Integer.bitCount(curr) == 1)\n\t\t\t\tcontinue;\n\t\t\tfor(int i = 0; i < n; i++)\t{\n\t\t\t\tif((curr & (1 << i)) == 0)\n\t\t\t\t\tcontinue;\n\t\t\t\tfor(int j = i+1; j < n; j++)\t\t{\n\t\t\t\t\tif((curr & (1<<j)) == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tprob[curr-(1<<i)] += prob[curr] * grid[j][i];\n\t\t\t\t\tprob[curr-(1<<j)] += prob[curr] * grid[i][j];\n\t\t\t\t\tif(!seen[curr-(1<<i)])\t{\n\t\t\t\t\t\tq.addLast(curr-(1<<i));\n\t\t\t\t\t\tseen[curr-(1<<i)] = true;\n\t\t\t\t\t}\n\t\t\t\t\tif(!seen[curr-(1<<j)])\t{\n\t\t\t\t\t\tq.addLast(curr-(1<<j));\n\t\t\t\t\t\tseen[curr-(1<<j)] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tprob[curr] = 0;\n\t\t}\n\t\tdouble sum = 0;\n\t\tfor(int i = 0; i < n; i++)\t\t{\n\t\t\tsum += prob[1<<i];\n\t\t}\n\t\tfor(int i = 0; i < n-1; i++)\t{\n\t\t\tSystem.out.print(prob[1<<i]/sum + \" \");\n\t\t}\n\t\tSystem.out.println(prob[1<<(n-1)]/sum);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] arg){\n\t\tFastScanner scan = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = scan.nextInt();\n\t\t\n\t\tdouble ncr[][] = new double[n+1][n+1];\n\t\tncr[1][0] = ncr[0][1] = ncr[1][1] = 1.0;\n\t\tfor(int i = 2; i <= n; i++){\n\t\t\tfor(int j = 0; j <= i; j++){\n\t\t\t\tif(j == 0 || j == i) ncr[i][j] = 1.0;\n\t\t\t\telse ncr[i][j] = ncr[i-1][j] + ncr[i-1][j-1];\n\t\t\t\t//System.out.print(ncr[i][j] + \"  \");\n\t\t\t}\n\t\t\t//System.out.println();\n\t\t}\n\t\t\n\t\tdouble a[][] = new double[n+1][n+1];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tfor(int j = 0; j < n; j++)\n\t\t\t\ta[i][j] = scan.nextDouble();\n\t\t\n\t\tdouble dp[] = new double[1<<19];\n\t\tdp[(1<<n) - 1] = 1.0;\n\t\tfor(int state = (1 << n) - 1; state >= 0; state--){\n\t\t\tint len = 0;\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\tif((state & (1 << i)) > 0) len++;\n\t\t\t\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tif(((1 << i) & state) == 0) continue;\n\t\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\t\tif(((1 << j) & state) == 0) continue;\n\t\t\t\t\tdp[state & (~(1<<i))] += (dp[state] * a[j][i] / ncr[len][2]);\n\t\t\t\t\tdp[state & (~(1<<j))] += (dp[state] * a[i][j] / ncr[len][2]);\n\t\t\t\t\t//System.out.println(state + \" / \" + (state & (~(1<<i))) + \" / \" + dp[state] + \" / \" + a[j][i] + \" / \" + (dp[state] * a[j][i]) + \" / \"  + dp[state & (~(1<<i))]);\n\t\t\t\t\t//System.out.println(state + \" / \" + (state & (~(1<<j))) + \" / \" + dp[state] + \" / \" + a[i][j] + \" / \" + (dp[state] * a[i][j]) + \" / \"  + dp[state & (~(1<<j))]);\n\t\t\t\t\t//System.out.println();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tSystem.out.print(String.format(\"%.6f\", dp[1<<i]) + \" \");\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n \n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n \n\t\tN = sc.nextInt();\n\t\t\n\t\ta = new double[N][N];\n\t\tfor(int i = 0; i < N; ++i)\n\t\t\tfor(int j = 0; j < N; ++j)\n\t\t\t\ta[i][j] = sc.nextDouble();\n\t\tmemo = new double[1<<N];\n\t\tf();\n\n\t\tArrays.fill(memo, -10);\t\t\n\t\tfor(int i = 0; i < N - 1; ++i)\n\t\t\tout.printf(\"%.8f \", dp(1 << i));\n\t\tout.printf(\"%.8f\\n\", dp(1 << N - 1));\n \n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        \n        n = nextInt();\n        t = 1 << n;\n        m = new double[n][n];\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n; j++)\n                m[i][j] = nextDouble();\n        \n        memo = new double[t];\n        Arrays.fill(memo, Double.POSITIVE_INFINITY);\n        for (int i = 0; i < n; i++) out.print(String.format(Locale.US, \"%.6f\", solve(1 << i)) + \" \");\n        out.println();\n        \n        out.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n        new ProblemE_16().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)\n\t\ttry\n\t\t{\n\t\t\tnew Main().run();\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        \n        int n = r.nextInt();\n        \n        double[][] g = new double[n][n];\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < n; j++)\n                g[i][j] = r.nextDouble();\n        \n        dp = new double[1 << n];\n        P = new double[1 << n][n];\n        for(int mask = 0; mask < 1 << n; mask++){\n            for(int d = 0; d < n; d++)if((mask & (1 << d)) == 0)\n                for(int i = 0; i < n; i++)if((mask & (1 << i)) == 0){\n                    if(i == d)continue;\n                    \n                    P[mask][d] += g[i][d];\n                }\n        }\n        \n        for(int i = 0; i < n; i++){\n            Arrays.fill(dp, -1);\n            \n            double res = go(i, 0, g, n, n);\n            System.out.println(res);\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        n = scan.nextInt();\n\n        matrix = new double[n][n];\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n; j++)\n                matrix[i][j] = scan.nextDouble();\n\n        masks = new double[1 << n];\n        masks[(1 << n) - 1] = 1;\n        for (int i = 0; (1 << i) < (1 << n); i++)\n            fillDP(1 << i);\n\n        for (int i = 0; (1 << i) < (1 << n); i++)\n            System.out.printf(\"%.6f \", masks[1 << i]);\n\n\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Fish().start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] arg) {\n        new Main16E().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tint n = Integer.valueOf(s.readLine());\n\t\tdouble[][] prob = new double[n][n];\n\t\tdouble[] dp = new double[1<<n];\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tString[] line = s.readLine().split(\" \");\n\t\t\tfor (int j = 0 ; j < n ; j++) {\n\t\t\t\tprob[i][j] = Double.valueOf(line[j]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdp[(1<<n)-1] = 1.0d;\n\t\tfor (int p = (1<<n)-1 ; p >= 1 ; p--) {\n\t\t\tif (dp[p] > 0.0d) {\n\t\t\t\tint left = Integer.bitCount(p);\n\t\t\t\tif (left == 1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdouble baseProb = 1.0d / (left * (left - 1) / 2);\n\t\t\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\t\t\tif ((p & (1<<i)) == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int j = i+1 ; j < n ; j++) {\n\t\t\t\t\t\tif ((p & (1<<j)) == 0) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdp[p-(1<<i)] += dp[p] * baseProb * prob[j][i];\n\t\t\t\t\t\tdp[p-(1<<j)] += dp[p] * baseProb * prob[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tStringBuffer b = new StringBuffer();\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tb.append(\" \").append(dp[1<<i]);\n\t\t}\n\t\tout.println(b.substring(1));\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tFish solver = new Fish();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskE solver = new TaskE();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception { new Fish(); }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner sc=new Scanner(System.in);\n        n=sc.nextInt();\n        prob=new double[n][n];\n        for(int i=0;i<n;i++) \n            for(int j=0;j<n;j++)\n                prob[i][j]=sc.nextDouble();\n        dp=new double[1<<n];\n        oneCount=new int[1<<n];\n        int c;\n        for(int i=0;i<dp.length;i++) {\n            c=0;\n            for(int j=0;j<n;j++) {\n                if((i|(1<<j))==i) c++;\n            }\n            oneCount[i]=c;\n        }\n        end=(1<<n)-1;\n        double res,rad;\n        int count;\n        for(int k=end;k>0;k--) {\n            if(k==end) dp[k]=1;\n            else {\n                res=0;\n                count=oneCount[k];\n                count=count*(count+1);\n                count>>=1;\n                rad=1.0/count;\n                //System.out.println(rad+\" \"+count);\n                for(int i=0;i<n;i++) {\n                    if((k|(1<<i))!=k) continue;\n                    for(int j=0;j<n;j++) {\n                        //\n                        if((k|(1<<j))==k) continue;\n                        //System.out.println(i+\" \"+j+\" \"+prob[i][j]+\" \"+Integer.toBinaryString(mask)+\" \"+oneC+\" \"+zeroC);\n                        res+=rad*prob[i][j]*dp[k|(1<<j)];\n                    }\n                }\n                dp[k]=res;\n            }\n        }\n        //Arrays.fill(dp, -1);\n        for(int i=0;i<n;i++)\n            System.out.print(dp[1<<i]+\" \");\n            //System.out.print(solve(1<<i)+\" \");\n//      for(int i=0;i<18;i++){\n//          for(int k=0;k<18;k++)\n//              System.out.print(Math.random()+\" \");\n//          System.out.println();\n//      }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\ttry {\n\t\t\tif (new File(\"input.txt\").exists()) {\n\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n\t\t\t}\n\t\t} catch (SecurityException e) {\n\t\t}\n\t\t\n\t\tnew Main().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tin = new Scanner(System.in);\n\t\tout = new PrintWriter(System.out);\n//\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\n\t\tint n = in.nextInt();\n\n\t\tdouble[][] p = new double[n][n];\n\t\tfor (int i = 0; i < n; i++) for (int j = 0; j < n; j++) p[i][j] = in.nextDouble();\n\n\t\tdouble[] q = new double[1 << n];\n\t\tq[(1 << n) - 1] = 1;\n\t\tfor (int mask = (1 << n) - 1; mask > 0; mask--) {\n\t\t\tint count = 0;\n\n\t\t\tfor (int t = 0; t < n; t++) if (((1 << t) & mask) != 0) count++;\n\t\t\tif (count <= 1) continue;\n\t\t\tcount = count*(count - 1)/2;\n\n\t\t\tfor (int t = 0; t < n; t++) if (((1 << t) & mask) != 0)\n\t\t\t\tfor (int s = 0; s < t; s++) if (((1 << s) & mask) != 0) {\n\t\t\t\t\tq[mask - (1 << t)] += q[mask] / count * p[s][t];\n\t\t\t\t\tq[mask - (1 << s)] += q[mask] / count * p[t][s];\n\t\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < n; i++) out.print(q[1 << i] + \" \");\n\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new BetaRound16_E(), \"\", 256 * (1L << 20)).start();\n\t}\n", "complexity": "np"}
{"code": "  public static void main(String[] args) throws Exception {\n    new Main().doWork();\n  }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException\n        new Thread(null, new E(), \"\", 1 << 20).start();\n    }   \n", "complexity": "np"}
{"code": "public static void main(String[] args) throws IOException {\n\tinput.init(System.in);\n\tPrintWriter out = new PrintWriter(System.out);\n\tn = input.nextInt();\n\tg = new double[n][n];\n\tfor(int i = 0; i<n; i++)\n\t\tfor(int j = 0; j<n; j++)\n\t\t\tg[i][j] = input.nextDouble();\n\tfor(int i = 0; i<n; i++)\n\t\tfor(int j = 0; j<n; j++)\n\t\t\tg[j][i] = 1 - g[i][j];\n\tfor(int i = 0; i<n; i++)\n\t{\n\t\tdouble[] dp = new double[1<<n];\n\t\tfor(int mask = 0; mask < (1<<n); mask++)\n\t\t{\n\t\t\tif((mask & (1<<i)) == 0)\n\t\t\t{\n\t\t\t\tdp[mask] = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(mask == (1<<i))\n\t\t\t{\n\t\t\t\tdp[mask] = 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint count = Integer.bitCount(mask);\n\t\t\tdouble prob = 1.0 / (count * (count-1)/2);\n\t\t\tfor(int a = 0; a<n; a++)\n\t\t\t{\n\t\t\t\tif((mask & (1<<a)) == 0) continue;\n\t\t\t\tfor(int b = a+1; b<n; b++)\n\t\t\t\t{\n\t\t\t\t\tif((mask & (1<<b)) == 0) continue;\n\t\t\t\t\tdouble p = g[a][b] * dp[mask ^ (1<<b)] + g[b][a] * dp[mask ^ (1<<a)];\n\t\t\t\t\tdp[mask] += p;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp[mask] *= prob;\n\t\t}\n\t\tout.print(dp[(1<<n)-1]+\" \");\n\t}\n\tout.close();\n}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Template().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        ProblemD f = new ProblemD();\n        f.solve();\n    }\n", "complexity": "np"}
{"code": "  public static void main(String args[]){\n    new Main().run();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws InterruptedException {\n\t\t new Thread(null, new Runnable() {\n            public void run() {\n                new Main().run();\n            }\n\t     }, \n\t     \"1\", \n\t     1 << 25).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew E().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws java.lang.Exception {\n\t\tBufferedReader kek = new BufferedReader(new InputStreamReader(System.in));\n\t\t//Scanner skek = new Scanner(System.in);\n\t\tPrintWriter outkek = new PrintWriter(System.out);\n\n\t\tint N = Integer.parseInt(kek.readLine());\n\t\tdouble[][] lake = new double[N][N];\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\tString[] input = kek.readLine().split(\" \");\n\t\t\tfor(int j = 0; j < N; j++){\n\t\t\t\tlake[i][j] = Double.parseDouble(input[j]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tint pow = (int)Math.pow(2, N);\n\t\tdouble[] res = new double[pow];\n\t\tres[pow - 1] = 1.0;\n\t\t\n\t\tfor(int i = pow - 1; i >= 0; i--){\n\t\t\tint ones = Integer.bitCount(i); // So this is apparently a thing\n\t\t\tint possibleCombos = ones * (ones - 1) /2;\n\t\t\t\n\t\t\tfor(int j = 0; j < N; j++){\n\t\t\t\tif((i >> j) % 2 == 0){ // (X >> Y) literally does the same thing as divis func. Bit operators are weird.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(int k = j + 1; k < N; k++){\n\t\t\t\t\tif((i >> k) % 2 == 0){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tres[i ^ (1 << k)] += res[i] * lake[j][k]/possibleCombos;\n\t\t\t\t\tres[i ^ (1 << j)] += res[i] * lake[k][j]/possibleCombos;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\toutkek.print(res[1 << i] + \" \");\n\t\t}\n\t\t\n\t\tkek.close();\n\t\toutkek.close();\n\t}\t\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Throwable {\n        Thread t = new Thread(new Main());\n        t.start();\n        t.join();\n        if (sError != null) {\n            throw sError;\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n\n        new Task2().solve();\n\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws FileNotFoundException {\n        long start;\n        if (debug)\n            start = System.nanoTime();\n        InputStream inputStream;\n        OutputStream outputStream;\n        if (useFiles) {\n            inputStream = new FileInputStream(fileName + \".in\");\n            outputStream = new FileOutputStream(fileName + \".out\");\n        } else {\n            inputStream = System.in;\n            outputStream = System.out;\n        }\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task(in, out);\n        solver.solve();\n        if(debug)\n            out.println((System.nanoTime() - start) / 1e+9);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new E().solve();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Fish().start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Fish().start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception { \n        StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n        PrintWriter pw = new PrintWriter(System.out);\n        \n        in.nextToken();\n        int n = (int) in.nval;\n        double[][] a = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                in.nextToken();\n                a[i][j] = in.nval;\n            }\n        }\n        \n        double[] dp = new double[1 << n];\n        dp[(1 << n) - 1] = 1.0;\n        \n        for (int mask = (1 << n) - 2; mask > 0; mask--) {\n            int count = Integer.bitCount(mask);\n            double pPair = 2.0 / ((double) count * (count + 1));\n            double ans = 0.0;\n            \n            for (int j = 0; j < n; j++) {\n                int jj = 1 << j;\n                if ((jj & mask) != 0) continue;\n                double p = dp[mask | jj];\n                double s = 0;\n                for (int k = 0; k < n; k++) {\n                    int kk = 1 << k;\n                    if ((kk & mask) == 0) continue;\n                    s += a[k][j];\n                }\n                ans += s * pPair * p;\n            }\n            dp[mask] = ans;\n        }\n        \n        for (int i = 0; i < n; i++) {\n            pw.print(dp[1 << i]);\n            pw.print(' ');\n        }\n        \n        pw.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tN = sc.nextInt();\n\t\tp = new double[N][N];\n\t\tfor (int i = 0; i < N; ++i) {\n\t\t\tfor (int j = 0; j < N; ++j) {\n\t\t\t\tp[i][j] = sc.nextDouble();\n\t\t\t}\n\t\t}\n\t\tdouble[] memo = new double[1 << N];\n\t\tmemo[memo.length - 1] = 1;\n\t\tfor (int i = N; i >= 2; --i) {\n\t\t\tint[] live = new int[N];\n\t\t\tfor (int j = 0; j < i; ++j) {\n\t\t\t\tlive[N - 1 - j] = 1;\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tint n = toInt(live);\n\t\t\t\tdouble norm = 2.0 / i / (i - 1);\n\t\t\t\tfor (int f1 = 0; f1 < N; ++f1) {\n\t\t\t\t\tif (live[f1] == 0) continue;\n\t\t\t\t\tfor (int f2 = f1 + 1; f2 < N; ++f2) {\n\t\t\t\t\t\tif (live[f2] == 0) continue;\n\t\t\t\t\t\tmemo[n - (1 << f1)] += memo[n] * p[f2][f1] * norm;\n\t\t\t\t\t\tmemo[n - (1 << f2)] += memo[n] * p[f1][f2] * norm;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (nextPermutation(live));\n\t\t\t//\t\t\tSystem.out.println(Arrays.toString(memo));\n\t\t}\n\t\tfor (int i = 0; i < N; ++i) {\n\t\t\tSystem.out.print(format.format(memo[1 << i]));\n\t\t\tif (i < N - 1) {\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String... args) {\n\t\tMain main = new Main();\n\t\tmain.start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        double[][] p = new double[n][n];\n        double[] dp = new double[1 << 18];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                p[i][j] = Double.parseDouble(s.next());\n            }\n        }\n        int last = 1 << n;\n        dp[last - 1] = 1.0;\n        for (int i = last - 2; i > 0; i--) {\n            int res = 0;\n            for (int j = 0; j < n; j++) {\n                if (((1 << j) & i) > 0) res++;\n            }\n            res++;\n            res = res * (res - 1) / 2;\n            for (int j = 0; j < n; j++) {\n                if (((1 << j) & i) == 0) {\n                    for (int z = 0; z < n; z++) {\n                        if (((1 << z) & i) > 0) {\n                            dp[i] += dp[i | (1 << j)] * 1.0 / res * p[z][j];\n                        }\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            System.out.print(dp[1 << i] + \" \");\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner();\n        PrintWriter out = new PrintWriter(System.out);\n        n = in.nextInt();\n        data = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                data[i][j] = in.nextDouble();\n            }\n        }\n        dp = new double[1 << n];\n        Arrays.fill(dp, -1);\n        for (int i = 0; i < n; i++) {\n            int a = 1 << i;\n            out.print(cal(a) + \" \");\n        }\n        out.close();\n        //System.out.print(builder.toString());\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tdouble[][] prob = new double[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tprob[i][j] = sc.nextDouble();\n\t\t\t}\n\t\t}\n\t\tdouble[] var = new double[1 << n];\n\t\tboolean[] was = new boolean[1 << n];\n\t\tArrays.fill(var, 0.0);\n\t\tArrays.fill(was, false);\n\t\twas[0] = true;\n\t\tvar[(1 << n) - 1] = 1.0;\n\t\tSet<Integer> cr = new HashSet<Integer>();\n\t\tSet<Integer> nx = new HashSet<Integer>();\n\t\tnx.add((1 << n) - 1);\n\t\tboolean[] fish = new boolean[n];\n\t\tfor (int cnt = 0; cnt < n -1; cnt++) {\n\t\t\tcr.clear();\n\t\t\tcr.addAll(nx);\n\t\t\tnx.clear();\n\t\t\tfor (Iterator<Integer> iterator = cr.iterator(); iterator.hasNext();) {\n\t\t\t\tint curr = iterator.next();\n\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\tfish[i] = ((1 << i) & curr) != 0;\n\t\t\t\t}\n\t\t\t\tint fishn = 0;\n\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\tif (fish[i]) fishn++;\n\t\t\t\t}\n\t\t\t\tif (fishn == 1) continue;\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\tif (!fish[i]) continue;\n\t\t\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\t\t\tif (!fish[j]) continue;\n\t\t\t\t\t\tint woi = curr & ~(1 << i);\n\t\t\t\t\t\tint woj = curr & ~(1 << j);\n\t\t\t\t\t\tvar[woi] += var[curr] * prob[j][i];\n\t\t\t\t\t\tvar[woj] += var[curr] * prob[i][j];\n\t\t\t\t\t\tnx.add(woi);\n\t\t\t\t\t\tnx.add(woj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdouble sum = 0.0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsum += var[1 << i];\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tSystem.out.printf(\"%.6f \", var[1 << i] / sum);\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskE2 solver = new TaskE2();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++) {\n            solver.solve(i, in, out);\n        }\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        int T = Integer.parseInt(bf.readLine());\n        for(int t=0; t<T; t++) {\n          StringTokenizer st = new StringTokenizer(bf.readLine());\n          int n = Integer.parseInt(st.nextToken());\n          int m = Integer.parseInt(st.nextToken());\n          int[][] a = new int[n][m];\n          for(int i=0; i<n; i++) {\n            st = new StringTokenizer(bf.readLine());\n            for(int j=0; j<m; j++) a[i][j] = Integer.parseInt(st.nextToken());\n\n          }\n          // small case\n          int[] max = new int[m];\n          for(int i=0; i<n; i++) {\n            for(int j=0; j<m; j++) {\n              if(a[i][j] > max[j]) max[j] = a[i][j];\n            }\n          }\n          int[][] pos = new int[m][2];\n          for(int i=0; i<m; i++) {\n            pos[i][0] = max[i];\n            pos[i][1] = i;\n          }\n          Arrays.sort(pos, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] o1, int[] o2) {\n              return Integer.compare(o2[0], o1[0]);\n            }\n          });\n\n          int[][] new_a = new int[n][Math.min(n,m)];\n          for(int i=0; i<n; i++) {\n            for(int j=0; j<Math.min(n,m); j++) {\n              new_a[i][j] = a[i][pos[j][1]];\n            }\n          }\n          int exp = 1; for(int i=0; i<Math.min(n,m); i++) exp *= n;\n          int maxval = -1;\n          for(int i=0; i<exp; i++) {\n          //  int val = i;\n            int sum = 0;\n            for(int j=0; j<n; j++) {\n              int toAdd = 0;\n              int val = i;\n              for(int k=0; k<Math.min(n,m); k++) {\n                int tooAdd = new_a[(j+val)%n][k];\n                val /= n;\n                if(tooAdd > toAdd) toAdd = tooAdd;\n              }\n              sum += toAdd;\n            }\n            if(sum > maxval) maxval = sum;\n          }\n          out.println(maxval);\n\n        }\n\n        // StringTokenizer st = new StringTokenizer(bf.readLine());\n        // int[] a = new int[n]; for(int i=0; i<n; i++) a[i] = Integer.parseInt(st.nextToken());\n        // int n = Integer.parseInt(st.nextToken());\n\n        out.close(); System.exit(0);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        int t=enter.nextInt();\n        for (int i = 0; i < t; i++) {\n            solve();\n        }\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE2 solver = new TaskE2();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE2 solver = new TaskE2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new E(), \"Main\", 1 << 26).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out, false);\n        int t = scanner.nextInt();\n        while(t-->0) {\n            int n = scanner.nextInt();\n            int m = scanner.nextInt();\n            int[][] cols = new int[m][n];\n            for(int i = 0; i < n; i++) {\n                for(int j =0; j < m; j++) {\n                    cols[j][i] = scanner.nextInt();\n                }\n            }\n            int maxMask = 1 << n;\n            int[] dp = new int[maxMask];\n            Arrays.fill(dp, -1);\n            dp[0] = 0;\n            for(int i = 0; i < m; i++) {\n                for(int mask = maxMask-1; mask>=0; mask--) {\n                    int[] arr = cols[i].clone();\n                    for(int j = 0; j < n; j++) {\n                        for(int smask = mask; smask >= 0; smask = (smask-1)&mask) {\n                            if (dp[smask] == -1) continue;\n                            int add = 0;\n                            for(int k = 0; k < n; k++) {\n                                if (((mask^smask)&(1 << k)) > 0) add += arr[k];\n                            }\n                            dp[mask] = Math.max(dp[mask], dp[smask] + add);\n                            if (smask == 0) break;\n                        }\n                        arr = shift(arr);\n                    }\n                }\n            }\n            out.println(dp[maxMask-1]);\n        }\n        out.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        int t = ri();\n        while (t --> 0) {\n            int n = rni(), m = ni(), a[][] = new int[m][n], dp[] = new int[1 << n];\n            for (int i = 0; i < n; ++i) {\n                int[] row = ria(m);\n                for (int j = 0; j < m; ++j) {\n                    a[j][i] = row[j];\n                }\n            }\n            for (int i = 0; i < m; ++i) {\n                for (int r = 0; r < 1 << n; ++r) {\n                    for (int j = 0; j < n; ++j) {\n                        if ((r & (1 << j)) == 0) {\n                            continue;\n                        }\n                        dp[r] = max(dp[r], dp[r ^ (1 << j)] + a[i][j]);\n                    }\n                }\n                for (int r = 0; r < 1 << n; ++r) {\n                    int s = r;\n                    for (int j = 0; j < n; ++j) {\n                        if ((s & 1) != 0) {\n                            s = (s >> 1) | (1 << (n - 1));\n                        } else {\n                            s >>= 1;\n                        }\n                        dp[s] = max(dp[s], dp[r]);\n                    }\n                }\n            }\n            prln(dp[(1 << n) - 1]);\n        }\n        close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        // TODO code application logic here\n        FastIO in = new FastIO();\n        int t = in.ni();\n        // int t = 1;\n        while (t-- > 0) {\n            int n = in.ni();\n            int m = in.ni();\n            int a[][] = new int[n][m];\n            int b[][] = new int[m][n];\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    a[i][j] = in.ni();\n                    b[j][i] = a[i][j];\n                }\n            }\n            for (int i = 0; i < m; i++) {\n                Arrays.sort(b[i]);\n            }\n            Data d[] = new Data[m];\n            for (int i = 0; i < m; i++) {\n                d[i] = new Data(-b[i][n - 1], i);\n            }\n            Arrays.sort(d);\n\n            int col = Math.min(n, m);\n            int c[][] = new int[n][col];\n            for (int i = 0; i < col; i++) {\n                for (int j = 0; j < n; j++) {\n                    c[j][i] = a[j][d[i].b];\n                }\n            }\n            // for (int i = 0; i < n; i++) {\n            //     for (int j = 0; j < col; j++) {\n            //         System.out.print(c[i][j] + \" \");\n            //     }\n            //     System.out.println();\n            // }\n            System.out.println(ans(c, n, col, 0));\n        }\n        in.bw.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new A().runIO();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, null, \"BaZ\", 1 << 27) {\n            public void run() {\n                try {\n                    solve();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main (String [] arg) throws Throwable {\n\t\tint t = nextInt();\n\t\tC : for (int ii = 0; ii<t; ++ii) {\n\t\t\tint n = nextInt();\n\t\t\tint m = nextInt();\n\t\t\tPair [] P = new Pair [n*m];\n\t\t\tint [][] g = new int [n][m];\n\t\t\tfor (int i = 0; i<n; ++i) { \n\t\t\t\tfor (int j = 0; j<m; ++j) {\n\t\t\t\t\tg[i][j] = nextInt();\n\t\t\t\t\tP[j + m*i] = new Pair (i, j, g[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i<P.length; ++i) if (P[i] == null) continue C;\n\t\t\tArrays.sort(P);\n\t\t\tHashSet<Integer> rotcols =new HashSet<Integer>();\n\t\t\tfor (int i = 0; i<n; ++i) {\n\t\t\t\t//System.err.println(\"Adding \" + P[i].j + \" , \" + P[i].L);\n\t\t\t\trotcols.add(P[i].j);\n\t\t\t}\n\t\t\t\n\t\t\tif (n <= 3 || rotcols.size() >= 3) {\n\t\t\t\t//System.err.println(\"EASY\");\n\t\t\t\tint sum = 0;\n\t\t\t\tfor (int i = 0; i<n && i < P.length; ++i) sum += P[i].L;\n\t\t\t\tSystem.out.println(sum);\n\t\t\t} else {\n\t\t\t\t// n == 4\n\t\t\t\tif (P.length > 4) rotcols.add(P[4].j);\n\t\t\t\t//Integer [] rr = rotcols.toArray(new Integer[0]);\n\t\t\t\tint [] rot = new int [rotcols.size()];\n\t\t\t\tint maxmax = 0;\n\t\t\t\tA : while (true) {\n\t\t\t\t\tfor (int i = 0; i<rot.length; ++i) {\n\t\t\t\t\t\trot[i]++;\n\t\t\t\t\t\tif (rot[i] == n) {\n\t\t\t\t\t\t\trot[i] = 0;\n\t\t\t\t\t\t\tif (i == rot.length-1) break A;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint [] max = new int [n];\n\t\t\t\t\tfor (int i = 0; i<n; ++i) {\n\t\t\t\t\t\tint j = 0;\n\t\t\t\t\t\tfor (int col : rotcols) {\n\t\t\t\t\t\t\tmax[i] = Math.max(max[i], g[(i+rot[j])%n][col]);\n\t\t\t\t\t\t\tj++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint sum = 0;\n\t\t\t\t\tfor (int m2 : max) sum+= m2;\n\t\t\t\t\tmaxmax = Math.max(maxmax, sum);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(maxmax);\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    Test te = new Test();\n    te.start();\n    writer.flush();\n  }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E2VrashayaStolbciUslozhnennayaVersiya solver = new E2VrashayaStolbciUslozhnennayaVersiya();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        int t = sc.nextInt();\n        while (t > 0) {\n            int n = sc.nextInt(); int m = sc.nextInt();\n            int [][] a = new int[m][n];\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    a[j][i] = sc.nextInt();\n                }\n            }\n            int [][] dp = new int[m + 1][(1 << n)];\n            for (int i = 1; i <= m; i++) {\n                for (int j = 0; j < (1 << n); j++) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j]);\n                    int [] b = a[i - 1];\n                    for (int start = 0; start < n; start++) {\n                        int [] c = new int[n];\n                        for (int p = 0; p < n; p++) c[p] = b[(start + p) % n];\n                        for (int k = 0; k < (1 << n); k++) {\n                            if ((k | j) == j) {\n                                int sum = 0;\n                                for (int p = 0; p < n; p++) {\n                                    if (((k >> p) & 1) == 0 && ((j >> p) & 1) == 1) sum += c[p];\n                                }\n                                dp[i][j] = Math.max(dp[i][j], dp[i - 1][k] + sum);\n                            }\n                        }\n                    }\n                }\n            }\n            out.println(dp[m][(1 << n) - 1]);\n            t--;\n        }\n\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        pow = new int[15];\n        pow[0] = 1;\n        for (int i = 1; i < pow.length; i++) {\n            pow[i] = pow[i - 1] * 2;\n        }\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            n = in.nextInt();\n            int m = in.nextInt();\n            int[][] arr = new int[n][m];\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    arr[j][k] = in.nextInt();\n                }\n            }\n            Pair[] best = new Pair[m];\n            for (int j = 0; j < m; j++) {\n                best[j] = new Pair(j);\n                for (int k = 0; k < n; k++) {\n                    best[j].update(arr[k][j]);\n                }\n            }\n            Arrays.sort(best);\n            real = new int[n][n];\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < Math.min(n, m); k++) {\n                    real[j][k] = arr[j][best[k].k];\n                }\n            }\n            dp = new int[1 << n][];\n            Stack<Integer>[] min = new Stack[n + 1];\n            for (int j = 0; j <= n; j++) {\n                min[j] = new Stack<>();\n            }\n            for (int j = 0; j < dp.length; j++) {\n                int cnt = 0;\n                for (int k = 0; k < n; k++) {\n                    if ((j & pow[k]) != 0) {\n                        cnt++;\n                    }\n                }\n                min[cnt].add(j);\n            }\n            for (int j = 0; j < min.length; j++) {\n                for (int x : min[j]) {\n                    if (j == 0) {\n                        dp[x] = new int[n];\n                    } else {\n                        calc(x);\n                    }\n                }\n            }\n            System.out.println(sum(dp[dp.length - 1]));\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        boolean local = System.getProperty(\"ONLINE_JUDGE\") == null;\n        boolean async = true;\n\n        Charset charset = Charset.forName(\"ascii\");\n\n        FastIO io = local ? new FastIO(new FileInputStream(\"D:\\\\DATABASE\\\\TESTCASE\\\\Code.in\"), System.out, charset) : new FastIO(System.in, System.out, charset);\n        Task task = new Task(io, new Debug(local));\n\n        if (async) {\n            Thread t = new Thread(null, task, \"dalt\", 1 << 27);\n            t.setPriority(Thread.MAX_PRIORITY);\n            t.start();\n            t.join();\n        } else {\n            task.run();\n        }\n\n        if (local) {\n            io.cache.append(\"\\n\\n--memory -- \\n\" + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) >> 20) + \"M\");\n        }\n\n        io.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E1RotateColumnsEasyVersion solver = new E1RotateColumnsEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\t/**/\n\t\tDataInputStream in = new DataInputStream(System.in);\n\t\t/*/\n\t\tDataInputStream in = new DataInputStream(new FileInputStream(\"src/e.in\"));\n\t\t/**/\n\t\t\n\t\tin.read(buf, 0, 1<<26);\n\t\tint t = nni();\n\t\tfor (int z = 0; z < t; z++) {\n\t\t\tint n = nni();\n\t\t\tint m = nni();\n\t\t\tint[][] mat = new int[n][m];\n\t\t\tint[] rmax = new int[n];\n\t\t\tint tot = 0;\n\t\t\tHashSet<Integer> care = new HashSet<>();\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tPriorityQueue<Integer> cols = new PriorityQueue<>();\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tmat[i][j] = nni();\n\t\t\t\t\tcols.add(-(mat[i][j]*2000+j));\n\t\t\t\t\trmax[i] = Math.max(rmax[i], mat[i][j]);\n\t\t\t\t}\n\t\t\t\ttot += rmax[i];\n\t\t\t\tfor (int j = 0; j < Math.min(m, n); j++)\n\t\t\t\t\tcare.add((-cols.poll())%2000);\n\t\t\t}\n\t\t\tList<Integer> cal = care.stream().sorted().collect(Collectors.toList());\n\t\t\tint ret = tot;\n\t\t\tif (Math.min(m, n)==1) {\n\t\t\t\tSystem.out.println(ret);\n\t\t\t} else if (Math.min(m, n)==2) {\n\t\t\t\tfor (int a = 0; a < cal.size(); a++) {\n\t\t\t\t\tint la = cal.get(a);\n\t\t\t\t\tfor (int d = 0; d < cal.size(); d++) {\n\t\t\t\t\t\tif (d==a)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tint ld = cal.get(d);\n\t\t\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\t\t\tint tret = 0;\n\t\t\t\t\t\t\tfor (int x = 0; x < n; x++) {\n\t\t\t\t\t\t\t\ttret += Math.max(mat[x][ld], mat[(i+x)%n][la]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tret = Math.max(ret, tret);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(ret);\n\t\t\t} else if (Math.min(m, n)==3) {\n\t\t\t\tfor (int a = 0; a < cal.size(); a++) {\n\t\t\t\t\tint la = cal.get(a);\n\t\t\t\t\tfor (int b = a+1; b < cal.size(); b++) {\n\t\t\t\t\t\tint lb = cal.get(b);\n\t\t\t\t\t\tfor (int d = 0; d < cal.size(); d++) {\n\t\t\t\t\t\t\tif (d==a)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tif (d==b)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tint ld = cal.get(d);\n\t\t\t\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\t\t\t\t\tint tret = 0;\n\t\t\t\t\t\t\t\t\tfor (int x = 0; x < n; x++) {\n\t\t\t\t\t\t\t\t\t\ttret += Math.max(mat[x][ld], Math.max(mat[(i+x)%n][la], mat[(j+x)%n][lb]));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tret = Math.max(ret, tret);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(ret);\n\t\t\t} else if (Math.min(m, n)==4) {\n\t\t\t\tfor (int a = 0; a < cal.size(); a++) {\n\t\t\t\t\tint la = cal.get(a);\n\t\t\t\t\tfor (int b = a+1; b < cal.size(); b++) {\n\t\t\t\t\t\tint lb = cal.get(b);\n\t\t\t\t\t\tfor (int c = b+1; c < cal.size(); c++) {\n\t\t\t\t\t\t\tint lc = cal.get(c);\n\t\t\t\t\t\t\tfor (int d = 0; d < cal.size(); d++) {\n\t\t\t\t\t\t\t\tif (d==a)\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\tif (d==b)\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\tif (d==c)\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\tint ld = cal.get(d);\n\t\t\t\t\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\t\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\t\t\t\t\t\tfor (int k = 0; k < n; k++) {\n\t\t\t\t\t\t\t\t\t\t\tint tret = 0;\n\t\t\t\t\t\t\t\t\t\t\tfor (int x = 0; x < n; x++) {\n\t\t\t\t\t\t\t\t\t\t\t\ttret += Math.max(mat[x][ld], Math.max(mat[(i+x)%n][la], Math.max(mat[(j+x)%n][lb], mat[(k+x)%n][lc])));\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tret = Math.max(ret, tret);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(ret);\n\t\t\t}\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tir = new InputReader(System.in);\n\t\tout = new PrintWriter(System.out);\n\t\tsolve();\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner sc = new FastScanner();\n        int Q = sc.nextInt();\n        for (int q = 0; q < Q; q++) {\n        \tint N = sc.nextInt();\n        \tint M = sc.nextInt();\n        \tint[][] grid = new int[N][M];\n        \tint[][] maxes = new int[M][2];\n        \tfor (int i = 0; i < M; i++)\n        \t\tmaxes[i][1] = i;\n        \tfor (int i = 0; i < N; i++) {\n        \t\tfor (int j = 0; j < M; j++) {\n        \t\t\tgrid[i][j] = sc.nextInt();\n        \t\t\tmaxes[j][0] = Math.max(maxes[j][0],grid[i][j]);\n        \t\t}\n        \t}\n        \tmaxes = sort(maxes);\n        \tint[] keyCols = new int[Math.min(M, N)];\n        \tfor (int i = 0; i < keyCols.length; i++)\n        \t\tkeyCols[i] = maxes[i][1];\n        \t\n        \tint ans = 0;\n        \tfor (int x = 0; x < (int)Math.pow(N,N); x++) {\n        \t\tint[] base = baseN(keyCols.length,x);\n        \t\tint ansx = 0;\n        \t\tfor (int i = 0; i < N; i++) {\n            \t\tint r = 0;\n            \t\tfor (int j = 0; j < keyCols.length; j++) {\n            \t\t\tr = Math.max(r,grid[(i+base[j])%N][keyCols[j]]);\n            \t\t}\n            \t\tansx += r;\n        \t\t}\n        \t\tans = Math.max(ans,ansx);\n        \t}\n        \tSystem.out.println(ans);\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Thread(null ,new Runnable(){\n            public void run(){\n                try{solveIt();} catch(Exception e){e.printStackTrace(); System.exit(1);}\n            }\n        },\"Main\",1<<28).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(null, new E(), \"Main\", 1 << 26).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint tc = sc.nextInt();\n\t\twhile (tc-- > 0) {\n\t\t\tn = sc.nextInt();\n\t\t\tm = sc.nextInt();\n\t\t\tindices = new Integer[m];\n\n\t\t\tmemo = new int[1 << n][m];\n\t\t\tfor (int[] x : memo)\n\t\t\t\tArrays.fill(x, -1);\n\t\t\ta = new int[n][m];\n\t\t\tint[] max = new int[m];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\ta[i][j] = sc.nextInt();\n\t\t\t\t\tmax[j] = Math.max(max[j], a[i][j]);\n\t\t\t\t}\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tindices[j] = j;\n\t\t\t}\n\t\t\tArrays.sort(indices, Comparator.comparingInt(i -> -max[i]));\n\t\t\tout.println(dp(0, 0));\n\t\t}\n\t\tout.close();\n\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastReader in = new FastReader(System.in);\n//        FastReader in = new FastReader(new FileInputStream(\"input.txt\"));\n        PrintWriter out = new PrintWriter(System.out);\n//        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n\n\n        int t = in.nextInt();\n\n        while (t-- > 0) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n\n            int[][] a = new int[n + 1][m];\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    a[i][j] = in.nextInt();\n                    a[n][j] = Math.max(a[n][j], a[i][j]);\n                }\n            }\n\n            a = transpose(a, n, m);\n\n            Arrays.sort(a, new Comparator<int[]>() {\n                @Override\n                public int compare(int[] o1, int[] o2) {\n                    int max1 = 0;\n                    for (int i = 0; i < o1.length; i++) {\n                        max1 = Math.max(max1, o1[i]);\n                    }\n\n                    int max2 = 0;\n                    for (int i = 0; i < o2.length; i++) {\n                        max2 = Math.max(max2, o2[i]);\n                    }\n\n                    return max2 - max1;\n                }\n            });\n\n            a = transpose(a, m, n);\n\n            int[] dp = new int[1 << n];\n\n            for (int i = 0; i < Math.min(n, m); i++) {\n                int[] best = new int[1 << n];\n\n                for (int j = 1; j < (1 << n); j++) {\n                    for (int k = 0; k < n; k++) {\n                        int sum = 0;\n                        for (int l = 0; l < n; l++) {\n                            if ((j & (1 << l)) != 0)\n                                sum += a[(l + k) % n][i];\n                        }\n                        best[j] = Math.max(best[j], sum);\n                    }\n                }\n\n                int[] dp1 = dp.clone();\n\n                for (int j = 0; j < (1 << n); j++) {\n                    for (int k = j; k > 0; k = (k - 1) & j) {\n                        dp[j] = Math.max(dp[j], dp1[k ^ j] + best[k]);\n                    }\n                }\n            }\n\n            out.println(dp[(1 << n) - 1]);\n        }\n\n\n\n\n\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            n = in.nextInt();\n            m = in.nextInt();\n            arr = new int[n][m];\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    arr[j][k] = in.nextInt();\n                }\n            }\n            Item[] max = new Item[m];\n            for (int j = 0; j < m; j++) {\n                max[j] = new Item(j, 0);\n                for (int k = 0; k < n; k++) {\n                    max[j].x = Math.max(max[j].x, arr[k][j]);\n                }\n            }\n            Arrays.sort(max);\n            int[] cols = new int[Math.min(n, m)];\n            for (int j = 0; j < cols.length; j++) {\n                cols[j] = max[j].i;\n            }\n            System.out.println(calc(cols, 0, \"\"));\n        }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception { new E1().run(); }\n", "complexity": "np"}
{"code": "    public static void main(String args[])throws IOException{\n        int t = Integer.parseInt(r.readLine());\n\n        while(t-->0)\n            run();\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E2RotateColumnsHardVersion solver = new E2RotateColumnsHardVersion();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException\n        new E().go();\n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    Test te = new Test();\n    te.start();\n    writer.flush();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastScanner sc = new FastScanner(System.in);\n\t\tFastPrinter out = new FastPrinter(System.out);\n\t\tint T = sc.nextInt();\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tnew E1().run(sc, out);\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    Test te = new Test();\n    te.start();\n    writer.flush();\n  }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Input in = new Input(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint tc = sc.nextInt();\n\t\twhile (tc-- > 0) {\n\t\t\tn = sc.nextInt();\n\t\t\tm = sc.nextInt();\n\t\t\tmemo = new int[1 << n][m];\n\t\t\tfor (int[] x : memo)\n\t\t\t\tArrays.fill(x, -1);\n\t\t\ta = new int[n][m];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t\t\ta[i][j] = sc.nextInt();\n\t\t\tout.println(dp(0, 0));\n\t\t}\n\t\tout.close();\n\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(System.out);\n        int test = nextInt();\n        while(test-- > 0) {\n            n = nextInt();\n            m = nextInt();\n            a = new int [n][m];\n            for(int i = 0;i < n;i++) {\n                for(int j = 0;j < m;j++) a[i][j] = nextInt();\n            }\n            used = new ArrayList<>();\n            num = new int [n * m];\n            ans = 0;\n\n            pair b[] = new pair[n * m];\n\n            for(int i = 0;i < n;i++) {\n                for(int j = 0;j < m;j++) {\n                    b[i * m + j] = new pair(a[i][j], j);\n                }\n            }\n\n            Arrays.sort(b, new pair());\n\n            for(int i = b.length - 1;i >= Math.max(0, b.length - 5);i--) {\n                int v = b[i].y;\n\n                boolean bad = false;\n\n                for(int j = 0;j < used.size();j++) if (used.get(j) == v) bad = true;\n\n                if (!bad) used.add(v);\n            }\n\n            rec(0);\n\n            pw.println(ans);\n        }\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    OutputWriter out = new OutputWriter(outputStream);\n    TaskE1 solver = new TaskE1();\n    int testCount = Integer.parseInt(in.next());\n    for (int i = 1; i <= testCount; i++) {\n      solver.solve(i, in, out);\n    }\n    out.close();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tMyScanner sc = new MyScanner();\n\t\tint t = sc.nextInt();\n\t\tfor(int w = 0; w < t; w++) {\n\t\t\tint n = sc.nextInt(), m = sc.nextInt();\n\t\t\tTreeSet<X> set = new TreeSet<X>();\n\t\t\tint[][] grid = new int[n][m];\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\t\tgrid[i][j] = sc.nextInt();\n\t\t\t\t\tset.add(new X(i, j, grid[i][j]));\n\t\t\t\t}\n\t\t\tY[] top4 = new Y[n];\n\t\t\tint sum = 0;\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\ttop4[i] = new Y(set.pollLast());\n\t\t\t\tsum += top4[i].a;\n\t\t\t}\n\t\t\tArrays.sort(top4);\n\t\t\tHashSet<String> strs = new HashSet<String>();\n\t\t\tAAA[] sss = new AAA[n];\n\t\t\tboolean[] used = new boolean[n];\n\t\t\tif(n == 4) {\n\t\t\t\tfor(int i = 0; i < 4; i++) {\n\t\t\t\t\tint max = -1, jj = -1;\n\t\t\t\t\tfor(int j = 0; j < 4; j++) {\n\t\t\t\t\t\tif(!used[j] && top4[j].a > max) {\n\t\t\t\t\t\t\tmax = top4[j].a;\n\t\t\t\t\t\t\tjj = j;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tused[jj] = true;\n\t\t\t\t\tsss[i] = new AAA(max, jj);\n\t\t\t\t}\n\t\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\t\tstrs.add(top4[i].i + \" \" + top4[i].j);\n\t\t\t}\n\t\t\tint ans = sum;\n\t\t\tif(n == 4 && top4[0].j == top4[1].j && top4[2].j == top4[3].j && top4[0].j != top4[2].j) {\n\t\t\t\tif(two(top4[0], top4[1]) != two(top4[2], top4[3])) {\n\t\t\t\t\tans = 0;\n\t\t\t\t\tint oneCol = two(top4[0], top4[1]) ? top4[2].j : top4[0].j;\n\t\t\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\t\t\tfor(int j = 0; j < m; j++)\n\t\t\t\t\t\t\tif(!strs.contains(i + \" \" + j)){\n\t\t\t\t\t\t\t\tint no = -1;\n\t\t\t\t\t\t\t\tfor(int k = 0; k < 4; k++)\n\t\t\t\t\t\t\t\t\tif(j == oneCol && top4[k].j == oneCol && two(top4[k], new Y(new X(i, j, 0))))\n\t\t\t\t\t\t\t\t\t\tno = k;\n\t\t\t\t\t\t\t\tans = max(ans, sum - sss[no == sss[3].i ? 2 : 3].a + grid[i][j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(ans);\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        scanner = new FastScanner();\n        int t = scanner.nextInt();\n        for (int i = 0; i < t; i++) {\n            solve();\n            result.append(\"\\n\");\n        }\n        System.out.print(result.toString());\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        LightScanner in = new LightScanner(inputStream);\n        LightWriter out = new LightWriter(outputStream);\n        E1RotateColumnsEasyVersion solver = new E1RotateColumnsEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tJS scan = new JS();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint t = scan.nextInt();\n\t\tfor(int q = 1; q <= t; q++){\n\t\t\tans = 0;\n\t\t\tn = scan.nextInt();\n\t\t\tm = scan.nextInt();\n\t\t\tmat = new int[n][m];\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\tmat[i][j] = scan.nextInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[] max = new int[m];\n\t\t\tPriorityQueue<Item> pq = new PriorityQueue<Item>();\n\t\t\tfor(int i = 0; i < m; i++){\n\t\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\t\tmax[i] = Math.max(max[i], mat[j][i]);\n\t\t\t\t}\n\t\t\t\tpq.add(new Item(i, max[i]));\n\t\t\t}\n\t\t\tArrayList<Item> guys = new ArrayList<Item>();\n\t\t\twhile(!pq.isEmpty() && guys.size() < 8){\n\t\t\t\tItem tt = pq.poll();\n\t\t\t\tguys.add(tt);\n\t\t\t}\n\t\t\tperm(guys, 0, new int[guys.size()]);\n\t\t\tout.println(ans);\n\t\t}\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE1 solver = new TaskE1();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tpw=new PrintWriter(System.out);\n\t\tsc = new MScanner(System.in);\n\t\tint tc=sc.nextInt();\n\t\twhile(tc-->0) {\n\t\t\tn=sc.nextInt();m=sc.nextInt();\n\t\t\tin=new int[n][m];\n\t\t\tfor(int i=0;i<n;i++)in[i]=sc.intArr(m);\n\t\t\tmemo=new int[m][1<<n];\n\t\t\tfor(int i=0;i<m;i++)Arrays.fill(memo[i], -1);\n\t\t\tpw.println(dp(0, 0));\n\t\t}\n\t\t\n\t\t\n\t\tpw.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE1 solver = new TaskE1();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int tc = sc.nextInt();\n        while (tc-- > 0) {\n            ans = 0;\n            n = sc.nextInt();\n            int m = sc.nextInt();\n            boolean[] taken = new boolean[m];\n            PriorityQueue<Pair> pq = new PriorityQueue<>();\n            a = new int[n][m];\n            for (int i = 0; i < n; i++)\n                for (int j = 0; j < m; j++) {\n                    int cur = sc.nextInt();\n                    pq.add(new Pair(i, j, cur));\n                    a[i][j] = cur;\n                }\n            cols = new ArrayList<>();\n            while (!pq.isEmpty() && cols.size() < 8) {\n                Pair cur = pq.remove();\n                if (!taken[cur.j]) cols.add(cur.j);\n                taken[cur.j] = true;\n            }\n            solve(0,new int [cols.size()]);\n            out.println(ans);\n        }\n        out.flush();\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        if(memory)new Thread(null, new Runnable() {public void run(){try{new Main().run();}catch(Exception e){e.printStackTrace();}}}, \"1\", 1 << 28).start();\n        else new Main().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew B().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        int k = sc.nextInt();\n        a = sc.nextInt();\n        level = new int[n];\n        loyality = new int[n];\n        for (int i = 0; i < n; i++) {\n            level[i] = sc.nextInt();\n            loyality[i] = sc.nextInt() / 10;\n        }\n        mid = (n/2) +1;\n        sol = 0;\n        getMax(0, k);\n        System.out.println(sol);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new DarkAssembly().start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tLocale.setDefault(Locale.US);\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\t// new Thread(new Main()).start();\n\t\tnew Thread(null, new Main(), \"1\", 1 << 25).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tLocale.setDefault(Locale.ENGLISH);\n\t\tif (fileIOMode) {\n\t\t\tin = new BufferedReader(new FileReader(problemName + \".in\"));\n\t\t\tout = new PrintWriter(problemName + \".out\");\n\t\t} else {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t}\n\t\ttokenizer = new StringTokenizer(\"\");\n\n\t\tnew Thread(new flags1225()).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew B().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Solution().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        n = in.nextInt();\n        KA = in.nextInt();\n        A = in.nextInt();\n        b = new int[n];\n        l = new int[n];\n\n        for (int i = 0; i < l.length; i++) {\n            b[i] = in.nextInt();\n            l[i] = in.nextInt();\n        }\n        dp = new double[n + 2][n + 2][n * 9999 + 2];\n        go(0, KA);\n        System.out.printf(\"%.6f\\n\", ans);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new TaskB().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new DarkAssembly().start();\n    }\n", "complexity": "np"}
{"code": "   public static void main(String[] args)\n      new B(new FastScanner());\n   }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tn = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tA = sc.nextInt();\n\t\tb = new int[n];\n\t\tl = new int[n];\n\t\tsw = new int[n];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tb[i] = sc.nextInt();\n\t\t\tl[i] = sc.nextInt();\n\t\t}\n\t\tmax = 0;\n\t\tsearch(k, 0);\n\t\tSystem.out.println(max);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception { // {{{\n        new B();\n    } // }}}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tnew B().solve();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(239);\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tn = in.nextInt();\n\t\tk = in.nextInt();\n\t\tA = in.nextInt();\n\t\tmemo = new double[n+1][n+1][1<<n];\n\t\tl = new int[n];\n\t\tp = new int[n];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tl[i] = in.nextInt();\n\t\t\tp[i] = in.nextInt();\n\t\t}\n\t\tSystem.out.printf(\"%.10f%n\",go(0,k));\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new BetaRound81_B(), \"\", 256 * (1L << 20)).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tFastScanner in = new FastScanner(inputStream);\n\t\tFastPrinter out = new FastPrinter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args)\n        try\n        {\n            Parserdoubt pd=new Parserdoubt(System.in);\n            PrintWriter pw=new PrintWriter(System.out);\n            senators=pd.nextInt();\n            int candies=pd.nextInt();\n            senator_attr=new int[senators][2];\n            A=pd.nextInt();\n            for(int i=0;i<senators;i++)\n            {\n                senator_attr[i][0]=pd.nextInt();\n                senator_attr[i][1]=pd.nextInt();\n            }\n            max=-1;\n            make(0,candies,new int[senators]);\n            //print(maxer);\n            System.out.printf(\"%.10f\",max);\n        }\n        catch(Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException\n        new Thread(null, new B(), \"\", 1 << 20).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tB2 t = new B2();\n\t\tt.run();\n\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        int i,j,k;\n        \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        \n        N = Integer.parseInt(st.nextToken());\n        K = Integer.parseInt(st.nextToken());\n        A = Integer.parseInt(st.nextToken());\n        \n        needed = N/2+1;\n        \n        b = new int[N];\n        l = new int[N];\n        dl = new double[N];\n        \n        for (i=0;i<N;i++) {\n            \n            st = new StringTokenizer(br.readLine());\n            b[i] = Integer.parseInt(st.nextToken());\n            l[i] = Integer.parseInt(st.nextToken());\n            dl[i] = ((double)l[i])/100.0;\n            \n        }\n        \n        base = new int[8];\n        base[0] = 1;\n        for (i=1;i<N;i++) {\n            base[i] = base[i-1]*2;\n        }\n        \n        best = 0.0;\n        \n        giveCandies(0, K);\n        \n        DecimalFormat df = new DecimalFormat(\"0.0000000000\");\n        \n        String rs = df.format(best);\n        String mrs = \"\";\n        \n        for (i=0;i<rs.length();i++) {\n            if (rs.charAt(i) == ',') {\n                mrs += '.';\n            } else {\n                mrs += rs.charAt(i);\n            }\n        }\n        \n        System.out.println(mrs);\n        \n        \n        \n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        n = in.nextInt();\n        int k = in.nextInt();\n\n        A = in.nextInt();\n\n        b = new int[n];\n        l = new int[n];\n        for (int i = 0; i < n; i++) {\n            b[i] = in.nextInt();\n            l[i] = in.nextInt();\n        }\n        masks = new boolean[1 << n];\n\n        max = 0;\n        rec(0, k);\n        System.out.println(max);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n        int n = in.nextInt();\n        int k = in.nextInt();\n        int A = in.nextInt();\n        data = new Senator[n];\n        for (int i = 0; i < n; i++) {\n            data[i] = new Senator(in.nextInt(), in.nextInt());\n        }\n        out.println(cal(0, new int[n], A, k));\n\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new DarkAssembly().start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tLocale.setDefault(Locale.US);\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\t// new Thread(new Main()).start();\n\t\tnew Thread(null, new Main(), \"1\", 1 << 25).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n        new Main().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException\t{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint k = Integer.parseInt(st.nextToken());\n\t\tourLevel = Integer.parseInt(st.nextToken());\n\t\tState[] list = new State[n];\n\t\tfor(int i = 0; i < n; i++)\t{\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tlist[i] = new State(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())/10);\n\t\t}\n\t\tSystem.out.println(solve(list, 0, k));\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner r = new Scanner(System.in);\n        \n        int n = r.nextInt();\n        int k = r.nextInt();\n        int A = r.nextInt();\n        \n        Person[] p = new Person[n];\n        \n        for(int i = 0; i < n; i++){         \n            int l = r.nextInt();\n            int prob = r.nextInt();\n            \n            p[i] = new Person(l, prob);\n        }\n        \n        int[] add = new int[n];\n        \n        double res = dfs(0, k, p, add, n, A);\n        \n        System.out.println(res);\n        \n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new BNew().solve();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new B().solve();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tint n = nextInt(), k = nextInt(), A = nextInt(), r = n + k - 1;\n\t\tint[][] s = new int[n][];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ts[i] = new int[] { nextInt(), nextInt() };\n\t\t}\n\t\tdouble max = 0;\n\t\tint[] prb = new int[n];\n\t\tfor (int u = (1 << r); u >= 0; u--) {\n\t\t\t// проверим на n-1 единичек\n\t\t\tint ones = 0;\n\t\t\tfor (int i = 0; i < r; i++) {\n\t\t\t\tif ((u & (1 << i)) != 0) {\n\t\t\t\t\tones++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ones != n - 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// проверили. расставляем массив\n\t\t\tones = 0;\n\t\t\tint p = 0;\n\t\t\tfor (int i = 0; i < r; i++) {\n\t\t\t\tif ((u & (1 << i)) == 0) {\n\t\t\t\t\tones++;\n\t\t\t\t} else {\n\t\t\t\t\tprb[p] = ones * 10;\n\t\t\t\t\tp++;\n\t\t\t\t\tones = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprb[p] = ones * 10;\n\t\t\tp++;\n\t\t\tones = 0;\n\t\t\tdouble sum = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (prb[i] > 100 - s[i][1])\n\t\t\t\t\tprb[i] = 100 - s[i][1];\n\t\t\t\ts[i][1] = prb[i] + s[i][1];\n\t\t\t}\n\t\t\tfor (int i = (1 << n) - 1; i >= 0; i--) {\n\t\t\t\tdouble prob = 1;\n\t\t\t\tint lvl = 0;\n\t\t\t\tint kill = 0;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif ((i & (1 << j)) != 0) {\n\t\t\t\t\t\tprob *= s[j][1] / 100.0;\n\t\t\t\t\t\tkill--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlvl += s[j][0];\n\t\t\t\t\t\tprob *= (1 - s[j][1] / 100.0);\n\t\t\t\t\t\tkill++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (kill >= 0) {\n\t\t\t\t\tsum += prob * ((double) A / (A + lvl));\n\t\t\t\t} else {\n\t\t\t\t\tsum += prob;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ts[i][1] = -prb[i] + s[i][1];\n\t\t\t}\n\t\t\tmax = Math.max(max, sum);\n\t\t}\n\t\tout.println(max);\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        // sc = new Scanner(System.in);\n        sc = (new Main()).new myScanner(new BufferedReader(new InputStreamReader(System.in)));\n        pw = new PrintWriter(System.out);\n        startTime = System.nanoTime();\n        (new Main()).go();\n        // errprintln(\"nanoTime=\"+(System.nanoTime()-startTime)/1000000/1000.0);\n        pw.flush();\n        System.exit(0);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line = br.readLine();\n        String[] d = line.split(\" \");\n        int gnum = Integer.valueOf(d[0]);\n        int cnum = Integer.valueOf(d[1]);\n        int level = Integer.valueOf(d[2]);\n        _gnum = gnum;\n        _cnum = cnum;\n        _needs = (gnum + 1) / 2;\n        if (gnum % 2 == 0) {\n        \t_needs += 1;\n        }\n        _level = level;\n        \n        int[][] grl = new int[gnum][2];\n        for (int g = 0 ; g < gnum ; g++) {\n        \tline = br.readLine();\n        \tString[] gg = line.split(\" \");\n        \tgrl[g][0] = Integer.valueOf(gg[0]);\n        \tgrl[g][1] = Integer.valueOf(gg[1]);\n        }\n        \n        for (int a = 0 ; a < gnum ; a++) {\n            for (int b = 0 ; b < gnum - 1 ; b++) {\n            \tif (grl[b][1] < grl[b+1][1]) {\n            \t\tint tmp = grl[b][0];\n            \t\tgrl[b][0] = grl[b+1][0];\n            \t\tgrl[b+1][0] = tmp;\n            \t\ttmp = grl[b][1];\n            \t\tgrl[b][1] = grl[b+1][1];\n            \t\tgrl[b+1][1] = tmp;\n            \t}\n            } \t\n        }\n        \n        int ag = 0;\n        int xnum = cnum;\n        for (int g = 0 ; g < gnum ; g++) {\n        \tint needs = (100 - grl[g][1]) / 10;\n        \tint roy = 0;\n        \tif (needs <= xnum) {\n        \t\txnum -= needs;\n        \t\troy = 100;\n        \t} else {\n        \t\troy = grl[g][1] + xnum * 10;\n        \t\txnum = 0;\n        \t}\n        \tif (roy >= 100) {\n        \t\tag++;\n        \t}\n        }\n        if (ag >= _needs) {\n        \tSystem.out.println(1.0);\n        \treturn;\n        }\n        \n        candydfs(grl, 0, _cnum);\n        \n        System.out.println(_maxans);\n        br.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new taskB().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        new Main().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new TemnayaAssambleya()).run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Thread(new B()).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new DarkAssembly().start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        n = in.nextInt();\n        int k = in.nextInt();\n        A = in.nextDouble();\n        B = new int[n];\n        L = new int[n];\n        for (int i = 0; i < n; i++) {\n            B[i] = in.nextInt();\n            L[i] = in.nextInt();\n        }\n        rec(0, k);\n        System.out.println(max);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\t(new Thread(new Solution())).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new B().inp();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        new B().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "np"}
{"code": "\t\tpublic static void main(String[] args) {\n\t\t\tLocale.setDefault(Locale.US);\n\t\t\tInputStream inputstream = System.in;\n\t\t\tOutputStream outputstream = System.out;\n\t\t\tFastReader in = new FastReader(inputstream);\n\t\t\tPrintWriter out = new PrintWriter(outputstream);\n\t\t\tTaskA solver = new TaskA();\n\t\t\t// int testcase = in.ni();\n\t\t\tfor (int i = 0; i < 1; i++)\n\t\t\t\tsolver.solve(i, in, out);\n\t\t\tout.close();\n\t\n\t\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[]args)throws IOException{\n        BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder stringBuilder=new StringBuilder();\n\n        String temp[]=bufferedReader.readLine().split(\" \");\n        int V=Integer.parseInt(temp[0]);\n        int E=Integer.parseInt(temp[1]);\n        adjList=new HashSet[V];\n        for(int i=0;i<V;i++)\n            adjList[i]=new HashSet<>();\n        for(int i=0;i<E;i++){\n            temp=bufferedReader.readLine().split(\" \");\n            int x=Integer.parseInt(temp[0])-1;\n            int y=Integer.parseInt(temp[1])-1;\n            adjList[y].add(x);\n            adjList[x].add(y);\n        }\n        stringBuilder.append(solve(V)+\"\\n\");\n        System.out.println(stringBuilder);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {        \n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        \n        boolean[][] graph = new boolean[n][n];\n        \n        for(int i = 0; i < m; i++) {\n            int from = in.nextInt() - 1;\n            int to = in.nextInt() - 1;\n            graph[from][to] = true;\n            graph[to][from] = true;\n        }\n\n        int max = 1 << n;\n        long[][] dp = new long[max][n];\n        for(int mask = 1; mask < max; mask++) {\n            for(int i = 0; i < n; i++) {\n                int countMask = Integer.bitCount(mask); \n                boolean existSubSeti = (mask & (1 << i)) > 0;\n                if(countMask == 1 && existSubSeti) {\n                    dp[mask][i] = 1; \n                }\n                else if(countMask > 1 && existSubSeti) {\n                    int mask1 = mask ^ (1 << i);\n                    for(int j = 0; j < n; j++) {\n                        if(((mask1 & (1 << j)) > 0) && graph[j][i] && i != firstMask(mask, n)) {\n                            dp[mask][i] += dp[mask1][j]; \n                        }\n                    }\n                }\n            }\n        }\n        \n        long counter = 0; \n        for(int mask = 1; mask < max; mask++) {\n            for(int i = 0; i < n; i++) {\n                if(Integer.bitCount(mask) >= 3 && graph[firstMask(mask, n)][i]) {\n                    counter += dp[mask][i];\n                }\n            }\n            \n        }\n        System.out.println(counter / 2);\n        in.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        (new Solution()).doMain();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {        \n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        \n        boolean[][] graph = new boolean[n][n];\n        \n        for(int i = 0; i < m; i++) {\n            int from = in.nextInt() - 1;\n            int to = in.nextInt() - 1;\n            graph[from][to] = true;\n            graph[to][from] = true;\n        }\n\n        int max = 1 << n;\n        long[][] dp = new long[max][n];\n        for(int mask = 1; mask < max; mask++) {\n            for(int i = 0; i < n; i++) {\n                int countMask = Integer.bitCount(mask); \n                boolean existSubSeti = (mask & (1 << i)) > 0;\n                if(countMask == 1 && existSubSeti) {\n                    dp[mask][i] = 1; \n                }\n                else if(countMask > 1 && existSubSeti) {\n                    int mask1 = mask ^ (1 << i);\n                    for(int j = 0; j < n; j++) {\n                        if(graph[j][i] && i != firstMask(mask, n)) {\n                            dp[mask][i] += dp[mask1][j]; \n                        }\n                    }\n                }\n            }\n        }\n        \n        long counter = 0; \n        for(int mask = 1; mask < max; mask++) {\n            for(int i = 0; i < n; i++) {\n                if(Integer.bitCount(mask) >= 3 && graph[firstMask(mask, n)][i]) {\n                    counter += dp[mask][i];\n                }\n            }\n            \n        }\n        System.out.println(counter / 2);\n        in.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n        new SimpleCycle().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader s = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tString[] data = s.readLine().split(\" \");\n\t\tint n = Integer.valueOf(data[0]);\n\t\tN = n;\n\t\tint m = Integer.valueOf(data[1]);\n\t\tgraph = new boolean[n][n];\n\t\tfor (int i = 0 ; i < m ; i++) {\n\t\t\tString[] line = s.readLine().split(\" \");\n\t\t\tint a = Integer.valueOf(line[0])-1;\n\t\t\tint b = Integer.valueOf(line[1])-1;\n\t\t\tgraph[a][b] = true;\n\t\t\tgraph[b][a] = true;\n\t\t}\n\t\t\n\t\tlong ans = 0;\n\t\tfor (int i = 0 ; i < n ; i++) {\n\t\t\tans += doit(i);\n\t\t}\n\t\tans /= 2;\n\t\t\n\t\tout.println(ans);\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new s11_d().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint m = scan.nextInt();\n\n\t\tboolean[][] graph = new boolean[n][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint u = scan.nextInt() - 1;\n\t\t\tint v = scan.nextInt() - 1;\n\t\t\tgraph[u][v] = true;\n\t\t\tgraph[v][u] = true;\n\t\t}\n\n\t\tlong[][] dp = new long[1 << n][n];\n\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tdp[1 << i][i] = 1;\n\n\t\tfor (int mask = 1; mask < (1 << n); mask++) {\n\n\t\t\tint first = Integer.numberOfTrailingZeros(mask);\n\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif ((mask & (1 << i)) == 0 || first == i)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif (graph[i][j])\n\t\t\t\t\t\tdp[mask][i] += dp[mask ^ 1 << i][j];\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\tlong answer = 0;\n\t\tfor (int mask = 1; mask < (1 << n); mask++) {\n\t\t\tif (Integer.bitCount(mask) < 3)\n\t\t\t\tcontinue;\n\n\t\t\tint first = Integer.numberOfTrailingZeros(mask);\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (graph[first][i])\n\t\t\t\t\tanswer += dp[mask][i];\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(answer / 2);\n\t\tscan.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew CF().solveIO();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint m = scan.nextInt();\n\n\t\tboolean[][] graph = new boolean[n][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint u = scan.nextInt() - 1;\n\t\t\tint v = scan.nextInt() - 1;\n\t\t\tgraph[u][v] = true;\n\t\t\tgraph[v][u] = true;\n\t\t}\n\n\t\tlong[][] dp = new long[1 << n][n];\n\t\tlong sum = 0;\n\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tdp[1 << i][i] = 1;\n\n\t\tfor (int mask = 1; mask < (1 << n); mask++) {\n\n\t\t\tint first = Integer.numberOfTrailingZeros(mask);\n\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif ((mask & (1 << i)) == 0 || first == i)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif (graph[i][j] && (mask & (1 << j)) != 0)\n\t\t\t\t\t\tdp[mask][i] += dp[mask ^ 1 << i][j];\n\t\t\t\t}\n\n\t\t\t\tif (Integer.bitCount(mask) >= 3 && graph[i][first])\n\t\t\t\t\tsum += dp[mask][i];\n\t\t\t}\n\n\t\t}\n\n\t\tSystem.out.println(sum / 2);\n\t\tscan.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String args[]){\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        int m=sc.nextInt();\n        int x,y;\n        boolean graph[][]=new boolean[n][n];\n        for(int i=0;i<m;i++){\n            x=sc.nextInt()-1;\n            y=sc.nextInt()-1;\n            graph[x][y]=graph[y][x]=true;\n        }\n        long dp[][]=new long[1<<n][n];\n        long res=0;\n        for(int i=0;i<n;i++){\n            dp[1<<i][i]=1;\n        }\n        for(int mask=1;mask<(1<<n);mask++){\n            int first=-1;\n            for(int f=0;f<n;f++){\n                if((mask&(1<<f))!=0){\n                    first=f;\n                    break;\n                }\n            }\n            for(int i=0;i<n;i++){\n                if((mask&(1<<i))!=0&&i!=first){\n                    for(int j=0;j<n;j++){\n                        if(graph[j][i]&&((mask&1<<j)!=0)){\n                            dp[mask][i]+=dp[mask^1<<i][j];\n                        }\n                    }\n                }\n                if(Integer.bitCount(mask)>2&&graph[first][i]){\n                    res+=dp[mask][i];\n                }\n            }\n        }\n        \n        System.out.println(res/2);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{           \t\n    \tInputReader in = new InputReader(System.in);       \n    \tPrintWriter pw=new PrintWriter(System.out);   \n    \t\n    \t\n    \t//int t=in.readInt();\n        //while(t-->0)\n        //{\n    \t\n        int n=in.readInt();\n        int m=in.readInt();\n        boolean v[][]=new boolean[n][n];\n        for(int i=0;i<m;i++)\n        {\n        \tint x=in.readInt()-1;\n        \tint y=in.readInt()-1;\n        \tv[x][y]=true;\n        \tv[y][x]=true;\n        }\n    \t\n       long dp[][]=new long[1<<n][n];\n       for(int i=0;i<n;i++)\n       {\n    \t   dp[1<<i][i]=1;\n       }\n       long ans=0;\n    \tfor(int mask=1;mask<(1<<n);mask++)\n    \t{\n    \t\tint s=-1;\n    \t\tfor(int i=0;i<n;i++)\n    \t\t{\n    \t\t\tif((mask&(1<<i))!=0)\n    \t\t\t{\n    \t\t\t\ts=i;\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t}\n    \t\tfor(int i=0;i<n;i++)\n    \t\t{\n    \t\t\tif(i!=s&&((1<<i)&mask)!=0)\n    \t\t\t{\n    \t\t\t\tfor(int j=0;j<n;j++)\n    \t\t\t\t{\n    \t\t\t\t\tif((1<<j)!=0&&i!=j&&v[i][j])\n    \t\t\t\t\t{\n    \t\t\t\t\t\tint rem=(1<<i)^mask;\n    \t\t\t\t\t\tdp[mask][i]+=dp[rem][j];\n    \t\t\t\t\t}\n    \t\t\t\t}    \t\t\t\n    \t\t\n    \t\t\t\tint c=Integer.bitCount(mask);\n    \t\t\t\tif(c>=3&&v[i][s])\n    \t\t\t\t{\n    \t\t\t\t\tans+=dp[mask][i];\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    \tans/=2;\n\t\tpw.println(ans);\t     \t\n    \t\n    \t//}\n    \t\n    \tpw.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint m = scan.nextInt();\n\n\t\tboolean[][] graph = new boolean[n][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint u = scan.nextInt() - 1;\n\t\t\tint v = scan.nextInt() - 1;\n\t\t\tgraph[u][v] = true;\n\t\t\tgraph[v][u] = true;\n\t\t}\n\n\t\tlong[][] dp = new long[1 << n][n];\n\t\tlong sum = 0;\n\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tdp[1 << i][i] = 1;\n\n\t\tfor (int mask = 1; mask < (1 << n); mask++) {\n\n\t\t\tint first = Integer.numberOfTrailingZeros(mask);\n\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif ((mask & (1 << i)) == 0 || first == i)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif (graph[i][j] && (mask & (1 << j)) != 0)\n\t\t\t\t\t\tdp[mask][i] += dp[mask ^ 1 << i][j];\n\t\t\t\t}\n\n\t\t\t\tif (Integer.bitCount(mask) >= 3 && graph[i][first])\n\t\t\t\t\tsum += dp[mask][i];\n\t\t\t}\n\n\t\t}\n\n\t\tSystem.out.println(sum / 2);\n\t\tscan.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n//\t\tnew Thread(new Template()).start();\n\t\tnew TaskD().run();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\n\t\tboolean showLineError = true;\n\t\tif (showLineError) {\n\t\t\tsolve();\n\t\t\tout.close();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tsolve();\n\t\t\t} catch (Exception e) {\n\t\t\t} finally {\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\tboolean[][] ee = new boolean[n][n];\n\t\twhile (m-- > 0) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint i = Integer.parseInt(st.nextToken()) - 1;\n\t\t\tint j = Integer.parseInt(st.nextToken()) - 1;\n\t\t\tee[i][j] = ee[j][i] = true;\n\t\t}\n\t\tlong cnt = 0;\n\t\t// how many cycles through i with intermediate vertices before i\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tlong[][] dp = new long[1 << i][i];\n\t\t\tfor (int j = 0; j < i; j++)\n\t\t\t\tdp[0][j] = ee[i][j] ? 1 : 0;\n\t\t\t// dp[b][j]: how many paths from i to j with intermediate vertices in b\n\t\t\tfor (int b = 1; b < 1 << i; b++)\n\t\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\t\tif ((b & 1 << j) > 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor (int k = 0; k < i; k++) {\n\t\t\t\t\t\tif ((b & 1 << k) == 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif (ee[k][j])\n\t\t\t\t\t\t\tdp[b][j] += dp[b ^ 1 << k][k];\n\t\t\t\t\t}\n\t\t\t\t\tif (dp[b][j] > 0 && ee[j][i])\n\t\t\t\t\t\tcnt += dp[b][j];\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(cnt / 2);\n\t}\n", "complexity": "np"}
{"code": "", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[][]a = new int[n][n];\n        for (int i = 1; i <= m; i++) {\n            int v1 = sc.nextInt();\n            int v2 = sc.nextInt();\n            v1--;\n            v2--;\n            a[v1][v2] = a[v2][v1] = 1;\n        }\n        long[][]dp = new long[1 << n][n];\n        for (int i = 0; i < n; i++) {\n            dp[1 << i][i] = 1;\n        }\n        for (int mask = 0; mask < (1 << n); mask++) {\n            if (Integer.bitCount(mask) > 1) {\n                for (int i = 0; i < n; i++) {\n                    if (i==Integer.numberOfTrailingZeros(mask))\n                        continue;\n                    if ((mask & (1 << i)) != 0) {\n                        for (int j = 0; j < n; j++) {\n                            if ((mask & (1 << j)) != 0 && a[j][i]==1) {\n                                dp[mask][i] += dp[(mask ^ (1 << i))][j];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        long ans = 0;\n        for (int mask = 0; mask < (1 << n); mask++) {\n            if (Integer.bitCount(mask) >= 3) {\n                int t = Integer.numberOfTrailingZeros(mask);\n                for (int i = 0; i < n; i++) {\n                    if (a[t][i]==1)\n                        ans += dp[mask][i];\n                }\n            }\n        }\n        ans /= 2;\n        System.out.println(ans);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\n\t\tn = nextInt();\n\t\tm = nextInt();\n\t\t\n\t\tg = new boolean[n][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint a = nextInt()-1, b = nextInt()-1;\n\t\t\tg[a][b] = g[b][a] = true;\n\t\t}\n\t\t\n\t\tlong ans = 0;\n\t\tfor (int i = n; i > 0; i--) {\n\t\t\t//long cur = solve(i);\n\t\t\tlong cur = calc(g, i-1);\n\t\t\tans += cur;\n\t\t}\n\t\t\n\t\tout.println(ans/2);\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new D().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputReader r = new InputReader(System.in);\n\t\t\n\t\tN = r.nextInt();\n\t\tM = r.nextInt();\n\t\t\n\t\tg = new int[N][N];\n\t\t\n\t\tC = new long[N + 1];\n\t\t\n\t\tDP = new long[1 << N][N];\n\t\t\n\t\tfor(int k = 0; k < M; k++){\n\t\t\tint i = r.nextInt() - 1;\n\t\t\tint j = r.nextInt() - 1;\n\t\t\t\n\t\t\tg[i][j] = g[j][i] = 1;\n\t\t}\n\t\t\n\t\tfor(long[] i : DP)\n\t\t\tArrays.fill(i, -1);\n\t\t\n\t\tlong ret = 0;\n\t\tfor(int s = 0; s < N; s++){\n\t\t\tret += go(s, 1 << s, s);\n\t\t}\n\t\t\n\t\tSystem.out.println(ret / 2);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew D().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        FastScanner scanner = new FastScanner();\n\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n\n        boolean graph[][] = new boolean[n][n];\n        for (int i = 0; i < m; i++) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n            graph[a-1][b-1] = true;\n            graph[b-1][a-1] = true;\n        }\n\n        if(n <= 2) {\n            System.out.println(0);\n            return;\n        }\n\n        long dp[][] = new long[1<<n][n];\n\n        for (int i = 0; i < (1<<n); i++) {\n            Arrays.fill(dp[i], -1);\n        }\n\n        for (int i = 1; i < (1<<n); i++) {\n            for (int j = 0; j < n; j++) {\n                f(i, j, dp, graph, n);\n            }\n        }\n\n        long sum = 0;\n\n//        for (int i = 7; i < (1 << n); i++) {\n//            if(Integer.bitCount(i) < 3) continue;\n//            for (int j = 0; j < n; j++) {\n//                int startNode = Integer.numberOfTrailingZeros(Integer.highestOneBit(i));\n//                int endNode = j;\n//\n//                if(graph[startNode][endNode] && dp[i][j] != -1) {\n////                    System.out.println(i + \" \" + startNode + \" \" + endNode + \" \" + dp[i][j]);\n//                    sum += dp[i][j];\n//                }\n//            }\n//        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < (1 << n); j++) {\n                if(Integer.bitCount(j) >= 3 && graph[Integer.numberOfTrailingZeros(j)][i]) {\n                    sum += dp[j][i];\n                }\n            }\n        }\n\n        System.out.println(sum/2);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n\tInputStream fin = System.in;\n\t//fin = new FileInputStream(\"in.txt\");\n\tScanner cin = new Scanner(fin);\n\n\tint n = cin.nextInt();\n\tint m = cin.nextInt();\n\tint bound = 1 << n;\n\tboolean[][] mp = new boolean[n][n];\n\tlong[][] dp = new long[bound][n];\n\tint used = 0;\n\tlong ret = 0;\n\tfor (int i = 0; i < n; i++) {\n\t    Arrays.fill(mp[i], false);\n\t}\n\n\tfor (int i = 0; i < m; i++) {\n\t    int u = cin.nextInt() - 1;\n\t    int v = cin.nextInt() - 1;\n\t    mp[u][v] = mp[v][u] = true;\n\t}\n\n\tfor (int k = 0; k < n; k++) {\n\t    for (int i = k; i < bound; i++) {\n\t\tArrays.fill(dp[i], 0);\n\t    }\n\t    dp[1 << k][k] = 1;\n\t    for (int mask = 1 << k; mask < bound; mask++) {\n\t\tif ((mask & used) != 0)\n\t\t    continue;\n\t\tfor (int i = k; i < n; i++) {\n\t\t    if (dp[mask][i] != 0) {\n\t\t\tif (mp[k][i] && bitcount(mask) > 2)\n\t\t\t    ret += dp[mask][i];\n\t\t\tfor (int j = k; j < n; j++) {\n\t\t\t    if ((mask & (1 << j)) == 0 && mp[i][j]) {\n\t\t\t\tdp[mask ^ (1 << j)][j] += dp[mask][i];\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t    used |= 1 << k;\n\t}\n\n\tSystem.out.println(ret / 2);\n\n\tfin.close();\n\tcin.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Template().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String []args) throws IOException {\n\t\tFastScanner in  = new FastScanner(System.in);\n\t\tPrintWriter out = \n\t\t\t\tnew PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false); \n\t\tsolve(in, out);\n\t\tin.close();\n\t\tout.close();\n\t}    \n", "complexity": "np"}
{"code": "\tpublic static void main(String []args) throws IOException {\n\t\tFastScanner in  = new FastScanner(System.in);\n\t\tPrintWriter out = \n\t\t\t\tnew PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false); \n\t\tsolveTopDown(in, out);\n\t\tin.close();\n\t\tout.close();\n\t}    \n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        try (Scanner in = new Scanner(System.in);\n             PrintWriter out = new PrintWriter(System.out)\n        ) {\n            new D().run(in, out);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new D().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "public static void main(String[] args) throws IOException {\n\tinput.init(System.in);\n\tPrintWriter out = new PrintWriter(System.out);\n\tn = input.nextInt();\n\tm = input.nextInt();\n\tg = new boolean[n][n];\n\tfor(int i = 0; i<m; i++)\n\t{\n\t\tint a = input.nextInt()-1, b = input.nextInt()-1;\n\t\tg[a][b] = g[b][a] = true;\n\t}\n\tlong res = 0;\n\tmap = new HashMap<Integer, Long>();\n\tfor(int i = n-1; i>=0; i--)\n\t{\n\t\tmemo = new long[i+1][1<<(i+1)];\n\t\tfor(long[] A : memo) Arrays.fill(A, -1);\n\t\tres += count(i, i, 1<<i)/2;\n\t}\n\tout.println(res);\n\tout.close();\n}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile ( sc.hasNextInt() ) {\n\t\t\tint n = sc.nextInt();\n\t\t\tlong m = sc.nextInt();\n\t\t\tboolean edge[][] = new boolean[n][n];\n\t\t\tlong dp[][] = new long[1<<n][n];\n\t\t\tfor ( long i = 1 ; i<=m ; ++i ) {\n\t \t\t\tint u = sc.nextInt();   \n\t\t\t\tint v = sc.nextInt();\n\t\t\t\t-- u;\n\t\t\t\t-- v;\n\t\t\t\tedge[u][v] = edge[v][u] = true;\n\t\t\t}\n\t\t\tfor ( int i = 0 ; i<n ; ++i ) {\n\t\t\t\tdp[1<<i][i] = 1;\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tfor ( int i = 1 ; i<(1<<n) ; ++i ) {\n\t\t\t\tint first = cal(i);\n\t\t\t\tfor ( int j = first ; j<n ; ++j ) {\n\t\t\t\t\tif ( dp[i][j]==0 ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( int k = first ; k<n ; ++k ) {\n \t\t\t\t\t\tif ( j==k || !edge[j][k] ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( k==first && judge(i) ) {\n\t\t\t\t\t\t\tres += dp[i][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( (i&(1<<k))==0 ) {\n\t\t\t\t\t\t\tdp[i|(1<<k)][k] += dp[i][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(res/2);\t\t\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "\t\tpublic static void main(String[] args){\t\t\t\n\t\t\tScanner scan = new Scanner(System.in);\n\t\t\tint n = scan.nextInt();\n\t\t\tint m = scan.nextInt();\n\t\t\tboolean[][] graph = new boolean[n][n];\n\t\t\t\n\t\t\tfor(int i = 0; i < m; i++) {\n\t\t\t\tint from = scan.nextInt() - 1;\n\t\t\t\tint to = scan.nextInt() - 1;\n\t\t\t\tgraph[from][to] = graph[to][from] = true;\n\t\t\t}\n\t\t\t\n\t\t\tint max = 1 << n;\n\t\t\tlong[][] dp = new long[max][n];\n\t\t\t\n\t\t\tfor(int mask = 1; mask < max; mask++) {\n\t\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\t\tboolean existI = (mask & (1 << i)) > 0;\n\t\t\t\t\tif(Integer.bitCount(mask) == 1 && existI) {\n\t\t\t\t\t\tdp[mask][i] = 1;\n\t\t\t\t\t} else if(Integer.bitCount(mask) > 1 && existI && first(mask) != i) {\n\t\t\t\t\t\tlong sum = 0; \n\t\t\t\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\t\t\t\tif(graph[i][j]) sum += dp[mask ^ (1 << i)][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdp[mask][i] = sum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong countCycles = 0;\n\t\t\tfor(int mask = 7; mask < max; mask++) {\n\t\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\t\tif(Integer.bitCount(mask) >= 3 && graph[first(mask)][i]) {\n\t\t\t\t\t\tcountCycles += dp[mask][i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(countCycles / 2);\n\t\t}\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int m = sc.nextInt();\n    boolean[][] map = new boolean[n][n];\n    long[][] dp = new long[1 << n][n];\n    for (int i = 0; i < m; i++) {\n      int a = sc.nextInt() - 1;\n      int b = sc.nextInt() - 1;\n      map[a][b] = map[b][a] = true;\n      dp[(1 << a) + (1 << b)][Math.max(a, b)] = 1;\n    }\n    long ans = 0;\n    for (int mask = 1; mask < (1 << n); mask++) {\n      int lowbit = 0;\n      for (; (mask & (1 << lowbit)) == 0; lowbit++);\n      for (int i = lowbit + 1; i < n; i++) {\n        if ((mask & (1 << i)) == 0) {\n          continue;\n        }\n        for (int j = lowbit + 1; j < n; j++) {\n          if ((mask & (1 << j)) == 0 || j == i) {\n            continue;\n          }\n          if (map[i][j]) {\n            dp[mask][i] += dp[mask ^ (1 << i)][j];\n          }\n        }\n        if (map[lowbit][i]) {\n          ans += dp[mask][i];\n        }\n      }\n    }\n    System.out.println((ans - m) / 2);\n    sc.close();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tin = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tout = new PrintWriter(System.out);\n\n\t\tn = nextInt();\n\t\tm = nextInt();\n\t\t\n\t\tg = new boolean[n][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint a = nextInt()-1, b = nextInt()-1;\n\t\t\tg[a][b] = g[b][a] = true;\n\t\t}\n\t\t\n\t\tlong ans = 0;\n\t\tfor (int i = n-1; i >= 0; i--) {\n\t\t\tlong cur = solve(i);\n\t\t\tans += cur;\n\t\t}\n\t\t\n\t\tout.println(ans/2);\n\t\t\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Template().run();\n        // new Thread(null, new Template(), \"\", 1l * 200 * 1024 * 1024).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] arg) {\n\t\tnew Main().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Template().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner();\n        PrintWriter out = new PrintWriter(System.out);\n//        int N = 19;\n//        System.out.println(N + \" \" + ((N - 1) * N / 2));\n//        for (int i = 1; i\n//                <= N; i++) {\n//            for (int j = i + 1; j <= N; j++) {\n//                System.out.println(i + \" \" + j);\n//            }\n//        }\n        int n = in.nextInt();\n        int m = in.nextInt();\n        dp = new long[n][1 << n + 1] ;\n\n        map = new boolean[n][n];\n        for (int i = 0; i < m; i++) {\n            int a = in.nextInt() - 1;\n            int b = in.nextInt() - 1;\n            map[a][b] = true;\n            map[b][a] = true;\n          \n        }\n        for(long []temp : dp){\n            Arrays.fill(temp, -1);\n        }\n        long result = 0;\n        for(int i = 0; i < n; i++){\n            result += cal((1<<i),i,i,1);\n        }\n        out.println((result/2));\n\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Throwable {\n        Thread t = new Thread(new Main());\n        t.start();\n        t.join();\n        if (sError != null) {\n            throw sError;\n        }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int V = in.nextInt();\n        int E = in.nextInt();\n        boolean [][] G = new boolean [V][V];\n        for (int i = 0; i < E; i++) {\n            int u = in.nextInt()-1;\n            int v = in.nextInt()-1;\n            G[u][v] = true;\n            G[v][u] = true;\n        }\n        \n        int pset = 1 << V;\n        \n        long [][] dp = new long [pset][V];\n        long cycles = 0;\n        \n        for (int set = 1; set < pset; set++) {\n            int bit = Integer.bitCount(set);\n            int src = first(set);\n            \n            if (bit == 1) {\n                dp[set][src] = 1;\n            }\n            else if(bit > 1) {\n                for (int i = 0; i < V; i++) {\n                    if(i == src) continue;\n                    // Check if i is in set\n                    if ((set & (1 << i)) != 0) {\n                        int S_1 = set ^ (1 << i);\n                        for (int v = 0; v < V; v++) {\n                            if (G[v][i] == true) {\n                                dp[set][i] += dp[S_1][v];\n                            }\n                        }\n                    }\n                    //Count Cycles:\n                    if (bit >= 3 && G[src][i]) {\n                        cycles += dp[set][i];\n                    }   \n                }\n                \n            }\n                    \n                    \n        }\n        System.out.println(cycles/2);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n//\t\ttry {\n//\t\t\tif (new File(\"input.txt\").exists())\n//\t\t\t\tSystem.setIn(new FileInputStream(\"input.txt\"));\n//\t\t} catch (SecurityException e) {}\n\t\t\n//\t\tlong time1 = System.currentTimeMillis();\n\t\tnew Main().run();\n//\t\tcheckMemory();\n//\t\tlong time2 = System.currentTimeMillis();\n//\t\tSystem.err.println((time2 - time1) + \" ms\");\n\t}\n\n\tBufferedReader in;\n\tPrintWriter out;\n\tStringTokenizer st = new StringTokenizer(\"\");\n\t\n\tint vNum;\n\tint eNum;\n\tboolean[][] g;\n\t\n\tvoid run() throws IOException {\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\tout = new PrintWriter(System.out);\n\n\t\tvNum = nextInt();\n\t\teNum = nextInt();\n\t\tg = new boolean [vNum][vNum];\n\t\tfor (int e = 0; e < eNum; e++) {\n\t\t\tint u = nextInt() - 1;\n\t\t\tint v = nextInt() - 1;\n\t\t\tg[u][v] = g[v][u] = true;\n\t\t}\n\t\t\n//\t\tfor (int v = 7; v <= 11; v++) {\n//\t\t\tgenFullGraph(v);\n//\t\t\tif (naiveDP() != optimizedDP())\n//\t\t\t\tSystem.err.println(\"Error on \" + v);\n//\t\t}\n\t\t\n\t\tout.println(optimizedDP());\n\t\t\n\t\tout.close();\n\t}\n\t\n\t/*************************************************************** \n\t * Test\n\t **************************************************************/\n\tlong naiveDP() {\n\t\tlong[] count = new long [vNum + 1];\n\t\tint size = 1 << vNum;\n\t\tlong[][] dp = new long [size][vNum];\n\t\tfor (int begin = 0; begin < vNum; begin++) {\n\t\t\tfor (long[] row : dp) fill(row, 0L);\n\t\t\tdp[1 << begin][begin] = 1L;\n\t\t\tfor (int mask = 0; mask < size; mask++) {\n\t\t\t\tint len = Integer.bitCount(mask);\n\t\t\t\tfor (int v = 0; v < vNum; v++) {\n\t\t\t\t\tlong cval = dp[mask][v];\n\t\t\t\t\tif (cval == 0L) continue;\n\t\t\t\t\tif (g[v][begin]) count[len] += cval;\n\t\t\t\t\tfor (int nv = 0; nv < vNum; nv++) {\n\t\t\t\t\t\tif (g[v][nv]) {\n\t\t\t\t\t\t\tint nmask = mask | (1 << nv);\n\t\t\t\t\t\t\tif (nmask != mask)\n\t\t\t\t\t\t\t\tdp[nmask][nv] += cval;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlong ret = 0L;\n\t\tfor (int len = 3; len <= vNum; len++) {\n\t\t\tif (count[len] % (len * 2) != 0) System.err.println(\"ERROR!\");\n\t\t\tret += count[len] / len / 2;\n\t\t}\n\t\treturn ret;\n\t}\n\t\n\tlong optimizedDP() {\n\t\tlong[] count = new long [vNum + 1];\n\t\tlong[][] dp = new long [1 << vNum][vNum];\n\t\tfor (int last = vNum - 1; last >= 0; last--) {\n\t\t\tint size = 1 << last;\n\t\t\tfor (int mask = 0; mask < size; mask++)\n\t\t\t\tfill(dp[mask], 0, last, 0L);\n\t\t\tfor (int nv = 0; nv < last; nv++)\n\t\t\t\tif (g[last][nv]) dp[1 << nv][nv] = 1L;\n\t\t\tfor (int mask = 0; mask < size; mask++) {\n\t\t\t\tint len = Integer.bitCount(mask) + 1;\n\t\t\t\tfor (int v = 0; v < last; v++) {\n\t\t\t\t\tlong cval = dp[mask][v];\n\t\t\t\t\tif (cval == 0L) continue;\n\t\t\t\t\tif (g[v][last]) count[len] += cval;\n\t\t\t\t\tfor (int nv = 0; nv < last; nv++) {\n\t\t\t\t\t\tif (g[v][nv]) {\n\t\t\t\t\t\t\tint nmask = mask | (1 << nv);\n\t\t\t\t\t\t\tif (nmask != mask)\n\t\t\t\t\t\t\t\tdp[nmask][nv] += cval;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlong ret = 0L;\n\t\tfor (int len = 3; len <= vNum; len++) {\n\t\t\tif (count[len] % 2 != 0) System.err.println(\"ERROR!\");\n\t\t\tret += count[len] >> 1;\n\t\t}\n\t\treturn ret;\n\t}\n\t\n\tvoid genFullGraph(int vNum) {\n\t\tthis.vNum = vNum;\n\t\tthis.eNum = vNum * (vNum - 1) / 2;\n\t\tg = new boolean [vNum][vNum];\n\t\tfor (int i = 0; i < vNum; i++)\n\t\t\tfor (int j = i + 1; j < vNum; j++)\n\t\t\t\tg[i][j] = g[j][i] = true;\n\t\t\t\t\n\t}\n\t\n\t/*************************************************************** \n\t * Utility\n\t **************************************************************/\n\tstatic long b2mb(long b) {\n\t\treturn b >> 20;\n\t}\n\t\n\tstatic void checkMemory() {\n\t\tSystem.err.println(b2mb(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + \"/\" + b2mb(Runtime.getRuntime().totalMemory()) + \" MB\");\n\t}\n\t\n\t/*************************************************************** \n\t * Input \n\t **************************************************************/\n\tString nextToken() throws IOException {\n\t\twhile (!st.hasMoreTokens())\n\t\t\tst = new StringTokenizer(in.readLine());\n\t\treturn st.nextToken();\n\t}\n\t\n\tint nextInt() throws IOException {\n\t\treturn Integer.parseInt(nextToken());\n\t}\n\t\n\tlong nextLong() throws IOException {\n\t\treturn Long.parseLong(nextToken());\n\t}\n\t\n\tdouble nextDouble() throws IOException {\n\t\treturn Double.parseDouble(nextToken());\n\t}\n\t\n\tString nextLine() throws IOException {\n\t\tst = new StringTokenizer(\"\");\n\t\treturn in.readLine();\n\t}\n\t\n\tboolean EOF() throws IOException {\n\t\twhile (!st.hasMoreTokens()) {\n\t\t\tString s = in.readLine();\n\t\t\tif (s == null)\n\t\t\t\treturn true;\n\t\t\tst = new StringTokenizer(s);\n\t\t}\n\t\treturn false;\n\t}\n}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException\n\t\tfis = new FastInputStream(System.in);\n\t\t\n\t\tSystem.out.println(solve(fis.nextInt(), fis.nextInt()));\n\t\t\n\t\tfis.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\tint m;\n\t\tn = NextInt();\n\t\tm = NextInt();\n\t\tam = new boolean[n][n];\n\t\tdp = new long[n][1 << n];\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tArrays.fill(dp[i], -1);\n\t\tfor (int i = 0; i < m; ++i) {\n\t\t\tint a = NextInt() - 1;\n\t\t\tint b = NextInt() - 1;\n\t\t\tam[a][b] = am[b][a] = true;\n\t\t};\n\t\tlong res = 0;\n\t\tfor (int a = 0; a < n; ++a)\n\t\t\tres += solve(a, (1 << a));\n\t\tSystem.out.println(res / 2);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws java.lang.Exception {\n\t\tBufferedReader kek = new BufferedReader(new InputStreamReader(System.in));\n\t\t//Scanner skek = new Scanner(System.in);\n\t\tPrintWriter outkek = new PrintWriter(System.out);\n\t\t\n\t\tString[] input = kek.readLine().split(\" \");\n\t\tint N = Integer.parseInt(input[0]), M = Integer.parseInt(input[1]);\n\t\tboolean[][] connected = new boolean[N + 1][N];\n\t\tlong[][] walks = new long[1 << N][N];\n\t\tlong res = 0;\n\t\t\n\t\tfor(int i = 0; i < M; i++){\n\t\t\tinput = kek.readLine().split(\" \");\n\t\t\tint A = Integer.parseInt(input[0]) - 1, B = Integer.parseInt(input[1]) - 1;\n\t\t\tconnected[A][B] = connected[B][A] = true;\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < N; i++){\n\t\t\twalks[1 << i][i] = 1;\n\t\t}\n\t\t\n\t\tfor(int i = 1; i < 1 << N; i++){\n\t\t\tint temp = (int) (Math.log(i & -(i)) / 0.6931471805599453);\n\t\t\tfor(int j = 0; j < N; j++){\n\t\t\t\tif(((1 << j) & i) > 0 && j != temp){\n\t\t\t\t\tfor(int k = 0; k < N; k++){\n\t\t\t\t\t\tif(connected[k][j]){\n\t\t\t\t\t\t\twalks[i][j] += walks[i ^ (1 << j)][k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint count = 0, track = i;\n\t\t\t\t\twhile(track > 0){\n\t\t\t\t\t\tif(track % 2 == 1){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttrack /= 2;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(count >= 3 && connected[temp][j]){\n\t\t\t\t\t\tres += walks[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\toutkek.println(res / 2);\n\t\tkek.close();\n\t\toutkek.close();\n\t}\t\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tst = new StreamTokenizer(new BufferedReader(new InputStreamReader(\n\t\t\t\tSystem.in)));\n\n\t\tint n = nextInt();\n\t\tint m = nextInt();\n\n\t\tedges = new int[n][n];\n\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint from = nextInt() - 1;\n\t\t\tint to = nextInt() - 1;\n\t\t\tedges[from][to] = edges[to][from] = 1;\n\t\t}\n\n\t\tdp = new long[(1 << n) + 1][n + 1];\n\n\t\tfor (int mask = 1; mask < (1 << n); mask++) {\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (Integer.bitCount(mask) == 1 && (mask & (1 << i)) != 0) {\n\t\t\t\t\tdp[mask][i] = 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (Integer.bitCount(mask) > 1 && (mask & (1 << i)) != 0\n\t\t\t\t\t\t&& first(mask, n) != i) {\n\t\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\t\tif (edges[i][j] == 1) {\n\t\t\t\t\t\t\tdp[mask][i] += dp[mask ^ (1 << i)][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlong count = 0;\n\t\tfor (int mask = 1; mask < (1 << n); mask++) {\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (Integer.bitCount(mask) >= 3\n\t\t\t\t\t\t&& edges[i][first(mask, n)] != 0)\n\t\t\t\t\tcount += dp[mask][i];\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(count / 2);\n\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Throwable {\n        Thread t = new Thread(new Main());\n        t.start();\n        t.join();\n        if (sError != null) {\n            throw sError;\n        }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String []args) throws IOException {\n\t\tFastScanner in  = new FastScanner(System.in);\n\t\tPrintWriter out = \n\t\t\t\tnew PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false); \n\t\tsolveBottomUp(in, out);\n\t\tin.close();\n\t\tout.close();\n\t}    \n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tnew Thread(null, new Main(), \"\", 1 << 28).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new StreamInputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        run(in, out);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        InputReader in = new InputReader(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int[] g = new int[n];\n        long[][] dp = new long[1 << n][n];\n        for (int i = 0; i < m; i++) {\n            int a = in.nextInt() - 1, b = in.nextInt() - 1;\n            g[a] |= (1 << b);\n            g[b] |= (1 << a);\n        }\n        int all = (1 << n) - 1;\n        for (int i = 0; i < n; i++) {\n            int l = (1 << i);\n            int left = all ^ (l - 1) ^ l;\n            for (int j = left; j > 0; j = (j - 1) & left)\n                if ((j & (j - 1)) != 0) {\n                    dp[j | l][i] = 1;\n                }\n        }\n        for (int i = (1 << n) - 1; i > 0; i--) {\n            int last = i & -i;\n            for (int j = 0; j < n; j++) {\n                if (((1 << j) == last && (i & (i - 1)) != 0)\n                        || ((1 << j) & i) == 0)\n                    continue;\n                for (int k = 0; k < n; k++) {\n                    if ((1 << k) >= last && ((1 << k) & g[j]) != 0\n                            && ((1 << k) == last || ((1 << k) & i) == 0)) {\n                        dp[i][j] += dp[i | (1 << k)][k];\n                    }\n\n                }\n            }\n        }\n        long res = 0;\n        for (int i = 0; i < n; i++)\n            res += dp[(1 << i)][i];\n        System.out.println(res / 2);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args)throws Throwable {\n\t\tScanner sc=new Scanner(System.in);\n\t\tn=sc.nextInt();\n\t\tm=sc.nextInt();\n\t\tadj=new boolean [n][n];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tint u=sc.nextInt()-1;\n\t\t\tint v=sc.nextInt()-1;\n\t\t\tadj[u][v]=true;\n\t\t\tadj[v][u]=true;\n\t\t}\n\t\tmem=new long [n+1][(1<<n)];\n\t\tfor(int i=0;i<=n;i++)\n\t\t\tArrays.fill(mem[i], -1);\n\t\tlong ans=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tstart=i;\n\t\t\tans+=dp(i, (1<<i));\n\t\t}\n\t\tSystem.out.println(ans/2);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new CF_11D().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\n\t\tn = in.nextInt();\n\t\tm = in.nextInt();\n\t\tadj = new boolean[n][n];\n\t\tmemo = new long[n][1 << n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint u = in.nextInt() - 1;\n\t\t\tint v = in.nextInt() - 1;\n\t\t\tadj[u][v] = adj[v][u] = true;\n\t\t}\n\t\tfor (long arr[] : memo) {\n\t\t\tArrays.fill(arr, -1);\n\t\t}\n\t\tNum_Cycle = 0L;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfrom = i;\n\t\t\tNum_Cycle += dp(from, (1 << i));\n\t\t}\n\t\tout.println(Num_Cycle / 2);\n\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        n = s.nextInt();\n        m = s.nextInt();\n        matrix = new boolean[n][n];\n        for (int i=0; i<m; ++i) {\n            int v1 = s.nextInt()-1;\n            int v2 = s.nextInt()-1;\n            matrix[v1][v2] = true;\n            matrix[v2][v1] = true;\n        }\n        dp = new long[n][1<<n+1];\n        for (int i=0; i<n; ++i) Arrays.fill(dp[i], -1);\n        \n        long res = 0;\n        for (int i=0; i<n; ++i)\n            res += calc(i, i, (1<<i), 1);\n        \n        System.out.println(res/2);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        final Scanner in = new Scanner(System.in);\n        final PrintStream out = System.out;\n        int n = in.nextInt(), m = in.nextInt();\n        boolean[][] g = new boolean[n][n];\n        for (int i = 0; i < m; ++i) {\n            int a = in.nextInt(), b = in.nextInt();\n            --a; --b;\n            g[a][b] = g[b][a] = true;\n        }\n        final int mx = 1<<n;\n        long[][] dp = new long[mx][n];\n        long res = 0;\n        for (int mask = 0; mask < mx; ++mask)\n            for (int i = 0; i < n; ++i) {\n                if (mask == (1 << i)) {\n                    dp[mask][i] = 1;\n                } else if (((mask & (1 << i)) != 0) && ((mask & ((1 << i) - 1)) != 0)) {\n                    long r = 0;\n                    int next = mask ^ (1<<i);\n                    for (int j = 0; j < n; ++j) if (g[i][j]) {\n                        r += dp[next][j];\n                    }\n                    dp[mask][i] = r;\n                } else {\n                    dp[mask][i] = 0;\n                }\n\n                if ((mask & (mask-1)) != 0 && g[i][lowestBit(mask)]) {\n                    res += dp[mask][i];\n                }\n\n            }\n\n        System.out.println((res-m)/2);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] arg) {\n        new Main11D().run();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tV = sc.nextInt();\n\t\tadjList = new ArrayList[V];\n\t\tfor (int i = 0 ; i < V ; ++i) adjList[i] = new ArrayList<>();\n\t\tint E = sc.nextInt();\n\t\twhile (E -- > 0) {\n\t\t\tint v = sc.nextInt() - 1;\n\t\t\tint u = sc.nextInt() - 1;\n\t\t\tadjList[v].add(u);\n\t\t\tadjList[u].add(v);\n\t\t}\n\t\tout.print(Number_Of_Simple_Cycles());\n\t\tout.flush(); \n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tboolean[][] g = new boolean[n][n];\n\t\tboolean[] ok = new boolean[1<<n];\n\t\tint[] f = new int[1<<n];\n\t\tfor(int i=1; i<(1<<n); i++) {\n\t\t\tok[i] = Integer.bitCount(i)>=3;\n\t\t\tf[i] = first(i);\n\t\t}\n\t\tfor(int i=0; i<m; i++) {\n\t\t\tint a = in.nextInt()-1;\n\t\t\tint b = in.nextInt()-1;\n\t\t\tg[a][b] = g[b][a] = true;\n\t\t}\n\t\tlong[][] dp = new long[n][1<<n];\n\t\tfor(int i=0; i<n; i++)\n\t\t\tdp[i][1<<i] = 1;\n\t\tfor(int i=1; i<(1<<n); i++)\n\t\t\tfor(int j=0; j<n; j++)\n\t\t\t\tfor(int k=f[i]+1; k<n; k++)\n\t\t\t\t\tif((i&(1<<k)) == 0 && g[j][k])\n\t\t\t\t\t\tdp[k][i^(1<<k)] += dp[j][i];\n\t\tlong ret = 0;\n\t\tfor(int i=1; i<(1<<n); i++)\n\t\t\tfor(int j=0; j<n; j++)\n\t\t\t\tif(ok[i] && j != f[i])\n\t\t\t\t\tret += g[j][f[i]]?dp[j][i]:0;\n\t\tSystem.out.println(ret/2);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tnew D().run();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception\n\tScanner bf = new Scanner(System.in);\n\tPrintWriter out = new PrintWriter(System.out);\n\tint n = bf.nextInt(), m = bf.nextInt();\n\tArrayList<Integer> [] adjList = new ArrayList[n];\n\tfor (int i = 0; i < adjList.length; i++)\n\t{\n\t    adjList[i] = new ArrayList<Integer>();\n\t}\n\tfor (int i = 0; i < m; i++)\n\t{\n\t    int u = bf.nextInt()-1, v = bf.nextInt()-1;\n\t    adjList[u].add(v);\n\t    adjList[v].add(u);\n\t}\n\tlong [][] memo = new long[(1<<n)][n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t    memo[1<<i][i] = 1;\n\t}\n\tlong ans = 0;\n\tfor (int i = 1; i < 1<<n; i++)\n\t{\n\t    if(Integer.bitCount(i) == 1) continue;\n\t    for (int j = 0; j < n; j++)\n\t    {\n\t\tif((i & (1<<j)) == 0 || j == first(i)) continue;\n\t\tfor(int v:adjList[j])\n\t\t    memo[i][j] += memo[i^(1<<j)][v];\n\t    }\n\t}\n\tfor (int i = 1; i < 1<<n; i++)\n\t{\n\t    if(Integer.bitCount(i) < 3) continue;\n\t    int t = first(i);\n\t    for (int j = 0; j < n; j++)\n\t    {\n\t\tif(adjList[j].contains(t))\n\t\t    ans += memo[i][j];\n\t    }\n\t}\n\tout.println(ans/2);\n\tout.flush();\n\tout.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tN = sc.nextInt();\n\t\tadjMat = new boolean[N][N];\n\t\t\n\t\tbits = new ArrayList[1 << N];\n\t\tfor(int i = 0; i < 1 << N; ++i)\n\t\t{\n\t\t\tbits[i] = new ArrayList<>(1);\n\t\t\tfor(int j = 0; j < N; ++j)\n\t\t\t\tif((i & 1 << j) == 0)\n\t\t\t\t\tbits[i].add(j);\n\t\t}\n\t\tint M = sc.nextInt();\n\t\twhile(M-->0)\n\t\t{\n\t\t\tint u = sc.nextInt() - 1, v = sc.nextInt() - 1;\n\t\t\tadjMat[u][v] = adjMat[v][u] = true;\n\t\t}\n\t\tlong ans = 0;\n\t\tfor(int i = N; i > 1; --i)\n\t\t{\n\t\t\tmemo = new long[i][1 << i];\n\t\t\tfor(long[] x: memo)\n\t\t\t\tArrays.fill(x, -1);\n\t\t\tans += dp(endNode = i - 1, 1 << endNode);\n\t\t}\n\t\tfor(int i = 0; i < N; ++i)\n\t\t\tfor(int j = i + 1; j < N; ++j)\n\t\t\t\tif(adjMat[i][j])\n\t\t\t\t\t--ans;\n\t\tout.println(ans >> 1);\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "public static void main(String[] args) throws IOException {\n\tinput.init(System.in);\n\tPrintWriter out = new PrintWriter(System.out);\n\tn = input.nextInt();\n\tm = input.nextInt();\n\tg = new boolean[n][n];\n\tfor(int i = 0; i<m; i++)\n\t{\n\t\tint a = input.nextInt()-1, b = input.nextInt()-1;\n\t\tg[a][b] = g[b][a] = true;\n\t}\n\tlong res = 0;\n\tmap = new HashMap<Integer, Long>();\n\tfor(int i = n-1; i>=0; i--)\n\t{\n\t\tmemo = new long[i+1][1<<(i+1)];\n\t\tfor(long[] A : memo) Arrays.fill(A, -1);\n\t\tres += count(i, i, 1<<i)/2;\n\t}\n\tout.println(res);\n\tout.close();\n}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        QuickScanner in = new QuickScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tnew Thread(new Main()).start();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        InputReader in = new InputReader();\n        n = in.nextInt();\n//       n = 19;?\n        int m = in.nextInt();\n        adj = new boolean[n][n];\n//       for (int i = 0; i < n; i++) {\n//       for (int j = 0; j < n; j++) {\n//       adj[i][j] = true;\n//       }\n//       }\n        dp = new long[1 << n][n];\n        for (int i = 0; i < m; i++) {\n            int f = in.nextInt() - 1;\n            int t = in.nextInt() - 1;\n            adj[f][t] = adj[t][f] = true;\n        }\n\n        boolean[] v = new boolean[1 << n];\n        long res = 0;\n        for (int f = 0; f < n; f++) {\n            first = f;\n            int cnt;\n            for (int i = 0; i < 1 << n; i+=(1<<first))\n                if ((i & (1 << first)) == 0)\n                    for (int j = 0; j < n; j++)\n                        dp[i][j] = -1;\n            \n            for (int i = 0; i < 1 << n; i+= (1<<first)) {\n                cnt = Integer.bitCount(i);\n                if ((i & (1 << first)) == 0 && !v[i | (1 << first)] && cnt > 1) {\n                    v[i | (1 << first)] = true;\n                    res += solve(i, first, cnt);\n                }\n            }\n        }\n        System.out.println(res / 2);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile ( sc.hasNextInt() ) {\n\t\t\tint n = sc.nextInt();\n\t\t\tlong m = sc.nextInt();\n\t\t\tboolean edge[][] = new boolean[n][n];\n\t\t\tlong dp[][] = new long[1<<n][n];\n\t\t\tfor ( long i = 1 ; i<=m ; ++i ) {\n\t \t\t\tint u = sc.nextInt();   \n\t\t\t\tint v = sc.nextInt();\n\t\t\t\t-- u;\n\t\t\t\t-- v;\n\t\t\t\tedge[u][v] = edge[v][u] = true;\n\t\t\t}\n\t\t\tfor ( int i = 0 ; i<n ; ++i ) {\n\t\t\t\tdp[1<<i][i] = 1;\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tfor ( int i = 1 ; i<(1<<n) ; ++i ) {\n\t\t\t\tint first = cal(i);\n\t\t\t\tfor ( int j = 0 ; j<n ; ++j ) {\n\t\t\t\t\tif ( dp[i][j]==0 ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( int k = first ; k<n ; ++k ) {\n \t\t\t\t\t\tif ( j==k || !edge[j][k] ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( k==first && (i&(1<<k))!=0 ) {\n\t\t\t\t\t\t\tres += dp[i][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( (i&(1<<k))==0 ) {\n\t\t\t\t\t\t\tdp[i|(1<<k)][k] += dp[i][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tres -= m;\n\t\t\tSystem.out.println(res/2);\t\t\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[]args)throws IOException{\n        BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder stringBuilder=new StringBuilder();\n\n        String temp[]=bufferedReader.readLine().split(\" \");\n        int V=Integer.parseInt(temp[0]);\n        int E=Integer.parseInt(temp[1]);\n        adjList=new HashSet[V];\n        for(int i=0;i<V;i++)\n            adjList[i]=new HashSet<>();\n        for(int i=0;i<E;i++){\n            temp=bufferedReader.readLine().split(\" \");\n            int x=Integer.parseInt(temp[0])-1;\n            int y=Integer.parseInt(temp[1])-1;\n            adjList[y].add(x);\n            adjList[x].add(y);\n\n        }\n        stringBuilder.append(solve(V)+\"\\n\");\n        System.out.println(stringBuilder);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Main().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[][] d = new int[n][n];\n        for (int i = 0, m = sc.nextInt(); i < m; i++) {\n            int a = sc.nextInt() - 1, b = sc.nextInt() - 1;\n            d[a][b] = 1;\n            d[b][a] = 1;\n        }\n        long[][] dp = new long[1 << n][n];\n\n        // SOLUTION BEGINS\n        for (int mask = 1; mask < 1 << n; mask++) {\n            int start = numberOfTrailingZeros(mask); // the starting vertex of a Hamiltonian walk\n            if (bitCount(mask) == 1) {\n                dp[mask][start] = 1;\n                continue;\n            }\n            for (int i = 0; i < n; i++) {\n                if ((mask & (1 << i)) > 0 && i != start) {\n                    int xmask = mask ^ (1 << i); // mask without vertex i\n                    for (int j = 0; j < n; j++) {\n                        if (d[j][i] > 0) {\n                            dp[mask][i] += dp[xmask][j];\n                        }\n                    }\n                }\n            }\n        }\n        // SOLUTION ENDS\n\n        long sum = 0;\n        for (int mask = 1; mask < 1 << n; mask++) {\n            if (bitCount(mask) >= 3) { // We need at least 3 vertices for a cycle\n                for (int i = 0; i < n; i++) {\n                    if (d[numberOfTrailingZeros(mask)][i] > 0) {\n                        sum += dp[mask][i];\n                    }\n                }\n            }\n        }\n        out.print(sum / 2);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws InterruptedException {\n\t\t new Thread(null, new Runnable() {\n            public void run() {\n                new Main().run();\n            }\n\t     }, \n\t     \"1\", \n\t     1 << 25).start();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tmap = new HashMap<State, Integer>();\n\t\tconnect = new boolean[n][n];\n\t\tans = new long[n][1<<n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tArrays.fill(ans[i], -1);\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\twhile(m-- > 0)\t{\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\tint b = Integer.parseInt(st.nextToken());\n\t\t\ta--;\n\t\t\tb--;\n\t\t\tconnect[a][b] = connect[b][a] = true;\n\t\t}\n\t\tlong ret = 0;\n\t\tint mask = 1 << n;\n\t\tmask--;\n\t\tfor(int i = 0; i < n; i++)\t{\n\t\t\tfor(int out = i+1; out < n; out++)\t{\n\t\t\t\tif(connect[i][out])\t{\n\t\t\t\t\tret += solve(mask - (1<<out), out, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmask -= (1<<i);\n\t\t}\n\t\tSystem.out.println(ret/2);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int[] params = Arrays.stream(br.readLine().split(\" \"))\n                .mapToInt(x -> Integer.parseInt(x)).toArray();\n        n = params[0];\n        int m = params[1];\n        int[][] matrix = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            matrix[i] = Arrays.stream(br.readLine().split(\" \"))\n                    .mapToInt(x -> Integer.parseInt(x)).toArray();\n        }\n        minCost = new int[n][n];\n        minCostEndpoints = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i > j) {\n                    minCost[i][j] = Integer.MAX_VALUE;\n                    for (int k = 0; k < m; k++) {\n                        int diff = Math.abs(matrix[i][k] - matrix[j][k]);\n                        if (diff < minCost[i][j]) {\n                            minCost[i][j] = diff;\n                        }\n                    }\n                    minCost[j][i] = minCost[i][j];\n                }\n                minCostEndpoints[i][j] = Integer.MAX_VALUE;\n                for (int k = 0; k < m - 1; k++) {\n                    int diff = Math.abs(matrix[i][k + 1] - matrix[j][k]);\n                    if (diff < minCostEndpoints[i][j]) {\n                        minCostEndpoints[i][j] = diff;\n                    }\n                }\n            }\n        }\n        int maxCost = n == 1 ? minCostEndpoints[0][0] : 0;\n        for (int i = 0; i < n; i++) {\n            costs.clear();\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    int bitmask = (1 << i) | (1 << j);\n                    int state = bitmask + (j << 16);\n                    costs.put(state, minCost[i][j]);\n                }\n            }\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    if (minCostEndpoints[i][j] <= maxCost) {\n                        continue;\n                    } else {\n                        int pathCost = Math.min(minCostEndpoints[i][j], findMaxCost(i, j, (1 << n) - 1));\n                        maxCost = Math.max(maxCost, pathCost);\n                    }\n                }\n            }\n        }\n        System.out.println(maxCost);\n        br.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tr = Integer.parseInt(st.nextToken());\n\t\t\n\t\tc = Integer.parseInt(st.nextToken());\n\t\tint[][] arr = new int[r][c];\n\t\tmemo = new int[r][r][1 << r];\n\t\tmn1 = new int[r][r];\n\t\tmn2 = new int[r][r];\n\t\tfor(int i=0;i<r;i++) {\n\t\t\tst=new StringTokenizer(br.readLine());\n\t\t\tfor(int j=0;j<c;j++) {\n\t\t\t\tarr[i][j]=Integer.parseInt(st.nextToken());\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < r; i++) {\n\t\t\tArrays.fill(mn1[i], (int)1e9);\n\t\t\tArrays.fill(mn2[i], (int)1e9);\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < r; i++) {\n\t\t\tfor (int j = 0; j < r; j++) {\n\t\t\t\tArrays.fill(memo[i][j], -1);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < r; i++) {\n\t\t\tfor (int j = 0; j < r; j++) {\n\t\t\t\tfor (int k = 0; k < c; k++) {\n\t\t\t\t\t\n\t\t\t\t\tmn1[i][j] = Math.min(mn1[i][j], Math.abs(arr[i][k] - arr[j][k]));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < r; i++) {\n\t\t\tfor (int j = 0; j < r; j++) {\n\t\t\t\tfor (int k = 0; k < c-1; k++) {\n\t\t\t\t\t\n\t\t\t\t\tmn2[i][j] = Math.min(mn2[i][j], Math.abs(arr[j][k] - arr[i][k + 1]));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < r; i++) {\n\t\t\tans=Math.max(ans, dp(1<<i,i,i));\n\t\t}\n\t\tif(r==1)\n\t\t\tans=mn2[0][0];\n\t\tout.println(ans);\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner();\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tn=sc.nextInt();\n\t\tm=sc.nextInt();\n\t\ta=new int[n][m];\n\t\tdiff=new int[n][n];\n\t\ts_e=new int[n][n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tfor(int j=0;j<m;j++)\n\t\t\t\ta[i][j]=sc.nextInt();\n\t\t\n\t\tdp=new int[n][n][70000];\n\t\tint ans=0;\n\t\tfor(int i=0;i<n;i++)\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\t\n\t\t\t\tArrays.fill(dp[i][j], -1);\n\t\t\t\tdiff[i][j]=Integer.MAX_VALUE;\n\t\t\t\ts_e[i][j]=Integer.MAX_VALUE;\n\t\t\t\tfor(int k=0;k<m-1;k++)\n\t\t\t\t{\t\n\t\t\t\t\tdiff[i][j]=Math.min(Math.abs(a[i][k]-a[j][k]), diff[i][j]);\n\t\t\t\t\ts_e[i][j]=Math.min(Math.abs(a[i][k]-a[j][k+1]), s_e[i][j]);\n\t\t\t\t}\n\t\t\t\tdiff[i][j]=Math.min(Math.abs(a[i][m-1]-a[j][m-1]), diff[i][j]);\n\t\t\t}\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t\tans=Math.max(ans, dp(i,i,1<<i));\n\t\t\n\t\tpw.print(ans);\n\t\tpw.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String args[]) throws Exception {\n        new Thread(null, new Main(),\"Main\",1<<26).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream input;\n\t\tOutputStream output;\n\t\ttry {\n\t\t\tinput = new FileInputStream(\"input.txt\");\n\t\t\toutput = new FileOutputStream(\"output.txt\");\n\t\t} catch (FileNotFoundException e) {\n\t\t\tinput = System.in;\n\t\t\toutput = System.out;\n\t\t}\n\t\tKattio io = new Kattio(input, output);\n\t\t(new Solve(io)).main();\n\t\tio.close();\n\n\t\tif (input instanceof FileInputStream)\n\t\t\ttry {\n\t\t\t\tinput.close();\n\t\t\t} catch (IOException e) {\n\n\t\t\t}\n\t\tif (output instanceof FileOutputStream)\n\t\t\ttry {\n\t\t\t\toutput.close();\n\t\t\t} catch (IOException e) {\n\n\t\t\t}\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF solver = new TaskF();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) throws Exception {\n    Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 27);\n    thread.start();\n    thread.join();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) \n\t\tn=in.nextInt();\n\t\tm=in.nextInt();\n\t\tfor(int i=0;i<n;i++)\n\t\t\tfor(int j=1;j<=m;j++)\n\t\t\t\ta[i][j]=in.nextInt();\n\t\tif(n==1)\n\t\t{\n\t\t\tres=(int)1e9;\n\t\t\tfor(int i=1;i<m;i++)\n\t\t\t\tres=Math.min(res,Math.abs(a[0][i]-a[0][i+1]));\n\t\t\tout.print(res);\n\t\t\tout.close();\n\t\t\treturn;\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\n\t\t\t\tMin[i][j]=Min1[i][j]=(int)1e9;\n\t\t\t\tfor(int t=1;t<=m;t++)\n\t\t\t\t\tMin[i][j]=Math.min(Min[i][j],Math.abs(a[i][t]-a[j][t]));\n\t\t\t\tfor(int t=1;t<m;t++)\n\t\t\t\t\tMin1[i][j]=Math.min(Min1[i][j],Math.abs(a[i][t]-a[j][t+1]));\n\t\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t\tf[1<<i][i][i]=(int)1e9;\n\t\tfor(int mask=0;mask<(1<<n);mask++)\n\t\t\tif(Integer.bitCount(mask)>1)\n\t\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\t\tif(GetBit(mask,i)==1)\n\t\t\t\t\t\tfor(int j=0;j<n;j++)\n\t\t\t\t\t\t\tif(i!=j&&GetBit(mask,j)==1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor(int t=0;t<n;t++)\n\t\t\t\t\t\t\t\t\tif(j!=t&&GetBit(mask,t)==1)\n\t\t\t\t\t\t\t\t\t\tf[mask][i][j]=Math.max(f[mask][i][j],Math.min(f[TurnBit(mask,j)][i][t],Min[j][t]));\n\t\t\t\t\t\t\t\tif(mask==(1<<n)-1)\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tres=Math.max(res,Math.min(f[mask][i][j],Min1[j][i]));\n\t\t\t\t\t\t\t}\n\t\tout.print(res);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n        prepareIO(false);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint n = Integer.parseInt(st.nextToken());\n\t\tint m = Integer.parseInt(st.nextToken());\n\t\tint[][] aa = new int[n][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t\taa[i][j] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tint[][] dd = new int[n][n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tint d = Integer.MAX_VALUE;\n\t\t\t\tfor (int h = 0; h < m; h++)\n\t\t\t\t\td = Math.min(d, Math.abs(aa[i][h] - aa[j][h]));\n\t\t\t\tdd[i][j] = dd[j][i] = d;\n\t\t\t}\n\t\tint[][] dd_ = new int[n][n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tint d = Integer.MAX_VALUE;\n\t\t\t\tfor (int h = 0; h < m - 1; h++)\n\t\t\t\t\td = Math.min(d, Math.abs(aa[i][h] - aa[j][h + 1]));\n\t\t\t\tdd_[i][j] = d;\n\t\t\t}\n\t\tif (n == 1) {\n\t\t\tSystem.out.println(dd_[0][0]);\n\t\t\treturn;\n\t\t}\n\t\tint[] ii = new int[1 << n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tii[1 << i] = i;\n\t\tint[][][] dp = new int[1 << n][n][n];\n\t\tfor (int b = 0; b < 1 << n; b++)\n\t\t\tfor (int u = b; u > 0; u &= u - 1) {\n\t\t\t\tint i = ii[u & -u];\n\t\t\t\tfor (int v = b ^ 1 << i; v > 0; v &= v - 1) {\n\t\t\t\t\tint j = ii[v & -v];\n\t\t\t\t\tif (b == (1 << i ^ 1 << j))\n\t\t\t\t\t\tdp[b][i][j] = dd[i][j];\n\t\t\t\t\telse {\n\t\t\t\t\t\tint x = 0;\n\t\t\t\t\t\tfor (int w = b ^ 1 << i ^ 1 << j; w > 0; w &= w - 1) {\n\t\t\t\t\t\t\tint k = ii[w & -w];\n\t\t\t\t\t\t\tx = Math.max(x, Math.min(dp[b ^ 1 << j][i][k], dd[k][j]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdp[b][i][j] = x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tint b = (1 << n) - 1;\n\t\tint x = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\tif (i != j)\n\t\t\t\t\tx = Math.max(x, Math.min(dp[b][i][j], dd_[i][j]));\n\t\tSystem.out.println(x);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tFastScanner in = new FastScanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\t\n\t\tn = in.nextInt();\n\t\tm = in.nextInt();\n\t\tarr = new int[n][m];\n\t\tcosts = new int[n][n];\n\t\twrapCosts = new int[n][n];\n\t\tfor (int r = 0; r < n; r++) {\n\t\t\tfor (int c = 0; c < m; c++) {\n\t\t\t\tarr[r][c] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tcosts[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int c = 0; c < m; c++) {\n\t\t\t\t\tcosts[i][j] = Math.min(costs[i][j], Math.abs(arr[i][c] - arr[j][c]));\n\t\t\t\t}\n\t\t\t\tcosts[j][i] = costs[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\twrapCosts[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int c = 0; c < m - 1; c++) {\n\t\t\t\t\twrapCosts[i][j] = Math.min(wrapCosts[i][j], Math.abs(arr[i][c + 1] - arr[j][c]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmemo = new int[n][1 << n];\n\t\tlong best = 0;\n\t\tfor (start = 0; start < n; start++) {\n\t\t\tfor (int[] a : memo) Arrays.fill(a, -1);\n\t\t\tbest = Math.max(best, go(start, (1 << n) - 1 - (1 << start)));\n\t\t}\n\t\tout.println(best);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        int N = scanner.nextInt();\n        int M = scanner.nextInt();\n        int[][] arr = new int[N][M];\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < M; j++) {\n                arr[i][j] = scanner.nextInt();\n            }\n        }\n        int[][] distRow = new int[N][N];\n        int[][] distTop = new int[N][N];\n//        for(int i = 0; i < N; i++) {\n//            Arrays.fill(distTop, Integer.MAX_VALUE);\n//            Arrays.fill(distRow, Integer.MAX_VALUE);\n//        }\n        //compute row distances\n        for(int i = 0; i < N; i++) {\n            for(int j = i+1; j < N; j++) {\n                int curMin = Integer.MAX_VALUE;\n                for(int k = 0; k < M; k++) {\n                    curMin = Math.min(curMin, Math.abs(arr[i][k] - arr[j][k]));\n                }\n                distRow[i][j] = distRow[j][i] = curMin;\n            }\n        }\n        //compute bottom/top distances\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < N; j++) {\n                int curMin = Integer.MAX_VALUE;\n                for(int k = 0; k+1 < M; k++) {\n                    curMin = Math.min(curMin, Math.abs(arr[i][k] - arr[j][k+1]));\n                }\n                distTop[i][j] = curMin;\n            }\n        }\n        int maxMask = 1 << N;\n        int[][][] dp = new int[maxMask][N][N];\n        for(int i = 0; i < maxMask; i++) {\n            for(int j = 0; j < N; j++) {\n                Arrays.fill(dp[i][j], Integer.MAX_VALUE);\n            }\n        }\n        for(int mask = 1; mask < maxMask; mask++) {\n            for (int j = 0; j < N; j++) {\n                if ((mask & ( 1 << j)) == 0) continue;\n                for(int k = 0; k < N; k++) {\n                    if ((mask &(1 << k)) == 0) continue;\n                    if (j == k && mask - (1 << k) != 0) continue;\n                    for (int i = 0; i < N; i++) {\n                        if ((mask & (1 << i)) > 0) continue;\n                        int curMask = mask | (1 << i);\n                        if (dp[curMask][i][k] != Integer.MAX_VALUE)\n                            dp[curMask][i][k] = Math.max(dp[curMask][i][k], Math.min(dp[mask][j][k], distRow[i][j]));\n                        else\n                            dp[curMask][i][k] = Math.min(dp[mask][j][k], distRow[i][j]);\n                    }\n                }\n            }\n        }\n        maxMask--;\n        int max = 0;\n        for(int i= 0; i < N; i++) {\n            for(int j = 0; j < N; j++) {\n                if (i==j && N != 1) continue;\n                max = Math.max(max, Math.min(dp[maxMask][i][j], distTop[i][j]));\n            }\n        }\n        System.out.println(max);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F solver = new F();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        int n = sc.nextInt(); int m = sc.nextInt();\n        long [][] mn1 = new long[n][n];\n        long [][] mn2 = new long[n][n];\n        long [][] grid = new long[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) grid[i][j] = sc.nextInt();\n        }\n        if (n == 1) {\n            long ans = Integer.MAX_VALUE;\n            for (int i = 0; i < m - 1; i++) ans = Math.min(ans, Math.abs(grid[0][i] - grid[0][i + 1]));\n            out.println(ans);\n            out.close();\n            return;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                long min = Long.MAX_VALUE;\n                for (int k = 0; k < m; k++) min = Math.min(min, Math.abs(grid[i][k] - grid[j][k]));\n                mn1[i][j] = min;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                long min = Long.MAX_VALUE;\n                for (int k = 0; k < m - 1; k++) min = Math.min(min, Math.abs(grid[i][k] - grid[j][k + 1]));\n                mn2[i][j] = min;\n            }\n        }\n        long [][] dp = new long[1 << n][n];\n\n        // start vertex\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (long [] a: dp) Arrays.fill(a, -1);\n            for (int j = 0; j < n; j++) {\n                if (j == i) dp[1 << j][j] = Long.MAX_VALUE;\n                else dp[1 << j][j] = 0;\n            }\n            for (int mask = 1; mask < (1 << n); mask++) {\n                for (int last = 0; last < n; last++) {\n                    if (dp[mask][last] != -1) continue;\n                    for (int prev = 0; prev < n; prev++) {\n                        if (prev == last) continue;\n                        if (((mask >> prev) & 1) == 1) {\n                            dp[mask][last] = Math.max(dp[mask][last], Math.min(mn1[prev][last], dp[mask ^ (1 << last)][prev]));\n                        }\n                    }\n                }\n            }\n            // end vertex\n            for (int j = 0; j < n; j++) {\n                // step from the last vertex to the first\n                long end = mn2[j][i];\n                ans = Math.max(ans, Math.min(dp[(1 << n) - 1][j], end));\n            }\n        }\n        out.println(ans);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tsolve();\n\t\tout.close();\n\t}\t\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception { new Main().run(); }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Throwable {\n        sc = new MyScanner();\n        pw = new PrintWriter(System.out);\n\n        n = sc.nextInt();\n        int m = sc.nextInt();\n        int[][] a = new int[n][m];\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < m; j++)\n                a[i][j] = sc.nextInt();\n        val = new int[n][n];\n        for (int i = 0; i < n; i++)\n            Arrays.fill(val[i], Integer.MAX_VALUE);\n        for (int i = 0; i < n; i++)\n            for (int j = i; j < n; j++) {\n                for (int k = 0; k < m; k++)\n                    val[i][j] = val[j][i] = Math.min(val[i][j], Math.abs(a[i][k] - a[j][k]));\n            }\n\n        val2 = new int[n][n];\n        for (int i = 0; i < n; i++)\n            Arrays.fill(val2[i], Integer.MAX_VALUE);\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m - 1; k++)\n                    val2[i][j] = Math.min(val2[i][j], Math.abs(a[i][k] - a[j][k + 1]));\n            }\n        mem = new Long[n][n][1 << n];\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, dp(i, i, 1 << i));\n        }\n        if (n == 1)\n            pw.println(val2[0][0]);\n        else\n            pw.println(ans);\n\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskF solver = new TaskF();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        FElongatedMatrix solver = new FElongatedMatrix();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        Thread thread = new Thread(null, new TaskAdapter(), \"\", 1 << 27);\n        thread.start();\n        thread.join();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        F solver = new F();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tsolve();\n\t\tout.flush();\n\t\tout.close();\n\t}\t\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc=new Scanner();\n\t\tPrintWriter out=new PrintWriter(System.out);\n\t\tn=sc.nextInt();\n\t\tm=sc.nextInt();\n\t\ta=new int [n][m];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tfor(int j=0;j<m;j++)\n\t\t\t\ta[i][j]=sc.nextInt();\n\t\tMin=new int [n][n];\n\t\tif(n==1) {\n\t\t\tint lo=0,hi=(int)1e9;\n\t\t\tint ans=0;\n\t\t\twhile(lo<=hi) {\n\t\t\t\tK=lo+hi>>1;\n\t\t\t\t\n\t\t\t\tif(check(0, 0))\n\t\t\t\t{\n\t\t\t\t\tans=K;\n\t\t\t\t\tlo=K+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\thi=K-1;\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t\treturn;\n\t\t}\n\t\tfor(int i1=0;i1<n;i1++)\n\t\t\tfor(int i2=0;i2<n;i2++)\n\t\t\t{\n\t\t\t\tif(i1==i2)\n\t\t\t\t\tcontinue;\n\t\t\t\tint min=(int) 1e9;\n\t\t\t\tfor(int j=0;j<m;j++)\n\t\t\t\t\tmin=Math.min(Math.abs(a[i1][j]-a[i2][j]), min);\n\t\t\t\tMin[i1][i2]=min;\n\t\t\t}\n\t\tmemo=new int [n][1<<n];\n\t\tint ans=0;\n\t\tint lo=0,hi=(int)1e9;\n\t\twhile(lo<=hi) {\n\t\t\tK=lo+hi>>1;\n\t\tfor(int []x:memo)\n\t\t\tArrays.fill(x, -1);\n\t\tint ok=0;\n\t\tfor(int top=0;top<n && ok==0;top++)\n\t\t\tfor(int bottom=0;bottom<n && ok==0 ;bottom++) {\n\t\t\t\tbot=bottom;\n\t\t\t\tif(top==bottom || !check(top, bottom))\n\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tint dp=dp(1<<top | 1<<bottom, 2, top);\n\t\t\t\tok|=dp;\n\t\t\t\t\n\t\t\t}\n\t\tif(ok==1)\n\t\t{\n\t\t\tans=K;\n\t\t\tlo=K+1;\n\t\t\t\n\t\t}\n\t\telse\n\t\t\thi=K-1;\n\t\t}\n\t\tout.println(ans);\n\t\t\n\t\tout.close();\n\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tint[][] graphVerticial = null;\n\t\tint[][] graphDiagonal = null;\n\t\t\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\t\n\t\tgraphVerticial = createGraphVertical(n, m, a);\n\t\tgraphDiagonal = createGraphDiagonal(n, m, a);\n\t\t\n//\t\tprint(graphVerticial);\n//\t\tSystem.out.println(\"##########################\");\n//\t\tprint(graphDiagonal);\n\t\t\n\t\tint result = 0;\n\t\tint k = 1;\n\t\tint piso = 0;\n\t\tint teto = 1000000000;\n\t\t\n\t\twhile(true) {\n\t\t\t\n\t\t\tk = (int) Math.ceil((teto - piso) / 2.0) + piso;\n\t\t\t\n\t\t\tif(isOk(n, k, graphVerticial, graphDiagonal)) {\n\t\t\t\tresult = Math.max(result, k);\n\t\t\t\tpiso = k;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tteto = k - 1;\n\t\t\t}\n\n\t\t\t//System.out.println(piso + \", \" + teto);\n\t\t\t\n\t\t\tif(teto <= piso) break;\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(result);\n\t\t\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = rni(), m = ni(), a[][] = new int[n][];\n        for (int i = 0; i < n; ++i) {\n            a[i] = ria(m);\n        }\n        int delta[][] = new int[n][n], end_delta[][] = new int[n][n], dp[][][] = new int[n][1 << n][n];\n        for (int i = 0; i < n; ++i) {\n            fill(delta[i], IBIG);\n            fill(end_delta[i], IBIG);\n            delta[i][i] = 0;\n        }\n        for (int i = 0; i < n - 1; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k = 0; k < m; ++k) {\n                    delta[i][j] = delta[j][i] = min(delta[i][j], abs(a[i][k] - a[j][k]));\n                }\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                for (int k = 1; k < m; ++k) {\n                    end_delta[i][j] = min(end_delta[i][j], abs(a[j][k] - a[i][k - 1]));\n                }\n            }\n        }\n        for (int[][] layer : dp) {\n            for (int[] row : layer) {\n                fill(row, IBIG);\n            }\n        }\n        for (int i = 1; i < 1 << n; ++i) {\n            boolean one_bit = Integer.bitCount(i) == 1;\n            for (int j = 0; j < n; ++j) {\n                if ((i & (1 << j)) > 0) {\n                    for (int l = 0; l < n; ++l) {\n                        if ((i & (1 << l)) == 0) {\n                            int max = 0;\n                            for (int k = 0; k < n; ++k) {\n                                if ((one_bit || j != k) && (i & (1 << k)) > 0) {\n                                    max = max(max, min(dp[j][i][k], delta[k][l]));\n                                }\n                            }\n                            // pr(j + \" \");\n                            // pr(Integer.toBinaryString(i) + \" \");\n                            // prln(l, max);\n                            dp[j][i | (1 << l)][l] = max;\n                        }\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i != j) {\n                    // prln(i, j, dp[i][(1 << n) - 1][j]);\n                    ans = max(ans, min(dp[i][(1 << n) - 1][j], end_delta[j][i]));\n                }\n            }\n        }\n        if (n == 1) {\n            ans = maxof(end_delta[0]);\n        }\n        prln(ans);\n        close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\t\t\n\t\n\t\tScanner scan = new Scanner(System.in);\n\t\n\t\tint i , j , k , n , m;\n\t\tn = scan.nextInt();\n\t\tm = scan.nextInt();\n\t\tfor (i = 0;i < n;i ++) {\n\t\t\tfor (j = 0;j < m;j ++) {\n\t\t\t\tinput[i][j] = scan.nextInt();\n\t\t\t}\n\t\t}\n\t\tfor (i = 0;i < n;i ++) {\n\t\t\tfor (j = i + 1;j < n;j ++) {\n\t\t\t\tint minDist = - 1;\n\t\t\t\tfor (k = 0;k < m;k ++) {\n\t\t\t\t\tint dist = Math.abs(input[i][k] - input[j][k]);\n\t\t\t\t\tif (dist < minDist || minDist < 0) {\n\t\t\t\t\t\tminDist = dist;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tminDistBetweenRow[i][j] = minDistBetweenRow[j][i] = minDist;\t\t\n\t\t\t}\n\t\t}\n\t\tfor (i = 0;i < n;i ++) {\n\t\t\tfor (j = 0;j < n;j ++) {\n\t\t\t\tif (i != j) {\n\t\t\t\t\t// i head , j tail\n\t\t\t\t\tint minDist = - 1;\n\t\t\t\t\tfor (k = 0;k < m - 1;k ++) {\t\t\t\t\t\t\n\t\t\t\t\t\tint dist = Math.abs(input[j][k] - input[i][k + 1]);\n\t\t\t\t\t\tif (dist < minDist || minDist < 0) {\n\t\t\t\t\t\t\tminDist = dist;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tminDistBetweenHeadAndTail[i][j] = minDist;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\tfor (i = 0;i < n;i ++) {\n\t\t\tint minDist = - 1;\n\t\t\tfor (j = 0;j < m - 1;j ++) {\n\t\t\t\tint dist = Math.abs(input[i][j] - input[i][j + 1]);\n\t\t\t\tif (dist < minDist || minDist < 0) {\n\t\t\t\t\tminDist = dist;\n\t\t\t\t}\n\t\t\t}\n\t\t\trowMinDist[i] = minDist;\n\t\t}\n\t\tint low = 0 , high = 1000000010;\n\t\twhile (low < high) {\n\t\t\tint mid = (low + high) / 2;\n\t\t\tif (check(n , m , mid)) {\t\t\t\t\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(high - 1);\n\n\t}\n", "complexity": "np"}
{"code": "    public static void main (String[] args) throws java.lang.Exception {\n        PrintWriter out = new PrintWriter(System.out);\n\n\n        int T=1;\n        for(int t=0;t<T;t++){\n            int n=Int();int m=Int();\n            int A[][]=new int[n][m];\n\n            for(int i=0;i<n;i++){\n                for(int j=0;j<m;j++){\n                    A[i][j]=Int();\n                }\n            }\n\n            Sol sol=new Sol();\n            sol.solution(out,A);\n        }\n        out.flush();\n\n    }\n", "complexity": "np"}
{"code": "   public static void main(String[] args) {\n      MyScanner sc = new MyScanner();\n      out = new PrintWriter(new BufferedOutputStream(System.out));\n      \n      int n = sc.nextInt();\n      int m = sc.nextInt();\n      int[][] arr = new int[n][m];\n      for(int i=0; i<n; i++) {\n          for(int j=0; j<m; j++) {\n              arr[i][j] = sc.nextInt();\n          }\n      }\n      if(n==1) {\n          int min = Integer.MAX_VALUE;\n          for(int i=0; i<m-1; i++) {\n              min = Math.min(min, Math.abs(arr[0][i]-arr[0][i+1]));\n          }\n          out.println(min);\n          out.close();\n      }\n      int[][] adj = new int[n][n];\n      int[][] edgeadj = new int[n][n];\n      for(int i=0; i<n; i++) {\n          for(int j=i+1; j<n; j++) {\n              int min = Integer.MAX_VALUE;\n              for(int k=0; k<m; k++) {\n                  min = Math.min(min, Math.abs(arr[i][k]-arr[j][k]));\n              }\n              adj[i][j]=min;\n              adj[j][i]=min;\n              int min1 = Integer.MAX_VALUE;\n              int min2 = Integer.MAX_VALUE;\n              for(int k=0; k<m-1; k++) {\n                  min1 = Math.min(min1, Math.abs(arr[i][k]-arr[j][k+1]));\n                  min2 = Math.min(min2, Math.abs(arr[i][k+1]-arr[j][k]));\n              }\n              edgeadj[i][j]=min1;\n              edgeadj[j][i]=min2;\n          }\n      }\n      int power = (int)Math.pow(2,n);\n      int[][][] dp = new int[power][n][n];\n      for(int i=0; i<n; i++) {\n          dp[(int)Math.pow(2,i)][i][i] = Integer.MAX_VALUE;\n      }\n      for(int bit=0; bit<power; bit++) {\n          for(int j=0; j<n; j++) {\n              for(int k=0; k<n; k++) {\n                  if((bit & (1<<j))>0 && (bit & (1<<k))>0 && j!=k) {\n                      int temp = bit;\n                      temp &= ~(1<<k);\n                      int ans = 0;\n                      for(int l=0; l<n; l++) {\n                          if((temp & (1<<l))>0) {\n                              int min = Math.min(dp[temp][j][l], adj[l][k]);\n                              ans = Math.max(ans, min);\n                          }\n                      }\n                      if(j!=k) {\n                          dp[bit][j][k] = ans;\n                      }\n                    // out.println(bit + \" \" + j + \" \" + k + \" \" + dp[bit][j][k]);\n                  }\n              }\n          }\n      }\n      int answer = 0;\n      for(int i=0; i<n; i++) {\n          for(int j=0; j<n; j++) {\n              if(i!=j) {\n                int ans = Math.min(dp[power-1][i][j], edgeadj[i][j]);\n                answer = Math.max(answer, ans);\n              }\n          }\n      }\n    //   for(int i=0; i<n; i++) {\n    //       for(int j=0; j<n; j++) {\n    //           out.println(dp[power-1][i][j]+\" \"+edgeadj[i][j]);\n    //       }\n    //   }\n      out.println(answer);\n      \n      // Start writing your solution here. -------------------------------------\n   \n      /*\n      int n      = sc.nextInt();        // read input as integer\n      long k     = sc.nextLong();       // read input as long\n      double d   = sc.nextDouble();     // read input as double\n      String str = sc.next();           // read input as String\n      String s   = sc.nextLine();       // read whole line as String\n\n      int result = 3*n;\n      out.println(result);                    // print via PrintWriter\n      */\n\n      // Stop writing your solution here. -------------------------------------\n      out.close();\n   }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Throwable {\n        sc = new MyScanner();\n        pw = new PrintWriter(System.out);\n\n        n = sc.nextInt();\n        int m = sc.nextInt();\n        int[][] a = new int[n][m];\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < m; j++)\n                a[i][j] = sc.nextInt();\n        val = new int[n][n];\n        for (int i = 0; i < n; i++)\n            Arrays.fill(val[i], Integer.MAX_VALUE);\n        for (int i = 0; i < n; i++)\n            for (int j = i; j < n; j++) {\n                for (int k = 0; k < m; k++)\n                    val[i][j] = val[j][i] = Math.min(val[i][j], Math.abs(a[i][k] - a[j][k]));\n            }\n\n        val2 = new int[n][n];\n        for (int i = 0; i < n; i++)\n            Arrays.fill(val2[i], Integer.MAX_VALUE);\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m - 1; k++)\n                    val2[i][j] = Math.min(val2[i][j], Math.abs(a[i][k] - a[j][k + 1]));\n            }\n        mem = new Integer[n][n][1 << n];\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, dp(i, i, 1 << i));\n        }\n        if (n == 1)\n            pw.println(val2[0][0]);\n        else\n            pw.println(ans);\n\n\n        pw.flush();\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Thread t = new Thread(null, new O(), \"Integer.MAX_VALUE\", 100000000);\n        t.start();\n    }\n", "complexity": "np"}
{"code": "      public static void main(String hi[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         int M = Integer.parseInt(st.nextToken());\n         int[][] grid = new int[N][M];\n         for(int i=0; i < N; i++)\n            grid[i] = readArr(M, infile, st);\n         int[][] mindiff = new int[N][N];\n         for(int a=0; a < N; a++)\n            for(int b=a+1; b < N; b++)\n            {\n               int val = Integer.MAX_VALUE;\n               for(int i=0; i < M; i++)\n                  val = Math.min(val, Math.abs(grid[a][i]-grid[b][i]));\n               mindiff[a][b] = mindiff[b][a] = val;\n            }\n         int res = 0;\n         for(int start=0; start < N; start++)\n         {\n            int[][] dp = new int[1<<N][N];\n            Arrays.fill(dp[0], Integer.MAX_VALUE);\n            for(int mask=0; mask < (1<<N); mask++)\n            {\n               if(Integer.bitCount(mask) == 1 && mask != (1<<start))\n                  continue;\n               for(int prev=0; prev < N; prev++)\n                  if((mask&(1<<prev)) > 0 || mask == 0)\n                  {\n                     for(int b=0; b < N; b++)\n                        if((mask&(1<<b)) == 0)\n                        {\n                           int submask = mask|(1<<b);\n                           if(mask == 0)\n                              dp[submask][b] = Integer.MAX_VALUE;\n                           else\n                              dp[submask][b] = Math.max(dp[submask][b], Math.min(dp[mask][prev], mindiff[prev][b]));\n                        }\n                  }\n            }\n            for(int b=0; b < N; b++)\n            {\n               int temp = dp[(1<<N)-1][b];\n               for(int i=0; i < M-1; i++)\n                  temp = Math.min(temp, Math.abs(grid[b][i]-grid[start][i+1]));\n               res = Math.max(res, temp);\n            }\n         }\n         System.out.println(res);\n      }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.flush();out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        int N = scanner.nextInt();\n        int M = scanner.nextInt();\n        int[][] matrix = new int[N][M];\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < M; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n        int[][] maxDist = new int[N][N];\n        for(int i = 0; i < N; i++) {\n            Arrays.fill(maxDist[i], Integer.MAX_VALUE);\n        }\n        for(int i = 0; i < M; i++) {\n            for(int  j = 0; j < N; j++) {\n                for(int k = j+1; k < N; k++) {\n                    maxDist[j][k] = Math.min(maxDist[j][k], Math.abs(matrix[k][i] - matrix[j][i]));\n                    maxDist[k][j] = maxDist[j][k];\n                }\n            }\n        }\n        int[][] distTop = new int[N][N];\n        for(int i = 0; i < N; i++) {\n            Arrays.fill(distTop[i], Integer.MAX_VALUE);\n        }\n        for(int i = 0; i < M-1; i++) {\n            for(int j = 0; j < N; j++) {\n                for(int k = 0; k < N; k++) {\n                    distTop[j][k] = Math.min(distTop[j][k], Math.abs(matrix[j][i] - matrix[k][i+1]));\n                }\n            }\n        }\n        if (N == 1) {\n            System.out.println(distTop[0][0]);\n            System.exit(0);\n        }\n        int[] bitLoc = new int[1<<N];\n        for(int i = 0; i < N; i++) {\n            bitLoc[1 << i] = i;\n        }\n        int[][][] dp = new int[1<<N][N][N];\n        //iterate over every row\n        for(int mask = 1; mask < (1 << N); mask++) {\n            for(int smask = mask; smask > 0; smask &= (smask-1)) {\n                int i = bitLoc[Integer.lowestOneBit(smask)];\n                for (int ss = mask ^ 1 << i; ss > 0; ss &= ss - 1) {\n                    int j = bitLoc[Integer.lowestOneBit(ss)];\n                    if (mask == (1 << i ^ 1 << j))\n                        dp[mask][i][j] = maxDist[i][j];\n                    else {\n                        int x = 0;\n                        for (int sss = mask ^ 1 << i ^ 1 << j; sss > 0; sss &= sss - 1) {\n                            int k = bitLoc[sss & -sss];\n                            x = Math.max(x, Math.min(dp[mask ^ 1 << j][i][k], maxDist[k][j]));\n                        }\n                        dp[mask][i][j] = x;\n                    }\n                }\n            }\n        }\n        int mxMsk = (1 << N) -1;\n        int max = 0;\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < N; j++) {\n                if (i==j) continue;\n                max = Math.max(max, Math.min(dp[mxMsk][i][j], distTop[i][j]));\n            }\n        }\n        System.out.println(max);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tif(n > m)\n\t\t{\n\t\t\tint t = n;\n\t\t\tn = m;\n\t\t\tm = t;\n\t\t}\n\n\t\tint [][] curr = new int[1<<n][1<<n];\n\t\tfill(curr, oo);\n\t\tArrays.fill(curr[0], 0);\n\n\t\tfor(int j = 0 ; j < m ; j++)\n\t\t{\n\t\t\tint [][] next = new int[1<<n][1<<n];\n\t\t\tfill(next, oo);\n\t\t\tfor(int c0 = 0 ; c0 < 1<<n ; c0++)\n\t\t\t\tfor(int c1 = 0 ; c1 < 1<<n ; c1++)\n\t\t\t\t\tif(curr[c0][c1] != oo)\n\t\t\t\t\t\tfor(int c2 = 0 ; c2 < (j == m-1 ? 1 : 1<<n) ; c2++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint done = 0;\n\t\t\t\t\t\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\t\t\t\t\t\tif(((1<<i) & c1) == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tint up = i-1;\n\t\t\t\t\t\t\t\t\tint down = i+1;\n\t\t\t\t\t\t\t\t\tif(up >= 0 && ((1<<up) & c1) != 0)\n\t\t\t\t\t\t\t\t\t\tdone |= 1<<i;\n\t\t\t\t\t\t\t\t\tif(down < n && ((1<<down) & c1) != 0)\n\t\t\t\t\t\t\t\t\t\tdone |= 1<<i;\n\t\t\t\t\t\t\t\t\tif(((1<<i) & c0) != 0)\n\t\t\t\t\t\t\t\t\t\tdone |= 1<<i;\n\t\t\t\t\t\t\t\t\tif(((1<<i) & c2) != 0)\n\t\t\t\t\t\t\t\t\t\tdone |= 1<<i;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnext[c1][c2] = Math.min(next[c1][c2], curr[c0][c1] + n - Integer.bitCount(done));\n\n\t\t\t\t\t\t}\n\t\t\tcurr = next;\n\t\t}\n\n\t\tint res = oo;\n\t\tfor(int i = 0 ; i < 1<<n ; i++)\n\t\t\tfor(int j = 0 ; j < 1<<n ; j++)\n\t\t\t\tres = Math.min(res, curr[i][j]);\n\n\t\tSystem.out.println(n*m - res);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tn = in.nextInt();\n\t\tm = in.nextInt();\n\t\tif(n > m) {\n\t\t\tint tmp = n;\n\t\t\tn = m;\n\t\t\tm = tmp;\n\t\t}\n\t\ts = (1<<n);\n\t\tmemo = new int[s][s][m];\n\t\tfor(int i=0; i<s; i++)\n\t\t\tfor(int j=0; j<s; j++)\n\t\t\t\tArrays.fill(memo[i][j], -1);\n\t\tint ret = go(0,0,0);\n\t\tSystem.out.println(n*m - ret);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args){\n        new TaskC().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n\n        int height = nextInt(), width = nextInt();\n        if (width > height) {\n            int t = width;\n            width = height;\n            height = t;\n        }\n\n        final int INF = height * width + 10;\n        int[][][] dp = new int[height + 1][1 << width][1 << width];\n        for (int[][] ints : dp) {\n            for (int[] anInt : ints) {\n                Arrays.fill(anInt, INF);\n            }\n        }\n\n        dp[0][0][0] = 0;\n        for(int r = 0; r < height; ++r) {\n            for(int uncovered = 0; uncovered < (1 << width); ++uncovered) {\n                for(int mask = 0; mask < (1 << width); ++mask) {\n                    if (dp[r][uncovered][mask] == INF) {\n                        continue;\n                    }\n                    for(int curMask = uncovered; curMask < (1 << width); curMask = (curMask + 1) | uncovered) {\n                        int curUncovered = (1 << width) - 1;\n                        for(int i = 0; i < width; ++i) {\n                            if (hasBit(mask, i) || hasBit(curMask, i)) {\n                                curUncovered &= ~(1 << i);\n                            }\n                            if (i > 0 && hasBit(curMask, i-1)) {\n                                curUncovered &= ~(1 << i);\n                            }\n                            if (i < width-1 && hasBit(curMask, i+1)) {\n                                curUncovered &= ~(1 << i);\n                            }\n                        }\n                        dp[r+1][curUncovered][curMask] = Math.min(dp[r+1][curUncovered][curMask], dp[r][uncovered][mask] + Integer.bitCount(curMask));\n                    }\n                }\n            }\n        }\n\n        int res = INF;\n        for(int x: dp[height][0]) res = Math.min(res, x);\n\n        System.out.println(height * width - res);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        reader = new BufferedReader(new InputStreamReader(System.in));\n\n        int height = nextInt(), width = nextInt();\n        if (width > height) {\n            int t = width;\n            width = height;\n            height = t;\n        }\n\n        final int INF = height * width + 10;\n        final int ALL_BITS = (1 << width)  - 1;\n        int[][][] dp = new int[height + 1][1 << width][1 << width];\n        for (int[][] ints : dp) {\n            for (int[] anInt : ints) {\n                Arrays.fill(anInt, INF);\n            }\n        }\n\n        dp[0][0][0] = 0;\n        for(int r = 0; r < height; ++r) {\n            for(int uncovered = 0; uncovered < (1 << width); ++uncovered) {\n                for(int mask = 0; mask < (1 << width); ++mask) {\n                    if (dp[r][uncovered][mask] == INF) {\n                        continue;\n                    }\n                    for(int curMask = uncovered; curMask < (1 << width); curMask = (curMask + 1) | uncovered) {\n                        int curCovered = (mask | curMask);\n                        curCovered |= (curMask >> 1);\n                        curCovered |= (ALL_BITS & (curMask << 1));\n\n                        int curUncovered = ALL_BITS ^ curCovered;\n                        dp[r+1][curUncovered][curMask] = Math.min(dp[r+1][curUncovered][curMask], dp[r][uncovered][mask] + Integer.bitCount(curMask));\n                    }\n                }\n            }\n        }\n\n        int res = INF;\n        for(int x: dp[height][0]) res = Math.min(res, x);\n\n        System.out.println(height * width - res);\n    }\n", "complexity": "np"}
{"code": "      public static void main(String omkar[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int R = Integer.parseInt(st.nextToken());\n         int C = Integer.parseInt(st.nextToken());\n         if(R > C)\n         {\n            int t = R;\n            R = C;\n            C = t;\n         }\n         //dp[c][m1][m2] = min spoders in first c columns\n         int[][][] dp = new int[C+1][1 << R][1 << R];\n         for(int i=0; i <= C; i++)\n            for(int mask=0; mask < (1<<R); mask++)\n               Arrays.fill(dp[i][mask], 69);\n         for(int mask=0; mask < (1<<R); mask++)\n            dp[0][0][mask] = 0;\n         for(int c=1; c <= C; c++)\n            for(int mask1=0; mask1 < (1<<R); mask1++)\n               for(int mask2=0; mask2 < (1<<R); mask2++)\n                  for(int mask3=0; mask3 < (1<<R); mask3++)\n                  {\n                     boolean works = true;\n                     for(int b=0; b < R; b++)\n                        if((mask2&(1<<b)) == 0)\n                        {\n                           if(b > 0 && (mask2&(1<<(b-1))) > 0);\n                           else if(b+1 < R && (mask2&(1<<(b+1))) > 0);\n                           else if((mask1&(1<<b)) > 0);\n                           else if((mask3&(1<<b)) > 0);\n                           else  works = false;\n                        }\n                     if(works)\n                        dp[c][mask2][mask3] = Math.min(dp[c][mask2][mask3], dp[c-1][mask1][mask2]+Integer.bitCount(mask1));\n                  }\n         int res = 0;\n         for(int mask=0; mask < (1<<R); mask++)\n            res = Math.max(res, R*C-(dp[C][mask][0]+Integer.bitCount(mask)));\n         System.out.println(res);\n      }\n", "complexity": "np"}
{"code": "   public static void main(String[] args)\n      new E(new Scanner(System.in));\n   }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        if(n > m)\n        {\n            int t = n;\n            n = m;\n            m = t;\n        }\n\n        int [][] curr = new int[1<<n][1<<n];\n        fill(curr, oo);\n        Arrays.fill(curr[0], 0);\n\n        for(int j = 0 ; j < m ; j++)\n        {\n            int [][] next = new int[1<<n][1<<n];\n            fill(next, oo);\n            for(int c0 = 0 ; c0 < 1<<n ; c0++)\n                for(int c1 = 0 ; c1 < 1<<n ; c1++)\n                    if(curr[c0][c1] != oo)\n                        for(int c2 = 0 ; c2 < (j == m-1 ? 1 : 1<<n) ; c2++)\n                        {\n                            int all = (1<<n) - 1;\n                            int done = (all&(c1>>1)) | (all&(c1<<1)) | c0 | c2;\n                            done &= (all^c1);\n\n                            next[c1][c2] = Math.min(next[c1][c2], curr[c0][c1] + n - Integer.bitCount(done));\n\n                        }\n            curr = next;\n        }\n\n        int res = oo;\n        for(int i = 0 ; i < 1<<n ; i++)\n            for(int j = 0 ; j < 1<<n ; j++)\n                res = Math.min(res, curr[i][j]);\n\n        System.out.println(n*m - res);\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new E().run();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        new Thread(new Code()).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int x = in.nextInt();\n        int y = in.nextInt();\n        n = Math.max(x, y);\n        m = Math.min(x, y);\n        DP = new int[n][1 << m][1 << m];\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < (1 << m); j++)\n                Arrays.fill(DP[i][j], -1);\n        System.out.println(get(0, (1 << m) - 1, 0));\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE2 solver = new TaskE2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE2 solver = new TaskE2();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE2 solver = new TaskE2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new A().runIO();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        boolean local = System.getSecurityManager() == null;\n        boolean async = false;\n\n        Charset charset = Charset.forName(\"ascii\");\n\n        FastIO io = local ? new FastIO(new FileInputStream(\"D:\\\\DATABASE\\\\TESTCASE\\\\Code.in\"), System.out, charset) : new FastIO(System.in, System.out, charset);\n        Task task = new Task(io, new Debug(local));\n\n        if (async) {\n            Thread t = new Thread(null, task, \"dalt\", 1 << 27);\n            t.setPriority(Thread.MAX_PRIORITY);\n            t.start();\n            t.join();\n        } else {\n            task.run();\n        }\n\n        if (local) {\n            io.cache.append(\"\\n\\n--memory -- \\n\" + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) >> 20) + \"M\");\n        }\n\n        io.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out, false);\n        int t = scanner.nextInt();\n        while(t-->0) {\n            int n = scanner.nextInt();\n            int m = scanner.nextInt();\n            Col[] cols = new Col[m];\n            int[][] mat = new int[m][n];\n            for(int i = 0; i < n; i++) {\n                for(int j =0; j < m; j++) {\n                    mat[j][i] = scanner.nextInt();\n                }\n            }\n            for(int i = 0; i < m; i++) {\n                cols[i] = new Col(mat[i]);\n            }\n            Arrays.sort(cols);\n            int maxMask = 1 << n;\n            int[] dp = new int[maxMask];\n            Arrays.fill(dp, -1);\n            dp[0] = 0;\n            int sz = Math.min(n, m);\n            int[][] ss = new int[sz][maxMask];\n            //2^n * n^3\n            for(int i = 0; i < sz; i++) {\n                int[] curArr = cols[i].arr.clone();\n                for(int j = 0; j < n; j++) {\n                    for(int mask = 0; mask < maxMask; mask++) {\n                        int cur = 0;\n                        for(int k = 0; k < n; k++) if ((( 1 << k) & mask) > 0) cur += curArr[k];\n                        ss[i][mask] = Math.max(ss[i][mask], cur);\n                    }\n                    curArr = shift(curArr);\n                }\n            }\n            for(int i = 0; i < Math.min(n, m); i++) {\n                for(int mask = maxMask-1; mask>=0; mask--) {\n                    for(int smask = mask; smask >= 0; smask = (smask-1)&mask) {\n                        if (dp[smask] == -1) continue;\n                        dp[mask] = Math.max(dp[mask], dp[smask] + ss[i][mask ^ smask]);\n                        if (smask == 0) break;\n                    }\n                }\n            }\n            out.println(dp[maxMask-1]);\n        }\n        out.flush();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException\n        new E2().go();\n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    OutputWriter out = new OutputWriter(outputStream);\n    TaskE1 solver = new TaskE1();\n    int testCount = Integer.parseInt(in.next());\n    for (int i = 1; i <= testCount; i++) {\n      solver.solve(i, in, out);\n    }\n    out.close();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tint T = in.nextInt();\n\t\tfor (int cT = 1; cT <= T; cT++) {\n\t\t\tTask solver = new Task();\n\t\t\tsolver.solve(cT, in, out);\n\t\t}\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, null, \"BaZ\", 1 << 27) {\n            public void run() {\n                try {\n                    solve();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE2 solver = new TaskE2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E2RotateColumnsHardVersion solver = new E2RotateColumnsHardVersion();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E1RotateColumnsEasyVersion solver = new E1RotateColumnsEasyVersion();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String hi[]) throws Exception\n        BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(infile.readLine());\n        int T = Integer.parseInt(st.nextToken());\n        StringBuilder sb = new StringBuilder();\n        while(T-->0)\n        {\n            st = new StringTokenizer(infile.readLine());\n            int N = Integer.parseInt(st.nextToken());\n            int M = Integer.parseInt(st.nextToken());\n            int[][] grid = new int[N][M];\n            for(int r=0; r < N; r++)\n                grid[r] = readArr(M, infile, st);\n            ArrayList<Integer> ls = new ArrayList<Integer>();\n            for(int i=0; i < M; i++)\n                ls.add(i);\n            Collections.sort(ls, (x,y) -> {\n                int m1 = grid[0][x];\n                int m2 = grid[0][y];\n                for(int r=1; r < N; r++)\n                {\n                    m1 = max(m1, grid[r][x]);\n                    m2 = max(m2, grid[r][y]);\n                }\n                return m2-m1;\n            });\n            int[][] newgrid = new int[N][M];\n            for(int r=0; r < N; r++)\n                for(int c=0; c < M; c++)\n                    newgrid[r][c] = grid[r][ls.get(c)];\n            M = min(M, N);\n            int[][] sums = new int[M][1<<N];\n            for(int i=1; i < M; i++)\n                for(int mask=0; mask < 1<<N; mask++)\n                {\n                    //try all shifts\n                    for(int head=0; head < N; head++)\n                    {\n                        int temp = 0;\n                        for(int b=0; b < N; b++)\n                        {\n                            int nb = b+head;\n                            if(nb >= N)\n                                nb -= N;\n                            if((mask&(1<<nb)) > 0)\n                                temp += newgrid[b][i];\n                        }\n                        sums[i][mask] = max(sums[i][mask], temp);\n                    }\n                }\n            int[][] dp = new int[M][1<<N];\n            for(int mask=0; mask < 1<<N; mask++)\n                for(int b=0; b < N; b++)\n                    if((mask&(1<<b)) > 0)\n                        dp[0][mask] += newgrid[b][0];\n            for(int i=1; i < M; i++)\n                for(int mask=0; mask < 1<<N; mask++)\n                    for(int pmask=mask; pmask >= 0; pmask=(pmask-1)&mask)\n                    {\n                        dp[i][mask] = max(dp[i][mask], dp[i-1][pmask]+sums[i][mask-pmask]);\n                        if(pmask == 0)\n                            break;\n                    }\n            sb.append(dp[M-1][(1<<N)-1]+\"\\n\");\n        }\n        System.out.print(sb);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception { new E4().run(); }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception{\n\t\tpw=new PrintWriter(System.out);\n\t\tsc = new MScanner(System.in);\n\t\tint tc=sc.nextInt();\n\t\twhile(tc-->0) {\n\t\t\tn=sc.nextInt();m=sc.nextInt();\n\t\t\t\n\t\t\tint[]maxInCol=new int[m];\n\t\t\tin=new int[m][n+1];\n\t\t\t\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tfor(int j=0;j<m;j++) {\n\t\t\t\t\tin[j][i]=sc.nextInt();\n\t\t\t\t\tmaxInCol[j]=Math.max(maxInCol[j], in[j][i]);\n\t\t\t\t\tin[j][n]=j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrays.sort(in,(x,y)->maxInCol[y[n]]-maxInCol[x[n]]);\n\t\t\t\n\t\t\t\n\t\t\tmemo=new int[n][1<<n];\n\t\t\tsumOfMask=new int[n][1<<n];\n\t\t\tmaxMask=new int[n][1<<n];\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tfor(int msk=0;msk<memo[i].length;msk++) {\n\t\t\t\t\tmemo[i][msk]=-1;\n\t\t\t\t\tif(i>=m)continue;\n\t\t\t\t\tfor(int bit=0;bit<n;bit++) {\n\t\t\t\t\t\tif(((msk>>bit)&1)!=0) {\n\t\t\t\t\t\t\tsumOfMask[i][msk]+=in[i][bit];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int col=0;col<n;col++) {\n\t\t\t\tfor(int msk=0;msk<(1<<n);msk++) {\n\t\t\t\t\tint curMask=msk;\n\t\t\t\t\tfor(int cyclicShift=0;cyclicShift<n;cyclicShift++) {\n\t\t\t\t\t\tmaxMask[col][msk]=Math.max(maxMask[col][msk], sumOfMask[col][curMask]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tint lastBit=curMask&1;\n\t\t\t\t\t\tcurMask>>=1;\n\t\t\t\t\t\tcurMask|=(lastBit<<(n-1));\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpw.println(dp(0, 0));\n\t\t}\n\t\t\n\t\t\n\t\tpw.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E2RotateColumnsHardVersion solver = new E2RotateColumnsHardVersion();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, new Runnable() {\n            public void run() {\n                new Main().solve();\n            }\n        }, \"1\", 1 << 26).start();\n    }\n", "complexity": "np"}
{"code": "  public static void main(String[] args) {\n    Test te = new Test();\n    te.start();\n    writer.flush();\n  }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tArrayList<Integer>[][] nexts = new ArrayList[13][];\t\t\n\t\tArrayList<Integer>[] bs = new ArrayList[13];\n\t\tint[][] index = new int[13][];\n\t\tint[][] eqcl = new int[13][];\n\t\tfor(int n = 1; n <= 12; n++) {\n\t\t\teqcl[n] = new int[(1 << n)];\n\t\t\tbs[n] = new ArrayList<Integer>();\n\t\t\tindex[n] = new int[(1 << n)];\n\t\t\tint ind = 0;\n\t\t\tfor(int mask = 0; mask < (1 << n); mask++) {\n\t\t\t\tboolean add = true;\n\t\t\t\tfor(int k = 0; k < n; k++) {\n\t\t\t\t\tif(rot(mask, k, n) < mask) add = false;\n\t\t\t\t}\n\t\t\t\tif(add) {\n\t\t\t\t\tbs[n].add(mask);\n\t\t\t\t\tindex[n][mask] = ind; ind++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnexts[n] = new ArrayList[bs[n].size()];\n\t\t\tfor(int i = 0; i < bs[n].size(); i++) {\n\t\t\t\tint mask = bs[n].get(i);\n\t\t\t\tfor(int k = 0; k < n; k++) {\n\t\t\t\t\teqcl[n][rot(mask, k, n)] = mask;\n\t\t\t\t}\n\t\t\t\tnexts[n][i] = new ArrayList<>();\n\t\t\t\tfor(int y = 0; y < (1 << n); y++) {\n\t\t\t\t\tif((mask & y) == 0) {\n\t\t\t\t\t\tnexts[n][i].add(y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\tfor(int test = 0; test < T; test++) {\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tint n = Integer.parseInt(st.nextToken());\n\t\t\tint m = Integer.parseInt(st.nextToken());\n\t\t\tint[][] arrt = new int[m][n];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\t\tarrt[j][i] = Integer.parseInt(st.nextToken());\n\t\t\t\t}\n\t\t\t}\n\t\t\tColumn[] cols = new Column[m];\n\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\tcols[j] = new Column(arrt[j]);\n\t\t\t}\n\t\t\tArrays.sort(cols, Collections.reverseOrder());\n\t\t\tm = Integer.min(n, m);\n\t\t\tint[][] arr = new int[n][m];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\t\tarr[i][j] = cols[j].arr[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[][] max = new int[m][bs[n].size()];\n\t\t\tfor(int c = 0; c < m; c++) {\n\t\t\t\tfor(int mask = 0; mask < (1 << n); mask++) {\n\t\t\t\t\tint curr = 0;\n\t\t\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\t\t\tif((mask & (1 << i)) > 0) curr += arr[i][c];\n\t\t\t\t\t}\n\t\t\t\t\tint cl = eqcl[n][mask];\n\t\t\t\t\tmax[c][index[n][cl]] = Integer.max(max[c][index[n][cl]], curr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[][] dp = new int[m+1][bs[n].size()];\n\t\t\tfor(int c = 0; c < m; c++) {\n\t\t\t\tfor(int i = 0; i < bs[n].size(); i++) {\n\t\t\t\t\tint mask = bs[n].get(i);\n\t\t\t\t\tfor(int next: nexts[n][i]) {\n\t\t\t\t\t\tint cl = eqcl[n][next];\n\t\t\t\t\t\tint dl = eqcl[n][mask | next];\n\t\t\t\t\t\tif(dp[c][i] + max[c][index[n][cl]] > dp[c+1][index[n][dl]]) {\n\t\t\t\t\t\t\tdp[c+1][index[n][dl]] = dp[c][i] + max[c][index[n][cl]]; \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbw.write(dp[m][bs[n].size() - 1]+\"\\n\");\n\t\t}\n\t\tbw.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception { new E5().run(); }\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception { new E4().run(); }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastReader in = new FastReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        E2RotateColumnsHardVersion solver = new E2RotateColumnsHardVersion();\n        int testCount = Integer.parseInt(in.next());\n        for (int i = 1; i <= testCount; i++)\n            solver.solve(i, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\n\t\t//optimizaciones que parece que solo son necesarias para java\n\t\tArrayList<Integer>[] reps = new ArrayList[13]; //representantes de las clases\n\t\tint[][] index = new int[13][]; // mapea para cada representante un indice de 0 a |clases|-1\n\t\tint[][] eqcl = new int[13][]; //mapea para cada mask, su clase\n\t\tArrayList<Integer>[][] nexts = new ArrayList[13][];\t//para cada clase, los masks compatibles\n\t\tfor(int n = 1; n <= 12; n++) {\n\t\t\teqcl[n] = new int[(1 << n)];\n\t\t\treps[n] = new ArrayList<Integer>();\n\t\t\tindex[n] = new int[(1 << n)];\n\t\t\tint ind = 0;\n\t\t\tfor(int mask = 0; mask < (1 << n); mask++) {\n\t\t\t\tboolean add = true;\n\t\t\t\tfor(int k = 0; k < n; k++) {\n\t\t\t\t\tif(rot(mask, k, n) < mask) add = false;\n\t\t\t\t}\n\t\t\t\tif(add) {\n\t\t\t\t\treps[n].add(mask);\n\t\t\t\t\tindex[n][mask] = ind; ind++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnexts[n] = new ArrayList[reps[n].size()];\n\t\t\tfor(int i = 0; i < reps[n].size(); i++) {\n\t\t\t\tint mask = reps[n].get(i);\n\t\t\t\tfor(int k = 0; k < n; k++) {\n\t\t\t\t\teqcl[n][rot(mask, k, n)] = i;\n\t\t\t\t}\n\t\t\t\tnexts[n][i] = new ArrayList<>();\n\t\t\t\tfor(int y = 0; y < (1 << n); y++) {\n\t\t\t\t\tif((mask & y) == 0) {\n\t\t\t\t\t\tnexts[n][i].add(y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\tfor(int test = 0; test < T; test++) {\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tint n = Integer.parseInt(st.nextToken());\n\t\t\tint m = Integer.parseInt(st.nextToken());\n\t\t\tint[][] arrt = new int[m][n];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\t\tarrt[j][i] = Integer.parseInt(st.nextToken());\n\t\t\t\t}\n\t\t\t}\n\t\t\tColumn[] cols = new Column[m];\n\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\tcols[j] = new Column(arrt[j]);\n\t\t\t}\n\t\t\tArrays.sort(cols, Collections.reverseOrder());\n\t\t\tm = Integer.min(n, m);\n\t\t\tint[][] arr = new int[n][m];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tfor(int j = 0; j < m; j++) {\n\t\t\t\t\tarr[i][j] = cols[j].arr[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[][] max = new int[m][reps[n].size()];\n\t\t\tfor(int c = 0; c < m; c++) {\n\t\t\t\tfor(int mask = 0; mask < (1 << n); mask++) {\n\t\t\t\t\tint curr = 0;\n\t\t\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\t\t\tif((mask & (1 << i)) > 0) curr += arr[i][c];\n\t\t\t\t\t}\n\t\t\t\t\tint cl = eqcl[n][mask];\n\t\t\t\t\tmax[c][cl] = Integer.max(max[c][cl], curr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[][] dp = new int[m+1][reps[n].size()];\n\t\t\tfor(int c = 0; c < m; c++) {\n\t\t\t\tfor(int i = 0; i < reps[n].size(); i++) {\n\t\t\t\t\tint mask = reps[n].get(i);\n\t\t\t\t\tfor(int next: nexts[n][i]) { //opt\n\t\t\t\t\t\tint cl = eqcl[n][next];\n\t\t\t\t\t\tint dl = eqcl[n][mask | next];\n\t\t\t\t\t\tif(dp[c][i] + max[c][cl] > dp[c+1][dl]) { // el dp\n\t\t\t\t\t\t\tdp[c+1][dl] = dp[c][i] + max[c][cl]; \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbw.write(dp[m][reps[n].size() - 1]+\"\\n\");\n\t\t}\n\t\tbw.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args){\n\t\tJS scan = new JS();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint t = scan.nextInt();\n\t\tlong start = System.currentTimeMillis();\n\t\tfor(int q = 1; q <= t; q++){\n\t\t\tn = scan.nextInt();\n\t\t\tm = scan.nextInt();\n\t\t\t// n = 12;\n\t\t\t// m = 20000;\n\t\t\tmat = new int[n][m];\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\tmat[i][j] = scan.nextInt();\n\t\t\t\t\t// mat[i][j] = 100000;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[] max = new int[m];\n\t\t\tPriorityQueue<Item> pq = new PriorityQueue<Item>();\n\t\t\tfor(int i = 0; i < m; i++){\n\t\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\t\tmax[i] = max(max[i], mat[j][i]);\n\t\t\t\t}\n\t\t\t\tpq.add(new Item(i, max[i]));\n\t\t\t}\n\t\t\tArrayList<Item> guys = new ArrayList<Item>();\n\t\t\twhile(!pq.isEmpty() && guys.size() < n){\n\t\t\t\tItem tt = pq.poll();\n\t\t\t\tguys.add(tt);\n\t\t\t}\n\n\t\t\tint[][] cost = new int[guys.size()][1 << n];\n\t\t\t// long time = System.currentTimeMillis();\n\t\t\tfor(int i = 0; i < guys.size(); i++){\n\t\t\t\tint g = guys.get(i).a;\n\t\t\t\tfor(int s = 0; s < n; s++){\n\t\t\t\t\tfor(int j = 0; j < (1 << n); j++){\n\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\t\t\tif((j & (1 << k)) > 0){\n\t\t\t\t\t\t\t\tsum += mat[(k+s)%n][g];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcost[i][j] = max(cost[i][j], sum);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// for(int i = 0; i < guys.size(); i++) System.out.println(Arrays.toString(cost[i]));\n\n\t\t\t// System.out.println(System.currentTimeMillis()-time);\n\t\t\tint full = (1 << n)-1;\n\t\t\t// time = System.currentTimeMillis();\n\t\t\tint[][] dp = new int[guys.size()+1][1 << n];\n\t\t\tint ans = 0;\n\n\t\t\t\n\t\n\t\t\tfor(int c = 0; c < guys.size(); c++){\n\t\t\t\t\tfor(int j = 0; j < (1 << n); j++){\n\t\t\t\t\t\tfor(int i = j; i < (1 << n); i = (i+1)|j){\n\t\t\t\t\t\t\tdp[c+1][i] = \n\t\t\t\t\t\t\t\tmax(dp[c+1][i], cost[c][j]+dp[c][i^j]);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tans = max(ans, dp[c+1][i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t// for(int i = 0; i < dp.length; i++) System.out.println(Arrays.toString(dp[i]));\n\t\t\t// System.out.println(System.currentTimeMillis()-time);\n\n\t\t\tout.println(ans);\n\t\t}\n\t\t// System.out.println(System.currentTimeMillis()-start);\n\t\tout.flush();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastReader in = new FastReader(System.in);\n//        FastReader in = new FastReader(new FileInputStream(\"input.txt\"));\n        PrintWriter out = new PrintWriter(System.out);\n//        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n\n\n        int t = in.nextInt();\n\n        while (t-- > 0) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n\n            int[][] a = new int[n + 1][m];\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    a[i][j] = in.nextInt();\n                    a[n][j] = Math.max(a[n][j], a[i][j]);\n                }\n            }\n\n            a = transpose(a, n, m);\n\n            Arrays.sort(a, new Comparator<int[]>() {\n                @Override\n                public int compare(int[] o1, int[] o2) {\n                    int max1 = 0;\n                    for (int i = 0; i < o1.length; i++) {\n                        max1 = Math.max(max1, o1[i]);\n                    }\n\n                    int max2 = 0;\n                    for (int i = 0; i < o2.length; i++) {\n                        max2 = Math.max(max2, o2[i]);\n                    }\n\n                    return max2 - max1;\n                }\n            });\n\n            a = transpose(a, m, n);\n\n            int[] dp = new int[1 << n];\n\n            for (int i = 0; i < Math.min(n, m); i++) {\n                int[] best = new int[1 << n];\n\n                for (int j = 1; j < (1 << n); j++) {\n                    for (int k = 0; k < n; k++) {\n                        int sum = 0;\n                        for (int l = 0; l < n; l++) {\n                            if ((j & (1 << l)) != 0)\n                                sum += a[(l + k) % n][i];\n                        }\n                        best[j] = Math.max(best[j], sum);\n                    }\n                }\n\n                int[] dp1 = dp.clone();\n\n                for (int j = 0; j < (1 << n); j++) {\n                    for (int k = j; k > 0; k = (k - 1) & j) {\n                        dp[j] = Math.max(dp[j], dp1[k ^ j] + best[k]);\n                    }\n                }\n            }\n\n            out.println(dp[(1 << n) - 1]);\n        }\n\n\n\n\n\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE2 solver = new TaskE2();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException{\n\t\tFastIO sc = new FastIO(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint num[][] = new int[m][m];\n\t\tString str = sc.next();\n\t\tfor(int i=0; i<str.length()-1; i++) {\n\t\t\tint a = str.charAt(i)-'a';\n\t\t\tint b = str.charAt(i+1)-'a';\n\t\t\tnum[a][b]++;\n\t\t\tnum[b][a]++;\n\t\t}\n\t\tint lowbit[] = new int[MXN];\n\t\tint dp[] = new int[MXN];\n\t\tfor(int i=0; i<MXN; i++) {\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[0] = 0;\n\t\tgood = new int[MXN][m];\n\t\tfor(int msk = 0; msk<(1<<m); msk++) {\n\t\t\tfor(int i=0; i<m; i++) {\n\t\t\t\tint low = Integer.numberOfTrailingZeros(Integer.lowestOneBit(msk));\n\t\t\t\tif(low==32) low = 0;\n\t\t\t\tgood[msk][i] = good[msk^(1<<low)][i] + num[i][low];\n\t\t\t}\n\t\t}\n\t\tfor(int msk = 0; msk<(1<<m); msk++) {\n\t\t\tint bits = Integer.bitCount(msk)+1;\n\t\t\tfor(int i=0; i<m; i++) {\n\t\t\t\tif((msk&(1<<i))!=0) continue;\n\t\t\t\tint nxt = msk|(1<<i);\n\t\t\t\tdp[nxt] = Math.min(dp[nxt], dp[msk] + bits*(good[msk][i]-good[((1<<m)-1)^nxt][i]));\n\t\t\t}\n\t\t}\n\t\tout.println(dp[(1<<m)-1]);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ScanReader in = new ScanReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        EKeyboardPurchase solver = new EKeyboardPurchase();\n        solver.solve(1, in, out);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "      public static void main(String omkar[]) throws Exception\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \n         StringTokenizer st = new StringTokenizer(infile.readLine());\n         int N = Integer.parseInt(st.nextToken());\n         int M = Integer.parseInt(st.nextToken());\n         String input = infile.readLine();\n         int[][] cnt = new int[M][M];\n         for(int i=0; i < N-1; i++)\n         if(input.charAt(i) != input.charAt(i+1))\n            {\n               cnt[input.charAt(i)-'a'][input.charAt(i+1)-'a']++;\n               cnt[input.charAt(i+1)-'a'][input.charAt(i)-'a']++;\n            }\n         int[] dp = new int[1 << M];\n         Arrays.fill(dp, Integer.MAX_VALUE);\n         dp[0] = 0;\n         for(int mask=0; mask < dp.length; mask++)\n            for(int b=0; b < M; b++)\n               if((mask&(1<<b)) == 0)\n               {\n                  int submask = mask|(1<<b);\n                  int cost = 0;\n                  for(int c=0; c < M; c++)\n                  {\n                     if((mask&(1<<c)) > 0)\n                        cost += cnt[b][c];\n                     else\n                        cost -= cnt[b][c];\n                  }\n                  dp[submask] = Math.min(dp[submask], dp[mask]+cost*Integer.bitCount(mask));\n               }\n         System.out.println(dp[(1<<M)-1]);\n      }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        new Thread(null, null, \"BaZ\", 1 << 27) {\n            public void run() {\n                try {\n                    solve();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n        }.start();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        boolean local = System.getSecurityManager() == null;\n        boolean async = false;\n\n        Charset charset = Charset.forName(\"ascii\");\n\n        FastIO io = local ? new FastIO(new FileInputStream(\"D:\\\\DATABASE\\\\TESTCASE\\\\Code.in\"), System.out, charset) : new FastIO(System.in, System.out, charset);\n        Task task = new Task(io, new Debug(local));\n\n        if (async) {\n            Thread t = new Thread(null, task, \"dalt\", 1 << 27);\n            t.setPriority(Thread.MAX_PRIORITY);\n            t.start();\n            t.join();\n        } else {\n            task.run();\n        }\n\n        if (local) {\n            io.cache.append(\"\\n\\n--memory -- \\n\" + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) >> 20) + \"M\");\n        }\n\n        io.flush();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tThread thread = new Thread(null, new TaskAdapter(), \"\", 1<<28);\n\t\tthread.start();\n\t\tthread.join();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        n = in.nextInt();\n        m = in.nextInt();\n        s = in.next().toCharArray();\n        g = new int[m][m];\n        for (int i = 1; i < n; i++) {\n            int x = s[i - 1] - 'a', y = s[i] - 'a';\n            if (x != y) {\n                g[x][y]++;\n                g[y][x]++;\n            }\n        }\n        cost = new int[m][1 << m];\n        for (int i = 0; i < m; i++) {\n            int w = 0;\n            for (int j = 0; j < m; j++) w += g[i][j];\n            pre(i, 0, 0, -w);\n        }\n        dp = new int[1 << m];\n        Arrays.fill(dp, -1);\n        pw.println(solve(0, 0));\n\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] omkar) throws Exception{\n\t\t// TODO Auto-generated method stub\n \t\tsc = new MyScanner();\n \t\tout = new PrintWriter(System.out);\n \t\t\n\t \tint n = sc.nextInt();\n\t \tint m = sc.nextInt();\n\t \tint[][]cnt = new int[m][m];\n\t \tString s = sc.next();\n\t \tfor(int j =0;j<n-1;j++){\n\t \t\tif (s.charAt(j) != s.charAt(j+1)){\n\t \t\tcnt[s.charAt(j)-'a'][s.charAt(j+1)-'a']++;\n\t \t\tcnt[s.charAt(j+1)-'a'][s.charAt(j)-'a']++;\n\t \t\t}\n\t \t}\n\t \tint[] st = new int[m+1];\n\t \tfor(int j = 0;j<=m;j++){\n\t \t\tst[j] = (1<<j);\n\t \t}\n\t \tint[][] arr = new int[m][1<<m];\n\t \tfor(int j = 0;j<m;j++){\n\t \t\tfor(int k = 1;k<(1<<m);k++){\n\t \t\t\tint z = Integer.lowestOneBit(k);\n\t \t\t\tint count = 0;\n\t \t\t\twhile(z!=0 && z%2==0){\n\t \t\t\t\tz/=2;\n\t \t\t\t\tcount++;\n\t \t\t\t}\n\t \t\t\tarr[j][k] = arr[j][k^(Integer.lowestOneBit(k))] + cnt[j][count];\n\t \t\t}\n\t \t}\n\t \tint[] dp = new int[1<<m];\n\t \tArrays.fill(dp,  Integer.MAX_VALUE);\n\t \tdp[0] = 0;\n\t \tfor(int j = 1;j<st[m];j++){\n\t \t\t\n\t \t\tfor(int k = 0;k<m;k++){\n\t \t\t\tint y = st[k];\n\t \t\t\tif ((y&j) != 0){\n\t \t\t\t\tint sum = 2*arr[k][j] - arr[k][(1<<m)-1];\n//\t \t\t\t\tfor(int t = 0;t<m;t++){\n//\t \t\t\t\t\tif (t!= k){\n//\t\t \t\t\t\t\tif ((st[t]&j) != 0)\n//\t\t \t\t\t\t\t\tsum+=cnt[t][k];\n//\t\t \t\t\t\t\telse\n//\t\t \t\t\t\t\t\tsum-=cnt[t][k];\n//\t \t\t\t\t\t}\n//\t \t\t\t\t}\n\t \t\t\t\tdp[j] = Math.min(dp[j],  dp[y^j]+sum*Integer.bitCount(j));\n\t \t\t\t}\n\t \t\t}\n\t \t}\n\t \tout.println(dp[(1<<m)-1]);\n \t\tout.close();\t\n \t}\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        PrintWriter out = new PrintWriter(System.out);\n        Reader in = new Reader();\n        Main solver = new Main();\n        solver.solve(out, in);\n        out.flush();\n        out.close();\n \n    }\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out, false);\n        int N = in.nextInt(), M = in.nextInt();\n        String str = in.next();\n        int[][] count = new int[M][M];\n        for (int i = 1; i < N; i++) {\n            char c1 = str.charAt(i - 1), c2 = str.charAt(i);\n            count[c1 - 'a'][c2 - 'a']++;\n            count[c2 - 'a'][c1 - 'a']++;\n        }\n        int[] dp = new int[(1 << M)];\n        Arrays.fill(dp, INF);\n        dp[0] = 0;\n        for (int mask = 1; mask < (1 << M); mask++) {\n            int slow = 0;\n            for (int i = 0; i < M; i++) {\n                if ((mask & (1 << i)) != 0) {\n                    for (int j = 0; j < M; j++) {\n                        if ((mask & (1 << j)) == 0) {\n                            slow += count[i][j];\n                        }\n                    }\n                }\n            }\n            for (int i = 0; i < M; i++) {\n                if ((mask & (1 << i)) != 0) {\n                    dp[mask] = Math.min(dp[mask], slow + dp[mask ^ (1 << i)]);\n                }\n            }\n        }\n        out.println(dp[(1 << M) - 1]);\n        out.close();\n        System.exit(0);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\t\n\t\tString s = in.next();\n\t\t\n\t\tint[][] count = new int[m][m];\n\t\tint[] dp = new int[1 << m];\n\t\t\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\n\t\tdp[0] = 0;\n\t\t\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tint a = s.charAt(i)-'a';\n\t\t\tint b = s.charAt(i-1)-'a';\n\t\t\tcount[a][b]++;\n\t\t\tcount[b][a]++;\n\t\t}\n\t\t\n\t\tfor(int i = 1; i < (1 << m); i++) {\n\t\t\t\n\t\t\tint pos = set_bits(i);\n\t\t\t\n\t\t\tfor(int j = 0; (i >> j) != 0; j++) {\n\t\t\t\t\n\t\t\t\tif(((i >> j) & 1) == 0) continue;\n\t\t\t\t\n\t\t\t\tint sum = 0;\n\t\t\t\t\n\t\t\t\tfor(int mask = i, y = 0; y < m; mask >>= 1, y++) {\n\t\t\t\t\tif(y == j) continue;\n\t\t\t\t\tif((mask & 1) == 1) sum += count[j][y];\n\t\t\t\t\telse sum -= count[j][y];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint calc = dp[i-(1<<j)] + pos*sum;\n\t\t\t\t\n\t\t\t\tdp[i] = Math.min(dp[i], calc);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(dp[(1 << m)-1]);\n\t\t\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException {\n\t    input = new DataReader();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint N = nextInt(), M = nextInt(), P = 1<<M;\n\t\tString x = nextStr();\n\t\tint c1 = x.charAt(0) - 'a';\n\t\tint[][] pair_count = new int[M][M];\n\t\tfor (int i=1; i<N; i++) {\n\t\t\tint c2 = x.charAt(i) - 'a';\n\t\t\tif (c1 < c2) \n\t\t\t\tpair_count[c1][c2]++;\n\t\t\telse if (c1 > c2)\n\t\t\t\tpair_count[c2][c1]++;\n\t\t\tc1 = c2;\n\t\t}\n\t\tint[] group_count = new int[P];\n\t\tfor (int mask = 1; mask <P; mask++) {\n\t\t\tint j;\n\t\t\tfor (j=0; j<M; j++) {\n\t\t\t\tif ((mask & BM[j]) > 0)  break;\n\t\t\t}\n\t\t\tint nmask = mask ^ BM[j];\n\t\t\tint val = group_count[nmask];\n\t\t\tfor (int i=0; i<j; i++) {\n\t\t\t\tif ((mask & BM[i]) > 0)  val -= pair_count[i][j];\n\t\t\t\telse                   val += pair_count[i][j];\n\t\t\t}\n\t\t\tfor (int i=j+1; i<M; i++) {\n\t\t\t\tif ((mask & BM[i]) > 0)  val -= pair_count[j][i];\n\t\t\t\telse                   val += pair_count[j][i];\n\t\t\t}\n\t\t\tgroup_count[mask] = val;\n\t\t}\n\t\t// dp[k][mask] = Accumulated cost of first K positions filled, mask position 1 letters are used\n\t\t// dp[0][0] = 0;\n\t\tint[][] dp = new int[M+1][P];\t   // \n\t\tfor (int mask=1; mask<P; mask++) {  // each bit mask\n\t\t\tdp[0][mask] = 0;\n\t\t\tint k = Integer.bitCount(mask);  // computing first k position filled.\n\t\t\tint val = LARGE_INT;\n\t\t\tfor (int j=0; j<M; j++) {\n\t\t\t\tif ((mask & BM[j]) > 0) {\n\t\t\t\t\tint nmask = mask ^ BM[j];\n\t\t\t\t\tval = Math.min(val, dp[k-1][nmask] + group_count[nmask]);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\tdp[k][mask] = val;\n\t\t}\n\t\t//out.println(Arrays.deepToString(dp));\n\t\tout.println(dp[M][P-1]);\n\t\tout.flush();\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        FastScanner scanner = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out, false);\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        char[] str = scanner.next().toCharArray();\n        int maxMask = 1 << m;\n        long[] dp = new long[maxMask];\n        int[][] dists = new int[m][m];\n        for(int i = 1; i < n; i++) {\n            int c1 = str[i] - 'a';\n            int c2 = str[i-1] - 'a';\n            dists[c1][c2]++;\n            dists[c2][c1]++;\n        }\n        int[] pre = new int[maxMask];\n        for(int mask = 0; mask < maxMask; mask++) {\n            for(int i = 0; i < m; i++) {\n                if (((1 << i) & mask) == 0) continue;\n                for(int j = 0; j < m; j++) {\n                    if (((1 << j) & mask) > 0) continue;\n                    pre[mask] += dists[i][j];\n                }\n            }\n        }\n        Arrays.fill(dp, Long.MAX_VALUE/4);\n        dp[0] = 0;\n        for(int mask = 0; mask < maxMask; mask++) {\n            if (dp[mask] == Long.MAX_VALUE/4) continue;\n            for(int i = 0; i < m; i++) {\n                if (((1 << i) & mask) > 0) continue;\n                int nmask = mask | (1 << i);\n                dp[nmask] = Math.min(dp[nmask], dp[mask] + pre[nmask]);\n            }\n        }\n        out.println(dp[maxMask - 1]);\n        out.flush();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws IOException\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] $) {\n\t\tCF1238E o = new CF1238E(); o.main(); o.flush();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) throws Exception {\n\t\tFastScanner sc = new FastScanner(System.in);\n\t\tFastPrinter out = new FastPrinter(System.out);\n\t\tE runner = new E();\n\t\trunner.run(sc, out);\n\t\tout.close();\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[])\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt(),m=sc.nextInt();int g[]=new int[1<<m];\n\t\tStringBuffer s=new StringBuffer(sc.next());\n\t\ts=s.insert(0, 'A');\n\t\tint D=(1<<m)-1;\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint x=s.charAt(i)-'a',y=s.charAt(i+1)-'a';\n\t\t\tif(x!=y)\n\t\t\t\tg[1<<x|1<<y]++;\n\t\t}\n\t\tfor(int j=0;j<m;j++)\n\t\t\tfor(int i=0;i<=D;i++)\n\t\t\t\tif((i>>j&1)!=0)\n\t\t\t\t\tg[i]+=g[i^1<<j];\n\t\tint f[]=new int[1<<m];\n\t\tArrays.fill(f, Integer.MAX_VALUE/2);\n\t\tf[0]=0;\n\t\tfor(int i=0;i<=D;i++)\n\t\t\tfor(int j=0;j<m;j++)\n\t\t\t\tif((i>>j&1)==0)\n\t\t\t\t\tf[i|1<<j]=Math.min(f[i|1<<j], f[i]+g[D]-g[i]-g[D^i]);\n\t\tSystem.out.println(f[D]);\n\t}\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\t\n\t\tString s = in.next();\n\t\t\n\t\tint[][] count = new int[m][m];\n\t\tint[] dp = new int[1 << m];\n\t\t\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\n\t\tdp[0] = 0;\n\t\t\n\t\tfor(int i = 1; i < n; i++) {\n\t\t\tint a = s.charAt(i)-'a';\n\t\t\tint b = s.charAt(i-1)-'a';\n\t\t\tcount[a][b]++;\n\t\t\tcount[b][a]++;\n\t\t}\n\t\t\n\t\tfor(int i = 1; i < (1 << m); i++) {\n\t\t\t\n\t\t\tint pos = set_bits(i);\n\t\t\t\n\t\t\tfor(int j = 0; (i >> j) != 0; j++) {\n\t\t\t\t\n\t\t\t\tif(((i >> j) & 1) == 0) continue;\n\t\t\t\t\n\t\t\t\tint sum = 0;\n\t\t\t\t\n\t\t\t\tfor(int mask = i, y = 0; y < m; mask >>= 1, y++) {\n\t\t\t\t\tif(y == j) continue;\n\t\t\t\t\tif((mask & 1) == 1) sum += count[j][y];\n\t\t\t\t\telse sum -= count[j][y];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint calc = dp[i-(1<<j)] + pos*sum;\n\t\t\t\t\n\t\t\t\tdp[i] = Math.min(dp[i], calc);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(dp[(1 << m)-1]);\n\t\t\n\t}\n", "complexity": "np"}
{"code": " \tpublic static void main(String[] args){\n\t\tFastScanner scanner = new FastScanner();\n\t\tint n = scanner.nextInt();\n\t\tint m = scanner.nextInt();\n\t\tString s = scanner.next();\n\t\tint[][] cnt = new int[20][20];\n\t\tfor(int i = 0; i < n-1; i++){\n\t\t\tcnt[s.charAt(i)-'a'][s.charAt(i+1)-'a']++;\n\t\t\tcnt[s.charAt(i+1)-'a'][s.charAt(i)-'a']++;\n\t\t}\n\t\t//dp[i]:= 文字列i(この中に同一文字は含まれない)を作った時のコストの最小値\n\t\tint[] dp = new int[(1<<m)];\n\t\tfor(int i = 0; i < (1<<m); i++){\n\t\t\tdp[i] = INF;\n\t\t}\n\t\tdp[0] = 0;\n\t\tfor(int i = 0; i < (1<<m); i++){\n\t\t\tint cost = 0;\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif((i>>j & 1) == 0){\n\t\t\t\t\tfor(int k = 0; k < m; k++){\n\t\t\t\t\t\tif((~i>>k & 1) == 0){\n\t\t\t\t\t\t\tcost += cnt[j][k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tdp[i|1<<j] = Math.min(dp[i|1<<j],dp[i]+cost);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[(1<<m)-1]);\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        int n = sc.nextInt(); int m = sc.nextInt();\n        String s = sc.next();\n        long time = System.currentTimeMillis();\n        int [][] a = new int[m][m];\n        int [][] pre = new int[m][(1 << m)];\n        for (int i = 0; i < n - 1; i++) {\n            if (s.charAt(i) == s.charAt(i + 1)) continue;\n            a[s.charAt(i) - 'a'][s.charAt(i + 1) - 'a']++;\n            a[s.charAt(i + 1) - 'a'][s.charAt(i) - 'a']++;\n        }\n        //System.out.println(\"Process Input: \" + (System.currentTimeMillis() - time));\n        for (int i = 0; i < m; i++) {\n            int b = 0; int stor = 2;\n            for (int j = 1; j < (1 << m); j++) {\n                if (j == stor) {\n                    b++;\n                    stor = (1 << (b + 1));\n                }\n                pre[i][j] = pre[i][j ^ (1 << b)] + a[i][b];\n            }\n        }\n        //System.out.println(\"Precomp: \" + (System.currentTimeMillis() - time));\n        long [] dp = new long[1 << m];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for (int mask = 1; mask < (1 << m); mask++) {\n            // loop on the last added character in the mask\n            for (int i = 0; i < m; i++) {\n                if (((mask >> i) & 1) == 0) continue;\n                long prev = dp[mask ^ (1 << i)];\n                long contribution = (pre[i][mask] - pre[i][((1 << m) - 1) ^ mask]) * Integer.bitCount(mask);\n                dp[mask] = Math.min(dp[mask], prev + contribution);\n            }\n        }\n        //System.out.println(\"Done: \" + (System.currentTimeMillis() - time));\n        out.println(dp[(1 << m) - 1]);\n        out.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[]) {\t\t    \t\n\t   \tInVoker g=new InVoker();\n\t   \tg.main();\n\t   \tout.close();\n\t}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        Reader.init(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        Main mm =new Main();\n        int n=Reader.nextInt();\n        int m=Reader.nextInt();\n        String s=Reader.next();\n        int[][] count=new int[m][m];\n        for(int i=1;i<n;i++) {\n            count[s.charAt(i)-'a'][s.charAt(i-1)-'a']++;\n            count[s.charAt(i-1)-'a'][s.charAt(i)-'a']++;\n        }\n        int[] dp=new int[1<<m];\n        Arrays.fill(dp, Integer.MAX_VALUE/10);\n        for(int i=0;i<m;i++) {\n            dp[1<<i]=0;\n        }\n        for(int i=0;i<(1<<m);i++) {\n            int extra=0;\n            for(int j=0;j<m;j++) {\n                if((i&(1<<j))>0) {\n                for(int k=0;k<m;k++) {\n                    if(j!=k &&  (i&(1<<k))==0) {\n                        extra+=count[j][k];\n                    }\n                }\n               }\n            }\n            for(int j=0;j<m;j++) {\n                if((i&(1<<j))==0) {\n                    dp[i|(1<<j)]=Math.min(dp[i|(1<<j)], dp[i]+extra);\n                }\n            }\n        }\n        out.println(dp[(1<<m)-1]);\n        out.close();\n}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        n = in.nextInt();\n        m = in.nextInt();\n        s = in.next().toCharArray();\n        g = new int[m][m];\n        for (int i = 1; i < n; i++) {\n            int x = s[i - 1] - 'a', y = s[i] - 'a';\n            if (x != y) {\n                g[x][y]++;\n                g[y][x]++;\n            }\n        }\n        dp = new int[1 << m];\n        Arrays.fill(dp, -1);\n        pw.println(solve(0, 0));\n\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception {\n        InputReader in = new InputReader(System.in);\n        PrintWriter pw = new PrintWriter(System.out);\n        n = in.nextInt();\n        m = in.nextInt();\n        s = in.next().toCharArray();\n        g = new int[m][m];\n        for (int i = 1; i < n; i++) {\n            int x = s[i - 1] - 'a', y = s[i] - 'a';\n            if (x != y) {\n                g[x][y]++;\n                g[y][x]++;\n            }\n        }\n        cost = new int[m][1 << m];\n        for (int i = 0; i < m; i++) {\n            int w = 0;\n            for (int j = 0; j < m; j++) w += g[i][j];\n            pre(i, 0, 0, -w);\n        }\n        dp = new int[1 << m];\n        Arrays.fill(dp, -1);\n        pw.println(solve(0, 0));\n\n        pw.close();\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "    public static void main(String args[]) throws Throwable {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        for (String ln; (ln = in.readLine()) != null; ) {\n            StringTokenizer st = new StringTokenizer(ln);\n            N = parseInt(st.nextToken());\n            M = parseInt(st.nextToken());\n            char[] S = in.readLine().toCharArray();\n            Q = new long[M][M];\n            mem = new long[1 << M];\n            Arrays.fill(mem, -1);\n            for (int i = 1; i < N; i++)\n                Q[S[i - 1] - 'a'][S[i] - 'a'] = Q[S[i] - 'a'][S[i - 1] - 'a'] = Q[S[i - 1] - 'a'][S[i] - 'a'] + 1;\n            calculateSums();\n            for (int i = (1 << M) - 1; i >= 0; i--)\n                f(i);\n            System.out.println(f(0));\n        }\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws Exception{\n        String st[]=nl();\n        n=pi(st[0]);\n        m=pi(st[1]);\n        st=nl();\n        String str=st[0];\n        int mn=10000;\n        for(int i=0;i<n;i++){\n            mn=Math.min(mn,str.charAt(i));\n        }\n        cost=new long[m][m];\n        for(int i=1;i<n;i++){\n            int a1=str.charAt(i-1)-mn;\n            int a2=str.charAt(i)-mn;\n            if(a1==a2)continue;\n            cost[a1][a2]++;\n            cost[a2][a1]++;\n        }\n        int mm=1<<m;\n        dp=new long[mm];\n        Arrays.fill(dp,Long.MAX_VALUE/2);\n        dp[0]=0;\n        //debug(cost);\n        long cntbit[]=new long[mm];\n        int minbit[]=new int[mm];\n\n        for(int mask=1;mask<mm;mask++){\n            cntbit[mask]=1+cntbit[(mask&(mask-1))];\n            for(int i=0;i<m;i++){\n                if(((mask>>i)&1)!=0){\n                    minbit[mask]=i;\n                    break;\n                }\n            }\n        }\n        long cntcost[][]=new long[mm][m];\n        for(int mask=0;mask<mm;mask++){\n            for(int i=0;i<m;i++){\n                int b=minbit[mask];\n                cntcost[mask][i]=cntcost[mask^(1<<b)][i]+cost[i][b];\n            }\n        }\n        int yy=mm-1;\n        for(int mask=0;mask<mm;mask++){\n            long cnt=cntbit[mask];\n            for(int i=0;i<m;i++){\n                if(((mask>>i)&1)!=0){\n                    long ans=cnt*(cntcost[mask][i]-cntcost[yy^mask][i]);\n                    dp[mask]=Math.min(dp[mask],dp[mask^(1<<i)]+ans);\n                }\n            }\n        }\n        out.println(dp[mm-1]);\n/****************************************Solutions Ends**************************************************/\n        out.flush();\n        out.close();\n    }\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        char[] arr = br.readLine().toCharArray();\n        int[][] count = new int[m][m];\n        for (int i = 0; i < n - 1; i++) {\n            count[arr[i] - 'a'][arr[i + 1] - 'a']++;\n            count[arr[i + 1] - 'a'][arr[i] - 'a']++;\n        }\n        int[] memo = new int[1 << m];\n        Arrays.fill(memo, (int) 1e9);\n        memo[0] = 0;\n        for (int msk = 0; msk < 1 << m; msk++) {\n            for (int c = 0; c < m; c++) {\n                if ((msk & 1 << c) != 0)\n                    continue;\n                int temp = 0;\n                for (int i = 0; i < m; i++) {\n                    if (i == c)\n                        continue;\n                    if ((msk & 1 << i) != 0) {\n                        temp += count[c][i];\n                    } else\n                        temp -= count[c][i];\n                }\n                memo[msk | 1 << c] = Math.min(memo[msk | 1 << c], temp*Integer.bitCount(msk) + memo[msk]);\n            }\n        }\n        System.out.println(memo[(1 << m) - 1]);\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main(String args[]) {new Main().run();}\n", "complexity": "np"}
{"code": "    public static void main(String args[]) throws Throwable {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        for (String ln; (ln = in.readLine()) != null; ) {\n            StringTokenizer st = new StringTokenizer(ln);\n            N = parseInt(st.nextToken());\n            M = parseInt(st.nextToken());\n            char[] S = in.readLine().toCharArray();\n            Q = new long[M][M];\n            mem = new long[1 << M];\n            Arrays.fill(mem, -1);\n            for (int i = 1; i < N; i++)\n                Q[S[i - 1] - 'a'][S[i] - 'a'] = Q[S[i] - 'a'][S[i - 1] - 'a'] = Q[S[i - 1] - 'a'][S[i] - 'a'] + 1;\n            calculateSums();\n            for (int i = (1 << M) - 1; i >= 0; i--)\n                f(i);\n            System.out.println(f(0));\n        }\n    }\n", "complexity": "np"}
{"code": "\tpublic static void main (String[] args) {new Thread(null, new E(), \"_cf\", 1 << 28).start();}\n", "complexity": "np"}
{"code": "    public static void main(String[] args) throws IOException {\n        int n = rni(), m = ni(), cnt[][] = new int[m][m], dp[] = new int[1 << m], all = (1 << m) - 1;\n        char[] s = rcha();\n        for (int i = 1; i < n; ++i) {\n            ++cnt[s[i] - 'a'][s[i - 1] - 'a'];\n            ++cnt[s[i - 1] - 'a'][s[i] - 'a'];\n        }\n        fill(dp, IBIG);\n        dp[0] = 0;\n        int cnt_bit[] = new int[1 << m], min_bit[] = new int[1 << m], d[][] = new int[1 << m][m];\n        for (int mask = 1; mask <= all; ++mask) {\n            cnt_bit[mask] = 1 + cnt_bit[mask & (mask - 1)];\n            for (int i = 0; i < n; ++i) {\n                if ((mask & (1 << i)) > 0) {\n                    min_bit[mask] = i;\n                    break;\n                }\n            }\n        }\n        for (int mask = 1; mask <= all; ++mask) {\n            for (int i = 0; i < m; ++i) {\n                d[mask][i] = d[mask ^ (1 << min_bit[mask])][i] + cnt[i][min_bit[mask]];\n            }\n        }\n        for (int mask = 0; mask <= all; ++mask) {\n            for (int i = 0; i < m; ++i) {\n                if ((mask & (1 << i)) > 0) {\n                    continue;\n                }\n                int pos = cnt_bit[mask], next = mask | (1 << i);\n                dp[next] = min(dp[next], dp[mask] + pos * (d[mask][i] - d[all ^ next][i]));\n            }\n        }\n        prln(dp[all]);\n        close();\n    }\n", "complexity": "np"}
