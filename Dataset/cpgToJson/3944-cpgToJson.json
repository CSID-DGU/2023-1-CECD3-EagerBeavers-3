{"edges": [["17", "18"], ["17", "19"], ["17", "444"], ["17", "445"], ["17", "446"], ["19", "20"], ["19", "21"], ["19", "25"], ["19", "26"], ["19", "30"], ["19", "31"], ["19", "36"], ["19", "66"], ["19", "67"], ["19", "72"], ["19", "73"], ["19", "79"], ["19", "80"], ["19", "88"], ["19", "89"], ["19", "93"], ["19", "98"], ["19", "119"], ["19", "224"], ["19", "225"], ["19", "230"], ["19", "341"], ["19", "342"], ["19", "345"], ["19", "426"], ["19", "439"], ["21", "22"], ["21", "23"], ["23", "24"], ["26", "27"], ["26", "28"], ["28", "29"], ["31", "32"], ["31", "33"], ["33", "34"], ["33", "35"], ["36", "37"], ["36", "38"], ["36", "41"], ["36", "44"], ["36", "46"], ["38", "39"], ["38", "40"], ["41", "42"], ["41", "43"], ["44", "45"], ["46", "47"], ["46", "48"], ["46", "51"], ["46", "54"], ["46", "56"], ["48", "49"], ["48", "50"], ["51", "52"], ["51", "53"], ["54", "55"], ["56", "57"], ["56", "62"], ["57", "58"], ["57", "61"], ["58", "59"], ["58", "60"], ["62", "63"], ["62", "65"], ["63", "64"], ["67", "68"], ["67", "69"], ["69", "70"], ["69", "71"], ["73", "74"], ["73", "75"], ["75", "76"], ["76", "77"], ["76", "78"], ["80", "81"], ["80", "82"], ["82", "83"], ["83", "84"], ["83", "85"], ["85", "86"], ["85", "87"], ["89", "90"], ["89", "91"], ["91", "92"], ["93", "94"], ["93", "97"], ["94", "95"], ["94", "96"], ["98", "99"], ["98", "100"], ["98", "103"], ["98", "106"], ["98", "108"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "105"], ["106", "107"], ["108", "109"], ["108", "112"], ["109", "110"], ["109", "111"], ["112", "113"], ["112", "118"], ["113", "114"], ["113", "115"], ["115", "116"], ["115", "117"], ["119", "120"], ["119", "121"], ["119", "124"], ["119", "129"], ["119", "131"], ["119", "132"], ["121", "122"], ["121", "123"], ["124", "125"], ["124", "126"], ["126", "127"], ["126", "128"], ["129", "130"], ["132", "133"], ["132", "134"], ["132", "137"], ["132", "140"], ["132", "142"], ["134", "135"], ["134", "136"], ["137", "138"], ["137", "139"], ["140", "141"], ["142", "143"], ["142", "150"], ["143", "144"], ["143", "149"], ["144", "145"], ["144", "148"], ["145", "146"], ["145", "147"], ["150", "151"], ["150", "152"], ["150", "155"], ["150", "202"], ["152", "153"], ["152", "154"], ["155", "156"], ["155", "157"], ["155", "160"], ["155", "163"], ["155", "165"], ["155", "168"], ["157", "158"], ["157", "159"], ["160", "161"], ["160", "162"], ["163", "164"], ["165", "166"], ["165", "167"], ["168", "169"], ["168", "180"], ["169", "170"], ["169", "175"], ["170", "171"], ["170", "174"], ["171", "172"], ["171", "173"], ["175", "176"], ["175", "179"], ["176", "177"], ["176", "178"], ["180", "181"], ["180", "201"], ["181", "182"], ["181", "189"], ["182", "183"], ["182", "184"], ["184", "185"], ["184", "186"], ["186", "187"], ["186", "188"], ["189", "190"], ["189", "191"], ["189", "198"], ["191", "192"], ["191", "193"], ["193", "194"], ["193", "195"], ["195", "196"], ["195", "197"], ["198", "199"], ["198", "200"], ["202", "203"], ["202", "210"], ["203", "204"], ["203", "205"], ["205", "206"], ["205", "207"], ["207", "208"], ["207", "209"], ["210", "211"], ["210", "212"], ["210", "219"], ["212", "213"], ["212", "214"], ["214", "215"], ["214", "216"], ["216", "217"], ["216", "218"], ["219", "220"], ["219", "223"], ["220", "221"], ["220", "222"], ["225", "226"], ["225", "227"], ["227", "228"], ["227", "229"], ["230", "231"], ["230", "232"], ["230", "235"], ["230", "240"], ["230", "242"], ["230", "243"], ["232", "233"], ["232", "234"], ["235", "236"], ["235", "237"], ["237", "238"], ["237", "239"], ["240", "241"], ["243", "244"], ["243", "245"], ["243", "248"], ["243", "251"], ["243", "253"], ["245", "246"], ["245", "247"], ["248", "249"], ["248", "250"], ["251", "252"], ["253", "254"], ["253", "261"], ["254", "255"], ["254", "260"], ["255", "256"], ["255", "259"], ["256", "257"], ["256", "258"], ["261", "262"], ["261", "263"], ["261", "268"], ["261", "269"], ["261", "272"], ["261", "319"], ["263", "264"], ["263", "265"], ["265", "266"], ["265", "267"], ["269", "270"], ["269", "271"], ["272", "273"], ["272", "274"], ["272", "277"], ["272", "280"], ["272", "282"], ["272", "285"], ["274", "275"], ["274", "276"], ["277", "278"], ["277", "279"], ["280", "281"], ["282", "283"], ["282", "284"], ["285", "286"], ["285", "297"], ["286", "287"], ["286", "292"], ["287", "288"], ["287", "291"], ["288", "289"], ["288", "290"], ["292", "293"], ["292", "296"], ["293", "294"], ["293", "295"], ["297", "298"], ["297", "318"], ["298", "299"], ["298", "306"], ["299", "300"], ["299", "301"], ["301", "302"], ["301", "303"], ["303", "304"], ["303", "305"], ["306", "307"], ["306", "308"], ["306", "315"], ["308", "309"], ["308", "310"], ["310", "311"], ["310", "312"], ["312", "313"], ["312", "314"], ["315", "316"], ["315", "317"], ["319", "320"], ["319", "327"], ["320", "321"], ["320", "322"], ["322", "323"], ["322", "324"], ["324", "325"], ["324", "326"], ["327", "328"], ["327", "329"], ["327", "336"], ["329", "330"], ["329", "331"], ["331", "332"], ["331", "333"], ["333", "334"], ["333", "335"], ["336", "337"], ["336", "340"], ["337", "338"], ["337", "339"], ["342", "343"], ["342", "344"], ["345", "346"], ["345", "347"], ["345", "350"], ["345", "355"], ["345", "357"], ["347", "348"], ["347", "349"], ["350", "351"], ["350", "352"], ["352", "353"], ["352", "354"], ["355", "356"], ["357", "358"], ["357", "359"], ["357", "362"], ["357", "363"], ["357", "366"], ["357", "408"], ["359", "360"], ["359", "361"], ["363", "364"], ["363", "365"], ["366", "367"], ["366", "368"], ["366", "371"], ["366", "374"], ["366", "376"], ["366", "379"], ["368", "369"], ["368", "370"], ["371", "372"], ["371", "373"], ["374", "375"], ["376", "377"], ["376", "378"], ["379", "380"], ["379", "385"], ["380", "381"], ["380", "384"], ["381", "382"], ["381", "383"], ["385", "386"], ["385", "387"], ["385", "390"], ["385", "393"], ["385", "395"], ["387", "388"], ["387", "389"], ["390", "391"], ["390", "392"], ["393", "394"], ["395", "396"], ["395", "403"], ["396", "397"], ["396", "400"], ["397", "398"], ["397", "399"], ["400", "401"], ["400", "402"], ["403", "404"], ["403", "405"], ["405", "406"], ["405", "407"], ["408", "409"], ["408", "410"], ["410", "411"], ["410", "412"], ["410", "413"], ["413", "414"], ["413", "417"], ["414", "415"], ["414", "416"], ["417", "418"], ["417", "419"], ["419", "420"], ["419", "425"], ["420", "421"], ["420", "424"], ["421", "422"], ["421", "423"], ["426", "427"], ["426", "428"], ["428", "429"], ["428", "436"], ["429", "430"], ["429", "433"], ["430", "431"], ["430", "432"], ["433", "434"], ["433", "435"], ["436", "437"], ["436", "438"], ["439", "440"], ["439", "443"], ["440", "441"], ["440", "442"], ["21", "28"], ["26", "33"], ["31", "38"], ["67", "76"], ["73", "85"], ["80", "91"], ["89", "94"], ["93", "100"], ["225", "232"], ["342", "347"], ["426", "442"], ["439", "446"], ["23", "21"], ["28", "26"], ["33", "31"], ["38", "41"], ["41", "48"], ["41", "69"], ["44", "41"], ["69", "67"], ["75", "73"], ["82", "80"], ["91", "89"], ["94", "93"], ["100", "103"], ["103", "109"], ["103", "121"], ["106", "103"], ["108", "106"], ["121", "126"], ["124", "129"], ["124", "227"], ["129", "126"], ["227", "225"], ["232", "237"], ["235", "240"], ["235", "342"], ["240", "237"], ["347", "352"], ["350", "359"], ["350", "430"], ["355", "352"], ["428", "426"], ["440", "439"], ["48", "51"], ["51", "58"], ["51", "44"], ["54", "51"], ["56", "54"], ["76", "75"], ["83", "82"], ["109", "115"], ["112", "108"], ["126", "124"], ["237", "235"], ["352", "350"], ["359", "363"], ["363", "368"], ["408", "355"], ["429", "436"], ["436", "428"], ["442", "440"], ["57", "63"], ["62", "56"], ["85", "83"], ["113", "112"], ["368", "371"], ["371", "376"], ["371", "414"], ["374", "371"], ["376", "374"], ["410", "408"], ["430", "433"], ["433", "429"], ["58", "57"], ["63", "62"], ["115", "113"], ["413", "410"], ["414", "421"], ["417", "413"], ["419", "417"], ["420", "419"], ["421", "420"], ["17", "23"], ["18", "446"], ["21", "446"], ["26", "446"], ["26", "446"], ["31", "446"], ["31", "446"], ["31", "446"], ["41", "446"], ["67", "446"], ["67", "446"], ["73", "446"], ["75", "446"], ["73", "446"], ["73", "446"], ["80", "446"], ["82", "446"], ["80", "446"], ["80", "446"], ["89", "446"], ["89", "446"], ["89", "446"], ["93", "446"], ["93", "446"], ["100", "446"], ["103", "446"], ["225", "446"], ["227", "446"], ["227", "446"], ["225", "446"], ["225", "446"], ["235", "446"], ["235", "446"], ["342", "446"], ["347", "446"], ["350", "446"], ["350", "446"], ["350", "446"], ["426", "446"], ["430", "446"], ["429", "446"], ["429", "446"], ["428", "446"], ["436", "446"], ["428", "446"], ["426", "446"], ["426", "446"], ["439", "446"], ["439", "446"], ["359", "446"], ["363", "446"], ["368", "446"], ["368", "446"], ["371", "446"], ["371", "446"], ["413", "446"], ["420", "446"], ["419", "446"], ["419", "446"], ["413", "446"], ["410", "446"], ["408", "446"], ["408", "446"], ["355", "446"], ["374", "446"], ["374", "446"], ["240", "446"], ["129", "446"], ["108", "446"], ["112", "446"], ["108", "446"], ["108", "446"], ["106", "446"], ["48", "446"], ["51", "446"], ["51", "446"], ["44", "446"], ["56", "446"], ["62", "446"], ["56", "446"], ["56", "446"], ["54", "446"], ["439", "446"], ["17", "18"], ["23", "21"], ["28", "26"], ["33", "31"], ["69", "67"], ["69", "67"], ["75", "73"], ["82", "80"], ["91", "89"], ["17", "93"], ["227", "225"], ["227", "225"], ["17", "342"], ["17", "38"], ["17", "100"], ["112", "108"], ["112", "108"], ["17", "121"], ["17", "232"], ["17", "347"], ["28", "426"], ["410", "426"], ["63", "426"], ["17", "426"], ["428", "426"], ["428", "426"], ["17", "439"], ["17", "23"], ["23", "28"], ["17", "28"], ["21", "33"], ["17", "33"], ["38", "41"], ["44", "41"], ["17", "41"], ["33", "41"], ["51", "41"], ["41", "44"], ["17", "44"], ["17", "48"], ["62", "56"], ["62", "56"], ["41", "69"], ["17", "69"], ["76", "75"], ["76", "75"], ["83", "82"], ["83", "82"], ["17", "91"], ["100", "103"], ["106", "103"], ["17", "103"], ["115", "106"], ["17", "106"], ["121", "124"], ["129", "124"], ["17", "124"], ["89", "124"], ["124", "129"], ["17", "129"], ["85", "227"], ["17", "227"], ["85", "227"], ["232", "235"], ["240", "235"], ["17", "235"], ["89", "235"], ["235", "240"], ["17", "240"], ["347", "350"], ["355", "350"], ["17", "350"], ["89", "350"], ["124", "350"], ["17", "355"], ["350", "355"], ["17", "359"], ["350", "363"], ["17", "363"], ["410", "408"], ["410", "408"], ["410", "408"], ["429", "428"], ["429", "428"], ["436", "428"], ["436", "428"], ["48", "51"], ["54", "51"], ["17", "51"], ["41", "51"], ["51", "54"], ["17", "54"], ["17", "76"], ["67", "76"], ["17", "83"], ["85", "83"], ["85", "83"], ["89", "112"], ["17", "112"], ["17", "368"], ["17", "376"], ["430", "429"], ["433", "429"], ["433", "429"], ["17", "436"], ["433", "436"], ["63", "62"], ["17", "62"], ["69", "85"], ["17", "85"], ["76", "85"], ["363", "371"], ["376", "371"], ["17", "371"], ["368", "374"], ["17", "374"], ["371", "376"], ["28", "410"], ["63", "410"], ["17", "410"], ["342", "410"], ["408", "410"], ["73", "410"], ["80", "410"], ["26", "430"], ["17", "430"], ["342", "433"], ["408", "433"], ["17", "433"], ["28", "63"], ["17", "63"], ["103", "115"], ["17", "115"], ["73", "413"], ["80", "413"], ["420", "419"], ["420", "419"], ["359", "419"], ["17", "419"], ["89", "420"], ["235", "420"], ["17", "420"], ["41", "51"], ["41", "44"], ["41", "48"], ["41", "41"], ["103", "115"], ["103", "113"], ["103", "103"], ["103", "112"], ["103", "108"], ["103", "106"], ["103", "109"], ["124", "129"], ["124", "126"], ["124", "124"], ["235", "240"], ["235", "235"], ["235", "237"], ["350", "413"], ["350", "420"], ["350", "417"], ["350", "408"], ["350", "419"], ["350", "352"], ["350", "355"], ["350", "359"], ["350", "421"], ["350", "368"], ["350", "414"], ["350", "371"], ["350", "350"], ["350", "410"], ["350", "363"], ["51", "51"], ["51", "57"], ["51", "56"], ["51", "54"], ["51", "58"], ["51", "63"], ["51", "62"], ["371", "376"], ["371", "374"], ["371", "371"]], "features": {"17": "<(METHOD,main)<SUB>1</SUB>>", "19": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "21": "<(&lt;operator&gt;.assignment,int n = ni())<SUB>3</SUB>>", "23": "<(ni,ni())<SUB>3</SUB>>", "25": "<(LOCAL,double ke: double)<SUB>4</SUB>>", "27": "<(IDENTIFIER,ke,double ke = ni())<SUB>4</SUB>>", "29": "<(IDENTIFIER,this,ni())<SUB>4</SUB>>", "31": "<(&lt;operator&gt;.assignment,boolean[][] a = new boolean[n][n])<SUB>5</SUB>>", "33": "<(&lt;operator&gt;.alloc,new boolean[n][n])>", "35": "<(IDENTIFIER,n,new boolean[n][n])<SUB>5</SUB>>", "37": "<(LOCAL,int i: int)<SUB>6</SUB>>", "39": "<(IDENTIFIER,i,int i = 0)<SUB>6</SUB>>", "41": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>6</SUB>>", "43": "<(IDENTIFIER,n,i &lt; n)<SUB>6</SUB>>", "45": "<(IDENTIFIER,i,i++)<SUB>6</SUB>>", "47": "<(LOCAL,int j: int)<SUB>7</SUB>>", "49": "<(IDENTIFIER,j,int j = 0)<SUB>7</SUB>>", "51": "<(&lt;operator&gt;.lessThan,j &lt; n)<SUB>7</SUB>>", "53": "<(IDENTIFIER,n,j &lt; n)<SUB>7</SUB>>", "55": "<(IDENTIFIER,j,j++)<SUB>7</SUB>>", "57": "<(&lt;operator&gt;.indexAccess,a[i][j])<SUB>8</SUB>>", "59": "<(IDENTIFIER,a,a[i][j] = ni() == 0)<SUB>8</SUB>>", "61": "<(IDENTIFIER,j,a[i][j] = ni() == 0)<SUB>8</SUB>>", "63": "<(ni,ni())<SUB>8</SUB>>", "65": "<(LITERAL,0,ni() == 0)<SUB>8</SUB>>", "67": "<(&lt;operator&gt;.assignment,int left = n / 2)<SUB>9</SUB>>", "69": "<(&lt;operator&gt;.division,n / 2)<SUB>9</SUB>>", "71": "<(LITERAL,2,n / 2)<SUB>9</SUB>>", "73": "<(&lt;operator&gt;.assignment,int[] ldp = new int[1 &lt;&lt; left])<SUB>10</SUB>>", "75": "<(&lt;operator&gt;.alloc,new int[1 &lt;&lt; left])>", "77": "<(LITERAL,1,1 &lt;&lt; left)<SUB>10</SUB>>", "79": "<(LOCAL,int[] rdp: int[])<SUB>11</SUB>>", "81": "<(IDENTIFIER,rdp,int[] rdp = new int[1 &lt;&lt; (n - left)])<SUB>11</SUB>>", "83": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; (n - left))<SUB>11</SUB>>", "85": "<(&lt;operator&gt;.subtraction,n - left)<SUB>11</SUB>>", "87": "<(IDENTIFIER,left,n - left)<SUB>11</SUB>>", "89": "<(&lt;operator&gt;.assignment,int[] pow = new int[25])<SUB>12</SUB>>", "91": "<(&lt;operator&gt;.alloc,new int[25])>", "93": "<(&lt;operator&gt;.assignment,pow[0] = 1)<SUB>13</SUB>>", "95": "<(IDENTIFIER,pow,pow[0] = 1)<SUB>13</SUB>>", "97": "<(LITERAL,1,pow[0] = 1)<SUB>13</SUB>>", "99": "<(LOCAL,int i: int)<SUB>14</SUB>>", "101": "<(IDENTIFIER,i,int i = 1)<SUB>14</SUB>>", "103": "<(&lt;operator&gt;.lessThan,i &lt; 25)<SUB>14</SUB>>", "105": "<(LITERAL,25,i &lt; 25)<SUB>14</SUB>>", "107": "<(IDENTIFIER,i,i++)<SUB>14</SUB>>", "109": "<(&lt;operator&gt;.indexAccess,pow[i])<SUB>15</SUB>>", "111": "<(IDENTIFIER,i,pow[i] = pow[i - 1] &lt;&lt; 1)<SUB>15</SUB>>", "113": "<(&lt;operator&gt;.indexAccess,pow[i - 1])<SUB>15</SUB>>", "115": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>15</SUB>>", "117": "<(LITERAL,1,i - 1)<SUB>15</SUB>>", "119": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; pow[left]); i++),for (int i = 0; Some(i &lt; pow[left]); i++))<SUB>16</SUB>>", "121": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>16</SUB>>", "123": "<(LITERAL,0,int i = 0)<SUB>16</SUB>>", "125": "<(IDENTIFIER,i,i &lt; pow[left])<SUB>16</SUB>>", "127": "<(IDENTIFIER,pow,i &lt; pow[left])<SUB>16</SUB>>", "129": "<(&lt;operator&gt;.postIncrement,i++)<SUB>16</SUB>>", "131": "<(JUMP_TARGET,ou)>", "133": "<(LOCAL,int j: int)<SUB>17</SUB>>", "135": "<(IDENTIFIER,j,int j = 0)<SUB>17</SUB>>", "137": "<(&lt;operator&gt;.lessThan,j &lt; left)<SUB>17</SUB>>", "139": "<(IDENTIFIER,left,j &lt; left)<SUB>17</SUB>>", "141": "<(IDENTIFIER,j,j++)<SUB>17</SUB>>", "143": "<(&lt;operator&gt;.equals,(i &gt;&gt; j) % 2 == 0)<SUB>18</SUB>>", "145": "<(&lt;operator&gt;.logicalShiftRight,i &gt;&gt; j)<SUB>18</SUB>>", "147": "<(IDENTIFIER,j,i &gt;&gt; j)<SUB>18</SUB>>", "149": "<(LITERAL,0,(i &gt;&gt; j) % 2 == 0)<SUB>18</SUB>>", "151": "<(LOCAL,int te: int)<SUB>20</SUB>>", "153": "<(IDENTIFIER,te,int te = i)<SUB>20</SUB>>", "155": "<(CONTROL_STRUCTURE,for (int k = 0; Some(te &gt; 0); k++, te &gt;&gt;= 1),for (int k = 0; Some(te &gt; 0); k++, te &gt;&gt;= 1))<SUB>21</SUB>>", "157": "<(&lt;operator&gt;.assignment,int k = 0)<SUB>21</SUB>>", "159": "<(LITERAL,0,int k = 0)<SUB>21</SUB>>", "161": "<(IDENTIFIER,te,te &gt; 0)<SUB>21</SUB>>", "163": "<(&lt;operator&gt;.postIncrement,k++)<SUB>21</SUB>>", "165": "<(&lt;operators&gt;.assignmentArithmeticShiftRight,te &gt;&gt;= 1)<SUB>21</SUB>>", "167": "<(LITERAL,1,te &gt;&gt;= 1)<SUB>21</SUB>>", "169": "<(&lt;operator&gt;.logicalAnd,a[j][k] &amp;&amp; (te &amp; 1) != 0)<SUB>22</SUB>>", "171": "<(&lt;operator&gt;.indexAccess,a[j])<SUB>22</SUB>>", "173": "<(IDENTIFIER,j,a[j][k] &amp;&amp; (te &amp; 1) != 0)<SUB>22</SUB>>", "175": "<(&lt;operator&gt;.notEquals,(te &amp; 1) != 0)<SUB>22</SUB>>", "177": "<(IDENTIFIER,te,te &amp; 1)<SUB>22</SUB>>", "179": "<(LITERAL,0,(te &amp; 1) != 0)<SUB>22</SUB>>", "181": "<(&lt;operator&gt;.assignment,ldp[i + pow[j]] = max(ldp[i + pow[j]], ldp[i]))<SUB>24</SUB>>", "183": "<(IDENTIFIER,ldp,ldp[i + pow[j]] = max(ldp[i + pow[j]], ldp[i]))<SUB>24</SUB>>", "185": "<(IDENTIFIER,i,i + pow[j])<SUB>24</SUB>>", "187": "<(IDENTIFIER,pow,i + pow[j])<SUB>24</SUB>>", "189": "<(max,max(ldp[i + pow[j]], ldp[i]))<SUB>24</SUB>>", "191": "<(&lt;operator&gt;.indexAccess,ldp[i + pow[j]])<SUB>24</SUB>>", "193": "<(&lt;operator&gt;.addition,i + pow[j])<SUB>24</SUB>>", "195": "<(&lt;operator&gt;.indexAccess,pow[j])<SUB>24</SUB>>", "197": "<(IDENTIFIER,j,i + pow[j])<SUB>24</SUB>>", "199": "<(IDENTIFIER,ldp,max(ldp[i + pow[j]], ldp[i]))<SUB>24</SUB>>", "201": "<(CONTROL_STRUCTURE,continue ou;,continue ou;)<SUB>25</SUB>>", "203": "<(&lt;operator&gt;.indexAccess,ldp[i + pow[j]])<SUB>27</SUB>>", "205": "<(&lt;operator&gt;.addition,i + pow[j])<SUB>27</SUB>>", "207": "<(&lt;operator&gt;.indexAccess,pow[j])<SUB>27</SUB>>", "209": "<(IDENTIFIER,j,i + pow[j])<SUB>27</SUB>>", "211": "<(IDENTIFIER,this,max(ldp[i + pow[j]], ldp[i] + 1))<SUB>27</SUB>>", "213": "<(IDENTIFIER,ldp,max(ldp[i + pow[j]], ldp[i] + 1))<SUB>27</SUB>>", "215": "<(IDENTIFIER,i,i + pow[j])<SUB>27</SUB>>", "217": "<(IDENTIFIER,pow,i + pow[j])<SUB>27</SUB>>", "219": "<(&lt;operator&gt;.addition,ldp[i] + 1)<SUB>27</SUB>>", "221": "<(IDENTIFIER,ldp,ldp[i] + 1)<SUB>27</SUB>>", "223": "<(LITERAL,1,ldp[i] + 1)<SUB>27</SUB>>", "225": "<(&lt;operator&gt;.assignment,int right = n - left)<SUB>29</SUB>>", "227": "<(&lt;operator&gt;.subtraction,n - left)<SUB>29</SUB>>", "229": "<(IDENTIFIER,left,n - left)<SUB>29</SUB>>", "231": "<(LOCAL,int i: int)<SUB>30</SUB>>", "233": "<(IDENTIFIER,i,int i = 0)<SUB>30</SUB>>", "235": "<(&lt;operator&gt;.lessThan,i &lt; pow[right])<SUB>30</SUB>>", "237": "<(&lt;operator&gt;.indexAccess,pow[right])<SUB>30</SUB>>", "239": "<(IDENTIFIER,right,i &lt; pow[right])<SUB>30</SUB>>", "241": "<(IDENTIFIER,i,i++)<SUB>30</SUB>>", "243": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; right); j++),for (int j = 0; Some(j &lt; right); j++))<SUB>31</SUB>>", "245": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>31</SUB>>", "247": "<(LITERAL,0,int j = 0)<SUB>31</SUB>>", "249": "<(IDENTIFIER,j,j &lt; right)<SUB>31</SUB>>", "251": "<(&lt;operator&gt;.postIncrement,j++)<SUB>31</SUB>>", "253": "<(CONTROL_STRUCTURE,if ((i &gt;&gt; j) % 2 == 0),if ((i &gt;&gt; j) % 2 == 0))<SUB>32</SUB>>", "255": "<(&lt;operator&gt;.modulo,(i &gt;&gt; j) % 2)<SUB>32</SUB>>", "257": "<(IDENTIFIER,i,i &gt;&gt; j)<SUB>32</SUB>>", "259": "<(LITERAL,2,(i &gt;&gt; j) % 2)<SUB>32</SUB>>", "261": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>33</SUB>>", "263": "<(&lt;operator&gt;.assignment,int lul = j + left)<SUB>34</SUB>>", "265": "<(&lt;operator&gt;.addition,j + left)<SUB>34</SUB>>", "267": "<(IDENTIFIER,left,j + left)<SUB>34</SUB>>", "269": "<(&lt;operator&gt;.assignment,int te = i)<SUB>35</SUB>>", "271": "<(IDENTIFIER,i,int te = i)<SUB>35</SUB>>", "273": "<(LOCAL,int k: int)<SUB>36</SUB>>", "275": "<(IDENTIFIER,k,int k = left)<SUB>36</SUB>>", "277": "<(&lt;operator&gt;.greaterThan,te &gt; 0)<SUB>36</SUB>>", "279": "<(LITERAL,0,te &gt; 0)<SUB>36</SUB>>", "281": "<(IDENTIFIER,k,k++)<SUB>36</SUB>>", "283": "<(IDENTIFIER,te,te &gt;&gt;= 1)<SUB>36</SUB>>", "285": "<(CONTROL_STRUCTURE,if (a[lul][k] &amp;&amp; (te &amp; 1) != 0),if (a[lul][k] &amp;&amp; (te &amp; 1) != 0))<SUB>37</SUB>>", "287": "<(&lt;operator&gt;.indexAccess,a[lul][k])<SUB>37</SUB>>", "289": "<(IDENTIFIER,a,a[lul][k] &amp;&amp; (te &amp; 1) != 0)<SUB>37</SUB>>", "291": "<(IDENTIFIER,k,a[lul][k] &amp;&amp; (te &amp; 1) != 0)<SUB>37</SUB>>", "293": "<(&lt;operator&gt;.and,te &amp; 1)<SUB>37</SUB>>", "295": "<(LITERAL,1,te &amp; 1)<SUB>37</SUB>>", "297": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>38</SUB>>", "299": "<(&lt;operator&gt;.indexAccess,rdp[i + pow[j]])<SUB>39</SUB>>", "301": "<(&lt;operator&gt;.addition,i + pow[j])<SUB>39</SUB>>", "303": "<(&lt;operator&gt;.indexAccess,pow[j])<SUB>39</SUB>>", "305": "<(IDENTIFIER,j,i + pow[j])<SUB>39</SUB>>", "307": "<(IDENTIFIER,this,max(rdp[i + pow[j]], rdp[i]))<SUB>39</SUB>>", "309": "<(IDENTIFIER,rdp,max(rdp[i + pow[j]], rdp[i]))<SUB>39</SUB>>", "311": "<(IDENTIFIER,i,i + pow[j])<SUB>39</SUB>>", "313": "<(IDENTIFIER,pow,i + pow[j])<SUB>39</SUB>>", "315": "<(&lt;operator&gt;.indexAccess,rdp[i])<SUB>39</SUB>>", "317": "<(IDENTIFIER,i,max(rdp[i + pow[j]], rdp[i]))<SUB>39</SUB>>", "319": "<(&lt;operator&gt;.assignment,rdp[i + pow[j]] = max(rdp[i + pow[j]], rdp[i] + 1))<SUB>42</SUB>>", "321": "<(IDENTIFIER,rdp,rdp[i + pow[j]] = max(rdp[i + pow[j]], rdp[i] + 1))<SUB>42</SUB>>", "323": "<(IDENTIFIER,i,i + pow[j])<SUB>42</SUB>>", "325": "<(IDENTIFIER,pow,i + pow[j])<SUB>42</SUB>>", "327": "<(max,max(rdp[i + pow[j]], rdp[i] + 1))<SUB>42</SUB>>", "329": "<(&lt;operator&gt;.indexAccess,rdp[i + pow[j]])<SUB>42</SUB>>", "331": "<(&lt;operator&gt;.addition,i + pow[j])<SUB>42</SUB>>", "333": "<(&lt;operator&gt;.indexAccess,pow[j])<SUB>42</SUB>>", "335": "<(IDENTIFIER,j,i + pow[j])<SUB>42</SUB>>", "337": "<(&lt;operator&gt;.indexAccess,rdp[i])<SUB>42</SUB>>", "339": "<(IDENTIFIER,i,rdp[i] + 1)<SUB>42</SUB>>", "341": "<(LOCAL,int maxi: int)<SUB>44</SUB>>", "343": "<(IDENTIFIER,maxi,int maxi = 0)<SUB>44</SUB>>", "345": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; pow[left]); i++),for (int i = 0; Some(i &lt; pow[left]); i++))<SUB>45</SUB>>", "347": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>45</SUB>>", "349": "<(LITERAL,0,int i = 0)<SUB>45</SUB>>", "351": "<(IDENTIFIER,i,i &lt; pow[left])<SUB>45</SUB>>", "353": "<(IDENTIFIER,pow,i &lt; pow[left])<SUB>45</SUB>>", "355": "<(&lt;operator&gt;.postIncrement,i++)<SUB>45</SUB>>", "357": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>46</SUB>>", "359": "<(&lt;operator&gt;.assignment,int lol = 0)<SUB>47</SUB>>", "361": "<(LITERAL,0,int lol = 0)<SUB>47</SUB>>", "363": "<(&lt;operator&gt;.assignment,int te = i)<SUB>48</SUB>>", "365": "<(IDENTIFIER,i,int te = i)<SUB>48</SUB>>", "367": "<(LOCAL,int j: int)<SUB>49</SUB>>", "369": "<(IDENTIFIER,j,int j = 0)<SUB>49</SUB>>", "371": "<(&lt;operator&gt;.greaterThan,te &gt; 0)<SUB>49</SUB>>", "373": "<(LITERAL,0,te &gt; 0)<SUB>49</SUB>>", "375": "<(IDENTIFIER,j,j++)<SUB>49</SUB>>", "377": "<(IDENTIFIER,te,te &gt;&gt;= 1)<SUB>49</SUB>>", "379": "<(CONTROL_STRUCTURE,if ((te &amp; 1) != 0),if ((te &amp; 1) != 0))<SUB>50</SUB>>", "381": "<(&lt;operator&gt;.and,te &amp; 1)<SUB>50</SUB>>", "383": "<(LITERAL,1,te &amp; 1)<SUB>50</SUB>>", "385": "<(CONTROL_STRUCTURE,for (int k = 0; Some(k &lt; right); k++),for (int k = 0; Some(k &lt; right); k++))<SUB>51</SUB>>", "387": "<(&lt;operator&gt;.assignment,int k = 0)<SUB>51</SUB>>", "389": "<(LITERAL,0,int k = 0)<SUB>51</SUB>>", "391": "<(IDENTIFIER,k,k &lt; right)<SUB>51</SUB>>", "393": "<(&lt;operator&gt;.postIncrement,k++)<SUB>51</SUB>>", "395": "<(CONTROL_STRUCTURE,if (a[j][k + left]),if (a[j][k + left]))<SUB>52</SUB>>", "397": "<(&lt;operator&gt;.indexAccess,a[j])<SUB>52</SUB>>", "399": "<(IDENTIFIER,j,if (a[j][k + left]))<SUB>52</SUB>>", "401": "<(IDENTIFIER,k,k + left)<SUB>52</SUB>>", "403": "<(&lt;operators&gt;.assignmentOr,lol |= pow[k])<SUB>53</SUB>>", "405": "<(&lt;operator&gt;.indexAccess,pow[k])<SUB>53</SUB>>", "407": "<(IDENTIFIER,k,lol |= pow[k])<SUB>53</SUB>>", "409": "<(IDENTIFIER,maxi,maxi = max(maxi, ldp[i] + rdp[pow[right] - 1 - lol]))<SUB>54</SUB>>", "411": "<(IDENTIFIER,this,max(maxi, ldp[i] + rdp[pow[right] - 1 - lol]))<SUB>54</SUB>>", "413": "<(&lt;operator&gt;.addition,ldp[i] + rdp[pow[right] - 1 - lol])<SUB>54</SUB>>", "415": "<(IDENTIFIER,ldp,ldp[i] + rdp[pow[right] - 1 - lol])<SUB>54</SUB>>", "417": "<(&lt;operator&gt;.indexAccess,rdp[pow[right] - 1 - lol])<SUB>54</SUB>>", "419": "<(&lt;operator&gt;.subtraction,pow[right] - 1 - lol)<SUB>54</SUB>>", "421": "<(&lt;operator&gt;.indexAccess,pow[right])<SUB>54</SUB>>", "423": "<(IDENTIFIER,right,pow[right] - 1)<SUB>54</SUB>>", "425": "<(IDENTIFIER,lol,pow[right] - 1 - lol)<SUB>54</SUB>>", "427": "<(IDENTIFIER,this,pr((ke * ke * (maxi - 1)) / (2 * maxi)))<SUB>56</SUB>>", "429": "<(&lt;operator&gt;.multiplication,ke * ke * (maxi - 1))<SUB>56</SUB>>", "431": "<(IDENTIFIER,ke,ke * ke)<SUB>56</SUB>>", "433": "<(&lt;operator&gt;.subtraction,maxi - 1)<SUB>56</SUB>>", "435": "<(LITERAL,1,maxi - 1)<SUB>56</SUB>>", "437": "<(LITERAL,2,2 * maxi)<SUB>56</SUB>>", "439": "<(println,println(output))<SUB>57</SUB>>", "441": "<(IDENTIFIER,System,println(output))<SUB>57</SUB>>", "443": "<(IDENTIFIER,output,println(output))<SUB>57</SUB>>", "445": "<(MODIFIER,STATIC)>"}}