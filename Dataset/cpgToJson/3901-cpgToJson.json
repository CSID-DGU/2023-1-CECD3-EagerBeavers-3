{"edges": [["23", "25"], ["23", "129"], ["23", "130"], ["23", "131"], ["25", "4"], ["25", "26"], ["25", "29"], ["25", "33"], ["26", "27"], ["26", "28"], ["29", "3"], ["29", "30"], ["30", "31"], ["30", "32"], ["33", "34"], ["33", "35"], ["33", "36"], ["33", "39"], ["33", "43"], ["33", "46"], ["33", "48"], ["36", "37"], ["36", "38"], ["39", "40"], ["39", "41"], ["41", "42"], ["43", "44"], ["43", "45"], ["46", "47"], ["48", "49"], ["48", "50"], ["48", "6"], ["48", "54"], ["48", "57"], ["48", "58"], ["48", "126"], ["50", "51"], ["50", "52"], ["52", "53"], ["54", "55"], ["54", "56"], ["57", "5"], ["58", "59"], ["58", "60"], ["58", "63"], ["58", "66"], ["58", "68"], ["60", "61"], ["60", "62"], ["63", "64"], ["63", "65"], ["66", "67"], ["68", "69"], ["68", "72"], ["68", "73"], ["68", "77"], ["68", "93"], ["68", "94"], ["68", "98"], ["68", "102"], ["68", "123"], ["69", "70"], ["69", "71"], ["73", "74"], ["73", "75"], ["75", "76"], ["77", "78"], ["77", "81"], ["78", "79"], ["78", "80"], ["81", "8"], ["81", "82"], ["81", "85"], ["81", "86"], ["81", "89"], ["81", "92"], ["82", "83"], ["82", "84"], ["85", "7"], ["86", "87"], ["86", "88"], ["89", "90"], ["89", "91"], ["94", "95"], ["94", "96"], ["96", "97"], ["98", "99"], ["99", "100"], ["99", "101"], ["102", "103"], ["102", "116"], ["103", "104"], ["103", "107"], ["104", "105"], ["104", "106"], ["107", "108"], ["107", "115"], ["108", "109"], ["108", "114"], ["109", "110"], ["110", "111"], ["110", "113"], ["111", "112"], ["116", "117"], ["116", "119"], ["117", "118"], ["119", "120"], ["119", "121"], ["121", "122"], ["123", "124"], ["123", "125"], ["126", "127"], ["126", "128"], ["26", "32"], ["29", "36"], ["28", "26"], ["30", "29"], ["36", "41"], ["39", "131"], ["39", "46"], ["43", "41"], ["46", "43"], ["32", "30"], ["41", "39"], ["23", "28"], ["24", "131"], ["26", "131"], ["29", "131"], ["29", "131"], ["36", "131"], ["36", "131"], ["39", "131"], ["41", "131"], ["39", "131"], ["39", "131"], ["43", "131"], ["43", "131"], ["23", "24"], ["23", "26"], ["26", "29"], ["23", "29"], ["23", "36"], ["41", "39"], ["46", "43"], ["23", "43"], ["39", "43"], ["36", "46"], ["43", "46"], ["23", "46"], ["29", "41"], ["23", "41"], ["39", "41"], ["39", "39"], ["39", "46"], ["39", "43"]], "features": {"23": "<(METHOD,main)<SUB>1</SUB>>", "25": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "26": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "31": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "33": "<(CONTROL_STRUCTURE,for (int i = 0, t = sc.nextInt(); Some(i &lt; t); i++),for (int i = 0, t = sc.nextInt(); Some(i &lt; t); i++))<SUB>3</SUB>>", "35": "<(LOCAL,int t: int)<SUB>3</SUB>>", "37": "<(IDENTIFIER,i,int i = 0)<SUB>3</SUB>>", "39": "<(&lt;operator&gt;.assignment,int t = nextInt())<SUB>3</SUB>>", "41": "<(nextInt,nextInt())<SUB>3</SUB>>", "43": "<(&lt;operator&gt;.lessThan,i &lt; t)<SUB>3</SUB>>", "45": "<(IDENTIFIER,t,i &lt; t)<SUB>3</SUB>>", "47": "<(IDENTIFIER,i,i++)<SUB>3</SUB>>", "49": "<(LOCAL,int n: int)<SUB>4</SUB>>", "51": "<(IDENTIFIER,n,int n = nextInt())<SUB>4</SUB>>", "53": "<(IDENTIFIER,sc,nextInt())<SUB>4</SUB>>", "54": "<(&lt;operator&gt;.assignment,ANY stack = new LinkedList&lt;&gt;())<SUB>5</SUB>>", "56": "<(&lt;operator&gt;.alloc,new LinkedList&lt;&gt;())<SUB>5</SUB>>", "5": "<(IDENTIFIER,stack,new LinkedList&lt;&gt;())<SUB>5</SUB>>", "59": "<(LOCAL,int j: int)<SUB>6</SUB>>", "61": "<(IDENTIFIER,j,int j = 0)<SUB>6</SUB>>", "63": "<(&lt;operator&gt;.lessThan,j &lt; n)<SUB>6</SUB>>", "65": "<(IDENTIFIER,n,j &lt; n)<SUB>6</SUB>>", "67": "<(IDENTIFIER,j,j++)<SUB>6</SUB>>", "69": "<(printStack,printStack(stack))<SUB>7</SUB>>", "71": "<(IDENTIFIER,stack,printStack(stack))<SUB>7</SUB>>", "73": "<(&lt;operator&gt;.assignment,int val = nextInt())<SUB>8</SUB>>", "75": "<(nextInt,nextInt())<SUB>8</SUB>>", "77": "<(CONTROL_STRUCTURE,if (val == 1),if (val == 1))<SUB>9</SUB>>", "79": "<(IDENTIFIER,val,val == 1)<SUB>9</SUB>>", "81": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>>", "82": "<(&lt;operator&gt;.assignment,ANY branch = new HashSet&lt;&gt;())<SUB>10</SUB>>", "84": "<(&lt;operator&gt;.alloc,new HashSet&lt;&gt;())<SUB>10</SUB>>", "7": "<(IDENTIFIER,branch,new HashSet&lt;&gt;())<SUB>10</SUB>>", "87": "<(IDENTIFIER,branch,add(val))<SUB>11</SUB>>", "89": "<(push,push(branch))<SUB>12</SUB>>", "91": "<(IDENTIFIER,branch,push(branch))<SUB>12</SUB>>", "93": "<(LOCAL,Set&lt;Integer&gt; branch: ANY)<SUB>15</SUB>>", "95": "<(IDENTIFIER,branch,ANY branch = peek())<SUB>15</SUB>>", "97": "<(IDENTIFIER,stack,peek())<SUB>15</SUB>>", "99": "<(&lt;operator&gt;.notEquals,branch != null)<SUB>16</SUB>>", "101": "<(LITERAL,null,branch != null)<SUB>16</SUB>>", "103": "<(&lt;operator&gt;.logicalOr,branch.contains(val) || branch.stream().max(Integer::compareTo).get() + 1 != val)<SUB>17</SUB>>", "105": "<(IDENTIFIER,branch,contains(val))<SUB>17</SUB>>", "107": "<(&lt;operator&gt;.notEquals,branch.stream().max(Integer::compareTo).get() + 1 != val)<SUB>17</SUB>>", "109": "<(get,get())<SUB>17</SUB>>", "111": "<(stream,stream())<SUB>17</SUB>>", "113": "<(UNKNOWN,Integer::compareTo,Integer::compareTo)<SUB>17</SUB>>", "115": "<(IDENTIFIER,val,branch.stream().max(Integer::compareTo).get() + 1 != val)<SUB>17</SUB>>", "117": "<(pop,pop())<SUB>18</SUB>>", "119": "<(&lt;operator&gt;.assignment,branch = peek())<SUB>19</SUB>>", "121": "<(peek,peek())<SUB>19</SUB>>", "123": "<(add,add(val))<SUB>21</SUB>>", "125": "<(IDENTIFIER,val,add(val))<SUB>21</SUB>>", "127": "<(IDENTIFIER,this,printStack(stack))<SUB>23</SUB>>", "129": "<(MODIFIER,PUBLIC)>", "131": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}