{"edges": [["19", "20"], ["19", "21"], ["19", "166"], ["19", "167"], ["19", "168"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "44"], ["21", "45"], ["21", "51"], ["21", "137"], ["21", "138"], ["21", "141"], ["21", "161"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["39", "40"], ["39", "43"], ["40", "41"], ["40", "42"], ["45", "46"], ["45", "47"], ["47", "48"], ["47", "50"], ["48", "49"], ["51", "52"], ["51", "53"], ["51", "56"], ["51", "61"], ["51", "63"], ["53", "54"], ["53", "55"], ["56", "57"], ["56", "58"], ["58", "59"], ["58", "60"], ["61", "62"], ["63", "64"], ["63", "65"], ["63", "69"], ["63", "132"], ["65", "66"], ["65", "67"], ["67", "68"], ["69", "70"], ["69", "71"], ["69", "99"], ["71", "72"], ["71", "94"], ["72", "73"], ["72", "74"], ["72", "79"], ["72", "82"], ["72", "84"], ["74", "75"], ["74", "76"], ["76", "77"], ["76", "78"], ["79", "80"], ["79", "81"], ["82", "83"], ["84", "85"], ["85", "86"], ["85", "89"], ["86", "87"], ["86", "88"], ["89", "90"], ["89", "91"], ["91", "92"], ["91", "93"], ["94", "95"], ["94", "98"], ["95", "96"], ["95", "97"], ["99", "100"], ["100", "101"], ["100", "102"], ["100", "105"], ["102", "103"], ["102", "104"], ["105", "106"], ["105", "107"], ["105", "112"], ["105", "115"], ["105", "117"], ["107", "108"], ["107", "109"], ["109", "110"], ["109", "111"], ["112", "113"], ["112", "114"], ["115", "116"], ["117", "118"], ["117", "127"], ["118", "119"], ["118", "120"], ["120", "121"], ["120", "126"], ["121", "122"], ["121", "123"], ["123", "124"], ["123", "125"], ["127", "128"], ["127", "131"], ["128", "129"], ["128", "130"], ["132", "133"], ["132", "134"], ["134", "135"], ["134", "136"], ["138", "139"], ["138", "140"], ["141", "142"], ["141", "143"], ["141", "146"], ["141", "149"], ["141", "151"], ["143", "144"], ["143", "145"], ["146", "147"], ["146", "148"], ["149", "150"], ["151", "152"], ["152", "153"], ["152", "154"], ["154", "155"], ["154", "160"], ["155", "156"], ["155", "157"], ["157", "158"], ["157", "159"], ["161", "162"], ["161", "165"], ["162", "163"], ["162", "164"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "40"], ["39", "48"], ["45", "53"], ["138", "143"], ["161", "168"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["40", "39"], ["47", "45"], ["53", "58"], ["56", "67"], ["56", "138"], ["61", "58"], ["143", "146"], ["146", "157"], ["146", "164"], ["149", "146"], ["162", "161"], ["28", "26"], ["48", "47"], ["58", "56"], ["65", "70"], ["132", "61"], ["152", "149"], ["164", "162"], ["67", "65"], ["70", "76"], ["70", "102"], ["134", "132"], ["154", "152"], ["94", "134"], ["155", "154"], ["74", "79"], ["79", "86"], ["79", "95"], ["82", "79"], ["95", "94"], ["102", "109"], ["157", "155"], ["76", "74"], ["85", "82"], ["107", "112"], ["112", "123"], ["112", "134"], ["115", "112"], ["86", "91"], ["89", "85"], ["109", "107"], ["118", "128"], ["127", "115"], ["91", "89"], ["120", "118"], ["128", "127"], ["121", "120"], ["123", "121"], ["19", "24"], ["20", "168"], ["22", "168"], ["25", "168"], ["25", "168"], ["30", "168"], ["30", "168"], ["35", "168"], ["35", "168"], ["35", "168"], ["39", "168"], ["39", "168"], ["45", "168"], ["48", "168"], ["47", "168"], ["45", "168"], ["45", "168"], ["53", "168"], ["56", "168"], ["56", "168"], ["56", "168"], ["138", "168"], ["143", "168"], ["146", "168"], ["146", "168"], ["146", "168"], ["161", "168"], ["161", "168"], ["161", "168"], ["155", "168"], ["154", "168"], ["152", "168"], ["152", "168"], ["149", "168"], ["67", "168"], ["65", "168"], ["65", "168"], ["102", "168"], ["102", "168"], ["107", "168"], ["112", "168"], ["120", "168"], ["118", "168"], ["118", "168"], ["127", "168"], ["127", "168"], ["127", "168"], ["115", "168"], ["74", "168"], ["79", "168"], ["94", "168"], ["94", "168"], ["132", "168"], ["134", "168"], ["132", "168"], ["132", "168"], ["61", "168"], ["85", "168"], ["85", "168"], ["85", "168"], ["82", "168"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["19", "39"], ["47", "45"], ["47", "45"], ["19", "138"], ["22", "25"], ["19", "25"], ["19", "53"], ["19", "143"], ["138", "161"], ["152", "161"], ["19", "161"], ["25", "32"], ["19", "32"], ["30", "37"], ["19", "37"], ["48", "47"], ["19", "47"], ["53", "56"], ["61", "56"], ["19", "56"], ["58", "56"], ["58", "56"], ["56", "61"], ["19", "61"], ["67", "65"], ["134", "132"], ["134", "132"], ["143", "146"], ["149", "146"], ["19", "146"], ["58", "146"], ["146", "149"], ["19", "149"], ["154", "152"], ["154", "152"], ["32", "48"], ["19", "48"], ["37", "58"], ["109", "58"], ["76", "58"], ["19", "58"], ["19", "70"], ["48", "67"], ["19", "67"], ["19", "94"], ["65", "134"], ["19", "134"], ["138", "154"], ["152", "154"], ["19", "154"], ["35", "154"], ["127", "154"], ["85", "154"], ["76", "74"], ["76", "74"], ["19", "102"], ["138", "155"], ["152", "155"], ["19", "155"], ["35", "155"], ["127", "155"], ["85", "155"], ["74", "79"], ["82", "79"], ["19", "79"], ["91", "82"], ["19", "82"], ["35", "85"], ["109", "107"], ["109", "107"], ["58", "76"], ["19", "76"], ["107", "112"], ["115", "112"], ["19", "112"], ["112", "115"], ["19", "115"], ["120", "118"], ["120", "118"], ["118", "127"], ["19", "127"], ["58", "109"], ["19", "109"], ["79", "91"], ["19", "91"], ["102", "120"], ["19", "120"], ["118", "120"], ["35", "120"], ["127", "120"], ["85", "120"], ["102", "121"], ["19", "121"], ["118", "121"], ["35", "121"], ["127", "121"], ["85", "121"], ["56", "56"], ["56", "132"], ["56", "67"], ["56", "65"], ["56", "134"], ["56", "58"], ["56", "61"], ["56", "70"], ["146", "154"], ["146", "146"], ["146", "149"], ["146", "157"], ["146", "152"], ["146", "155"], ["70", "107"], ["70", "94"], ["70", "102"], ["70", "74"], ["70", "95"], ["70", "76"], ["70", "112"], ["70", "79"], ["70", "109"], ["79", "89"], ["79", "85"], ["79", "91"], ["79", "82"], ["79", "79"], ["79", "86"], ["112", "115"], ["112", "120"], ["112", "128"], ["112", "121"], ["112", "123"], ["112", "112"], ["112", "118"], ["112", "127"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY in = new Scanner(System.in))<SUB>3</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>3</SUB>>", "3": "<(IDENTIFIER,in,new Scanner(System.in))<SUB>3</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>3</SUB>>", "29": "<(LOCAL,int numbOfStatements: int)<SUB>4</SUB>>", "31": "<(IDENTIFIER,numbOfStatements,int numbOfStatements = nextInt())<SUB>4</SUB>>", "33": "<(IDENTIFIER,in,nextInt())<SUB>4</SUB>>", "35": "<(&lt;operator&gt;.assignment,long[] dp = new long[numbOfStatements])<SUB>5</SUB>>", "37": "<(&lt;operator&gt;.alloc,new long[numbOfStatements])>", "39": "<(&lt;operator&gt;.assignment,dp[0] = 1L)<SUB>6</SUB>>", "41": "<(IDENTIFIER,dp,dp[0] = 1L)<SUB>6</SUB>>", "43": "<(LITERAL,1L,dp[0] = 1L)<SUB>6</SUB>>", "45": "<(&lt;operator&gt;.assignment,boolean priorFor = equals(&quot;f&quot;))<SUB>7</SUB>>", "47": "<(equals,equals(&quot;f&quot;))<SUB>7</SUB>>", "49": "<(IDENTIFIER,in,next())<SUB>7</SUB>>", "51": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; numbOfStatements - 1); i++),for (int i = 0; Some(i &lt; numbOfStatements - 1); i++))<SUB>9</SUB>>", "53": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>9</SUB>>", "55": "<(LITERAL,0,int i = 0)<SUB>9</SUB>>", "57": "<(IDENTIFIER,i,i &lt; numbOfStatements - 1)<SUB>9</SUB>>", "59": "<(IDENTIFIER,numbOfStatements,numbOfStatements - 1)<SUB>9</SUB>>", "61": "<(&lt;operator&gt;.postIncrement,i++)<SUB>9</SUB>>", "63": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "65": "<(&lt;operator&gt;.assignment,String type = next())<SUB>11</SUB>>", "67": "<(next,next())<SUB>11</SUB>>", "69": "<(CONTROL_STRUCTURE,if (priorFor),if (priorFor))<SUB>12</SUB>>", "71": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>12</SUB>>", "73": "<(LOCAL,int j: int)<SUB>13</SUB>>", "75": "<(IDENTIFIER,j,int j = numbOfStatements - 1)<SUB>13</SUB>>", "77": "<(IDENTIFIER,numbOfStatements,numbOfStatements - 1)<SUB>13</SUB>>", "79": "<(&lt;operator&gt;.greaterThan,j &gt; 0)<SUB>13</SUB>>", "81": "<(LITERAL,0,j &gt; 0)<SUB>13</SUB>>", "83": "<(IDENTIFIER,j,j--)<SUB>13</SUB>>", "85": "<(&lt;operator&gt;.assignment,dp[j] = dp[j - 1])<SUB>14</SUB>>", "87": "<(IDENTIFIER,dp,dp[j] = dp[j - 1])<SUB>14</SUB>>", "89": "<(&lt;operator&gt;.indexAccess,dp[j - 1])<SUB>14</SUB>>", "91": "<(&lt;operator&gt;.subtraction,j - 1)<SUB>14</SUB>>", "93": "<(LITERAL,1,j - 1)<SUB>14</SUB>>", "95": "<(&lt;operator&gt;.indexAccess,dp[0])<SUB>16</SUB>>", "97": "<(LITERAL,0,dp[0] = 0L)<SUB>16</SUB>>", "99": "<(CONTROL_STRUCTURE,else,else)<SUB>17</SUB>>", "101": "<(LOCAL,long sum: long)<SUB>18</SUB>>", "103": "<(IDENTIFIER,sum,long sum = 0)<SUB>18</SUB>>", "105": "<(CONTROL_STRUCTURE,for (int j = numbOfStatements - 1; Some(j &gt;= 0); --j),for (int j = numbOfStatements - 1; Some(j &gt;= 0); --j))<SUB>19</SUB>>", "107": "<(&lt;operator&gt;.assignment,int j = numbOfStatements - 1)<SUB>19</SUB>>", "109": "<(&lt;operator&gt;.subtraction,numbOfStatements - 1)<SUB>19</SUB>>", "111": "<(LITERAL,1,numbOfStatements - 1)<SUB>19</SUB>>", "113": "<(IDENTIFIER,j,j &gt;= 0)<SUB>19</SUB>>", "115": "<(&lt;operator&gt;.preDecrement,--j)<SUB>19</SUB>>", "117": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>19</SUB>>", "119": "<(IDENTIFIER,sum,sum = (sum + dp[j]) % 1000000007)<SUB>20</SUB>>", "121": "<(&lt;operator&gt;.addition,sum + dp[j])<SUB>20</SUB>>", "123": "<(&lt;operator&gt;.indexAccess,dp[j])<SUB>20</SUB>>", "125": "<(IDENTIFIER,j,sum + dp[j])<SUB>20</SUB>>", "127": "<(&lt;operator&gt;.assignment,dp[j] = sum)<SUB>21</SUB>>", "129": "<(IDENTIFIER,dp,dp[j] = sum)<SUB>21</SUB>>", "131": "<(IDENTIFIER,sum,dp[j] = sum)<SUB>21</SUB>>", "133": "<(IDENTIFIER,priorFor,priorFor = type.equals(&quot;f&quot;))<SUB>24</SUB>>", "135": "<(IDENTIFIER,type,type.equals(&quot;f&quot;))<SUB>24</SUB>>", "137": "<(LOCAL,long ans: long)<SUB>26</SUB>>", "139": "<(IDENTIFIER,ans,long ans = 0)<SUB>26</SUB>>", "141": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; numbOfStatements); j++),for (int j = 0; Some(j &lt; numbOfStatements); j++))<SUB>27</SUB>>", "143": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>27</SUB>>", "145": "<(LITERAL,0,int j = 0)<SUB>27</SUB>>", "147": "<(IDENTIFIER,j,j &lt; numbOfStatements)<SUB>27</SUB>>", "149": "<(&lt;operator&gt;.postIncrement,j++)<SUB>27</SUB>>", "151": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>27</SUB>>", "153": "<(IDENTIFIER,ans,ans = (ans + dp[j]) % 1000000007)<SUB>28</SUB>>", "155": "<(&lt;operator&gt;.addition,ans + dp[j])<SUB>28</SUB>>", "157": "<(&lt;operator&gt;.indexAccess,dp[j])<SUB>28</SUB>>", "159": "<(IDENTIFIER,j,ans + dp[j])<SUB>28</SUB>>", "161": "<(println,System.out.println(ans))<SUB>30</SUB>>", "163": "<(IDENTIFIER,System,System.out.println(ans))<SUB>30</SUB>>", "165": "<(IDENTIFIER,ans,System.out.println(ans))<SUB>30</SUB>>", "167": "<(MODIFIER,STATIC)>"}}