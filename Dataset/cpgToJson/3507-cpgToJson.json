{"edges": [["17", "18"], ["17", "19"], ["17", "306"], ["17", "307"], ["17", "308"], ["19", "20"], ["19", "22"], ["19", "23"], ["19", "24"], ["19", "28"], ["19", "32"], ["19", "38"], ["19", "39"], ["19", "45"], ["19", "50"], ["19", "55"], ["19", "73"], ["19", "133"], ["19", "172"], ["19", "173"], ["19", "186"], ["19", "193"], ["19", "267"], ["19", "268"], ["19", "271"], ["19", "301"], ["19", "304"], ["20", "21"], ["24", "25"], ["24", "26"], ["26", "27"], ["28", "29"], ["28", "30"], ["30", "31"], ["32", "33"], ["32", "34"], ["34", "35"], ["35", "36"], ["35", "37"], ["39", "40"], ["39", "41"], ["41", "42"], ["42", "43"], ["42", "44"], ["45", "46"], ["45", "49"], ["46", "47"], ["46", "48"], ["50", "51"], ["50", "54"], ["51", "52"], ["51", "53"], ["55", "56"], ["55", "57"], ["55", "60"], ["55", "63"], ["55", "65"], ["57", "58"], ["57", "59"], ["60", "61"], ["60", "62"], ["63", "64"], ["65", "66"], ["65", "69"], ["66", "67"], ["66", "68"], ["69", "70"], ["70", "71"], ["70", "72"], ["73", "74"], ["73", "75"], ["73", "78"], ["73", "81"], ["73", "83"], ["75", "76"], ["75", "77"], ["78", "79"], ["78", "80"], ["81", "82"], ["83", "84"], ["83", "97"], ["84", "85"], ["84", "90"], ["85", "86"], ["85", "89"], ["86", "87"], ["86", "88"], ["90", "91"], ["90", "96"], ["91", "92"], ["91", "95"], ["92", "93"], ["92", "94"], ["97", "98"], ["97", "99"], ["97", "102"], ["97", "105"], ["97", "107"], ["99", "100"], ["99", "101"], ["102", "103"], ["102", "104"], ["105", "106"], ["107", "108"], ["108", "109"], ["108", "114"], ["109", "110"], ["109", "113"], ["110", "111"], ["110", "112"], ["114", "115"], ["114", "132"], ["115", "116"], ["115", "125"], ["116", "117"], ["116", "122"], ["117", "118"], ["117", "119"], ["119", "120"], ["119", "121"], ["122", "123"], ["122", "124"], ["125", "126"], ["125", "131"], ["126", "127"], ["126", "128"], ["128", "129"], ["128", "130"], ["133", "134"], ["133", "135"], ["133", "138"], ["133", "141"], ["133", "143"], ["135", "136"], ["135", "137"], ["138", "139"], ["138", "140"], ["141", "142"], ["143", "144"], ["144", "145"], ["144", "146"], ["144", "149"], ["144", "152"], ["144", "154"], ["146", "147"], ["146", "148"], ["149", "150"], ["149", "151"], ["152", "153"], ["154", "155"], ["155", "156"], ["155", "159"], ["156", "157"], ["156", "158"], ["159", "160"], ["159", "171"], ["160", "161"], ["160", "164"], ["161", "162"], ["161", "163"], ["164", "165"], ["164", "170"], ["165", "166"], ["165", "167"], ["167", "168"], ["167", "169"], ["173", "174"], ["173", "175"], ["175", "176"], ["175", "183"], ["176", "177"], ["176", "182"], ["177", "178"], ["177", "181"], ["178", "179"], ["178", "180"], ["183", "184"], ["183", "185"], ["186", "187"], ["186", "192"], ["187", "188"], ["187", "191"], ["188", "189"], ["188", "190"], ["193", "194"], ["193", "195"], ["193", "198"], ["193", "205"], ["193", "207"], ["195", "196"], ["195", "197"], ["198", "199"], ["198", "200"], ["200", "201"], ["200", "204"], ["201", "202"], ["201", "203"], ["205", "206"], ["207", "208"], ["208", "209"], ["208", "210"], ["208", "213"], ["208", "216"], ["208", "218"], ["210", "211"], ["210", "212"], ["213", "214"], ["213", "215"], ["216", "217"], ["218", "219"], ["219", "220"], ["219", "221"], ["219", "224"], ["219", "227"], ["219", "229"], ["221", "222"], ["221", "223"], ["224", "225"], ["224", "226"], ["227", "228"], ["229", "230"], ["230", "231"], ["230", "236"], ["231", "232"], ["231", "235"], ["232", "233"], ["232", "234"], ["236", "237"], ["236", "266"], ["237", "238"], ["237", "243"], ["238", "239"], ["238", "242"], ["239", "240"], ["239", "241"], ["243", "244"], ["243", "265"], ["244", "245"], ["244", "256"], ["245", "246"], ["245", "255"], ["246", "247"], ["246", "250"], ["247", "248"], ["247", "249"], ["250", "251"], ["250", "254"], ["251", "252"], ["251", "253"], ["256", "257"], ["256", "262"], ["257", "258"], ["257", "259"], ["259", "260"], ["259", "261"], ["262", "263"], ["262", "264"], ["268", "269"], ["268", "270"], ["271", "272"], ["271", "273"], ["271", "276"], ["271", "283"], ["271", "285"], ["273", "274"], ["273", "275"], ["276", "277"], ["276", "278"], ["278", "279"], ["278", "282"], ["279", "280"], ["279", "281"], ["283", "284"], ["285", "286"], ["286", "287"], ["286", "288"], ["288", "289"], ["288", "300"], ["289", "290"], ["289", "291"], ["291", "292"], ["291", "295"], ["292", "293"], ["292", "294"], ["295", "296"], ["295", "297"], ["297", "298"], ["297", "299"], ["301", "302"], ["301", "303"], ["304", "305"], ["20", "26"], ["24", "30"], ["28", "35"], ["32", "42"], ["39", "46"], ["45", "51"], ["50", "57"], ["173", "188"], ["186", "195"], ["268", "273"], ["301", "304"], ["304", "308"], ["26", "24"], ["30", "28"], ["34", "32"], ["41", "39"], ["46", "45"], ["51", "50"], ["57", "60"], ["60", "66"], ["60", "75"], ["63", "60"], ["65", "63"], ["75", "78"], ["78", "86"], ["78", "135"], ["81", "78"], ["135", "138"], ["138", "146"], ["138", "178"], ["141", "138"], ["175", "173"], ["187", "186"], ["195", "201"], ["198", "210"], ["198", "268"], ["205", "201"], ["273", "279"], ["276", "292"], ["276", "301"], ["283", "279"], ["35", "34"], ["42", "41"], ["66", "70"], ["69", "65"], ["84", "99"], ["176", "183"], ["183", "175"], ["188", "187"], ["200", "198"], ["278", "276"], ["286", "283"], ["70", "69"], ["85", "92"], ["90", "84"], ["99", "102"], ["102", "110"], ["102", "81"], ["105", "102"], ["146", "149"], ["149", "156"], ["149", "141"], ["152", "149"], ["177", "176"], ["201", "200"], ["210", "213"], ["213", "221"], ["213", "205"], ["216", "213"], ["279", "278"], ["288", "286"], ["86", "85"], ["91", "90"], ["108", "105"], ["155", "152"], ["178", "177"], ["289", "288"], ["92", "91"], ["109", "119"], ["114", "108"], ["156", "161"], ["159", "155"], ["221", "224"], ["224", "232"], ["224", "216"], ["227", "224"], ["291", "289"], ["110", "109"], ["115", "114"], ["160", "159"], ["230", "227"], ["292", "297"], ["295", "291"], ["116", "128"], ["125", "115"], ["161", "167"], ["164", "160"], ["231", "239"], ["236", "230"], ["297", "295"], ["117", "122"], ["122", "116"], ["126", "125"], ["165", "164"], ["232", "231"], ["237", "236"], ["119", "117"], ["128", "126"], ["167", "165"], ["238", "247"], ["243", "237"], ["239", "238"], ["244", "243"], ["245", "259"], ["256", "244"], ["246", "245"], ["257", "262"], ["262", "256"], ["247", "251"], ["250", "246"], ["259", "257"], ["251", "250"], ["17", "20"], ["18", "308"], ["20", "308"], ["24", "308"], ["28", "308"], ["30", "308"], ["28", "308"], ["28", "308"], ["32", "308"], ["32", "308"], ["32", "308"], ["39", "308"], ["39", "308"], ["39", "308"], ["45", "308"], ["45", "308"], ["50", "308"], ["50", "308"], ["75", "308"], ["135", "308"], ["138", "308"], ["173", "308"], ["175", "308"], ["173", "308"], ["173", "308"], ["186", "308"], ["186", "308"], ["268", "308"], ["273", "308"], ["276", "308"], ["279", "308"], ["278", "308"], ["276", "308"], ["276", "308"], ["301", "308"], ["301", "308"], ["304", "308"], ["304", "308"], ["295", "308"], ["289", "308"], ["288", "308"], ["288", "308"], ["286", "308"], ["286", "308"], ["283", "308"], ["210", "308"], ["213", "308"], ["213", "308"], ["205", "308"], ["221", "308"], ["224", "308"], ["224", "308"], ["216", "308"], ["230", "308"], ["246", "308"], ["246", "308"], ["245", "308"], ["244", "308"], ["244", "308"], ["243", "308"], ["237", "308"], ["236", "308"], ["236", "308"], ["230", "308"], ["230", "308"], ["227", "308"], ["146", "308"], ["149", "308"], ["149", "308"], ["141", "308"], ["155", "308"], ["160", "308"], ["159", "308"], ["159", "308"], ["155", "308"], ["155", "308"], ["152", "308"], ["84", "308"], ["90", "308"], ["84", "308"], ["84", "308"], ["99", "308"], ["102", "308"], ["102", "308"], ["81", "308"], ["108", "308"], ["115", "308"], ["115", "308"], ["114", "308"], ["114", "308"], ["108", "308"], ["108", "308"], ["105", "308"], ["65", "308"], ["69", "308"], ["65", "308"], ["65", "308"], ["63", "308"], ["17", "18"], ["26", "24"], ["30", "28"], ["34", "32"], ["41", "39"], ["17", "45"], ["17", "50"], ["175", "173"], ["175", "173"], ["17", "186"], ["17", "268"], ["17", "20"], ["17", "57"], ["69", "65"], ["17", "75"], ["17", "135"], ["17", "195"], ["17", "273"], ["17", "301"], ["268", "301"], ["286", "301"], ["301", "304"], ["17", "304"], ["20", "26"], ["17", "26"], ["26", "30"], ["17", "30"], ["24", "34"], ["17", "34"], ["17", "41"], ["24", "41"], ["57", "60"], ["63", "60"], ["17", "60"], ["24", "60"], ["17", "63"], ["60", "63"], ["75", "78"], ["81", "78"], ["17", "78"], ["60", "78"], ["102", "81"], ["17", "81"], ["90", "84"], ["17", "84"], ["135", "138"], ["141", "138"], ["17", "138"], ["78", "138"], ["149", "141"], ["17", "141"], ["177", "175"], ["177", "175"], ["17", "175"], ["138", "175"], ["195", "198"], ["205", "198"], ["17", "198"], ["200", "198"], ["200", "198"], ["198", "205"], ["259", "205"], ["17", "205"], ["273", "276"], ["283", "276"], ["17", "276"], ["278", "276"], ["278", "276"], ["297", "283"], ["17", "283"], ["288", "286"], ["288", "286"], ["24", "35"], ["17", "35"], ["17", "42"], ["24", "42"], ["60", "69"], ["17", "69"], ["17", "99"], ["17", "146"], ["177", "176"], ["177", "176"], ["17", "176"], ["17", "183"], ["138", "183"], ["213", "200"], ["17", "200"], ["138", "200"], ["17", "210"], ["295", "278"], ["17", "278"], ["213", "278"], ["138", "278"], ["60", "70"], ["17", "70"], ["17", "90"], ["99", "102"], ["105", "102"], ["17", "102"], ["78", "102"], ["128", "102"], ["122", "105"], ["17", "105"], ["114", "108"], ["114", "108"], ["146", "149"], ["152", "149"], ["17", "149"], ["138", "149"], ["167", "149"], ["149", "152"], ["17", "152"], ["159", "155"], ["159", "155"], ["138", "177"], ["17", "177"], ["213", "201"], ["17", "201"], ["138", "201"], ["210", "213"], ["216", "213"], ["17", "213"], ["138", "213"], ["224", "216"], ["17", "216"], ["295", "279"], ["17", "279"], ["213", "279"], ["138", "279"], ["268", "288"], ["286", "288"], ["17", "288"], ["28", "288"], ["236", "288"], ["159", "288"], ["114", "288"], ["138", "178"], ["17", "178"], ["17", "221"], ["268", "289"], ["286", "289"], ["17", "289"], ["28", "114"], ["17", "114"], ["39", "159"], ["155", "159"], ["28", "159"], ["114", "159"], ["17", "159"], ["221", "224"], ["227", "224"], ["17", "224"], ["213", "224"], ["262", "224"], ["262", "227"], ["17", "227"], ["236", "230"], ["236", "230"], ["39", "160"], ["155", "160"], ["17", "295"], ["213", "295"], ["138", "295"], ["297", "295"], ["297", "295"], ["230", "236"], ["243", "236"], ["243", "236"], ["17", "236"], ["276", "297"], ["17", "297"], ["102", "122"], ["17", "122"], ["230", "237"], ["243", "237"], ["243", "237"], ["102", "119"], ["17", "119"], ["119", "128"], ["17", "128"], ["149", "167"], ["17", "167"], ["244", "243"], ["244", "243"], ["245", "243"], ["17", "243"], ["245", "244"], ["245", "244"], ["246", "245"], ["246", "245"], ["28", "245"], ["236", "245"], ["159", "245"], ["114", "245"], ["17", "245"], ["39", "246"], ["224", "262"], ["17", "262"], ["224", "262"], ["198", "259"], ["17", "259"], ["60", "60"], ["60", "69"], ["60", "70"], ["60", "66"], ["60", "65"], ["60", "63"], ["78", "81"], ["78", "84"], ["78", "102"], ["78", "85"], ["78", "92"], ["78", "91"], ["78", "90"], ["78", "86"], ["78", "99"], ["78", "78"], ["138", "146"], ["138", "149"], ["138", "138"], ["138", "141"], ["198", "198"], ["198", "213"], ["198", "201"], ["198", "205"], ["198", "210"], ["198", "200"], ["276", "292"], ["276", "279"], ["276", "283"], ["276", "291"], ["276", "289"], ["276", "288"], ["276", "276"], ["276", "286"], ["276", "295"], ["276", "278"], ["276", "297"], ["102", "115"], ["102", "128"], ["102", "102"], ["102", "114"], ["102", "119"], ["102", "108"], ["102", "116"], ["102", "122"], ["102", "126"], ["102", "105"], ["102", "110"], ["102", "117"], ["102", "125"], ["102", "109"], ["149", "167"], ["149", "161"], ["149", "149"], ["149", "152"], ["149", "164"], ["149", "155"], ["149", "160"], ["149", "159"], ["149", "165"], ["149", "156"], ["213", "213"], ["213", "221"], ["213", "224"], ["213", "216"], ["224", "230"], ["224", "257"], ["224", "232"], ["224", "244"], ["224", "243"], ["224", "245"], ["224", "256"], ["224", "262"], ["224", "247"], ["224", "238"], ["224", "231"], ["224", "259"], ["224", "246"], ["224", "224"], ["224", "239"], ["224", "236"], ["224", "237"], ["224", "251"], ["224", "227"], ["224", "250"]], "features": {"17": "<(METHOD,main)<SUB>1</SUB>>", "19": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "21": "<(IDENTIFIER,this,init_io())<SUB>2</SUB>>", "23": "<(LOCAL,int M: int)<SUB>3</SUB>>", "25": "<(IDENTIFIER,N,int N = nint())<SUB>3</SUB>>", "27": "<(IDENTIFIER,this,nint())<SUB>3</SUB>>", "29": "<(IDENTIFIER,M,int M = nint())<SUB>3</SUB>>", "31": "<(IDENTIFIER,this,nint())<SUB>3</SUB>>", "33": "<(IDENTIFIER,choose,choose = new int[N + 1][])<SUB>4</SUB>>", "35": "<(&lt;operator&gt;.addition,N + 1)<SUB>4</SUB>>", "37": "<(LITERAL,1,N + 1)<SUB>4</SUB>>", "39": "<(&lt;operator&gt;.assignment,long[] ways = new long[N + 1])<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.alloc,new long[N + 1])>", "43": "<(IDENTIFIER,N,N + 1)<SUB>5</SUB>>", "45": "<(&lt;operator&gt;.assignment,ways[0] = 1)<SUB>6</SUB>>", "47": "<(IDENTIFIER,ways,ways[0] = 1)<SUB>6</SUB>>", "49": "<(LITERAL,1,ways[0] = 1)<SUB>6</SUB>>", "51": "<(&lt;operator&gt;.indexAccess,ways[1])<SUB>6</SUB>>", "53": "<(LITERAL,1,ways[1] = 1)<SUB>6</SUB>>", "55": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt;= N); i++),for (int i = 0; Some(i &lt;= N); i++))<SUB>7</SUB>>", "57": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>7</SUB>>", "59": "<(LITERAL,0,int i = 0)<SUB>7</SUB>>", "61": "<(IDENTIFIER,i,i &lt;= N)<SUB>7</SUB>>", "63": "<(&lt;operator&gt;.postIncrement,i++)<SUB>7</SUB>>", "65": "<(&lt;operator&gt;.assignment,choose[i] = new int[i + 1])<SUB>7</SUB>>", "67": "<(IDENTIFIER,choose,choose[i] = new int[i + 1])<SUB>7</SUB>>", "69": "<(&lt;operator&gt;.alloc,new int[i + 1])>", "71": "<(IDENTIFIER,i,i + 1)<SUB>7</SUB>>", "73": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt;= N); i++),for (int i = 0; Some(i &lt;= N); i++))<SUB>8</SUB>>", "75": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>8</SUB>>", "77": "<(LITERAL,0,int i = 0)<SUB>8</SUB>>", "79": "<(IDENTIFIER,i,i &lt;= N)<SUB>8</SUB>>", "81": "<(&lt;operator&gt;.postIncrement,i++)<SUB>8</SUB>>", "83": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>>", "85": "<(&lt;operator&gt;.indexAccess,choose[i][0])<SUB>9</SUB>>", "87": "<(IDENTIFIER,choose,choose[i][0] = choose[i][i] = 1)<SUB>9</SUB>>", "89": "<(LITERAL,0,choose[i][0] = choose[i][i] = 1)<SUB>9</SUB>>", "91": "<(&lt;operator&gt;.indexAccess,choose[i][i])<SUB>9</SUB>>", "93": "<(IDENTIFIER,choose,choose[i][i] = 1)<SUB>9</SUB>>", "95": "<(IDENTIFIER,i,choose[i][i] = 1)<SUB>9</SUB>>", "97": "<(CONTROL_STRUCTURE,for (int j = 1; Some(j &lt; i); j++),for (int j = 1; Some(j &lt; i); j++))<SUB>10</SUB>>", "99": "<(&lt;operator&gt;.assignment,int j = 1)<SUB>10</SUB>>", "101": "<(LITERAL,1,int j = 1)<SUB>10</SUB>>", "103": "<(IDENTIFIER,j,j &lt; i)<SUB>10</SUB>>", "105": "<(&lt;operator&gt;.postIncrement,j++)<SUB>10</SUB>>", "107": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "109": "<(&lt;operator&gt;.indexAccess,choose[i][j])<SUB>11</SUB>>", "111": "<(IDENTIFIER,choose,choose[i][j] = (choose[i - 1][j - 1] + choose[i - 1][j]) % M)<SUB>11</SUB>>", "113": "<(IDENTIFIER,j,choose[i][j] = (choose[i - 1][j - 1] + choose[i - 1][j]) % M)<SUB>11</SUB>>", "115": "<(&lt;operator&gt;.addition,choose[i - 1][j - 1] + choose[i - 1][j])<SUB>11</SUB>>", "117": "<(&lt;operator&gt;.indexAccess,choose[i - 1])<SUB>11</SUB>>", "119": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>11</SUB>>", "121": "<(LITERAL,1,i - 1)<SUB>11</SUB>>", "123": "<(IDENTIFIER,j,j - 1)<SUB>11</SUB>>", "125": "<(&lt;operator&gt;.indexAccess,choose[i - 1][j])<SUB>11</SUB>>", "127": "<(IDENTIFIER,choose,choose[i - 1][j - 1] + choose[i - 1][j])<SUB>11</SUB>>", "129": "<(IDENTIFIER,i,i - 1)<SUB>11</SUB>>", "131": "<(IDENTIFIER,j,choose[i - 1][j - 1] + choose[i - 1][j])<SUB>11</SUB>>", "133": "<(CONTROL_STRUCTURE,for (int i = 2; Some(i &lt;= N); i++),for (int i = 2; Some(i &lt;= N); i++))<SUB>14</SUB>>", "135": "<(&lt;operator&gt;.assignment,int i = 2)<SUB>14</SUB>>", "137": "<(LITERAL,2,int i = 2)<SUB>14</SUB>>", "139": "<(IDENTIFIER,i,i &lt;= N)<SUB>14</SUB>>", "141": "<(&lt;operator&gt;.postIncrement,i++)<SUB>14</SUB>>", "143": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>14</SUB>>", "145": "<(LOCAL,int j: int)<SUB>15</SUB>>", "147": "<(IDENTIFIER,j,int j = 0)<SUB>15</SUB>>", "149": "<(&lt;operator&gt;.lessThan,j &lt; i)<SUB>15</SUB>>", "151": "<(IDENTIFIER,i,j &lt; i)<SUB>15</SUB>>", "153": "<(IDENTIFIER,j,j++)<SUB>15</SUB>>", "155": "<(&lt;operator&gt;.assignment,ways[i] = (ways[i] + choose[i - 1][j]) % M)<SUB>16</SUB>>", "157": "<(IDENTIFIER,ways,ways[i] = (ways[i] + choose[i - 1][j]) % M)<SUB>16</SUB>>", "159": "<(&lt;operator&gt;.modulo,(ways[i] + choose[i - 1][j]) % M)<SUB>16</SUB>>", "161": "<(&lt;operator&gt;.indexAccess,ways[i])<SUB>16</SUB>>", "163": "<(IDENTIFIER,i,ways[i] + choose[i - 1][j])<SUB>16</SUB>>", "165": "<(&lt;operator&gt;.indexAccess,choose[i - 1])<SUB>16</SUB>>", "167": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>16</SUB>>", "169": "<(LITERAL,1,i - 1)<SUB>16</SUB>>", "171": "<(IDENTIFIER,M,(ways[i] + choose[i - 1][j]) % M)<SUB>16</SUB>>", "173": "<(&lt;operator&gt;.assignment,long[][] dp = new long[(N + 1) / 2 + 1][N + 1])<SUB>19</SUB>>", "175": "<(&lt;operator&gt;.alloc,new long[(N + 1) / 2 + 1][N + 1])>", "177": "<(&lt;operator&gt;.division,(N + 1) / 2)<SUB>19</SUB>>", "179": "<(IDENTIFIER,N,N + 1)<SUB>19</SUB>>", "181": "<(LITERAL,2,(N + 1) / 2)<SUB>19</SUB>>", "183": "<(&lt;operator&gt;.addition,N + 1)<SUB>19</SUB>>", "185": "<(LITERAL,1,N + 1)<SUB>19</SUB>>", "187": "<(&lt;operator&gt;.indexAccess,dp[0][0])<SUB>20</SUB>>", "189": "<(IDENTIFIER,dp,dp[0][0] = 1)<SUB>20</SUB>>", "191": "<(LITERAL,0,dp[0][0] = 1)<SUB>20</SUB>>", "193": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt;= (N + 1) / 2); i++),for (int i = 1; Some(i &lt;= (N + 1) / 2); i++))<SUB>21</SUB>>", "195": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>21</SUB>>", "197": "<(LITERAL,1,int i = 1)<SUB>21</SUB>>", "199": "<(IDENTIFIER,i,i &lt;= (N + 1) / 2)<SUB>21</SUB>>", "201": "<(&lt;operator&gt;.addition,N + 1)<SUB>21</SUB>>", "203": "<(LITERAL,1,N + 1)<SUB>21</SUB>>", "205": "<(&lt;operator&gt;.postIncrement,i++)<SUB>21</SUB>>", "207": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>21</SUB>>", "209": "<(LOCAL,int j: int)<SUB>22</SUB>>", "211": "<(IDENTIFIER,j,int j = 1)<SUB>22</SUB>>", "213": "<(&lt;operator&gt;.lessEqualsThan,j &lt;= N)<SUB>22</SUB>>", "215": "<(IDENTIFIER,N,j &lt;= N)<SUB>22</SUB>>", "217": "<(IDENTIFIER,j,j++)<SUB>22</SUB>>", "219": "<(CONTROL_STRUCTURE,for (int k = 1; Some(k &lt;= j); k++),for (int k = 1; Some(k &lt;= j); k++))<SUB>23</SUB>>", "221": "<(&lt;operator&gt;.assignment,int k = 1)<SUB>23</SUB>>", "223": "<(LITERAL,1,int k = 1)<SUB>23</SUB>>", "225": "<(IDENTIFIER,k,k &lt;= j)<SUB>23</SUB>>", "227": "<(&lt;operator&gt;.postIncrement,k++)<SUB>23</SUB>>", "229": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>23</SUB>>", "231": "<(&lt;operator&gt;.indexAccess,dp[i][j])<SUB>24</SUB>>", "233": "<(IDENTIFIER,dp,dp[i][j] = (dp[i][j] + ways[k] * choose[j][k] % M * dp[i - 1][j - k] % M) % M)<SUB>24</SUB>>", "235": "<(IDENTIFIER,j,dp[i][j] = (dp[i][j] + ways[k] * choose[j][k] % M * dp[i - 1][j - k] % M) % M)<SUB>24</SUB>>", "237": "<(&lt;operator&gt;.addition,dp[i][j] + ways[k] * choose[j][k] % M * dp[i - 1][j - k] % M)<SUB>24</SUB>>", "239": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>24</SUB>>", "241": "<(IDENTIFIER,i,dp[i][j] + ways[k] * choose[j][k] % M * dp[i - 1][j - k] % M)<SUB>24</SUB>>", "243": "<(&lt;operator&gt;.modulo,ways[k] * choose[j][k] % M * dp[i - 1][j - k] % M)<SUB>24</SUB>>", "245": "<(&lt;operator&gt;.modulo,ways[k] * choose[j][k] % M)<SUB>24</SUB>>", "247": "<(&lt;operator&gt;.indexAccess,ways[k])<SUB>24</SUB>>", "249": "<(IDENTIFIER,k,ways[k] * choose[j][k])<SUB>24</SUB>>", "251": "<(&lt;operator&gt;.indexAccess,choose[j])<SUB>24</SUB>>", "253": "<(IDENTIFIER,j,ways[k] * choose[j][k])<SUB>24</SUB>>", "255": "<(IDENTIFIER,M,ways[k] * choose[j][k] % M)<SUB>24</SUB>>", "257": "<(&lt;operator&gt;.indexAccess,dp[i - 1])<SUB>24</SUB>>", "259": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>24</SUB>>", "261": "<(LITERAL,1,i - 1)<SUB>24</SUB>>", "263": "<(IDENTIFIER,j,j - k)<SUB>24</SUB>>", "265": "<(IDENTIFIER,M,ways[k] * choose[j][k] % M * dp[i - 1][j - k] % M)<SUB>24</SUB>>", "267": "<(LOCAL,long ans: long)<SUB>28</SUB>>", "269": "<(IDENTIFIER,ans,long ans = 0)<SUB>28</SUB>>", "271": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt;= (N + 1) / 2); i++),for (int i = 1; Some(i &lt;= (N + 1) / 2); i++))<SUB>29</SUB>>", "273": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>29</SUB>>", "275": "<(LITERAL,1,int i = 1)<SUB>29</SUB>>", "277": "<(IDENTIFIER,i,i &lt;= (N + 1) / 2)<SUB>29</SUB>>", "279": "<(&lt;operator&gt;.addition,N + 1)<SUB>29</SUB>>", "281": "<(LITERAL,1,N + 1)<SUB>29</SUB>>", "283": "<(&lt;operator&gt;.postIncrement,i++)<SUB>29</SUB>>", "285": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>29</SUB>>", "287": "<(IDENTIFIER,ans,ans = (ans + dp[i][N - (i - 1)]) % M)<SUB>30</SUB>>", "289": "<(&lt;operator&gt;.addition,ans + dp[i][N - (i - 1)])<SUB>30</SUB>>", "291": "<(&lt;operator&gt;.indexAccess,dp[i][N - (i - 1)])<SUB>30</SUB>>", "293": "<(IDENTIFIER,dp,ans + dp[i][N - (i - 1)])<SUB>30</SUB>>", "295": "<(&lt;operator&gt;.subtraction,N - (i - 1))<SUB>30</SUB>>", "297": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>30</SUB>>", "299": "<(LITERAL,1,i - 1)<SUB>30</SUB>>", "301": "<(println,println(ans))<SUB>32</SUB>>", "303": "<(IDENTIFIER,ans,println(ans))<SUB>32</SUB>>", "305": "<(IDENTIFIER,out,close())<SUB>33</SUB>>", "307": "<(MODIFIER,STATIC)>"}}