{"edges": [["26", "28"], ["26", "163"], ["26", "164"], ["26", "165"], ["28", "4"], ["28", "29"], ["28", "32"], ["28", "6"], ["28", "43"], ["28", "46"], ["28", "8"], ["28", "57"], ["28", "60"], ["28", "63"], ["28", "64"], ["28", "70"], ["28", "71"], ["28", "10"], ["28", "75"], ["28", "78"], ["28", "79"], ["28", "82"], ["28", "85"], ["28", "111"], ["28", "114"], ["28", "115"], ["28", "118"], ["28", "119"], ["28", "123"], ["28", "158"], ["28", "161"], ["29", "30"], ["29", "31"], ["32", "3"], ["32", "33"], ["33", "34"], ["33", "37"], ["33", "42"], ["34", "35"], ["34", "36"], ["37", "38"], ["37", "39"], ["39", "40"], ["39", "41"], ["43", "44"], ["43", "45"], ["46", "5"], ["46", "47"], ["47", "48"], ["47", "51"], ["47", "56"], ["48", "49"], ["48", "50"], ["51", "52"], ["51", "53"], ["53", "54"], ["53", "55"], ["57", "58"], ["57", "59"], ["60", "7"], ["60", "61"], ["61", "62"], ["64", "65"], ["64", "66"], ["66", "67"], ["66", "68"], ["68", "69"], ["71", "72"], ["71", "73"], ["73", "74"], ["75", "76"], ["75", "77"], ["78", "9"], ["79", "80"], ["79", "81"], ["82", "11"], ["82", "83"], ["83", "84"], ["85", "86"], ["85", "87"], ["85", "90"], ["85", "93"], ["85", "95"], ["87", "88"], ["87", "89"], ["90", "91"], ["90", "92"], ["93", "94"], ["95", "96"], ["95", "97"], ["95", "103"], ["95", "108"], ["97", "98"], ["97", "99"], ["99", "100"], ["99", "101"], ["101", "102"], ["103", "104"], ["103", "107"], ["104", "105"], ["104", "106"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "113"], ["115", "116"], ["115", "117"], ["119", "120"], ["119", "121"], ["121", "122"], ["123", "124"], ["123", "126"], ["124", "125"], ["126", "127"], ["126", "128"], ["126", "132"], ["128", "129"], ["128", "130"], ["130", "131"], ["132", "133"], ["132", "138"], ["133", "134"], ["133", "137"], ["134", "135"], ["134", "136"], ["138", "139"], ["138", "156"], ["139", "140"], ["139", "141"], ["139", "144"], ["139", "147"], ["139", "150"], ["141", "142"], ["141", "143"], ["144", "145"], ["144", "146"], ["147", "148"], ["147", "149"], ["150", "151"], ["151", "152"], ["151", "155"], ["152", "153"], ["152", "154"], ["156", "157"], ["158", "159"], ["158", "160"], ["161", "162"], ["29", "36"], ["32", "45"], ["43", "50"], ["46", "59"], ["57", "61"], ["60", "68"], ["64", "73"], ["71", "77"], ["75", "78"], ["78", "81"], ["79", "83"], ["82", "87"], ["111", "115"], ["115", "121"], ["119", "124"], ["158", "161"], ["161", "165"], ["31", "29"], ["45", "43"], ["59", "57"], ["61", "60"], ["66", "64"], ["73", "71"], ["77", "75"], ["81", "79"], ["83", "82"], ["87", "90"], ["90", "101"], ["90", "111"], ["93", "90"], ["121", "119"], ["124", "130"], ["124", "158"], ["34", "41"], ["37", "32"], ["48", "55"], ["51", "46"], ["68", "66"], ["97", "104"], ["103", "108"], ["108", "93"], ["128", "134"], ["36", "34"], ["39", "37"], ["50", "48"], ["53", "51"], ["99", "97"], ["104", "103"], ["130", "128"], ["133", "124"], ["133", "141"], ["41", "39"], ["55", "53"], ["101", "99"], ["134", "133"], ["156", "124"], ["141", "144"], ["144", "152"], ["144", "156"], ["147", "144"], ["151", "147"], ["152", "151"], ["26", "31"], ["27", "165"], ["29", "165"], ["37", "165"], ["37", "165"], ["37", "165"], ["32", "165"], ["43", "165"], ["51", "165"], ["51", "165"], ["51", "165"], ["46", "165"], ["57", "165"], ["66", "165"], ["66", "165"], ["64", "165"], ["64", "165"], ["71", "165"], ["71", "165"], ["71", "165"], ["75", "165"], ["78", "165"], ["79", "165"], ["82", "165"], ["83", "165"], ["82", "165"], ["82", "165"], ["87", "165"], ["90", "165"], ["90", "165"], ["90", "165"], ["111", "165"], ["115", "165"], ["121", "165"], ["119", "165"], ["124", "165"], ["124", "165"], ["158", "165"], ["158", "165"], ["161", "165"], ["161", "165"], ["128", "165"], ["133", "165"], ["133", "165"], ["141", "165"], ["141", "165"], ["144", "165"], ["144", "165"], ["156", "165"], ["151", "165"], ["151", "165"], ["147", "165"], ["147", "165"], ["99", "165"], ["101", "165"], ["99", "165"], ["97", "165"], ["97", "165"], ["103", "165"], ["103", "165"], ["108", "165"], ["108", "165"], ["93", "165"], ["111", "165"], ["26", "27"], ["26", "29"], ["26", "43"], ["26", "57"], ["66", "64"], ["66", "64"], ["73", "71"], ["26", "75"], ["26", "79"], ["26", "115"], ["121", "119"], ["29", "32"], ["26", "32"], ["34", "32"], ["37", "32"], ["43", "46"], ["26", "46"], ["48", "46"], ["51", "46"], ["57", "60"], ["26", "60"], ["61", "60"], ["75", "78"], ["26", "78"], ["79", "82"], ["26", "82"], ["83", "82"], ["26", "87"], ["26", "111"], ["78", "111"], ["108", "111"], ["46", "158"], ["26", "158"], ["115", "158"], ["156", "158"], ["158", "161"], ["26", "161"], ["26", "34"], ["26", "42"], ["26", "48"], ["26", "56"], ["32", "61"], ["26", "61"], ["26", "66"], ["68", "66"], ["26", "73"], ["61", "83"], ["26", "83"], ["87", "90"], ["93", "90"], ["26", "90"], ["64", "90"], ["90", "93"], ["26", "93"], ["99", "97"], ["99", "97"], ["26", "103"], ["111", "121"], ["26", "121"], ["119", "124"], ["130", "124"], ["26", "124"], ["130", "128"], ["34", "37"], ["26", "37"], ["48", "51"], ["26", "51"], ["60", "68"], ["26", "68"], ["78", "108"], ["26", "108"], ["97", "108"], ["66", "99"], ["26", "99"], ["101", "99"], ["124", "130"], ["26", "130"], ["71", "133"], ["26", "133"], ["82", "101"], ["26", "101"], ["128", "141"], ["26", "141"], ["26", "147"], ["128", "147"], ["115", "156"], ["26", "156"], ["141", "144"], ["147", "144"], ["26", "144"], ["144", "147"], ["26", "151"], ["90", "99"], ["90", "103"], ["90", "104"], ["90", "97"], ["90", "93"], ["90", "101"], ["90", "108"], ["90", "90"], ["124", "128"], ["124", "130"], ["124", "134"], ["124", "124"], ["124", "133"], ["133", "141"], ["133", "144"], ["133", "156"], ["144", "152"], ["144", "147"], ["144", "151"], ["144", "144"]], "features": {"26": "<(METHOD,main)<SUB>1</SUB>>", "28": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "29": "<(&lt;operator&gt;.assignment,ANY jk = new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "31": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "3": "<(IDENTIFIER,jk,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "34": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "36": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>2</SUB>>", "38": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "40": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>2</SUB>>", "42": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "43": "<(&lt;operator&gt;.assignment,ANY out = new PrintWriter(new OutputStreamWriter(System.out)))<SUB>3</SUB>>", "45": "<(&lt;operator&gt;.alloc,new PrintWriter(new OutputStreamWriter(System.out)))<SUB>3</SUB>>", "5": "<(IDENTIFIER,out,new PrintWriter(new OutputStreamWriter(System.out)))<SUB>3</SUB>>", "48": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "50": "<(&lt;operator&gt;.alloc,new OutputStreamWriter(System.out))<SUB>3</SUB>>", "52": "<(IDENTIFIER,$obj2,new OutputStreamWriter(System.out))>", "54": "<(IDENTIFIER,System,new OutputStreamWriter(System.out))<SUB>3</SUB>>", "56": "<(IDENTIFIER,$obj2,&lt;empty&gt;)>", "57": "<(&lt;operator&gt;.assignment,ANY ana = new StringTokenizer(jk.readLine()))<SUB>4</SUB>>", "59": "<(&lt;operator&gt;.alloc,new StringTokenizer(jk.readLine()))<SUB>4</SUB>>", "7": "<(IDENTIFIER,ana,new StringTokenizer(jk.readLine()))<SUB>4</SUB>>", "62": "<(IDENTIFIER,jk,readLine())<SUB>4</SUB>>", "64": "<(&lt;operator&gt;.assignment,int n = parseInt(ana.nextToken()))<SUB>5</SUB>>", "66": "<(parseInt,parseInt(ana.nextToken()))<SUB>5</SUB>>", "68": "<(nextToken,nextToken())<SUB>5</SUB>>", "70": "<(LOCAL,int[] t: int[])<SUB>7</SUB>>", "72": "<(IDENTIFIER,t,int[] t = new int[101])<SUB>7</SUB>>", "74": "<(LITERAL,101,new int[101])<SUB>7</SUB>>", "75": "<(&lt;operator&gt;.assignment,ANY v = new ArrayList&lt;&gt;())<SUB>8</SUB>>", "77": "<(&lt;operator&gt;.alloc,new ArrayList&lt;&gt;())<SUB>8</SUB>>", "9": "<(IDENTIFIER,v,new ArrayList&lt;&gt;())<SUB>8</SUB>>", "80": "<(IDENTIFIER,ana,ana = new StringTokenizer(jk.readLine()))<SUB>9</SUB>>", "82": "<(&lt;init&gt;,new StringTokenizer(jk.readLine()))<SUB>9</SUB>>", "83": "<(readLine,readLine())<SUB>9</SUB>>", "85": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>10</SUB>>", "87": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>10</SUB>>", "89": "<(LITERAL,0,int i = 0)<SUB>10</SUB>>", "91": "<(IDENTIFIER,i,i &lt; n)<SUB>10</SUB>>", "93": "<(&lt;operator&gt;.postIncrement,i++)<SUB>10</SUB>>", "95": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>11</SUB>>", "97": "<(&lt;operator&gt;.assignment,int y = parseInt(ana.nextToken()))<SUB>13</SUB>>", "99": "<(parseInt,parseInt(ana.nextToken()))<SUB>13</SUB>>", "101": "<(nextToken,nextToken())<SUB>13</SUB>>", "103": "<(&lt;operator&gt;.assignment,t[y] = 1)<SUB>14</SUB>>", "105": "<(IDENTIFIER,t,t[y] = 1)<SUB>14</SUB>>", "107": "<(LITERAL,1,t[y] = 1)<SUB>14</SUB>>", "109": "<(IDENTIFIER,v,add(y))<SUB>15</SUB>>", "111": "<(sort,sort(v))<SUB>17</SUB>>", "113": "<(IDENTIFIER,v,sort(v))<SUB>17</SUB>>", "115": "<(&lt;operator&gt;.assignment,int c = 0)<SUB>18</SUB>>", "117": "<(LITERAL,0,int c = 0)<SUB>18</SUB>>", "119": "<(&lt;operator&gt;.assignment,)<SUB>19</SUB>>", "121": "<(iterator,&lt;empty&gt;)<SUB>19</SUB>>", "123": "<(CONTROL_STRUCTURE,FOR,FOR)<SUB>19</SUB>>", "125": "<(IDENTIFIER,$iterLocal0,&lt;empty&gt;)>", "127": "<(LOCAL,ele: int)<SUB>19</SUB>>", "129": "<(IDENTIFIER,ele,&lt;empty&gt;)>", "131": "<(IDENTIFIER,$iterLocal0,&lt;empty&gt;)>", "133": "<(&lt;operator&gt;.equals,t[ele] == 1)<SUB>21</SUB>>", "135": "<(IDENTIFIER,t,t[ele] == 1)<SUB>21</SUB>>", "137": "<(LITERAL,1,t[ele] == 1)<SUB>21</SUB>>", "139": "<(CONTROL_STRUCTURE,for (int i = ele; Some(i &lt;= 100); i += ele),for (int i = ele; Some(i &lt;= 100); i += ele))<SUB>24</SUB>>", "141": "<(&lt;operator&gt;.assignment,int i = ele)<SUB>24</SUB>>", "143": "<(IDENTIFIER,ele,int i = ele)<SUB>24</SUB>>", "145": "<(IDENTIFIER,i,i &lt;= 100)<SUB>24</SUB>>", "147": "<(&lt;operator&gt;.assignmentPlus,i += ele)<SUB>24</SUB>>", "149": "<(IDENTIFIER,ele,i += ele)<SUB>24</SUB>>", "151": "<(&lt;operator&gt;.assignment,t[i] = 2)<SUB>26</SUB>>", "153": "<(IDENTIFIER,t,t[i] = 2)<SUB>26</SUB>>", "155": "<(LITERAL,2,t[i] = 2)<SUB>26</SUB>>", "157": "<(IDENTIFIER,c,c++)<SUB>28</SUB>>", "159": "<(IDENTIFIER,out,println(c))<SUB>32</SUB>>", "161": "<(flush,flush())<SUB>42</SUB>>", "163": "<(MODIFIER,PUBLIC)>", "165": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}