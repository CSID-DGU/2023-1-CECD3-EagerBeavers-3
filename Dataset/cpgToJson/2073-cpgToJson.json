{"edges": [["19", "20"], ["19", "21"], ["19", "114"], ["19", "115"], ["19", "116"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "36"], ["21", "37"], ["21", "41"], ["21", "42"], ["21", "43"], ["21", "46"], ["21", "50"], ["21", "82"], ["21", "92"], ["21", "95"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["34", "35"], ["37", "38"], ["37", "39"], ["39", "40"], ["43", "44"], ["43", "45"], ["46", "47"], ["46", "48"], ["48", "49"], ["50", "51"], ["50", "52"], ["50", "55"], ["50", "58"], ["50", "60"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "57"], ["58", "59"], ["60", "61"], ["60", "67"], ["61", "62"], ["61", "65"], ["62", "63"], ["62", "64"], ["65", "66"], ["67", "68"], ["67", "73"], ["68", "69"], ["68", "70"], ["70", "71"], ["70", "72"], ["73", "74"], ["73", "79"], ["74", "75"], ["74", "76"], ["76", "77"], ["76", "78"], ["79", "80"], ["79", "81"], ["82", "83"], ["82", "86"], ["83", "84"], ["83", "85"], ["86", "87"], ["86", "90"], ["86", "91"], ["87", "88"], ["87", "89"], ["92", "93"], ["92", "94"], ["95", "96"], ["95", "97"], ["95", "100"], ["95", "103"], ["95", "105"], ["97", "98"], ["97", "99"], ["100", "101"], ["100", "102"], ["103", "104"], ["105", "106"], ["105", "109"], ["106", "107"], ["106", "108"], ["109", "110"], ["109", "113"], ["110", "111"], ["110", "112"], ["22", "28"], ["25", "32"], ["30", "34"], ["34", "39"], ["37", "43"], ["43", "48"], ["46", "52"], ["82", "92"], ["92", "97"], ["24", "22"], ["26", "25"], ["32", "30"], ["39", "37"], ["48", "46"], ["52", "55"], ["55", "62"], ["55", "83"], ["58", "55"], ["83", "87"], ["86", "82"], ["97", "100"], ["100", "116"], ["100", "108"], ["103", "100"], ["105", "103"], ["28", "26"], ["61", "70"], ["87", "86"], ["106", "110"], ["109", "105"], ["62", "65"], ["65", "61"], ["68", "76"], ["68", "58"], ["108", "106"], ["110", "109"], ["70", "68"], ["74", "79"], ["79", "58"], ["76", "74"], ["19", "24"], ["20", "116"], ["22", "116"], ["25", "116"], ["25", "116"], ["30", "116"], ["30", "116"], ["34", "116"], ["34", "116"], ["37", "116"], ["37", "116"], ["43", "116"], ["46", "116"], ["46", "116"], ["46", "116"], ["82", "116"], ["87", "116"], ["86", "116"], ["82", "116"], ["82", "116"], ["92", "116"], ["92", "116"], ["97", "116"], ["100", "116"], ["100", "116"], ["100", "116"], ["103", "116"], ["58", "116"], ["92", "116"], ["19", "20"], ["19", "22"], ["32", "30"], ["39", "37"], ["19", "43"], ["48", "46"], ["19", "82"], ["22", "25"], ["19", "25"], ["32", "34"], ["19", "34"], ["19", "52"], ["19", "92"], ["37", "92"], ["82", "92"], ["68", "92"], ["19", "97"], ["25", "32"], ["19", "32"], ["30", "39"], ["19", "39"], ["19", "48"], ["52", "55"], ["58", "55"], ["19", "55"], ["39", "55"], ["55", "58"], ["19", "58"], ["65", "61"], ["19", "86"], ["97", "100"], ["103", "100"], ["19", "100"], ["55", "100"], ["100", "103"], ["19", "103"], ["92", "105"], ["68", "105"], ["37", "105"], ["19", "105"], ["43", "87"], ["68", "87"], ["74", "87"], ["19", "87"], ["92", "109"], ["68", "109"], ["37", "109"], ["19", "109"], ["34", "65"], ["19", "65"], ["43", "68"], ["74", "68"], ["19", "68"], ["37", "68"], ["61", "68"], ["37", "74"], ["68", "74"], ["55", "79"], ["19", "79"], ["55", "58"], ["55", "68"], ["55", "61"], ["55", "70"], ["55", "65"], ["55", "55"], ["55", "62"], ["100", "105"], ["100", "100"], ["100", "103"], ["100", "110"], ["100", "106"], ["100", "108"], ["100", "109"], ["68", "74"], ["68", "76"], ["68", "79"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,int n: int)<SUB>4</SUB>>", "31": "<(IDENTIFIER,n,int n = nextInt())<SUB>4</SUB>>", "33": "<(IDENTIFIER,sc,nextInt())<SUB>4</SUB>>", "35": "<(IDENTIFIER,sc,nextLine())<SUB>5</SUB>>", "37": "<(&lt;operator&gt;.assignment,int[] x = new int[n])<SUB>6</SUB>>", "39": "<(&lt;operator&gt;.alloc,new int[n])>", "41": "<(LOCAL,int max: int)<SUB>8</SUB>>", "43": "<(&lt;operator&gt;.assignment,int max = 0)<SUB>8</SUB>>", "45": "<(LITERAL,0,int max = 0)<SUB>8</SUB>>", "47": "<(IDENTIFIER,pos,int pos = -1)<SUB>8</SUB>>", "49": "<(LITERAL,1,-1)<SUB>8</SUB>>", "51": "<(LOCAL,int i: int)<SUB>9</SUB>>", "53": "<(IDENTIFIER,i,int i = 0)<SUB>9</SUB>>", "55": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>9</SUB>>", "57": "<(IDENTIFIER,n,i &lt; n)<SUB>9</SUB>>", "59": "<(IDENTIFIER,i,i++)<SUB>9</SUB>>", "61": "<(&lt;operator&gt;.assignment,x[i] = nextInt())<SUB>10</SUB>>", "63": "<(IDENTIFIER,x,x[i] = nextInt())<SUB>10</SUB>>", "65": "<(nextInt,nextInt())<SUB>10</SUB>>", "67": "<(CONTROL_STRUCTURE,if (max &lt; x[i]),if (max &lt; x[i]))<SUB>11</SUB>>", "69": "<(IDENTIFIER,max,max &lt; x[i])<SUB>11</SUB>>", "71": "<(IDENTIFIER,x,max &lt; x[i])<SUB>11</SUB>>", "73": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>11</SUB>>", "75": "<(IDENTIFIER,max,max = x[i])<SUB>12</SUB>>", "77": "<(IDENTIFIER,x,max = x[i])<SUB>12</SUB>>", "79": "<(&lt;operator&gt;.assignment,pos = i)<SUB>13</SUB>>", "81": "<(IDENTIFIER,i,pos = i)<SUB>13</SUB>>", "83": "<(&lt;operator&gt;.indexAccess,x[pos])<SUB>16</SUB>>", "85": "<(IDENTIFIER,pos,x[pos] = (max == 1) ? 2 : 1)<SUB>16</SUB>>", "87": "<(&lt;operator&gt;.equals,max == 1)<SUB>16</SUB>>", "89": "<(LITERAL,1,max == 1)<SUB>16</SUB>>", "91": "<(LITERAL,1,(max == 1) ? 2 : 1)<SUB>16</SUB>>", "93": "<(IDENTIFIER,Arrays,sort(x))<SUB>18</SUB>>", "95": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>20</SUB>>", "97": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>20</SUB>>", "99": "<(LITERAL,0,int i = 0)<SUB>20</SUB>>", "101": "<(IDENTIFIER,i,i &lt; n)<SUB>20</SUB>>", "103": "<(&lt;operator&gt;.postIncrement,i++)<SUB>20</SUB>>", "105": "<(print,System.out.print(x[i] + &quot; &quot;))<SUB>21</SUB>>", "107": "<(IDENTIFIER,System,System.out.print(x[i] + &quot; &quot;))<SUB>21</SUB>>", "109": "<(&lt;operator&gt;.addition,x[i] + &quot; &quot;)<SUB>21</SUB>>", "111": "<(IDENTIFIER,x,x[i] + &quot; &quot;)<SUB>21</SUB>>", "113": "<(LITERAL,&quot; &quot;,x[i] + &quot; &quot;)<SUB>21</SUB>>", "115": "<(MODIFIER,STATIC)>"}}