{"edges": [["19", "20"], ["19", "21"], ["19", "88"], ["19", "89"], ["19", "90"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "40"], ["21", "43"], ["21", "44"], ["21", "51"], ["21", "52"], ["21", "69"], ["21", "76"], ["21", "83"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["40", "41"], ["40", "42"], ["44", "45"], ["44", "46"], ["46", "47"], ["46", "48"], ["46", "49"], ["46", "50"], ["52", "53"], ["52", "54"], ["54", "55"], ["54", "68"], ["55", "56"], ["55", "67"], ["56", "57"], ["56", "66"], ["57", "58"], ["57", "61"], ["58", "59"], ["58", "60"], ["61", "62"], ["61", "65"], ["62", "63"], ["62", "64"], ["69", "70"], ["69", "73"], ["70", "71"], ["70", "72"], ["73", "74"], ["73", "75"], ["76", "77"], ["76", "80"], ["77", "78"], ["77", "79"], ["80", "81"], ["80", "82"], ["83", "84"], ["83", "87"], ["84", "85"], ["84", "86"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "40"], ["40", "46"], ["44", "58"], ["52", "70"], ["83", "90"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["46", "44"], ["54", "52"], ["70", "73"], ["70", "77"], ["73", "77"], ["77", "80"], ["77", "86"], ["80", "86"], ["84", "83"], ["28", "26"], ["55", "54"], ["86", "84"], ["56", "55"], ["57", "56"], ["58", "62"], ["61", "57"], ["62", "61"], ["19", "24"], ["20", "90"], ["22", "90"], ["25", "90"], ["25", "90"], ["30", "90"], ["37", "90"], ["35", "90"], ["35", "90"], ["40", "90"], ["46", "90"], ["44", "90"], ["44", "90"], ["57", "90"], ["61", "90"], ["57", "90"], ["56", "90"], ["56", "90"], ["55", "90"], ["55", "90"], ["54", "90"], ["52", "90"], ["52", "90"], ["70", "90"], ["73", "90"], ["73", "90"], ["77", "90"], ["77", "90"], ["80", "90"], ["83", "90"], ["83", "90"], ["83", "90"], ["46", "90"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["19", "40"], ["46", "44"], ["46", "44"], ["46", "44"], ["46", "44"], ["55", "52"], ["55", "52"], ["19", "52"], ["22", "25"], ["19", "25"], ["56", "73"], ["19", "73"], ["19", "80"], ["70", "83"], ["73", "83"], ["80", "83"], ["19", "83"], ["25", "32"], ["19", "32"], ["32", "37"], ["19", "37"], ["19", "46"], ["35", "46"], ["40", "46"], ["55", "54"], ["55", "54"], ["19", "54"], ["52", "70"], ["19", "70"], ["70", "73"], ["62", "77"], ["19", "77"], ["56", "55"], ["56", "55"], ["58", "55"], ["19", "55"], ["57", "56"], ["57", "56"], ["61", "56"], ["19", "56"], ["58", "57"], ["58", "57"], ["61", "57"], ["61", "57"], ["44", "58"], ["19", "58"], ["46", "58"], ["62", "61"], ["62", "61"], ["58", "61"], ["19", "61"], ["19", "62"], ["30", "62"], ["70", "73"], ["77", "80"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY in = new Scanner(System.in))<SUB>4</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>4</SUB>>", "3": "<(IDENTIFIER,in,new Scanner(System.in))<SUB>4</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>4</SUB>>", "29": "<(LOCAL,long x: long)<SUB>5</SUB>>", "31": "<(IDENTIFIER,x,long x = nextLong())<SUB>5</SUB>>", "33": "<(IDENTIFIER,in,nextLong())<SUB>5</SUB>>", "35": "<(&lt;operator&gt;.assignment,long k = nextLong())<SUB>6</SUB>>", "37": "<(nextLong,nextLong())<SUB>6</SUB>>", "39": "<(LOCAL,long mod: long)<SUB>8</SUB>>", "41": "<(IDENTIFIER,mod,long mod = 1000000007)<SUB>8</SUB>>", "43": "<(LOCAL,long get: long)<SUB>9</SUB>>", "45": "<(IDENTIFIER,get,long get = power(2, k, mod))<SUB>9</SUB>>", "47": "<(IDENTIFIER,this,power(2, k, mod))<SUB>9</SUB>>", "49": "<(IDENTIFIER,k,power(2, k, mod))<SUB>9</SUB>>", "51": "<(LOCAL,long ans: long)<SUB>10</SUB>>", "53": "<(IDENTIFIER,ans,long ans = ((get % mod) * ((2 * x) % mod)) % mod - get + 1)<SUB>10</SUB>>", "55": "<(&lt;operator&gt;.subtraction,((get % mod) * ((2 * x) % mod)) % mod - get)<SUB>10</SUB>>", "57": "<(&lt;operator&gt;.multiplication,(get % mod) * ((2 * x) % mod))<SUB>10</SUB>>", "59": "<(IDENTIFIER,get,get % mod)<SUB>10</SUB>>", "61": "<(&lt;operator&gt;.modulo,(2 * x) % mod)<SUB>10</SUB>>", "63": "<(LITERAL,2,2 * x)<SUB>10</SUB>>", "65": "<(IDENTIFIER,mod,(2 * x) % mod)<SUB>10</SUB>>", "67": "<(IDENTIFIER,get,((get % mod) * ((2 * x) % mod)) % mod - get)<SUB>10</SUB>>", "69": "<(CONTROL_STRUCTURE,if (ans &lt; 0),if (ans &lt; 0))<SUB>11</SUB>>", "71": "<(IDENTIFIER,ans,ans &lt; 0)<SUB>11</SUB>>", "73": "<(&lt;operator&gt;.assignmentPlus,ans += mod)<SUB>12</SUB>>", "75": "<(IDENTIFIER,mod,ans += mod)<SUB>12</SUB>>", "77": "<(&lt;operator&gt;.equals,x == 0)<SUB>13</SUB>>", "79": "<(LITERAL,0,x == 0)<SUB>13</SUB>>", "81": "<(IDENTIFIER,ans,ans = 0)<SUB>14</SUB>>", "83": "<(println,System.out.println(ans))<SUB>15</SUB>>", "85": "<(IDENTIFIER,System,System.out.println(ans))<SUB>15</SUB>>", "87": "<(IDENTIFIER,ans,System.out.println(ans))<SUB>15</SUB>>", "89": "<(MODIFIER,STATIC)>"}}