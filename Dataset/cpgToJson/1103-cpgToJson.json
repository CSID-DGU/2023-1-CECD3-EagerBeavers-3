{"edges": [["21", "23"], ["21", "167"], ["21", "168"], ["21", "169"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "28"], ["23", "31"], ["23", "35"], ["23", "36"], ["23", "40"], ["24", "25"], ["24", "26"], ["27", "3"], ["28", "29"], ["28", "30"], ["31", "5"], ["31", "32"], ["32", "33"], ["32", "34"], ["36", "37"], ["36", "38"], ["38", "39"], ["40", "41"], ["40", "48"], ["40", "54"], ["41", "42"], ["41", "47"], ["42", "43"], ["42", "46"], ["43", "44"], ["43", "45"], ["48", "49"], ["49", "50"], ["49", "51"], ["49", "53"], ["51", "52"], ["54", "55"], ["55", "56"], ["55", "57"], ["55", "62"], ["55", "63"], ["55", "64"], ["55", "67"], ["55", "70"], ["55", "71"], ["55", "78"], ["55", "79"], ["55", "88"], ["55", "98"], ["55", "99"], ["55", "104"], ["55", "163"], ["57", "58"], ["57", "59"], ["59", "60"], ["59", "61"], ["64", "65"], ["64", "66"], ["67", "68"], ["67", "69"], ["71", "72"], ["71", "73"], ["73", "74"], ["73", "75"], ["73", "76"], ["73", "77"], ["79", "80"], ["79", "81"], ["81", "82"], ["81", "83"], ["81", "86"], ["81", "87"], ["83", "84"], ["83", "85"], ["88", "89"], ["88", "92"], ["89", "90"], ["89", "91"], ["92", "93"], ["92", "97"], ["93", "94"], ["93", "95"], ["93", "96"], ["99", "100"], ["99", "101"], ["101", "102"], ["101", "103"], ["104", "105"], ["104", "110"], ["105", "106"], ["105", "109"], ["106", "107"], ["106", "108"], ["110", "111"], ["110", "112"], ["110", "119"], ["110", "126"], ["110", "135"], ["112", "113"], ["112", "114"], ["114", "115"], ["114", "118"], ["115", "116"], ["115", "117"], ["119", "120"], ["119", "121"], ["121", "122"], ["121", "123"], ["121", "124"], ["121", "125"], ["126", "127"], ["126", "128"], ["128", "129"], ["128", "130"], ["128", "133"], ["128", "134"], ["130", "131"], ["130", "132"], ["135", "136"], ["135", "139"], ["135", "145"], ["136", "137"], ["136", "138"], ["139", "140"], ["139", "144"], ["140", "141"], ["140", "142"], ["140", "143"], ["145", "146"], ["146", "147"], ["146", "152"], ["146", "156"], ["147", "148"], ["147", "151"], ["148", "149"], ["148", "150"], ["152", "153"], ["153", "154"], ["153", "155"], ["156", "157"], ["157", "158"], ["158", "159"], ["158", "160"], ["160", "161"], ["160", "162"], ["163", "164"], ["163", "165"], ["163", "166"], ["24", "27"], ["27", "30"], ["28", "34"], ["31", "38"], ["36", "43"], ["26", "24"], ["30", "28"], ["32", "31"], ["38", "36"], ["41", "51"], ["41", "59"], ["34", "32"], ["42", "41"], ["49", "169"], ["43", "42"], ["51", "49"], ["57", "64"], ["64", "67"], ["67", "73"], ["71", "83"], ["79", "89"], ["99", "106"], ["163", "169"], ["59", "57"], ["73", "71"], ["81", "79"], ["89", "93"], ["89", "101"], ["101", "99"], ["105", "115"], ["105", "163"], ["83", "81"], ["93", "97"], ["97", "169"], ["106", "105"], ["112", "121"], ["119", "130"], ["126", "136"], ["114", "112"], ["121", "119"], ["128", "126"], ["136", "140"], ["136", "148"], ["115", "114"], ["130", "128"], ["140", "144"], ["144", "169"], ["147", "153"], ["147", "160"], ["148", "147"], ["153", "106"], ["158", "106"], ["160", "158"], ["21", "26"], ["144", "169"], ["97", "169"], ["22", "169"], ["24", "169"], ["27", "169"], ["28", "169"], ["31", "169"], ["31", "169"], ["36", "169"], ["36", "169"], ["41", "169"], ["41", "169"], ["59", "169"], ["57", "169"], ["57", "169"], ["64", "169"], ["64", "169"], ["67", "169"], ["67", "169"], ["71", "169"], ["71", "169"], ["81", "169"], ["81", "169"], ["79", "169"], ["79", "169"], ["89", "169"], ["89", "169"], ["89", "169"], ["93", "169"], ["93", "169"], ["93", "169"], ["93", "169"], ["21", "22"], ["21", "24"], ["21", "28"], ["38", "36"], ["24", "27"], ["21", "27"], ["28", "31"], ["21", "31"], ["27", "38"], ["21", "38"], ["42", "41"], ["42", "41"], ["21", "41"], ["43", "42"], ["43", "42"], ["21", "42"], ["21", "49"], ["51", "49"], ["31", "49"], ["59", "57"], ["59", "57"], ["21", "64"], ["57", "67"], ["21", "67"], ["73", "71"], ["73", "71"], ["73", "71"], ["73", "71"], ["81", "79"], ["81", "79"], ["81", "79"], ["81", "79"], ["101", "99"], ["101", "99"], ["36", "43"], ["21", "43"], ["21", "51"], ["81", "163"], ["128", "163"], ["21", "163"], ["64", "163"], ["158", "163"], ["81", "163"], ["128", "163"], ["43", "59"], ["21", "59"], ["21", "73"], ["57", "73"], ["31", "73"], ["38", "73"], ["73", "81"], ["21", "81"], ["83", "81"], ["83", "81"], ["73", "81"], ["73", "81"], ["71", "89"], ["21", "89"], ["79", "89"], ["21", "97"], ["89", "101"], ["21", "101"], ["89", "101"], ["64", "105"], ["158", "105"], ["21", "105"], ["67", "105"], ["153", "105"], ["114", "112"], ["114", "112"], ["121", "119"], ["121", "119"], ["121", "119"], ["121", "119"], ["128", "126"], ["128", "126"], ["128", "126"], ["128", "126"], ["21", "83"], ["73", "83"], ["81", "93"], ["21", "93"], ["83", "93"], ["81", "93"], ["64", "106"], ["158", "106"], ["21", "106"], ["21", "114"], ["105", "114"], ["81", "121"], ["128", "121"], ["21", "121"], ["112", "121"], ["81", "121"], ["128", "121"], ["81", "121"], ["128", "121"], ["121", "128"], ["21", "128"], ["121", "128"], ["83", "128"], ["121", "128"], ["121", "128"], ["119", "136"], ["21", "136"], ["126", "136"], ["21", "144"], ["21", "115"], ["105", "115"], ["121", "130"], ["21", "130"], ["83", "130"], ["128", "140"], ["21", "140"], ["121", "140"], ["128", "140"], ["148", "147"], ["148", "147"], ["99", "147"], ["21", "147"], ["21", "153"], ["121", "153"], ["136", "148"], ["21", "148"], ["136", "148"], ["21", "158"], ["121", "158"], ["21", "160"], ["121", "160"], ["41", "73"], ["41", "64"], ["41", "51"], ["41", "57"], ["41", "81"], ["41", "67"], ["41", "59"], ["41", "79"], ["41", "49"], ["41", "89"], ["41", "83"], ["41", "71"], ["89", "97"], ["89", "93"], ["89", "101"], ["89", "99"], ["89", "106"], ["89", "105"], ["105", "115"], ["105", "136"], ["105", "128"], ["105", "163"], ["105", "114"], ["105", "119"], ["105", "121"], ["105", "112"], ["105", "130"], ["105", "126"], ["136", "144"], ["136", "148"], ["136", "106"], ["136", "140"], ["136", "105"], ["136", "147"], ["147", "153"], ["147", "158"], ["147", "160"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new MyScanner())<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new MyScanner())<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new MyScanner())<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.assignment,ANY out = new PrintWriter(System.out))<SUB>3</SUB>>", "30": "<(&lt;operator&gt;.alloc,new PrintWriter(System.out))<SUB>3</SUB>>", "5": "<(IDENTIFIER,out,new PrintWriter(System.out))<SUB>3</SUB>>", "33": "<(IDENTIFIER,System,new PrintWriter(System.out))<SUB>3</SUB>>", "35": "<(LOCAL,int N: int)<SUB>4</SUB>>", "37": "<(IDENTIFIER,N,int N = nextInt())<SUB>4</SUB>>", "39": "<(IDENTIFIER,sc,nextInt())<SUB>4</SUB>>", "41": "<(&lt;operator&gt;.equals,N / 2 % 2 == 1)<SUB>5</SUB>>", "43": "<(&lt;operator&gt;.division,N / 2)<SUB>5</SUB>>", "45": "<(LITERAL,2,N / 2)<SUB>5</SUB>>", "47": "<(LITERAL,1,N / 2 % 2 == 1)<SUB>5</SUB>>", "49": "<(output,output(-1, out))<SUB>6</SUB>>", "51": "<(&lt;operator&gt;.minus,-1)<SUB>6</SUB>>", "53": "<(IDENTIFIER,out,output(-1, out))<SUB>6</SUB>>", "55": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>7</SUB>>", "57": "<(&lt;operator&gt;.assignment,int half = N / 2)<SUB>8</SUB>>", "59": "<(&lt;operator&gt;.division,N / 2)<SUB>8</SUB>>", "61": "<(LITERAL,2,N / 2)<SUB>8</SUB>>", "63": "<(LOCAL,int r: int)<SUB>9</SUB>>", "65": "<(IDENTIFIER,l,int l = 1)<SUB>9</SUB>>", "67": "<(&lt;operator&gt;.assignment,int r = half)<SUB>9</SUB>>", "69": "<(IDENTIFIER,half,int r = half)<SUB>9</SUB>>", "71": "<(&lt;operator&gt;.assignment,int first = query(half, out, sc))<SUB>10</SUB>>", "73": "<(query,query(half, out, sc))<SUB>10</SUB>>", "75": "<(IDENTIFIER,half,query(half, out, sc))<SUB>10</SUB>>", "77": "<(IDENTIFIER,sc,query(half, out, sc))<SUB>10</SUB>>", "79": "<(&lt;operator&gt;.assignment,int next = query(2 * half, out, sc))<SUB>11</SUB>>", "81": "<(query,query(2 * half, out, sc))<SUB>11</SUB>>", "83": "<(&lt;operator&gt;.multiplication,2 * half)<SUB>11</SUB>>", "85": "<(IDENTIFIER,half,2 * half)<SUB>11</SUB>>", "87": "<(IDENTIFIER,sc,query(2 * half, out, sc))<SUB>11</SUB>>", "89": "<(&lt;operator&gt;.equals,first == next)<SUB>12</SUB>>", "91": "<(IDENTIFIER,next,first == next)<SUB>12</SUB>>", "93": "<(output,output(half, out))<SUB>13</SUB>>", "95": "<(IDENTIFIER,half,output(half, out))<SUB>13</SUB>>", "97": "<(RETURN,return;,return;)<SUB>14</SUB>>", "99": "<(&lt;operator&gt;.assignment,boolean less = first &lt; next)<SUB>16</SUB>>", "101": "<(&lt;operator&gt;.lessThan,first &lt; next)<SUB>16</SUB>>", "103": "<(IDENTIFIER,next,first &lt; next)<SUB>16</SUB>>", "105": "<(&lt;operator&gt;.lessThan,l + 1 &lt; r)<SUB>17</SUB>>", "107": "<(IDENTIFIER,l,l + 1)<SUB>17</SUB>>", "109": "<(IDENTIFIER,r,l + 1 &lt; r)<SUB>17</SUB>>", "111": "<(LOCAL,int med: int)<SUB>18</SUB>>", "113": "<(IDENTIFIER,med,int med = (l + r) / 2)<SUB>18</SUB>>", "115": "<(&lt;operator&gt;.addition,l + r)<SUB>18</SUB>>", "117": "<(IDENTIFIER,r,l + r)<SUB>18</SUB>>", "119": "<(&lt;operator&gt;.assignment,first = query(med, out, sc))<SUB>19</SUB>>", "121": "<(query,query(med, out, sc))<SUB>19</SUB>>", "123": "<(IDENTIFIER,med,query(med, out, sc))<SUB>19</SUB>>", "125": "<(IDENTIFIER,sc,query(med, out, sc))<SUB>19</SUB>>", "127": "<(IDENTIFIER,next,next = query(med + half, out, sc))<SUB>20</SUB>>", "129": "<(IDENTIFIER,this,query(med + half, out, sc))<SUB>20</SUB>>", "131": "<(IDENTIFIER,med,med + half)<SUB>20</SUB>>", "133": "<(IDENTIFIER,out,query(med + half, out, sc))<SUB>20</SUB>>", "135": "<(CONTROL_STRUCTURE,if (first == next),if (first == next))<SUB>21</SUB>>", "137": "<(IDENTIFIER,first,first == next)<SUB>21</SUB>>", "139": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>21</SUB>>", "141": "<(IDENTIFIER,this,output(med, out))<SUB>22</SUB>>", "143": "<(IDENTIFIER,out,output(med, out))<SUB>22</SUB>>", "145": "<(CONTROL_STRUCTURE,else,else)<SUB>24</SUB>>", "147": "<(&lt;operator&gt;.equals,first &lt; next == less)<SUB>24</SUB>>", "149": "<(IDENTIFIER,first,first &lt; next)<SUB>24</SUB>>", "151": "<(IDENTIFIER,less,first &lt; next == less)<SUB>24</SUB>>", "153": "<(&lt;operator&gt;.assignment,r = med)<SUB>25</SUB>>", "155": "<(IDENTIFIER,med,r = med)<SUB>25</SUB>>", "157": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>26</SUB>>", "159": "<(IDENTIFIER,l,l = med + 1)<SUB>27</SUB>>", "161": "<(IDENTIFIER,med,med + 1)<SUB>27</SUB>>", "163": "<(output,output(l, out))<SUB>30</SUB>>", "165": "<(IDENTIFIER,l,output(l, out))<SUB>30</SUB>>", "167": "<(MODIFIER,PUBLIC)>", "169": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}