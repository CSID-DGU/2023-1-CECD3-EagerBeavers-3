{"edges": [["21", "23"], ["21", "159"], ["21", "160"], ["21", "161"], ["23", "24"], ["23", "25"], ["23", "29"], ["23", "30"], ["23", "35"], ["23", "36"], ["23", "4"], ["23", "40"], ["23", "43"], ["23", "6"], ["23", "44"], ["23", "47"], ["23", "48"], ["23", "67"], ["23", "68"], ["23", "71"], ["23", "72"], ["23", "75"], ["23", "76"], ["23", "79"], ["23", "114"], ["23", "119"], ["25", "26"], ["25", "27"], ["27", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["32", "34"], ["36", "37"], ["36", "38"], ["38", "39"], ["40", "41"], ["40", "42"], ["43", "3"], ["44", "45"], ["44", "46"], ["47", "5"], ["48", "49"], ["48", "50"], ["48", "53"], ["48", "56"], ["48", "58"], ["50", "51"], ["50", "52"], ["53", "54"], ["53", "55"], ["56", "57"], ["58", "59"], ["58", "63"], ["59", "60"], ["59", "61"], ["61", "62"], ["63", "64"], ["63", "65"], ["65", "66"], ["68", "69"], ["68", "70"], ["72", "73"], ["72", "74"], ["76", "77"], ["76", "78"], ["79", "80"], ["79", "81"], ["79", "84"], ["79", "88"], ["79", "90"], ["81", "82"], ["81", "83"], ["84", "85"], ["84", "86"], ["86", "87"], ["88", "89"], ["90", "91"], ["91", "92"], ["91", "93"], ["91", "96"], ["91", "100"], ["91", "102"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["98", "99"], ["100", "101"], ["102", "103"], ["103", "104"], ["103", "111"], ["104", "105"], ["104", "108"], ["105", "106"], ["105", "107"], ["108", "109"], ["108", "110"], ["111", "112"], ["112", "113"], ["114", "115"], ["114", "116"], ["116", "117"], ["116", "118"], ["119", "120"], ["119", "121"], ["119", "124"], ["119", "127"], ["119", "129"], ["121", "122"], ["121", "123"], ["124", "125"], ["124", "126"], ["127", "128"], ["129", "130"], ["129", "149"], ["130", "131"], ["130", "132"], ["132", "133"], ["132", "148"], ["133", "134"], ["133", "135"], ["135", "136"], ["135", "147"], ["136", "137"], ["136", "146"], ["137", "138"], ["137", "145"], ["138", "139"], ["138", "142"], ["139", "140"], ["139", "141"], ["142", "143"], ["142", "144"], ["149", "150"], ["149", "151"], ["151", "152"], ["151", "157"], ["151", "158"], ["152", "153"], ["152", "156"], ["153", "154"], ["153", "155"], ["25", "32"], ["30", "38"], ["36", "42"], ["40", "43"], ["43", "46"], ["44", "47"], ["47", "50"], ["68", "72"], ["72", "76"], ["76", "81"], ["114", "121"], ["27", "25"], ["32", "30"], ["38", "36"], ["42", "40"], ["46", "44"], ["50", "53"], ["53", "61"], ["53", "68"], ["56", "53"], ["81", "86"], ["84", "93"], ["84", "116"], ["88", "86"], ["116", "114"], ["121", "124"], ["124", "161"], ["124", "139"], ["127", "124"], ["59", "65"], ["63", "56"], ["86", "84"], ["130", "153"], ["149", "127"], ["61", "59"], ["65", "63"], ["93", "98"], ["96", "105"], ["96", "88"], ["100", "98"], ["132", "130"], ["151", "149"], ["98", "96"], ["133", "132"], ["152", "151"], ["104", "112"], ["104", "100"], ["135", "133"], ["153", "152"], ["105", "108"], ["108", "104"], ["112", "100"], ["136", "135"], ["137", "136"], ["138", "137"], ["139", "142"], ["142", "138"], ["21", "27"], ["22", "161"], ["25", "161"], ["32", "161"], ["30", "161"], ["30", "161"], ["38", "161"], ["36", "161"], ["36", "161"], ["40", "161"], ["43", "161"], ["44", "161"], ["47", "161"], ["47", "161"], ["68", "161"], ["68", "161"], ["72", "161"], ["72", "161"], ["76", "161"], ["86", "161"], ["84", "161"], ["84", "161"], ["114", "161"], ["114", "161"], ["114", "161"], ["121", "161"], ["124", "161"], ["124", "161"], ["124", "161"], ["127", "161"], ["88", "161"], ["56", "161"], ["21", "22"], ["27", "25"], ["32", "30"], ["32", "30"], ["38", "36"], ["21", "40"], ["21", "44"], ["21", "68"], ["21", "72"], ["21", "76"], ["116", "114"], ["116", "114"], ["40", "43"], ["21", "43"], ["44", "47"], ["21", "47"], ["21", "50"], ["21", "81"], ["21", "121"], ["21", "27"], ["27", "32"], ["21", "32"], ["25", "32"], ["32", "38"], ["21", "38"], ["50", "53"], ["56", "53"], ["21", "53"], ["36", "53"], ["53", "56"], ["21", "56"], ["81", "84"], ["88", "84"], ["21", "84"], ["86", "84"], ["105", "88"], ["21", "88"], ["84", "88"], ["76", "116"], ["112", "116"], ["21", "116"], ["121", "124"], ["127", "124"], ["21", "124"], ["53", "124"], ["142", "127"], ["21", "127"], ["132", "130"], ["132", "130"], ["43", "59"], ["21", "59"], ["61", "59"], ["47", "63"], ["21", "63"], ["65", "63"], ["30", "86"], ["98", "86"], ["21", "86"], ["84", "93"], ["21", "93"], ["38", "149"], ["65", "149"], ["21", "149"], ["68", "149"], ["72", "149"], ["38", "61"], ["65", "61"], ["21", "61"], ["61", "65"], ["21", "65"], ["93", "96"], ["100", "96"], ["21", "96"], ["98", "96"], ["108", "100"], ["21", "100"], ["114", "132"], ["153", "132"], ["21", "132"], ["135", "132"], ["135", "132"], ["68", "151"], ["21", "151"], ["72", "151"], ["86", "98"], ["108", "98"], ["21", "98"], ["114", "133"], ["153", "133"], ["21", "133"], ["135", "133"], ["135", "133"], ["153", "152"], ["153", "152"], ["21", "152"], ["105", "104"], ["105", "104"], ["108", "104"], ["108", "104"], ["136", "135"], ["136", "135"], ["21", "135"], ["130", "153"], ["21", "153"], ["98", "105"], ["21", "105"], ["84", "105"], ["105", "108"], ["21", "108"], ["96", "108"], ["76", "112"], ["21", "112"], ["138", "136"], ["21", "136"], ["138", "137"], ["21", "137"], ["139", "138"], ["139", "138"], ["142", "138"], ["142", "138"], ["47", "139"], ["63", "139"], ["21", "139"], ["124", "139"], ["43", "142"], ["59", "142"], ["21", "142"], ["139", "142"], ["53", "56"], ["53", "65"], ["53", "59"], ["53", "61"], ["53", "53"], ["53", "63"], ["84", "96"], ["84", "98"], ["84", "84"], ["84", "93"], ["84", "88"], ["84", "86"], ["124", "136"], ["124", "149"], ["124", "132"], ["124", "142"], ["124", "151"], ["124", "153"], ["124", "138"], ["124", "137"], ["124", "152"], ["124", "130"], ["124", "135"], ["124", "127"], ["124", "139"], ["124", "124"], ["124", "133"], ["96", "96"], ["96", "98"], ["96", "104"], ["96", "105"], ["96", "100"], ["96", "108"], ["104", "112"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "25": "<(&lt;operator&gt;.assignment,int n = scanInt())<SUB>3</SUB>>", "27": "<(scanInt,scanInt())<SUB>3</SUB>>", "29": "<(LOCAL,List&lt;Integer&gt; a: ANY)<SUB>4</SUB>>", "31": "<(IDENTIFIER,a,ANY a = scanList(n))<SUB>4</SUB>>", "33": "<(IDENTIFIER,this,scanList(n))<SUB>4</SUB>>", "35": "<(LOCAL,int m: int)<SUB>5</SUB>>", "37": "<(IDENTIFIER,m,int m = scanInt())<SUB>5</SUB>>", "39": "<(IDENTIFIER,this,scanInt())<SUB>5</SUB>>", "40": "<(&lt;operator&gt;.assignment,ANY left = new ArrayList&lt;&gt;())<SUB>6</SUB>>", "42": "<(&lt;operator&gt;.alloc,new ArrayList&lt;&gt;())<SUB>6</SUB>>", "3": "<(IDENTIFIER,left,new ArrayList&lt;&gt;())<SUB>6</SUB>>", "44": "<(&lt;operator&gt;.assignment,ANY right = new ArrayList&lt;&gt;())<SUB>7</SUB>>", "46": "<(&lt;operator&gt;.alloc,new ArrayList&lt;&gt;())<SUB>7</SUB>>", "5": "<(IDENTIFIER,right,new ArrayList&lt;&gt;())<SUB>7</SUB>>", "49": "<(LOCAL,int i: int)<SUB>8</SUB>>", "51": "<(IDENTIFIER,i,int i = 0)<SUB>8</SUB>>", "53": "<(&lt;operator&gt;.lessThan,i &lt; m)<SUB>8</SUB>>", "55": "<(IDENTIFIER,m,i &lt; m)<SUB>8</SUB>>", "57": "<(IDENTIFIER,i,i++)<SUB>8</SUB>>", "59": "<(add,add(scanInt()))<SUB>9</SUB>>", "61": "<(scanInt,scanInt())<SUB>9</SUB>>", "63": "<(add,add(scanInt()))<SUB>10</SUB>>", "65": "<(scanInt,scanInt())<SUB>10</SUB>>", "67": "<(LOCAL,String even: java.lang.String)<SUB>13</SUB>>", "69": "<(IDENTIFIER,even,String even = &quot;even&quot;)<SUB>13</SUB>>", "71": "<(LOCAL,String odd: java.lang.String)<SUB>14</SUB>>", "73": "<(IDENTIFIER,odd,String odd = &quot;odd&quot;)<SUB>14</SUB>>", "75": "<(LOCAL,int inversions: int)<SUB>16</SUB>>", "77": "<(IDENTIFIER,inversions,int inversions = 0)<SUB>16</SUB>>", "79": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; a.size()); i++),for (int i = 0; Some(i &lt; a.size()); i++))<SUB>17</SUB>>", "81": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>17</SUB>>", "83": "<(LITERAL,0,int i = 0)<SUB>17</SUB>>", "85": "<(IDENTIFIER,i,i &lt; a.size())<SUB>17</SUB>>", "87": "<(IDENTIFIER,a,size())<SUB>17</SUB>>", "89": "<(IDENTIFIER,i,i++)<SUB>17</SUB>>", "91": "<(CONTROL_STRUCTURE,for (int j = i; Some(j &lt; a.size()); j++),for (int j = i; Some(j &lt; a.size()); j++))<SUB>18</SUB>>", "93": "<(&lt;operator&gt;.assignment,int j = i)<SUB>18</SUB>>", "95": "<(IDENTIFIER,i,int j = i)<SUB>18</SUB>>", "97": "<(IDENTIFIER,j,j &lt; a.size())<SUB>18</SUB>>", "99": "<(IDENTIFIER,a,size())<SUB>18</SUB>>", "101": "<(IDENTIFIER,j,j++)<SUB>18</SUB>>", "103": "<(CONTROL_STRUCTURE,if (a.get(i) &gt; a.get(j)),if (a.get(i) &gt; a.get(j)))<SUB>19</SUB>>", "105": "<(get,get(i))<SUB>19</SUB>>", "107": "<(IDENTIFIER,i,get(i))<SUB>19</SUB>>", "109": "<(IDENTIFIER,a,get(j))<SUB>19</SUB>>", "111": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>19</SUB>>", "113": "<(IDENTIFIER,inversions,++inversions)<SUB>20</SUB>>", "115": "<(IDENTIFIER,inversions,inversions = inversions % 2)<SUB>25</SUB>>", "117": "<(IDENTIFIER,inversions,inversions % 2)<SUB>25</SUB>>", "119": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; m); i++),for (int i = 0; Some(i &lt; m); i++))<SUB>26</SUB>>", "121": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>26</SUB>>", "123": "<(LITERAL,0,int i = 0)<SUB>26</SUB>>", "125": "<(IDENTIFIER,i,i &lt; m)<SUB>26</SUB>>", "127": "<(&lt;operator&gt;.postIncrement,i++)<SUB>26</SUB>>", "129": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>26</SUB>>", "131": "<(IDENTIFIER,inversions,inversions = (inversions + (right.get(i) - left.get(i) + 1) / 2 % 2) % 2)<SUB>27</SUB>>", "133": "<(&lt;operator&gt;.addition,inversions + (right.get(i) - left.get(i) + 1) / 2 % 2)<SUB>27</SUB>>", "135": "<(&lt;operator&gt;.modulo,(right.get(i) - left.get(i) + 1) / 2 % 2)<SUB>27</SUB>>", "137": "<(&lt;operator&gt;.addition,right.get(i) - left.get(i) + 1)<SUB>27</SUB>>", "139": "<(get,get(i))<SUB>27</SUB>>", "141": "<(IDENTIFIER,i,get(i))<SUB>27</SUB>>", "143": "<(IDENTIFIER,left,get(i))<SUB>27</SUB>>", "145": "<(LITERAL,1,right.get(i) - left.get(i) + 1)<SUB>27</SUB>>", "147": "<(LITERAL,2,(right.get(i) - left.get(i) + 1) / 2 % 2)<SUB>27</SUB>>", "149": "<(println,println(inversions % 2 == 0 ? even : odd))<SUB>28</SUB>>", "151": "<(&lt;operator&gt;.conditional,inversions % 2 == 0 ? even : odd)<SUB>28</SUB>>", "153": "<(&lt;operator&gt;.modulo,inversions % 2)<SUB>28</SUB>>", "155": "<(LITERAL,2,inversions % 2)<SUB>28</SUB>>", "157": "<(IDENTIFIER,even,inversions % 2 == 0 ? even : odd)<SUB>28</SUB>>", "159": "<(MODIFIER,PUBLIC)>", "161": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}