{"edges": [["17", "18"], ["17", "19"], ["17", "154"], ["17", "155"], ["17", "156"], ["19", "20"], ["19", "23"], ["19", "27"], ["19", "28"], ["19", "34"], ["19", "35"], ["19", "39"], ["19", "42"], ["19", "46"], ["19", "64"], ["19", "65"], ["19", "70"], ["19", "71"], ["19", "78"], ["19", "81"], ["19", "85"], ["19", "86"], ["19", "92"], ["19", "93"], ["19", "94"], ["19", "95"], ["19", "152"], ["20", "21"], ["20", "22"], ["23", "24"], ["23", "25"], ["25", "26"], ["28", "29"], ["28", "30"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["39", "40"], ["39", "41"], ["42", "43"], ["42", "44"], ["44", "45"], ["46", "47"], ["46", "48"], ["46", "51"], ["46", "54"], ["46", "56"], ["48", "49"], ["48", "50"], ["51", "52"], ["51", "53"], ["54", "55"], ["56", "57"], ["56", "60"], ["57", "58"], ["57", "59"], ["60", "61"], ["60", "62"], ["62", "63"], ["65", "66"], ["65", "67"], ["67", "68"], ["67", "69"], ["71", "72"], ["71", "73"], ["73", "74"], ["73", "77"], ["74", "75"], ["74", "76"], ["78", "79"], ["78", "80"], ["81", "82"], ["81", "83"], ["83", "84"], ["86", "87"], ["86", "88"], ["88", "89"], ["88", "90"], ["90", "91"], ["95", "96"], ["95", "97"], ["95", "100"], ["95", "103"], ["95", "105"], ["97", "98"], ["97", "99"], ["100", "101"], ["100", "102"], ["103", "104"], ["105", "106"], ["105", "109"], ["105", "113"], ["105", "119"], ["105", "125"], ["105", "134"], ["105", "146"], ["106", "107"], ["106", "108"], ["109", "110"], ["109", "111"], ["111", "112"], ["113", "114"], ["113", "115"], ["115", "116"], ["115", "117"], ["117", "118"], ["119", "120"], ["119", "121"], ["121", "122"], ["121", "123"], ["123", "124"], ["125", "126"], ["125", "127"], ["127", "128"], ["127", "133"], ["128", "129"], ["128", "132"], ["129", "130"], ["129", "131"], ["134", "135"], ["134", "142"], ["135", "136"], ["135", "139"], ["136", "137"], ["136", "138"], ["139", "140"], ["139", "141"], ["142", "143"], ["142", "144"], ["144", "145"], ["146", "147"], ["146", "148"], ["148", "149"], ["148", "150"], ["148", "151"], ["152", "153"], ["20", "25"], ["23", "32"], ["28", "37"], ["35", "41"], ["39", "44"], ["42", "48"], ["65", "74"], ["71", "80"], ["78", "83"], ["81", "90"], ["86", "97"], ["152", "156"], ["22", "20"], ["25", "23"], ["30", "28"], ["37", "35"], ["41", "39"], ["44", "42"], ["48", "51"], ["51", "57"], ["51", "67"], ["54", "51"], ["56", "54"], ["67", "65"], ["73", "71"], ["80", "78"], ["83", "81"], ["88", "86"], ["97", "100"], ["100", "108"], ["100", "152"], ["103", "100"], ["32", "30"], ["57", "62"], ["60", "56"], ["74", "73"], ["90", "88"], ["106", "111"], ["109", "117"], ["113", "123"], ["119", "129"], ["125", "136"], ["146", "103"], ["62", "60"], ["108", "106"], ["111", "109"], ["115", "113"], ["121", "119"], ["127", "125"], ["135", "144"], ["135", "148"], ["142", "148"], ["148", "146"], ["117", "115"], ["123", "121"], ["128", "127"], ["136", "135"], ["136", "139"], ["139", "135"], ["144", "142"], ["129", "128"], ["17", "22"], ["18", "156"], ["28", "156"], ["35", "156"], ["35", "156"], ["51", "156"], ["51", "156"], ["67", "156"], ["65", "156"], ["65", "156"], ["71", "156"], ["74", "156"], ["73", "156"], ["71", "156"], ["71", "156"], ["78", "156"], ["83", "156"], ["81", "156"], ["81", "156"], ["88", "156"], ["90", "156"], ["88", "156"], ["86", "156"], ["86", "156"], ["97", "156"], ["100", "156"], ["100", "156"], ["100", "156"], ["152", "156"], ["152", "156"], ["106", "156"], ["111", "156"], ["109", "156"], ["109", "156"], ["113", "156"], ["121", "156"], ["123", "156"], ["121", "156"], ["119", "156"], ["119", "156"], ["129", "156"], ["129", "156"], ["128", "156"], ["127", "156"], ["125", "156"], ["125", "156"], ["136", "156"], ["135", "156"], ["139", "156"], ["135", "156"], ["135", "156"], ["142", "156"], ["142", "156"], ["148", "156"], ["146", "156"], ["146", "156"], ["103", "156"], ["56", "156"], ["56", "156"], ["54", "156"], ["67", "156"], ["17", "18"], ["17", "20"], ["30", "28"], ["30", "28"], ["37", "35"], ["17", "39"], ["67", "65"], ["67", "65"], ["73", "71"], ["73", "71"], ["17", "78"], ["88", "86"], ["88", "86"], ["20", "23"], ["17", "23"], ["25", "23"], ["39", "42"], ["17", "42"], ["44", "42"], ["17", "48"], ["60", "56"], ["60", "56"], ["78", "81"], ["17", "81"], ["83", "81"], ["17", "97"], ["146", "152"], ["17", "152"], ["17", "25"], ["17", "30"], ["32", "30"], ["28", "37"], ["17", "37"], ["25", "44"], ["17", "44"], ["48", "51"], ["54", "51"], ["17", "51"], ["37", "51"], ["51", "54"], ["17", "54"], ["17", "67"], ["35", "67"], ["56", "67"], ["74", "73"], ["74", "73"], ["17", "73"], ["44", "83"], ["17", "83"], ["30", "88"], ["60", "88"], ["17", "88"], ["90", "88"], ["97", "100"], ["103", "100"], ["17", "100"], ["86", "100"], ["100", "103"], ["17", "103"], ["17", "106"], ["115", "113"], ["115", "113"], ["121", "119"], ["121", "119"], ["127", "125"], ["127", "125"], ["23", "32"], ["17", "32"], ["30", "60"], ["17", "60"], ["62", "60"], ["65", "74"], ["17", "74"], ["81", "90"], ["17", "90"], ["106", "109"], ["17", "109"], ["111", "109"], ["144", "142"], ["17", "146"], ["42", "62"], ["17", "62"], ["83", "111"], ["17", "111"], ["88", "115"], ["121", "115"], ["17", "115"], ["117", "115"], ["115", "121"], ["17", "121"], ["123", "121"], ["129", "127"], ["129", "127"], ["17", "127"], ["136", "135"], ["136", "135"], ["139", "135"], ["139", "135"], ["17", "148"], ["109", "117"], ["17", "117"], ["117", "123"], ["17", "123"], ["129", "128"], ["129", "128"], ["17", "128"], ["125", "136"], ["17", "136"], ["136", "139"], ["17", "139"], ["71", "144"], ["17", "144"], ["119", "129"], ["17", "129"], ["113", "129"], ["51", "60"], ["51", "51"], ["51", "57"], ["51", "56"], ["51", "54"], ["51", "62"], ["100", "115"], ["100", "113"], ["100", "136"], ["100", "146"], ["100", "128"], ["100", "103"], ["100", "119"], ["100", "121"], ["100", "123"], ["100", "106"], ["100", "129"], ["100", "148"], ["100", "100"], ["100", "135"], ["100", "117"], ["100", "127"], ["100", "108"], ["100", "125"], ["100", "111"], ["100", "109"], ["135", "142"], ["135", "144"], ["136", "139"]], "features": {"17": "<(METHOD,main)<SUB>1</SUB>>", "19": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "21": "<(IDENTIFIER,tok,tok = new StringTokenizer(in.readLine()))<SUB>2</SUB>>", "23": "<(&lt;init&gt;,new StringTokenizer(in.readLine()))<SUB>2</SUB>>", "25": "<(readLine,readLine())<SUB>2</SUB>>", "27": "<(LOCAL,int n: int)<SUB>3</SUB>>", "29": "<(IDENTIFIER,n,int n = parseInt(tok.nextToken()))<SUB>3</SUB>>", "31": "<(IDENTIFIER,Integer,parseInt(tok.nextToken()))<SUB>3</SUB>>", "33": "<(IDENTIFIER,tok,nextToken())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,int[] tab = new int[n])<SUB>5</SUB>>", "37": "<(&lt;operator&gt;.alloc,new int[n])>", "39": "<(&lt;operator&gt;.assignment,tok = new StringTokenizer(in.readLine()))<SUB>6</SUB>>", "41": "<(&lt;operator&gt;.alloc,new StringTokenizer(in.readLine()))<SUB>6</SUB>>", "43": "<(IDENTIFIER,tok,new StringTokenizer(in.readLine()))<SUB>6</SUB>>", "45": "<(IDENTIFIER,in,readLine())<SUB>6</SUB>>", "47": "<(LOCAL,int i: int)<SUB>7</SUB>>", "49": "<(IDENTIFIER,i,int i = 0)<SUB>7</SUB>>", "51": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>7</SUB>>", "53": "<(IDENTIFIER,n,i &lt; n)<SUB>7</SUB>>", "55": "<(IDENTIFIER,i,i++)<SUB>7</SUB>>", "57": "<(&lt;operator&gt;.indexAccess,tab[i])<SUB>8</SUB>>", "59": "<(IDENTIFIER,i,tab[i] = parseInt(tok.nextToken()))<SUB>8</SUB>>", "61": "<(IDENTIFIER,Integer,parseInt(tok.nextToken()))<SUB>8</SUB>>", "63": "<(IDENTIFIER,tok,nextToken())<SUB>8</SUB>>", "65": "<(&lt;operator&gt;.assignment,int inversions = countInversions(tab))<SUB>10</SUB>>", "67": "<(countInversions,countInversions(tab))<SUB>10</SUB>>", "69": "<(IDENTIFIER,tab,countInversions(tab))<SUB>10</SUB>>", "71": "<(&lt;operator&gt;.assignment,boolean isOdd = inversions % 2 == 1)<SUB>11</SUB>>", "73": "<(&lt;operator&gt;.equals,inversions % 2 == 1)<SUB>11</SUB>>", "75": "<(IDENTIFIER,inversions,inversions % 2)<SUB>11</SUB>>", "77": "<(LITERAL,1,inversions % 2 == 1)<SUB>11</SUB>>", "79": "<(IDENTIFIER,tok,tok = new StringTokenizer(in.readLine()))<SUB>13</SUB>>", "81": "<(&lt;init&gt;,new StringTokenizer(in.readLine()))<SUB>13</SUB>>", "83": "<(readLine,readLine())<SUB>13</SUB>>", "85": "<(LOCAL,int k: int)<SUB>14</SUB>>", "87": "<(IDENTIFIER,k,int k = parseInt(tok.nextToken()))<SUB>14</SUB>>", "89": "<(IDENTIFIER,Integer,parseInt(tok.nextToken()))<SUB>14</SUB>>", "91": "<(IDENTIFIER,tok,nextToken())<SUB>14</SUB>>", "93": "<(LOCAL,int end: int)<SUB>16</SUB>>", "95": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; k); i++),for (int i = 0; Some(i &lt; k); i++))<SUB>18</SUB>>", "97": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>18</SUB>>", "99": "<(LITERAL,0,int i = 0)<SUB>18</SUB>>", "101": "<(IDENTIFIER,i,i &lt; k)<SUB>18</SUB>>", "103": "<(&lt;operator&gt;.postIncrement,i++)<SUB>18</SUB>>", "105": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>18</SUB>>", "107": "<(IDENTIFIER,tok,tok = new StringTokenizer(in.readLine()))<SUB>19</SUB>>", "109": "<(&lt;init&gt;,new StringTokenizer(in.readLine()))<SUB>19</SUB>>", "111": "<(readLine,readLine())<SUB>19</SUB>>", "113": "<(&lt;operator&gt;.assignment,start = parseInt(tok.nextToken()))<SUB>20</SUB>>", "115": "<(parseInt,parseInt(tok.nextToken()))<SUB>20</SUB>>", "117": "<(nextToken,nextToken())<SUB>20</SUB>>", "119": "<(&lt;operator&gt;.assignment,end = parseInt(tok.nextToken()))<SUB>21</SUB>>", "121": "<(parseInt,parseInt(tok.nextToken()))<SUB>21</SUB>>", "123": "<(nextToken,nextToken())<SUB>21</SUB>>", "125": "<(&lt;operator&gt;.assignment,len = (end - start + 1) % 4)<SUB>23</SUB>>", "127": "<(&lt;operator&gt;.modulo,(end - start + 1) % 4)<SUB>23</SUB>>", "129": "<(&lt;operator&gt;.subtraction,end - start)<SUB>23</SUB>>", "131": "<(IDENTIFIER,start,end - start)<SUB>23</SUB>>", "133": "<(LITERAL,4,(end - start + 1) % 4)<SUB>23</SUB>>", "135": "<(&lt;operator&gt;.logicalOr,len == 2 || len == 3)<SUB>24</SUB>>", "137": "<(IDENTIFIER,len,len == 2)<SUB>24</SUB>>", "139": "<(&lt;operator&gt;.equals,len == 3)<SUB>24</SUB>>", "141": "<(LITERAL,3,len == 3)<SUB>24</SUB>>", "143": "<(IDENTIFIER,isOdd,isOdd = !isOdd)<SUB>25</SUB>>", "145": "<(IDENTIFIER,isOdd,!isOdd)<SUB>25</SUB>>", "147": "<(IDENTIFIER,out,println(isOdd ? &quot;odd&quot; : &quot;even&quot;))<SUB>27</SUB>>", "149": "<(IDENTIFIER,isOdd,isOdd ? &quot;odd&quot; : &quot;even&quot;)<SUB>27</SUB>>", "151": "<(LITERAL,&quot;even&quot;,isOdd ? &quot;odd&quot; : &quot;even&quot;)<SUB>27</SUB>>", "153": "<(IDENTIFIER,out,close())<SUB>30</SUB>>", "155": "<(MODIFIER,STATIC)>"}}