{"edges": [["17", "19"], ["17", "79"], ["17", "80"], ["17", "81"], ["19", "20"], ["19", "23"], ["19", "27"], ["19", "28"], ["19", "34"], ["19", "35"], ["19", "41"], ["19", "42"], ["19", "64"], ["19", "65"], ["19", "70"], ["19", "75"], ["19", "77"], ["20", "21"], ["20", "22"], ["23", "24"], ["23", "25"], ["25", "26"], ["28", "29"], ["28", "30"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["37", "39"], ["39", "40"], ["42", "43"], ["42", "44"], ["44", "45"], ["44", "63"], ["45", "46"], ["45", "48"], ["46", "47"], ["48", "49"], ["48", "50"], ["50", "51"], ["50", "52"], ["52", "53"], ["52", "60"], ["53", "54"], ["53", "57"], ["54", "55"], ["54", "56"], ["57", "58"], ["57", "59"], ["60", "61"], ["60", "62"], ["65", "66"], ["65", "67"], ["67", "68"], ["67", "69"], ["70", "71"], ["70", "72"], ["72", "73"], ["72", "74"], ["75", "76"], ["77", "78"], ["20", "25"], ["23", "32"], ["28", "39"], ["35", "46"], ["42", "67"], ["65", "72"], ["70", "75"], ["75", "77"], ["77", "81"], ["22", "20"], ["25", "23"], ["30", "28"], ["37", "35"], ["44", "42"], ["67", "65"], ["72", "70"], ["32", "30"], ["39", "37"], ["45", "44"], ["46", "49"], ["48", "45"], ["49", "55"], ["50", "48"], ["52", "50"], ["53", "60"], ["60", "52"], ["54", "57"], ["57", "53"], ["55", "54"], ["17", "22"], ["18", "81"], ["20", "81"], ["23", "81"], ["23", "81"], ["28", "81"], ["39", "81"], ["37", "81"], ["35", "81"], ["35", "81"], ["45", "81"], ["53", "81"], ["57", "81"], ["53", "81"], ["52", "81"], ["52", "81"], ["50", "81"], ["48", "81"], ["45", "81"], ["44", "81"], ["42", "81"], ["42", "81"], ["67", "81"], ["67", "81"], ["65", "81"], ["65", "81"], ["72", "81"], ["72", "81"], ["70", "81"], ["70", "81"], ["75", "81"], ["77", "81"], ["77", "81"], ["25", "81"], ["50", "81"], ["17", "18"], ["17", "20"], ["30", "28"], ["30", "28"], ["37", "35"], ["37", "35"], ["44", "42"], ["44", "42"], ["67", "65"], ["67", "65"], ["20", "23"], ["17", "23"], ["25", "23"], ["17", "70"], ["72", "70"], ["72", "70"], ["70", "75"], ["17", "75"], ["75", "77"], ["17", "77"], ["17", "25"], ["17", "30"], ["32", "30"], ["30", "37"], ["17", "37"], ["39", "37"], ["46", "44"], ["17", "44"], ["50", "44"], ["50", "44"], ["60", "67"], ["17", "67"], ["42", "67"], ["37", "72"], ["17", "72"], ["65", "72"], ["23", "32"], ["17", "32"], ["32", "39"], ["17", "39"], ["46", "45"], ["17", "45"], ["50", "45"], ["50", "45"], ["17", "46"], ["17", "48"], ["50", "48"], ["50", "48"], ["17", "50"], ["57", "50"], ["57", "50"], ["60", "50"], ["60", "50"], ["17", "52"], ["57", "52"], ["57", "52"], ["60", "52"], ["60", "52"], ["17", "53"], ["57", "53"], ["57", "53"], ["17", "60"], ["28", "60"], ["17", "54"], ["17", "57"], ["35", "57"]], "features": {"17": "<(METHOD,main)<SUB>1</SUB>>", "19": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "21": "<(IDENTIFIER,st,st = new StringTokenizer(reader.readLine()))<SUB>2</SUB>>", "23": "<(&lt;init&gt;,new StringTokenizer(reader.readLine()))<SUB>2</SUB>>", "25": "<(readLine,readLine())<SUB>2</SUB>>", "27": "<(LOCAL,long n: long)<SUB>3</SUB>>", "29": "<(IDENTIFIER,n,long n = parseLong(st.nextToken()))<SUB>3</SUB>>", "31": "<(IDENTIFIER,Long,parseLong(st.nextToken()))<SUB>3</SUB>>", "33": "<(IDENTIFIER,st,nextToken())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,long k = parseLong(st.nextToken()))<SUB>4</SUB>>", "37": "<(parseLong,parseLong(st.nextToken()))<SUB>4</SUB>>", "39": "<(nextToken,nextToken())<SUB>4</SUB>>", "41": "<(LOCAL,long put: long)<SUB>5</SUB>>", "43": "<(IDENTIFIER,put,long put = (-3 + (long) Math.sqrt((long) 9 + 8 * k + 8 * n)) / 2)<SUB>5</SUB>>", "45": "<(&lt;operator&gt;.addition,-3 + (long) Math.sqrt((long) 9 + 8 * k + 8 * n))<SUB>5</SUB>>", "47": "<(LITERAL,3,-3)<SUB>5</SUB>>", "49": "<(TYPE_REF,long,long)<SUB>5</SUB>>", "51": "<(IDENTIFIER,Math,Math.sqrt((long) 9 + 8 * k + 8 * n))<SUB>5</SUB>>", "53": "<(&lt;operator&gt;.addition,(long) 9 + 8 * k)<SUB>5</SUB>>", "55": "<(TYPE_REF,long,long)<SUB>5</SUB>>", "57": "<(&lt;operator&gt;.multiplication,8 * k)<SUB>5</SUB>>", "59": "<(IDENTIFIER,k,8 * k)<SUB>5</SUB>>", "61": "<(LITERAL,8,8 * n)<SUB>5</SUB>>", "63": "<(LITERAL,2,(-3 + (long) Math.sqrt((long) 9 + 8 * k + 8 * n)) / 2)<SUB>5</SUB>>", "65": "<(&lt;operator&gt;.assignment,long eat = n - put)<SUB>6</SUB>>", "67": "<(&lt;operator&gt;.subtraction,n - put)<SUB>6</SUB>>", "69": "<(IDENTIFIER,put,n - put)<SUB>6</SUB>>", "71": "<(IDENTIFIER,writer,write(Long.toString(eat)))<SUB>7</SUB>>", "73": "<(IDENTIFIER,Long,Long.toString(eat))<SUB>7</SUB>>", "75": "<(newLine,newLine())<SUB>8</SUB>>", "77": "<(flush,flush())<SUB>9</SUB>>", "79": "<(MODIFIER,PUBLIC)>", "81": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}