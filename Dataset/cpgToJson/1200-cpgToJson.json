{"edges": [["19", "21"], ["19", "123"], ["19", "124"], ["19", "125"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "26"], ["21", "29"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "40"], ["21", "44"], ["21", "45"], ["21", "49"], ["21", "121"], ["22", "23"], ["22", "24"], ["25", "3"], ["26", "27"], ["26", "28"], ["29", "30"], ["29", "31"], ["31", "32"], ["31", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["40", "41"], ["40", "42"], ["42", "43"], ["45", "46"], ["45", "47"], ["47", "48"], ["49", "50"], ["49", "57"], ["49", "60"], ["50", "51"], ["50", "52"], ["52", "53"], ["52", "54"], ["54", "55"], ["54", "56"], ["57", "58"], ["57", "59"], ["60", "61"], ["61", "62"], ["61", "63"], ["61", "114"], ["63", "64"], ["63", "65"], ["65", "66"], ["65", "95"], ["66", "67"], ["66", "94"], ["67", "68"], ["67", "93"], ["68", "69"], ["68", "92"], ["69", "70"], ["69", "71"], ["69", "72"], ["69", "91"], ["72", "73"], ["72", "90"], ["73", "74"], ["73", "87"], ["74", "75"], ["74", "76"], ["76", "77"], ["76", "84"], ["77", "78"], ["77", "83"], ["78", "79"], ["78", "80"], ["80", "81"], ["80", "82"], ["84", "85"], ["84", "86"], ["87", "88"], ["87", "89"], ["95", "96"], ["95", "113"], ["96", "97"], ["96", "110"], ["97", "98"], ["97", "99"], ["99", "100"], ["99", "107"], ["100", "101"], ["100", "106"], ["101", "102"], ["101", "103"], ["103", "104"], ["103", "105"], ["107", "108"], ["107", "109"], ["110", "111"], ["110", "112"], ["114", "115"], ["114", "116"], ["116", "117"], ["116", "120"], ["117", "118"], ["117", "119"], ["121", "122"], ["22", "25"], ["25", "28"], ["26", "33"], ["29", "37"], ["35", "42"], ["40", "47"], ["45", "54"], ["121", "125"], ["24", "22"], ["28", "26"], ["31", "29"], ["37", "35"], ["42", "40"], ["47", "45"], ["50", "57"], ["50", "80"], ["57", "121"], ["33", "31"], ["52", "50"], ["54", "52"], ["63", "117"], ["114", "121"], ["65", "63"], ["116", "114"], ["66", "103"], ["95", "65"], ["117", "116"], ["67", "66"], ["96", "95"], ["68", "67"], ["97", "110"], ["110", "96"], ["69", "68"], ["99", "97"], ["72", "69"], ["100", "107"], ["107", "99"], ["73", "72"], ["101", "100"], ["74", "87"], ["87", "73"], ["103", "101"], ["76", "74"], ["77", "84"], ["84", "76"], ["78", "77"], ["80", "78"], ["19", "24"], ["20", "125"], ["22", "125"], ["25", "125"], ["26", "125"], ["29", "125"], ["29", "125"], ["35", "125"], ["40", "125"], ["47", "125"], ["45", "125"], ["45", "125"], ["52", "125"], ["54", "125"], ["52", "125"], ["50", "125"], ["50", "125"], ["69", "125"], ["68", "125"], ["67", "125"], ["66", "125"], ["65", "125"], ["97", "125"], ["100", "125"], ["99", "125"], ["99", "125"], ["97", "125"], ["96", "125"], ["110", "125"], ["96", "125"], ["95", "125"], ["95", "125"], ["65", "125"], ["63", "125"], ["63", "125"], ["117", "125"], ["116", "125"], ["116", "125"], ["114", "125"], ["114", "125"], ["57", "125"], ["57", "125"], ["121", "125"], ["121", "125"], ["69", "125"], ["19", "20"], ["19", "22"], ["19", "26"], ["37", "35"], ["42", "40"], ["47", "45"], ["22", "25"], ["19", "25"], ["26", "29"], ["19", "29"], ["114", "121"], ["57", "121"], ["19", "121"], ["25", "37"], ["19", "37"], ["37", "42"], ["19", "42"], ["42", "47"], ["19", "47"], ["40", "50"], ["19", "50"], ["52", "50"], ["52", "50"], ["29", "57"], ["19", "57"], ["50", "57"], ["54", "52"], ["19", "52"], ["54", "52"], ["65", "63"], ["65", "63"], ["35", "54"], ["19", "54"], ["45", "54"], ["29", "114"], ["19", "114"], ["116", "114"], ["116", "114"], ["67", "65"], ["67", "65"], ["74", "65"], ["19", "65"], ["95", "65"], ["95", "65"], ["69", "116"], ["19", "116"], ["63", "116"], ["67", "66"], ["67", "66"], ["74", "66"], ["19", "66"], ["96", "95"], ["96", "95"], ["110", "95"], ["19", "95"], ["69", "117"], ["19", "117"], ["63", "117"], ["68", "67"], ["68", "67"], ["87", "67"], ["19", "67"], ["97", "96"], ["97", "96"], ["110", "96"], ["110", "96"], ["69", "68"], ["69", "68"], ["69", "68"], ["69", "68"], ["19", "68"], ["19", "97"], ["74", "97"], ["99", "97"], ["99", "97"], ["101", "110"], ["19", "110"], ["107", "110"], ["19", "69"], ["73", "69"], ["73", "69"], ["100", "99"], ["100", "99"], ["107", "99"], ["107", "99"], ["73", "72"], ["73", "72"], ["19", "72"], ["101", "100"], ["101", "100"], ["103", "100"], ["19", "100"], ["100", "107"], ["19", "107"], ["74", "73"], ["74", "73"], ["87", "73"], ["87", "73"], ["103", "101"], ["19", "101"], ["103", "101"], ["50", "74"], ["19", "74"], ["76", "74"], ["76", "74"], ["78", "87"], ["19", "87"], ["84", "87"], ["87", "103"], ["19", "103"], ["67", "103"], ["77", "76"], ["77", "76"], ["84", "76"], ["84", "76"], ["78", "77"], ["78", "77"], ["80", "77"], ["19", "77"], ["77", "84"], ["19", "84"], ["80", "78"], ["19", "78"], ["80", "78"], ["52", "80"], ["19", "80"], ["54", "80"], ["50", "107"], ["50", "68"], ["50", "73"], ["50", "96"], ["50", "77"], ["50", "57"], ["50", "66"], ["50", "116"], ["50", "99"], ["50", "84"], ["50", "114"], ["50", "72"], ["50", "103"], ["50", "69"], ["50", "67"], ["50", "74"], ["50", "95"], ["50", "76"], ["50", "65"], ["50", "87"], ["50", "97"], ["50", "101"], ["50", "80"], ["50", "100"], ["50", "110"], ["50", "117"], ["50", "63"], ["50", "78"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new MScanner())<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new MScanner())<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new MScanner())<SUB>2</SUB>>", "27": "<(IDENTIFIER,out,out = new PrintWriter(System.out))<SUB>3</SUB>>", "29": "<(&lt;init&gt;,new PrintWriter(System.out))<SUB>3</SUB>>", "31": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>3</SUB>>", "33": "<(FIELD_IDENTIFIER,out,out)<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,long N = nextLong())<SUB>5</SUB>>", "37": "<(nextLong,nextLong())<SUB>5</SUB>>", "39": "<(LOCAL,long M: long)<SUB>6</SUB>>", "41": "<(IDENTIFIER,M,long M = nextLong())<SUB>6</SUB>>", "43": "<(IDENTIFIER,sc,nextLong())<SUB>6</SUB>>", "45": "<(&lt;operator&gt;.assignment,long K = nextLong())<SUB>7</SUB>>", "47": "<(nextLong,nextLong())<SUB>7</SUB>>", "49": "<(CONTROL_STRUCTURE,if (M &lt;= N - N / K),if (M &lt;= N - N / K))<SUB>9</SUB>>", "51": "<(IDENTIFIER,M,M &lt;= N - N / K)<SUB>9</SUB>>", "53": "<(IDENTIFIER,N,N - N / K)<SUB>9</SUB>>", "55": "<(IDENTIFIER,N,N / K)<SUB>9</SUB>>", "57": "<(println,println(M))<SUB>10</SUB>>", "59": "<(IDENTIFIER,M,println(M))<SUB>10</SUB>>", "61": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>11</SUB>>", "63": "<(&lt;operator&gt;.assignment,long ans = (fastModExpo(2, M - (N - N % K) / K * (K - 1) - N % K + 1, mod) - 2) * K + M - (M - (N - N % K) / K * (K - 1) - N % K) * K)<SUB>12</SUB>>", "65": "<(&lt;operator&gt;.subtraction,(fastModExpo(2, M - (N - N % K) / K * (K - 1) - N % K + 1, mod) - 2) * K + M - (M - (N - N % K) / K * (K - 1) - N % K) * K)<SUB>12</SUB>>", "67": "<(&lt;operator&gt;.multiplication,(fastModExpo(2, M - (N - N % K) / K * (K - 1) - N % K + 1, mod) - 2) * K)<SUB>12</SUB>>", "69": "<(fastModExpo,fastModExpo(2, M - (N - N % K) / K * (K - 1) - N % K + 1, mod))<SUB>12</SUB>>", "71": "<(LITERAL,2,fastModExpo(2, M - (N - N % K) / K * (K - 1) - N % K + 1, mod))<SUB>12</SUB>>", "73": "<(&lt;operator&gt;.subtraction,M - (N - N % K) / K * (K - 1) - N % K)<SUB>12</SUB>>", "75": "<(IDENTIFIER,M,M - (N - N % K) / K * (K - 1))<SUB>12</SUB>>", "77": "<(&lt;operator&gt;.division,(N - N % K) / K)<SUB>12</SUB>>", "79": "<(IDENTIFIER,N,N - N % K)<SUB>12</SUB>>", "81": "<(IDENTIFIER,N,N % K)<SUB>12</SUB>>", "83": "<(IDENTIFIER,K,(N - N % K) / K)<SUB>12</SUB>>", "85": "<(IDENTIFIER,K,K - 1)<SUB>12</SUB>>", "87": "<(&lt;operator&gt;.modulo,N % K)<SUB>12</SUB>>", "89": "<(IDENTIFIER,K,N % K)<SUB>12</SUB>>", "91": "<(IDENTIFIER,mod,fastModExpo(2, M - (N - N % K) / K * (K - 1) - N % K + 1, mod))<SUB>12</SUB>>", "93": "<(IDENTIFIER,K,(fastModExpo(2, M - (N - N % K) / K * (K - 1) - N % K + 1, mod) - 2) * K)<SUB>12</SUB>>", "95": "<(&lt;operator&gt;.multiplication,(M - (N - N % K) / K * (K - 1) - N % K) * K)<SUB>12</SUB>>", "97": "<(&lt;operator&gt;.subtraction,M - (N - N % K) / K * (K - 1))<SUB>12</SUB>>", "99": "<(&lt;operator&gt;.multiplication,(N - N % K) / K * (K - 1))<SUB>12</SUB>>", "101": "<(&lt;operator&gt;.subtraction,N - N % K)<SUB>12</SUB>>", "103": "<(&lt;operator&gt;.modulo,N % K)<SUB>12</SUB>>", "105": "<(IDENTIFIER,K,N % K)<SUB>12</SUB>>", "107": "<(&lt;operator&gt;.subtraction,K - 1)<SUB>12</SUB>>", "109": "<(LITERAL,1,K - 1)<SUB>12</SUB>>", "111": "<(IDENTIFIER,N,N % K)<SUB>12</SUB>>", "113": "<(IDENTIFIER,K,(M - (N - N % K) / K * (K - 1) - N % K) * K)<SUB>12</SUB>>", "115": "<(IDENTIFIER,out,println((mod + ans) % mod))<SUB>13</SUB>>", "117": "<(&lt;operator&gt;.addition,mod + ans)<SUB>13</SUB>>", "119": "<(IDENTIFIER,ans,mod + ans)<SUB>13</SUB>>", "121": "<(close,close())<SUB>15</SUB>>", "123": "<(MODIFIER,PUBLIC)>", "125": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}