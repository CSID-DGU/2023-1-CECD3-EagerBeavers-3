{"edges": [["19", "20"], ["19", "21"], ["19", "82"], ["19", "83"], ["19", "84"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "36"], ["21", "37"], ["21", "43"], ["21", "44"], ["21", "51"], ["21", "52"], ["21", "59"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "30"], ["26", "35"], ["27", "28"], ["27", "29"], ["30", "31"], ["30", "32"], ["32", "33"], ["32", "34"], ["37", "38"], ["37", "39"], ["39", "40"], ["39", "42"], ["40", "41"], ["44", "45"], ["44", "46"], ["46", "47"], ["46", "48"], ["48", "49"], ["48", "50"], ["52", "53"], ["52", "54"], ["54", "55"], ["54", "56"], ["56", "57"], ["56", "58"], ["59", "60"], ["59", "65"], ["59", "72"], ["60", "61"], ["60", "64"], ["61", "62"], ["61", "63"], ["65", "66"], ["65", "69"], ["66", "67"], ["66", "68"], ["69", "70"], ["69", "71"], ["72", "73"], ["73", "74"], ["73", "77"], ["74", "75"], ["74", "76"], ["77", "78"], ["77", "81"], ["78", "79"], ["78", "80"], ["22", "29"], ["25", "40"], ["37", "48"], ["44", "56"], ["52", "61"], ["24", "22"], ["39", "37"], ["46", "44"], ["54", "52"], ["60", "68"], ["60", "76"], ["65", "84"], ["27", "34"], ["30", "25"], ["40", "39"], ["48", "46"], ["56", "54"], ["61", "60"], ["66", "69"], ["69", "65"], ["73", "84"], ["29", "27"], ["32", "30"], ["68", "66"], ["74", "78"], ["77", "73"], ["34", "32"], ["76", "74"], ["78", "77"], ["19", "24"], ["20", "84"], ["22", "84"], ["27", "84"], ["30", "84"], ["30", "84"], ["30", "84"], ["25", "84"], ["37", "84"], ["40", "84"], ["39", "84"], ["37", "84"], ["37", "84"], ["46", "84"], ["44", "84"], ["44", "84"], ["54", "84"], ["54", "84"], ["52", "84"], ["52", "84"], ["60", "84"], ["60", "84"], ["65", "84"], ["69", "84"], ["69", "84"], ["65", "84"], ["65", "84"], ["19", "20"], ["19", "22"], ["39", "37"], ["39", "37"], ["46", "44"], ["46", "44"], ["54", "52"], ["54", "52"], ["22", "25"], ["19", "25"], ["27", "25"], ["30", "25"], ["19", "27"], ["19", "35"], ["40", "39"], ["19", "39"], ["19", "46"], ["37", "46"], ["46", "54"], ["19", "54"], ["37", "54"], ["61", "60"], ["61", "60"], ["19", "60"], ["69", "65"], ["69", "65"], ["27", "30"], ["19", "30"], ["25", "40"], ["19", "40"], ["52", "61"], ["19", "61"], ["44", "61"], ["61", "69"], ["19", "69"], ["61", "69"], ["78", "73"], ["78", "73"], ["19", "73"], ["78", "77"], ["78", "77"], ["19", "77"], ["61", "78"], ["19", "78"], ["61", "78"], ["60", "76"], ["60", "68"], ["60", "73"], ["60", "77"], ["60", "65"], ["60", "66"], ["60", "69"], ["60", "74"], ["60", "78"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY br = new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "24": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "3": "<(IDENTIFIER,br,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "27": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "29": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>3</SUB>>", "31": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "33": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>3</SUB>>", "35": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "37": "<(&lt;operator&gt;.assignment,String[] s1 = split(&quot; &quot;))<SUB>4</SUB>>", "39": "<(split,split(&quot; &quot;))<SUB>4</SUB>>", "41": "<(IDENTIFIER,br,readLine())<SUB>4</SUB>>", "43": "<(LOCAL,int n: int)<SUB>5</SUB>>", "45": "<(IDENTIFIER,n,int n = Integer.parseInt(s1[0]))<SUB>5</SUB>>", "47": "<(IDENTIFIER,Integer,Integer.parseInt(s1[0]))<SUB>5</SUB>>", "49": "<(IDENTIFIER,s1,Integer.parseInt(s1[0]))<SUB>5</SUB>>", "51": "<(LOCAL,int S: int)<SUB>6</SUB>>", "53": "<(IDENTIFIER,S,int S = Integer.parseInt(s1[1]))<SUB>6</SUB>>", "55": "<(IDENTIFIER,Integer,Integer.parseInt(s1[1]))<SUB>6</SUB>>", "57": "<(IDENTIFIER,s1,Integer.parseInt(s1[1]))<SUB>6</SUB>>", "59": "<(CONTROL_STRUCTURE,if (S % n == 0),if (S % n == 0))<SUB>7</SUB>>", "61": "<(&lt;operator&gt;.modulo,S % n)<SUB>7</SUB>>", "63": "<(IDENTIFIER,n,S % n)<SUB>7</SUB>>", "65": "<(println,System.out.println(S / n))<SUB>8</SUB>>", "67": "<(IDENTIFIER,System,System.out.println(S / n))<SUB>8</SUB>>", "69": "<(&lt;operator&gt;.division,S / n)<SUB>8</SUB>>", "71": "<(IDENTIFIER,n,S / n)<SUB>8</SUB>>", "73": "<(println,System.out.println(S / n + 1))<SUB>10</SUB>>", "75": "<(IDENTIFIER,System,System.out.println(S / n + 1))<SUB>10</SUB>>", "77": "<(&lt;operator&gt;.addition,S / n + 1)<SUB>10</SUB>>", "79": "<(IDENTIFIER,S,S / n)<SUB>10</SUB>>", "81": "<(LITERAL,1,S / n + 1)<SUB>10</SUB>>", "83": "<(MODIFIER,STATIC)>"}}