{"edges": [["21", "23"], ["21", "371"], ["21", "372"], ["21", "373"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "38"], ["23", "41"], ["23", "44"], ["23", "45"], ["23", "51"], ["23", "52"], ["23", "58"], ["23", "59"], ["23", "64"], ["23", "83"], ["23", "84"], ["23", "89"], ["23", "159"], ["23", "160"], ["23", "163"], ["23", "366"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "32"], ["28", "37"], ["29", "30"], ["29", "31"], ["32", "33"], ["32", "34"], ["34", "35"], ["34", "36"], ["38", "39"], ["38", "40"], ["41", "5"], ["41", "42"], ["42", "43"], ["45", "46"], ["45", "47"], ["47", "48"], ["47", "49"], ["49", "50"], ["52", "53"], ["52", "54"], ["54", "55"], ["54", "56"], ["56", "57"], ["59", "60"], ["59", "61"], ["61", "62"], ["61", "63"], ["64", "65"], ["64", "66"], ["64", "69"], ["64", "72"], ["64", "74"], ["66", "67"], ["66", "68"], ["69", "70"], ["69", "71"], ["72", "73"], ["74", "75"], ["74", "78"], ["75", "76"], ["75", "77"], ["78", "79"], ["78", "80"], ["78", "81"], ["78", "82"], ["84", "85"], ["84", "86"], ["86", "87"], ["86", "88"], ["89", "90"], ["89", "91"], ["89", "94"], ["89", "97"], ["89", "99"], ["91", "92"], ["91", "93"], ["94", "95"], ["94", "96"], ["97", "98"], ["99", "100"], ["99", "101"], ["99", "106"], ["99", "109"], ["99", "111"], ["101", "102"], ["101", "103"], ["103", "104"], ["103", "105"], ["106", "107"], ["106", "108"], ["109", "110"], ["111", "112"], ["111", "113"], ["111", "118"], ["111", "146"], ["113", "114"], ["113", "115"], ["115", "116"], ["115", "117"], ["118", "119"], ["118", "120"], ["118", "123"], ["118", "126"], ["118", "128"], ["120", "121"], ["120", "122"], ["123", "124"], ["123", "125"], ["126", "127"], ["128", "129"], ["128", "130"], ["130", "131"], ["130", "132"], ["130", "133"], ["133", "134"], ["133", "135"], ["135", "136"], ["135", "141"], ["136", "137"], ["136", "140"], ["137", "138"], ["137", "139"], ["141", "142"], ["141", "145"], ["142", "143"], ["142", "144"], ["146", "147"], ["146", "152"], ["147", "148"], ["147", "151"], ["148", "149"], ["148", "150"], ["152", "153"], ["152", "158"], ["153", "154"], ["153", "157"], ["154", "155"], ["154", "156"], ["160", "161"], ["160", "162"], ["163", "164"], ["163", "165"], ["163", "168"], ["163", "171"], ["163", "173"], ["165", "166"], ["165", "167"], ["168", "169"], ["168", "170"], ["171", "172"], ["173", "174"], ["173", "175"], ["173", "182"], ["173", "190"], ["173", "305"], ["175", "176"], ["175", "177"], ["177", "178"], ["177", "181"], ["178", "179"], ["178", "180"], ["182", "183"], ["182", "184"], ["182", "187"], ["184", "185"], ["184", "186"], ["187", "188"], ["187", "189"], ["190", "191"], ["190", "192"], ["190", "195"], ["190", "200"], ["190", "202"], ["192", "193"], ["192", "194"], ["195", "196"], ["195", "197"], ["197", "198"], ["197", "199"], ["200", "201"], ["202", "203"], ["202", "216"], ["203", "204"], ["203", "215"], ["204", "205"], ["204", "210"], ["205", "206"], ["205", "209"], ["206", "207"], ["206", "208"], ["210", "211"], ["210", "212"], ["212", "213"], ["212", "214"], ["216", "217"], ["216", "218"], ["216", "221"], ["216", "224"], ["216", "226"], ["218", "219"], ["218", "220"], ["221", "222"], ["221", "223"], ["224", "225"], ["226", "227"], ["226", "238"], ["227", "228"], ["227", "235"], ["228", "229"], ["228", "234"], ["229", "230"], ["229", "231"], ["231", "232"], ["231", "233"], ["235", "236"], ["235", "237"], ["238", "239"], ["239", "240"], ["239", "241"], ["239", "244"], ["239", "247"], ["239", "249"], ["241", "242"], ["241", "243"], ["244", "245"], ["244", "246"], ["247", "248"], ["249", "250"], ["249", "257"], ["250", "251"], ["250", "256"], ["251", "252"], ["251", "253"], ["253", "254"], ["253", "255"], ["257", "258"], ["257", "259"], ["257", "266"], ["259", "260"], ["259", "261"], ["261", "262"], ["261", "263"], ["263", "264"], ["263", "265"], ["266", "267"], ["266", "270"], ["266", "279"], ["267", "268"], ["267", "269"], ["270", "271"], ["270", "276"], ["271", "272"], ["271", "275"], ["272", "273"], ["272", "274"], ["276", "277"], ["276", "278"], ["279", "280"], ["280", "281"], ["280", "286"], ["281", "282"], ["281", "285"], ["282", "283"], ["282", "284"], ["286", "287"], ["286", "288"], ["286", "293"], ["288", "289"], ["288", "292"], ["289", "290"], ["289", "291"], ["293", "294"], ["293", "295"], ["293", "300"], ["295", "296"], ["295", "299"], ["296", "297"], ["296", "298"], ["300", "301"], ["300", "304"], ["301", "302"], ["301", "303"], ["305", "306"], ["305", "307"], ["305", "310"], ["305", "313"], ["305", "315"], ["307", "308"], ["307", "309"], ["310", "311"], ["310", "312"], ["313", "314"], ["315", "316"], ["315", "317"], ["315", "328"], ["315", "360"], ["317", "318"], ["317", "319"], ["319", "320"], ["319", "327"], ["320", "321"], ["320", "322"], ["322", "323"], ["322", "326"], ["323", "324"], ["323", "325"], ["328", "329"], ["328", "330"], ["328", "333"], ["328", "338"], ["328", "340"], ["330", "331"], ["330", "332"], ["333", "334"], ["333", "335"], ["335", "336"], ["335", "337"], ["338", "339"], ["340", "341"], ["340", "342"], ["342", "343"], ["342", "344"], ["342", "345"], ["345", "346"], ["345", "347"], ["347", "348"], ["347", "353"], ["348", "349"], ["348", "352"], ["349", "350"], ["349", "351"], ["353", "354"], ["353", "357"], ["354", "355"], ["354", "356"], ["357", "358"], ["357", "359"], ["360", "361"], ["360", "362"], ["362", "363"], ["362", "364"], ["362", "365"], ["366", "367"], ["366", "370"], ["367", "368"], ["367", "369"], ["24", "31"], ["27", "40"], ["38", "42"], ["41", "49"], ["45", "56"], ["52", "61"], ["59", "66"], ["84", "91"], ["160", "165"], ["366", "373"], ["26", "24"], ["40", "38"], ["42", "41"], ["47", "45"], ["54", "52"], ["61", "59"], ["66", "69"], ["69", "75"], ["69", "86"], ["72", "69"], ["74", "72"], ["86", "84"], ["91", "94"], ["94", "103"], ["94", "160"], ["97", "94"], ["165", "168"], ["168", "178"], ["168", "369"], ["171", "168"], ["367", "366"], ["29", "36"], ["32", "27"], ["49", "47"], ["56", "54"], ["75", "78"], ["78", "74"], ["101", "106"], ["106", "117"], ["106", "97"], ["109", "106"], ["175", "184"], ["182", "192"], ["369", "367"], ["31", "29"], ["34", "32"], ["103", "101"], ["113", "120"], ["146", "109"], ["177", "175"], ["184", "189"], ["187", "182"], ["192", "197"], ["195", "206"], ["195", "307"], ["200", "197"], ["307", "310"], ["310", "323"], ["310", "171"], ["313", "310"], ["36", "34"], ["115", "113"], ["120", "123"], ["123", "137"], ["123", "148"], ["126", "123"], ["128", "126"], ["147", "154"], ["152", "146"], ["178", "177"], ["189", "187"], ["197", "195"], ["317", "330"], ["360", "313"], ["117", "115"], ["130", "128"], ["148", "147"], ["153", "152"], ["204", "200"], ["204", "218"], ["218", "221"], ["221", "231"], ["221", "200"], ["224", "221"], ["319", "317"], ["330", "335"], ["333", "349"], ["333", "362"], ["338", "335"], ["340", "338"], ["362", "360"], ["133", "130"], ["154", "153"], ["205", "204"], ["205", "212"], ["210", "204"], ["227", "241"], ["227", "224"], ["320", "319"], ["335", "333"], ["342", "340"], ["135", "133"], ["206", "205"], ["212", "210"], ["228", "227"], ["228", "235"], ["235", "227"], ["322", "320"], ["345", "342"], ["136", "142"], ["141", "135"], ["229", "228"], ["241", "244"], ["244", "253"], ["244", "224"], ["247", "244"], ["323", "322"], ["347", "345"], ["137", "136"], ["142", "141"], ["231", "229"], ["250", "263"], ["250", "247"], ["348", "354"], ["353", "347"], ["251", "250"], ["259", "267"], ["349", "348"], ["354", "357"], ["357", "353"], ["253", "251"], ["261", "259"], ["267", "272"], ["267", "282"], ["270", "247"], ["263", "261"], ["271", "278"], ["276", "270"], ["280", "247"], ["272", "271"], ["278", "276"], ["281", "289"], ["286", "280"], ["282", "281"], ["288", "296"], ["293", "286"], ["289", "288"], ["295", "301"], ["300", "293"], ["296", "295"], ["301", "300"], ["21", "26"], ["22", "373"], ["24", "373"], ["29", "373"], ["32", "373"], ["32", "373"], ["32", "373"], ["27", "373"], ["38", "373"], ["42", "373"], ["41", "373"], ["41", "373"], ["45", "373"], ["54", "373"], ["56", "373"], ["54", "373"], ["52", "373"], ["52", "373"], ["59", "373"], ["61", "373"], ["59", "373"], ["59", "373"], ["66", "373"], ["69", "373"], ["69", "373"], ["84", "373"], ["84", "373"], ["84", "373"], ["91", "373"], ["94", "373"], ["94", "373"], ["160", "373"], ["165", "373"], ["168", "373"], ["168", "373"], ["168", "373"], ["366", "373"], ["366", "373"], ["366", "373"], ["175", "373"], ["175", "373"], ["175", "373"], ["182", "373"], ["182", "373"], ["182", "373"], ["192", "373"], ["195", "373"], ["195", "373"], ["195", "373"], ["307", "373"], ["310", "373"], ["310", "373"], ["171", "373"], ["322", "373"], ["317", "373"], ["317", "373"], ["330", "373"], ["333", "373"], ["335", "373"], ["333", "373"], ["333", "373"], ["362", "373"], ["362", "373"], ["360", "373"], ["360", "373"], ["313", "373"], ["347", "373"], ["347", "373"], ["345", "373"], ["342", "373"], ["340", "373"], ["340", "373"], ["338", "373"], ["206", "373"], ["205", "373"], ["204", "373"], ["210", "373"], ["204", "373"], ["204", "373"], ["218", "373"], ["221", "373"], ["221", "373"], ["229", "373"], ["228", "373"], ["227", "373"], ["227", "373"], ["227", "373"], ["224", "373"], ["251", "373"], ["250", "373"], ["250", "373"], ["259", "373"], ["261", "373"], ["259", "373"], ["259", "373"], ["267", "373"], ["280", "373"], ["286", "373"], ["293", "373"], ["293", "373"], ["286", "373"], ["280", "373"], ["280", "373"], ["270", "373"], ["270", "373"], ["270", "373"], ["247", "373"], ["200", "373"], ["101", "373"], ["101", "373"], ["106", "373"], ["106", "373"], ["97", "373"], ["113", "373"], ["113", "373"], ["120", "373"], ["123", "373"], ["123", "373"], ["123", "373"], ["146", "373"], ["152", "373"], ["152", "373"], ["146", "373"], ["146", "373"], ["109", "373"], ["130", "373"], ["135", "373"], ["135", "373"], ["133", "373"], ["130", "373"], ["128", "373"], ["128", "373"], ["126", "373"], ["74", "373"], ["78", "373"], ["78", "373"], ["78", "373"], ["74", "373"], ["74", "373"], ["72", "373"], ["78", "373"], ["182", "373"], ["21", "22"], ["21", "24"], ["21", "38"], ["47", "45"], ["47", "45"], ["54", "52"], ["54", "52"], ["61", "59"], ["61", "59"], ["86", "84"], ["21", "160"], ["24", "27"], ["21", "27"], ["29", "27"], ["32", "27"], ["38", "41"], ["21", "41"], ["42", "41"], ["21", "66"], ["78", "74"], ["78", "74"], ["78", "74"], ["78", "74"], ["21", "91"], ["21", "165"], ["160", "366"], ["360", "366"], ["21", "366"], ["21", "29"], ["21", "37"], ["27", "42"], ["21", "42"], ["21", "47"], ["49", "47"], ["47", "54"], ["21", "54"], ["56", "54"], ["45", "61"], ["21", "61"], ["52", "61"], ["66", "69"], ["72", "69"], ["21", "69"], ["61", "69"], ["69", "72"], ["21", "72"], ["69", "86"], ["21", "86"], ["91", "94"], ["97", "94"], ["21", "94"], ["86", "94"], ["106", "94"], ["21", "97"], ["94", "97"], ["94", "101"], ["21", "101"], ["165", "168"], ["171", "168"], ["21", "168"], ["94", "168"], ["310", "168"], ["168", "171"], ["212", "171"], ["21", "171"], ["177", "175"], ["177", "175"], ["29", "32"], ["21", "32"], ["41", "49"], ["21", "49"], ["49", "56"], ["21", "56"], ["21", "78"], ["61", "78"], ["42", "78"], ["56", "78"], ["101", "106"], ["109", "106"], ["21", "106"], ["94", "106"], ["106", "109"], ["21", "109"], ["54", "113"], ["152", "146"], ["113", "146"], ["128", "146"], ["21", "146"], ["21", "182"], ["175", "182"], ["54", "182"], ["206", "182"], ["21", "192"], ["21", "307"], ["94", "103"], ["21", "103"], ["21", "120"], ["130", "128"], ["130", "128"], ["130", "128"], ["178", "177"], ["178", "177"], ["21", "177"], ["192", "195"], ["200", "195"], ["21", "195"], ["197", "195"], ["197", "195"], ["206", "200"], ["210", "200"], ["229", "200"], ["235", "200"], ["251", "200"], ["267", "200"], ["21", "200"], ["307", "310"], ["313", "310"], ["21", "310"], ["197", "310"], ["323", "310"], ["310", "313"], ["21", "313"], ["362", "360"], ["362", "360"], ["362", "360"], ["120", "123"], ["126", "123"], ["21", "123"], ["61", "123"], ["78", "123"], ["123", "126"], ["21", "126"], ["113", "152"], ["128", "152"], ["21", "152"], ["21", "178"], ["168", "178"], ["21", "197"], ["177", "197"], ["221", "197"], ["21", "218"], ["21", "330"], ["342", "340"], ["342", "340"], ["342", "340"], ["133", "130"], ["21", "130"], ["113", "130"], ["128", "130"], ["133", "130"], ["205", "204"], ["205", "204"], ["210", "204"], ["210", "204"], ["218", "221"], ["224", "221"], ["21", "221"], ["197", "221"], ["244", "221"], ["231", "224"], ["21", "224"], ["330", "333"], ["338", "333"], ["21", "333"], ["335", "333"], ["335", "333"], ["21", "338"], ["333", "338"], ["342", "362"], ["286", "362"], ["130", "362"], ["21", "362"], ["160", "362"], ["360", "362"], ["317", "362"], ["340", "362"], ["130", "133"], ["21", "133"], ["135", "133"], ["135", "133"], ["206", "205"], ["206", "205"], ["21", "205"], ["206", "210"], ["21", "210"], ["212", "210"], ["212", "210"], ["228", "227"], ["228", "227"], ["267", "227"], ["235", "227"], ["235", "227"], ["61", "335"], ["123", "335"], ["78", "335"], ["21", "335"], ["345", "342"], ["21", "342"], ["317", "342"], ["340", "342"], ["345", "342"], ["54", "206"], ["182", "206"], ["21", "206"], ["195", "206"], ["21", "212"], ["168", "212"], ["229", "228"], ["229", "228"], ["21", "228"], ["229", "235"], ["21", "235"], ["21", "241"], ["323", "322"], ["323", "322"], ["21", "322"], ["362", "345"], ["342", "345"], ["286", "345"], ["130", "345"], ["21", "345"], ["347", "345"], ["347", "345"], ["206", "229"], ["210", "229"], ["235", "229"], ["251", "229"], ["267", "229"], ["21", "229"], ["231", "229"], ["231", "229"], ["241", "244"], ["247", "244"], ["21", "244"], ["221", "244"], ["253", "247"], ["263", "247"], ["21", "247"], ["21", "323"], ["310", "323"], ["135", "347"], ["21", "231"], ["221", "231"], ["251", "250"], ["251", "250"], ["21", "250"], ["261", "259"], ["261", "259"], ["229", "251"], ["235", "251"], ["267", "251"], ["21", "251"], ["253", "251"], ["253", "251"], ["206", "270"], ["333", "357"], ["21", "357"], ["21", "253"], ["244", "253"], ["251", "261"], ["21", "261"], ["263", "261"], ["263", "261"], ["261", "267"], ["21", "267"], ["286", "280"], ["286", "280"], ["286", "280"], ["21", "263"], ["253", "263"], ["293", "286"], ["21", "286"], ["280", "286"], ["270", "286"], ["293", "286"], ["293", "286"], ["362", "293"], ["286", "293"], ["130", "293"], ["21", "293"], ["69", "74"], ["69", "72"], ["69", "75"], ["69", "69"], ["69", "78"], ["94", "94"], ["94", "103"], ["94", "97"], ["94", "101"], ["94", "106"], ["168", "192"], ["168", "168"], ["168", "195"], ["168", "184"], ["168", "182"], ["168", "310"], ["168", "177"], ["168", "178"], ["168", "197"], ["168", "189"], ["168", "307"], ["168", "187"], ["168", "171"], ["168", "175"], ["106", "120"], ["106", "154"], ["106", "146"], ["106", "148"], ["106", "152"], ["106", "123"], ["106", "147"], ["106", "117"], ["106", "109"], ["106", "115"], ["106", "113"], ["106", "153"], ["106", "106"], ["195", "204"], ["195", "206"], ["195", "195"], ["195", "200"], ["195", "197"], ["195", "205"], ["310", "322"], ["310", "317"], ["310", "362"], ["310", "310"], ["310", "323"], ["310", "360"], ["310", "335"], ["310", "319"], ["310", "320"], ["310", "333"], ["310", "330"], ["310", "313"], ["123", "136"], ["123", "128"], ["123", "141"], ["123", "123"], ["123", "135"], ["123", "133"], ["123", "137"], ["123", "130"], ["123", "142"], ["123", "126"], ["204", "221"], ["204", "218"], ["221", "228"], ["221", "224"], ["221", "229"], ["221", "227"], ["221", "231"], ["221", "221"], ["333", "338"], ["333", "349"], ["333", "340"], ["333", "348"], ["333", "347"], ["333", "357"], ["333", "335"], ["333", "342"], ["333", "353"], ["333", "333"], ["333", "354"], ["333", "345"], ["205", "212"], ["205", "210"], ["227", "241"], ["227", "244"], ["228", "235"], ["244", "247"], ["244", "253"], ["244", "244"], ["244", "251"], ["244", "250"], ["250", "261"], ["250", "259"], ["250", "267"], ["250", "263"], ["267", "272"], ["267", "300"], ["267", "281"], ["267", "288"], ["267", "276"], ["267", "296"], ["267", "278"], ["267", "282"], ["267", "301"], ["267", "289"], ["267", "293"], ["267", "280"], ["267", "286"], ["267", "295"], ["267", "270"], ["267", "271"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY infile = new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "26": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "3": "<(IDENTIFIER,infile,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "29": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "31": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>3</SUB>>", "33": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "35": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>3</SUB>>", "37": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "38": "<(&lt;operator&gt;.assignment,ANY st = new StringTokenizer(infile.readLine()))<SUB>4</SUB>>", "40": "<(&lt;operator&gt;.alloc,new StringTokenizer(infile.readLine()))<SUB>4</SUB>>", "5": "<(IDENTIFIER,st,new StringTokenizer(infile.readLine()))<SUB>4</SUB>>", "43": "<(IDENTIFIER,infile,readLine())<SUB>4</SUB>>", "45": "<(&lt;operator&gt;.assignment,int N = parseInt(st.nextToken()))<SUB>5</SUB>>", "47": "<(parseInt,parseInt(st.nextToken()))<SUB>5</SUB>>", "49": "<(nextToken,nextToken())<SUB>5</SUB>>", "51": "<(LOCAL,int M: int)<SUB>6</SUB>>", "53": "<(IDENTIFIER,M,int M = parseInt(st.nextToken()))<SUB>6</SUB>>", "55": "<(IDENTIFIER,Integer,parseInt(st.nextToken()))<SUB>6</SUB>>", "57": "<(IDENTIFIER,st,nextToken())<SUB>6</SUB>>", "59": "<(&lt;operator&gt;.assignment,int[][] grid = new int[N][M])<SUB>7</SUB>>", "61": "<(&lt;operator&gt;.alloc,new int[N][M])>", "63": "<(IDENTIFIER,M,new int[N][M])<SUB>7</SUB>>", "65": "<(LOCAL,int i: int)<SUB>8</SUB>>", "67": "<(IDENTIFIER,i,int i = 0)<SUB>8</SUB>>", "69": "<(&lt;operator&gt;.lessThan,i &lt; N)<SUB>8</SUB>>", "71": "<(IDENTIFIER,N,i &lt; N)<SUB>8</SUB>>", "73": "<(IDENTIFIER,i,i++)<SUB>8</SUB>>", "75": "<(&lt;operator&gt;.indexAccess,grid[i])<SUB>9</SUB>>", "77": "<(IDENTIFIER,i,grid[i] = readArr(M, infile, st))<SUB>9</SUB>>", "79": "<(IDENTIFIER,this,readArr(M, infile, st))<SUB>9</SUB>>", "81": "<(IDENTIFIER,infile,readArr(M, infile, st))<SUB>9</SUB>>", "83": "<(LOCAL,int[][] mindiff: int[][])<SUB>10</SUB>>", "85": "<(IDENTIFIER,mindiff,int[][] mindiff = new int[N][N])<SUB>10</SUB>>", "87": "<(IDENTIFIER,N,new int[N][N])<SUB>10</SUB>>", "89": "<(CONTROL_STRUCTURE,for (int a = 0; Some(a &lt; N); a++),for (int a = 0; Some(a &lt; N); a++))<SUB>11</SUB>>", "91": "<(&lt;operator&gt;.assignment,int a = 0)<SUB>11</SUB>>", "93": "<(LITERAL,0,int a = 0)<SUB>11</SUB>>", "95": "<(IDENTIFIER,a,a &lt; N)<SUB>11</SUB>>", "97": "<(&lt;operator&gt;.postIncrement,a++)<SUB>11</SUB>>", "99": "<(CONTROL_STRUCTURE,for (int b = a + 1; Some(b &lt; N); b++),for (int b = a + 1; Some(b &lt; N); b++))<SUB>12</SUB>>", "101": "<(&lt;operator&gt;.assignment,int b = a + 1)<SUB>12</SUB>>", "103": "<(&lt;operator&gt;.addition,a + 1)<SUB>12</SUB>>", "105": "<(LITERAL,1,a + 1)<SUB>12</SUB>>", "107": "<(IDENTIFIER,b,b &lt; N)<SUB>12</SUB>>", "109": "<(&lt;operator&gt;.postIncrement,b++)<SUB>12</SUB>>", "111": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>13</SUB>>", "113": "<(&lt;operator&gt;.assignment,int val = Integer.MAX_VALUE)<SUB>14</SUB>>", "115": "<(&lt;operator&gt;.fieldAccess,Integer.MAX_VALUE)<SUB>14</SUB>>", "117": "<(FIELD_IDENTIFIER,MAX_VALUE,MAX_VALUE)<SUB>14</SUB>>", "119": "<(LOCAL,int i: int)<SUB>15</SUB>>", "121": "<(IDENTIFIER,i,int i = 0)<SUB>15</SUB>>", "123": "<(&lt;operator&gt;.lessThan,i &lt; M)<SUB>15</SUB>>", "125": "<(IDENTIFIER,M,i &lt; M)<SUB>15</SUB>>", "127": "<(IDENTIFIER,i,i++)<SUB>15</SUB>>", "129": "<(IDENTIFIER,val,val = Math.min(val, Math.abs(grid[a][i] - grid[b][i])))<SUB>16</SUB>>", "131": "<(IDENTIFIER,Math,Math.min(val, Math.abs(grid[a][i] - grid[b][i])))<SUB>16</SUB>>", "133": "<(abs,Math.abs(grid[a][i] - grid[b][i]))<SUB>16</SUB>>", "135": "<(&lt;operator&gt;.subtraction,grid[a][i] - grid[b][i])<SUB>16</SUB>>", "137": "<(&lt;operator&gt;.indexAccess,grid[a])<SUB>16</SUB>>", "139": "<(IDENTIFIER,a,grid[a][i] - grid[b][i])<SUB>16</SUB>>", "141": "<(&lt;operator&gt;.indexAccess,grid[b][i])<SUB>16</SUB>>", "143": "<(IDENTIFIER,grid,grid[a][i] - grid[b][i])<SUB>16</SUB>>", "145": "<(IDENTIFIER,i,grid[a][i] - grid[b][i])<SUB>16</SUB>>", "147": "<(&lt;operator&gt;.indexAccess,mindiff[a][b])<SUB>17</SUB>>", "149": "<(IDENTIFIER,mindiff,mindiff[a][b] = mindiff[b][a] = val)<SUB>17</SUB>>", "151": "<(IDENTIFIER,b,mindiff[a][b] = mindiff[b][a] = val)<SUB>17</SUB>>", "153": "<(&lt;operator&gt;.indexAccess,mindiff[b][a])<SUB>17</SUB>>", "155": "<(IDENTIFIER,mindiff,mindiff[b][a] = val)<SUB>17</SUB>>", "157": "<(IDENTIFIER,a,mindiff[b][a] = val)<SUB>17</SUB>>", "159": "<(LOCAL,int res: int)<SUB>19</SUB>>", "161": "<(IDENTIFIER,res,int res = 0)<SUB>19</SUB>>", "163": "<(CONTROL_STRUCTURE,for (int start = 0; Some(start &lt; N); start++),for (int start = 0; Some(start &lt; N); start++))<SUB>20</SUB>>", "165": "<(&lt;operator&gt;.assignment,int start = 0)<SUB>20</SUB>>", "167": "<(LITERAL,0,int start = 0)<SUB>20</SUB>>", "169": "<(IDENTIFIER,start,start &lt; N)<SUB>20</SUB>>", "171": "<(&lt;operator&gt;.postIncrement,start++)<SUB>20</SUB>>", "173": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>21</SUB>>", "175": "<(&lt;operator&gt;.assignment,int[][] dp = new int[1 &lt;&lt; N][N])<SUB>22</SUB>>", "177": "<(&lt;operator&gt;.alloc,new int[1 &lt;&lt; N][N])>", "179": "<(LITERAL,1,1 &lt;&lt; N)<SUB>22</SUB>>", "181": "<(IDENTIFIER,N,new int[1 &lt;&lt; N][N])<SUB>22</SUB>>", "183": "<(IDENTIFIER,Arrays,fill(dp[0], Integer.MAX_VALUE))<SUB>23</SUB>>", "185": "<(IDENTIFIER,dp,fill(dp[0], Integer.MAX_VALUE))<SUB>23</SUB>>", "187": "<(&lt;operator&gt;.fieldAccess,Integer.MAX_VALUE)<SUB>23</SUB>>", "189": "<(FIELD_IDENTIFIER,MAX_VALUE,MAX_VALUE)<SUB>23</SUB>>", "191": "<(LOCAL,int mask: int)<SUB>24</SUB>>", "193": "<(IDENTIFIER,mask,int mask = 0)<SUB>24</SUB>>", "195": "<(&lt;operator&gt;.lessThan,mask &lt; (1 &lt;&lt; N))<SUB>24</SUB>>", "197": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; N)<SUB>24</SUB>>", "199": "<(IDENTIFIER,N,1 &lt;&lt; N)<SUB>24</SUB>>", "201": "<(IDENTIFIER,mask,mask++)<SUB>24</SUB>>", "203": "<(CONTROL_STRUCTURE,if (Integer.bitCount(mask) == 1 &amp;&amp; mask != (1 &lt;&lt; start)),if (Integer.bitCount(mask) == 1 &amp;&amp; mask != (1 &lt;&lt; start)))<SUB>26</SUB>>", "205": "<(&lt;operator&gt;.equals,Integer.bitCount(mask) == 1)<SUB>26</SUB>>", "207": "<(IDENTIFIER,Integer,Integer.bitCount(mask))<SUB>26</SUB>>", "209": "<(LITERAL,1,Integer.bitCount(mask) == 1)<SUB>26</SUB>>", "211": "<(IDENTIFIER,mask,mask != (1 &lt;&lt; start))<SUB>26</SUB>>", "213": "<(LITERAL,1,1 &lt;&lt; start)<SUB>26</SUB>>", "215": "<(CONTROL_STRUCTURE,continue;,continue;)<SUB>27</SUB>>", "217": "<(LOCAL,int prev: int)<SUB>28</SUB>>", "219": "<(IDENTIFIER,prev,int prev = 0)<SUB>28</SUB>>", "221": "<(&lt;operator&gt;.lessThan,prev &lt; N)<SUB>28</SUB>>", "223": "<(IDENTIFIER,N,prev &lt; N)<SUB>28</SUB>>", "225": "<(IDENTIFIER,prev,prev++)<SUB>28</SUB>>", "227": "<(&lt;operator&gt;.logicalOr,(mask &amp; (1 &lt;&lt; prev)) &gt; 0 || mask == 0)<SUB>29</SUB>>", "229": "<(&lt;operator&gt;.and,mask &amp; (1 &lt;&lt; prev))<SUB>29</SUB>>", "231": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; prev)<SUB>29</SUB>>", "233": "<(IDENTIFIER,prev,1 &lt;&lt; prev)<SUB>29</SUB>>", "235": "<(&lt;operator&gt;.equals,mask == 0)<SUB>29</SUB>>", "237": "<(LITERAL,0,mask == 0)<SUB>29</SUB>>", "239": "<(CONTROL_STRUCTURE,for (int b = 0; Some(b &lt; N); b++),for (int b = 0; Some(b &lt; N); b++))<SUB>31</SUB>>", "241": "<(&lt;operator&gt;.assignment,int b = 0)<SUB>31</SUB>>", "243": "<(LITERAL,0,int b = 0)<SUB>31</SUB>>", "245": "<(IDENTIFIER,b,b &lt; N)<SUB>31</SUB>>", "247": "<(&lt;operator&gt;.postIncrement,b++)<SUB>31</SUB>>", "249": "<(CONTROL_STRUCTURE,if ((mask &amp; (1 &lt;&lt; b)) == 0),if ((mask &amp; (1 &lt;&lt; b)) == 0))<SUB>32</SUB>>", "251": "<(&lt;operator&gt;.and,mask &amp; (1 &lt;&lt; b))<SUB>32</SUB>>", "253": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; b)<SUB>32</SUB>>", "255": "<(IDENTIFIER,b,1 &lt;&lt; b)<SUB>32</SUB>>", "257": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>33</SUB>>", "259": "<(&lt;operator&gt;.assignment,int submask = mask | (1 &lt;&lt; b))<SUB>34</SUB>>", "261": "<(&lt;operator&gt;.or,mask | (1 &lt;&lt; b))<SUB>34</SUB>>", "263": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; b)<SUB>34</SUB>>", "265": "<(IDENTIFIER,b,1 &lt;&lt; b)<SUB>34</SUB>>", "267": "<(&lt;operator&gt;.equals,mask == 0)<SUB>35</SUB>>", "269": "<(LITERAL,0,mask == 0)<SUB>35</SUB>>", "271": "<(&lt;operator&gt;.indexAccess,dp[submask][b])<SUB>36</SUB>>", "273": "<(IDENTIFIER,dp,dp[submask][b] = Integer.MAX_VALUE)<SUB>36</SUB>>", "275": "<(IDENTIFIER,b,dp[submask][b] = Integer.MAX_VALUE)<SUB>36</SUB>>", "277": "<(IDENTIFIER,Integer,dp[submask][b] = Integer.MAX_VALUE)<SUB>36</SUB>>", "279": "<(CONTROL_STRUCTURE,else,else)<SUB>38</SUB>>", "281": "<(&lt;operator&gt;.indexAccess,dp[submask][b])<SUB>38</SUB>>", "283": "<(IDENTIFIER,dp,dp[submask][b] = Math.max(dp[submask][b], Math.min(dp[mask][prev], mindiff[prev][b])))<SUB>38</SUB>>", "285": "<(IDENTIFIER,b,dp[submask][b] = Math.max(dp[submask][b], Math.min(dp[mask][prev], mindiff[prev][b])))<SUB>38</SUB>>", "287": "<(IDENTIFIER,Math,Math.max(dp[submask][b], Math.min(dp[mask][prev], mindiff[prev][b])))<SUB>38</SUB>>", "289": "<(&lt;operator&gt;.indexAccess,dp[submask])<SUB>38</SUB>>", "291": "<(IDENTIFIER,submask,Math.max(dp[submask][b], Math.min(dp[mask][prev], mindiff[prev][b])))<SUB>38</SUB>>", "293": "<(min,Math.min(dp[mask][prev], mindiff[prev][b]))<SUB>38</SUB>>", "295": "<(&lt;operator&gt;.indexAccess,dp[mask][prev])<SUB>38</SUB>>", "297": "<(IDENTIFIER,dp,Math.min(dp[mask][prev], mindiff[prev][b]))<SUB>38</SUB>>", "299": "<(IDENTIFIER,prev,Math.min(dp[mask][prev], mindiff[prev][b]))<SUB>38</SUB>>", "301": "<(&lt;operator&gt;.indexAccess,mindiff[prev])<SUB>38</SUB>>", "303": "<(IDENTIFIER,prev,Math.min(dp[mask][prev], mindiff[prev][b]))<SUB>38</SUB>>", "305": "<(CONTROL_STRUCTURE,for (int b = 0; Some(b &lt; N); b++),for (int b = 0; Some(b &lt; N); b++))<SUB>42</SUB>>", "307": "<(&lt;operator&gt;.assignment,int b = 0)<SUB>42</SUB>>", "309": "<(LITERAL,0,int b = 0)<SUB>42</SUB>>", "311": "<(IDENTIFIER,b,b &lt; N)<SUB>42</SUB>>", "313": "<(&lt;operator&gt;.postIncrement,b++)<SUB>42</SUB>>", "315": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>43</SUB>>", "317": "<(&lt;operator&gt;.assignment,int temp = dp[(1 &lt;&lt; N) - 1][b])<SUB>44</SUB>>", "319": "<(&lt;operator&gt;.indexAccess,dp[(1 &lt;&lt; N) - 1][b])<SUB>44</SUB>>", "321": "<(IDENTIFIER,dp,int temp = dp[(1 &lt;&lt; N) - 1][b])<SUB>44</SUB>>", "323": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; N)<SUB>44</SUB>>", "325": "<(IDENTIFIER,N,1 &lt;&lt; N)<SUB>44</SUB>>", "327": "<(IDENTIFIER,b,int temp = dp[(1 &lt;&lt; N) - 1][b])<SUB>44</SUB>>", "329": "<(LOCAL,int i: int)<SUB>45</SUB>>", "331": "<(IDENTIFIER,i,int i = 0)<SUB>45</SUB>>", "333": "<(&lt;operator&gt;.lessThan,i &lt; M - 1)<SUB>45</SUB>>", "335": "<(&lt;operator&gt;.subtraction,M - 1)<SUB>45</SUB>>", "337": "<(LITERAL,1,M - 1)<SUB>45</SUB>>", "339": "<(IDENTIFIER,i,i++)<SUB>45</SUB>>", "341": "<(IDENTIFIER,temp,temp = Math.min(temp, Math.abs(grid[b][i] - grid[start][i + 1])))<SUB>46</SUB>>", "343": "<(IDENTIFIER,Math,Math.min(temp, Math.abs(grid[b][i] - grid[start][i + 1])))<SUB>46</SUB>>", "345": "<(abs,Math.abs(grid[b][i] - grid[start][i + 1]))<SUB>46</SUB>>", "347": "<(&lt;operator&gt;.subtraction,grid[b][i] - grid[start][i + 1])<SUB>46</SUB>>", "349": "<(&lt;operator&gt;.indexAccess,grid[b])<SUB>46</SUB>>", "351": "<(IDENTIFIER,b,grid[b][i] - grid[start][i + 1])<SUB>46</SUB>>", "353": "<(&lt;operator&gt;.indexAccess,grid[start][i + 1])<SUB>46</SUB>>", "355": "<(IDENTIFIER,grid,grid[b][i] - grid[start][i + 1])<SUB>46</SUB>>", "357": "<(&lt;operator&gt;.addition,i + 1)<SUB>46</SUB>>", "359": "<(LITERAL,1,i + 1)<SUB>46</SUB>>", "361": "<(IDENTIFIER,res,res = Math.max(res, temp))<SUB>47</SUB>>", "363": "<(IDENTIFIER,Math,Math.max(res, temp))<SUB>47</SUB>>", "365": "<(IDENTIFIER,temp,Math.max(res, temp))<SUB>47</SUB>>", "367": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>50</SUB>>", "369": "<(FIELD_IDENTIFIER,out,out)<SUB>50</SUB>>", "371": "<(MODIFIER,PUBLIC)>", "373": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}