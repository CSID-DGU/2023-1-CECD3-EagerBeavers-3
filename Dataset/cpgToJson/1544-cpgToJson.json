{"edges": [["21", "23"], ["21", "109"], ["21", "110"], ["21", "111"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "31"], ["23", "34"], ["23", "35"], ["23", "36"], ["23", "37"], ["23", "38"], ["23", "39"], ["23", "43"], ["23", "47"], ["23", "50"], ["23", "54"], ["23", "70"], ["23", "73"], ["23", "104"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["31", "32"], ["31", "33"], ["34", "5"], ["39", "40"], ["39", "41"], ["41", "42"], ["43", "44"], ["43", "45"], ["45", "46"], ["47", "48"], ["47", "49"], ["50", "51"], ["50", "52"], ["52", "53"], ["54", "55"], ["54", "56"], ["54", "59"], ["54", "62"], ["54", "64"], ["56", "57"], ["56", "58"], ["59", "60"], ["59", "61"], ["62", "63"], ["64", "65"], ["64", "68"], ["65", "66"], ["65", "67"], ["68", "69"], ["70", "71"], ["70", "72"], ["73", "74"], ["73", "75"], ["73", "78"], ["73", "81"], ["73", "83"], ["75", "76"], ["75", "77"], ["78", "79"], ["78", "80"], ["81", "82"], ["83", "84"], ["83", "85"], ["83", "90"], ["85", "86"], ["85", "87"], ["87", "88"], ["87", "89"], ["90", "91"], ["90", "95"], ["91", "92"], ["92", "93"], ["92", "94"], ["95", "96"], ["95", "102"], ["96", "97"], ["96", "98"], ["96", "101"], ["98", "99"], ["98", "100"], ["102", "103"], ["104", "105"], ["104", "108"], ["105", "106"], ["105", "107"], ["24", "30"], ["27", "33"], ["31", "34"], ["34", "41"], ["39", "45"], ["43", "47"], ["47", "52"], ["50", "56"], ["70", "75"], ["104", "111"], ["26", "24"], ["28", "27"], ["33", "31"], ["41", "39"], ["45", "43"], ["52", "50"], ["56", "59"], ["59", "65"], ["59", "70"], ["62", "59"], ["64", "62"], ["75", "78"], ["78", "87"], ["78", "107"], ["81", "78"], ["105", "104"], ["30", "28"], ["65", "68"], ["68", "64"], ["85", "92"], ["107", "105"], ["87", "85"], ["91", "98"], ["91", "81"], ["92", "91"], ["96", "102"], ["102", "81"], ["98", "96"], ["21", "26"], ["22", "111"], ["24", "111"], ["27", "111"], ["27", "111"], ["31", "111"], ["34", "111"], ["34", "111"], ["39", "111"], ["43", "111"], ["45", "111"], ["43", "111"], ["43", "111"], ["47", "111"], ["50", "111"], ["50", "111"], ["70", "111"], ["70", "111"], ["75", "111"], ["78", "111"], ["78", "111"], ["78", "111"], ["104", "111"], ["104", "111"], ["104", "111"], ["85", "111"], ["85", "111"], ["92", "111"], ["92", "111"], ["91", "111"], ["91", "111"], ["96", "111"], ["98", "111"], ["98", "111"], ["96", "111"], ["96", "111"], ["102", "111"], ["81", "111"], ["64", "111"], ["68", "111"], ["64", "111"], ["64", "111"], ["62", "111"], ["70", "111"], ["21", "22"], ["21", "24"], ["21", "31"], ["41", "39"], ["45", "43"], ["21", "47"], ["52", "50"], ["24", "27"], ["21", "27"], ["31", "34"], ["21", "34"], ["21", "56"], ["68", "64"], ["21", "70"], ["50", "70"], ["64", "70"], ["21", "75"], ["47", "104"], ["102", "104"], ["21", "104"], ["27", "41"], ["21", "41"], ["41", "45"], ["21", "45"], ["39", "52"], ["21", "52"], ["56", "59"], ["62", "59"], ["21", "59"], ["52", "59"], ["59", "62"], ["21", "62"], ["75", "78"], ["81", "78"], ["21", "78"], ["59", "78"], ["78", "81"], ["21", "81"], ["70", "85"], ["64", "85"], ["45", "68"], ["21", "68"], ["92", "91"], ["92", "91"], ["34", "92"], ["96", "92"], ["21", "92"], ["85", "92"], ["92", "96"], ["21", "96"], ["98", "96"], ["98", "96"], ["47", "102"], ["21", "102"], ["92", "98"], ["21", "98"], ["43", "98"], ["59", "68"], ["59", "64"], ["59", "65"], ["59", "59"], ["59", "62"], ["78", "81"], ["78", "85"], ["78", "92"], ["78", "87"], ["78", "91"], ["78", "78"], ["91", "96"], ["91", "98"], ["91", "102"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY in = new Scanner(System.in))<SUB>3</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>3</SUB>>", "3": "<(IDENTIFIER,in,new Scanner(System.in))<SUB>3</SUB>>", "29": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>3</SUB>>", "6": "<(LOCAL,Hashtable&lt;Long, Boolean&gt; d: ANY)<SUB>4</SUB>>", "32": "<(IDENTIFIER,d,ANY d = new Hashtable&lt;Long, Boolean&gt;())<SUB>4</SUB>>", "34": "<(&lt;init&gt;,new Hashtable&lt;Long, Boolean&gt;())<SUB>4</SUB>>", "35": "<(LOCAL,int n: int)<SUB>5</SUB>>", "37": "<(LOCAL,int size: int)<SUB>5</SUB>>", "39": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>5</SUB>>", "41": "<(nextInt,nextInt())<SUB>5</SUB>>", "43": "<(&lt;operator&gt;.assignment,int k = nextInt())<SUB>5</SUB>>", "45": "<(nextInt,nextInt())<SUB>5</SUB>>", "47": "<(&lt;operator&gt;.assignment,int size = 0)<SUB>5</SUB>>", "49": "<(LITERAL,0,int size = 0)<SUB>5</SUB>>", "51": "<(IDENTIFIER,a,int[] a = new int[n])<SUB>5</SUB>>", "53": "<(IDENTIFIER,n,new int[n])<SUB>5</SUB>>", "55": "<(LOCAL,int i: int)<SUB>6</SUB>>", "57": "<(IDENTIFIER,i,int i = 0)<SUB>6</SUB>>", "59": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>6</SUB>>", "61": "<(IDENTIFIER,n,i &lt; n)<SUB>6</SUB>>", "63": "<(IDENTIFIER,i,i++)<SUB>6</SUB>>", "65": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>6</SUB>>", "67": "<(IDENTIFIER,i,a[i] = nextInt())<SUB>6</SUB>>", "69": "<(IDENTIFIER,in,nextInt())<SUB>6</SUB>>", "71": "<(IDENTIFIER,Arrays,sort(a))<SUB>7</SUB>>", "73": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>8</SUB>>", "75": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>8</SUB>>", "77": "<(LITERAL,0,int i = 0)<SUB>8</SUB>>", "79": "<(IDENTIFIER,i,i &lt; n)<SUB>8</SUB>>", "81": "<(&lt;operator&gt;.postIncrement,i++)<SUB>8</SUB>>", "83": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>>", "85": "<(&lt;operator&gt;.assignment,long x = a[i])<SUB>9</SUB>>", "87": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>9</SUB>>", "89": "<(IDENTIFIER,i,long x = a[i])<SUB>9</SUB>>", "91": "<(&lt;operator&gt;.logicalNot,!d.containsKey(x))<SUB>10</SUB>>", "93": "<(IDENTIFIER,d,containsKey(x))<SUB>10</SUB>>", "95": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "97": "<(IDENTIFIER,d,put(x * k, true))<SUB>11</SUB>>", "99": "<(IDENTIFIER,x,x * k)<SUB>11</SUB>>", "101": "<(LITERAL,true,put(x * k, true))<SUB>11</SUB>>", "103": "<(IDENTIFIER,size,size++)<SUB>12</SUB>>", "105": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>15</SUB>>", "107": "<(FIELD_IDENTIFIER,out,out)<SUB>15</SUB>>", "109": "<(MODIFIER,PUBLIC)>", "111": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}