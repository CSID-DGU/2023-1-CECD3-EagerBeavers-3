{"edges": [["21", "22"], ["21", "23"], ["21", "194"], ["21", "195"], ["21", "196"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "31"], ["23", "35"], ["23", "38"], ["23", "39"], ["23", "6"], ["23", "43"], ["23", "46"], ["23", "47"], ["23", "48"], ["23", "52"], ["23", "83"], ["23", "84"], ["23", "87"], ["23", "88"], ["23", "91"], ["23", "92"], ["23", "95"], ["23", "96"], ["23", "100"], ["23", "107"], ["23", "108"], ["23", "111"], ["23", "189"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["31", "32"], ["31", "33"], ["33", "34"], ["35", "36"], ["35", "37"], ["39", "40"], ["39", "41"], ["41", "42"], ["43", "44"], ["43", "45"], ["46", "5"], ["48", "49"], ["48", "50"], ["50", "51"], ["52", "53"], ["52", "54"], ["52", "57"], ["52", "60"], ["52", "62"], ["54", "55"], ["54", "56"], ["57", "58"], ["57", "59"], ["60", "61"], ["62", "63"], ["63", "64"], ["63", "70"], ["64", "65"], ["65", "66"], ["65", "67"], ["67", "68"], ["67", "69"], ["70", "71"], ["70", "78"], ["71", "72"], ["71", "77"], ["72", "73"], ["72", "74"], ["74", "75"], ["74", "76"], ["78", "79"], ["78", "80"], ["80", "81"], ["80", "82"], ["84", "85"], ["84", "86"], ["88", "89"], ["88", "90"], ["92", "93"], ["92", "94"], ["96", "97"], ["96", "98"], ["98", "99"], ["100", "101"], ["100", "106"], ["101", "102"], ["101", "103"], ["103", "104"], ["103", "105"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "115"], ["112", "113"], ["112", "114"], ["115", "116"], ["115", "131"], ["115", "160"], ["115", "187"], ["116", "117"], ["116", "121"], ["117", "118"], ["117", "119"], ["119", "120"], ["121", "122"], ["121", "123"], ["123", "124"], ["123", "125"], ["123", "126"], ["126", "127"], ["126", "130"], ["127", "128"], ["127", "129"], ["131", "132"], ["131", "140"], ["132", "133"], ["132", "136"], ["133", "134"], ["133", "135"], ["136", "137"], ["136", "138"], ["138", "139"], ["140", "141"], ["140", "147"], ["140", "157"], ["140", "159"], ["141", "142"], ["142", "143"], ["142", "144"], ["144", "145"], ["144", "146"], ["147", "148"], ["147", "155"], ["148", "149"], ["148", "154"], ["149", "150"], ["149", "151"], ["151", "152"], ["151", "153"], ["155", "156"], ["157", "158"], ["160", "161"], ["160", "166"], ["161", "162"], ["161", "163"], ["163", "164"], ["163", "165"], ["166", "167"], ["166", "175"], ["167", "168"], ["168", "169"], ["168", "170"], ["170", "171"], ["170", "172"], ["172", "173"], ["172", "174"], ["175", "176"], ["175", "185"], ["176", "177"], ["176", "184"], ["177", "178"], ["177", "179"], ["179", "180"], ["179", "181"], ["181", "182"], ["181", "183"], ["185", "186"], ["187", "188"], ["189", "190"], ["189", "193"], ["190", "191"], ["190", "192"], ["24", "30"], ["27", "33"], ["31", "35"], ["35", "41"], ["39", "45"], ["43", "46"], ["46", "50"], ["48", "54"], ["84", "88"], ["88", "92"], ["92", "98"], ["96", "103"], ["100", "108"], ["108", "112"], ["189", "196"], ["26", "24"], ["28", "27"], ["33", "31"], ["41", "39"], ["45", "43"], ["50", "48"], ["54", "57"], ["57", "67"], ["57", "84"], ["60", "57"], ["98", "96"], ["101", "100"], ["112", "119"], ["112", "192"], ["190", "189"], ["30", "28"], ["103", "101"], ["187", "112"], ["192", "190"], ["64", "74"], ["64", "60"], ["117", "127"], ["117", "133"], ["121", "133"], ["132", "144"], ["132", "163"], ["161", "172"], ["161", "187"], ["65", "64"], ["71", "80"], ["78", "60"], ["119", "117"], ["123", "121"], ["133", "132"], ["133", "138"], ["136", "132"], ["141", "151"], ["157", "112"], ["163", "161"], ["167", "181"], ["67", "65"], ["72", "71"], ["80", "78"], ["126", "123"], ["138", "136"], ["142", "141"], ["148", "155"], ["148", "157"], ["155", "157"], ["168", "167"], ["176", "185"], ["176", "187"], ["185", "187"], ["74", "72"], ["127", "126"], ["144", "142"], ["149", "148"], ["170", "168"], ["177", "176"], ["151", "149"], ["172", "170"], ["179", "177"], ["181", "179"], ["21", "26"], ["22", "196"], ["24", "196"], ["27", "196"], ["27", "196"], ["31", "196"], ["31", "196"], ["35", "196"], ["41", "196"], ["39", "196"], ["39", "196"], ["43", "196"], ["46", "196"], ["46", "196"], ["48", "196"], ["48", "196"], ["48", "196"], ["54", "196"], ["57", "196"], ["57", "196"], ["84", "196"], ["84", "196"], ["88", "196"], ["92", "196"], ["92", "196"], ["96", "196"], ["96", "196"], ["96", "196"], ["103", "196"], ["100", "196"], ["100", "196"], ["108", "196"], ["112", "196"], ["112", "196"], ["112", "196"], ["189", "196"], ["189", "196"], ["189", "196"], ["117", "196"], ["119", "196"], ["117", "196"], ["126", "196"], ["123", "196"], ["121", "196"], ["121", "196"], ["133", "196"], ["132", "196"], ["136", "196"], ["138", "196"], ["136", "196"], ["132", "196"], ["132", "196"], ["161", "196"], ["161", "196"], ["167", "196"], ["179", "196"], ["179", "196"], ["176", "196"], ["176", "196"], ["185", "196"], ["185", "196"], ["187", "196"], ["141", "196"], ["151", "196"], ["148", "196"], ["148", "196"], ["155", "196"], ["155", "196"], ["157", "196"], ["157", "196"], ["64", "196"], ["64", "196"], ["71", "196"], ["71", "196"], ["78", "196"], ["78", "196"], ["78", "196"], ["60", "196"], ["35", "196"], ["123", "196"], ["21", "22"], ["21", "24"], ["33", "31"], ["21", "35"], ["41", "39"], ["21", "43"], ["50", "48"], ["21", "84"], ["21", "88"], ["21", "92"], ["98", "96"], ["21", "100"], ["57", "108"], ["21", "108"], ["24", "27"], ["21", "27"], ["43", "46"], ["21", "46"], ["21", "54"], ["108", "189"], ["121", "189"], ["21", "189"], ["27", "33"], ["21", "33"], ["33", "41"], ["21", "41"], ["21", "50"], ["54", "57"], ["60", "57"], ["21", "57"], ["31", "57"], ["67", "60"], ["80", "60"], ["21", "60"], ["21", "98"], ["88", "112"], ["133", "112"], ["187", "112"], ["21", "112"], ["163", "112"], ["57", "112"], ["39", "103"], ["67", "103"], ["80", "103"], ["21", "103"], ["123", "121"], ["123", "121"], ["123", "121"], ["161", "187"], ["21", "187"], ["48", "64"], ["71", "64"], ["21", "71"], ["92", "117"], ["136", "117"], ["185", "117"], ["155", "117"], ["21", "117"], ["119", "117"], ["133", "132"], ["133", "132"], ["136", "132"], ["136", "132"], ["117", "132"], ["133", "161"], ["21", "161"], ["163", "161"], ["163", "161"], ["46", "78"], ["21", "78"], ["80", "78"], ["80", "78"], ["46", "119"], ["138", "119"], ["78", "119"], ["21", "119"], ["21", "123"], ["108", "123"], ["121", "123"], ["127", "123"], ["127", "123"], ["84", "133"], ["127", "133"], ["157", "133"], ["21", "133"], ["112", "133"], ["127", "133"], ["117", "136"], ["21", "136"], ["138", "136"], ["96", "141"], ["148", "141"], ["151", "157"], ["21", "157"], ["112", "163"], ["21", "163"], ["96", "167"], ["176", "167"], ["39", "67"], ["80", "67"], ["21", "67"], ["57", "67"], ["74", "80"], ["21", "80"], ["74", "80"], ["127", "126"], ["127", "126"], ["21", "126"], ["119", "138"], ["21", "138"], ["96", "148"], ["141", "148"], ["21", "148"], ["117", "155"], ["136", "155"], ["21", "155"], ["96", "176"], ["167", "176"], ["21", "176"], ["117", "185"], ["136", "185"], ["21", "185"], ["67", "74"], ["21", "74"], ["67", "74"], ["112", "127"], ["21", "127"], ["84", "127"], ["133", "127"], ["157", "127"], ["103", "144"], ["179", "144"], ["151", "144"], ["21", "144"], ["133", "144"], ["103", "170"], ["179", "170"], ["151", "170"], ["21", "170"], ["161", "170"], ["144", "151"], ["21", "151"], ["144", "151"], ["161", "172"], ["21", "172"], ["170", "179"], ["21", "179"], ["161", "179"], ["21", "181"], ["161", "181"], ["57", "60"], ["57", "64"], ["57", "57"], ["57", "67"], ["57", "65"], ["112", "132"], ["112", "119"], ["112", "112"], ["112", "117"], ["112", "133"], ["64", "72"], ["64", "74"], ["64", "80"], ["64", "71"], ["64", "78"], ["117", "121"], ["117", "123"], ["117", "126"], ["117", "127"], ["132", "141"], ["132", "161"], ["132", "163"], ["132", "149"], ["132", "142"], ["132", "151"], ["132", "157"], ["132", "144"], ["132", "148"], ["132", "187"], ["161", "167"], ["161", "179"], ["161", "168"], ["161", "170"], ["161", "176"], ["161", "181"], ["161", "177"], ["161", "172"], ["133", "136"], ["133", "138"], ["148", "155"], ["176", "185"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "31": "<(&lt;operator&gt;.assignment,n = nextInt())<SUB>3</SUB>>", "33": "<(nextInt,nextInt())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,k = 0)<SUB>4</SUB>>", "37": "<(LITERAL,0,k = 0)<SUB>4</SUB>>", "39": "<(&lt;operator&gt;.assignment,String line = nextLine())<SUB>6</SUB>>", "41": "<(nextLine,nextLine())<SUB>6</SUB>>", "6": "<(LOCAL,ArrayList&lt;Character&gt; poks: ANY)<SUB>8</SUB>>", "44": "<(IDENTIFIER,poks,ANY poks = new ArrayList&lt;Character&gt;())<SUB>8</SUB>>", "46": "<(&lt;init&gt;,new ArrayList&lt;Character&gt;())<SUB>8</SUB>>", "47": "<(LOCAL,boolean[] ex: boolean[])<SUB>9</SUB>>", "49": "<(IDENTIFIER,ex,boolean[] ex = new boolean[256])<SUB>9</SUB>>", "51": "<(LITERAL,256,new boolean[256])<SUB>9</SUB>>", "53": "<(LOCAL,int i: int)<SUB>11</SUB>>", "55": "<(IDENTIFIER,i,int i = 0)<SUB>11</SUB>>", "57": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>11</SUB>>", "59": "<(IDENTIFIER,n,i &lt; n)<SUB>11</SUB>>", "61": "<(IDENTIFIER,i,i++)<SUB>11</SUB>>", "63": "<(CONTROL_STRUCTURE,if (!ex[line.charAt(i)]),if (!ex[line.charAt(i)]))<SUB>13</SUB>>", "65": "<(&lt;operator&gt;.indexAccess,ex[line.charAt(i)])<SUB>13</SUB>>", "67": "<(charAt,line.charAt(i))<SUB>13</SUB>>", "69": "<(IDENTIFIER,i,line.charAt(i))<SUB>13</SUB>>", "71": "<(&lt;operator&gt;.assignment,ex[line.charAt(i)] = true)<SUB>15</SUB>>", "73": "<(IDENTIFIER,ex,ex[line.charAt(i)] = true)<SUB>15</SUB>>", "75": "<(IDENTIFIER,line,line.charAt(i))<SUB>15</SUB>>", "77": "<(LITERAL,true,ex[line.charAt(i)] = true)<SUB>15</SUB>>", "79": "<(IDENTIFIER,poks,add(line.charAt(i)))<SUB>16</SUB>>", "81": "<(IDENTIFIER,line,line.charAt(i))<SUB>16</SUB>>", "83": "<(LOCAL,int l: int)<SUB>21</SUB>>", "85": "<(IDENTIFIER,l,int l = 0)<SUB>21</SUB>>", "87": "<(LOCAL,int r: int)<SUB>22</SUB>>", "89": "<(IDENTIFIER,r,int r = 0)<SUB>22</SUB>>", "91": "<(LOCAL,int dist: int)<SUB>23</SUB>>", "93": "<(IDENTIFIER,dist,int dist = 1)<SUB>23</SUB>>", "95": "<(LOCAL,int[] occ: int[])<SUB>24</SUB>>", "97": "<(IDENTIFIER,occ,int[] occ = new int[256])<SUB>24</SUB>>", "99": "<(LITERAL,256,new int[256])<SUB>24</SUB>>", "101": "<(&lt;operator&gt;.indexAccess,occ[line.charAt(0)])<SUB>25</SUB>>", "103": "<(charAt,line.charAt(0))<SUB>25</SUB>>", "105": "<(LITERAL,0,line.charAt(0))<SUB>25</SUB>>", "107": "<(LOCAL,int min: int)<SUB>27</SUB>>", "109": "<(IDENTIFIER,min,int min = n)<SUB>27</SUB>>", "111": "<(CONTROL_STRUCTURE,while (r &lt; n),while (r &lt; n))<SUB>28</SUB>>", "113": "<(IDENTIFIER,r,r &lt; n)<SUB>28</SUB>>", "115": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>29</SUB>>", "117": "<(&lt;operator&gt;.equals,dist == poks.size())<SUB>30</SUB>>", "119": "<(size,size())<SUB>30</SUB>>", "121": "<(&lt;operator&gt;.assignment,min = Math.min(min, r - l + 1))<SUB>31</SUB>>", "123": "<(min,Math.min(min, r - l + 1))<SUB>31</SUB>>", "125": "<(IDENTIFIER,min,Math.min(min, r - l + 1))<SUB>31</SUB>>", "127": "<(&lt;operator&gt;.subtraction,r - l)<SUB>31</SUB>>", "129": "<(IDENTIFIER,l,r - l)<SUB>31</SUB>>", "131": "<(CONTROL_STRUCTURE,if (l &lt; r &amp;&amp; dist == poks.size()),if (l &lt; r &amp;&amp; dist == poks.size()))<SUB>32</SUB>>", "133": "<(&lt;operator&gt;.lessThan,l &lt; r)<SUB>32</SUB>>", "135": "<(IDENTIFIER,r,l &lt; r)<SUB>32</SUB>>", "137": "<(IDENTIFIER,dist,dist == poks.size())<SUB>32</SUB>>", "139": "<(IDENTIFIER,poks,size())<SUB>32</SUB>>", "141": "<(&lt;operator&gt;.postDecrement,occ[line.charAt(l)]--)<SUB>35</SUB>>", "143": "<(IDENTIFIER,occ,occ[line.charAt(l)]--)<SUB>35</SUB>>", "145": "<(IDENTIFIER,line,line.charAt(l))<SUB>35</SUB>>", "147": "<(CONTROL_STRUCTURE,if (occ[line.charAt(l)] == 0),if (occ[line.charAt(l)] == 0))<SUB>36</SUB>>", "149": "<(&lt;operator&gt;.indexAccess,occ[line.charAt(l)])<SUB>36</SUB>>", "151": "<(charAt,line.charAt(l))<SUB>36</SUB>>", "153": "<(IDENTIFIER,l,line.charAt(l))<SUB>36</SUB>>", "155": "<(&lt;operator&gt;.postDecrement,dist--)<SUB>37</SUB>>", "157": "<(&lt;operator&gt;.postIncrement,l++)<SUB>38</SUB>>", "159": "<(CONTROL_STRUCTURE,continue;,continue;)<SUB>39</SUB>>", "161": "<(&lt;operator&gt;.lessThan,r &lt; n - 1)<SUB>41</SUB>>", "163": "<(&lt;operator&gt;.subtraction,n - 1)<SUB>41</SUB>>", "165": "<(LITERAL,1,n - 1)<SUB>41</SUB>>", "167": "<(&lt;operator&gt;.postIncrement,occ[line.charAt(r + 1)]++)<SUB>42</SUB>>", "169": "<(IDENTIFIER,occ,occ[line.charAt(r + 1)]++)<SUB>42</SUB>>", "171": "<(IDENTIFIER,line,line.charAt(r + 1))<SUB>42</SUB>>", "173": "<(IDENTIFIER,r,r + 1)<SUB>42</SUB>>", "175": "<(CONTROL_STRUCTURE,if (occ[line.charAt(r + 1)] == 1),if (occ[line.charAt(r + 1)] == 1))<SUB>43</SUB>>", "177": "<(&lt;operator&gt;.indexAccess,occ[line.charAt(r + 1)])<SUB>43</SUB>>", "179": "<(charAt,line.charAt(r + 1))<SUB>43</SUB>>", "181": "<(&lt;operator&gt;.addition,r + 1)<SUB>43</SUB>>", "183": "<(LITERAL,1,r + 1)<SUB>43</SUB>>", "185": "<(&lt;operator&gt;.postIncrement,dist++)<SUB>44</SUB>>", "187": "<(&lt;operator&gt;.postIncrement,r++)<SUB>46</SUB>>", "189": "<(println,System.out.println(min))<SUB>48</SUB>>", "191": "<(IDENTIFIER,System,System.out.println(min))<SUB>48</SUB>>", "193": "<(IDENTIFIER,min,System.out.println(min))<SUB>48</SUB>>", "195": "<(MODIFIER,STATIC)>"}}