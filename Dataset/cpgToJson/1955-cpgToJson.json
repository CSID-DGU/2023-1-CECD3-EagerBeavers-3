{"edges": [["19", "20"], ["19", "21"], ["19", "126"], ["19", "127"], ["19", "128"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "41"], ["21", "42"], ["21", "46"], ["21", "71"], ["21", "81"], ["21", "82"], ["21", "85"], ["21", "121"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["37", "40"], ["38", "39"], ["42", "43"], ["42", "44"], ["44", "45"], ["46", "47"], ["46", "48"], ["46", "51"], ["46", "54"], ["46", "56"], ["48", "49"], ["48", "50"], ["51", "52"], ["51", "53"], ["54", "55"], ["56", "57"], ["56", "60"], ["57", "58"], ["57", "59"], ["60", "61"], ["60", "64"], ["60", "70"], ["61", "62"], ["61", "63"], ["64", "65"], ["64", "66"], ["64", "68"], ["66", "67"], ["68", "69"], ["71", "72"], ["71", "73"], ["71", "74"], ["74", "75"], ["74", "78"], ["74", "80"], ["75", "76"], ["75", "77"], ["78", "79"], ["82", "83"], ["82", "84"], ["85", "86"], ["85", "87"], ["85", "90"], ["85", "93"], ["85", "95"], ["87", "88"], ["87", "89"], ["90", "91"], ["90", "92"], ["93", "94"], ["95", "96"], ["95", "119"], ["96", "97"], ["96", "108"], ["97", "98"], ["97", "103"], ["98", "99"], ["98", "102"], ["99", "100"], ["99", "101"], ["103", "104"], ["103", "107"], ["104", "105"], ["104", "106"], ["108", "109"], ["108", "114"], ["109", "110"], ["109", "113"], ["110", "111"], ["110", "112"], ["114", "115"], ["114", "118"], ["115", "116"], ["115", "117"], ["119", "120"], ["121", "122"], ["121", "125"], ["122", "123"], ["122", "124"], ["22", "28"], ["25", "32"], ["30", "38"], ["35", "44"], ["42", "48"], ["71", "82"], ["82", "87"], ["121", "128"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["44", "42"], ["48", "51"], ["51", "57"], ["51", "77"], ["54", "51"], ["56", "54"], ["87", "90"], ["90", "99"], ["90", "124"], ["93", "90"], ["122", "121"], ["28", "26"], ["38", "37"], ["57", "63"], ["75", "78"], ["78", "71"], ["96", "119"], ["96", "93"], ["119", "93"], ["124", "122"], ["61", "66"], ["64", "56"], ["77", "75"], ["97", "96"], ["97", "110"], ["108", "96"], ["63", "61"], ["66", "68"], ["68", "64"], ["98", "104"], ["103", "97"], ["109", "115"], ["114", "108"], ["99", "102"], ["102", "98"], ["104", "107"], ["107", "103"], ["110", "113"], ["113", "109"], ["115", "118"], ["118", "114"], ["19", "24"], ["20", "128"], ["22", "128"], ["25", "128"], ["25", "128"], ["30", "128"], ["35", "128"], ["38", "128"], ["37", "128"], ["35", "128"], ["35", "128"], ["42", "128"], ["42", "128"], ["71", "128"], ["75", "128"], ["78", "128"], ["78", "128"], ["71", "128"], ["82", "128"], ["87", "128"], ["90", "128"], ["90", "128"], ["90", "128"], ["121", "128"], ["121", "128"], ["121", "128"], ["97", "128"], ["96", "128"], ["108", "128"], ["96", "128"], ["96", "128"], ["119", "128"], ["93", "128"], ["56", "128"], ["64", "128"], ["64", "128"], ["68", "128"], ["64", "128"], ["56", "128"], ["54", "128"], ["71", "128"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["37", "35"], ["44", "42"], ["19", "82"], ["22", "25"], ["19", "25"], ["19", "48"], ["61", "56"], ["64", "56"], ["19", "56"], ["19", "71"], ["42", "71"], ["56", "71"], ["75", "71"], ["78", "71"], ["19", "87"], ["82", "121"], ["119", "121"], ["19", "121"], ["25", "32"], ["19", "32"], ["38", "37"], ["19", "37"], ["30", "44"], ["19", "44"], ["48", "51"], ["54", "51"], ["19", "51"], ["44", "51"], ["51", "54"], ["19", "54"], ["19", "75"], ["19", "80"], ["87", "90"], ["93", "90"], ["19", "90"], ["51", "90"], ["90", "93"], ["19", "93"], ["32", "38"], ["19", "38"], ["19", "61"], ["19", "70"], ["75", "78"], ["19", "78"], ["97", "96"], ["97", "96"], ["108", "96"], ["108", "96"], ["82", "119"], ["19", "119"], ["61", "64"], ["19", "64"], ["66", "64"], ["68", "64"], ["38", "66"], ["68", "66"], ["19", "66"], ["66", "68"], ["19", "68"], ["51", "68"], ["51", "64"], ["51", "51"], ["51", "57"], ["51", "66"], ["51", "56"], ["51", "54"], ["51", "61"], ["51", "63"], ["90", "107"], ["90", "96"], ["90", "98"], ["90", "99"], ["90", "102"], ["90", "103"], ["90", "104"], ["90", "97"], ["90", "93"], ["90", "90"], ["96", "119"], ["97", "115"], ["97", "113"], ["97", "114"], ["97", "118"], ["97", "110"], ["97", "108"], ["97", "109"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY r = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,r,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,int N: int)<SUB>3</SUB>>", "31": "<(IDENTIFIER,N,int N = nextInt())<SUB>3</SUB>>", "33": "<(IDENTIFIER,r,nextInt())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,int K = r.nextInt() - 1)<SUB>4</SUB>>", "37": "<(&lt;operator&gt;.subtraction,r.nextInt() - 1)<SUB>4</SUB>>", "39": "<(IDENTIFIER,r,nextInt())<SUB>4</SUB>>", "41": "<(LOCAL,T[] a: ANY)<SUB>6</SUB>>", "43": "<(IDENTIFIER,a,ANY a = new T[N])<SUB>6</SUB>>", "45": "<(IDENTIFIER,N,new T[N])<SUB>6</SUB>>", "47": "<(LOCAL,int i: int)<SUB>7</SUB>>", "49": "<(IDENTIFIER,i,int i = 0)<SUB>7</SUB>>", "51": "<(&lt;operator&gt;.lessThan,i &lt; N)<SUB>7</SUB>>", "53": "<(IDENTIFIER,N,i &lt; N)<SUB>7</SUB>>", "55": "<(IDENTIFIER,i,i++)<SUB>7</SUB>>", "57": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>8</SUB>>", "59": "<(IDENTIFIER,i,a[i] = new T(r.nextInt(), r.nextInt()))<SUB>8</SUB>>", "61": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "63": "<(&lt;operator&gt;.alloc,new T(r.nextInt(), r.nextInt()))<SUB>8</SUB>>", "65": "<(IDENTIFIER,$obj1,new T(r.nextInt(), r.nextInt()))>", "67": "<(IDENTIFIER,r,nextInt())<SUB>8</SUB>>", "69": "<(IDENTIFIER,r,nextInt())<SUB>8</SUB>>", "71": "<(sort,sort(a, new Comparator&lt;T&gt;() {\\012\\012    @Override\\012    public int compare(T x, T y) {\\012        if (x.p &gt; y.p)\\012            return -1;\\012        else if (x.p == y.p) {\\012            if (x.t &lt; y.t)\\012                return -1;\\012            else if (x.t == y.t)\\012                return 0;\\012            else\\012                return 1;\\012        } else\\012            return 1;\\012    }\\012}))<SUB>10</SUB>>", "73": "<(IDENTIFIER,a,sort(a, new Comparator&lt;T&gt;() {\\012\\012    @Override\\012    public int compare(T x, T y) {\\012        if (x.p &gt; y.p)\\012            return -1;\\012        else if (x.p == y.p) {\\012            if (x.t &lt; y.t)\\012                return -1;\\012            else if (x.t == y.t)\\012                return 0;\\012            else\\012                return 1;\\012        } else\\012            return 1;\\012    }\\012}))<SUB>10</SUB>>", "75": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "77": "<(&lt;operator&gt;.alloc,new Comparator&lt;T&gt;() {\\012\\012    @Override\\012    public int compare(T x, T y) {\\012        if (x.p &gt; y.p)\\012            return -1;\\012        else if (x.p == y.p) {\\012            if (x.t &lt; y.t)\\012                return -1;\\012            else if (x.t == y.t)\\012                return 0;\\012            else\\012                return 1;\\012        } else\\012            return 1;\\012    }\\012})<SUB>10</SUB>>", "79": "<(IDENTIFIER,$obj2,new Comparator&lt;T&gt;() {\\012\\012    @Override\\012    public int compare(T x, T y) {\\012        if (x.p &gt; y.p)\\012            return -1;\\012        else if (x.p == y.p) {\\012            if (x.t &lt; y.t)\\012                return -1;\\012            else if (x.t == y.t)\\012                return 0;\\012            else\\012                return 1;\\012        } else\\012            return 1;\\012    }\\012})>", "81": "<(LOCAL,int ret: int)<SUB>23</SUB>>", "83": "<(IDENTIFIER,ret,int ret = 0)<SUB>23</SUB>>", "85": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; N); i++),for (int i = 0; Some(i &lt; N); i++))<SUB>24</SUB>>", "87": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>24</SUB>>", "89": "<(LITERAL,0,int i = 0)<SUB>24</SUB>>", "91": "<(IDENTIFIER,i,i &lt; N)<SUB>24</SUB>>", "93": "<(&lt;operator&gt;.postIncrement,i++)<SUB>24</SUB>>", "95": "<(CONTROL_STRUCTURE,if (a[i].p == a[K].p &amp;&amp; a[i].t == a[K].t),if (a[i].p == a[K].p &amp;&amp; a[i].t == a[K].t))<SUB>25</SUB>>", "97": "<(&lt;operator&gt;.equals,a[i].p == a[K].p)<SUB>25</SUB>>", "99": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>25</SUB>>", "101": "<(IDENTIFIER,i,a[i].p == a[K].p)<SUB>25</SUB>>", "103": "<(&lt;operator&gt;.fieldAccess,a[K].p)<SUB>25</SUB>>", "105": "<(IDENTIFIER,a,a[i].p == a[K].p)<SUB>25</SUB>>", "107": "<(FIELD_IDENTIFIER,p,p)<SUB>25</SUB>>", "109": "<(&lt;operator&gt;.fieldAccess,a[i].t)<SUB>25</SUB>>", "111": "<(IDENTIFIER,a,a[i].t == a[K].t)<SUB>25</SUB>>", "113": "<(FIELD_IDENTIFIER,t,t)<SUB>25</SUB>>", "115": "<(&lt;operator&gt;.indexAccess,a[K])<SUB>25</SUB>>", "117": "<(IDENTIFIER,K,a[i].t == a[K].t)<SUB>25</SUB>>", "119": "<(&lt;operator&gt;.postIncrement,ret++)<SUB>25</SUB>>", "121": "<(println,System.out.println(ret))<SUB>27</SUB>>", "123": "<(IDENTIFIER,System,System.out.println(ret))<SUB>27</SUB>>", "125": "<(IDENTIFIER,ret,System.out.println(ret))<SUB>27</SUB>>", "127": "<(MODIFIER,STATIC)>"}}