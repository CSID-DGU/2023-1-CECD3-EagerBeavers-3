{"edges": [["19", "21"], ["19", "129"], ["19", "130"], ["19", "131"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["34", "35"], ["34", "39"], ["35", "36"], ["35", "38"], ["36", "37"], ["39", "40"], ["39", "41"], ["39", "45"], ["39", "58"], ["39", "59"], ["39", "64"], ["39", "65"], ["39", "72"], ["39", "85"], ["39", "98"], ["39", "103"], ["39", "110"], ["41", "42"], ["41", "43"], ["43", "44"], ["45", "46"], ["45", "51"], ["46", "47"], ["46", "50"], ["47", "48"], ["47", "49"], ["51", "52"], ["51", "57"], ["52", "53"], ["52", "56"], ["53", "54"], ["53", "55"], ["59", "60"], ["59", "61"], ["61", "62"], ["61", "63"], ["65", "66"], ["65", "67"], ["67", "68"], ["67", "69"], ["69", "70"], ["69", "71"], ["72", "73"], ["72", "78"], ["73", "74"], ["73", "77"], ["74", "75"], ["74", "76"], ["78", "79"], ["78", "84"], ["79", "80"], ["79", "83"], ["80", "81"], ["80", "82"], ["85", "86"], ["85", "91"], ["86", "87"], ["86", "90"], ["87", "88"], ["87", "89"], ["91", "92"], ["91", "97"], ["92", "93"], ["92", "96"], ["93", "94"], ["93", "95"], ["98", "99"], ["98", "100"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "105"], ["105", "106"], ["105", "107"], ["107", "108"], ["107", "109"], ["110", "111"], ["110", "116"], ["110", "122"], ["111", "112"], ["111", "115"], ["112", "113"], ["112", "114"], ["116", "117"], ["117", "118"], ["117", "121"], ["118", "119"], ["118", "120"], ["122", "123"], ["123", "124"], ["124", "125"], ["124", "128"], ["125", "126"], ["125", "127"], ["22", "28"], ["25", "32"], ["30", "36"], ["24", "22"], ["26", "25"], ["32", "30"], ["35", "131"], ["35", "43"], ["28", "26"], ["36", "35"], ["41", "47"], ["59", "68"], ["65", "74"], ["98", "106"], ["103", "112"], ["43", "41"], ["46", "55"], ["46", "61"], ["61", "59"], ["67", "65"], ["73", "82"], ["73", "87"], ["86", "95"], ["86", "100"], ["100", "98"], ["105", "103"], ["111", "120"], ["111", "127"], ["47", "46"], ["52", "36"], ["68", "69"], ["69", "67"], ["74", "73"], ["79", "36"], ["87", "86"], ["92", "36"], ["106", "107"], ["107", "105"], ["112", "111"], ["117", "36"], ["53", "52"], ["80", "79"], ["93", "92"], ["118", "117"], ["124", "36"], ["55", "53"], ["82", "80"], ["95", "93"], ["120", "118"], ["125", "124"], ["127", "125"], ["19", "24"], ["20", "131"], ["22", "131"], ["25", "131"], ["25", "131"], ["32", "131"], ["30", "131"], ["30", "131"], ["36", "131"], ["35", "131"], ["35", "131"], ["124", "131"], ["117", "131"], ["19", "20"], ["19", "22"], ["32", "30"], ["22", "25"], ["19", "25"], ["25", "32"], ["19", "32"], ["36", "35"], ["19", "35"], ["43", "41"], ["61", "59"], ["61", "59"], ["19", "65"], ["69", "65"], ["69", "65"], ["100", "98"], ["100", "98"], ["19", "103"], ["107", "103"], ["107", "103"], ["30", "36"], ["19", "36"], ["32", "43"], ["19", "43"], ["47", "46"], ["47", "46"], ["19", "46"], ["47", "61"], ["19", "61"], ["19", "67"], ["69", "67"], ["69", "67"], ["74", "73"], ["69", "73"], ["19", "73"], ["87", "86"], ["87", "86"], ["19", "86"], ["87", "100"], ["19", "100"], ["19", "105"], ["107", "105"], ["107", "105"], ["112", "111"], ["107", "111"], ["19", "111"], ["41", "47"], ["19", "47"], ["124", "52"], ["117", "52"], ["92", "52"], ["79", "52"], ["19", "52"], ["107", "69"], ["19", "69"], ["59", "69"], ["65", "74"], ["19", "74"], ["124", "79"], ["117", "79"], ["92", "79"], ["52", "79"], ["19", "79"], ["61", "87"], ["19", "87"], ["124", "92"], ["117", "92"], ["79", "92"], ["52", "92"], ["19", "92"], ["69", "107"], ["19", "107"], ["98", "107"], ["103", "112"], ["19", "112"], ["124", "117"], ["92", "117"], ["79", "117"], ["52", "117"], ["19", "117"], ["117", "124"], ["92", "124"], ["79", "124"], ["52", "124"], ["19", "124"], ["35", "47"], ["35", "46"], ["35", "35"], ["35", "43"], ["35", "36"], ["35", "41"], ["46", "68"], ["46", "73"], ["46", "52"], ["46", "69"], ["46", "67"], ["46", "74"], ["46", "65"], ["46", "59"], ["46", "61"], ["46", "53"], ["46", "55"], ["73", "87"], ["73", "82"], ["73", "79"], ["73", "80"], ["73", "86"], ["86", "107"], ["86", "98"], ["86", "103"], ["86", "95"], ["86", "92"], ["86", "106"], ["86", "112"], ["86", "93"], ["86", "105"], ["86", "100"], ["86", "111"], ["111", "120"], ["111", "118"], ["111", "117"], ["111", "127"], ["111", "124"], ["111", "125"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,int t: int)<SUB>3</SUB>>", "31": "<(IDENTIFIER,t,int t = nextInt())<SUB>3</SUB>>", "33": "<(IDENTIFIER,sc,nextInt())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.greaterThan,t-- &gt; 0)<SUB>4</SUB>>", "37": "<(IDENTIFIER,t,t--)<SUB>4</SUB>>", "39": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>6</SUB>>", "43": "<(nextInt,nextInt())<SUB>6</SUB>>", "45": "<(CONTROL_STRUCTURE,if (n % 2 == 1),if (n % 2 == 1))<SUB>7</SUB>>", "47": "<(&lt;operator&gt;.modulo,n % 2)<SUB>7</SUB>>", "49": "<(LITERAL,2,n % 2)<SUB>7</SUB>>", "51": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>>", "53": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>9</SUB>>", "55": "<(FIELD_IDENTIFIER,out,out)<SUB>9</SUB>>", "57": "<(CONTROL_STRUCTURE,continue;,continue;)<SUB>10</SUB>>", "59": "<(&lt;operator&gt;.assignment,int num = n / 2)<SUB>13</SUB>>", "61": "<(&lt;operator&gt;.division,n / 2)<SUB>13</SUB>>", "63": "<(LITERAL,2,n / 2)<SUB>13</SUB>>", "65": "<(&lt;operator&gt;.assignment,int root = (int) Math.sqrt(num))<SUB>14</SUB>>", "67": "<(&lt;operator&gt;.cast,(int) Math.sqrt(num))<SUB>14</SUB>>", "69": "<(sqrt,Math.sqrt(num))<SUB>14</SUB>>", "71": "<(IDENTIFIER,num,Math.sqrt(num))<SUB>14</SUB>>", "73": "<(&lt;operator&gt;.equals,root * root == num)<SUB>15</SUB>>", "75": "<(IDENTIFIER,root,root * root)<SUB>15</SUB>>", "77": "<(IDENTIFIER,num,root * root == num)<SUB>15</SUB>>", "79": "<(println,System.out.println(&quot;YES&quot;))<SUB>17</SUB>>", "81": "<(IDENTIFIER,System,System.out.println(&quot;YES&quot;))<SUB>17</SUB>>", "83": "<(LITERAL,&quot;YES&quot;,System.out.println(&quot;YES&quot;))<SUB>17</SUB>>", "85": "<(CONTROL_STRUCTURE,if (n % 4 != 0),if (n % 4 != 0))<SUB>21</SUB>>", "87": "<(&lt;operator&gt;.modulo,n % 4)<SUB>21</SUB>>", "89": "<(LITERAL,4,n % 4)<SUB>21</SUB>>", "91": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>22</SUB>>", "93": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>23</SUB>>", "95": "<(FIELD_IDENTIFIER,out,out)<SUB>23</SUB>>", "97": "<(CONTROL_STRUCTURE,continue;,continue;)<SUB>24</SUB>>", "99": "<(IDENTIFIER,num,num = n / 4)<SUB>26</SUB>>", "101": "<(IDENTIFIER,n,n / 4)<SUB>26</SUB>>", "103": "<(&lt;operator&gt;.assignment,root = (int) Math.sqrt(num))<SUB>27</SUB>>", "105": "<(&lt;operator&gt;.cast,(int) Math.sqrt(num))<SUB>27</SUB>>", "107": "<(sqrt,Math.sqrt(num))<SUB>27</SUB>>", "109": "<(IDENTIFIER,num,Math.sqrt(num))<SUB>27</SUB>>", "111": "<(&lt;operator&gt;.equals,root * root == num)<SUB>28</SUB>>", "113": "<(IDENTIFIER,root,root * root)<SUB>28</SUB>>", "115": "<(IDENTIFIER,num,root * root == num)<SUB>28</SUB>>", "117": "<(println,System.out.println(&quot;YES&quot;))<SUB>30</SUB>>", "119": "<(IDENTIFIER,System,System.out.println(&quot;YES&quot;))<SUB>30</SUB>>", "121": "<(LITERAL,&quot;YES&quot;,System.out.println(&quot;YES&quot;))<SUB>30</SUB>>", "123": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>33</SUB>>", "125": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>34</SUB>>", "127": "<(FIELD_IDENTIFIER,out,out)<SUB>34</SUB>>", "129": "<(MODIFIER,PUBLIC)>", "131": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}