{"edges": [["21", "23"], ["21", "81"], ["21", "82"], ["21", "83"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "28"], ["23", "31"], ["23", "35"], ["23", "39"], ["23", "46"], ["23", "50"], ["23", "68"], ["23", "73"], ["23", "79"], ["24", "25"], ["24", "26"], ["27", "3"], ["28", "29"], ["28", "30"], ["31", "5"], ["31", "32"], ["32", "33"], ["32", "34"], ["35", "36"], ["35", "37"], ["37", "38"], ["39", "40"], ["39", "41"], ["41", "42"], ["41", "45"], ["42", "43"], ["42", "44"], ["46", "47"], ["46", "48"], ["48", "49"], ["50", "51"], ["50", "52"], ["50", "55"], ["50", "58"], ["50", "60"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "57"], ["58", "59"], ["60", "61"], ["60", "64"], ["61", "62"], ["61", "63"], ["64", "65"], ["64", "67"], ["65", "66"], ["68", "69"], ["68", "70"], ["70", "71"], ["70", "72"], ["73", "74"], ["73", "75"], ["75", "76"], ["75", "77"], ["75", "78"], ["79", "80"], ["24", "27"], ["27", "30"], ["28", "34"], ["31", "37"], ["35", "43"], ["39", "48"], ["46", "52"], ["68", "75"], ["73", "79"], ["79", "83"], ["26", "24"], ["30", "28"], ["32", "31"], ["37", "35"], ["41", "39"], ["48", "46"], ["52", "55"], ["55", "61"], ["55", "70"], ["58", "55"], ["60", "58"], ["70", "68"], ["75", "73"], ["34", "32"], ["42", "41"], ["61", "65"], ["64", "60"], ["43", "42"], ["65", "64"], ["21", "26"], ["22", "83"], ["24", "83"], ["27", "83"], ["28", "83"], ["31", "83"], ["31", "83"], ["37", "83"], ["35", "83"], ["35", "83"], ["41", "83"], ["39", "83"], ["39", "83"], ["46", "83"], ["46", "83"], ["46", "83"], ["52", "83"], ["55", "83"], ["55", "83"], ["70", "83"], ["68", "83"], ["68", "83"], ["73", "83"], ["73", "83"], ["79", "83"], ["79", "83"], ["60", "83"], ["65", "83"], ["64", "83"], ["60", "83"], ["60", "83"], ["58", "83"], ["75", "83"], ["68", "83"], ["39", "83"], ["21", "22"], ["21", "24"], ["21", "28"], ["37", "35"], ["21", "39"], ["48", "46"], ["70", "68"], ["24", "27"], ["21", "27"], ["28", "31"], ["21", "31"], ["21", "52"], ["64", "60"], ["64", "60"], ["31", "73"], ["21", "73"], ["75", "73"], ["75", "73"], ["73", "79"], ["21", "79"], ["27", "37"], ["21", "37"], ["21", "41"], ["35", "48"], ["21", "48"], ["52", "55"], ["58", "55"], ["21", "55"], ["48", "55"], ["55", "58"], ["21", "58"], ["55", "70"], ["21", "70"], ["21", "75"], ["21", "42"], ["65", "64"], ["21", "64"], ["37", "65"], ["21", "65"], ["55", "58"], ["55", "60"], ["55", "61"], ["55", "65"], ["55", "64"], ["55", "55"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY scan = new FastScanner())<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new FastScanner())<SUB>2</SUB>>", "3": "<(IDENTIFIER,scan,new FastScanner())<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.assignment,ANY out = new PrintWriter(System.out))<SUB>3</SUB>>", "30": "<(&lt;operator&gt;.alloc,new PrintWriter(System.out))<SUB>3</SUB>>", "5": "<(IDENTIFIER,out,new PrintWriter(System.out))<SUB>3</SUB>>", "33": "<(IDENTIFIER,System,new PrintWriter(System.out))<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,n = nextInt())<SUB>4</SUB>>", "37": "<(nextInt,nextInt())<SUB>4</SUB>>", "39": "<(&lt;operator&gt;.assignment,mod = (int) 1e9 + 7)<SUB>4</SUB>>", "41": "<(&lt;operator&gt;.addition,(int) 1e9 + 7)<SUB>4</SUB>>", "43": "<(TYPE_REF,int,int)<SUB>4</SUB>>", "45": "<(LITERAL,7,(int) 1e9 + 7)<SUB>4</SUB>>", "47": "<(IDENTIFIER,in,in = new char[n])<SUB>5</SUB>>", "49": "<(IDENTIFIER,n,new char[n])<SUB>5</SUB>>", "51": "<(LOCAL,int i: int)<SUB>6</SUB>>", "53": "<(IDENTIFIER,i,int i = 0)<SUB>6</SUB>>", "55": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>6</SUB>>", "57": "<(IDENTIFIER,n,i &lt; n)<SUB>6</SUB>>", "59": "<(IDENTIFIER,i,i++)<SUB>6</SUB>>", "61": "<(&lt;operator&gt;.indexAccess,in[i])<SUB>6</SUB>>", "63": "<(IDENTIFIER,i,in[i] = charAt(0))<SUB>6</SUB>>", "65": "<(next,next())<SUB>6</SUB>>", "67": "<(LITERAL,0,charAt(0))<SUB>6</SUB>>", "69": "<(IDENTIFIER,dp,dp = new Long[n][n])<SUB>7</SUB>>", "71": "<(IDENTIFIER,n,new Long[n][n])<SUB>7</SUB>>", "73": "<(println,println(go(0, 0)))<SUB>8</SUB>>", "75": "<(go,go(0, 0))<SUB>8</SUB>>", "77": "<(LITERAL,0,go(0, 0))<SUB>8</SUB>>", "79": "<(close,close())<SUB>9</SUB>>", "81": "<(MODIFIER,PUBLIC)>", "83": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}