{"edges": [["19", "20"], ["19", "21"], ["19", "120"], ["19", "121"], ["19", "122"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "36"], ["21", "37"], ["21", "43"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "30"], ["26", "35"], ["27", "28"], ["27", "29"], ["30", "31"], ["30", "32"], ["32", "33"], ["32", "34"], ["37", "38"], ["37", "39"], ["39", "40"], ["39", "41"], ["41", "42"], ["43", "44"], ["43", "47"], ["43", "52"], ["44", "45"], ["44", "46"], ["47", "48"], ["47", "51"], ["48", "49"], ["48", "50"], ["52", "53"], ["53", "54"], ["53", "57"], ["53", "62"], ["54", "55"], ["54", "56"], ["57", "58"], ["57", "61"], ["58", "59"], ["58", "60"], ["62", "63"], ["63", "64"], ["63", "69"], ["63", "106"], ["64", "65"], ["64", "68"], ["65", "66"], ["65", "67"], ["69", "70"], ["70", "71"], ["70", "76"], ["70", "92"], ["71", "72"], ["71", "75"], ["72", "73"], ["72", "74"], ["76", "77"], ["77", "78"], ["77", "81"], ["78", "79"], ["78", "80"], ["81", "82"], ["81", "89"], ["82", "83"], ["82", "86"], ["83", "84"], ["83", "85"], ["86", "87"], ["86", "88"], ["89", "90"], ["89", "91"], ["92", "93"], ["93", "94"], ["93", "97"], ["94", "95"], ["94", "96"], ["97", "98"], ["97", "103"], ["98", "99"], ["98", "100"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "105"], ["106", "107"], ["107", "108"], ["107", "111"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "117"], ["112", "113"], ["112", "114"], ["114", "115"], ["114", "116"], ["117", "118"], ["117", "119"], ["22", "29"], ["25", "41"], ["37", "44"], ["24", "22"], ["39", "37"], ["44", "50"], ["44", "54"], ["47", "122"], ["27", "34"], ["30", "25"], ["41", "39"], ["48", "47"], ["29", "27"], ["32", "30"], ["50", "48"], ["54", "60"], ["54", "65"], ["57", "122"], ["34", "32"], ["58", "57"], ["60", "58"], ["64", "72"], ["64", "110"], ["65", "64"], ["107", "122"], ["71", "80"], ["71", "96"], ["108", "114"], ["111", "107"], ["72", "71"], ["77", "122"], ["93", "122"], ["110", "108"], ["112", "117"], ["117", "111"], ["78", "83"], ["81", "77"], ["94", "100"], ["97", "93"], ["114", "112"], ["80", "78"], ["82", "89"], ["89", "81"], ["96", "94"], ["98", "103"], ["103", "97"], ["83", "86"], ["86", "82"], ["100", "98"], ["19", "24"], ["20", "122"], ["22", "122"], ["27", "122"], ["30", "122"], ["30", "122"], ["30", "122"], ["25", "122"], ["41", "122"], ["39", "122"], ["37", "122"], ["37", "122"], ["44", "122"], ["47", "122"], ["47", "122"], ["47", "122"], ["39", "122"], ["19", "20"], ["19", "22"], ["39", "37"], ["39", "37"], ["22", "25"], ["19", "25"], ["27", "25"], ["30", "25"], ["19", "27"], ["19", "35"], ["19", "39"], ["41", "39"], ["37", "44"], ["19", "44"], ["44", "47"], ["19", "47"], ["27", "30"], ["19", "30"], ["25", "41"], ["19", "41"], ["44", "54"], ["19", "54"], ["19", "57"], ["65", "64"], ["65", "64"], ["19", "64"], ["54", "65"], ["19", "65"], ["111", "107"], ["111", "107"], ["72", "71"], ["72", "71"], ["19", "71"], ["112", "111"], ["112", "111"], ["117", "111"], ["117", "111"], ["65", "72"], ["19", "72"], ["81", "77"], ["81", "77"], ["97", "93"], ["97", "93"], ["114", "112"], ["19", "112"], ["114", "112"], ["112", "117"], ["19", "117"], ["82", "81"], ["82", "81"], ["89", "81"], ["89", "81"], ["98", "97"], ["98", "97"], ["103", "97"], ["103", "97"], ["65", "114"], ["19", "114"], ["83", "82"], ["83", "82"], ["86", "82"], ["86", "82"], ["86", "89"], ["19", "89"], ["100", "98"], ["19", "98"], ["100", "98"], ["98", "103"], ["19", "103"], ["72", "83"], ["19", "83"], ["83", "86"], ["19", "86"], ["72", "100"], ["19", "100"], ["44", "47"], ["44", "48"], ["44", "50"], ["44", "54"], ["54", "60"], ["54", "64"], ["54", "57"], ["54", "65"], ["54", "58"], ["64", "107"], ["64", "114"], ["64", "72"], ["64", "112"], ["64", "71"], ["64", "110"], ["64", "117"], ["64", "108"], ["64", "111"], ["71", "94"], ["71", "96"], ["71", "77"], ["71", "89"], ["71", "98"], ["71", "81"], ["71", "103"], ["71", "97"], ["71", "82"], ["71", "93"], ["71", "80"], ["71", "83"], ["71", "100"], ["71", "78"], ["71", "86"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY reader = new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "3": "<(IDENTIFIER,reader,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "27": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "29": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>2</SUB>>", "31": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "33": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>2</SUB>>", "35": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "37": "<(&lt;operator&gt;.assignment,long n = parseLong(reader.readLine()))<SUB>3</SUB>>", "39": "<(parseLong,parseLong(reader.readLine()))<SUB>3</SUB>>", "41": "<(readLine,readLine())<SUB>3</SUB>>", "43": "<(CONTROL_STRUCTURE,if (n &lt;= 2),if (n &lt;= 2))<SUB>7</SUB>>", "45": "<(IDENTIFIER,n,n &lt;= 2)<SUB>7</SUB>>", "47": "<(println,System.out.println(n))<SUB>8</SUB>>", "49": "<(IDENTIFIER,System,System.out.println(n))<SUB>8</SUB>>", "51": "<(IDENTIFIER,n,System.out.println(n))<SUB>8</SUB>>", "53": "<(CONTROL_STRUCTURE,if (n == 3),if (n == 3))<SUB>9</SUB>>", "55": "<(IDENTIFIER,n,n == 3)<SUB>9</SUB>>", "57": "<(println,System.out.println(&quot;6&quot;))<SUB>10</SUB>>", "59": "<(IDENTIFIER,System,System.out.println(&quot;6&quot;))<SUB>10</SUB>>", "61": "<(LITERAL,&quot;6&quot;,System.out.println(&quot;6&quot;))<SUB>10</SUB>>", "63": "<(CONTROL_STRUCTURE,if (n % 2 == 0),if (n % 2 == 0))<SUB>12</SUB>>", "65": "<(&lt;operator&gt;.modulo,n % 2)<SUB>12</SUB>>", "67": "<(LITERAL,2,n % 2)<SUB>12</SUB>>", "69": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>13</SUB>>", "71": "<(&lt;operator&gt;.equals,n % 3 == 0)<SUB>14</SUB>>", "73": "<(IDENTIFIER,n,n % 3)<SUB>14</SUB>>", "75": "<(LITERAL,0,n % 3 == 0)<SUB>14</SUB>>", "77": "<(println,System.out.println((n - 3) * (n - 1) * (n - 2)))<SUB>16</SUB>>", "79": "<(IDENTIFIER,System,System.out.println((n - 3) * (n - 1) * (n - 2)))<SUB>16</SUB>>", "81": "<(&lt;operator&gt;.multiplication,(n - 3) * (n - 1) * (n - 2))<SUB>16</SUB>>", "83": "<(&lt;operator&gt;.subtraction,n - 3)<SUB>16</SUB>>", "85": "<(LITERAL,3,n - 3)<SUB>16</SUB>>", "87": "<(IDENTIFIER,n,n - 1)<SUB>16</SUB>>", "89": "<(&lt;operator&gt;.subtraction,n - 2)<SUB>16</SUB>>", "91": "<(LITERAL,2,n - 2)<SUB>16</SUB>>", "93": "<(println,System.out.println(n * (n - 1) * (n - 3)))<SUB>20</SUB>>", "95": "<(IDENTIFIER,System,System.out.println(n * (n - 1) * (n - 3)))<SUB>20</SUB>>", "97": "<(&lt;operator&gt;.multiplication,n * (n - 1) * (n - 3))<SUB>20</SUB>>", "99": "<(IDENTIFIER,n,n * (n - 1))<SUB>20</SUB>>", "101": "<(IDENTIFIER,n,n - 1)<SUB>20</SUB>>", "103": "<(&lt;operator&gt;.subtraction,n - 3)<SUB>20</SUB>>", "105": "<(LITERAL,3,n - 3)<SUB>20</SUB>>", "107": "<(println,System.out.println(n * (n - 1) * (n - 2)))<SUB>23</SUB>>", "109": "<(IDENTIFIER,System,System.out.println(n * (n - 1) * (n - 2)))<SUB>23</SUB>>", "111": "<(&lt;operator&gt;.multiplication,n * (n - 1) * (n - 2))<SUB>23</SUB>>", "113": "<(IDENTIFIER,n,n * (n - 1))<SUB>23</SUB>>", "115": "<(IDENTIFIER,n,n - 1)<SUB>23</SUB>>", "117": "<(&lt;operator&gt;.subtraction,n - 2)<SUB>23</SUB>>", "119": "<(LITERAL,2,n - 2)<SUB>23</SUB>>", "121": "<(MODIFIER,STATIC)>"}}