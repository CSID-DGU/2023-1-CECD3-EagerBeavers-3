{"edges": [["19", "21"], ["19", "217"], ["19", "218"], ["19", "219"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["29", "30"], ["30", "31"], ["30", "32"], ["30", "36"], ["30", "37"], ["30", "41"], ["30", "58"], ["30", "59"], ["30", "62"], ["30", "63"], ["30", "67"], ["30", "68"], ["30", "72"], ["30", "77"], ["30", "189"], ["30", "190"], ["30", "193"], ["30", "212"], ["32", "33"], ["32", "34"], ["34", "35"], ["37", "38"], ["37", "39"], ["39", "40"], ["41", "42"], ["41", "43"], ["41", "46"], ["41", "49"], ["41", "51"], ["43", "44"], ["43", "45"], ["46", "47"], ["46", "48"], ["49", "50"], ["51", "52"], ["52", "53"], ["52", "56"], ["53", "54"], ["53", "55"], ["56", "57"], ["59", "60"], ["59", "61"], ["63", "64"], ["63", "65"], ["65", "66"], ["68", "69"], ["68", "70"], ["70", "71"], ["72", "73"], ["72", "76"], ["73", "74"], ["73", "75"], ["77", "78"], ["77", "79"], ["77", "82"], ["77", "85"], ["77", "87"], ["79", "80"], ["79", "81"], ["82", "83"], ["82", "84"], ["85", "86"], ["87", "88"], ["87", "92"], ["87", "178"], ["88", "89"], ["88", "90"], ["88", "91"], ["92", "93"], ["92", "100"], ["92", "130"], ["93", "94"], ["93", "95"], ["95", "96"], ["95", "97"], ["97", "98"], ["97", "99"], ["100", "101"], ["101", "102"], ["101", "103"], ["101", "106"], ["101", "111"], ["101", "113"], ["103", "104"], ["103", "105"], ["106", "107"], ["106", "108"], ["108", "109"], ["108", "110"], ["111", "112"], ["113", "114"], ["113", "123"], ["114", "115"], ["114", "120"], ["115", "116"], ["115", "117"], ["117", "118"], ["117", "119"], ["120", "121"], ["120", "122"], ["123", "124"], ["123", "129"], ["124", "125"], ["124", "126"], ["126", "127"], ["126", "128"], ["130", "131"], ["131", "132"], ["132", "133"], ["132", "134"], ["132", "139"], ["132", "142"], ["132", "144"], ["134", "135"], ["134", "136"], ["136", "137"], ["136", "138"], ["139", "140"], ["139", "141"], ["142", "143"], ["144", "145"], ["144", "152"], ["144", "157"], ["145", "146"], ["145", "149"], ["146", "147"], ["146", "148"], ["149", "150"], ["149", "151"], ["152", "153"], ["152", "156"], ["153", "154"], ["153", "155"], ["157", "158"], ["157", "163"], ["158", "159"], ["158", "160"], ["160", "161"], ["160", "162"], ["163", "164"], ["163", "173"], ["164", "165"], ["164", "168"], ["165", "166"], ["165", "167"], ["168", "169"], ["168", "170"], ["170", "171"], ["170", "172"], ["173", "174"], ["173", "177"], ["174", "175"], ["174", "176"], ["178", "179"], ["178", "180"], ["178", "183"], ["178", "186"], ["180", "181"], ["180", "182"], ["183", "184"], ["183", "185"], ["186", "187"], ["186", "188"], ["190", "191"], ["190", "192"], ["193", "194"], ["193", "195"], ["193", "198"], ["193", "201"], ["193", "203"], ["195", "196"], ["195", "197"], ["198", "199"], ["198", "200"], ["201", "202"], ["203", "204"], ["203", "209"], ["204", "205"], ["204", "206"], ["206", "207"], ["206", "208"], ["209", "210"], ["209", "211"], ["212", "213"], ["212", "216"], ["213", "214"], ["213", "215"], ["22", "28"], ["25", "34"], ["24", "22"], ["26", "25"], ["28", "26"], ["32", "39"], ["37", "43"], ["59", "65"], ["63", "70"], ["68", "73"], ["72", "79"], ["190", "195"], ["212", "219"], ["34", "32"], ["39", "37"], ["43", "46"], ["46", "53"], ["46", "59"], ["49", "46"], ["65", "63"], ["70", "68"], ["73", "72"], ["79", "82"], ["82", "88"], ["82", "190"], ["85", "82"], ["195", "198"], ["198", "206"], ["198", "215"], ["201", "198"], ["213", "212"], ["52", "49"], ["88", "97"], ["204", "209"], ["209", "201"], ["215", "213"], ["53", "56"], ["56", "52"], ["93", "103"], ["93", "136"], ["180", "183"], ["183", "186"], ["186", "85"], ["206", "204"], ["95", "93"], ["97", "95"], ["103", "108"], ["106", "117"], ["106", "180"], ["111", "108"], ["108", "106"], ["114", "126"], ["123", "111"], ["134", "139"], ["139", "146"], ["139", "180"], ["142", "139"], ["115", "120"], ["120", "114"], ["124", "123"], ["136", "134"], ["145", "153"], ["152", "160"], ["117", "115"], ["126", "124"], ["146", "149"], ["149", "145"], ["153", "152"], ["158", "165"], ["158", "142"], ["160", "158"], ["164", "174"], ["173", "142"], ["165", "170"], ["168", "164"], ["174", "173"], ["170", "168"], ["19", "24"], ["20", "219"], ["22", "219"], ["25", "219"], ["25", "219"], ["34", "219"], ["32", "219"], ["32", "219"], ["37", "219"], ["37", "219"], ["37", "219"], ["59", "219"], ["59", "219"], ["63", "219"], ["63", "219"], ["68", "219"], ["68", "219"], ["68", "219"], ["72", "219"], ["72", "219"], ["79", "219"], ["190", "219"], ["195", "219"], ["198", "219"], ["198", "219"], ["198", "219"], ["212", "219"], ["212", "219"], ["212", "219"], ["204", "219"], ["204", "219"], ["209", "219"], ["201", "219"], ["88", "219"], ["93", "219"], ["93", "219"], ["134", "219"], ["134", "219"], ["139", "219"], ["139", "219"], ["145", "219"], ["145", "219"], ["152", "219"], ["152", "219"], ["158", "219"], ["158", "219"], ["164", "219"], ["164", "219"], ["173", "219"], ["173", "219"], ["142", "219"], ["103", "219"], ["106", "219"], ["106", "219"], ["106", "219"], ["180", "219"], ["183", "219"], ["183", "219"], ["186", "219"], ["186", "219"], ["186", "219"], ["85", "219"], ["114", "219"], ["114", "219"], ["123", "219"], ["123", "219"], ["111", "219"], ["52", "219"], ["56", "219"], ["52", "219"], ["52", "219"], ["49", "219"], ["88", "219"], ["19", "20"], ["19", "22"], ["22", "25"], ["19", "25"], ["34", "32"], ["39", "37"], ["19", "59"], ["65", "63"], ["70", "68"], ["19", "72"], ["19", "190"], ["19", "43"], ["19", "79"], ["19", "195"], ["190", "212"], ["209", "212"], ["19", "212"], ["25", "34"], ["19", "34"], ["32", "39"], ["19", "39"], ["43", "46"], ["49", "46"], ["19", "46"], ["39", "46"], ["46", "49"], ["19", "49"], ["56", "52"], ["46", "65"], ["19", "65"], ["65", "70"], ["19", "70"], ["79", "82"], ["85", "82"], ["19", "82"], ["70", "82"], ["136", "82"], ["160", "82"], ["108", "82"], ["97", "85"], ["19", "85"], ["19", "178"], ["195", "198"], ["201", "198"], ["19", "198"], ["82", "198"], ["198", "201"], ["19", "201"], ["63", "204"], ["183", "204"], ["59", "209"], ["19", "209"], ["19", "88"], ["68", "88"], ["152", "88"], ["173", "88"], ["186", "88"], ["123", "88"], ["63", "180"], ["72", "180"], ["183", "180"], ["19", "180"], ["88", "183"], ["152", "183"], ["173", "183"], ["123", "183"], ["19", "183"], ["180", "186"], ["19", "186"], ["190", "204"], ["209", "204"], ["19", "204"], ["204", "209"], ["34", "56"], ["19", "56"], ["19", "93"], ["37", "93"], ["19", "103"], ["82", "97"], ["19", "97"], ["103", "106"], ["111", "106"], ["19", "106"], ["108", "106"], ["108", "106"], ["19", "111"], ["106", "111"], ["63", "114"], ["183", "114"], ["59", "123"], ["19", "123"], ["136", "134"], ["136", "134"], ["82", "108"], ["19", "108"], ["88", "114"], ["123", "114"], ["88", "123"], ["114", "123"], ["134", "139"], ["142", "139"], ["19", "139"], ["158", "142"], ["19", "142"], ["63", "145"], ["183", "145"], ["59", "152"], ["19", "152"], ["82", "136"], ["19", "136"], ["88", "145"], ["152", "145"], ["173", "145"], ["88", "152"], ["145", "152"], ["106", "117"], ["19", "117"], ["19", "126"], ["106", "126"], ["139", "158"], ["19", "158"], ["160", "158"], ["160", "158"], ["88", "164"], ["123", "164"], ["19", "173"], ["136", "160"], ["19", "160"], ["152", "164"], ["88", "173"], ["164", "173"], ["158", "170"], ["19", "170"], ["46", "52"], ["46", "56"], ["46", "49"], ["46", "46"], ["46", "53"], ["82", "85"], ["82", "95"], ["82", "97"], ["82", "93"], ["82", "88"], ["82", "186"], ["82", "180"], ["82", "183"], ["82", "82"], ["198", "209"], ["198", "198"], ["198", "204"], ["198", "206"], ["198", "201"], ["93", "136"], ["93", "103"], ["93", "134"], ["93", "139"], ["93", "108"], ["93", "106"], ["106", "115"], ["106", "120"], ["106", "114"], ["106", "108"], ["106", "111"], ["106", "123"], ["106", "106"], ["106", "126"], ["106", "117"], ["106", "124"], ["139", "145"], ["139", "146"], ["139", "149"], ["139", "153"], ["139", "152"], ["139", "139"], ["139", "158"], ["139", "160"], ["139", "142"], ["158", "168"], ["158", "170"], ["158", "173"], ["158", "174"], ["158", "164"], ["158", "165"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(CONTROL_STRUCTURE,try,try)<SUB>2</SUB>>", "31": "<(LOCAL,int N: int)<SUB>3</SUB>>", "33": "<(IDENTIFIER,N,int N = nextInt())<SUB>3</SUB>>", "35": "<(IDENTIFIER,sc,nextInt())<SUB>3</SUB>>", "37": "<(&lt;operator&gt;.assignment,String[] ins = new String[N])<SUB>5</SUB>>", "39": "<(&lt;operator&gt;.alloc,new String[N])>", "41": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; N); i++),for (int i = 0; Some(i &lt; N); i++))<SUB>6</SUB>>", "43": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>6</SUB>>", "45": "<(LITERAL,0,int i = 0)<SUB>6</SUB>>", "47": "<(IDENTIFIER,i,i &lt; N)<SUB>6</SUB>>", "49": "<(&lt;operator&gt;.postIncrement,i++)<SUB>6</SUB>>", "51": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>6</SUB>>", "53": "<(&lt;operator&gt;.indexAccess,ins[i])<SUB>7</SUB>>", "55": "<(IDENTIFIER,i,ins[i] = next())<SUB>7</SUB>>", "57": "<(IDENTIFIER,sc,next())<SUB>7</SUB>>", "59": "<(&lt;operator&gt;.assignment,long MOD = 1000000007)<SUB>10</SUB>>", "61": "<(LITERAL,1000000007,long MOD = 1000000007)<SUB>10</SUB>>", "63": "<(&lt;operator&gt;.assignment,long[] DP = new long[N])<SUB>11</SUB>>", "65": "<(&lt;operator&gt;.alloc,new long[N])>", "67": "<(LOCAL,long[] nextDP: long[])<SUB>12</SUB>>", "69": "<(IDENTIFIER,nextDP,long[] nextDP = new long[N])<SUB>12</SUB>>", "71": "<(IDENTIFIER,N,new long[N])<SUB>12</SUB>>", "73": "<(&lt;operator&gt;.indexAccess,DP[0])<SUB>14</SUB>>", "75": "<(LITERAL,0,DP[0] = 1)<SUB>14</SUB>>", "77": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt; N); i++),for (int i = 1; Some(i &lt; N); i++))<SUB>16</SUB>>", "79": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>16</SUB>>", "81": "<(LITERAL,1,int i = 1)<SUB>16</SUB>>", "83": "<(IDENTIFIER,i,i &lt; N)<SUB>16</SUB>>", "85": "<(&lt;operator&gt;.postIncrement,i++)<SUB>16</SUB>>", "87": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>16</SUB>>", "89": "<(IDENTIFIER,Arrays,fill(nextDP, 0))<SUB>17</SUB>>", "91": "<(LITERAL,0,fill(nextDP, 0))<SUB>17</SUB>>", "93": "<(equals,this.equals(ins[i - 1]))<SUB>18</SUB>>", "95": "<(&lt;operator&gt;.indexAccess,ins[i - 1])<SUB>18</SUB>>", "97": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>18</SUB>>", "99": "<(LITERAL,1,i - 1)<SUB>18</SUB>>", "101": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; N - 1); j++),for (int j = 0; Some(j &lt; N - 1); j++))<SUB>19</SUB>>", "103": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>19</SUB>>", "105": "<(LITERAL,0,int j = 0)<SUB>19</SUB>>", "107": "<(IDENTIFIER,j,j &lt; N - 1)<SUB>19</SUB>>", "109": "<(IDENTIFIER,N,N - 1)<SUB>19</SUB>>", "111": "<(&lt;operator&gt;.postIncrement,j++)<SUB>19</SUB>>", "113": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>19</SUB>>", "115": "<(&lt;operator&gt;.indexAccess,nextDP[j + 1])<SUB>20</SUB>>", "117": "<(&lt;operator&gt;.addition,j + 1)<SUB>20</SUB>>", "119": "<(LITERAL,1,j + 1)<SUB>20</SUB>>", "121": "<(IDENTIFIER,DP,nextDP[j + 1] += DP[j])<SUB>20</SUB>>", "123": "<(&lt;operators&gt;.assignmentModulo,nextDP[j + 1] %= MOD)<SUB>21</SUB>>", "125": "<(IDENTIFIER,nextDP,nextDP[j + 1] %= MOD)<SUB>21</SUB>>", "127": "<(IDENTIFIER,j,j + 1)<SUB>21</SUB>>", "129": "<(IDENTIFIER,MOD,nextDP[j + 1] %= MOD)<SUB>21</SUB>>", "131": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>23</SUB>>", "133": "<(LOCAL,int j: int)<SUB>24</SUB>>", "135": "<(IDENTIFIER,j,int j = N - 1)<SUB>24</SUB>>", "137": "<(IDENTIFIER,N,N - 1)<SUB>24</SUB>>", "139": "<(&lt;operator&gt;.greaterEqualsThan,j &gt;= 0)<SUB>24</SUB>>", "141": "<(LITERAL,0,j &gt;= 0)<SUB>24</SUB>>", "143": "<(IDENTIFIER,j,j--)<SUB>24</SUB>>", "145": "<(&lt;operator&gt;.assignmentPlus,nextDP[j] += DP[j])<SUB>25</SUB>>", "147": "<(IDENTIFIER,nextDP,nextDP[j] += DP[j])<SUB>25</SUB>>", "149": "<(&lt;operator&gt;.indexAccess,DP[j])<SUB>25</SUB>>", "151": "<(IDENTIFIER,j,nextDP[j] += DP[j])<SUB>25</SUB>>", "153": "<(&lt;operator&gt;.indexAccess,nextDP[j])<SUB>26</SUB>>", "155": "<(IDENTIFIER,j,nextDP[j] %= MOD)<SUB>26</SUB>>", "157": "<(CONTROL_STRUCTURE,if (j &lt; N - 1),if (j &lt; N - 1))<SUB>28</SUB>>", "159": "<(IDENTIFIER,j,j &lt; N - 1)<SUB>28</SUB>>", "161": "<(IDENTIFIER,N,N - 1)<SUB>28</SUB>>", "163": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>28</SUB>>", "165": "<(&lt;operator&gt;.indexAccess,nextDP[j])<SUB>29</SUB>>", "167": "<(IDENTIFIER,j,nextDP[j] += nextDP[j + 1])<SUB>29</SUB>>", "169": "<(IDENTIFIER,nextDP,nextDP[j] += nextDP[j + 1])<SUB>29</SUB>>", "171": "<(IDENTIFIER,j,j + 1)<SUB>29</SUB>>", "173": "<(&lt;operators&gt;.assignmentModulo,nextDP[j] %= MOD)<SUB>30</SUB>>", "175": "<(IDENTIFIER,nextDP,nextDP[j] %= MOD)<SUB>30</SUB>>", "177": "<(IDENTIFIER,MOD,nextDP[j] %= MOD)<SUB>30</SUB>>", "179": "<(LOCAL,long[] tmp: long[])<SUB>36</SUB>>", "181": "<(IDENTIFIER,tmp,long[] tmp = DP)<SUB>36</SUB>>", "183": "<(&lt;operator&gt;.assignment,DP = nextDP)<SUB>37</SUB>>", "185": "<(IDENTIFIER,nextDP,DP = nextDP)<SUB>37</SUB>>", "187": "<(IDENTIFIER,nextDP,nextDP = tmp)<SUB>38</SUB>>", "189": "<(LOCAL,long answer: long)<SUB>42</SUB>>", "191": "<(IDENTIFIER,answer,long answer = 0)<SUB>42</SUB>>", "193": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; N); i++),for (int i = 0; Some(i &lt; N); i++))<SUB>43</SUB>>", "195": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>43</SUB>>", "197": "<(LITERAL,0,int i = 0)<SUB>43</SUB>>", "199": "<(IDENTIFIER,i,i &lt; N)<SUB>43</SUB>>", "201": "<(&lt;operator&gt;.postIncrement,i++)<SUB>43</SUB>>", "203": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>43</SUB>>", "205": "<(IDENTIFIER,answer,answer += DP[i])<SUB>44</SUB>>", "207": "<(IDENTIFIER,DP,answer += DP[i])<SUB>44</SUB>>", "209": "<(&lt;operators&gt;.assignmentModulo,answer %= MOD)<SUB>45</SUB>>", "211": "<(IDENTIFIER,MOD,answer %= MOD)<SUB>45</SUB>>", "213": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>48</SUB>>", "215": "<(FIELD_IDENTIFIER,out,out)<SUB>48</SUB>>", "217": "<(MODIFIER,PUBLIC)>", "219": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}