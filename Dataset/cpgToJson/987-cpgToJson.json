{"edges": [["19", "21"], ["19", "91"], ["19", "92"], ["19", "93"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "26"], ["21", "27"], ["21", "31"], ["21", "32"], ["21", "36"], ["21", "37"], ["21", "50"], ["21", "80"], ["22", "23"], ["22", "24"], ["25", "3"], ["27", "28"], ["27", "29"], ["29", "30"], ["32", "33"], ["32", "34"], ["34", "35"], ["37", "38"], ["37", "39"], ["39", "40"], ["39", "41"], ["41", "42"], ["41", "43"], ["43", "44"], ["43", "49"], ["44", "45"], ["44", "46"], ["46", "47"], ["46", "48"], ["50", "51"], ["50", "62"], ["51", "52"], ["51", "55"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "61"], ["56", "57"], ["56", "58"], ["58", "59"], ["58", "60"], ["62", "63"], ["62", "65"], ["63", "64"], ["65", "66"], ["65", "77"], ["66", "67"], ["66", "70"], ["67", "68"], ["67", "69"], ["70", "71"], ["70", "76"], ["71", "72"], ["71", "73"], ["73", "74"], ["73", "75"], ["77", "78"], ["77", "79"], ["80", "81"], ["80", "84"], ["81", "82"], ["81", "83"], ["84", "85"], ["84", "86"], ["86", "87"], ["86", "90"], ["87", "88"], ["87", "89"], ["22", "25"], ["25", "29"], ["27", "34"], ["32", "40"], ["37", "52"], ["80", "93"], ["24", "22"], ["29", "27"], ["34", "32"], ["39", "37"], ["51", "63"], ["51", "83"], ["81", "87"], ["84", "80"], ["40", "46"], ["41", "39"], ["52", "58"], ["55", "51"], ["63", "67"], ["83", "81"], ["86", "84"], ["43", "41"], ["56", "55"], ["66", "77"], ["66", "83"], ["77", "83"], ["87", "86"], ["44", "43"], ["58", "56"], ["67", "73"], ["70", "66"], ["46", "44"], ["71", "70"], ["73", "71"], ["19", "24"], ["20", "93"], ["22", "93"], ["25", "93"], ["27", "93"], ["34", "93"], ["32", "93"], ["32", "93"], ["39", "93"], ["37", "93"], ["37", "93"], ["51", "93"], ["58", "93"], ["56", "93"], ["55", "93"], ["51", "93"], ["51", "93"], ["63", "93"], ["66", "93"], ["73", "93"], ["71", "93"], ["70", "93"], ["66", "93"], ["66", "93"], ["77", "93"], ["80", "93"], ["84", "93"], ["87", "93"], ["86", "93"], ["84", "93"], ["80", "93"], ["80", "93"], ["41", "93"], ["19", "20"], ["19", "22"], ["29", "27"], ["34", "32"], ["19", "37"], ["41", "37"], ["41", "37"], ["22", "25"], ["19", "25"], ["84", "80"], ["84", "80"], ["25", "29"], ["19", "29"], ["29", "34"], ["19", "34"], ["19", "39"], ["41", "39"], ["41", "39"], ["52", "51"], ["56", "51"], ["56", "51"], ["19", "51"], ["19", "84"], ["27", "84"], ["86", "84"], ["86", "84"], ["19", "41"], ["44", "41"], ["44", "41"], ["37", "52"], ["19", "52"], ["56", "55"], ["56", "55"], ["19", "55"], ["52", "63"], ["19", "63"], ["19", "77"], ["87", "86"], ["87", "86"], ["19", "86"], ["44", "43"], ["44", "43"], ["19", "43"], ["19", "56"], ["32", "56"], ["27", "56"], ["67", "66"], ["71", "66"], ["71", "66"], ["19", "66"], ["67", "77"], ["52", "87"], ["67", "87"], ["77", "87"], ["19", "87"], ["19", "44"], ["32", "44"], ["27", "44"], ["19", "58"], ["32", "58"], ["27", "58"], ["63", "67"], ["19", "67"], ["71", "70"], ["71", "70"], ["19", "70"], ["32", "46"], ["19", "46"], ["27", "46"], ["19", "71"], ["32", "71"], ["27", "71"], ["19", "73"], ["32", "73"], ["27", "73"], ["51", "73"], ["51", "66"], ["51", "71"], ["51", "67"], ["51", "70"], ["51", "63"], ["66", "77"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY input = new FastReader())<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new FastReader())<SUB>2</SUB>>", "3": "<(IDENTIFIER,input,new FastReader())<SUB>2</SUB>>", "27": "<(&lt;operator&gt;.assignment,long n = nextLong())<SUB>3</SUB>>", "29": "<(nextLong,nextLong())<SUB>3</SUB>>", "31": "<(LOCAL,long K: long)<SUB>4</SUB>>", "33": "<(IDENTIFIER,K,long K = nextLong())<SUB>4</SUB>>", "35": "<(IDENTIFIER,input,nextLong())<SUB>4</SUB>>", "37": "<(&lt;operator&gt;.assignment,long root = (long) Math.sqrt(8 * (K + n) + 9))<SUB>5</SUB>>", "39": "<(&lt;operator&gt;.cast,(long) Math.sqrt(8 * (K + n) + 9))<SUB>5</SUB>>", "41": "<(sqrt,Math.sqrt(8 * (K + n) + 9))<SUB>5</SUB>>", "43": "<(&lt;operator&gt;.addition,8 * (K + n) + 9)<SUB>5</SUB>>", "45": "<(LITERAL,8,8 * (K + n))<SUB>5</SUB>>", "47": "<(IDENTIFIER,K,K + n)<SUB>5</SUB>>", "49": "<(LITERAL,9,8 * (K + n) + 9)<SUB>5</SUB>>", "51": "<(&lt;operator&gt;.notEquals,root * root != 8 * (K + n) + 9)<SUB>6</SUB>>", "53": "<(IDENTIFIER,root,root * root)<SUB>6</SUB>>", "55": "<(&lt;operator&gt;.addition,8 * (K + n) + 9)<SUB>6</SUB>>", "57": "<(LITERAL,8,8 * (K + n))<SUB>6</SUB>>", "59": "<(IDENTIFIER,K,K + n)<SUB>6</SUB>>", "61": "<(LITERAL,9,8 * (K + n) + 9)<SUB>6</SUB>>", "63": "<(&lt;operator&gt;.postIncrement,root++)<SUB>7</SUB>>", "65": "<(CONTROL_STRUCTURE,if (root * root != 8 * (K + n) + 9),if (root * root != 8 * (K + n) + 9))<SUB>8</SUB>>", "67": "<(&lt;operator&gt;.multiplication,root * root)<SUB>8</SUB>>", "69": "<(IDENTIFIER,root,root * root)<SUB>8</SUB>>", "71": "<(&lt;operator&gt;.multiplication,8 * (K + n))<SUB>8</SUB>>", "73": "<(&lt;operator&gt;.addition,K + n)<SUB>8</SUB>>", "75": "<(IDENTIFIER,n,K + n)<SUB>8</SUB>>", "77": "<(&lt;operator&gt;.assignmentMinus,root -= 2)<SUB>8</SUB>>", "79": "<(LITERAL,2,root -= 2)<SUB>8</SUB>>", "81": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>10</SUB>>", "83": "<(FIELD_IDENTIFIER,out,out)<SUB>10</SUB>>", "85": "<(IDENTIFIER,n,n - (root - 3) / 2)<SUB>10</SUB>>", "87": "<(&lt;operator&gt;.subtraction,root - 3)<SUB>10</SUB>>", "89": "<(LITERAL,3,root - 3)<SUB>10</SUB>>", "91": "<(MODIFIER,PUBLIC)>", "93": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}