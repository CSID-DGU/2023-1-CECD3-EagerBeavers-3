{"edges": [["21", "23"], ["21", "341"], ["21", "342"], ["21", "343"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "31"], ["23", "34"], ["23", "35"], ["23", "36"], ["23", "39"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["31", "32"], ["31", "33"], ["34", "5"], ["36", "37"], ["36", "38"], ["39", "40"], ["39", "41"], ["39", "44"], ["39", "47"], ["39", "49"], ["41", "42"], ["41", "43"], ["44", "45"], ["44", "46"], ["47", "48"], ["49", "50"], ["49", "51"], ["49", "55"], ["49", "56"], ["49", "60"], ["49", "61"], ["49", "65"], ["49", "66"], ["49", "70"], ["49", "75"], ["49", "80"], ["49", "130"], ["49", "131"], ["49", "135"], ["49", "140"], ["49", "145"], ["49", "169"], ["49", "170"], ["49", "179"], ["49", "186"], ["49", "311"], ["49", "312"], ["49", "315"], ["49", "333"], ["49", "336"], ["51", "52"], ["51", "53"], ["53", "54"], ["56", "57"], ["56", "58"], ["58", "59"], ["61", "62"], ["61", "63"], ["63", "64"], ["66", "67"], ["66", "68"], ["68", "69"], ["70", "71"], ["70", "74"], ["71", "72"], ["71", "73"], ["75", "76"], ["75", "79"], ["76", "77"], ["76", "78"], ["80", "81"], ["80", "82"], ["80", "85"], ["80", "88"], ["80", "90"], ["82", "83"], ["82", "84"], ["85", "86"], ["85", "87"], ["88", "89"], ["90", "91"], ["90", "102"], ["90", "107"], ["90", "118"], ["91", "92"], ["91", "95"], ["92", "93"], ["92", "94"], ["95", "96"], ["95", "97"], ["97", "98"], ["97", "99"], ["99", "100"], ["99", "101"], ["102", "103"], ["102", "106"], ["103", "104"], ["103", "105"], ["107", "108"], ["107", "111"], ["108", "109"], ["108", "110"], ["111", "112"], ["111", "113"], ["113", "114"], ["113", "115"], ["115", "116"], ["115", "117"], ["118", "119"], ["118", "124"], ["119", "120"], ["119", "123"], ["120", "121"], ["120", "122"], ["124", "125"], ["125", "126"], ["125", "129"], ["126", "127"], ["126", "128"], ["131", "132"], ["131", "133"], ["133", "134"], ["135", "136"], ["135", "139"], ["136", "137"], ["136", "138"], ["140", "141"], ["140", "144"], ["141", "142"], ["141", "143"], ["145", "146"], ["145", "147"], ["145", "150"], ["145", "153"], ["145", "155"], ["147", "148"], ["147", "149"], ["150", "151"], ["150", "152"], ["153", "154"], ["155", "156"], ["156", "157"], ["156", "160"], ["157", "158"], ["157", "159"], ["160", "161"], ["160", "162"], ["160", "165"], ["160", "168"], ["162", "163"], ["162", "164"], ["165", "166"], ["165", "167"], ["170", "171"], ["170", "172"], ["172", "173"], ["172", "176"], ["173", "174"], ["173", "175"], ["176", "177"], ["176", "178"], ["179", "180"], ["179", "185"], ["180", "181"], ["180", "184"], ["181", "182"], ["181", "183"], ["186", "187"], ["186", "188"], ["186", "191"], ["186", "194"], ["186", "196"], ["188", "189"], ["188", "190"], ["191", "192"], ["191", "193"], ["194", "195"], ["196", "197"], ["196", "208"], ["197", "198"], ["197", "203"], ["198", "199"], ["198", "202"], ["199", "200"], ["199", "201"], ["203", "204"], ["203", "205"], ["205", "206"], ["205", "207"], ["208", "209"], ["208", "210"], ["208", "213"], ["208", "218"], ["208", "220"], ["210", "211"], ["210", "212"], ["213", "214"], ["213", "215"], ["215", "216"], ["215", "217"], ["218", "219"], ["220", "221"], ["221", "222"], ["221", "223"], ["221", "226"], ["221", "229"], ["221", "231"], ["223", "224"], ["223", "225"], ["226", "227"], ["226", "228"], ["229", "230"], ["231", "232"], ["231", "233"], ["231", "250"], ["231", "253"], ["231", "258"], ["231", "261"], ["231", "270"], ["231", "273"], ["231", "282"], ["231", "285"], ["231", "298"], ["233", "234"], ["233", "235"], ["235", "236"], ["235", "241"], ["236", "237"], ["236", "240"], ["237", "238"], ["237", "239"], ["241", "242"], ["241", "243"], ["243", "244"], ["243", "245"], ["245", "246"], ["245", "249"], ["246", "247"], ["246", "248"], ["250", "251"], ["250", "252"], ["253", "254"], ["253", "255"], ["255", "256"], ["255", "257"], ["258", "259"], ["258", "260"], ["261", "262"], ["261", "263"], ["263", "264"], ["263", "265"], ["265", "266"], ["265", "269"], ["266", "267"], ["266", "268"], ["270", "271"], ["270", "272"], ["273", "274"], ["273", "275"], ["275", "276"], ["275", "277"], ["277", "278"], ["277", "281"], ["278", "279"], ["278", "280"], ["282", "283"], ["282", "284"], ["285", "286"], ["285", "297"], ["286", "287"], ["286", "290"], ["287", "288"], ["287", "289"], ["290", "291"], ["290", "292"], ["292", "293"], ["292", "296"], ["293", "294"], ["293", "295"], ["298", "299"], ["298", "310"], ["299", "300"], ["299", "303"], ["300", "301"], ["300", "302"], ["303", "304"], ["303", "305"], ["305", "306"], ["305", "309"], ["306", "307"], ["306", "308"], ["312", "313"], ["312", "314"], ["315", "316"], ["315", "317"], ["315", "320"], ["315", "323"], ["315", "325"], ["317", "318"], ["317", "319"], ["320", "321"], ["320", "322"], ["323", "324"], ["325", "326"], ["326", "327"], ["326", "328"], ["328", "329"], ["328", "332"], ["329", "330"], ["329", "331"], ["333", "334"], ["333", "335"], ["336", "337"], ["336", "340"], ["337", "338"], ["337", "339"], ["24", "30"], ["27", "33"], ["31", "34"], ["34", "36"], ["36", "41"], ["26", "24"], ["28", "27"], ["33", "31"], ["41", "44"], ["44", "343"], ["44", "53"], ["47", "44"], ["30", "28"], ["51", "58"], ["56", "63"], ["61", "68"], ["66", "71"], ["70", "76"], ["75", "82"], ["131", "136"], ["135", "141"], ["140", "147"], ["170", "181"], ["179", "188"], ["312", "317"], ["333", "339"], ["336", "47"], ["53", "51"], ["58", "56"], ["63", "61"], ["68", "66"], ["71", "70"], ["76", "75"], ["82", "85"], ["85", "92"], ["85", "133"], ["88", "85"], ["133", "131"], ["136", "135"], ["141", "140"], ["147", "150"], ["150", "157"], ["150", "173"], ["153", "150"], ["172", "170"], ["180", "179"], ["188", "191"], ["191", "199"], ["191", "312"], ["194", "191"], ["317", "320"], ["320", "329"], ["320", "333"], ["323", "320"], ["337", "336"], ["91", "103"], ["102", "108"], ["107", "120"], ["156", "153"], ["173", "176"], ["176", "172"], ["181", "180"], ["197", "210"], ["326", "323"], ["339", "337"], ["92", "99"], ["95", "91"], ["103", "102"], ["108", "115"], ["111", "107"], ["119", "126"], ["119", "88"], ["157", "162"], ["160", "156"], ["198", "205"], ["203", "197"], ["210", "215"], ["213", "223"], ["213", "194"], ["218", "215"], ["328", "326"], ["97", "95"], ["113", "111"], ["120", "119"], ["125", "88"], ["162", "165"], ["165", "160"], ["199", "198"], ["205", "203"], ["215", "213"], ["329", "328"], ["99", "97"], ["115", "113"], ["126", "125"], ["223", "226"], ["226", "237"], ["226", "218"], ["229", "226"], ["233", "250"], ["250", "255"], ["253", "258"], ["258", "266"], ["261", "270"], ["270", "278"], ["273", "282"], ["282", "287"], ["285", "300"], ["298", "229"], ["235", "233"], ["255", "253"], ["263", "261"], ["275", "273"], ["286", "285"], ["299", "298"], ["236", "246"], ["241", "235"], ["265", "263"], ["277", "275"], ["287", "293"], ["290", "286"], ["300", "306"], ["303", "299"], ["237", "236"], ["243", "241"], ["266", "265"], ["278", "277"], ["292", "290"], ["305", "303"], ["245", "243"], ["293", "292"], ["306", "305"], ["246", "245"], ["21", "26"], ["22", "343"], ["24", "343"], ["27", "343"], ["27", "343"], ["27", "343"], ["31", "343"], ["34", "343"], ["34", "343"], ["36", "343"], ["41", "343"], ["44", "343"], ["44", "343"], ["44", "343"], ["47", "343"], ["160", "343"], ["21", "22"], ["21", "24"], ["21", "31"], ["21", "36"], ["24", "27"], ["21", "27"], ["31", "34"], ["21", "34"], ["21", "41"], ["41", "44"], ["47", "44"], ["21", "44"], ["36", "44"], ["44", "47"], ["21", "47"], ["53", "51"], ["58", "56"], ["63", "61"], ["68", "66"], ["21", "70"], ["21", "75"], ["133", "131"], ["21", "135"], ["21", "140"], ["172", "170"], ["21", "179"], ["21", "312"], ["56", "333"], ["160", "333"], ["119", "333"], ["21", "333"], ["21", "82"], ["21", "147"], ["21", "188"], ["21", "317"], ["312", "333"], ["326", "333"], ["333", "336"], ["21", "336"], ["27", "53"], ["58", "53"], ["21", "53"], ["53", "58"], ["21", "58"], ["21", "63"], ["21", "68"], ["82", "85"], ["88", "85"], ["21", "85"], ["115", "88"], ["21", "88"], ["95", "91"], ["95", "91"], ["56", "102"], ["119", "102"], ["21", "102"], ["111", "107"], ["111", "107"], ["21", "133"], ["147", "150"], ["153", "150"], ["21", "150"], ["150", "153"], ["21", "153"], ["160", "156"], ["160", "156"], ["160", "156"], ["160", "156"], ["51", "172"], ["21", "172"], ["188", "191"], ["194", "191"], ["21", "191"], ["51", "191"], ["215", "194"], ["21", "194"], ["66", "197"], ["111", "197"], ["317", "320"], ["323", "320"], ["21", "320"], ["191", "320"], ["320", "323"], ["21", "323"], ["61", "102"], ["91", "102"], ["51", "173"], ["21", "173"], ["21", "176"], ["51", "176"], ["21", "210"], ["312", "326"], ["21", "326"], ["99", "95"], ["21", "95"], ["61", "95"], ["21", "111"], ["66", "111"], ["66", "119"], ["107", "119"], ["21", "119"], ["56", "119"], ["119", "125"], ["21", "125"], ["21", "160"], ["61", "160"], ["102", "160"], ["165", "160"], ["165", "160"], ["210", "213"], ["218", "213"], ["21", "213"], ["215", "213"], ["215", "213"], ["226", "218"], ["21", "218"], ["66", "125"], ["119", "125"], ["56", "165"], ["160", "165"], ["119", "165"], ["21", "165"], ["191", "205"], ["21", "205"], ["205", "215"], ["306", "215"], ["21", "215"], ["21", "223"], ["85", "99"], ["21", "99"], ["95", "115"], ["21", "115"], ["223", "226"], ["229", "226"], ["21", "226"], ["213", "226"], ["306", "226"], ["21", "229"], ["226", "229"], ["235", "233"], ["235", "233"], ["56", "250"], ["160", "250"], ["119", "250"], ["21", "250"], ["131", "253"], ["21", "258"], ["56", "258"], ["160", "258"], ["119", "258"], ["131", "261"], ["21", "270"], ["56", "270"], ["160", "270"], ["119", "270"], ["66", "273"], ["21", "282"], ["56", "282"], ["160", "282"], ["119", "282"], ["282", "285"], ["21", "285"], ["21", "298"], ["56", "298"], ["160", "298"], ["119", "298"], ["233", "250"], ["250", "253"], ["21", "253"], ["253", "258"], ["258", "261"], ["21", "261"], ["261", "270"], ["270", "273"], ["21", "273"], ["273", "282"], ["298", "285"], ["285", "298"], ["61", "235"], ["266", "265"], ["266", "265"], ["21", "265"], ["278", "277"], ["278", "277"], ["21", "277"], ["21", "290"], ["226", "290"], ["292", "290"], ["292", "290"], ["21", "303"], ["226", "303"], ["305", "303"], ["305", "303"], ["226", "243"], ["21", "243"], ["245", "243"], ["245", "243"], ["246", "266"], ["21", "266"], ["246", "266"], ["266", "278"], ["21", "278"], ["266", "278"], ["293", "292"], ["293", "292"], ["21", "292"], ["306", "305"], ["306", "305"], ["21", "305"], ["246", "245"], ["246", "245"], ["21", "245"], ["278", "293"], ["21", "293"], ["278", "293"], ["293", "306"], ["21", "306"], ["293", "306"], ["215", "246"], ["306", "246"], ["21", "246"], ["226", "246"], ["44", "68"], ["44", "188"], ["44", "136"], ["44", "150"], ["44", "170"], ["44", "317"], ["44", "76"], ["44", "181"], ["44", "336"], ["44", "61"], ["44", "70"], ["44", "180"], ["44", "141"], ["44", "66"], ["44", "176"], ["44", "140"], ["44", "71"], ["44", "53"], ["44", "147"], ["44", "135"], ["44", "133"], ["44", "172"], ["44", "320"], ["44", "51"], ["44", "75"], ["44", "131"], ["44", "85"], ["44", "179"], ["44", "56"], ["44", "337"], ["44", "339"], ["44", "44"], ["44", "191"], ["44", "173"], ["44", "58"], ["44", "333"], ["44", "47"], ["44", "82"], ["44", "63"], ["44", "312"], ["85", "120"], ["85", "102"], ["85", "95"], ["85", "88"], ["85", "108"], ["85", "107"], ["85", "115"], ["85", "113"], ["85", "85"], ["85", "103"], ["85", "119"], ["85", "92"], ["85", "97"], ["85", "91"], ["85", "111"], ["85", "99"], ["150", "150"], ["150", "162"], ["150", "160"], ["150", "153"], ["150", "157"], ["150", "165"], ["150", "156"], ["191", "215"], ["191", "213"], ["191", "194"], ["191", "199"], ["191", "197"], ["191", "198"], ["191", "191"], ["191", "205"], ["191", "210"], ["191", "203"], ["320", "326"], ["320", "329"], ["320", "328"], ["320", "323"], ["320", "320"], ["119", "126"], ["119", "125"], ["213", "215"], ["213", "226"], ["213", "213"], ["213", "223"], ["213", "218"], ["226", "226"], ["226", "292"], ["226", "290"], ["226", "243"], ["226", "298"], ["226", "300"], ["226", "306"], ["226", "258"], ["226", "236"], ["226", "237"], ["226", "253"], ["226", "278"], ["226", "229"], ["226", "241"], ["226", "305"], ["226", "282"], ["226", "273"], ["226", "261"], ["226", "275"], ["226", "245"], ["226", "255"], ["226", "285"], ["226", "246"], ["226", "293"], ["226", "233"], ["226", "265"], ["226", "286"], ["226", "299"], ["226", "277"], ["226", "235"], ["226", "287"], ["226", "270"], ["226", "263"], ["226", "303"], ["226", "250"], ["226", "266"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "6": "<(LOCAL,StringBuilder st: java.lang.StringBuilder)<SUB>3</SUB>>", "32": "<(IDENTIFIER,st,StringBuilder st = new StringBuilder())<SUB>3</SUB>>", "34": "<(&lt;init&gt;,new StringBuilder())<SUB>3</SUB>>", "35": "<(LOCAL,int t: int)<SUB>4</SUB>>", "37": "<(IDENTIFIER,t,int t = 1)<SUB>4</SUB>>", "39": "<(CONTROL_STRUCTURE,for (int test = 0; Some(test &lt; t); test++),for (int test = 0; Some(test &lt; t); test++))<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.assignment,int test = 0)<SUB>5</SUB>>", "43": "<(LITERAL,0,int test = 0)<SUB>5</SUB>>", "45": "<(IDENTIFIER,test,test &lt; t)<SUB>5</SUB>>", "47": "<(&lt;operator&gt;.postIncrement,test++)<SUB>5</SUB>>", "49": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>5</SUB>>", "51": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>6</SUB>>", "53": "<(nextInt,nextInt())<SUB>6</SUB>>", "55": "<(LOCAL,int MOD: int)<SUB>7</SUB>>", "57": "<(IDENTIFIER,MOD,int MOD = nextInt())<SUB>7</SUB>>", "59": "<(IDENTIFIER,sc,nextInt())<SUB>7</SUB>>", "61": "<(&lt;operator&gt;.assignment,long[] factorial = new long[1000])<SUB>9</SUB>>", "63": "<(&lt;operator&gt;.alloc,new long[1000])>", "65": "<(LOCAL,long[] powerOfTwo: long[])<SUB>10</SUB>>", "67": "<(IDENTIFIER,powerOfTwo,long[] powerOfTwo = new long[1000])<SUB>10</SUB>>", "69": "<(LITERAL,1000,new long[1000])<SUB>10</SUB>>", "71": "<(&lt;operator&gt;.indexAccess,factorial[0])<SUB>11</SUB>>", "73": "<(LITERAL,0,factorial[0] = 1)<SUB>11</SUB>>", "75": "<(&lt;operator&gt;.assignment,powerOfTwo[0] = 1)<SUB>12</SUB>>", "77": "<(IDENTIFIER,powerOfTwo,powerOfTwo[0] = 1)<SUB>12</SUB>>", "79": "<(LITERAL,1,powerOfTwo[0] = 1)<SUB>12</SUB>>", "81": "<(LOCAL,int i: int)<SUB>13</SUB>>", "83": "<(IDENTIFIER,i,int i = 1)<SUB>13</SUB>>", "85": "<(&lt;operator&gt;.lessThan,i &lt; 1000)<SUB>13</SUB>>", "87": "<(LITERAL,1000,i &lt; 1000)<SUB>13</SUB>>", "89": "<(IDENTIFIER,i,i++)<SUB>13</SUB>>", "91": "<(&lt;operator&gt;.assignment,factorial[i] = i * factorial[i - 1])<SUB>14</SUB>>", "93": "<(IDENTIFIER,factorial,factorial[i] = i * factorial[i - 1])<SUB>14</SUB>>", "95": "<(&lt;operator&gt;.multiplication,i * factorial[i - 1])<SUB>14</SUB>>", "97": "<(&lt;operator&gt;.indexAccess,factorial[i - 1])<SUB>14</SUB>>", "99": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>14</SUB>>", "101": "<(LITERAL,1,i - 1)<SUB>14</SUB>>", "103": "<(&lt;operator&gt;.indexAccess,factorial[i])<SUB>15</SUB>>", "105": "<(IDENTIFIER,i,factorial[i] %= MOD)<SUB>15</SUB>>", "107": "<(&lt;operator&gt;.assignment,powerOfTwo[i] = 2 * powerOfTwo[i - 1])<SUB>16</SUB>>", "109": "<(IDENTIFIER,powerOfTwo,powerOfTwo[i] = 2 * powerOfTwo[i - 1])<SUB>16</SUB>>", "111": "<(&lt;operator&gt;.multiplication,2 * powerOfTwo[i - 1])<SUB>16</SUB>>", "113": "<(&lt;operator&gt;.indexAccess,powerOfTwo[i - 1])<SUB>16</SUB>>", "115": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>16</SUB>>", "117": "<(LITERAL,1,i - 1)<SUB>16</SUB>>", "119": "<(&lt;operator&gt;.greaterEqualsThan,powerOfTwo[i] &gt;= MOD)<SUB>17</SUB>>", "121": "<(IDENTIFIER,powerOfTwo,powerOfTwo[i] &gt;= MOD)<SUB>17</SUB>>", "123": "<(IDENTIFIER,MOD,powerOfTwo[i] &gt;= MOD)<SUB>17</SUB>>", "125": "<(&lt;operator&gt;.assignmentMinus,powerOfTwo[i] -= MOD)<SUB>18</SUB>>", "127": "<(IDENTIFIER,powerOfTwo,powerOfTwo[i] -= MOD)<SUB>18</SUB>>", "129": "<(IDENTIFIER,MOD,powerOfTwo[i] -= MOD)<SUB>18</SUB>>", "131": "<(&lt;operator&gt;.assignment,long[] oneOverFactorial = new long[500])<SUB>21</SUB>>", "133": "<(&lt;operator&gt;.alloc,new long[500])>", "135": "<(&lt;operator&gt;.assignment,oneOverFactorial[0] = 1)<SUB>22</SUB>>", "137": "<(IDENTIFIER,oneOverFactorial,oneOverFactorial[0] = 1)<SUB>22</SUB>>", "139": "<(LITERAL,1,oneOverFactorial[0] = 1)<SUB>22</SUB>>", "141": "<(&lt;operator&gt;.indexAccess,oneOverFactorial[1])<SUB>23</SUB>>", "143": "<(LITERAL,1,oneOverFactorial[1] = 1)<SUB>23</SUB>>", "145": "<(CONTROL_STRUCTURE,for (int i = 2; Some(i &lt; 450); i++),for (int i = 2; Some(i &lt; 450); i++))<SUB>24</SUB>>", "147": "<(&lt;operator&gt;.assignment,int i = 2)<SUB>24</SUB>>", "149": "<(LITERAL,2,int i = 2)<SUB>24</SUB>>", "151": "<(IDENTIFIER,i,i &lt; 450)<SUB>24</SUB>>", "153": "<(&lt;operator&gt;.postIncrement,i++)<SUB>24</SUB>>", "155": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>24</SUB>>", "157": "<(&lt;operator&gt;.indexAccess,oneOverFactorial[i])<SUB>25</SUB>>", "159": "<(IDENTIFIER,i,oneOverFactorial[i] = fastPow(factorial[i], MOD - 2, MOD))<SUB>25</SUB>>", "161": "<(IDENTIFIER,this,fastPow(factorial[i], MOD - 2, MOD))<SUB>25</SUB>>", "163": "<(IDENTIFIER,factorial,fastPow(factorial[i], MOD - 2, MOD))<SUB>25</SUB>>", "165": "<(&lt;operator&gt;.subtraction,MOD - 2)<SUB>25</SUB>>", "167": "<(LITERAL,2,MOD - 2)<SUB>25</SUB>>", "169": "<(LOCAL,long[][] dp: long[][])<SUB>27</SUB>>", "171": "<(IDENTIFIER,dp,long[][] dp = new long[n + 3][n + 3])<SUB>27</SUB>>", "173": "<(&lt;operator&gt;.addition,n + 3)<SUB>27</SUB>>", "175": "<(LITERAL,3,n + 3)<SUB>27</SUB>>", "177": "<(IDENTIFIER,n,n + 3)<SUB>27</SUB>>", "179": "<(&lt;operator&gt;.assignment,dp[1][1] = 1)<SUB>30</SUB>>", "181": "<(&lt;operator&gt;.indexAccess,dp[1])<SUB>30</SUB>>", "183": "<(LITERAL,1,dp[1][1] = 1)<SUB>30</SUB>>", "185": "<(LITERAL,1,dp[1][1] = 1)<SUB>30</SUB>>", "187": "<(LOCAL,int i: int)<SUB>31</SUB>>", "189": "<(IDENTIFIER,i,int i = 2)<SUB>31</SUB>>", "191": "<(&lt;operator&gt;.lessEqualsThan,i &lt;= n)<SUB>31</SUB>>", "193": "<(IDENTIFIER,n,i &lt;= n)<SUB>31</SUB>>", "195": "<(IDENTIFIER,i,i++)<SUB>31</SUB>>", "197": "<(&lt;operator&gt;.assignment,dp[i][i] = powerOfTwo[i - 1])<SUB>32</SUB>>", "199": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>32</SUB>>", "201": "<(IDENTIFIER,i,dp[i][i] = powerOfTwo[i - 1])<SUB>32</SUB>>", "203": "<(&lt;operator&gt;.indexAccess,powerOfTwo[i - 1])<SUB>32</SUB>>", "205": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>32</SUB>>", "207": "<(LITERAL,1,i - 1)<SUB>32</SUB>>", "209": "<(LOCAL,int j: int)<SUB>33</SUB>>", "211": "<(IDENTIFIER,j,int j = 1)<SUB>33</SUB>>", "213": "<(&lt;operator&gt;.lessThan,j &lt; i - 1)<SUB>33</SUB>>", "215": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>33</SUB>>", "217": "<(LITERAL,1,i - 1)<SUB>33</SUB>>", "219": "<(IDENTIFIER,j,j++)<SUB>33</SUB>>", "221": "<(CONTROL_STRUCTURE,for (int k = 1; Some(k &lt;= j); k++),for (int k = 1; Some(k &lt;= j); k++))<SUB>34</SUB>>", "223": "<(&lt;operator&gt;.assignment,int k = 1)<SUB>34</SUB>>", "225": "<(LITERAL,1,int k = 1)<SUB>34</SUB>>", "227": "<(IDENTIFIER,k,k &lt;= j)<SUB>34</SUB>>", "229": "<(&lt;operator&gt;.postIncrement,k++)<SUB>34</SUB>>", "231": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>34</SUB>>", "233": "<(&lt;operator&gt;.assignment,long add = dp[j][k] * factorial[k + (i - j - 1)])<SUB>36</SUB>>", "235": "<(&lt;operator&gt;.multiplication,dp[j][k] * factorial[k + (i - j - 1)])<SUB>36</SUB>>", "237": "<(&lt;operator&gt;.indexAccess,dp[j])<SUB>36</SUB>>", "239": "<(IDENTIFIER,j,dp[j][k] * factorial[k + (i - j - 1)])<SUB>36</SUB>>", "241": "<(&lt;operator&gt;.indexAccess,factorial[k + (i - j - 1)])<SUB>36</SUB>>", "243": "<(&lt;operator&gt;.addition,k + (i - j - 1))<SUB>36</SUB>>", "245": "<(&lt;operator&gt;.subtraction,i - j - 1)<SUB>36</SUB>>", "247": "<(IDENTIFIER,i,i - j)<SUB>36</SUB>>", "249": "<(LITERAL,1,i - j - 1)<SUB>36</SUB>>", "251": "<(IDENTIFIER,add,add %= MOD)<SUB>37</SUB>>", "253": "<(&lt;operator&gt;.assignmentMultiplication,add *= oneOverFactorial[k])<SUB>38</SUB>>", "255": "<(&lt;operator&gt;.indexAccess,oneOverFactorial[k])<SUB>38</SUB>>", "257": "<(IDENTIFIER,k,add *= oneOverFactorial[k])<SUB>38</SUB>>", "259": "<(IDENTIFIER,add,add %= MOD)<SUB>39</SUB>>", "261": "<(&lt;operator&gt;.assignmentMultiplication,add *= oneOverFactorial[i - j - 1])<SUB>40</SUB>>", "263": "<(&lt;operator&gt;.indexAccess,oneOverFactorial[i - j - 1])<SUB>40</SUB>>", "265": "<(&lt;operator&gt;.subtraction,i - j - 1)<SUB>40</SUB>>", "267": "<(IDENTIFIER,i,i - j)<SUB>40</SUB>>", "269": "<(LITERAL,1,i - j - 1)<SUB>40</SUB>>", "271": "<(IDENTIFIER,add,add %= MOD)<SUB>41</SUB>>", "273": "<(&lt;operator&gt;.assignmentMultiplication,add *= powerOfTwo[i - j - 2])<SUB>42</SUB>>", "275": "<(&lt;operator&gt;.indexAccess,powerOfTwo[i - j - 2])<SUB>42</SUB>>", "277": "<(&lt;operator&gt;.subtraction,i - j - 2)<SUB>42</SUB>>", "279": "<(IDENTIFIER,i,i - j)<SUB>42</SUB>>", "281": "<(LITERAL,2,i - j - 2)<SUB>42</SUB>>", "283": "<(IDENTIFIER,add,add %= MOD)<SUB>43</SUB>>", "285": "<(&lt;operator&gt;.assignmentPlus,dp[i][k + (i - j - 1)] += add)<SUB>44</SUB>>", "287": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>44</SUB>>", "289": "<(IDENTIFIER,i,dp[i][k + (i - j - 1)] += add)<SUB>44</SUB>>", "291": "<(IDENTIFIER,k,k + (i - j - 1))<SUB>44</SUB>>", "293": "<(&lt;operator&gt;.subtraction,i - j)<SUB>44</SUB>>", "295": "<(IDENTIFIER,j,i - j)<SUB>44</SUB>>", "297": "<(IDENTIFIER,add,dp[i][k + (i - j - 1)] += add)<SUB>44</SUB>>", "299": "<(&lt;operator&gt;.indexAccess,dp[i][k + (i - j - 1)])<SUB>45</SUB>>", "301": "<(IDENTIFIER,dp,dp[i][k + (i - j - 1)] %= MOD)<SUB>45</SUB>>", "303": "<(&lt;operator&gt;.addition,k + (i - j - 1))<SUB>45</SUB>>", "305": "<(&lt;operator&gt;.subtraction,i - j - 1)<SUB>45</SUB>>", "307": "<(IDENTIFIER,i,i - j)<SUB>45</SUB>>", "309": "<(LITERAL,1,i - j - 1)<SUB>45</SUB>>", "311": "<(LOCAL,long ans: long)<SUB>49</SUB>>", "313": "<(IDENTIFIER,ans,long ans = 0)<SUB>49</SUB>>", "315": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt;= n); i++),for (int i = 1; Some(i &lt;= n); i++))<SUB>50</SUB>>", "317": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>50</SUB>>", "319": "<(LITERAL,1,int i = 1)<SUB>50</SUB>>", "321": "<(IDENTIFIER,i,i &lt;= n)<SUB>50</SUB>>", "323": "<(&lt;operator&gt;.postIncrement,i++)<SUB>50</SUB>>", "325": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>50</SUB>>", "327": "<(IDENTIFIER,ans,ans += dp[n][i])<SUB>51</SUB>>", "329": "<(&lt;operator&gt;.indexAccess,dp[n])<SUB>51</SUB>>", "331": "<(IDENTIFIER,n,ans += dp[n][i])<SUB>51</SUB>>", "333": "<(&lt;operators&gt;.assignmentModulo,ans %= MOD)<SUB>53</SUB>>", "335": "<(IDENTIFIER,MOD,ans %= MOD)<SUB>53</SUB>>", "337": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>54</SUB>>", "339": "<(FIELD_IDENTIFIER,out,out)<SUB>54</SUB>>", "341": "<(MODIFIER,PUBLIC)>", "343": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}