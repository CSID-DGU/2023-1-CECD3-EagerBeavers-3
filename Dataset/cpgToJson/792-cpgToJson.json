{"edges": [["19", "20"], ["19", "21"], ["19", "174"], ["19", "175"], ["19", "176"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "40"], ["21", "46"], ["21", "47"], ["21", "50"], ["21", "80"], ["21", "81"], ["21", "87"], ["21", "88"], ["21", "91"], ["21", "92"], ["21", "95"], ["21", "96"], ["21", "99"], ["21", "100"], ["21", "103"], ["21", "169"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["40", "41"], ["40", "42"], ["42", "43"], ["43", "44"], ["43", "45"], ["47", "48"], ["47", "49"], ["50", "51"], ["50", "52"], ["50", "55"], ["50", "59"], ["50", "61"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "57"], ["57", "58"], ["59", "60"], ["61", "62"], ["61", "63"], ["61", "68"], ["61", "76"], ["63", "64"], ["63", "65"], ["65", "66"], ["65", "67"], ["68", "69"], ["68", "74"], ["69", "70"], ["69", "73"], ["70", "71"], ["70", "72"], ["74", "75"], ["76", "77"], ["77", "78"], ["77", "79"], ["81", "82"], ["81", "83"], ["83", "84"], ["84", "85"], ["84", "86"], ["88", "89"], ["88", "90"], ["92", "93"], ["92", "94"], ["96", "97"], ["96", "98"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "105"], ["105", "106"], ["106", "107"], ["106", "110"], ["106", "136"], ["107", "108"], ["107", "109"], ["110", "111"], ["110", "116"], ["110", "117"], ["110", "122"], ["110", "130"], ["110", "134"], ["111", "112"], ["111", "115"], ["112", "113"], ["112", "114"], ["117", "118"], ["117", "119"], ["119", "120"], ["119", "121"], ["122", "123"], ["122", "128"], ["123", "124"], ["123", "127"], ["124", "125"], ["124", "126"], ["128", "129"], ["130", "131"], ["131", "132"], ["131", "133"], ["134", "135"], ["136", "137"], ["137", "138"], ["137", "149"], ["137", "150"], ["137", "155"], ["137", "163"], ["137", "167"], ["138", "139"], ["138", "144"], ["139", "140"], ["139", "141"], ["141", "142"], ["141", "143"], ["144", "145"], ["144", "146"], ["146", "147"], ["146", "148"], ["150", "151"], ["150", "152"], ["152", "153"], ["152", "154"], ["155", "156"], ["155", "161"], ["156", "157"], ["156", "160"], ["157", "158"], ["157", "159"], ["161", "162"], ["163", "164"], ["164", "165"], ["164", "166"], ["167", "168"], ["169", "170"], ["169", "173"], ["170", "171"], ["170", "172"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "43"], ["40", "47"], ["47", "52"], ["81", "88"], ["88", "92"], ["92", "96"], ["96", "100"], ["100", "107"], ["100", "172"], ["169", "176"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["42", "40"], ["52", "57"], ["55", "65"], ["55", "84"], ["59", "57"], ["83", "81"], ["170", "169"], ["28", "26"], ["43", "42"], ["57", "55"], ["63", "70"], ["76", "59"], ["84", "83"], ["172", "170"], ["65", "63"], ["69", "74"], ["69", "77"], ["74", "77"], ["77", "76"], ["107", "112"], ["107", "141"], ["70", "69"], ["117", "124"], ["130", "134"], ["134", "107"], ["134", "172"], ["112", "172"], ["112", "119"], ["119", "117"], ["123", "128"], ["123", "131"], ["128", "131"], ["131", "130"], ["150", "157"], ["163", "167"], ["167", "107"], ["167", "172"], ["124", "123"], ["139", "146"], ["139", "152"], ["144", "152"], ["152", "150"], ["156", "161"], ["156", "164"], ["161", "164"], ["164", "163"], ["141", "139"], ["146", "144"], ["157", "156"], ["19", "24"], ["20", "176"], ["22", "176"], ["25", "176"], ["25", "176"], ["30", "176"], ["30", "176"], ["37", "176"], ["35", "176"], ["35", "176"], ["40", "176"], ["40", "176"], ["47", "176"], ["47", "176"], ["52", "176"], ["55", "176"], ["57", "176"], ["55", "176"], ["55", "176"], ["81", "176"], ["83", "176"], ["81", "176"], ["81", "176"], ["88", "176"], ["88", "176"], ["92", "176"], ["92", "176"], ["96", "176"], ["96", "176"], ["100", "176"], ["100", "176"], ["107", "176"], ["107", "176"], ["107", "176"], ["141", "176"], ["139", "176"], ["139", "176"], ["146", "176"], ["144", "176"], ["144", "176"], ["150", "176"], ["152", "176"], ["150", "176"], ["150", "176"], ["156", "176"], ["161", "176"], ["161", "176"], ["163", "176"], ["163", "176"], ["167", "176"], ["167", "176"], ["112", "176"], ["112", "176"], ["112", "176"], ["117", "176"], ["119", "176"], ["117", "176"], ["117", "176"], ["123", "176"], ["128", "176"], ["128", "176"], ["130", "176"], ["130", "176"], ["134", "176"], ["134", "176"], ["169", "176"], ["169", "176"], ["169", "176"], ["63", "176"], ["63", "176"], ["63", "176"], ["69", "176"], ["74", "176"], ["74", "176"], ["76", "176"], ["76", "176"], ["59", "176"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["42", "40"], ["19", "47"], ["83", "81"], ["30", "88"], ["19", "88"], ["19", "92"], ["19", "96"], ["19", "100"], ["22", "25"], ["19", "25"], ["19", "52"], ["19", "104"], ["88", "169"], ["139", "169"], ["144", "169"], ["19", "169"], ["25", "32"], ["19", "32"], ["32", "37"], ["19", "37"], ["19", "42"], ["52", "55"], ["59", "55"], ["19", "55"], ["57", "55"], ["65", "59"], ["19", "59"], ["65", "63"], ["65", "63"], ["19", "83"], ["19", "43"], ["35", "57"], ["65", "57"], ["19", "57"], ["40", "76"], ["69", "76"], ["19", "84"], ["57", "65"], ["19", "65"], ["55", "65"], ["40", "69"], ["76", "69"], ["19", "69"], ["47", "74"], ["19", "74"], ["100", "107"], ["161", "107"], ["128", "107"], ["19", "107"], ["47", "107"], ["74", "107"], ["119", "117"], ["119", "117"], ["81", "130"], ["123", "130"], ["119", "134"], ["19", "134"], ["152", "150"], ["152", "150"], ["96", "112"], ["141", "112"], ["146", "112"], ["134", "112"], ["19", "112"], ["30", "112"], ["57", "119"], ["152", "119"], ["19", "119"], ["112", "119"], ["81", "123"], ["163", "123"], ["130", "123"], ["19", "123"], ["107", "128"], ["19", "128"], ["146", "144"], ["146", "144"], ["81", "163"], ["156", "163"], ["152", "167"], ["19", "167"], ["88", "139"], ["144", "139"], ["19", "139"], ["141", "139"], ["141", "139"], ["57", "152"], ["119", "152"], ["19", "152"], ["141", "152"], ["146", "152"], ["81", "156"], ["163", "156"], ["130", "156"], ["19", "156"], ["107", "161"], ["19", "161"], ["96", "141"], ["146", "141"], ["134", "141"], ["19", "141"], ["92", "141"], ["167", "141"], ["141", "146"], ["19", "146"], ["141", "146"], ["55", "77"], ["55", "57"], ["55", "69"], ["55", "76"], ["55", "65"], ["55", "59"], ["55", "70"], ["55", "63"], ["55", "55"], ["69", "74"], ["107", "141"], ["107", "167"], ["107", "163"], ["107", "150"], ["107", "157"], ["107", "112"], ["107", "152"], ["107", "164"], ["107", "139"], ["107", "156"], ["107", "107"], ["112", "131"], ["112", "119"], ["112", "123"], ["112", "134"], ["112", "130"], ["112", "117"], ["112", "124"], ["112", "107"], ["123", "128"], ["139", "146"], ["139", "144"], ["156", "161"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Kattio(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Kattio(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Kattio(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Kattio(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,int n: int)<SUB>3</SUB>>", "31": "<(IDENTIFIER,n,int n = getInt())<SUB>3</SUB>>", "33": "<(IDENTIFIER,sc,getInt())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,String s = getWord())<SUB>4</SUB>>", "37": "<(getWord,getWord())<SUB>4</SUB>>", "39": "<(LOCAL,int[] found: int[])<SUB>5</SUB>>", "41": "<(IDENTIFIER,found,int[] found = new int['z' + 1])<SUB>5</SUB>>", "43": "<(&lt;operator&gt;.addition,'z' + 1)<SUB>5</SUB>>", "45": "<(LITERAL,1,'z' + 1)<SUB>5</SUB>>", "47": "<(&lt;operator&gt;.assignment,int amount = 0)<SUB>6</SUB>>", "49": "<(LITERAL,0,int amount = 0)<SUB>6</SUB>>", "51": "<(LOCAL,int i: int)<SUB>7</SUB>>", "53": "<(IDENTIFIER,i,int i = 0)<SUB>7</SUB>>", "55": "<(&lt;operator&gt;.lessThan,i &lt; s.length())<SUB>7</SUB>>", "57": "<(length,s.length())<SUB>7</SUB>>", "59": "<(&lt;operator&gt;.postIncrement,i++)<SUB>7</SUB>>", "61": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>7</SUB>>", "63": "<(&lt;operator&gt;.assignment,char c = s.charAt(i))<SUB>8</SUB>>", "65": "<(charAt,s.charAt(i))<SUB>8</SUB>>", "67": "<(IDENTIFIER,i,s.charAt(i))<SUB>8</SUB>>", "69": "<(&lt;operator&gt;.equals,found[c] == 0)<SUB>9</SUB>>", "71": "<(IDENTIFIER,found,found[c] == 0)<SUB>9</SUB>>", "73": "<(LITERAL,0,found[c] == 0)<SUB>9</SUB>>", "75": "<(IDENTIFIER,amount,amount++)<SUB>9</SUB>>", "77": "<(&lt;operator&gt;.indexAccess,found[c])<SUB>10</SUB>>", "79": "<(IDENTIFIER,c,found[c]++)<SUB>10</SUB>>", "81": "<(&lt;operator&gt;.assignment,int[] contains = new int['z' + 1])<SUB>12</SUB>>", "83": "<(&lt;operator&gt;.alloc,new int['z' + 1])>", "85": "<(LITERAL,'z','z' + 1)<SUB>12</SUB>>", "87": "<(LOCAL,int min: int)<SUB>13</SUB>>", "89": "<(IDENTIFIER,min,int min = n)<SUB>13</SUB>>", "91": "<(LOCAL,int start: int)<SUB>14</SUB>>", "93": "<(IDENTIFIER,start,int start = 0)<SUB>14</SUB>>", "95": "<(LOCAL,int end: int)<SUB>15</SUB>>", "97": "<(IDENTIFIER,end,int end = 0)<SUB>15</SUB>>", "99": "<(LOCAL,int in: int)<SUB>16</SUB>>", "101": "<(IDENTIFIER,in,int in = 0)<SUB>16</SUB>>", "103": "<(CONTROL_STRUCTURE,while (true),while (true))<SUB>17</SUB>>", "105": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>17</SUB>>", "107": "<(&lt;operator&gt;.lessThan,in &lt; amount)<SUB>18</SUB>>", "109": "<(IDENTIFIER,amount,in &lt; amount)<SUB>18</SUB>>", "111": "<(CONTROL_STRUCTURE,if (end == n),if (end == n))<SUB>19</SUB>>", "113": "<(IDENTIFIER,end,end == n)<SUB>19</SUB>>", "115": "<(CONTROL_STRUCTURE,break;,break;)<SUB>19</SUB>>", "117": "<(&lt;operator&gt;.assignment,char c = s.charAt(end))<SUB>20</SUB>>", "119": "<(charAt,s.charAt(end))<SUB>20</SUB>>", "121": "<(IDENTIFIER,end,s.charAt(end))<SUB>20</SUB>>", "123": "<(&lt;operator&gt;.equals,contains[c] == 0)<SUB>21</SUB>>", "125": "<(IDENTIFIER,contains,contains[c] == 0)<SUB>21</SUB>>", "127": "<(LITERAL,0,contains[c] == 0)<SUB>21</SUB>>", "129": "<(IDENTIFIER,in,in++)<SUB>21</SUB>>", "131": "<(&lt;operator&gt;.indexAccess,contains[c])<SUB>22</SUB>>", "133": "<(IDENTIFIER,c,contains[c]++)<SUB>22</SUB>>", "135": "<(IDENTIFIER,end,end++)<SUB>23</SUB>>", "137": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>24</SUB>>", "139": "<(&lt;operator&gt;.greaterThan,min &gt; end - start)<SUB>25</SUB>>", "141": "<(&lt;operator&gt;.subtraction,end - start)<SUB>25</SUB>>", "143": "<(IDENTIFIER,start,end - start)<SUB>25</SUB>>", "145": "<(IDENTIFIER,min,min = end - start)<SUB>25</SUB>>", "147": "<(IDENTIFIER,end,end - start)<SUB>25</SUB>>", "149": "<(LOCAL,char c: char)<SUB>26</SUB>>", "151": "<(IDENTIFIER,c,char c = s.charAt(start))<SUB>26</SUB>>", "153": "<(IDENTIFIER,s,s.charAt(start))<SUB>26</SUB>>", "155": "<(CONTROL_STRUCTURE,if (contains[c] == 1),if (contains[c] == 1))<SUB>27</SUB>>", "157": "<(&lt;operator&gt;.indexAccess,contains[c])<SUB>27</SUB>>", "159": "<(IDENTIFIER,c,contains[c] == 1)<SUB>27</SUB>>", "161": "<(&lt;operator&gt;.postDecrement,in--)<SUB>27</SUB>>", "163": "<(&lt;operator&gt;.postDecrement,contains[c]--)<SUB>28</SUB>>", "165": "<(IDENTIFIER,contains,contains[c]--)<SUB>28</SUB>>", "167": "<(&lt;operator&gt;.postIncrement,start++)<SUB>29</SUB>>", "169": "<(println,System.out.println(min))<SUB>32</SUB>>", "171": "<(IDENTIFIER,System,System.out.println(min))<SUB>32</SUB>>", "173": "<(IDENTIFIER,min,System.out.println(min))<SUB>32</SUB>>", "175": "<(MODIFIER,STATIC)>"}}