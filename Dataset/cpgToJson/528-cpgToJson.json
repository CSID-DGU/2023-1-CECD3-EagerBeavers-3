{"edges": [["21", "23"], ["21", "105"], ["21", "106"], ["21", "107"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "31"], ["23", "34"], ["23", "45"], ["23", "46"], ["23", "50"], ["23", "103"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["31", "32"], ["31", "33"], ["34", "5"], ["34", "35"], ["35", "36"], ["35", "39"], ["35", "44"], ["36", "37"], ["36", "38"], ["39", "40"], ["39", "41"], ["41", "42"], ["41", "43"], ["46", "47"], ["46", "48"], ["48", "49"], ["50", "51"], ["50", "55"], ["51", "52"], ["51", "54"], ["52", "53"], ["55", "56"], ["55", "57"], ["55", "61"], ["57", "58"], ["57", "59"], ["59", "60"], ["61", "62"], ["61", "95"], ["61", "98"], ["62", "63"], ["62", "79"], ["63", "64"], ["63", "69"], ["64", "65"], ["64", "68"], ["65", "66"], ["65", "67"], ["69", "70"], ["69", "78"], ["70", "71"], ["70", "77"], ["71", "72"], ["71", "73"], ["71", "76"], ["73", "74"], ["73", "75"], ["79", "80"], ["79", "85"], ["80", "81"], ["80", "84"], ["81", "82"], ["81", "83"], ["85", "86"], ["85", "94"], ["86", "87"], ["86", "93"], ["87", "88"], ["87", "89"], ["87", "92"], ["89", "90"], ["89", "91"], ["95", "96"], ["95", "97"], ["98", "99"], ["99", "100"], ["100", "101"], ["100", "102"], ["103", "104"], ["24", "30"], ["27", "33"], ["31", "38"], ["34", "48"], ["46", "52"], ["103", "107"], ["26", "24"], ["28", "27"], ["33", "31"], ["48", "46"], ["51", "59"], ["51", "103"], ["30", "28"], ["36", "43"], ["39", "34"], ["52", "51"], ["57", "65"], ["38", "36"], ["41", "39"], ["59", "57"], ["62", "95"], ["62", "100"], ["95", "52"], ["43", "41"], ["63", "62"], ["63", "81"], ["79", "62"], ["64", "63"], ["64", "73"], ["69", "63"], ["80", "79"], ["80", "89"], ["85", "79"], ["100", "52"], ["65", "64"], ["70", "69"], ["81", "80"], ["86", "85"], ["71", "70"], ["87", "86"], ["73", "71"], ["89", "87"], ["21", "26"], ["22", "107"], ["24", "107"], ["27", "107"], ["27", "107"], ["31", "107"], ["36", "107"], ["39", "107"], ["39", "107"], ["39", "107"], ["34", "107"], ["48", "107"], ["46", "107"], ["46", "107"], ["52", "107"], ["51", "107"], ["51", "107"], ["103", "107"], ["103", "107"], ["59", "107"], ["57", "107"], ["57", "107"], ["65", "107"], ["64", "107"], ["63", "107"], ["71", "107"], ["73", "107"], ["71", "107"], ["70", "107"], ["69", "107"], ["63", "107"], ["62", "107"], ["81", "107"], ["80", "107"], ["79", "107"], ["87", "107"], ["89", "107"], ["87", "107"], ["86", "107"], ["85", "107"], ["79", "107"], ["62", "107"], ["62", "107"], ["100", "107"], ["95", "107"], ["21", "22"], ["21", "24"], ["21", "31"], ["48", "46"], ["24", "27"], ["21", "27"], ["31", "34"], ["21", "34"], ["36", "34"], ["39", "34"], ["34", "103"], ["100", "103"], ["95", "103"], ["21", "103"], ["21", "36"], ["21", "44"], ["27", "48"], ["21", "48"], ["52", "51"], ["21", "51"], ["59", "57"], ["36", "39"], ["21", "39"], ["46", "52"], ["21", "52"], ["48", "59"], ["21", "59"], ["63", "62"], ["63", "62"], ["79", "62"], ["79", "62"], ["34", "95"], ["100", "95"], ["21", "95"], ["64", "63"], ["64", "63"], ["69", "63"], ["69", "63"], ["80", "79"], ["80", "79"], ["85", "79"], ["85", "79"], ["65", "64"], ["65", "64"], ["21", "64"], ["70", "69"], ["70", "69"], ["21", "69"], ["81", "80"], ["81", "80"], ["21", "80"], ["86", "85"], ["86", "85"], ["21", "85"], ["34", "100"], ["95", "100"], ["21", "100"], ["57", "65"], ["21", "65"], ["71", "70"], ["71", "70"], ["71", "70"], ["21", "70"], ["65", "81"], ["73", "81"], ["21", "81"], ["87", "86"], ["87", "86"], ["87", "86"], ["21", "86"], ["87", "71"], ["21", "71"], ["73", "71"], ["73", "71"], ["71", "87"], ["21", "87"], ["89", "87"], ["89", "87"], ["65", "73"], ["21", "73"], ["81", "89"], ["21", "89"], ["51", "64"], ["51", "51"], ["51", "57"], ["51", "52"], ["51", "63"], ["51", "65"], ["51", "59"], ["51", "62"], ["62", "100"], ["62", "95"], ["63", "80"], ["63", "81"], ["63", "79"], ["64", "73"], ["64", "71"], ["64", "69"], ["64", "70"], ["80", "89"], ["80", "85"], ["80", "87"], ["80", "86"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "6": "<(LOCAL,BufferedWriter output: ANY)<SUB>3</SUB>>", "32": "<(IDENTIFIER,output,ANY output = new BufferedWriter(new OutputStreamWriter(System.out)))<SUB>3</SUB>>", "34": "<(&lt;init&gt;,new BufferedWriter(new OutputStreamWriter(System.out)))<SUB>3</SUB>>", "35": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>4</SUB>>", "37": "<(IDENTIFIER,$obj1,&lt;empty&gt;)>", "39": "<(&lt;init&gt;,new OutputStreamWriter(System.out))<SUB>4</SUB>>", "41": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>4</SUB>>", "43": "<(FIELD_IDENTIFIER,out,out)<SUB>4</SUB>>", "45": "<(LOCAL,int t: int)<SUB>5</SUB>>", "47": "<(IDENTIFIER,t,int t = nextInt())<SUB>5</SUB>>", "49": "<(IDENTIFIER,sc,nextInt())<SUB>5</SUB>>", "51": "<(&lt;operator&gt;.greaterThan,t-- &gt; 0)<SUB>6</SUB>>", "53": "<(IDENTIFIER,t,t--)<SUB>6</SUB>>", "55": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>6</SUB>>", "57": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>7</SUB>>", "59": "<(nextInt,nextInt())<SUB>7</SUB>>", "61": "<(CONTROL_STRUCTURE,if ((n % 2 == 0 &amp;&amp; Math.pow(n / 2, 0.5) % 1.0 == 0) || (n % 4 == 0 &amp;&amp; Math.pow(n / 4, 0.5) % 1.0 == 0)),if ((n % 2 == 0 &amp;&amp; Math.pow(n / 2, 0.5) % 1.0 == 0) || (n % 4 == 0 &amp;&amp; Math.pow(n / 4, 0.5) % 1.0 == 0)))<SUB>8</SUB>>", "63": "<(&lt;operator&gt;.logicalAnd,n % 2 == 0 &amp;&amp; Math.pow(n / 2, 0.5) % 1.0 == 0)<SUB>8</SUB>>", "65": "<(&lt;operator&gt;.modulo,n % 2)<SUB>8</SUB>>", "67": "<(LITERAL,2,n % 2)<SUB>8</SUB>>", "69": "<(&lt;operator&gt;.equals,Math.pow(n / 2, 0.5) % 1.0 == 0)<SUB>8</SUB>>", "71": "<(pow,Math.pow(n / 2, 0.5))<SUB>8</SUB>>", "73": "<(&lt;operator&gt;.division,n / 2)<SUB>8</SUB>>", "75": "<(LITERAL,2,n / 2)<SUB>8</SUB>>", "77": "<(LITERAL,1.0,Math.pow(n / 2, 0.5) % 1.0)<SUB>8</SUB>>", "79": "<(&lt;operator&gt;.logicalAnd,n % 4 == 0 &amp;&amp; Math.pow(n / 4, 0.5) % 1.0 == 0)<SUB>8</SUB>>", "81": "<(&lt;operator&gt;.modulo,n % 4)<SUB>8</SUB>>", "83": "<(LITERAL,4,n % 4)<SUB>8</SUB>>", "85": "<(&lt;operator&gt;.equals,Math.pow(n / 4, 0.5) % 1.0 == 0)<SUB>8</SUB>>", "87": "<(pow,Math.pow(n / 4, 0.5))<SUB>8</SUB>>", "89": "<(&lt;operator&gt;.division,n / 4)<SUB>8</SUB>>", "91": "<(LITERAL,4,n / 4)<SUB>8</SUB>>", "93": "<(LITERAL,1.0,Math.pow(n / 4, 0.5) % 1.0)<SUB>8</SUB>>", "95": "<(write,write(&quot;YES\\n&quot;))<SUB>8</SUB>>", "97": "<(LITERAL,&quot;YES\\n&quot;,write(&quot;YES\\n&quot;))<SUB>8</SUB>>", "99": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>>", "101": "<(IDENTIFIER,output,write(&quot;NO\\n&quot;))<SUB>10</SUB>>", "103": "<(flush,flush())<SUB>13</SUB>>", "105": "<(MODIFIER,PUBLIC)>", "107": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}