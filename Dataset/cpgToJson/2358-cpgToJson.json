{"edges": [["21", "23"], ["21", "145"], ["21", "146"], ["21", "147"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "31"], ["23", "32"], ["23", "6"], ["23", "36"], ["23", "39"], ["23", "40"], ["23", "41"], ["23", "45"], ["23", "46"], ["23", "50"], ["23", "99"], ["23", "100"], ["23", "104"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["32", "33"], ["32", "34"], ["34", "35"], ["36", "37"], ["36", "38"], ["39", "5"], ["41", "42"], ["41", "43"], ["43", "44"], ["46", "47"], ["46", "48"], ["48", "49"], ["50", "51"], ["50", "52"], ["50", "55"], ["50", "58"], ["50", "60"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "57"], ["58", "59"], ["60", "61"], ["60", "62"], ["60", "66"], ["60", "67"], ["60", "78"], ["60", "82"], ["60", "87"], ["60", "94"], ["62", "63"], ["62", "64"], ["64", "65"], ["67", "68"], ["67", "69"], ["69", "70"], ["69", "77"], ["70", "71"], ["70", "73"], ["71", "72"], ["73", "74"], ["73", "75"], ["73", "76"], ["78", "79"], ["78", "80"], ["78", "81"], ["82", "83"], ["82", "86"], ["83", "84"], ["83", "85"], ["87", "88"], ["87", "91"], ["88", "89"], ["88", "90"], ["91", "92"], ["91", "93"], ["94", "95"], ["94", "96"], ["96", "97"], ["96", "98"], ["100", "101"], ["100", "102"], ["102", "103"], ["104", "105"], ["104", "106"], ["104", "109"], ["104", "112"], ["104", "114"], ["106", "107"], ["106", "108"], ["109", "110"], ["109", "111"], ["112", "113"], ["114", "115"], ["114", "133"], ["115", "116"], ["115", "117"], ["117", "118"], ["117", "132"], ["118", "119"], ["118", "131"], ["119", "120"], ["119", "122"], ["120", "121"], ["122", "123"], ["122", "130"], ["123", "124"], ["123", "128"], ["124", "125"], ["124", "127"], ["125", "126"], ["128", "129"], ["133", "134"], ["133", "137"], ["134", "135"], ["134", "136"], ["137", "138"], ["137", "143"], ["137", "144"], ["138", "139"], ["138", "142"], ["139", "140"], ["139", "141"], ["24", "30"], ["27", "34"], ["32", "38"], ["36", "39"], ["39", "43"], ["41", "48"], ["46", "52"], ["100", "106"], ["26", "24"], ["28", "27"], ["34", "32"], ["38", "36"], ["43", "41"], ["48", "46"], ["52", "55"], ["55", "64"], ["55", "102"], ["58", "55"], ["102", "100"], ["106", "109"], ["109", "147"], ["109", "120"], ["112", "109"], ["30", "28"], ["62", "71"], ["67", "78"], ["78", "83"], ["82", "88"], ["87", "96"], ["94", "58"], ["115", "136"], ["133", "112"], ["64", "62"], ["69", "67"], ["83", "82"], ["88", "91"], ["91", "87"], ["96", "94"], ["117", "115"], ["134", "139"], ["137", "133"], ["70", "69"], ["118", "117"], ["136", "134"], ["138", "137"], ["71", "73"], ["73", "70"], ["119", "118"], ["139", "138"], ["120", "125"], ["122", "119"], ["123", "122"], ["124", "128"], ["128", "123"], ["125", "124"], ["21", "26"], ["22", "147"], ["24", "147"], ["27", "147"], ["27", "147"], ["32", "147"], ["36", "147"], ["39", "147"], ["39", "147"], ["41", "147"], ["41", "147"], ["46", "147"], ["46", "147"], ["46", "147"], ["55", "147"], ["55", "147"], ["102", "147"], ["100", "147"], ["100", "147"], ["106", "147"], ["109", "147"], ["109", "147"], ["109", "147"], ["112", "147"], ["58", "147"], ["73", "147"], ["21", "22"], ["21", "24"], ["34", "32"], ["21", "36"], ["43", "41"], ["48", "46"], ["102", "100"], ["24", "27"], ["21", "27"], ["36", "39"], ["21", "39"], ["21", "52"], ["21", "106"], ["27", "34"], ["21", "34"], ["32", "43"], ["21", "43"], ["43", "48"], ["21", "48"], ["52", "55"], ["58", "55"], ["21", "55"], ["48", "55"], ["91", "58"], ["21", "58"], ["64", "62"], ["69", "67"], ["69", "67"], ["78", "82"], ["21", "82"], ["91", "87"], ["91", "87"], ["46", "94"], ["87", "94"], ["34", "102"], ["64", "102"], ["21", "102"], ["106", "109"], ["112", "109"], ["21", "109"], ["100", "109"], ["109", "112"], ["21", "112"], ["117", "115"], ["117", "115"], ["73", "78"], ["21", "78"], ["67", "78"], ["73", "78"], ["21", "94"], ["139", "115"], ["94", "115"], ["21", "115"], ["21", "133"], ["34", "64"], ["21", "64"], ["70", "69"], ["70", "69"], ["21", "69"], ["55", "91"], ["21", "91"], ["78", "91"], ["119", "117"], ["119", "117"], ["21", "117"], ["21", "137"], ["71", "70"], ["73", "70"], ["73", "70"], ["73", "70"], ["119", "118"], ["119", "118"], ["21", "118"], ["139", "138"], ["139", "138"], ["21", "138"], ["21", "71"], ["21", "73"], ["39", "73"], ["78", "73"], ["62", "73"], ["120", "119"], ["123", "119"], ["123", "119"], ["21", "119"], ["115", "139"], ["21", "139"], ["21", "120"], ["123", "122"], ["123", "122"], ["21", "122"], ["124", "123"], ["124", "123"], ["128", "123"], ["125", "124"], ["21", "124"], ["125", "128"], ["21", "128"], ["102", "125"], ["128", "125"], ["21", "125"], ["55", "94"], ["55", "73"], ["55", "96"], ["55", "64"], ["55", "69"], ["55", "67"], ["55", "87"], ["55", "91"], ["55", "82"], ["55", "58"], ["55", "83"], ["55", "71"], ["55", "88"], ["55", "70"], ["55", "55"], ["55", "78"], ["55", "62"], ["109", "115"], ["109", "120"], ["109", "136"], ["109", "122"], ["109", "128"], ["109", "119"], ["109", "123"], ["109", "112"], ["109", "134"], ["109", "138"], ["109", "137"], ["109", "118"], ["109", "117"], ["109", "139"], ["109", "124"], ["109", "125"], ["109", "109"], ["109", "133"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY in = new Scanner(System.in))<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,in,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "31": "<(LOCAL,int n: int)<SUB>3</SUB>>", "33": "<(IDENTIFIER,n,int n = nextInt())<SUB>3</SUB>>", "35": "<(IDENTIFIER,in,nextInt())<SUB>3</SUB>>", "36": "<(&lt;operator&gt;.assignment,ANY temp = new ArrayList&lt;&gt;())<SUB>4</SUB>>", "38": "<(&lt;operator&gt;.alloc,new ArrayList&lt;&gt;())<SUB>4</SUB>>", "5": "<(IDENTIFIER,temp,new ArrayList&lt;&gt;())<SUB>4</SUB>>", "41": "<(&lt;operator&gt;.assignment,int[] ar = new int[n])<SUB>5</SUB>>", "43": "<(&lt;operator&gt;.alloc,new int[n])>", "45": "<(LOCAL,int[] memo: int[])<SUB>6</SUB>>", "47": "<(IDENTIFIER,memo,int[] memo = new int[n])<SUB>6</SUB>>", "49": "<(IDENTIFIER,n,new int[n])<SUB>6</SUB>>", "51": "<(LOCAL,int i: int)<SUB>7</SUB>>", "53": "<(IDENTIFIER,i,int i = 0)<SUB>7</SUB>>", "55": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>7</SUB>>", "57": "<(IDENTIFIER,n,i &lt; n)<SUB>7</SUB>>", "59": "<(IDENTIFIER,i,i++)<SUB>7</SUB>>", "61": "<(LOCAL,int t: int)<SUB>8</SUB>>", "63": "<(IDENTIFIER,t,int t = nextInt())<SUB>8</SUB>>", "65": "<(IDENTIFIER,in,nextInt())<SUB>8</SUB>>", "67": "<(&lt;operator&gt;.assignment,int index = -1 * Collections.binarySearch(temp, t) - 1)<SUB>9</SUB>>", "69": "<(&lt;operator&gt;.subtraction,-1 * Collections.binarySearch(temp, t) - 1)<SUB>9</SUB>>", "71": "<(&lt;operator&gt;.minus,-1)<SUB>9</SUB>>", "73": "<(binarySearch,binarySearch(temp, t))<SUB>9</SUB>>", "75": "<(IDENTIFIER,temp,binarySearch(temp, t))<SUB>9</SUB>>", "77": "<(LITERAL,1,-1 * Collections.binarySearch(temp, t) - 1)<SUB>9</SUB>>", "79": "<(IDENTIFIER,temp,add(index, t))<SUB>10</SUB>>", "81": "<(IDENTIFIER,t,add(index, t))<SUB>10</SUB>>", "83": "<(&lt;operator&gt;.indexAccess,ar[i])<SUB>11</SUB>>", "85": "<(IDENTIFIER,i,ar[i] = t)<SUB>11</SUB>>", "87": "<(&lt;operator&gt;.assignment,memo[i] = i - index)<SUB>12</SUB>>", "89": "<(IDENTIFIER,memo,memo[i] = i - index)<SUB>12</SUB>>", "91": "<(&lt;operator&gt;.subtraction,i - index)<SUB>12</SUB>>", "93": "<(IDENTIFIER,index,i - index)<SUB>12</SUB>>", "95": "<(IDENTIFIER,total,total += memo[i])<SUB>13</SUB>>", "97": "<(IDENTIFIER,memo,total += memo[i])<SUB>13</SUB>>", "99": "<(LOCAL,int m: int)<SUB>15</SUB>>", "101": "<(IDENTIFIER,m,int m = nextInt())<SUB>15</SUB>>", "103": "<(IDENTIFIER,in,nextInt())<SUB>15</SUB>>", "105": "<(LOCAL,int i: int)<SUB>16</SUB>>", "107": "<(IDENTIFIER,i,int i = 0)<SUB>16</SUB>>", "109": "<(&lt;operator&gt;.lessThan,i &lt; m)<SUB>16</SUB>>", "111": "<(IDENTIFIER,m,i &lt; m)<SUB>16</SUB>>", "113": "<(IDENTIFIER,i,i++)<SUB>16</SUB>>", "115": "<(&lt;operator&gt;.assignmentPlus,total += (-1 * (in.nextInt() - 1 - in.nextInt() + 1) + 1) / 2)<SUB>19</SUB>>", "117": "<(&lt;operator&gt;.division,(-1 * (in.nextInt() - 1 - in.nextInt() + 1) + 1) / 2)<SUB>19</SUB>>", "119": "<(&lt;operator&gt;.multiplication,-1 * (in.nextInt() - 1 - in.nextInt() + 1))<SUB>19</SUB>>", "121": "<(LITERAL,1,-1)<SUB>19</SUB>>", "123": "<(&lt;operator&gt;.subtraction,in.nextInt() - 1 - in.nextInt())<SUB>19</SUB>>", "125": "<(nextInt,nextInt())<SUB>19</SUB>>", "127": "<(LITERAL,1,in.nextInt() - 1)<SUB>19</SUB>>", "129": "<(IDENTIFIER,in,nextInt())<SUB>19</SUB>>", "131": "<(LITERAL,1,-1 * (in.nextInt() - 1 - in.nextInt() + 1) + 1)<SUB>19</SUB>>", "133": "<(println,System.out.println(total % 2 == 0 ? &quot;even&quot; : &quot;odd&quot;))<SUB>20</SUB>>", "135": "<(IDENTIFIER,System,System.out.println(total % 2 == 0 ? &quot;even&quot; : &quot;odd&quot;))<SUB>20</SUB>>", "137": "<(&lt;operator&gt;.conditional,total % 2 == 0 ? &quot;even&quot; : &quot;odd&quot;)<SUB>20</SUB>>", "139": "<(&lt;operator&gt;.modulo,total % 2)<SUB>20</SUB>>", "141": "<(LITERAL,2,total % 2)<SUB>20</SUB>>", "143": "<(LITERAL,&quot;even&quot;,total % 2 == 0 ? &quot;even&quot; : &quot;odd&quot;)<SUB>20</SUB>>", "145": "<(MODIFIER,PUBLIC)>", "147": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}