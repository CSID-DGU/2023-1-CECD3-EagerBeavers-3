{"edges": [["19", "20"], ["19", "21"], ["19", "134"], ["19", "135"], ["19", "136"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "56"], ["21", "106"], ["21", "107"], ["21", "110"], ["21", "129"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["39", "40"], ["39", "41"], ["39", "44"], ["39", "47"], ["39", "49"], ["41", "42"], ["41", "43"], ["44", "45"], ["44", "46"], ["47", "48"], ["49", "50"], ["50", "51"], ["50", "54"], ["51", "52"], ["51", "53"], ["54", "55"], ["56", "57"], ["56", "58"], ["56", "61"], ["56", "64"], ["56", "66"], ["58", "59"], ["58", "60"], ["61", "62"], ["61", "63"], ["64", "65"], ["66", "67"], ["67", "68"], ["67", "69"], ["67", "72"], ["67", "75"], ["67", "77"], ["69", "70"], ["69", "71"], ["72", "73"], ["72", "74"], ["75", "76"], ["77", "78"], ["78", "79"], ["78", "82"], ["79", "80"], ["79", "81"], ["82", "83"], ["82", "100"], ["83", "84"], ["83", "91"], ["84", "85"], ["84", "88"], ["85", "86"], ["85", "87"], ["88", "89"], ["88", "90"], ["91", "92"], ["91", "99"], ["92", "93"], ["92", "96"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["100", "101"], ["101", "102"], ["101", "105"], ["102", "103"], ["102", "104"], ["107", "108"], ["107", "109"], ["110", "111"], ["110", "112"], ["110", "115"], ["110", "118"], ["110", "120"], ["112", "113"], ["112", "114"], ["115", "116"], ["115", "117"], ["118", "119"], ["120", "121"], ["121", "122"], ["121", "127"], ["122", "123"], ["122", "126"], ["123", "124"], ["123", "125"], ["127", "128"], ["129", "130"], ["129", "133"], ["130", "131"], ["130", "132"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "41"], ["107", "112"], ["129", "136"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["41", "44"], ["44", "51"], ["44", "58"], ["47", "44"], ["58", "61"], ["61", "69"], ["61", "107"], ["64", "61"], ["112", "115"], ["115", "123"], ["115", "132"], ["118", "115"], ["130", "129"], ["28", "26"], ["50", "47"], ["132", "130"], ["51", "54"], ["54", "50"], ["69", "72"], ["72", "79"], ["72", "64"], ["75", "72"], ["122", "127"], ["122", "118"], ["127", "118"], ["123", "122"], ["79", "85"], ["79", "75"], ["83", "102"], ["83", "75"], ["84", "83"], ["84", "93"], ["91", "83"], ["101", "75"], ["85", "88"], ["88", "84"], ["92", "91"], ["102", "101"], ["93", "96"], ["96", "92"], ["19", "24"], ["20", "136"], ["22", "136"], ["25", "136"], ["25", "136"], ["32", "136"], ["30", "136"], ["30", "136"], ["35", "136"], ["35", "136"], ["35", "136"], ["107", "136"], ["112", "136"], ["115", "136"], ["115", "136"], ["115", "136"], ["129", "136"], ["129", "136"], ["129", "136"], ["122", "136"], ["122", "136"], ["122", "136"], ["127", "136"], ["118", "136"], ["69", "136"], ["72", "136"], ["72", "136"], ["64", "136"], ["79", "136"], ["84", "136"], ["84", "136"], ["83", "136"], ["92", "136"], ["92", "136"], ["91", "136"], ["83", "136"], ["83", "136"], ["101", "136"], ["101", "136"], ["101", "136"], ["75", "136"], ["50", "136"], ["54", "136"], ["50", "136"], ["50", "136"], ["47", "136"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["19", "107"], ["22", "25"], ["19", "25"], ["19", "41"], ["19", "58"], ["19", "112"], ["107", "129"], ["127", "129"], ["19", "129"], ["25", "32"], ["19", "32"], ["30", "37"], ["19", "37"], ["41", "44"], ["47", "44"], ["19", "44"], ["37", "44"], ["44", "47"], ["19", "47"], ["54", "50"], ["58", "61"], ["64", "61"], ["19", "61"], ["44", "61"], ["72", "61"], ["61", "64"], ["79", "64"], ["19", "64"], ["112", "115"], ["118", "115"], ["19", "115"], ["61", "115"], ["115", "118"], ["19", "118"], ["19", "69"], ["32", "54"], ["19", "54"], ["69", "72"], ["75", "72"], ["19", "72"], ["61", "72"], ["79", "75"], ["19", "75"], ["35", "122"], ["84", "122"], ["92", "122"], ["101", "122"], ["50", "122"], ["19", "122"], ["107", "127"], ["19", "127"], ["61", "79"], ["19", "79"], ["72", "79"], ["84", "83"], ["84", "83"], ["91", "83"], ["91", "83"], ["19", "101"], ["35", "84"], ["92", "84"], ["101", "84"], ["50", "84"], ["92", "84"], ["92", "91"], ["92", "91"], ["19", "91"], ["35", "92"], ["84", "92"], ["84", "92"], ["44", "47"], ["44", "51"], ["44", "50"], ["44", "44"], ["44", "54"], ["61", "64"], ["61", "72"], ["61", "69"], ["61", "61"], ["115", "115"], ["115", "122"], ["115", "123"], ["115", "118"], ["72", "75"], ["72", "72"], ["72", "79"], ["122", "127"], ["79", "84"], ["79", "85"], ["79", "83"], ["79", "88"], ["83", "102"], ["83", "101"], ["84", "96"], ["84", "92"], ["84", "91"], ["84", "93"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,int n: int)<SUB>3</SUB>>", "31": "<(IDENTIFIER,n,int n = nextInt())<SUB>3</SUB>>", "33": "<(IDENTIFIER,sc,nextInt())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,int[] tab = new int[n])<SUB>4</SUB>>", "37": "<(&lt;operator&gt;.alloc,new int[n])>", "39": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>5</SUB>>", "43": "<(LITERAL,0,int i = 0)<SUB>5</SUB>>", "45": "<(IDENTIFIER,i,i &lt; n)<SUB>5</SUB>>", "47": "<(&lt;operator&gt;.postIncrement,i++)<SUB>5</SUB>>", "49": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>5</SUB>>", "51": "<(&lt;operator&gt;.indexAccess,tab[i])<SUB>6</SUB>>", "53": "<(IDENTIFIER,i,tab[i] = nextInt())<SUB>6</SUB>>", "55": "<(IDENTIFIER,sc,nextInt())<SUB>6</SUB>>", "57": "<(LOCAL,int i: int)<SUB>8</SUB>>", "59": "<(IDENTIFIER,i,int i = 0)<SUB>8</SUB>>", "61": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>8</SUB>>", "63": "<(IDENTIFIER,n,i &lt; n)<SUB>8</SUB>>", "65": "<(IDENTIFIER,i,i++)<SUB>8</SUB>>", "67": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>9</SUB>>", "69": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>9</SUB>>", "71": "<(LITERAL,0,int j = 0)<SUB>9</SUB>>", "73": "<(IDENTIFIER,j,j &lt; n)<SUB>9</SUB>>", "75": "<(&lt;operator&gt;.postIncrement,j++)<SUB>9</SUB>>", "77": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>>", "79": "<(&lt;operator&gt;.notEquals,i != j)<SUB>10</SUB>>", "81": "<(IDENTIFIER,j,i != j)<SUB>10</SUB>>", "83": "<(&lt;operator&gt;.logicalAnd,tab[i] &gt;= tab[j] &amp;&amp; tab[i] % tab[j] == 0)<SUB>11</SUB>>", "85": "<(&lt;operator&gt;.indexAccess,tab[i])<SUB>11</SUB>>", "87": "<(IDENTIFIER,i,tab[i] &gt;= tab[j])<SUB>11</SUB>>", "89": "<(IDENTIFIER,tab,tab[i] &gt;= tab[j])<SUB>11</SUB>>", "91": "<(&lt;operator&gt;.equals,tab[i] % tab[j] == 0)<SUB>11</SUB>>", "93": "<(&lt;operator&gt;.indexAccess,tab[i])<SUB>11</SUB>>", "95": "<(IDENTIFIER,i,tab[i] % tab[j])<SUB>11</SUB>>", "97": "<(IDENTIFIER,tab,tab[i] % tab[j])<SUB>11</SUB>>", "99": "<(LITERAL,0,tab[i] % tab[j] == 0)<SUB>11</SUB>>", "101": "<(&lt;operator&gt;.assignment,tab[i] = max)<SUB>12</SUB>>", "103": "<(IDENTIFIER,tab,tab[i] = max)<SUB>12</SUB>>", "105": "<(IDENTIFIER,max,tab[i] = max)<SUB>12</SUB>>", "107": "<(&lt;operator&gt;.assignment,int res = 0)<SUB>16</SUB>>", "109": "<(LITERAL,0,int res = 0)<SUB>16</SUB>>", "111": "<(LOCAL,int i: int)<SUB>17</SUB>>", "113": "<(IDENTIFIER,i,int i = 0)<SUB>17</SUB>>", "115": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>17</SUB>>", "117": "<(IDENTIFIER,n,i &lt; n)<SUB>17</SUB>>", "119": "<(IDENTIFIER,i,i++)<SUB>17</SUB>>", "121": "<(CONTROL_STRUCTURE,if (tab[i] != max),if (tab[i] != max))<SUB>18</SUB>>", "123": "<(&lt;operator&gt;.indexAccess,tab[i])<SUB>18</SUB>>", "125": "<(IDENTIFIER,i,tab[i] != max)<SUB>18</SUB>>", "127": "<(&lt;operator&gt;.postIncrement,res++)<SUB>18</SUB>>", "129": "<(println,System.out.println(res))<SUB>20</SUB>>", "131": "<(IDENTIFIER,System,System.out.println(res))<SUB>20</SUB>>", "133": "<(IDENTIFIER,res,System.out.println(res))<SUB>20</SUB>>", "135": "<(MODIFIER,STATIC)>"}}