{"edges": [["19", "20"], ["19", "21"], ["19", "230"], ["19", "231"], ["19", "232"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["29", "30"], ["29", "32"], ["30", "31"], ["32", "33"], ["32", "34"], ["32", "38"], ["32", "39"], ["32", "43"], ["32", "44"], ["32", "49"], ["32", "50"], ["32", "57"], ["32", "95"], ["32", "115"], ["32", "116"], ["32", "119"], ["32", "223"], ["34", "35"], ["34", "36"], ["36", "37"], ["39", "40"], ["39", "41"], ["41", "42"], ["44", "45"], ["44", "46"], ["46", "47"], ["46", "48"], ["50", "51"], ["50", "52"], ["52", "53"], ["52", "56"], ["53", "54"], ["53", "55"], ["57", "58"], ["57", "59"], ["57", "62"], ["57", "65"], ["57", "67"], ["59", "60"], ["59", "61"], ["62", "63"], ["62", "64"], ["65", "66"], ["67", "68"], ["67", "69"], ["67", "73"], ["67", "74"], ["67", "78"], ["67", "80"], ["67", "82"], ["69", "70"], ["69", "71"], ["71", "72"], ["74", "75"], ["74", "76"], ["76", "77"], ["78", "79"], ["80", "81"], ["82", "83"], ["82", "88"], ["83", "84"], ["83", "87"], ["84", "85"], ["84", "86"], ["88", "89"], ["88", "94"], ["89", "90"], ["89", "93"], ["90", "91"], ["90", "92"], ["95", "96"], ["95", "97"], ["95", "100"], ["95", "103"], ["95", "105"], ["97", "98"], ["97", "99"], ["100", "101"], ["100", "102"], ["103", "104"], ["105", "106"], ["106", "107"], ["106", "114"], ["107", "108"], ["107", "113"], ["108", "109"], ["108", "110"], ["110", "111"], ["110", "112"], ["116", "117"], ["116", "118"], ["119", "120"], ["119", "121"], ["119", "124"], ["119", "129"], ["119", "131"], ["121", "122"], ["121", "123"], ["124", "125"], ["124", "126"], ["126", "127"], ["126", "128"], ["129", "130"], ["131", "132"], ["131", "133"], ["131", "138"], ["133", "134"], ["133", "135"], ["135", "136"], ["135", "137"], ["138", "139"], ["138", "140"], ["138", "143"], ["138", "146"], ["138", "148"], ["140", "141"], ["140", "142"], ["143", "144"], ["143", "145"], ["146", "147"], ["148", "149"], ["148", "159"], ["149", "150"], ["149", "157"], ["150", "151"], ["150", "156"], ["151", "152"], ["151", "155"], ["152", "153"], ["152", "154"], ["157", "158"], ["159", "160"], ["159", "161"], ["159", "164"], ["159", "167"], ["159", "169"], ["161", "162"], ["161", "163"], ["164", "165"], ["164", "166"], ["167", "168"], ["169", "170"], ["169", "183"], ["169", "199"], ["170", "171"], ["170", "181"], ["171", "172"], ["171", "175"], ["172", "173"], ["172", "174"], ["175", "176"], ["176", "177"], ["176", "180"], ["177", "178"], ["177", "179"], ["181", "182"], ["183", "184"], ["183", "191"], ["184", "185"], ["184", "188"], ["185", "186"], ["185", "187"], ["188", "189"], ["188", "190"], ["191", "192"], ["192", "193"], ["192", "194"], ["194", "195"], ["194", "198"], ["195", "196"], ["195", "197"], ["199", "200"], ["199", "207"], ["200", "201"], ["200", "206"], ["201", "202"], ["201", "203"], ["203", "204"], ["203", "205"], ["207", "208"], ["208", "209"], ["208", "218"], ["209", "210"], ["209", "217"], ["210", "211"], ["210", "212"], ["212", "213"], ["212", "214"], ["214", "215"], ["214", "216"], ["218", "219"], ["218", "222"], ["219", "220"], ["219", "221"], ["223", "224"], ["223", "227"], ["224", "225"], ["224", "226"], ["227", "228"], ["227", "229"], ["22", "28"], ["25", "30"], ["24", "22"], ["26", "25"], ["30", "232"], ["30", "36"], ["28", "26"], ["34", "41"], ["39", "46"], ["44", "53"], ["50", "59"], ["116", "121"], ["223", "30"], ["36", "34"], ["41", "39"], ["46", "44"], ["52", "50"], ["59", "62"], ["62", "71"], ["62", "97"], ["65", "62"], ["97", "100"], ["100", "110"], ["100", "116"], ["103", "100"], ["121", "126"], ["124", "135"], ["124", "226"], ["129", "126"], ["224", "227"], ["227", "223"], ["53", "52"], ["69", "76"], ["74", "78"], ["78", "80"], ["80", "84"], ["82", "65"], ["106", "103"], ["126", "124"], ["133", "140"], ["226", "224"], ["71", "69"], ["76", "74"], ["83", "90"], ["88", "82"], ["107", "106"], ["135", "133"], ["140", "143"], ["143", "152"], ["143", "129"], ["146", "143"], ["84", "83"], ["89", "88"], ["108", "107"], ["90", "89"], ["110", "108"], ["150", "146"], ["150", "161"], ["161", "164"], ["164", "172"], ["164", "146"], ["167", "164"], ["151", "150"], ["152", "151"], ["171", "167"], ["171", "185"], ["184", "195"], ["184", "203"], ["200", "214"], ["200", "167"], ["172", "171"], ["172", "177"], ["175", "171"], ["185", "184"], ["185", "188"], ["188", "184"], ["192", "203"], ["201", "200"], ["208", "167"], ["176", "175"], ["194", "192"], ["203", "201"], ["209", "219"], ["218", "208"], ["177", "176"], ["195", "194"], ["210", "209"], ["219", "218"], ["212", "210"], ["214", "212"], ["19", "24"], ["20", "232"], ["22", "232"], ["25", "232"], ["25", "232"], ["30", "232"], ["30", "232"], ["223", "232"], ["223", "232"], ["223", "232"], ["19", "20"], ["19", "22"], ["22", "25"], ["19", "25"], ["25", "30"], ["41", "30"], ["76", "30"], ["19", "30"], ["36", "34"], ["41", "39"], ["46", "44"], ["52", "50"], ["52", "50"], ["19", "116"], ["19", "59"], ["19", "97"], ["19", "121"], ["227", "223"], ["227", "223"], ["30", "36"], ["19", "36"], ["36", "41"], ["19", "41"], ["34", "46"], ["19", "46"], ["53", "52"], ["53", "52"], ["19", "52"], ["59", "62"], ["65", "62"], ["19", "62"], ["39", "62"], ["62", "65"], ["19", "65"], ["71", "69"], ["76", "74"], ["88", "82"], ["19", "82"], ["97", "100"], ["103", "100"], ["19", "100"], ["52", "100"], ["110", "103"], ["19", "103"], ["19", "106"], ["121", "124"], ["129", "124"], ["19", "124"], ["126", "124"], ["126", "124"], ["135", "129"], ["201", "129"], ["212", "129"], ["19", "129"], ["135", "133"], ["135", "133"], ["116", "227"], ["192", "227"], ["19", "227"], ["19", "53"], ["46", "53"], ["69", "78"], ["19", "78"], ["74", "80"], ["19", "80"], ["19", "126"], ["100", "126"], ["143", "126"], ["133", "140"], ["19", "140"], ["41", "71"], ["76", "71"], ["19", "71"], ["71", "76"], ["19", "76"], ["19", "88"], ["188", "135"], ["19", "135"], ["124", "135"], ["140", "143"], ["146", "143"], ["19", "143"], ["126", "143"], ["164", "143"], ["143", "146"], ["172", "146"], ["19", "146"], ["185", "161"], ["19", "161"], ["133", "161"], ["19", "110"], ["100", "110"], ["19", "150"], ["161", "164"], ["167", "164"], ["19", "164"], ["143", "164"], ["172", "167"], ["203", "167"], ["214", "167"], ["19", "167"], ["172", "171"], ["172", "171"], ["175", "171"], ["185", "184"], ["185", "184"], ["188", "184"], ["188", "184"], ["150", "192"], ["201", "200"], ["201", "200"], ["19", "200"], ["150", "208"], ["143", "172"], ["19", "172"], ["164", "172"], ["172", "185"], ["19", "185"], ["133", "185"], ["135", "188"], ["19", "188"], ["135", "188"], ["201", "188"], ["212", "188"], ["116", "192"], ["19", "192"], ["135", "201"], ["188", "201"], ["212", "201"], ["19", "201"], ["203", "201"], ["203", "201"], ["19", "203"], ["185", "203"], ["201", "212"], ["19", "212"], ["214", "212"], ["214", "212"], ["19", "214"], ["203", "214"], ["30", "30"], ["30", "34"], ["30", "52"], ["30", "226"], ["30", "121"], ["30", "50"], ["30", "59"], ["30", "97"], ["30", "44"], ["30", "223"], ["30", "36"], ["30", "100"], ["30", "224"], ["30", "116"], ["30", "46"], ["30", "126"], ["30", "53"], ["30", "41"], ["30", "227"], ["30", "124"], ["30", "62"], ["30", "39"], ["62", "84"], ["62", "69"], ["62", "74"], ["62", "76"], ["62", "90"], ["62", "80"], ["62", "88"], ["62", "89"], ["62", "65"], ["62", "82"], ["62", "83"], ["62", "71"], ["62", "78"], ["62", "62"], ["100", "107"], ["100", "103"], ["100", "100"], ["100", "108"], ["100", "106"], ["100", "110"], ["124", "129"], ["124", "140"], ["124", "143"], ["124", "126"], ["124", "135"], ["124", "124"], ["124", "133"], ["143", "146"], ["143", "150"], ["143", "151"], ["143", "152"], ["143", "143"], ["150", "161"], ["150", "164"], ["164", "167"], ["164", "164"], ["164", "171"], ["164", "172"], ["171", "185"], ["171", "184"], ["171", "201"], ["171", "200"], ["171", "203"], ["184", "192"], ["184", "195"], ["184", "194"], ["200", "214"], ["200", "209"], ["200", "208"], ["200", "212"], ["200", "210"], ["200", "218"], ["200", "219"], ["172", "176"], ["172", "177"], ["172", "175"], ["185", "188"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(CONTROL_STRUCTURE,while (sc.hasNextInt()),while (sc.hasNextInt()))<SUB>3</SUB>>", "31": "<(IDENTIFIER,sc,hasNextInt())<SUB>3</SUB>>", "33": "<(LOCAL,int n: int)<SUB>4</SUB>>", "35": "<(IDENTIFIER,n,int n = nextInt())<SUB>4</SUB>>", "37": "<(IDENTIFIER,sc,nextInt())<SUB>4</SUB>>", "39": "<(&lt;operator&gt;.assignment,long m = nextInt())<SUB>5</SUB>>", "41": "<(nextInt,nextInt())<SUB>5</SUB>>", "43": "<(LOCAL,boolean[][] edge: boolean[][])<SUB>6</SUB>>", "45": "<(IDENTIFIER,edge,boolean[][] edge = new boolean[n][n])<SUB>6</SUB>>", "47": "<(IDENTIFIER,n,new boolean[n][n])<SUB>6</SUB>>", "49": "<(LOCAL,long[][] dp: long[][])<SUB>7</SUB>>", "51": "<(IDENTIFIER,dp,long[][] dp = new long[1 &lt;&lt; n][n])<SUB>7</SUB>>", "53": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; n)<SUB>7</SUB>>", "55": "<(IDENTIFIER,n,1 &lt;&lt; n)<SUB>7</SUB>>", "57": "<(CONTROL_STRUCTURE,for (long i = 1; Some(i &lt;= m); ++i),for (long i = 1; Some(i &lt;= m); ++i))<SUB>8</SUB>>", "59": "<(&lt;operator&gt;.assignment,long i = 1)<SUB>8</SUB>>", "61": "<(LITERAL,1,long i = 1)<SUB>8</SUB>>", "63": "<(IDENTIFIER,i,i &lt;= m)<SUB>8</SUB>>", "65": "<(&lt;operator&gt;.preIncrement,++i)<SUB>8</SUB>>", "67": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>>", "69": "<(&lt;operator&gt;.assignment,int u = nextInt())<SUB>9</SUB>>", "71": "<(nextInt,nextInt())<SUB>9</SUB>>", "73": "<(LOCAL,int v: int)<SUB>10</SUB>>", "75": "<(IDENTIFIER,v,int v = nextInt())<SUB>10</SUB>>", "77": "<(IDENTIFIER,sc,nextInt())<SUB>10</SUB>>", "79": "<(IDENTIFIER,u,--u)<SUB>11</SUB>>", "81": "<(IDENTIFIER,v,--v)<SUB>12</SUB>>", "83": "<(&lt;operator&gt;.indexAccess,edge[u][v])<SUB>13</SUB>>", "85": "<(IDENTIFIER,edge,edge[u][v] = edge[v][u] = true)<SUB>13</SUB>>", "87": "<(IDENTIFIER,v,edge[u][v] = edge[v][u] = true)<SUB>13</SUB>>", "89": "<(&lt;operator&gt;.indexAccess,edge[v][u])<SUB>13</SUB>>", "91": "<(IDENTIFIER,edge,edge[v][u] = true)<SUB>13</SUB>>", "93": "<(IDENTIFIER,u,edge[v][u] = true)<SUB>13</SUB>>", "95": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); ++i),for (int i = 0; Some(i &lt; n); ++i))<SUB>15</SUB>>", "97": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>15</SUB>>", "99": "<(LITERAL,0,int i = 0)<SUB>15</SUB>>", "101": "<(IDENTIFIER,i,i &lt; n)<SUB>15</SUB>>", "103": "<(&lt;operator&gt;.preIncrement,++i)<SUB>15</SUB>>", "105": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>15</SUB>>", "107": "<(&lt;operator&gt;.indexAccess,dp[1 &lt;&lt; i][i])<SUB>16</SUB>>", "109": "<(IDENTIFIER,dp,dp[1 &lt;&lt; i][i] = 1)<SUB>16</SUB>>", "111": "<(LITERAL,1,1 &lt;&lt; i)<SUB>16</SUB>>", "113": "<(IDENTIFIER,i,dp[1 &lt;&lt; i][i] = 1)<SUB>16</SUB>>", "115": "<(LOCAL,long res: long)<SUB>18</SUB>>", "117": "<(IDENTIFIER,res,long res = 0)<SUB>18</SUB>>", "119": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt; (1 &lt;&lt; n)); ++i),for (int i = 1; Some(i &lt; (1 &lt;&lt; n)); ++i))<SUB>19</SUB>>", "121": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>19</SUB>>", "123": "<(LITERAL,1,int i = 1)<SUB>19</SUB>>", "125": "<(IDENTIFIER,i,i &lt; (1 &lt;&lt; n))<SUB>19</SUB>>", "127": "<(LITERAL,1,1 &lt;&lt; n)<SUB>19</SUB>>", "129": "<(&lt;operator&gt;.preIncrement,++i)<SUB>19</SUB>>", "131": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>19</SUB>>", "133": "<(&lt;operator&gt;.assignment,int first = cal(i))<SUB>20</SUB>>", "135": "<(cal,cal(i))<SUB>20</SUB>>", "137": "<(IDENTIFIER,i,cal(i))<SUB>20</SUB>>", "139": "<(LOCAL,int j: int)<SUB>21</SUB>>", "141": "<(IDENTIFIER,j,int j = first)<SUB>21</SUB>>", "143": "<(&lt;operator&gt;.lessThan,j &lt; n)<SUB>21</SUB>>", "145": "<(IDENTIFIER,n,j &lt; n)<SUB>21</SUB>>", "147": "<(IDENTIFIER,j,++j)<SUB>21</SUB>>", "149": "<(CONTROL_STRUCTURE,if (dp[i][j] == 0),if (dp[i][j] == 0))<SUB>22</SUB>>", "151": "<(&lt;operator&gt;.indexAccess,dp[i][j])<SUB>22</SUB>>", "153": "<(IDENTIFIER,dp,dp[i][j] == 0)<SUB>22</SUB>>", "155": "<(IDENTIFIER,j,dp[i][j] == 0)<SUB>22</SUB>>", "157": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>22</SUB>>", "159": "<(CONTROL_STRUCTURE,for (int k = first; Some(k &lt; n); ++k),for (int k = first; Some(k &lt; n); ++k))<SUB>25</SUB>>", "161": "<(&lt;operator&gt;.assignment,int k = first)<SUB>25</SUB>>", "163": "<(IDENTIFIER,first,int k = first)<SUB>25</SUB>>", "165": "<(IDENTIFIER,k,k &lt; n)<SUB>25</SUB>>", "167": "<(&lt;operator&gt;.preIncrement,++k)<SUB>25</SUB>>", "169": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>25</SUB>>", "171": "<(&lt;operator&gt;.logicalOr,j == k || !edge[j][k])<SUB>26</SUB>>", "173": "<(IDENTIFIER,j,j == k)<SUB>26</SUB>>", "175": "<(&lt;operator&gt;.logicalNot,!edge[j][k])<SUB>26</SUB>>", "177": "<(&lt;operator&gt;.indexAccess,edge[j])<SUB>26</SUB>>", "179": "<(IDENTIFIER,j,!edge[j][k])<SUB>26</SUB>>", "181": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>26</SUB>>", "183": "<(CONTROL_STRUCTURE,if (k == first &amp;&amp; judge(i)),if (k == first &amp;&amp; judge(i)))<SUB>29</SUB>>", "185": "<(&lt;operator&gt;.equals,k == first)<SUB>29</SUB>>", "187": "<(IDENTIFIER,first,k == first)<SUB>29</SUB>>", "189": "<(IDENTIFIER,this,judge(i))<SUB>29</SUB>>", "191": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>29</SUB>>", "193": "<(IDENTIFIER,res,res += dp[i][j])<SUB>30</SUB>>", "195": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>30</SUB>>", "197": "<(IDENTIFIER,i,res += dp[i][j])<SUB>30</SUB>>", "199": "<(CONTROL_STRUCTURE,if ((i &amp; (1 &lt;&lt; k)) == 0),if ((i &amp; (1 &lt;&lt; k)) == 0))<SUB>32</SUB>>", "201": "<(&lt;operator&gt;.and,i &amp; (1 &lt;&lt; k))<SUB>32</SUB>>", "203": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; k)<SUB>32</SUB>>", "205": "<(IDENTIFIER,k,1 &lt;&lt; k)<SUB>32</SUB>>", "207": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>32</SUB>>", "209": "<(&lt;operator&gt;.indexAccess,dp[i | (1 &lt;&lt; k)][k])<SUB>33</SUB>>", "211": "<(IDENTIFIER,dp,dp[i | (1 &lt;&lt; k)][k] += dp[i][j])<SUB>33</SUB>>", "213": "<(IDENTIFIER,i,i | (1 &lt;&lt; k))<SUB>33</SUB>>", "215": "<(LITERAL,1,1 &lt;&lt; k)<SUB>33</SUB>>", "217": "<(IDENTIFIER,k,dp[i | (1 &lt;&lt; k)][k] += dp[i][j])<SUB>33</SUB>>", "219": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>33</SUB>>", "221": "<(IDENTIFIER,i,dp[i | (1 &lt;&lt; k)][k] += dp[i][j])<SUB>33</SUB>>", "223": "<(println,System.out.println(res / 2))<SUB>38</SUB>>", "225": "<(IDENTIFIER,System,System.out.println(res / 2))<SUB>38</SUB>>", "227": "<(&lt;operator&gt;.division,res / 2)<SUB>38</SUB>>", "229": "<(LITERAL,2,res / 2)<SUB>38</SUB>>", "231": "<(MODIFIER,STATIC)>"}}