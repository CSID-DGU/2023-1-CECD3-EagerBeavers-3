{"edges": [["19", "20"], ["19", "21"], ["19", "80"], ["19", "81"], ["19", "82"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "31"], ["21", "35"], ["21", "39"], ["21", "50"], ["21", "51"], ["21", "58"], ["21", "59"], ["21", "65"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["31", "32"], ["31", "33"], ["33", "34"], ["35", "36"], ["35", "37"], ["37", "38"], ["39", "40"], ["39", "43"], ["40", "41"], ["40", "42"], ["43", "44"], ["43", "49"], ["44", "45"], ["44", "48"], ["45", "46"], ["45", "47"], ["51", "52"], ["51", "53"], ["53", "54"], ["53", "57"], ["54", "55"], ["54", "56"], ["59", "60"], ["59", "61"], ["61", "62"], ["61", "63"], ["61", "64"], ["65", "66"], ["65", "69"], ["66", "67"], ["66", "68"], ["69", "70"], ["69", "79"], ["70", "71"], ["70", "78"], ["71", "72"], ["71", "77"], ["72", "73"], ["72", "76"], ["73", "74"], ["73", "75"], ["22", "28"], ["25", "33"], ["31", "37"], ["35", "40"], ["51", "61"], ["59", "68"], ["65", "82"], ["24", "22"], ["26", "25"], ["33", "31"], ["37", "35"], ["40", "47"], ["40", "54"], ["53", "51"], ["61", "59"], ["66", "73"], ["69", "65"], ["28", "26"], ["44", "49"], ["49", "82"], ["54", "53"], ["68", "66"], ["70", "69"], ["45", "44"], ["71", "70"], ["47", "45"], ["72", "71"], ["73", "72"], ["19", "24"], ["49", "82"], ["20", "82"], ["22", "82"], ["25", "82"], ["25", "82"], ["31", "82"], ["35", "82"], ["37", "82"], ["35", "82"], ["35", "82"], ["40", "82"], ["40", "82"], ["44", "82"], ["44", "82"], ["61", "82"], ["19", "20"], ["19", "22"], ["33", "31"], ["37", "35"], ["53", "51"], ["53", "51"], ["61", "59"], ["61", "59"], ["61", "59"], ["22", "25"], ["19", "25"], ["69", "65"], ["69", "65"], ["25", "33"], ["19", "33"], ["33", "37"], ["19", "37"], ["31", "40"], ["19", "40"], ["19", "49"], ["54", "53"], ["54", "53"], ["19", "53"], ["19", "61"], ["35", "61"], ["71", "69"], ["71", "69"], ["19", "69"], ["19", "44"], ["19", "54"], ["40", "54"], ["71", "70"], ["71", "70"], ["19", "70"], ["72", "71"], ["72", "71"], ["73", "71"], ["19", "71"], ["73", "72"], ["73", "72"], ["59", "72"], ["19", "72"], ["51", "73"], ["19", "73"], ["40", "47"], ["40", "68"], ["40", "49"], ["40", "73"], ["40", "61"], ["40", "51"], ["40", "66"], ["40", "71"], ["40", "53"], ["40", "72"], ["40", "69"], ["40", "70"], ["40", "45"], ["40", "65"], ["40", "59"], ["40", "44"], ["40", "54"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY scan = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,scan,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,long n: long)<SUB>3</SUB>>", "31": "<(&lt;operator&gt;.assignment,long n = nextLong())<SUB>3</SUB>>", "33": "<(nextLong,nextLong())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,long k = nextLong())<SUB>3</SUB>>", "37": "<(nextLong,nextLong())<SUB>3</SUB>>", "39": "<(CONTROL_STRUCTURE,if (n == 0),if (n == 0))<SUB>4</SUB>>", "41": "<(IDENTIFIER,n,n == 0)<SUB>4</SUB>>", "43": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>4</SUB>>", "45": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>5</SUB>>", "47": "<(FIELD_IDENTIFIER,out,out)<SUB>5</SUB>>", "49": "<(RETURN,return;,return;)<SUB>6</SUB>>", "51": "<(&lt;operator&gt;.assignment,long x = 2 * n - 1)<SUB>8</SUB>>", "53": "<(&lt;operator&gt;.subtraction,2 * n - 1)<SUB>8</SUB>>", "55": "<(LITERAL,2,2 * n)<SUB>8</SUB>>", "57": "<(LITERAL,1,2 * n - 1)<SUB>8</SUB>>", "59": "<(&lt;operator&gt;.assignment,long e = exp(2, k))<SUB>9</SUB>>", "61": "<(exp,exp(2, k))<SUB>9</SUB>>", "63": "<(LITERAL,2,exp(2, k))<SUB>9</SUB>>", "65": "<(println,println((x % MOD * e % MOD + 1) % MOD))<SUB>10</SUB>>", "67": "<(IDENTIFIER,System,println((x % MOD * e % MOD + 1) % MOD))<SUB>10</SUB>>", "69": "<(&lt;operator&gt;.modulo,(x % MOD * e % MOD + 1) % MOD)<SUB>10</SUB>>", "71": "<(&lt;operator&gt;.modulo,x % MOD * e % MOD)<SUB>10</SUB>>", "73": "<(&lt;operator&gt;.modulo,x % MOD)<SUB>10</SUB>>", "75": "<(IDENTIFIER,MOD,x % MOD)<SUB>10</SUB>>", "77": "<(IDENTIFIER,MOD,x % MOD * e % MOD)<SUB>10</SUB>>", "79": "<(IDENTIFIER,MOD,(x % MOD * e % MOD + 1) % MOD)<SUB>10</SUB>>", "81": "<(MODIFIER,STATIC)>"}}