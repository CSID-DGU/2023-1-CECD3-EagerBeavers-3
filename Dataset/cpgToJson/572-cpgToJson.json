{"edges": [["21", "22"], ["21", "23"], ["21", "108"], ["21", "109"], ["21", "110"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "31"], ["23", "34"], ["23", "38"], ["23", "39"], ["23", "43"], ["23", "104"], ["23", "106"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["31", "32"], ["31", "33"], ["34", "5"], ["34", "35"], ["35", "36"], ["35", "37"], ["39", "40"], ["39", "41"], ["41", "42"], ["43", "44"], ["43", "45"], ["43", "48"], ["43", "51"], ["43", "53"], ["45", "46"], ["45", "47"], ["48", "49"], ["48", "50"], ["51", "52"], ["53", "54"], ["53", "55"], ["53", "59"], ["53", "60"], ["53", "69"], ["53", "70"], ["53", "79"], ["55", "56"], ["55", "57"], ["57", "58"], ["60", "61"], ["60", "62"], ["62", "63"], ["62", "64"], ["64", "65"], ["64", "66"], ["66", "67"], ["66", "68"], ["70", "71"], ["70", "72"], ["72", "73"], ["72", "74"], ["74", "75"], ["74", "76"], ["76", "77"], ["76", "78"], ["79", "80"], ["79", "95"], ["79", "99"], ["80", "81"], ["80", "88"], ["81", "82"], ["81", "87"], ["82", "83"], ["82", "86"], ["83", "84"], ["83", "85"], ["88", "89"], ["88", "94"], ["89", "90"], ["89", "93"], ["90", "91"], ["90", "92"], ["95", "96"], ["96", "97"], ["96", "98"], ["99", "100"], ["100", "101"], ["101", "102"], ["101", "103"], ["104", "105"], ["106", "107"], ["24", "30"], ["27", "33"], ["31", "37"], ["34", "41"], ["39", "45"], ["104", "106"], ["106", "110"], ["26", "24"], ["28", "27"], ["33", "31"], ["35", "34"], ["41", "39"], ["45", "48"], ["48", "57"], ["48", "104"], ["51", "48"], ["30", "28"], ["37", "35"], ["55", "63"], ["60", "73"], ["70", "83"], ["57", "55"], ["62", "60"], ["72", "70"], ["80", "96"], ["80", "101"], ["63", "66"], ["64", "62"], ["73", "76"], ["74", "72"], ["81", "80"], ["81", "90"], ["88", "80"], ["96", "51"], ["66", "64"], ["76", "74"], ["82", "81"], ["89", "88"], ["101", "51"], ["83", "82"], ["90", "89"], ["21", "26"], ["22", "110"], ["24", "110"], ["27", "110"], ["27", "110"], ["31", "110"], ["34", "110"], ["34", "110"], ["39", "110"], ["39", "110"], ["45", "110"], ["48", "110"], ["48", "110"], ["48", "110"], ["104", "110"], ["106", "110"], ["106", "110"], ["55", "110"], ["55", "110"], ["64", "110"], ["62", "110"], ["60", "110"], ["60", "110"], ["70", "110"], ["74", "110"], ["74", "110"], ["72", "110"], ["70", "110"], ["70", "110"], ["83", "110"], ["82", "110"], ["81", "110"], ["81", "110"], ["80", "110"], ["90", "110"], ["89", "110"], ["88", "110"], ["88", "110"], ["80", "110"], ["80", "110"], ["101", "110"], ["96", "110"], ["51", "110"], ["21", "22"], ["21", "24"], ["21", "31"], ["41", "39"], ["24", "27"], ["21", "27"], ["31", "34"], ["21", "34"], ["21", "45"], ["27", "104"], ["101", "104"], ["96", "104"], ["21", "104"], ["41", "106"], ["57", "106"], ["21", "106"], ["34", "41"], ["21", "41"], ["45", "48"], ["51", "48"], ["21", "48"], ["39", "48"], ["48", "51"], ["21", "51"], ["57", "55"], ["21", "60"], ["64", "60"], ["64", "60"], ["21", "70"], ["74", "70"], ["74", "70"], ["41", "57"], ["21", "57"], ["21", "62"], ["64", "62"], ["64", "62"], ["21", "72"], ["74", "72"], ["74", "72"], ["81", "80"], ["81", "80"], ["88", "80"], ["88", "80"], ["74", "64"], ["21", "64"], ["66", "64"], ["66", "64"], ["64", "74"], ["21", "74"], ["76", "74"], ["76", "74"], ["82", "81"], ["82", "81"], ["76", "81"], ["21", "81"], ["89", "88"], ["89", "88"], ["81", "88"], ["21", "88"], ["27", "96"], ["101", "96"], ["21", "96"], ["55", "66"], ["21", "66"], ["66", "76"], ["21", "76"], ["83", "82"], ["21", "82"], ["90", "89"], ["21", "89"], ["27", "101"], ["96", "101"], ["21", "101"], ["60", "83"], ["21", "83"], ["70", "90"], ["21", "90"], ["48", "48"], ["48", "60"], ["48", "73"], ["48", "64"], ["48", "51"], ["48", "57"], ["48", "66"], ["48", "81"], ["48", "72"], ["48", "74"], ["48", "76"], ["48", "82"], ["48", "80"], ["48", "83"], ["48", "70"], ["48", "63"], ["48", "55"], ["48", "62"], ["80", "96"], ["80", "101"], ["81", "89"], ["81", "90"], ["81", "88"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY out = new PrintWriter(System.out))<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new PrintWriter(System.out))<SUB>2</SUB>>", "3": "<(IDENTIFIER,out,new PrintWriter(System.out))<SUB>2</SUB>>", "29": "<(IDENTIFIER,System,new PrintWriter(System.out))<SUB>2</SUB>>", "6": "<(LOCAL,Scanner s: ANY)<SUB>3</SUB>>", "32": "<(IDENTIFIER,s,ANY s = new Scanner(System.in))<SUB>3</SUB>>", "34": "<(&lt;init&gt;,new Scanner(System.in))<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.fieldAccess,System.in)<SUB>3</SUB>>", "37": "<(FIELD_IDENTIFIER,in,in)<SUB>3</SUB>>", "39": "<(&lt;operator&gt;.assignment,int t = nextInt())<SUB>4</SUB>>", "41": "<(nextInt,nextInt())<SUB>4</SUB>>", "43": "<(CONTROL_STRUCTURE,for (int tt = 0; Some(tt &lt; t); tt++),for (int tt = 0; Some(tt &lt; t); tt++))<SUB>5</SUB>>", "45": "<(&lt;operator&gt;.assignment,int tt = 0)<SUB>5</SUB>>", "47": "<(LITERAL,0,int tt = 0)<SUB>5</SUB>>", "49": "<(IDENTIFIER,tt,tt &lt; t)<SUB>5</SUB>>", "51": "<(&lt;operator&gt;.postIncrement,tt++)<SUB>5</SUB>>", "53": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>5</SUB>>", "55": "<(&lt;operator&gt;.assignment,long n = nextInt())<SUB>6</SUB>>", "57": "<(nextInt,nextInt())<SUB>6</SUB>>", "59": "<(LOCAL,long x: long)<SUB>7</SUB>>", "61": "<(IDENTIFIER,x,long x = (long) Math.sqrt(n / 2))<SUB>7</SUB>>", "63": "<(TYPE_REF,long,long)<SUB>7</SUB>>", "65": "<(IDENTIFIER,Math,Math.sqrt(n / 2))<SUB>7</SUB>>", "67": "<(IDENTIFIER,n,n / 2)<SUB>7</SUB>>", "69": "<(LOCAL,long y: long)<SUB>8</SUB>>", "71": "<(IDENTIFIER,y,long y = (long) Math.sqrt(n / 4))<SUB>8</SUB>>", "73": "<(TYPE_REF,long,long)<SUB>8</SUB>>", "75": "<(IDENTIFIER,Math,Math.sqrt(n / 4))<SUB>8</SUB>>", "77": "<(IDENTIFIER,n,n / 4)<SUB>8</SUB>>", "79": "<(CONTROL_STRUCTURE,if (x * x * 2 == n || y * y * 4 == n),if (x * x * 2 == n || y * y * 4 == n))<SUB>9</SUB>>", "81": "<(&lt;operator&gt;.equals,x * x * 2 == n)<SUB>9</SUB>>", "83": "<(&lt;operator&gt;.multiplication,x * x)<SUB>9</SUB>>", "85": "<(IDENTIFIER,x,x * x)<SUB>9</SUB>>", "87": "<(IDENTIFIER,n,x * x * 2 == n)<SUB>9</SUB>>", "89": "<(&lt;operator&gt;.multiplication,y * y * 4)<SUB>9</SUB>>", "91": "<(IDENTIFIER,y,y * y)<SUB>9</SUB>>", "93": "<(LITERAL,4,y * y * 4)<SUB>9</SUB>>", "95": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>>", "97": "<(IDENTIFIER,out,println(&quot;YES&quot;))<SUB>10</SUB>>", "99": "<(CONTROL_STRUCTURE,else,else)<SUB>11</SUB>>", "101": "<(println,println(&quot;NO&quot;))<SUB>12</SUB>>", "103": "<(LITERAL,&quot;NO&quot;,println(&quot;NO&quot;))<SUB>12</SUB>>", "105": "<(IDENTIFIER,out,close())<SUB>15</SUB>>", "107": "<(IDENTIFIER,s,close())<SUB>16</SUB>>", "109": "<(MODIFIER,STATIC)>"}}