{"edges": [["19", "20"], ["19", "21"], ["19", "122"], ["19", "123"], ["19", "124"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "36"], ["21", "37"], ["21", "43"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "30"], ["26", "35"], ["27", "28"], ["27", "29"], ["30", "31"], ["30", "32"], ["32", "33"], ["32", "34"], ["37", "38"], ["37", "39"], ["39", "40"], ["39", "41"], ["41", "42"], ["43", "44"], ["43", "48"], ["44", "45"], ["44", "47"], ["45", "46"], ["48", "49"], ["48", "50"], ["48", "56"], ["48", "57"], ["48", "64"], ["48", "65"], ["48", "68"], ["48", "69"], ["48", "72"], ["48", "85"], ["48", "92"], ["48", "93"], ["48", "100"], ["48", "109"], ["50", "51"], ["50", "52"], ["52", "53"], ["52", "55"], ["53", "54"], ["57", "58"], ["57", "59"], ["59", "60"], ["59", "61"], ["61", "62"], ["61", "63"], ["65", "66"], ["65", "67"], ["69", "70"], ["69", "71"], ["72", "73"], ["72", "78"], ["73", "74"], ["73", "77"], ["74", "75"], ["74", "76"], ["78", "79"], ["78", "82"], ["79", "80"], ["79", "81"], ["82", "83"], ["82", "84"], ["85", "86"], ["85", "89"], ["86", "87"], ["86", "88"], ["89", "90"], ["89", "91"], ["93", "94"], ["93", "95"], ["95", "96"], ["95", "97"], ["97", "98"], ["97", "99"], ["100", "101"], ["100", "106"], ["101", "102"], ["101", "105"], ["102", "103"], ["102", "104"], ["106", "107"], ["106", "108"], ["109", "110"], ["109", "111"], ["109", "116"], ["111", "112"], ["111", "115"], ["112", "113"], ["112", "114"], ["116", "117"], ["117", "118"], ["117", "121"], ["118", "119"], ["118", "120"], ["22", "29"], ["25", "41"], ["37", "45"], ["24", "22"], ["39", "37"], ["44", "124"], ["44", "53"], ["27", "34"], ["30", "25"], ["41", "39"], ["45", "44"], ["50", "61"], ["57", "65"], ["65", "69"], ["69", "74"], ["93", "102"], ["29", "27"], ["32", "30"], ["52", "50"], ["59", "57"], ["73", "79"], ["73", "86"], ["86", "89"], ["86", "96"], ["89", "96"], ["95", "93"], ["101", "110"], ["101", "106"], ["106", "110"], ["110", "114"], ["110", "120"], ["111", "45"], ["34", "32"], ["53", "52"], ["61", "59"], ["74", "73"], ["79", "82"], ["82", "74"], ["96", "97"], ["97", "95"], ["102", "101"], ["112", "111"], ["117", "45"], ["114", "112"], ["118", "117"], ["120", "118"], ["19", "24"], ["20", "124"], ["22", "124"], ["27", "124"], ["30", "124"], ["30", "124"], ["30", "124"], ["25", "124"], ["39", "124"], ["41", "124"], ["39", "124"], ["37", "124"], ["37", "124"], ["45", "124"], ["44", "124"], ["44", "124"], ["117", "124"], ["111", "124"], ["97", "124"], ["19", "20"], ["19", "22"], ["39", "37"], ["39", "37"], ["22", "25"], ["19", "25"], ["27", "25"], ["30", "25"], ["19", "27"], ["19", "35"], ["19", "39"], ["41", "39"], ["45", "44"], ["19", "44"], ["52", "50"], ["52", "50"], ["59", "57"], ["59", "57"], ["19", "65"], ["19", "69"], ["19", "93"], ["97", "93"], ["97", "93"], ["27", "30"], ["19", "30"], ["25", "41"], ["19", "41"], ["37", "45"], ["19", "45"], ["19", "89"], ["19", "106"], ["19", "110"], ["53", "52"], ["19", "52"], ["39", "59"], ["19", "59"], ["50", "59"], ["74", "73"], ["74", "73"], ["19", "73"], ["19", "79"], ["19", "82"], ["65", "86"], ["79", "86"], ["19", "86"], ["19", "95"], ["97", "95"], ["97", "95"], ["102", "101"], ["97", "101"], ["19", "101"], ["117", "111"], ["19", "111"], ["41", "53"], ["19", "53"], ["57", "74"], ["82", "74"], ["19", "74"], ["65", "79"], ["74", "82"], ["19", "97"], ["74", "97"], ["93", "102"], ["19", "102"], ["111", "117"], ["19", "117"], ["44", "73"], ["44", "96"], ["44", "57"], ["44", "52"], ["44", "102"], ["44", "69"], ["44", "74"], ["44", "95"], ["44", "45"], ["44", "65"], ["44", "50"], ["44", "59"], ["44", "97"], ["44", "44"], ["44", "93"], ["44", "101"], ["44", "61"], ["44", "53"], ["44", "110"], ["44", "86"], ["73", "73"], ["73", "74"], ["73", "82"], ["73", "79"], ["86", "89"], ["101", "106"], ["110", "120"], ["110", "114"], ["110", "112"], ["110", "118"], ["110", "117"], ["110", "111"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY br = new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "24": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "3": "<(IDENTIFIER,br,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "27": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "29": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>3</SUB>>", "31": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "33": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>3</SUB>>", "35": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "37": "<(&lt;operator&gt;.assignment,int t = parseInt(br.readLine()))<SUB>5</SUB>>", "39": "<(parseInt,parseInt(br.readLine()))<SUB>5</SUB>>", "41": "<(readLine,readLine())<SUB>5</SUB>>", "43": "<(CONTROL_STRUCTURE,while (t-- &gt; 0),while (t-- &gt; 0))<SUB>6</SUB>>", "45": "<(&lt;operator&gt;.postDecrement,t--)<SUB>6</SUB>>", "47": "<(LITERAL,0,t-- &gt; 0)<SUB>6</SUB>>", "49": "<(LOCAL,String[] s1: java.lang.String[])<SUB>8</SUB>>", "51": "<(IDENTIFIER,s1,String[] s1 = split(&quot; &quot;))<SUB>8</SUB>>", "53": "<(readLine,readLine())<SUB>8</SUB>>", "55": "<(LITERAL,&quot; &quot;,split(&quot; &quot;))<SUB>8</SUB>>", "57": "<(&lt;operator&gt;.assignment,int n = Integer.parseInt(s1[0]))<SUB>9</SUB>>", "59": "<(parseInt,Integer.parseInt(s1[0]))<SUB>9</SUB>>", "61": "<(&lt;operator&gt;.indexAccess,s1[0])<SUB>9</SUB>>", "63": "<(LITERAL,0,Integer.parseInt(s1[0]))<SUB>9</SUB>>", "65": "<(&lt;operator&gt;.assignment,int x = 1)<SUB>18</SUB>>", "67": "<(LITERAL,1,int x = 1)<SUB>18</SUB>>", "69": "<(&lt;operator&gt;.assignment,boolean ans = true)<SUB>19</SUB>>", "71": "<(LITERAL,true,boolean ans = true)<SUB>19</SUB>>", "73": "<(&lt;operator&gt;.equals,n % 2 == 0)<SUB>20</SUB>>", "75": "<(IDENTIFIER,n,n % 2)<SUB>20</SUB>>", "77": "<(LITERAL,0,n % 2 == 0)<SUB>20</SUB>>", "79": "<(&lt;operator&gt;.assignmentMultiplication,x *= 2)<SUB>21</SUB>>", "81": "<(LITERAL,2,x *= 2)<SUB>21</SUB>>", "83": "<(IDENTIFIER,n,n /= 2)<SUB>22</SUB>>", "85": "<(CONTROL_STRUCTURE,if (x == 1),if (x == 1))<SUB>24</SUB>>", "87": "<(IDENTIFIER,x,x == 1)<SUB>24</SUB>>", "89": "<(&lt;operator&gt;.assignment,ans = false)<SUB>24</SUB>>", "91": "<(LITERAL,false,ans = false)<SUB>24</SUB>>", "93": "<(&lt;operator&gt;.assignment,int z = (int) Math.sqrt(n))<SUB>25</SUB>>", "95": "<(&lt;operator&gt;.cast,(int) Math.sqrt(n))<SUB>25</SUB>>", "97": "<(sqrt,Math.sqrt(n))<SUB>25</SUB>>", "99": "<(IDENTIFIER,n,Math.sqrt(n))<SUB>25</SUB>>", "101": "<(&lt;operator&gt;.notEquals,z * z != n)<SUB>26</SUB>>", "103": "<(IDENTIFIER,z,z * z)<SUB>26</SUB>>", "105": "<(IDENTIFIER,n,z * z != n)<SUB>26</SUB>>", "107": "<(IDENTIFIER,ans,ans = false)<SUB>26</SUB>>", "109": "<(CONTROL_STRUCTURE,if (ans),if (ans))<SUB>28</SUB>>", "111": "<(println,System.out.println(&quot;YES&quot;))<SUB>28</SUB>>", "113": "<(IDENTIFIER,System,System.out.println(&quot;YES&quot;))<SUB>28</SUB>>", "115": "<(LITERAL,&quot;YES&quot;,System.out.println(&quot;YES&quot;))<SUB>28</SUB>>", "117": "<(println,System.out.println(&quot;NO&quot;))<SUB>29</SUB>>", "119": "<(IDENTIFIER,System,System.out.println(&quot;NO&quot;))<SUB>29</SUB>>", "121": "<(LITERAL,&quot;NO&quot;,System.out.println(&quot;NO&quot;))<SUB>29</SUB>>", "123": "<(MODIFIER,STATIC)>"}}