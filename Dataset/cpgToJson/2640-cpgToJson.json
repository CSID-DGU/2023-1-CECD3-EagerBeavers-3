{"edges": [["21", "23"], ["21", "157"], ["21", "158"], ["21", "159"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "31"], ["23", "32"], ["23", "33"], ["23", "37"], ["23", "41"], ["23", "42"], ["23", "6"], ["23", "46"], ["23", "49"], ["23", "50"], ["23", "67"], ["23", "135"], ["23", "151"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["33", "34"], ["33", "35"], ["35", "36"], ["37", "38"], ["37", "39"], ["39", "40"], ["42", "43"], ["42", "44"], ["44", "45"], ["46", "47"], ["46", "48"], ["49", "5"], ["50", "51"], ["50", "52"], ["50", "55"], ["50", "58"], ["50", "60"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "57"], ["58", "59"], ["60", "61"], ["61", "62"], ["61", "65"], ["62", "63"], ["62", "64"], ["65", "66"], ["67", "68"], ["67", "69"], ["67", "72"], ["67", "75"], ["67", "77"], ["69", "70"], ["69", "71"], ["72", "73"], ["72", "74"], ["75", "76"], ["77", "78"], ["78", "79"], ["78", "80"], ["78", "85"], ["78", "88"], ["78", "90"], ["80", "81"], ["80", "82"], ["82", "83"], ["82", "84"], ["85", "86"], ["85", "87"], ["88", "89"], ["90", "91"], ["91", "92"], ["91", "99"], ["91", "117"], ["92", "93"], ["92", "96"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["99", "100"], ["100", "101"], ["100", "110"], ["101", "102"], ["101", "109"], ["102", "103"], ["102", "106"], ["103", "104"], ["103", "105"], ["106", "107"], ["106", "108"], ["110", "111"], ["110", "114"], ["111", "112"], ["111", "113"], ["114", "115"], ["114", "116"], ["117", "118"], ["118", "119"], ["118", "128"], ["119", "120"], ["119", "127"], ["120", "121"], ["120", "124"], ["121", "122"], ["121", "123"], ["124", "125"], ["124", "126"], ["128", "129"], ["128", "132"], ["129", "130"], ["129", "131"], ["132", "133"], ["132", "134"], ["135", "136"], ["135", "137"], ["135", "140"], ["135", "143"], ["135", "145"], ["137", "138"], ["137", "139"], ["140", "141"], ["140", "142"], ["143", "144"], ["145", "146"], ["146", "147"], ["146", "148"], ["148", "149"], ["148", "150"], ["151", "152"], ["151", "155"], ["152", "153"], ["152", "154"], ["155", "156"], ["24", "30"], ["27", "35"], ["33", "39"], ["37", "44"], ["42", "48"], ["46", "49"], ["49", "52"], ["151", "159"], ["26", "24"], ["28", "27"], ["35", "33"], ["39", "37"], ["44", "42"], ["48", "46"], ["52", "55"], ["55", "62"], ["55", "69"], ["58", "55"], ["69", "72"], ["72", "82"], ["72", "137"], ["75", "72"], ["137", "140"], ["140", "148"], ["140", "154"], ["143", "140"], ["152", "155"], ["155", "151"], ["30", "28"], ["61", "58"], ["146", "143"], ["154", "152"], ["62", "65"], ["65", "61"], ["80", "85"], ["85", "93"], ["85", "75"], ["88", "85"], ["148", "146"], ["82", "80"], ["92", "103"], ["92", "121"], ["93", "96"], ["96", "92"], ["101", "111"], ["101", "88"], ["110", "88"], ["119", "129"], ["119", "88"], ["128", "88"], ["102", "101"], ["111", "114"], ["114", "110"], ["120", "119"], ["129", "132"], ["132", "128"], ["103", "106"], ["106", "102"], ["121", "124"], ["124", "120"], ["21", "26"], ["22", "159"], ["24", "159"], ["27", "159"], ["27", "159"], ["35", "159"], ["33", "159"], ["33", "159"], ["37", "159"], ["37", "159"], ["37", "159"], ["42", "159"], ["42", "159"], ["42", "159"], ["46", "159"], ["49", "159"], ["137", "159"], ["140", "159"], ["140", "159"], ["140", "159"], ["151", "159"], ["155", "159"], ["151", "159"], ["151", "159"], ["146", "159"], ["146", "159"], ["143", "159"], ["80", "159"], ["80", "159"], ["85", "159"], ["85", "159"], ["75", "159"], ["92", "159"], ["120", "159"], ["120", "159"], ["119", "159"], ["119", "159"], ["128", "159"], ["128", "159"], ["128", "159"], ["102", "159"], ["102", "159"], ["101", "159"], ["101", "159"], ["110", "159"], ["110", "159"], ["110", "159"], ["88", "159"], ["61", "159"], ["65", "159"], ["61", "159"], ["61", "159"], ["58", "159"], ["21", "22"], ["21", "24"], ["35", "33"], ["39", "37"], ["44", "42"], ["21", "46"], ["24", "27"], ["21", "27"], ["46", "49"], ["21", "49"], ["21", "52"], ["21", "69"], ["21", "137"], ["155", "151"], ["27", "35"], ["21", "35"], ["33", "39"], ["21", "39"], ["39", "44"], ["21", "44"], ["52", "55"], ["58", "55"], ["21", "55"], ["44", "55"], ["55", "58"], ["21", "58"], ["65", "61"], ["69", "72"], ["75", "72"], ["21", "72"], ["55", "72"], ["85", "72"], ["21", "75"], ["72", "75"], ["137", "140"], ["143", "140"], ["21", "140"], ["72", "140"], ["140", "143"], ["21", "143"], ["49", "155"], ["146", "155"], ["21", "155"], ["72", "80"], ["21", "80"], ["49", "146"], ["21", "146"], ["37", "146"], ["120", "146"], ["102", "146"], ["110", "146"], ["61", "146"], ["35", "65"], ["21", "65"], ["80", "85"], ["88", "85"], ["21", "85"], ["72", "85"], ["85", "88"], ["21", "88"], ["72", "82"], ["21", "82"], ["37", "92"], ["120", "92"], ["102", "92"], ["110", "92"], ["61", "92"], ["120", "92"], ["128", "92"], ["102", "92"], ["37", "110"], ["102", "110"], ["37", "128"], ["120", "128"], ["102", "101"], ["102", "101"], ["21", "101"], ["120", "119"], ["120", "119"], ["21", "119"], ["37", "102"], ["92", "102"], ["92", "102"], ["37", "120"], ["92", "120"], ["92", "120"], ["55", "65"], ["55", "58"], ["55", "61"], ["55", "55"], ["55", "62"], ["72", "75"], ["72", "85"], ["72", "72"], ["72", "82"], ["72", "80"], ["140", "146"], ["140", "140"], ["140", "148"], ["140", "143"], ["85", "96"], ["85", "85"], ["85", "92"], ["85", "93"], ["85", "88"], ["92", "120"], ["92", "102"], ["92", "103"], ["92", "119"], ["92", "121"], ["92", "106"], ["92", "101"], ["92", "124"], ["101", "114"], ["101", "110"], ["101", "111"], ["119", "128"], ["119", "132"], ["119", "129"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY scan = new Scanner(System.in))<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,scan,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "31": "<(LOCAL,int n: int)<SUB>4</SUB>>", "33": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>4</SUB>>", "35": "<(nextInt,nextInt())<SUB>4</SUB>>", "37": "<(&lt;operator&gt;.assignment,int[] min = new int[n])<SUB>4</SUB>>", "39": "<(&lt;operator&gt;.alloc,new int[n])>", "41": "<(LOCAL,boolean[] used: boolean[])<SUB>5</SUB>>", "43": "<(IDENTIFIER,used,boolean[] used = new boolean[n])<SUB>5</SUB>>", "45": "<(IDENTIFIER,n,new boolean[n])<SUB>5</SUB>>", "46": "<(&lt;operator&gt;.assignment,ANY set = new HashSet&lt;&gt;())<SUB>6</SUB>>", "48": "<(&lt;operator&gt;.alloc,new HashSet&lt;&gt;())<SUB>6</SUB>>", "5": "<(IDENTIFIER,set,new HashSet&lt;&gt;())<SUB>6</SUB>>", "51": "<(LOCAL,int i: int)<SUB>9</SUB>>", "53": "<(IDENTIFIER,i,int i = 0)<SUB>9</SUB>>", "55": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>9</SUB>>", "57": "<(IDENTIFIER,n,i &lt; n)<SUB>9</SUB>>", "59": "<(IDENTIFIER,i,i++)<SUB>9</SUB>>", "61": "<(&lt;operator&gt;.assignment,min[i] = nextInt())<SUB>10</SUB>>", "63": "<(IDENTIFIER,min,min[i] = nextInt())<SUB>10</SUB>>", "65": "<(nextInt,nextInt())<SUB>10</SUB>>", "67": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>13</SUB>>", "69": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>13</SUB>>", "71": "<(LITERAL,0,int i = 0)<SUB>13</SUB>>", "73": "<(IDENTIFIER,i,i &lt; n)<SUB>13</SUB>>", "75": "<(&lt;operator&gt;.postIncrement,i++)<SUB>13</SUB>>", "77": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>13</SUB>>", "79": "<(LOCAL,int j: int)<SUB>14</SUB>>", "81": "<(IDENTIFIER,j,int j = i + 1)<SUB>14</SUB>>", "83": "<(IDENTIFIER,i,i + 1)<SUB>14</SUB>>", "85": "<(&lt;operator&gt;.lessThan,j &lt; n)<SUB>14</SUB>>", "87": "<(IDENTIFIER,n,j &lt; n)<SUB>14</SUB>>", "89": "<(IDENTIFIER,j,j++)<SUB>14</SUB>>", "91": "<(CONTROL_STRUCTURE,if (min[i] &gt; min[j]),if (min[i] &gt; min[j]))<SUB>15</SUB>>", "93": "<(&lt;operator&gt;.indexAccess,min[i])<SUB>15</SUB>>", "95": "<(IDENTIFIER,i,min[i] &gt; min[j])<SUB>15</SUB>>", "97": "<(IDENTIFIER,min,min[i] &gt; min[j])<SUB>15</SUB>>", "99": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>15</SUB>>", "101": "<(&lt;operator&gt;.equals,min[i] % min[j] == 0)<SUB>16</SUB>>", "103": "<(&lt;operator&gt;.indexAccess,min[i])<SUB>16</SUB>>", "105": "<(IDENTIFIER,i,min[i] % min[j])<SUB>16</SUB>>", "107": "<(IDENTIFIER,min,min[i] % min[j])<SUB>16</SUB>>", "109": "<(LITERAL,0,min[i] % min[j] == 0)<SUB>16</SUB>>", "111": "<(&lt;operator&gt;.indexAccess,min[i])<SUB>17</SUB>>", "113": "<(IDENTIFIER,i,min[i] = min[j])<SUB>17</SUB>>", "115": "<(IDENTIFIER,min,min[i] = min[j])<SUB>17</SUB>>", "117": "<(CONTROL_STRUCTURE,else,else)<SUB>19</SUB>>", "119": "<(&lt;operator&gt;.equals,min[j] % min[i] == 0)<SUB>19</SUB>>", "121": "<(&lt;operator&gt;.indexAccess,min[j])<SUB>19</SUB>>", "123": "<(IDENTIFIER,j,min[j] % min[i])<SUB>19</SUB>>", "125": "<(IDENTIFIER,min,min[j] % min[i])<SUB>19</SUB>>", "127": "<(LITERAL,0,min[j] % min[i] == 0)<SUB>19</SUB>>", "129": "<(&lt;operator&gt;.indexAccess,min[j])<SUB>20</SUB>>", "131": "<(IDENTIFIER,j,min[j] = min[i])<SUB>20</SUB>>", "133": "<(IDENTIFIER,min,min[j] = min[i])<SUB>20</SUB>>", "135": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>24</SUB>>", "137": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>24</SUB>>", "139": "<(LITERAL,0,int i = 0)<SUB>24</SUB>>", "141": "<(IDENTIFIER,i,i &lt; n)<SUB>24</SUB>>", "143": "<(&lt;operator&gt;.postIncrement,i++)<SUB>24</SUB>>", "145": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>24</SUB>>", "147": "<(IDENTIFIER,set,add(min[i]))<SUB>25</SUB>>", "149": "<(IDENTIFIER,min,add(min[i]))<SUB>25</SUB>>", "151": "<(print,print(set.size()))<SUB>28</SUB>>", "153": "<(IDENTIFIER,System,print(set.size()))<SUB>28</SUB>>", "155": "<(size,size())<SUB>28</SUB>>", "157": "<(MODIFIER,PUBLIC)>", "159": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}