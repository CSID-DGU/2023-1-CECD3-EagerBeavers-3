{"edges": [["21", "23"], ["21", "145"], ["21", "146"], ["21", "147"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "28"], ["23", "31"], ["23", "35"], ["23", "36"], ["23", "40"], ["23", "41"], ["23", "44"], ["23", "45"], ["23", "49"], ["23", "88"], ["23", "89"], ["23", "93"], ["23", "143"], ["24", "25"], ["24", "26"], ["27", "3"], ["28", "29"], ["28", "30"], ["31", "5"], ["31", "32"], ["32", "33"], ["32", "34"], ["36", "37"], ["36", "38"], ["38", "39"], ["41", "42"], ["41", "43"], ["45", "46"], ["45", "47"], ["47", "48"], ["49", "50"], ["49", "51"], ["49", "54"], ["49", "57"], ["49", "59"], ["51", "52"], ["51", "53"], ["54", "55"], ["54", "56"], ["57", "58"], ["59", "60"], ["59", "66"], ["60", "61"], ["60", "64"], ["61", "62"], ["61", "63"], ["64", "65"], ["66", "67"], ["66", "68"], ["66", "71"], ["66", "74"], ["66", "76"], ["68", "69"], ["68", "70"], ["71", "72"], ["71", "73"], ["74", "75"], ["76", "77"], ["76", "84"], ["77", "78"], ["77", "81"], ["78", "79"], ["78", "80"], ["81", "82"], ["81", "83"], ["84", "85"], ["84", "86"], ["86", "87"], ["89", "90"], ["89", "91"], ["91", "92"], ["93", "94"], ["93", "98"], ["94", "95"], ["94", "97"], ["95", "96"], ["98", "99"], ["98", "100"], ["98", "101"], ["98", "105"], ["98", "109"], ["98", "110"], ["98", "117"], ["98", "118"], ["98", "127"], ["98", "137"], ["101", "102"], ["101", "103"], ["103", "104"], ["105", "106"], ["105", "107"], ["107", "108"], ["110", "111"], ["110", "112"], ["112", "113"], ["112", "116"], ["113", "114"], ["113", "115"], ["118", "119"], ["118", "120"], ["120", "121"], ["120", "126"], ["121", "122"], ["121", "123"], ["123", "124"], ["123", "125"], ["127", "128"], ["127", "133"], ["128", "129"], ["128", "132"], ["129", "130"], ["129", "131"], ["133", "134"], ["133", "135"], ["135", "136"], ["137", "138"], ["137", "139"], ["139", "140"], ["139", "141"], ["139", "142"], ["143", "144"], ["24", "27"], ["27", "30"], ["28", "34"], ["31", "38"], ["36", "41"], ["41", "47"], ["45", "51"], ["89", "95"], ["143", "147"], ["26", "24"], ["30", "28"], ["32", "31"], ["38", "36"], ["47", "45"], ["51", "54"], ["54", "61"], ["54", "91"], ["57", "54"], ["91", "89"], ["94", "103"], ["94", "143"], ["34", "32"], ["60", "68"], ["95", "94"], ["101", "107"], ["105", "113"], ["110", "123"], ["118", "129"], ["137", "95"], ["61", "64"], ["64", "60"], ["68", "71"], ["71", "78"], ["71", "57"], ["74", "71"], ["103", "101"], ["107", "105"], ["112", "110"], ["120", "118"], ["128", "135"], ["128", "139"], ["133", "139"], ["139", "137"], ["77", "86"], ["77", "74"], ["84", "74"], ["113", "112"], ["121", "120"], ["129", "128"], ["135", "133"], ["78", "81"], ["81", "77"], ["86", "84"], ["123", "121"], ["21", "26"], ["22", "147"], ["24", "147"], ["27", "147"], ["28", "147"], ["31", "147"], ["31", "147"], ["36", "147"], ["41", "147"], ["41", "147"], ["45", "147"], ["45", "147"], ["45", "147"], ["51", "147"], ["54", "147"], ["54", "147"], ["54", "147"], ["91", "147"], ["89", "147"], ["89", "147"], ["95", "147"], ["94", "147"], ["94", "147"], ["143", "147"], ["143", "147"], ["101", "147"], ["107", "147"], ["105", "147"], ["105", "147"], ["113", "147"], ["113", "147"], ["112", "147"], ["110", "147"], ["110", "147"], ["121", "147"], ["121", "147"], ["120", "147"], ["118", "147"], ["118", "147"], ["129", "147"], ["128", "147"], ["128", "147"], ["133", "147"], ["133", "147"], ["139", "147"], ["137", "147"], ["137", "147"], ["60", "147"], ["60", "147"], ["68", "147"], ["71", "147"], ["71", "147"], ["57", "147"], ["77", "147"], ["77", "147"], ["77", "147"], ["84", "147"], ["84", "147"], ["84", "147"], ["74", "147"], ["21", "22"], ["21", "24"], ["21", "28"], ["38", "36"], ["21", "41"], ["47", "45"], ["91", "89"], ["24", "27"], ["21", "27"], ["28", "31"], ["21", "31"], ["21", "51"], ["31", "143"], ["137", "143"], ["21", "143"], ["27", "38"], ["21", "38"], ["36", "47"], ["21", "47"], ["51", "54"], ["57", "54"], ["21", "54"], ["47", "54"], ["71", "57"], ["21", "57"], ["64", "60"], ["38", "91"], ["64", "91"], ["21", "91"], ["95", "94"], ["21", "94"], ["103", "101"], ["107", "105"], ["113", "110"], ["113", "110"], ["21", "110"], ["120", "118"], ["120", "118"], ["21", "68"], ["89", "95"], ["21", "95"], ["135", "133"], ["31", "137"], ["21", "137"], ["38", "64"], ["21", "64"], ["68", "71"], ["74", "71"], ["21", "71"], ["54", "71"], ["71", "74"], ["21", "74"], ["86", "84"], ["91", "103"], ["107", "103"], ["21", "103"], ["103", "107"], ["21", "107"], ["113", "112"], ["113", "112"], ["21", "112"], ["121", "120"], ["121", "120"], ["21", "120"], ["129", "128"], ["129", "128"], ["21", "128"], ["21", "139"], ["45", "77"], ["60", "77"], ["105", "113"], ["21", "113"], ["101", "113"], ["123", "121"], ["21", "121"], ["123", "121"], ["118", "129"], ["21", "129"], ["41", "135"], ["84", "135"], ["21", "135"], ["41", "86"], ["84", "86"], ["21", "86"], ["110", "123"], ["21", "123"], ["54", "68"], ["54", "60"], ["54", "64"], ["54", "57"], ["54", "54"], ["54", "61"], ["54", "71"], ["94", "107"], ["94", "94"], ["94", "120"], ["94", "113"], ["94", "128"], ["94", "103"], ["94", "121"], ["94", "95"], ["94", "123"], ["94", "112"], ["94", "129"], ["94", "101"], ["94", "137"], ["94", "105"], ["94", "118"], ["94", "110"], ["94", "139"], ["71", "77"], ["71", "81"], ["71", "74"], ["71", "71"], ["71", "78"], ["128", "135"], ["128", "133"], ["77", "84"], ["77", "86"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY scan = new STDIN())<SUB>3</SUB>>", "26": "<(&lt;operator&gt;.alloc,new STDIN())<SUB>3</SUB>>", "3": "<(IDENTIFIER,scan,new STDIN())<SUB>3</SUB>>", "28": "<(&lt;operator&gt;.assignment,ANY pw = new PrintWriter(System.out))<SUB>4</SUB>>", "30": "<(&lt;operator&gt;.alloc,new PrintWriter(System.out))<SUB>4</SUB>>", "5": "<(IDENTIFIER,pw,new PrintWriter(System.out))<SUB>4</SUB>>", "33": "<(IDENTIFIER,System,new PrintWriter(System.out))<SUB>4</SUB>>", "35": "<(LOCAL,int n: int)<SUB>6</SUB>>", "37": "<(IDENTIFIER,n,int n = nextInt())<SUB>6</SUB>>", "39": "<(IDENTIFIER,scan,nextInt())<SUB>6</SUB>>", "41": "<(&lt;operator&gt;.assignment,boolean even = true)<SUB>7</SUB>>", "43": "<(LITERAL,true,boolean even = true)<SUB>7</SUB>>", "45": "<(&lt;operator&gt;.assignment,int[] a = new int[n])<SUB>8</SUB>>", "47": "<(&lt;operator&gt;.alloc,new int[n])>", "49": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>9</SUB>>", "51": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>9</SUB>>", "53": "<(LITERAL,0,int i = 0)<SUB>9</SUB>>", "55": "<(IDENTIFIER,i,i &lt; n)<SUB>9</SUB>>", "57": "<(&lt;operator&gt;.postIncrement,i++)<SUB>9</SUB>>", "59": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>>", "61": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>10</SUB>>", "63": "<(IDENTIFIER,i,a[i] = nextInt())<SUB>10</SUB>>", "65": "<(IDENTIFIER,scan,nextInt())<SUB>10</SUB>>", "67": "<(LOCAL,int j: int)<SUB>11</SUB>>", "69": "<(IDENTIFIER,j,int j = 0)<SUB>11</SUB>>", "71": "<(&lt;operator&gt;.lessThan,j &lt; i)<SUB>11</SUB>>", "73": "<(IDENTIFIER,i,j &lt; i)<SUB>11</SUB>>", "75": "<(IDENTIFIER,j,j++)<SUB>11</SUB>>", "77": "<(&lt;operator&gt;.lessThan,a[i] &lt; a[j])<SUB>12</SUB>>", "79": "<(IDENTIFIER,a,a[i] &lt; a[j])<SUB>12</SUB>>", "81": "<(&lt;operator&gt;.indexAccess,a[j])<SUB>12</SUB>>", "83": "<(IDENTIFIER,j,a[i] &lt; a[j])<SUB>12</SUB>>", "85": "<(IDENTIFIER,even,even = !even)<SUB>12</SUB>>", "87": "<(IDENTIFIER,even,!even)<SUB>12</SUB>>", "89": "<(&lt;operator&gt;.assignment,int q = nextInt())<SUB>14</SUB>>", "91": "<(nextInt,nextInt())<SUB>14</SUB>>", "93": "<(CONTROL_STRUCTURE,while (q-- &gt; 0),while (q-- &gt; 0))<SUB>15</SUB>>", "95": "<(&lt;operator&gt;.postDecrement,q--)<SUB>15</SUB>>", "97": "<(LITERAL,0,q-- &gt; 0)<SUB>15</SUB>>", "99": "<(LOCAL,int l: int)<SUB>16</SUB>>", "101": "<(&lt;operator&gt;.assignment,int l = nextInt())<SUB>16</SUB>>", "103": "<(nextInt,nextInt())<SUB>16</SUB>>", "105": "<(&lt;operator&gt;.assignment,int r = nextInt())<SUB>16</SUB>>", "107": "<(nextInt,nextInt())<SUB>16</SUB>>", "109": "<(LOCAL,int len: int)<SUB>17</SUB>>", "111": "<(IDENTIFIER,len,int len = r - l + 1)<SUB>17</SUB>>", "113": "<(&lt;operator&gt;.subtraction,r - l)<SUB>17</SUB>>", "115": "<(IDENTIFIER,l,r - l)<SUB>17</SUB>>", "117": "<(LOCAL,int permutations: int)<SUB>18</SUB>>", "119": "<(IDENTIFIER,permutations,int permutations = len * (len - 1) / 2)<SUB>18</SUB>>", "121": "<(&lt;operator&gt;.multiplication,len * (len - 1))<SUB>18</SUB>>", "123": "<(&lt;operator&gt;.subtraction,len - 1)<SUB>18</SUB>>", "125": "<(LITERAL,1,len - 1)<SUB>18</SUB>>", "127": "<(CONTROL_STRUCTURE,if (permutations % 2 != 0),if (permutations % 2 != 0))<SUB>19</SUB>>", "129": "<(&lt;operator&gt;.modulo,permutations % 2)<SUB>19</SUB>>", "131": "<(LITERAL,2,permutations % 2)<SUB>19</SUB>>", "133": "<(&lt;operator&gt;.assignment,even = !even)<SUB>19</SUB>>", "135": "<(&lt;operator&gt;.logicalNot,!even)<SUB>19</SUB>>", "137": "<(println,println(even ? &quot;even&quot; : &quot;odd&quot;))<SUB>20</SUB>>", "139": "<(&lt;operator&gt;.conditional,even ? &quot;even&quot; : &quot;odd&quot;)<SUB>20</SUB>>", "141": "<(LITERAL,&quot;even&quot;,even ? &quot;even&quot; : &quot;odd&quot;)<SUB>20</SUB>>", "143": "<(flush,flush())<SUB>23</SUB>>", "145": "<(MODIFIER,PUBLIC)>", "147": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}