{"edges": [["25", "26"], ["25", "27"], ["25", "200"], ["25", "201"], ["25", "202"], ["27", "4"], ["27", "28"], ["27", "31"], ["27", "6"], ["27", "42"], ["27", "45"], ["27", "48"], ["27", "49"], ["27", "55"], ["27", "56"], ["27", "62"], ["27", "107"], ["27", "110"], ["27", "111"], ["27", "117"], ["27", "118"], ["27", "121"], ["27", "10"], ["27", "170"], ["27", "173"], ["27", "174"], ["27", "195"], ["28", "29"], ["28", "30"], ["31", "3"], ["31", "32"], ["32", "33"], ["32", "36"], ["32", "41"], ["33", "34"], ["33", "35"], ["36", "37"], ["36", "38"], ["38", "39"], ["38", "40"], ["42", "43"], ["42", "44"], ["45", "5"], ["45", "46"], ["46", "47"], ["49", "50"], ["49", "51"], ["51", "52"], ["51", "53"], ["53", "54"], ["56", "57"], ["56", "58"], ["58", "59"], ["59", "60"], ["59", "61"], ["62", "63"], ["62", "64"], ["62", "67"], ["62", "70"], ["62", "72"], ["64", "65"], ["64", "66"], ["67", "68"], ["67", "69"], ["70", "71"], ["72", "8"], ["72", "73"], ["72", "76"], ["72", "79"], ["72", "91"], ["73", "74"], ["73", "75"], ["76", "7"], ["76", "77"], ["77", "78"], ["79", "80"], ["79", "85"], ["80", "81"], ["80", "82"], ["82", "83"], ["82", "84"], ["85", "86"], ["85", "90"], ["86", "87"], ["86", "88"], ["88", "89"], ["91", "92"], ["91", "99"], ["92", "93"], ["92", "94"], ["94", "95"], ["94", "98"], ["95", "96"], ["95", "97"], ["99", "100"], ["99", "106"], ["100", "101"], ["100", "105"], ["101", "102"], ["101", "103"], ["103", "104"], ["107", "108"], ["107", "109"], ["111", "112"], ["111", "113"], ["113", "114"], ["114", "115"], ["114", "116"], ["118", "119"], ["118", "120"], ["121", "122"], ["121", "123"], ["121", "126"], ["121", "133"], ["121", "135"], ["123", "124"], ["123", "125"], ["126", "127"], ["126", "128"], ["128", "129"], ["128", "132"], ["129", "130"], ["129", "131"], ["133", "134"], ["135", "136"], ["135", "149"], ["136", "137"], ["136", "144"], ["136", "146"], ["137", "138"], ["137", "143"], ["138", "139"], ["138", "142"], ["139", "140"], ["139", "141"], ["144", "145"], ["146", "147"], ["147", "148"], ["149", "150"], ["149", "153"], ["150", "151"], ["150", "152"], ["153", "154"], ["153", "163"], ["154", "155"], ["154", "162"], ["155", "156"], ["155", "161"], ["156", "157"], ["156", "158"], ["158", "159"], ["158", "160"], ["163", "164"], ["163", "169"], ["164", "165"], ["164", "168"], ["165", "166"], ["165", "167"], ["170", "171"], ["170", "172"], ["173", "9"], ["174", "175"], ["174", "176"], ["174", "179"], ["174", "184"], ["174", "186"], ["176", "177"], ["176", "178"], ["179", "180"], ["179", "181"], ["181", "182"], ["181", "183"], ["184", "185"], ["186", "187"], ["186", "192"], ["187", "188"], ["187", "189"], ["189", "190"], ["189", "191"], ["192", "193"], ["192", "194"], ["195", "196"], ["195", "199"], ["196", "197"], ["196", "198"], ["28", "35"], ["31", "44"], ["42", "46"], ["45", "53"], ["49", "59"], ["56", "64"], ["107", "114"], ["111", "118"], ["118", "123"], ["170", "173"], ["173", "176"], ["195", "202"], ["30", "28"], ["44", "42"], ["46", "45"], ["51", "49"], ["58", "56"], ["64", "67"], ["67", "75"], ["67", "107"], ["70", "67"], ["113", "111"], ["123", "129"], ["126", "139"], ["126", "172"], ["133", "129"], ["172", "170"], ["176", "181"], ["179", "189"], ["179", "198"], ["184", "181"], ["196", "195"], ["33", "40"], ["36", "31"], ["53", "51"], ["59", "58"], ["73", "77"], ["76", "82"], ["79", "95"], ["91", "70"], ["114", "113"], ["128", "126"], ["149", "133"], ["181", "179"], ["187", "192"], ["192", "184"], ["198", "196"], ["35", "33"], ["38", "36"], ["75", "73"], ["77", "76"], ["80", "88"], ["85", "79"], ["92", "103"], ["99", "91"], ["129", "128"], ["137", "144"], ["137", "147"], ["144", "150"], ["150", "158"], ["153", "149"], ["189", "187"], ["40", "38"], ["82", "80"], ["86", "85"], ["94", "92"], ["100", "99"], ["138", "137"], ["147", "150"], ["154", "165"], ["163", "153"], ["88", "86"], ["95", "94"], ["101", "100"], ["139", "138"], ["155", "154"], ["164", "163"], ["103", "101"], ["156", "155"], ["165", "164"], ["158", "156"], ["25", "30"], ["26", "202"], ["28", "202"], ["33", "202"], ["36", "202"], ["36", "202"], ["36", "202"], ["31", "202"], ["42", "202"], ["46", "202"], ["45", "202"], ["45", "202"], ["53", "202"], ["51", "202"], ["49", "202"], ["49", "202"], ["56", "202"], ["56", "202"], ["67", "202"], ["107", "202"], ["107", "202"], ["111", "202"], ["111", "202"], ["111", "202"], ["118", "202"], ["118", "202"], ["123", "202"], ["128", "202"], ["126", "202"], ["126", "202"], ["170", "202"], ["173", "202"], ["176", "202"], ["179", "202"], ["181", "202"], ["179", "202"], ["179", "202"], ["195", "202"], ["195", "202"], ["195", "202"], ["187", "202"], ["187", "202"], ["192", "202"], ["184", "202"], ["137", "202"], ["137", "202"], ["147", "202"], ["147", "202"], ["144", "202"], ["144", "202"], ["149", "202"], ["155", "202"], ["154", "202"], ["153", "202"], ["164", "202"], ["163", "202"], ["153", "202"], ["149", "202"], ["149", "202"], ["133", "202"], ["73", "202"], ["77", "202"], ["76", "202"], ["76", "202"], ["79", "202"], ["79", "202"], ["94", "202"], ["91", "202"], ["101", "202"], ["103", "202"], ["101", "202"], ["100", "202"], ["99", "202"], ["91", "202"], ["91", "202"], ["70", "202"], ["107", "202"], ["51", "202"], ["25", "26"], ["25", "28"], ["25", "42"], ["51", "49"], ["51", "49"], ["58", "56"], ["113", "111"], ["25", "118"], ["25", "170"], ["28", "31"], ["25", "31"], ["33", "31"], ["36", "31"], ["42", "45"], ["25", "45"], ["46", "45"], ["25", "64"], ["25", "107"], ["56", "107"], ["79", "107"], ["91", "107"], ["25", "123"], ["170", "173"], ["25", "173"], ["25", "176"], ["173", "195"], ["192", "195"], ["25", "195"], ["25", "33"], ["25", "41"], ["31", "46"], ["25", "46"], ["25", "51"], ["53", "51"], ["59", "58"], ["59", "58"], ["64", "67"], ["70", "67"], ["25", "67"], ["59", "67"], ["95", "70"], ["25", "70"], ["25", "73"], ["85", "79"], ["85", "79"], ["100", "91"], ["100", "91"], ["25", "91"], ["67", "113"], ["25", "113"], ["123", "126"], ["133", "126"], ["25", "126"], ["128", "126"], ["128", "126"], ["25", "133"], ["126", "133"], ["153", "149"], ["153", "149"], ["176", "179"], ["184", "179"], ["25", "179"], ["129", "179"], ["179", "184"], ["25", "184"], ["33", "36"], ["25", "36"], ["45", "53"], ["25", "53"], ["25", "59"], ["49", "59"], ["73", "76"], ["25", "76"], ["77", "76"], ["67", "114"], ["25", "114"], ["129", "128"], ["129", "128"], ["25", "128"], ["111", "149"], ["129", "181"], ["25", "181"], ["173", "187"], ["192", "187"], ["25", "187"], ["111", "187"], ["187", "192"], ["25", "192"], ["46", "77"], ["25", "77"], ["86", "85"], ["86", "85"], ["25", "85"], ["100", "99"], ["100", "99"], ["25", "99"], ["25", "129"], ["67", "129"], ["138", "137"], ["138", "137"], ["25", "137"], ["118", "144"], ["147", "144"], ["25", "144"], ["154", "153"], ["154", "153"], ["163", "153"], ["163", "153"], ["25", "82"], ["67", "82"], ["101", "86"], ["25", "86"], ["88", "86"], ["95", "94"], ["95", "94"], ["25", "94"], ["101", "100"], ["101", "100"], ["25", "100"], ["107", "138"], ["25", "138"], ["118", "147"], ["144", "147"], ["25", "147"], ["107", "154"], ["25", "154"], ["107", "163"], ["138", "163"], ["25", "163"], ["76", "88"], ["25", "88"], ["25", "95"], ["82", "95"], ["86", "101"], ["25", "101"], ["103", "101"], ["107", "155"], ["25", "155"], ["107", "164"], ["138", "164"], ["25", "164"], ["88", "103"], ["25", "103"], ["126", "158"], ["25", "158"], ["67", "94"], ["67", "73"], ["67", "77"], ["67", "75"], ["67", "85"], ["67", "103"], ["67", "67"], ["67", "95"], ["67", "92"], ["67", "76"], ["67", "91"], ["67", "101"], ["67", "79"], ["67", "80"], ["67", "100"], ["67", "88"], ["67", "70"], ["67", "86"], ["67", "99"], ["67", "82"], ["126", "154"], ["126", "128"], ["126", "163"], ["126", "149"], ["126", "150"], ["126", "153"], ["126", "129"], ["126", "138"], ["126", "137"], ["126", "164"], ["126", "155"], ["126", "139"], ["126", "158"], ["126", "126"], ["126", "165"], ["126", "156"], ["126", "133"], ["179", "192"], ["179", "179"], ["179", "189"], ["179", "181"], ["179", "187"], ["179", "184"], ["137", "144"], ["137", "147"]], "features": {"25": "<(METHOD,main)<SUB>1</SUB>>", "27": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "28": "<(&lt;operator&gt;.assignment,ANY br = new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "30": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "3": "<(IDENTIFIER,br,new BufferedReader(new InputStreamReader(System.in)))<SUB>3</SUB>>", "33": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "35": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>3</SUB>>", "37": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "39": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>3</SUB>>", "41": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "42": "<(&lt;operator&gt;.assignment,ANY st = new StringTokenizer(br.readLine()))<SUB>4</SUB>>", "44": "<(&lt;operator&gt;.alloc,new StringTokenizer(br.readLine()))<SUB>4</SUB>>", "5": "<(IDENTIFIER,st,new StringTokenizer(br.readLine()))<SUB>4</SUB>>", "47": "<(IDENTIFIER,br,readLine())<SUB>4</SUB>>", "49": "<(&lt;operator&gt;.assignment,int n = parseInt(st.nextToken()))<SUB>6</SUB>>", "51": "<(parseInt,parseInt(st.nextToken()))<SUB>6</SUB>>", "53": "<(nextToken,nextToken())<SUB>6</SUB>>", "55": "<(LOCAL,long[] myArray: long[])<SUB>8</SUB>>", "57": "<(IDENTIFIER,myArray,long[] myArray = new long[2 * n])<SUB>8</SUB>>", "59": "<(&lt;operator&gt;.multiplication,2 * n)<SUB>8</SUB>>", "61": "<(IDENTIFIER,n,2 * n)<SUB>8</SUB>>", "63": "<(LOCAL,int i: int)<SUB>10</SUB>>", "65": "<(IDENTIFIER,i,int i = 0)<SUB>10</SUB>>", "67": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>10</SUB>>", "69": "<(IDENTIFIER,n,i &lt; n)<SUB>10</SUB>>", "71": "<(IDENTIFIER,i,i++)<SUB>10</SUB>>", "8": "<(LOCAL,StringTokenizer st1: ANY)<SUB>11</SUB>>", "74": "<(IDENTIFIER,st1,ANY st1 = new StringTokenizer(br.readLine()))<SUB>11</SUB>>", "76": "<(&lt;init&gt;,new StringTokenizer(br.readLine()))<SUB>11</SUB>>", "77": "<(readLine,readLine())<SUB>11</SUB>>", "79": "<(&lt;operator&gt;.assignment,myArray[2 * i] = Long.parseLong(st1.nextToken()) * 2)<SUB>12</SUB>>", "81": "<(IDENTIFIER,myArray,myArray[2 * i] = Long.parseLong(st1.nextToken()) * 2)<SUB>12</SUB>>", "83": "<(LITERAL,2,2 * i)<SUB>12</SUB>>", "85": "<(&lt;operator&gt;.multiplication,Long.parseLong(st1.nextToken()) * 2)<SUB>12</SUB>>", "87": "<(IDENTIFIER,Long,parseLong(st1.nextToken()))<SUB>12</SUB>>", "89": "<(IDENTIFIER,st1,nextToken())<SUB>12</SUB>>", "91": "<(&lt;operator&gt;.assignment,myArray[2 * i + 1] = Long.parseLong(st1.nextToken()) * 2 + 1)<SUB>13</SUB>>", "93": "<(IDENTIFIER,myArray,myArray[2 * i + 1] = Long.parseLong(st1.nextToken()) * 2 + 1)<SUB>13</SUB>>", "95": "<(&lt;operator&gt;.multiplication,2 * i)<SUB>13</SUB>>", "97": "<(IDENTIFIER,i,2 * i)<SUB>13</SUB>>", "99": "<(&lt;operator&gt;.addition,Long.parseLong(st1.nextToken()) * 2 + 1)<SUB>13</SUB>>", "101": "<(parseLong,parseLong(st1.nextToken()))<SUB>13</SUB>>", "103": "<(nextToken,nextToken())<SUB>13</SUB>>", "105": "<(LITERAL,2,Long.parseLong(st1.nextToken()) * 2)<SUB>13</SUB>>", "107": "<(sort,sort(myArray))<SUB>16</SUB>>", "109": "<(IDENTIFIER,myArray,sort(myArray))<SUB>16</SUB>>", "111": "<(&lt;operator&gt;.assignment,long[] ans = new long[n + 1])<SUB>17</SUB>>", "113": "<(&lt;operator&gt;.alloc,new long[n + 1])>", "115": "<(IDENTIFIER,n,n + 1)<SUB>17</SUB>>", "117": "<(LOCAL,int cnt: int)<SUB>18</SUB>>", "119": "<(IDENTIFIER,cnt,int cnt = 0)<SUB>18</SUB>>", "121": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; 2 * n - 1); i++),for (int i = 0; Some(i &lt; 2 * n - 1); i++))<SUB>20</SUB>>", "123": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>20</SUB>>", "125": "<(LITERAL,0,int i = 0)<SUB>20</SUB>>", "127": "<(IDENTIFIER,i,i &lt; 2 * n - 1)<SUB>20</SUB>>", "129": "<(&lt;operator&gt;.multiplication,2 * n)<SUB>20</SUB>>", "131": "<(IDENTIFIER,n,2 * n)<SUB>20</SUB>>", "133": "<(&lt;operator&gt;.postIncrement,i++)<SUB>20</SUB>>", "135": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>20</SUB>>", "137": "<(&lt;operator&gt;.equals,myArray[i] % 2 == 0)<SUB>21</SUB>>", "139": "<(&lt;operator&gt;.indexAccess,myArray[i])<SUB>21</SUB>>", "141": "<(IDENTIFIER,i,myArray[i] % 2)<SUB>21</SUB>>", "143": "<(LITERAL,0,myArray[i] % 2 == 0)<SUB>21</SUB>>", "145": "<(IDENTIFIER,cnt,cnt++)<SUB>21</SUB>>", "147": "<(&lt;operator&gt;.postDecrement,cnt--)<SUB>21</SUB>>", "149": "<(&lt;operator&gt;.assignmentPlus,ans[cnt] += (myArray[i + 1] + 1) / 2 - (myArray[i] + 1) / 2)<SUB>22</SUB>>", "151": "<(IDENTIFIER,ans,ans[cnt] += (myArray[i + 1] + 1) / 2 - (myArray[i] + 1) / 2)<SUB>22</SUB>>", "153": "<(&lt;operator&gt;.subtraction,(myArray[i + 1] + 1) / 2 - (myArray[i] + 1) / 2)<SUB>22</SUB>>", "155": "<(&lt;operator&gt;.addition,myArray[i + 1] + 1)<SUB>22</SUB>>", "157": "<(IDENTIFIER,myArray,myArray[i + 1] + 1)<SUB>22</SUB>>", "159": "<(IDENTIFIER,i,i + 1)<SUB>22</SUB>>", "161": "<(LITERAL,1,myArray[i + 1] + 1)<SUB>22</SUB>>", "163": "<(&lt;operator&gt;.division,(myArray[i] + 1) / 2)<SUB>22</SUB>>", "165": "<(&lt;operator&gt;.indexAccess,myArray[i])<SUB>22</SUB>>", "167": "<(IDENTIFIER,i,myArray[i] + 1)<SUB>22</SUB>>", "169": "<(LITERAL,2,(myArray[i] + 1) / 2)<SUB>22</SUB>>", "170": "<(&lt;operator&gt;.assignment,StringBuilder answer = new StringBuilder())<SUB>25</SUB>>", "172": "<(&lt;operator&gt;.alloc,new StringBuilder())<SUB>25</SUB>>", "9": "<(IDENTIFIER,answer,new StringBuilder())<SUB>25</SUB>>", "175": "<(LOCAL,int i: int)<SUB>27</SUB>>", "177": "<(IDENTIFIER,i,int i = 1)<SUB>27</SUB>>", "179": "<(&lt;operator&gt;.lessThan,i &lt; n + 1)<SUB>27</SUB>>", "181": "<(&lt;operator&gt;.addition,n + 1)<SUB>27</SUB>>", "183": "<(LITERAL,1,n + 1)<SUB>27</SUB>>", "185": "<(IDENTIFIER,i,i++)<SUB>27</SUB>>", "187": "<(append,answer.append(ans[i]))<SUB>28</SUB>>", "189": "<(&lt;operator&gt;.indexAccess,ans[i])<SUB>28</SUB>>", "191": "<(IDENTIFIER,i,answer.append(ans[i]))<SUB>28</SUB>>", "193": "<(IDENTIFIER,answer,answer.append(&quot; &quot;))<SUB>29</SUB>>", "195": "<(println,System.out.println(answer))<SUB>32</SUB>>", "197": "<(IDENTIFIER,System,System.out.println(answer))<SUB>32</SUB>>", "199": "<(IDENTIFIER,answer,System.out.println(answer))<SUB>32</SUB>>", "201": "<(MODIFIER,STATIC)>"}}