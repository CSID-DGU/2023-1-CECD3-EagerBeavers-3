{"edges": [["21", "22"], ["21", "23"], ["21", "82"], ["21", "83"], ["21", "84"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "28"], ["23", "31"], ["23", "35"], ["23", "36"], ["23", "37"], ["23", "41"], ["23", "45"], ["23", "80"], ["24", "25"], ["24", "26"], ["27", "3"], ["28", "29"], ["28", "30"], ["31", "5"], ["31", "32"], ["32", "33"], ["32", "34"], ["37", "38"], ["37", "39"], ["39", "40"], ["41", "42"], ["41", "43"], ["43", "44"], ["45", "46"], ["45", "47"], ["45", "50"], ["45", "52"], ["47", "48"], ["47", "49"], ["50", "51"], ["52", "53"], ["53", "54"], ["53", "73"], ["54", "55"], ["54", "68"], ["55", "56"], ["55", "61"], ["56", "57"], ["56", "60"], ["57", "58"], ["57", "59"], ["61", "62"], ["61", "65"], ["62", "63"], ["62", "64"], ["65", "66"], ["65", "67"], ["68", "69"], ["68", "70"], ["70", "71"], ["70", "72"], ["73", "74"], ["73", "79"], ["74", "75"], ["74", "76"], ["76", "77"], ["76", "78"], ["80", "81"], ["24", "27"], ["27", "30"], ["28", "34"], ["31", "39"], ["37", "43"], ["41", "47"], ["80", "84"], ["26", "24"], ["30", "28"], ["32", "31"], ["39", "37"], ["43", "41"], ["47", "50"], ["50", "57"], ["50", "80"], ["34", "32"], ["54", "50"], ["54", "76"], ["55", "70"], ["68", "54"], ["56", "62"], ["61", "55"], ["70", "68"], ["76", "74"], ["57", "56"], ["62", "65"], ["65", "61"], ["21", "26"], ["22", "84"], ["24", "84"], ["27", "84"], ["28", "84"], ["31", "84"], ["31", "84"], ["37", "84"], ["37", "84"], ["41", "84"], ["43", "84"], ["41", "84"], ["41", "84"], ["47", "84"], ["50", "84"], ["50", "84"], ["80", "84"], ["80", "84"], ["56", "84"], ["55", "84"], ["61", "84"], ["61", "84"], ["55", "84"], ["54", "84"], ["70", "84"], ["70", "84"], ["68", "84"], ["54", "84"], ["54", "84"], ["21", "22"], ["21", "24"], ["21", "28"], ["39", "37"], ["43", "41"], ["24", "27"], ["21", "27"], ["28", "31"], ["21", "31"], ["21", "47"], ["31", "80"], ["21", "80"], ["27", "39"], ["21", "39"], ["39", "43"], ["21", "43"], ["47", "50"], ["21", "50"], ["62", "50"], ["56", "54"], ["56", "54"], ["61", "54"], ["61", "54"], ["68", "54"], ["68", "54"], ["56", "55"], ["56", "55"], ["61", "55"], ["61", "55"], ["21", "68"], ["41", "68"], ["37", "68"], ["31", "74"], ["21", "74"], ["76", "74"], ["76", "74"], ["57", "56"], ["57", "56"], ["50", "56"], ["21", "56"], ["62", "61"], ["62", "61"], ["21", "61"], ["41", "70"], ["21", "70"], ["37", "70"], ["21", "76"], ["37", "76"], ["62", "76"], ["21", "57"], ["56", "62"], ["21", "62"], ["62", "65"], ["21", "65"], ["50", "68"], ["50", "61"], ["50", "65"], ["50", "50"], ["50", "57"], ["50", "55"], ["50", "56"], ["50", "70"], ["50", "54"], ["50", "62"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner())<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner())<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner())<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.assignment,ANY out = new PrintWriter(System.out))<SUB>3</SUB>>", "30": "<(&lt;operator&gt;.alloc,new PrintWriter(System.out))<SUB>3</SUB>>", "5": "<(IDENTIFIER,out,new PrintWriter(System.out))<SUB>3</SUB>>", "33": "<(IDENTIFIER,System,new PrintWriter(System.out))<SUB>3</SUB>>", "35": "<(LOCAL,int n: int)<SUB>4</SUB>>", "37": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>4</SUB>>", "39": "<(nextInt,nextInt())<SUB>4</SUB>>", "41": "<(&lt;operator&gt;.assignment,int k = nextInt())<SUB>4</SUB>>", "43": "<(nextInt,nextInt())<SUB>4</SUB>>", "45": "<(CONTROL_STRUCTURE,for (int x = 0; None; x++),for (int x = 0; None; x++))<SUB>5</SUB>>", "47": "<(&lt;operator&gt;.assignment,int x = 0)<SUB>5</SUB>>", "49": "<(LITERAL,0,int x = 0)<SUB>5</SUB>>", "51": "<(IDENTIFIER,x,x++)<SUB>5</SUB>>", "53": "<(CONTROL_STRUCTURE,if (2 * 1L * x + x * 1L * (x + 1) == 2L * (k + n)),if (2 * 1L * x + x * 1L * (x + 1) == 2L * (k + n)))<SUB>6</SUB>>", "55": "<(&lt;operator&gt;.addition,2 * 1L * x + x * 1L * (x + 1))<SUB>6</SUB>>", "57": "<(&lt;operator&gt;.multiplication,2 * 1L)<SUB>6</SUB>>", "59": "<(LITERAL,1L,2 * 1L)<SUB>6</SUB>>", "61": "<(&lt;operator&gt;.multiplication,x * 1L * (x + 1))<SUB>6</SUB>>", "63": "<(IDENTIFIER,x,x * 1L)<SUB>6</SUB>>", "65": "<(&lt;operator&gt;.addition,x + 1)<SUB>6</SUB>>", "67": "<(LITERAL,1,x + 1)<SUB>6</SUB>>", "69": "<(LITERAL,2L,2L * (k + n))<SUB>6</SUB>>", "71": "<(IDENTIFIER,k,k + n)<SUB>6</SUB>>", "73": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>6</SUB>>", "75": "<(IDENTIFIER,out,println(n - x))<SUB>7</SUB>>", "77": "<(IDENTIFIER,n,n - x)<SUB>7</SUB>>", "79": "<(CONTROL_STRUCTURE,break;,break;)<SUB>8</SUB>>", "81": "<(IDENTIFIER,out,close())<SUB>11</SUB>>", "83": "<(MODIFIER,STATIC)>"}}