{"edges": [["19", "21"], ["19", "207"], ["19", "208"], ["19", "209"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "56"], ["21", "57"], ["21", "61"], ["21", "62"], ["21", "67"], ["21", "94"], ["21", "95"], ["21", "98"], ["21", "135"], ["21", "136"], ["21", "141"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["39", "40"], ["39", "41"], ["39", "44"], ["39", "47"], ["39", "49"], ["41", "42"], ["41", "43"], ["44", "45"], ["44", "46"], ["47", "48"], ["49", "50"], ["50", "51"], ["50", "54"], ["51", "52"], ["51", "53"], ["54", "55"], ["57", "58"], ["57", "59"], ["59", "60"], ["62", "63"], ["62", "64"], ["64", "65"], ["64", "66"], ["67", "68"], ["67", "69"], ["67", "72"], ["67", "75"], ["67", "77"], ["69", "70"], ["69", "71"], ["72", "73"], ["72", "74"], ["75", "76"], ["77", "78"], ["77", "86"], ["78", "79"], ["78", "84"], ["79", "80"], ["79", "83"], ["80", "81"], ["80", "82"], ["84", "85"], ["86", "87"], ["86", "92"], ["87", "88"], ["87", "91"], ["88", "89"], ["88", "90"], ["92", "93"], ["95", "96"], ["95", "97"], ["98", "99"], ["98", "100"], ["98", "103"], ["98", "108"], ["98", "110"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "105"], ["105", "106"], ["105", "107"], ["108", "109"], ["110", "111"], ["111", "112"], ["111", "113"], ["111", "118"], ["111", "121"], ["111", "123"], ["113", "114"], ["113", "115"], ["115", "116"], ["115", "117"], ["118", "119"], ["118", "120"], ["121", "122"], ["123", "124"], ["124", "125"], ["124", "132"], ["125", "126"], ["125", "129"], ["126", "127"], ["126", "128"], ["129", "130"], ["129", "131"], ["132", "133"], ["133", "134"], ["136", "137"], ["136", "138"], ["138", "139"], ["138", "140"], ["141", "142"], ["141", "143"], ["141", "146"], ["141", "151"], ["141", "153"], ["143", "144"], ["143", "145"], ["146", "147"], ["146", "148"], ["148", "149"], ["148", "150"], ["151", "152"], ["153", "154"], ["153", "155"], ["153", "160"], ["153", "161"], ["153", "170"], ["153", "190"], ["155", "156"], ["155", "157"], ["157", "158"], ["157", "159"], ["161", "162"], ["161", "163"], ["163", "164"], ["163", "167"], ["164", "165"], ["164", "166"], ["167", "168"], ["167", "169"], ["170", "171"], ["170", "182"], ["171", "172"], ["171", "181"], ["172", "173"], ["172", "180"], ["173", "174"], ["173", "179"], ["174", "175"], ["174", "176"], ["176", "177"], ["176", "178"], ["182", "183"], ["183", "184"], ["183", "185"], ["185", "186"], ["185", "189"], ["186", "187"], ["186", "188"], ["190", "191"], ["190", "194"], ["190", "200"], ["191", "192"], ["191", "193"], ["194", "195"], ["195", "196"], ["195", "199"], ["196", "197"], ["196", "198"], ["200", "201"], ["201", "202"], ["202", "203"], ["202", "206"], ["203", "204"], ["203", "205"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "41"], ["57", "64"], ["62", "69"], ["95", "100"], ["136", "143"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["41", "44"], ["44", "51"], ["44", "59"], ["47", "44"], ["59", "57"], ["64", "62"], ["69", "72"], ["72", "80"], ["72", "95"], ["75", "72"], ["100", "107"], ["103", "115"], ["103", "138"], ["108", "107"], ["138", "136"], ["143", "150"], ["146", "209"], ["146", "157"], ["151", "150"], ["28", "26"], ["50", "47"], ["78", "88"], ["86", "75"], ["105", "103"], ["148", "146"], ["155", "164"], ["161", "176"], ["51", "54"], ["54", "50"], ["79", "84"], ["84", "78"], ["87", "92"], ["92", "86"], ["107", "105"], ["113", "118"], ["118", "126"], ["118", "108"], ["121", "118"], ["150", "148"], ["157", "155"], ["163", "161"], ["171", "186"], ["171", "191"], ["191", "198"], ["191", "205"], ["80", "79"], ["88", "87"], ["115", "113"], ["164", "167"], ["167", "163"], ["172", "171"], ["183", "191"], ["195", "151"], ["125", "133"], ["125", "121"], ["173", "172"], ["185", "183"], ["196", "195"], ["202", "151"], ["126", "129"], ["129", "125"], ["133", "121"], ["174", "173"], ["186", "185"], ["198", "196"], ["203", "202"], ["176", "174"], ["205", "203"], ["19", "24"], ["20", "209"], ["22", "209"], ["25", "209"], ["25", "209"], ["30", "209"], ["35", "209"], ["35", "209"], ["35", "209"], ["44", "209"], ["44", "209"], ["59", "209"], ["57", "209"], ["57", "209"], ["62", "209"], ["62", "209"], ["62", "209"], ["69", "209"], ["72", "209"], ["72", "209"], ["95", "209"], ["100", "209"], ["103", "209"], ["103", "209"], ["103", "209"], ["136", "209"], ["138", "209"], ["136", "209"], ["136", "209"], ["143", "209"], ["146", "209"], ["146", "209"], ["146", "209"], ["151", "209"], ["108", "209"], ["75", "209"], ["47", "209"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["59", "57"], ["64", "62"], ["64", "62"], ["19", "95"], ["138", "136"], ["138", "136"], ["22", "25"], ["19", "25"], ["19", "41"], ["19", "69"], ["19", "100"], ["19", "143"], ["25", "32"], ["19", "32"], ["30", "37"], ["19", "37"], ["41", "44"], ["47", "44"], ["19", "44"], ["37", "44"], ["44", "47"], ["19", "47"], ["54", "50"], ["32", "59"], ["54", "59"], ["19", "59"], ["57", "64"], ["19", "64"], ["69", "72"], ["75", "72"], ["19", "72"], ["64", "72"], ["72", "75"], ["19", "75"], ["84", "78"], ["92", "86"], ["100", "103"], ["108", "103"], ["19", "103"], ["35", "103"], ["115", "108"], ["19", "108"], ["95", "138"], ["133", "138"], ["19", "138"], ["143", "146"], ["151", "146"], ["19", "146"], ["62", "146"], ["146", "151"], ["19", "151"], ["62", "155"], ["163", "161"], ["163", "161"], ["115", "113"], ["115", "113"], ["32", "54"], ["19", "54"], ["59", "84"], ["92", "84"], ["19", "84"], ["84", "92"], ["19", "92"], ["113", "118"], ["121", "118"], ["19", "118"], ["118", "121"], ["19", "121"], ["155", "163"], ["172", "171"], ["172", "171"], ["19", "171"], ["185", "183"], ["185", "183"], ["136", "191"], ["183", "191"], ["19", "191"], ["103", "115"], ["19", "115"], ["173", "172"], ["173", "172"], ["19", "172"], ["202", "195"], ["19", "195"], ["35", "125"], ["50", "125"], ["174", "173"], ["174", "173"], ["19", "173"], ["136", "185"], ["191", "185"], ["19", "185"], ["195", "202"], ["19", "202"], ["95", "133"], ["19", "133"], ["19", "174"], ["161", "174"], ["136", "186"], ["191", "186"], ["19", "186"], ["161", "176"], ["19", "176"], ["44", "51"], ["44", "50"], ["44", "44"], ["44", "54"], ["44", "47"], ["72", "75"], ["72", "84"], ["72", "92"], ["72", "87"], ["72", "79"], ["72", "80"], ["72", "88"], ["72", "86"], ["72", "72"], ["72", "78"], ["103", "107"], ["103", "115"], ["103", "113"], ["103", "103"], ["103", "118"], ["103", "108"], ["103", "105"], ["146", "167"], ["146", "146"], ["146", "161"], ["146", "163"], ["146", "150"], ["146", "151"], ["146", "191"], ["146", "148"], ["146", "173"], ["146", "174"], ["146", "164"], ["146", "155"], ["146", "171"], ["146", "157"], ["146", "176"], ["146", "172"], ["118", "121"], ["118", "129"], ["118", "118"], ["118", "126"], ["118", "125"], ["171", "185"], ["171", "186"], ["171", "183"], ["191", "196"], ["191", "198"], ["191", "195"], ["191", "202"], ["191", "205"], ["191", "203"], ["125", "133"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,int N: int)<SUB>3</SUB>>", "31": "<(IDENTIFIER,N,int N = nextInt())<SUB>3</SUB>>", "33": "<(IDENTIFIER,sc,nextInt())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,int[] values = new int[N])<SUB>4</SUB>>", "37": "<(&lt;operator&gt;.alloc,new int[N])>", "39": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; N); i++),for (int i = 0; Some(i &lt; N); i++))<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>5</SUB>>", "43": "<(LITERAL,0,int i = 0)<SUB>5</SUB>>", "45": "<(IDENTIFIER,i,i &lt; N)<SUB>5</SUB>>", "47": "<(&lt;operator&gt;.postIncrement,i++)<SUB>5</SUB>>", "49": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>5</SUB>>", "51": "<(&lt;operator&gt;.indexAccess,values[i])<SUB>6</SUB>>", "53": "<(IDENTIFIER,i,values[i] = nextInt())<SUB>6</SUB>>", "55": "<(IDENTIFIER,sc,nextInt())<SUB>6</SUB>>", "57": "<(&lt;operator&gt;.assignment,int query = nextInt())<SUB>8</SUB>>", "59": "<(nextInt,nextInt())<SUB>8</SUB>>", "61": "<(LOCAL,int[][] tasks: int[][])<SUB>9</SUB>>", "63": "<(IDENTIFIER,tasks,int[][] tasks = new int[query][2])<SUB>9</SUB>>", "65": "<(IDENTIFIER,query,new int[query][2])<SUB>9</SUB>>", "67": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; query); i++),for (int i = 0; Some(i &lt; query); i++))<SUB>10</SUB>>", "69": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>10</SUB>>", "71": "<(LITERAL,0,int i = 0)<SUB>10</SUB>>", "73": "<(IDENTIFIER,i,i &lt; query)<SUB>10</SUB>>", "75": "<(&lt;operator&gt;.postIncrement,i++)<SUB>10</SUB>>", "77": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "79": "<(&lt;operator&gt;.indexAccess,tasks[i][0])<SUB>11</SUB>>", "81": "<(IDENTIFIER,tasks,tasks[i][0] = nextInt())<SUB>11</SUB>>", "83": "<(LITERAL,0,tasks[i][0] = nextInt())<SUB>11</SUB>>", "85": "<(IDENTIFIER,sc,nextInt())<SUB>11</SUB>>", "87": "<(&lt;operator&gt;.indexAccess,tasks[i][1])<SUB>12</SUB>>", "89": "<(IDENTIFIER,tasks,tasks[i][1] = nextInt())<SUB>12</SUB>>", "91": "<(LITERAL,1,tasks[i][1] = nextInt())<SUB>12</SUB>>", "93": "<(IDENTIFIER,sc,nextInt())<SUB>12</SUB>>", "95": "<(&lt;operator&gt;.assignment,int startinversions = 0)<SUB>14</SUB>>", "97": "<(LITERAL,0,int startinversions = 0)<SUB>14</SUB>>", "99": "<(LOCAL,int i: int)<SUB>15</SUB>>", "101": "<(IDENTIFIER,i,int i = 1)<SUB>15</SUB>>", "103": "<(&lt;operator&gt;.lessThan,i &lt; values.length)<SUB>15</SUB>>", "105": "<(&lt;operator&gt;.fieldAccess,values.length)<SUB>15</SUB>>", "107": "<(FIELD_IDENTIFIER,length,length)<SUB>15</SUB>>", "109": "<(IDENTIFIER,i,i++)<SUB>15</SUB>>", "111": "<(CONTROL_STRUCTURE,for (int j = i - 1; Some(j &gt;= 0); j--),for (int j = i - 1; Some(j &gt;= 0); j--))<SUB>16</SUB>>", "113": "<(&lt;operator&gt;.assignment,int j = i - 1)<SUB>16</SUB>>", "115": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>16</SUB>>", "117": "<(LITERAL,1,i - 1)<SUB>16</SUB>>", "119": "<(IDENTIFIER,j,j &gt;= 0)<SUB>16</SUB>>", "121": "<(&lt;operator&gt;.postDecrement,j--)<SUB>16</SUB>>", "123": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>16</SUB>>", "125": "<(&lt;operator&gt;.lessThan,values[i] &lt; values[j])<SUB>17</SUB>>", "127": "<(IDENTIFIER,values,values[i] &lt; values[j])<SUB>17</SUB>>", "129": "<(&lt;operator&gt;.indexAccess,values[j])<SUB>17</SUB>>", "131": "<(IDENTIFIER,j,values[i] &lt; values[j])<SUB>17</SUB>>", "133": "<(&lt;operator&gt;.postIncrement,startinversions++)<SUB>18</SUB>>", "135": "<(LOCAL,int value: int)<SUB>22</SUB>>", "137": "<(IDENTIFIER,value,int value = startinversions % 2)<SUB>22</SUB>>", "139": "<(IDENTIFIER,startinversions,startinversions % 2)<SUB>22</SUB>>", "141": "<(CONTROL_STRUCTURE,&lt;empty&gt;,&lt;empty&gt;)>", "143": "<(&lt;operator&gt;.assignment,int $idx0 = 0)<SUB>23</SUB>>", "145": "<(LITERAL,0,int $idx0 = 0)<SUB>23</SUB>>", "147": "<(IDENTIFIER,$idx0,$idx0 &lt; tasks.length)>", "149": "<(IDENTIFIER,tasks,$idx0 &lt; tasks.length)>", "151": "<(&lt;operator&gt;.postIncrement,$idx0++)<SUB>23</SUB>>", "153": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>23</SUB>>", "155": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)<SUB>23</SUB>>", "157": "<(&lt;operator&gt;.indexAccess,&lt;empty&gt;)<SUB>23</SUB>>", "159": "<(IDENTIFIER,$idx0,&lt;empty&gt;)>", "161": "<(&lt;operator&gt;.assignment,int n = task[1] - task[0])<SUB>24</SUB>>", "163": "<(&lt;operator&gt;.subtraction,task[1] - task[0])<SUB>24</SUB>>", "165": "<(IDENTIFIER,task,task[1] - task[0])<SUB>24</SUB>>", "167": "<(&lt;operator&gt;.indexAccess,task[0])<SUB>24</SUB>>", "169": "<(LITERAL,0,task[1] - task[0])<SUB>24</SUB>>", "171": "<(&lt;operator&gt;.notEquals,n * (n + 1) / 2 % 2 != 0)<SUB>25</SUB>>", "173": "<(&lt;operator&gt;.division,n * (n + 1) / 2)<SUB>25</SUB>>", "175": "<(IDENTIFIER,n,n * (n + 1))<SUB>25</SUB>>", "177": "<(IDENTIFIER,n,n + 1)<SUB>25</SUB>>", "179": "<(LITERAL,2,n * (n + 1) / 2)<SUB>25</SUB>>", "181": "<(LITERAL,0,n * (n + 1) / 2 % 2 != 0)<SUB>25</SUB>>", "183": "<(&lt;operator&gt;.assignment,value = (value + 1) % 2)<SUB>26</SUB>>", "185": "<(&lt;operator&gt;.modulo,(value + 1) % 2)<SUB>26</SUB>>", "187": "<(IDENTIFIER,value,value + 1)<SUB>26</SUB>>", "189": "<(LITERAL,2,(value + 1) % 2)<SUB>26</SUB>>", "191": "<(&lt;operator&gt;.equals,value == 1)<SUB>28</SUB>>", "193": "<(LITERAL,1,value == 1)<SUB>28</SUB>>", "195": "<(println,System.out.println(&quot;odd&quot;))<SUB>29</SUB>>", "197": "<(IDENTIFIER,System,System.out.println(&quot;odd&quot;))<SUB>29</SUB>>", "199": "<(LITERAL,&quot;odd&quot;,System.out.println(&quot;odd&quot;))<SUB>29</SUB>>", "201": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>31</SUB>>", "203": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>32</SUB>>", "205": "<(FIELD_IDENTIFIER,out,out)<SUB>32</SUB>>", "207": "<(MODIFIER,PUBLIC)>", "209": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}