{"edges": [["23", "25"], ["23", "275"], ["23", "276"], ["23", "277"], ["25", "4"], ["25", "26"], ["25", "29"], ["25", "6"], ["25", "40"], ["25", "43"], ["25", "47"], ["25", "48"], ["25", "54"], ["25", "55"], ["25", "60"], ["25", "61"], ["25", "67"], ["25", "107"], ["25", "116"], ["25", "8"], ["25", "244"], ["25", "247"], ["25", "248"], ["25", "268"], ["25", "273"], ["26", "27"], ["26", "28"], ["29", "3"], ["29", "30"], ["30", "31"], ["30", "34"], ["30", "39"], ["31", "32"], ["31", "33"], ["34", "35"], ["34", "36"], ["36", "37"], ["36", "38"], ["40", "41"], ["40", "42"], ["43", "5"], ["43", "44"], ["44", "45"], ["44", "46"], ["48", "49"], ["48", "50"], ["50", "51"], ["50", "52"], ["52", "53"], ["55", "56"], ["55", "57"], ["57", "58"], ["57", "59"], ["61", "62"], ["61", "63"], ["63", "64"], ["64", "65"], ["64", "66"], ["67", "68"], ["67", "69"], ["67", "72"], ["67", "75"], ["67", "77"], ["69", "70"], ["69", "71"], ["72", "73"], ["72", "74"], ["75", "76"], ["77", "78"], ["77", "79"], ["77", "85"], ["79", "80"], ["79", "81"], ["81", "82"], ["81", "84"], ["82", "83"], ["85", "86"], ["85", "87"], ["85", "90"], ["85", "93"], ["85", "95"], ["87", "88"], ["87", "89"], ["90", "91"], ["90", "92"], ["93", "94"], ["95", "96"], ["96", "97"], ["96", "102"], ["97", "98"], ["97", "101"], ["98", "99"], ["98", "100"], ["102", "103"], ["102", "104"], ["104", "105"], ["104", "106"], ["107", "108"], ["107", "115"], ["108", "109"], ["108", "110"], ["110", "111"], ["110", "114"], ["111", "112"], ["111", "113"], ["116", "117"], ["116", "118"], ["116", "125"], ["116", "128"], ["116", "130"], ["118", "119"], ["118", "120"], ["120", "121"], ["120", "124"], ["121", "122"], ["121", "123"], ["125", "126"], ["125", "127"], ["128", "129"], ["130", "131"], ["131", "132"], ["131", "137"], ["132", "133"], ["132", "136"], ["133", "134"], ["133", "135"], ["137", "138"], ["137", "139"], ["137", "144"], ["137", "150"], ["137", "151"], ["137", "162"], ["139", "140"], ["139", "141"], ["141", "142"], ["141", "143"], ["144", "145"], ["144", "148"], ["145", "146"], ["145", "147"], ["148", "149"], ["151", "152"], ["151", "153"], ["153", "154"], ["153", "155"], ["155", "156"], ["155", "161"], ["156", "157"], ["156", "158"], ["158", "159"], ["158", "160"], ["162", "163"], ["162", "164"], ["162", "167"], ["162", "170"], ["162", "172"], ["164", "165"], ["164", "166"], ["167", "168"], ["167", "169"], ["170", "171"], ["172", "173"], ["172", "183"], ["173", "174"], ["173", "181"], ["174", "175"], ["174", "180"], ["175", "176"], ["175", "177"], ["177", "178"], ["177", "179"], ["181", "182"], ["183", "184"], ["183", "185"], ["183", "190"], ["183", "193"], ["183", "195"], ["185", "186"], ["185", "187"], ["187", "188"], ["187", "189"], ["190", "191"], ["190", "192"], ["193", "194"], ["195", "196"], ["195", "206"], ["195", "225"], ["196", "197"], ["196", "204"], ["197", "198"], ["197", "203"], ["198", "199"], ["198", "200"], ["200", "201"], ["200", "202"], ["204", "205"], ["206", "207"], ["206", "214"], ["207", "208"], ["207", "209"], ["209", "210"], ["209", "211"], ["211", "212"], ["211", "213"], ["214", "215"], ["214", "220"], ["215", "216"], ["215", "219"], ["216", "217"], ["216", "218"], ["220", "221"], ["220", "224"], ["221", "222"], ["221", "223"], ["225", "226"], ["225", "233"], ["226", "227"], ["226", "228"], ["228", "229"], ["228", "230"], ["230", "231"], ["230", "232"], ["233", "234"], ["233", "239"], ["234", "235"], ["234", "238"], ["235", "236"], ["235", "237"], ["239", "240"], ["239", "243"], ["240", "241"], ["240", "242"], ["244", "245"], ["244", "246"], ["247", "7"], ["248", "249"], ["248", "250"], ["248", "253"], ["248", "256"], ["248", "258"], ["250", "251"], ["250", "252"], ["253", "254"], ["253", "255"], ["256", "257"], ["258", "259"], ["259", "260"], ["259", "263"], ["260", "261"], ["260", "262"], ["263", "264"], ["263", "265"], ["265", "266"], ["265", "267"], ["268", "269"], ["268", "270"], ["270", "271"], ["270", "272"], ["273", "274"], ["26", "33"], ["29", "42"], ["40", "46"], ["43", "52"], ["48", "57"], ["55", "64"], ["61", "69"], ["107", "121"], ["244", "247"], ["247", "250"], ["268", "273"], ["273", "277"], ["28", "26"], ["42", "40"], ["44", "43"], ["50", "48"], ["57", "55"], ["63", "61"], ["69", "72"], ["72", "82"], ["72", "111"], ["75", "72"], ["108", "107"], ["118", "125"], ["125", "133"], ["125", "246"], ["128", "125"], ["246", "244"], ["250", "253"], ["253", "260"], ["253", "270"], ["256", "253"], ["270", "268"], ["31", "38"], ["34", "29"], ["46", "44"], ["52", "50"], ["64", "63"], ["79", "87"], ["110", "108"], ["120", "118"], ["259", "256"], ["33", "31"], ["36", "34"], ["81", "79"], ["87", "90"], ["90", "98"], ["90", "75"], ["93", "90"], ["111", "110"], ["121", "120"], ["132", "141"], ["132", "128"], ["260", "265"], ["263", "259"], ["38", "36"], ["82", "81"], ["96", "93"], ["133", "132"], ["139", "145"], ["151", "164"], ["265", "263"], ["97", "104"], ["102", "96"], ["141", "139"], ["145", "128"], ["145", "158"], ["153", "151"], ["164", "167"], ["167", "177"], ["167", "128"], ["170", "167"], ["98", "97"], ["104", "102"], ["155", "153"], ["156", "155"], ["174", "170"], ["174", "187"], ["185", "190"], ["190", "200"], ["190", "170"], ["193", "190"], ["158", "156"], ["175", "174"], ["187", "185"], ["206", "230"], ["225", "193"], ["177", "175"], ["197", "193"], ["197", "211"], ["207", "216"], ["214", "206"], ["226", "235"], ["233", "225"], ["198", "197"], ["209", "207"], ["215", "221"], ["220", "214"], ["228", "226"], ["234", "240"], ["239", "233"], ["200", "198"], ["211", "209"], ["216", "215"], ["221", "220"], ["230", "228"], ["235", "234"], ["240", "239"], ["23", "28"], ["24", "277"], ["26", "277"], ["31", "277"], ["34", "277"], ["34", "277"], ["34", "277"], ["29", "277"], ["40", "277"], ["43", "277"], ["43", "277"], ["50", "277"], ["52", "277"], ["50", "277"], ["48", "277"], ["48", "277"], ["55", "277"], ["55", "277"], ["55", "277"], ["61", "277"], ["61", "277"], ["61", "277"], ["107", "277"], ["107", "277"], ["120", "277"], ["118", "277"], ["118", "277"], ["125", "277"], ["125", "277"], ["244", "277"], ["247", "277"], ["250", "277"], ["253", "277"], ["253", "277"], ["253", "277"], ["270", "277"], ["268", "277"], ["268", "277"], ["273", "277"], ["273", "277"], ["259", "277"], ["259", "277"], ["259", "277"], ["256", "277"], ["132", "277"], ["132", "277"], ["141", "277"], ["139", "277"], ["139", "277"], ["145", "277"], ["145", "277"], ["151", "277"], ["156", "277"], ["156", "277"], ["155", "277"], ["153", "277"], ["151", "277"], ["151", "277"], ["175", "277"], ["174", "277"], ["174", "277"], ["185", "277"], ["185", "277"], ["190", "277"], ["190", "277"], ["198", "277"], ["197", "277"], ["197", "277"], ["209", "277"], ["206", "277"], ["214", "277"], ["206", "277"], ["206", "277"], ["228", "277"], ["225", "277"], ["234", "277"], ["234", "277"], ["233", "277"], ["233", "277"], ["225", "277"], ["225", "277"], ["193", "277"], ["170", "277"], ["128", "277"], ["79", "277"], ["82", "277"], ["81", "277"], ["79", "277"], ["79", "277"], ["87", "277"], ["90", "277"], ["90", "277"], ["75", "277"], ["96", "277"], ["102", "277"], ["96", "277"], ["96", "277"], ["93", "277"], ["102", "277"], ["23", "24"], ["23", "26"], ["23", "40"], ["50", "48"], ["50", "48"], ["57", "55"], ["63", "61"], ["23", "107"], ["23", "244"], ["26", "29"], ["23", "29"], ["31", "29"], ["34", "29"], ["40", "43"], ["23", "43"], ["23", "69"], ["120", "118"], ["120", "118"], ["244", "247"], ["23", "247"], ["23", "250"], ["43", "268"], ["23", "268"], ["270", "268"], ["270", "268"], ["268", "273"], ["23", "273"], ["23", "31"], ["23", "39"], ["23", "50"], ["52", "50"], ["48", "57"], ["23", "57"], ["64", "63"], ["64", "63"], ["69", "72"], ["75", "72"], ["23", "72"], ["64", "72"], ["90", "72"], ["72", "75"], ["23", "75"], ["81", "79"], ["81", "79"], ["118", "125"], ["128", "125"], ["23", "125"], ["125", "128"], ["141", "128"], ["175", "128"], ["198", "128"], ["228", "128"], ["23", "128"], ["250", "253"], ["256", "253"], ["23", "253"], ["121", "253"], ["167", "253"], ["265", "256"], ["23", "256"], ["247", "270"], ["260", "270"], ["23", "270"], ["31", "34"], ["23", "34"], ["29", "52"], ["23", "52"], ["23", "64"], ["57", "64"], ["23", "87"], ["111", "110"], ["111", "110"], ["23", "110"], ["121", "120"], ["121", "120"], ["23", "120"], ["260", "259"], ["260", "259"], ["61", "259"], ["82", "81"], ["23", "81"], ["87", "90"], ["93", "90"], ["23", "90"], ["72", "90"], ["90", "93"], ["23", "93"], ["102", "96"], ["102", "96"], ["23", "111"], ["72", "111"], ["23", "121"], ["111", "121"], ["61", "132"], ["234", "132"], ["23", "132"], ["141", "139"], ["141", "139"], ["153", "151"], ["153", "151"], ["247", "260"], ["23", "260"], ["52", "82"], ["23", "82"], ["23", "164"], ["23", "265"], ["253", "265"], ["23", "102"], ["79", "102"], ["50", "141"], ["23", "141"], ["125", "141"], ["139", "145"], ["23", "145"], ["23", "153"], ["155", "153"], ["155", "153"], ["164", "167"], ["170", "167"], ["23", "167"], ["121", "167"], ["190", "167"], ["177", "170"], ["211", "170"], ["23", "170"], ["156", "155"], ["156", "155"], ["23", "155"], ["177", "185"], ["23", "185"], ["158", "156"], ["23", "156"], ["158", "156"], ["175", "174"], ["175", "174"], ["23", "174"], ["185", "190"], ["193", "190"], ["23", "190"], ["167", "190"], ["200", "193"], ["230", "193"], ["23", "193"], ["214", "206"], ["214", "206"], ["233", "225"], ["233", "225"], ["145", "158"], ["23", "158"], ["141", "175"], ["198", "175"], ["228", "175"], ["23", "175"], ["177", "175"], ["177", "175"], ["177", "187"], ["23", "187"], ["61", "206"], ["61", "225"], ["23", "177"], ["167", "177"], ["198", "197"], ["198", "197"], ["23", "197"], ["215", "214"], ["215", "214"], ["234", "233"], ["234", "233"], ["96", "233"], ["175", "198"], ["228", "198"], ["23", "198"], ["200", "198"], ["200", "198"], ["198", "209"], ["23", "209"], ["211", "209"], ["211", "209"], ["61", "215"], ["132", "215"], ["234", "215"], ["151", "215"], ["234", "215"], ["23", "215"], ["209", "228"], ["23", "228"], ["230", "228"], ["230", "228"], ["61", "234"], ["215", "234"], ["215", "234"], ["23", "234"], ["23", "200"], ["190", "200"], ["23", "211"], ["177", "211"], ["23", "230"], ["200", "230"], ["72", "75"], ["72", "81"], ["72", "87"], ["72", "90"], ["72", "79"], ["72", "72"], ["72", "82"], ["125", "128"], ["125", "132"], ["125", "125"], ["125", "133"], ["253", "256"], ["253", "259"], ["253", "265"], ["253", "260"], ["253", "253"], ["253", "263"], ["90", "96"], ["90", "98"], ["90", "102"], ["90", "104"], ["90", "97"], ["90", "93"], ["90", "90"], ["132", "145"], ["132", "139"], ["132", "141"], ["145", "167"], ["145", "151"], ["145", "153"], ["145", "164"], ["145", "155"], ["145", "158"], ["145", "156"], ["167", "167"], ["167", "170"], ["167", "174"], ["167", "177"], ["167", "175"], ["174", "185"], ["174", "187"], ["174", "190"], ["190", "197"], ["190", "198"], ["190", "190"], ["190", "193"], ["190", "200"], ["197", "214"], ["197", "230"], ["197", "225"], ["197", "215"], ["197", "209"], ["197", "240"], ["197", "226"], ["197", "228"], ["197", "206"], ["197", "207"], ["197", "221"], ["197", "233"], ["197", "239"], ["197", "235"], ["197", "220"], ["197", "234"], ["197", "211"], ["197", "216"]], "features": {"23": "<(METHOD,main)<SUB>1</SUB>>", "25": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "26": "<(&lt;operator&gt;.assignment,ANY s = new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "3": "<(IDENTIFIER,s,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "31": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "33": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>2</SUB>>", "35": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "37": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>2</SUB>>", "39": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "40": "<(&lt;operator&gt;.assignment,ANY out = new PrintWriter(System.out))<SUB>3</SUB>>", "42": "<(&lt;operator&gt;.alloc,new PrintWriter(System.out))<SUB>3</SUB>>", "5": "<(IDENTIFIER,out,new PrintWriter(System.out))<SUB>3</SUB>>", "45": "<(IDENTIFIER,System,new PrintWriter(System.out))<SUB>3</SUB>>", "47": "<(LOCAL,int n: int)<SUB>5</SUB>>", "49": "<(IDENTIFIER,n,int n = valueOf(s.readLine()))<SUB>5</SUB>>", "51": "<(IDENTIFIER,Integer,valueOf(s.readLine()))<SUB>5</SUB>>", "53": "<(IDENTIFIER,s,readLine())<SUB>5</SUB>>", "55": "<(&lt;operator&gt;.assignment,double[][] prob = new double[n][n])<SUB>6</SUB>>", "57": "<(&lt;operator&gt;.alloc,new double[n][n])>", "59": "<(IDENTIFIER,n,new double[n][n])<SUB>6</SUB>>", "61": "<(&lt;operator&gt;.assignment,double[] dp = new double[1 &lt;&lt; n])<SUB>7</SUB>>", "63": "<(&lt;operator&gt;.alloc,new double[1 &lt;&lt; n])>", "65": "<(LITERAL,1,1 &lt;&lt; n)<SUB>7</SUB>>", "67": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>8</SUB>>", "69": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>8</SUB>>", "71": "<(LITERAL,0,int i = 0)<SUB>8</SUB>>", "73": "<(IDENTIFIER,i,i &lt; n)<SUB>8</SUB>>", "75": "<(&lt;operator&gt;.postIncrement,i++)<SUB>8</SUB>>", "77": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>>", "79": "<(&lt;operator&gt;.assignment,String[] line = split(&quot; &quot;))<SUB>9</SUB>>", "81": "<(split,split(&quot; &quot;))<SUB>9</SUB>>", "83": "<(IDENTIFIER,s,readLine())<SUB>9</SUB>>", "85": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>10</SUB>>", "87": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>10</SUB>>", "89": "<(LITERAL,0,int j = 0)<SUB>10</SUB>>", "91": "<(IDENTIFIER,j,j &lt; n)<SUB>10</SUB>>", "93": "<(&lt;operator&gt;.postIncrement,j++)<SUB>10</SUB>>", "95": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "97": "<(&lt;operator&gt;.indexAccess,prob[i][j])<SUB>11</SUB>>", "99": "<(IDENTIFIER,prob,prob[i][j] = Double.valueOf(line[j]))<SUB>11</SUB>>", "101": "<(IDENTIFIER,j,prob[i][j] = Double.valueOf(line[j]))<SUB>11</SUB>>", "103": "<(IDENTIFIER,Double,Double.valueOf(line[j]))<SUB>11</SUB>>", "105": "<(IDENTIFIER,line,Double.valueOf(line[j]))<SUB>11</SUB>>", "107": "<(&lt;operator&gt;.assignment,dp[(1 &lt;&lt; n) - 1] = 1.0d)<SUB>15</SUB>>", "109": "<(IDENTIFIER,dp,dp[(1 &lt;&lt; n) - 1] = 1.0d)<SUB>15</SUB>>", "111": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; n)<SUB>15</SUB>>", "113": "<(IDENTIFIER,n,1 &lt;&lt; n)<SUB>15</SUB>>", "115": "<(LITERAL,1.0d,dp[(1 &lt;&lt; n) - 1] = 1.0d)<SUB>15</SUB>>", "117": "<(LOCAL,int p: int)<SUB>16</SUB>>", "119": "<(IDENTIFIER,p,int p = (1 &lt;&lt; n) - 1)<SUB>16</SUB>>", "121": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; n)<SUB>16</SUB>>", "123": "<(IDENTIFIER,n,1 &lt;&lt; n)<SUB>16</SUB>>", "125": "<(&lt;operator&gt;.greaterEqualsThan,p &gt;= 1)<SUB>16</SUB>>", "127": "<(LITERAL,1,p &gt;= 1)<SUB>16</SUB>>", "129": "<(IDENTIFIER,p,p--)<SUB>16</SUB>>", "131": "<(CONTROL_STRUCTURE,if (dp[p] &gt; 0.0d),if (dp[p] &gt; 0.0d))<SUB>17</SUB>>", "133": "<(&lt;operator&gt;.indexAccess,dp[p])<SUB>17</SUB>>", "135": "<(IDENTIFIER,p,dp[p] &gt; 0.0d)<SUB>17</SUB>>", "137": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>17</SUB>>", "139": "<(&lt;operator&gt;.assignment,int left = Integer.bitCount(p))<SUB>18</SUB>>", "141": "<(bitCount,Integer.bitCount(p))<SUB>18</SUB>>", "143": "<(IDENTIFIER,p,Integer.bitCount(p))<SUB>18</SUB>>", "145": "<(&lt;operator&gt;.equals,left == 1)<SUB>19</SUB>>", "147": "<(LITERAL,1,left == 1)<SUB>19</SUB>>", "149": "<(CONTROL_STRUCTURE,continue;,continue;)<SUB>20</SUB>>", "151": "<(&lt;operator&gt;.assignment,double baseProb = 1.0d / (left * (left - 1) / 2))<SUB>22</SUB>>", "153": "<(&lt;operator&gt;.division,1.0d / (left * (left - 1) / 2))<SUB>22</SUB>>", "155": "<(&lt;operator&gt;.division,left * (left - 1) / 2)<SUB>22</SUB>>", "157": "<(IDENTIFIER,left,left * (left - 1))<SUB>22</SUB>>", "159": "<(IDENTIFIER,left,left - 1)<SUB>22</SUB>>", "161": "<(LITERAL,2,left * (left - 1) / 2)<SUB>22</SUB>>", "163": "<(LOCAL,int i: int)<SUB>23</SUB>>", "165": "<(IDENTIFIER,i,int i = 0)<SUB>23</SUB>>", "167": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>23</SUB>>", "169": "<(IDENTIFIER,n,i &lt; n)<SUB>23</SUB>>", "171": "<(IDENTIFIER,i,i++)<SUB>23</SUB>>", "173": "<(CONTROL_STRUCTURE,if ((p &amp; (1 &lt;&lt; i)) == 0),if ((p &amp; (1 &lt;&lt; i)) == 0))<SUB>24</SUB>>", "175": "<(&lt;operator&gt;.and,p &amp; (1 &lt;&lt; i))<SUB>24</SUB>>", "177": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; i)<SUB>24</SUB>>", "179": "<(IDENTIFIER,i,1 &lt;&lt; i)<SUB>24</SUB>>", "181": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>24</SUB>>", "183": "<(CONTROL_STRUCTURE,for (int j = i + 1; Some(j &lt; n); j++),for (int j = i + 1; Some(j &lt; n); j++))<SUB>27</SUB>>", "185": "<(&lt;operator&gt;.assignment,int j = i + 1)<SUB>27</SUB>>", "187": "<(&lt;operator&gt;.addition,i + 1)<SUB>27</SUB>>", "189": "<(LITERAL,1,i + 1)<SUB>27</SUB>>", "191": "<(IDENTIFIER,j,j &lt; n)<SUB>27</SUB>>", "193": "<(&lt;operator&gt;.postIncrement,j++)<SUB>27</SUB>>", "195": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>27</SUB>>", "197": "<(&lt;operator&gt;.equals,(p &amp; (1 &lt;&lt; j)) == 0)<SUB>28</SUB>>", "199": "<(IDENTIFIER,p,p &amp; (1 &lt;&lt; j))<SUB>28</SUB>>", "201": "<(LITERAL,1,1 &lt;&lt; j)<SUB>28</SUB>>", "203": "<(LITERAL,0,(p &amp; (1 &lt;&lt; j)) == 0)<SUB>28</SUB>>", "205": "<(CONTROL_STRUCTURE,continue;,continue;)<SUB>29</SUB>>", "207": "<(&lt;operator&gt;.indexAccess,dp[p - (1 &lt;&lt; i)])<SUB>31</SUB>>", "209": "<(&lt;operator&gt;.subtraction,p - (1 &lt;&lt; i))<SUB>31</SUB>>", "211": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; i)<SUB>31</SUB>>", "213": "<(IDENTIFIER,i,1 &lt;&lt; i)<SUB>31</SUB>>", "215": "<(&lt;operator&gt;.multiplication,dp[p] * baseProb)<SUB>31</SUB>>", "217": "<(IDENTIFIER,dp,dp[p] * baseProb)<SUB>31</SUB>>", "219": "<(IDENTIFIER,baseProb,dp[p] * baseProb)<SUB>31</SUB>>", "221": "<(&lt;operator&gt;.indexAccess,prob[j])<SUB>31</SUB>>", "223": "<(IDENTIFIER,j,dp[p] * baseProb * prob[j][i])<SUB>31</SUB>>", "225": "<(&lt;operator&gt;.assignmentPlus,dp[p - (1 &lt;&lt; j)] += dp[p] * baseProb * prob[i][j])<SUB>32</SUB>>", "227": "<(IDENTIFIER,dp,dp[p - (1 &lt;&lt; j)] += dp[p] * baseProb * prob[i][j])<SUB>32</SUB>>", "229": "<(IDENTIFIER,p,p - (1 &lt;&lt; j))<SUB>32</SUB>>", "231": "<(LITERAL,1,1 &lt;&lt; j)<SUB>32</SUB>>", "233": "<(&lt;operator&gt;.multiplication,dp[p] * baseProb * prob[i][j])<SUB>32</SUB>>", "235": "<(&lt;operator&gt;.indexAccess,dp[p])<SUB>32</SUB>>", "237": "<(IDENTIFIER,p,dp[p] * baseProb)<SUB>32</SUB>>", "239": "<(&lt;operator&gt;.indexAccess,prob[i][j])<SUB>32</SUB>>", "241": "<(IDENTIFIER,prob,dp[p] * baseProb * prob[i][j])<SUB>32</SUB>>", "243": "<(IDENTIFIER,j,dp[p] * baseProb * prob[i][j])<SUB>32</SUB>>", "244": "<(&lt;operator&gt;.assignment,StringBuffer b = new StringBuffer())<SUB>39</SUB>>", "246": "<(&lt;operator&gt;.alloc,new StringBuffer())<SUB>39</SUB>>", "7": "<(IDENTIFIER,b,new StringBuffer())<SUB>39</SUB>>", "249": "<(LOCAL,int i: int)<SUB>40</SUB>>", "251": "<(IDENTIFIER,i,int i = 0)<SUB>40</SUB>>", "253": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>40</SUB>>", "255": "<(IDENTIFIER,n,i &lt; n)<SUB>40</SUB>>", "257": "<(IDENTIFIER,i,i++)<SUB>40</SUB>>", "259": "<(append,b.append(&quot; &quot;).append(dp[1 &lt;&lt; i]))<SUB>41</SUB>>", "261": "<(IDENTIFIER,b,b.append(&quot; &quot;))<SUB>41</SUB>>", "263": "<(&lt;operator&gt;.indexAccess,dp[1 &lt;&lt; i])<SUB>41</SUB>>", "265": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; i)<SUB>41</SUB>>", "267": "<(IDENTIFIER,i,1 &lt;&lt; i)<SUB>41</SUB>>", "269": "<(IDENTIFIER,out,println(b.substring(1)))<SUB>43</SUB>>", "271": "<(IDENTIFIER,b,b.substring(1))<SUB>43</SUB>>", "273": "<(flush,flush())<SUB>44</SUB>>", "275": "<(MODIFIER,PUBLIC)>", "277": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}