{"edges": [["19", "20"], ["19", "21"], ["19", "88"], ["19", "89"], ["19", "90"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "40"], ["21", "43"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["40", "41"], ["40", "42"], ["43", "44"], ["43", "51"], ["43", "60"], ["44", "45"], ["44", "48"], ["45", "46"], ["45", "47"], ["48", "49"], ["48", "50"], ["51", "52"], ["51", "55"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "59"], ["56", "57"], ["56", "58"], ["60", "61"], ["61", "62"], ["61", "63"], ["61", "66"], ["61", "81"], ["63", "64"], ["63", "65"], ["66", "67"], ["66", "68"], ["68", "69"], ["68", "74"], ["69", "70"], ["69", "71"], ["69", "72"], ["69", "73"], ["74", "75"], ["74", "80"], ["75", "76"], ["75", "79"], ["76", "77"], ["76", "78"], ["81", "82"], ["81", "85"], ["82", "83"], ["82", "84"], ["85", "86"], ["85", "87"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "40"], ["40", "45"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["44", "54"], ["44", "63"], ["51", "90"], ["28", "26"], ["45", "44"], ["45", "48"], ["48", "44"], ["52", "56"], ["55", "51"], ["54", "52"], ["56", "55"], ["63", "69"], ["66", "84"], ["81", "90"], ["68", "66"], ["82", "85"], ["85", "81"], ["69", "76"], ["74", "68"], ["84", "82"], ["75", "74"], ["76", "75"], ["19", "24"], ["20", "90"], ["22", "90"], ["25", "90"], ["25", "90"], ["30", "90"], ["37", "90"], ["35", "90"], ["35", "90"], ["40", "90"], ["45", "90"], ["44", "90"], ["44", "90"], ["44", "90"], ["51", "90"], ["56", "90"], ["55", "90"], ["55", "90"], ["51", "90"], ["51", "90"], ["69", "90"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["19", "40"], ["22", "25"], ["19", "25"], ["25", "32"], ["19", "32"], ["32", "37"], ["19", "37"], ["45", "44"], ["45", "44"], ["48", "44"], ["48", "44"], ["55", "51"], ["55", "51"], ["35", "45"], ["19", "45"], ["30", "48"], ["19", "48"], ["56", "55"], ["56", "55"], ["40", "55"], ["19", "55"], ["19", "63"], ["68", "66"], ["68", "66"], ["19", "56"], ["30", "56"], ["48", "56"], ["63", "66"], ["19", "66"], ["85", "81"], ["85", "81"], ["69", "68"], ["69", "68"], ["69", "68"], ["69", "68"], ["74", "68"], ["74", "68"], ["66", "85"], ["19", "85"], ["74", "85"], ["19", "69"], ["45", "69"], ["40", "69"], ["75", "74"], ["75", "74"], ["69", "74"], ["19", "74"], ["76", "75"], ["76", "75"], ["19", "75"], ["19", "76"], ["30", "76"], ["48", "76"], ["44", "68"], ["44", "51"], ["44", "66"], ["44", "75"], ["44", "52"], ["44", "81"], ["44", "84"], ["44", "85"], ["44", "56"], ["44", "69"], ["44", "74"], ["44", "63"], ["44", "76"], ["44", "55"], ["44", "82"], ["44", "54"], ["45", "48"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>3</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>3</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>3</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>3</SUB>>", "29": "<(LOCAL,long x: long)<SUB>4</SUB>>", "31": "<(IDENTIFIER,x,long x = nextLong())<SUB>4</SUB>>", "33": "<(IDENTIFIER,sc,nextLong())<SUB>4</SUB>>", "35": "<(&lt;operator&gt;.assignment,long k = nextLong())<SUB>5</SUB>>", "37": "<(nextLong,nextLong())<SUB>5</SUB>>", "39": "<(LOCAL,long mod: long)<SUB>6</SUB>>", "41": "<(IDENTIFIER,mod,long mod = 1000000007)<SUB>6</SUB>>", "43": "<(CONTROL_STRUCTURE,if (k == 0 || x == 0),if (k == 0 || x == 0))<SUB>7</SUB>>", "45": "<(&lt;operator&gt;.equals,k == 0)<SUB>7</SUB>>", "47": "<(LITERAL,0,k == 0)<SUB>7</SUB>>", "49": "<(IDENTIFIER,x,x == 0)<SUB>7</SUB>>", "51": "<(println,System.out.println((2 * x) % mod))<SUB>8</SUB>>", "53": "<(IDENTIFIER,System,System.out.println((2 * x) % mod))<SUB>8</SUB>>", "55": "<(&lt;operator&gt;.modulo,(2 * x) % mod)<SUB>8</SUB>>", "57": "<(LITERAL,2,2 * x)<SUB>8</SUB>>", "59": "<(IDENTIFIER,mod,(2 * x) % mod)<SUB>8</SUB>>", "61": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "63": "<(&lt;operator&gt;.assignment,long answer = 1)<SUB>10</SUB>>", "65": "<(LITERAL,1,long answer = 1)<SUB>10</SUB>>", "67": "<(IDENTIFIER,answer,answer += (power(2, k, mod)) * (((2 * x) - 1) % mod))<SUB>11</SUB>>", "69": "<(power,power(2, k, mod))<SUB>11</SUB>>", "71": "<(LITERAL,2,power(2, k, mod))<SUB>11</SUB>>", "73": "<(IDENTIFIER,mod,power(2, k, mod))<SUB>11</SUB>>", "75": "<(&lt;operator&gt;.subtraction,(2 * x) - 1)<SUB>11</SUB>>", "77": "<(LITERAL,2,2 * x)<SUB>11</SUB>>", "79": "<(LITERAL,1,(2 * x) - 1)<SUB>11</SUB>>", "81": "<(println,System.out.println(answer % mod))<SUB>12</SUB>>", "83": "<(IDENTIFIER,System,System.out.println(answer % mod))<SUB>12</SUB>>", "85": "<(&lt;operator&gt;.modulo,answer % mod)<SUB>12</SUB>>", "87": "<(IDENTIFIER,mod,answer % mod)<SUB>12</SUB>>", "89": "<(MODIFIER,STATIC)>"}}