{"edges": [["21", "23"], ["21", "205"], ["21", "206"], ["21", "207"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "28"], ["23", "29"], ["23", "33"], ["23", "34"], ["23", "38"], ["23", "39"], ["23", "49"], ["23", "50"], ["23", "56"], ["23", "61"], ["23", "6"], ["23", "87"], ["23", "90"], ["23", "91"], ["23", "134"], ["23", "135"], ["23", "138"], ["23", "139"], ["23", "148"], ["23", "149"], ["23", "154"], ["23", "200"], ["24", "25"], ["24", "26"], ["27", "3"], ["29", "30"], ["29", "31"], ["31", "32"], ["34", "35"], ["34", "36"], ["36", "37"], ["39", "40"], ["39", "41"], ["41", "42"], ["41", "48"], ["42", "43"], ["42", "44"], ["44", "45"], ["44", "46"], ["44", "47"], ["50", "51"], ["50", "52"], ["52", "53"], ["53", "54"], ["53", "55"], ["56", "57"], ["56", "60"], ["57", "58"], ["57", "59"], ["61", "62"], ["61", "63"], ["61", "66"], ["61", "69"], ["61", "71"], ["63", "64"], ["63", "65"], ["66", "67"], ["66", "68"], ["69", "70"], ["71", "72"], ["71", "78"], ["72", "73"], ["72", "76"], ["73", "74"], ["73", "75"], ["76", "77"], ["78", "79"], ["78", "82"], ["79", "80"], ["79", "81"], ["82", "83"], ["82", "84"], ["84", "85"], ["84", "86"], ["87", "88"], ["87", "89"], ["90", "5"], ["91", "92"], ["91", "93"], ["91", "96"], ["91", "99"], ["91", "101"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["99", "100"], ["101", "102"], ["101", "103"], ["101", "115"], ["101", "116"], ["101", "121"], ["101", "128"], ["103", "104"], ["103", "105"], ["105", "106"], ["105", "107"], ["105", "110"], ["107", "108"], ["107", "109"], ["110", "111"], ["110", "114"], ["111", "112"], ["111", "113"], ["116", "117"], ["116", "118"], ["118", "119"], ["118", "120"], ["121", "122"], ["121", "125"], ["122", "123"], ["122", "124"], ["125", "126"], ["125", "127"], ["128", "129"], ["128", "130"], ["128", "131"], ["131", "132"], ["131", "133"], ["135", "136"], ["135", "137"], ["139", "140"], ["139", "141"], ["141", "142"], ["141", "147"], ["142", "143"], ["142", "144"], ["144", "145"], ["144", "146"], ["149", "150"], ["149", "151"], ["151", "152"], ["152", "153"], ["154", "155"], ["154", "157"], ["155", "156"], ["157", "158"], ["157", "159"], ["157", "163"], ["157", "164"], ["157", "168"], ["157", "169"], ["157", "174"], ["157", "175"], ["157", "182"], ["157", "191"], ["159", "160"], ["159", "161"], ["161", "162"], ["164", "165"], ["164", "166"], ["166", "167"], ["169", "170"], ["169", "171"], ["171", "172"], ["171", "173"], ["175", "176"], ["175", "177"], ["177", "178"], ["177", "181"], ["178", "179"], ["178", "180"], ["182", "183"], ["182", "184"], ["184", "185"], ["184", "190"], ["185", "186"], ["185", "187"], ["187", "188"], ["187", "189"], ["191", "192"], ["191", "193"], ["193", "194"], ["193", "199"], ["194", "195"], ["194", "196"], ["196", "197"], ["196", "198"], ["200", "201"], ["200", "204"], ["201", "202"], ["201", "203"], ["24", "27"], ["27", "31"], ["29", "36"], ["34", "43"], ["39", "53"], ["50", "57"], ["56", "63"], ["87", "90"], ["90", "93"], ["135", "144"], ["139", "152"], ["149", "155"], ["200", "207"], ["26", "24"], ["31", "29"], ["36", "34"], ["41", "39"], ["52", "50"], ["57", "56"], ["63", "66"], ["66", "73"], ["66", "89"], ["69", "66"], ["89", "87"], ["93", "96"], ["96", "107"], ["96", "135"], ["99", "96"], ["141", "139"], ["151", "149"], ["155", "161"], ["155", "203"], ["201", "200"], ["42", "41"], ["53", "52"], ["72", "79"], ["78", "69"], ["103", "118"], ["116", "122"], ["128", "99"], ["142", "141"], ["152", "151"], ["159", "166"], ["164", "171"], ["169", "178"], ["175", "187"], ["182", "196"], ["191", "155"], ["203", "201"], ["43", "44"], ["44", "42"], ["73", "76"], ["76", "72"], ["79", "84"], ["82", "78"], ["105", "103"], ["118", "116"], ["122", "125"], ["122", "131"], ["125", "131"], ["131", "128"], ["144", "142"], ["161", "159"], ["166", "164"], ["171", "169"], ["177", "175"], ["184", "182"], ["193", "191"], ["84", "82"], ["107", "111"], ["110", "105"], ["178", "177"], ["185", "184"], ["194", "193"], ["111", "110"], ["187", "185"], ["196", "194"], ["21", "26"], ["22", "207"], ["24", "207"], ["27", "207"], ["29", "207"], ["36", "207"], ["34", "207"], ["34", "207"], ["39", "207"], ["44", "207"], ["44", "207"], ["42", "207"], ["41", "207"], ["39", "207"], ["39", "207"], ["50", "207"], ["52", "207"], ["50", "207"], ["50", "207"], ["56", "207"], ["56", "207"], ["63", "207"], ["87", "207"], ["90", "207"], ["93", "207"], ["96", "207"], ["96", "207"], ["135", "207"], ["135", "207"], ["142", "207"], ["142", "207"], ["141", "207"], ["139", "207"], ["139", "207"], ["152", "207"], ["151", "207"], ["149", "207"], ["155", "207"], ["155", "207"], ["200", "207"], ["200", "207"], ["200", "207"], ["166", "207"], ["164", "207"], ["164", "207"], ["169", "207"], ["169", "207"], ["178", "207"], ["177", "207"], ["175", "207"], ["175", "207"], ["185", "207"], ["185", "207"], ["184", "207"], ["182", "207"], ["182", "207"], ["194", "207"], ["194", "207"], ["193", "207"], ["191", "207"], ["191", "207"], ["105", "207"], ["105", "207"], ["110", "207"], ["105", "207"], ["103", "207"], ["103", "207"], ["116", "207"], ["116", "207"], ["122", "207"], ["125", "207"], ["128", "207"], ["131", "207"], ["128", "207"], ["128", "207"], ["99", "207"], ["76", "207"], ["72", "207"], ["72", "207"], ["78", "207"], ["78", "207"], ["69", "207"], ["21", "22"], ["21", "24"], ["31", "29"], ["36", "34"], ["41", "39"], ["41", "39"], ["52", "50"], ["21", "56"], ["21", "87"], ["96", "135"], ["21", "135"], ["141", "139"], ["141", "139"], ["151", "149"], ["24", "27"], ["21", "27"], ["21", "63"], ["87", "90"], ["21", "90"], ["21", "93"], ["139", "200"], ["191", "200"], ["21", "200"], ["27", "31"], ["21", "31"], ["31", "36"], ["21", "36"], ["21", "41"], ["44", "41"], ["44", "41"], ["44", "41"], ["29", "52"], ["21", "52"], ["63", "66"], ["69", "66"], ["21", "66"], ["29", "66"], ["84", "69"], ["21", "69"], ["76", "72"], ["50", "78"], ["93", "96"], ["99", "96"], ["21", "96"], ["66", "96"], ["96", "99"], ["21", "99"], ["105", "103"], ["105", "103"], ["105", "103"], ["118", "116"], ["118", "116"], ["142", "141"], ["142", "141"], ["21", "141"], ["152", "151"], ["149", "155"], ["161", "155"], ["21", "155"], ["161", "159"], ["166", "164"], ["171", "169"], ["171", "169"], ["177", "175"], ["177", "175"], ["184", "182"], ["184", "182"], ["193", "191"], ["193", "191"], ["21", "42"], ["44", "42"], ["44", "42"], ["44", "42"], ["29", "53"], ["21", "53"], ["72", "78"], ["21", "125"], ["118", "128"], ["21", "128"], ["118", "128"], ["122", "128"], ["125", "128"], ["21", "142"], ["135", "142"], ["90", "152"], ["128", "152"], ["21", "152"], ["139", "182"], ["191", "182"], ["21", "182"], ["182", "191"], ["21", "191"], ["21", "44"], ["34", "44"], ["36", "76"], ["21", "76"], ["44", "105"], ["21", "105"], ["50", "105"], ["110", "105"], ["110", "105"], ["90", "118"], ["128", "118"], ["21", "118"], ["103", "118"], ["116", "122"], ["21", "122"], ["122", "131"], ["125", "131"], ["21", "131"], ["135", "144"], ["21", "144"], ["155", "161"], ["21", "161"], ["159", "166"], ["21", "166"], ["164", "171"], ["21", "171"], ["171", "177"], ["21", "177"], ["185", "184"], ["185", "184"], ["21", "184"], ["194", "193"], ["194", "193"], ["21", "193"], ["66", "84"], ["21", "84"], ["50", "110"], ["105", "110"], ["78", "110"], ["39", "110"], ["21", "110"], ["171", "178"], ["21", "178"], ["187", "185"], ["21", "185"], ["187", "185"], ["196", "194"], ["21", "194"], ["196", "194"], ["169", "187"], ["21", "187"], ["175", "196"], ["21", "196"], ["66", "73"], ["66", "66"], ["66", "84"], ["66", "72"], ["66", "69"], ["66", "76"], ["66", "82"], ["66", "79"], ["66", "78"], ["96", "107"], ["96", "96"], ["96", "116"], ["96", "122"], ["96", "99"], ["96", "128"], ["96", "131"], ["96", "103"], ["96", "105"], ["96", "118"], ["96", "110"], ["96", "111"], ["155", "169"], ["155", "161"], ["155", "193"], ["155", "166"], ["155", "178"], ["155", "196"], ["155", "185"], ["155", "159"], ["155", "191"], ["155", "187"], ["155", "184"], ["155", "177"], ["155", "194"], ["155", "182"], ["155", "164"], ["155", "155"], ["155", "175"], ["155", "171"], ["122", "125"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new FastReader())<SUB>3</SUB>>", "26": "<(&lt;operator&gt;.alloc,new FastReader())<SUB>3</SUB>>", "3": "<(IDENTIFIER,sc,new FastReader())<SUB>3</SUB>>", "29": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>5</SUB>>", "31": "<(nextInt,nextInt())<SUB>5</SUB>>", "33": "<(LOCAL,int k: int)<SUB>6</SUB>>", "35": "<(IDENTIFIER,k,int k = nextInt())<SUB>6</SUB>>", "37": "<(IDENTIFIER,sc,nextInt())<SUB>6</SUB>>", "39": "<(&lt;operator&gt;.assignment,long one = (long) Math.pow(2, k) - 1)<SUB>7</SUB>>", "41": "<(&lt;operator&gt;.subtraction,(long) Math.pow(2, k) - 1)<SUB>7</SUB>>", "43": "<(TYPE_REF,long,long)<SUB>7</SUB>>", "45": "<(IDENTIFIER,Math,Math.pow(2, k))<SUB>7</SUB>>", "47": "<(IDENTIFIER,k,Math.pow(2, k))<SUB>7</SUB>>", "49": "<(LOCAL,long[] arr: long[])<SUB>9</SUB>>", "51": "<(IDENTIFIER,arr,long[] arr = new long[n + 1])<SUB>9</SUB>>", "53": "<(&lt;operator&gt;.addition,n + 1)<SUB>9</SUB>>", "55": "<(LITERAL,1,n + 1)<SUB>9</SUB>>", "57": "<(&lt;operator&gt;.indexAccess,arr[0])<SUB>11</SUB>>", "59": "<(LITERAL,0,arr[0] = 0)<SUB>11</SUB>>", "61": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt;= n); i++),for (int i = 1; Some(i &lt;= n); i++))<SUB>12</SUB>>", "63": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>12</SUB>>", "65": "<(LITERAL,1,int i = 1)<SUB>12</SUB>>", "67": "<(IDENTIFIER,i,i &lt;= n)<SUB>12</SUB>>", "69": "<(&lt;operator&gt;.postIncrement,i++)<SUB>12</SUB>>", "71": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>12</SUB>>", "73": "<(&lt;operator&gt;.indexAccess,arr[i])<SUB>13</SUB>>", "75": "<(IDENTIFIER,i,arr[i] = nextLong())<SUB>13</SUB>>", "77": "<(IDENTIFIER,sc,nextLong())<SUB>13</SUB>>", "79": "<(&lt;operator&gt;.indexAccess,arr[i])<SUB>14</SUB>>", "81": "<(IDENTIFIER,i,arr[i] ^= arr[i - 1])<SUB>14</SUB>>", "83": "<(IDENTIFIER,arr,arr[i] ^= arr[i - 1])<SUB>14</SUB>>", "85": "<(IDENTIFIER,i,i - 1)<SUB>14</SUB>>", "6": "<(LOCAL,Map&lt;Long, Long&gt; count: ANY)<SUB>17</SUB>>", "88": "<(IDENTIFIER,count,ANY count = new HashMap&lt;&gt;())<SUB>17</SUB>>", "90": "<(&lt;init&gt;,new HashMap&lt;&gt;())<SUB>17</SUB>>", "91": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt;= n); i++),for (int i = 0; Some(i &lt;= n); i++))<SUB>19</SUB>>", "93": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>19</SUB>>", "95": "<(LITERAL,0,int i = 0)<SUB>19</SUB>>", "97": "<(IDENTIFIER,i,i &lt;= n)<SUB>19</SUB>>", "99": "<(&lt;operator&gt;.postIncrement,i++)<SUB>19</SUB>>", "101": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>19</SUB>>", "103": "<(&lt;operator&gt;.assignment,Long key = Math.min(arr[i], (arr[i] ^ one)))<SUB>20</SUB>>", "105": "<(min,Math.min(arr[i], (arr[i] ^ one)))<SUB>20</SUB>>", "107": "<(&lt;operator&gt;.indexAccess,arr[i])<SUB>20</SUB>>", "109": "<(IDENTIFIER,i,Math.min(arr[i], (arr[i] ^ one)))<SUB>20</SUB>>", "111": "<(&lt;operator&gt;.indexAccess,arr[i])<SUB>20</SUB>>", "113": "<(IDENTIFIER,i,arr[i] ^ one)<SUB>20</SUB>>", "115": "<(LOCAL,Long val: java.lang.Long)<SUB>21</SUB>>", "117": "<(IDENTIFIER,val,Long val = get(key))<SUB>21</SUB>>", "119": "<(IDENTIFIER,count,get(key))<SUB>21</SUB>>", "121": "<(CONTROL_STRUCTURE,if (val == null),if (val == null))<SUB>22</SUB>>", "123": "<(IDENTIFIER,val,val == null)<SUB>22</SUB>>", "125": "<(&lt;operator&gt;.assignment,val = 0L)<SUB>22</SUB>>", "127": "<(LITERAL,0L,val = 0L)<SUB>22</SUB>>", "129": "<(IDENTIFIER,count,put(key, val + 1))<SUB>23</SUB>>", "131": "<(&lt;operator&gt;.addition,val + 1)<SUB>23</SUB>>", "133": "<(LITERAL,1,val + 1)<SUB>23</SUB>>", "135": "<(&lt;operator&gt;.assignment,long num = n)<SUB>26</SUB>>", "137": "<(IDENTIFIER,n,long num = n)<SUB>26</SUB>>", "139": "<(&lt;operator&gt;.assignment,long ans = num * (num + 1) / 2)<SUB>27</SUB>>", "141": "<(&lt;operator&gt;.division,num * (num + 1) / 2)<SUB>27</SUB>>", "143": "<(IDENTIFIER,num,num * (num + 1))<SUB>27</SUB>>", "145": "<(IDENTIFIER,num,num + 1)<SUB>27</SUB>>", "147": "<(LITERAL,2,num * (num + 1) / 2)<SUB>27</SUB>>", "149": "<(&lt;operator&gt;.assignment,)<SUB>29</SUB>>", "151": "<(iterator,&lt;empty&gt;)<SUB>29</SUB>>", "153": "<(IDENTIFIER,count,entrySet())<SUB>29</SUB>>", "155": "<(hasNext,&lt;empty&gt;)<SUB>29</SUB>>", "157": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>29</SUB>>", "159": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)<SUB>29</SUB>>", "161": "<(next,&lt;empty&gt;)<SUB>29</SUB>>", "163": "<(LOCAL,Long cnt: java.lang.Long)<SUB>31</SUB>>", "165": "<(IDENTIFIER,cnt,Long cnt = getValue())<SUB>31</SUB>>", "167": "<(IDENTIFIER,ent,getValue())<SUB>31</SUB>>", "169": "<(&lt;operator&gt;.assignment,long num1 = cnt / 2)<SUB>33</SUB>>", "171": "<(&lt;operator&gt;.division,cnt / 2)<SUB>33</SUB>>", "173": "<(LITERAL,2,cnt / 2)<SUB>33</SUB>>", "175": "<(&lt;operator&gt;.assignment,long num2 = (cnt + 1) / 2)<SUB>34</SUB>>", "177": "<(&lt;operator&gt;.division,(cnt + 1) / 2)<SUB>34</SUB>>", "179": "<(IDENTIFIER,cnt,cnt + 1)<SUB>34</SUB>>", "181": "<(LITERAL,2,(cnt + 1) / 2)<SUB>34</SUB>>", "183": "<(IDENTIFIER,ans,ans -= (num1 * (num1 - 1)) / 2)<SUB>36</SUB>>", "185": "<(&lt;operator&gt;.multiplication,num1 * (num1 - 1))<SUB>36</SUB>>", "187": "<(&lt;operator&gt;.subtraction,num1 - 1)<SUB>36</SUB>>", "189": "<(LITERAL,1,num1 - 1)<SUB>36</SUB>>", "191": "<(&lt;operator&gt;.assignmentMinus,ans -= (num2 * (num2 - 1)) / 2)<SUB>37</SUB>>", "193": "<(&lt;operator&gt;.division,(num2 * (num2 - 1)) / 2)<SUB>37</SUB>>", "195": "<(IDENTIFIER,num2,num2 * (num2 - 1))<SUB>37</SUB>>", "197": "<(IDENTIFIER,num2,num2 - 1)<SUB>37</SUB>>", "199": "<(LITERAL,2,(num2 * (num2 - 1)) / 2)<SUB>37</SUB>>", "201": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>40</SUB>>", "203": "<(FIELD_IDENTIFIER,out,out)<SUB>40</SUB>>", "205": "<(MODIFIER,PUBLIC)>", "207": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}