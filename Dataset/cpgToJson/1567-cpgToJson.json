{"edges": [["21", "23"], ["21", "113"], ["21", "114"], ["21", "115"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "28"], ["23", "31"], ["23", "32"], ["23", "36"], ["23", "40"], ["23", "41"], ["23", "45"], ["23", "62"], ["23", "65"], ["23", "107"], ["24", "25"], ["24", "26"], ["27", "3"], ["28", "29"], ["28", "30"], ["31", "5"], ["32", "33"], ["32", "34"], ["34", "35"], ["36", "37"], ["36", "38"], ["38", "39"], ["41", "42"], ["41", "43"], ["43", "44"], ["45", "46"], ["45", "47"], ["45", "50"], ["45", "53"], ["45", "55"], ["47", "48"], ["47", "49"], ["50", "51"], ["50", "52"], ["53", "54"], ["55", "56"], ["56", "57"], ["56", "60"], ["57", "58"], ["57", "59"], ["60", "61"], ["62", "63"], ["62", "64"], ["65", "66"], ["65", "67"], ["65", "70"], ["65", "73"], ["65", "75"], ["67", "68"], ["67", "69"], ["70", "71"], ["70", "72"], ["73", "74"], ["75", "76"], ["76", "77"], ["76", "84"], ["76", "90"], ["77", "78"], ["77", "83"], ["78", "79"], ["78", "82"], ["79", "80"], ["79", "81"], ["84", "85"], ["85", "86"], ["85", "87"], ["87", "88"], ["87", "89"], ["90", "91"], ["91", "92"], ["92", "93"], ["92", "101"], ["93", "94"], ["94", "95"], ["94", "96"], ["96", "97"], ["96", "100"], ["97", "98"], ["97", "99"], ["101", "102"], ["102", "103"], ["102", "104"], ["104", "105"], ["104", "106"], ["107", "108"], ["107", "111"], ["108", "109"], ["108", "110"], ["111", "112"], ["24", "27"], ["27", "30"], ["28", "31"], ["31", "34"], ["32", "38"], ["36", "43"], ["41", "47"], ["62", "67"], ["107", "115"], ["26", "24"], ["30", "28"], ["34", "32"], ["38", "36"], ["43", "41"], ["47", "50"], ["50", "57"], ["50", "62"], ["53", "50"], ["67", "70"], ["70", "79"], ["70", "110"], ["73", "70"], ["108", "111"], ["111", "107"], ["56", "53"], ["110", "108"], ["57", "60"], ["60", "56"], ["77", "87"], ["77", "97"], ["78", "77"], ["85", "73"], ["79", "78"], ["87", "85"], ["93", "104"], ["93", "73"], ["94", "93"], ["102", "73"], ["96", "94"], ["104", "102"], ["97", "96"], ["21", "26"], ["22", "115"], ["24", "115"], ["27", "115"], ["28", "115"], ["31", "115"], ["32", "115"], ["36", "115"], ["38", "115"], ["36", "115"], ["36", "115"], ["41", "115"], ["41", "115"], ["62", "115"], ["62", "115"], ["67", "115"], ["70", "115"], ["70", "115"], ["70", "115"], ["107", "115"], ["111", "115"], ["107", "115"], ["107", "115"], ["78", "115"], ["77", "115"], ["77", "115"], ["96", "115"], ["96", "115"], ["94", "115"], ["93", "115"], ["93", "115"], ["102", "115"], ["102", "115"], ["85", "115"], ["85", "115"], ["73", "115"], ["56", "115"], ["60", "115"], ["56", "115"], ["56", "115"], ["53", "115"], ["62", "115"], ["21", "22"], ["21", "24"], ["21", "28"], ["34", "32"], ["38", "36"], ["43", "41"], ["24", "27"], ["21", "27"], ["28", "31"], ["21", "31"], ["21", "47"], ["21", "62"], ["41", "62"], ["56", "62"], ["21", "67"], ["111", "107"], ["31", "34"], ["21", "34"], ["34", "38"], ["21", "38"], ["32", "43"], ["21", "43"], ["47", "50"], ["53", "50"], ["21", "50"], ["43", "50"], ["50", "53"], ["21", "53"], ["60", "56"], ["67", "70"], ["73", "70"], ["21", "70"], ["50", "70"], ["70", "73"], ["21", "73"], ["27", "111"], ["94", "111"], ["102", "111"], ["85", "111"], ["21", "111"], ["38", "60"], ["21", "60"], ["78", "77"], ["78", "77"], ["21", "77"], ["62", "78"], ["96", "78"], ["102", "78"], ["85", "78"], ["56", "78"], ["36", "78"], ["96", "78"], ["21", "78"], ["27", "85"], ["94", "85"], ["102", "85"], ["21", "85"], ["62", "85"], ["78", "85"], ["94", "93"], ["94", "93"], ["27", "94"], ["102", "94"], ["85", "94"], ["21", "94"], ["96", "94"], ["96", "94"], ["94", "102"], ["21", "102"], ["62", "102"], ["96", "102"], ["62", "96"], ["78", "96"], ["78", "96"], ["21", "96"], ["50", "60"], ["50", "57"], ["50", "53"], ["50", "56"], ["50", "50"], ["70", "73"], ["70", "77"], ["70", "70"], ["70", "78"], ["70", "79"], ["77", "94"], ["77", "96"], ["77", "85"], ["77", "87"], ["77", "97"], ["77", "93"], ["93", "102"], ["93", "104"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY set = new TreeSet&lt;Integer&gt;())<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new TreeSet&lt;Integer&gt;())<SUB>2</SUB>>", "3": "<(IDENTIFIER,set,new TreeSet&lt;Integer&gt;())<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.assignment,ANY s = new FastScanner())<SUB>3</SUB>>", "30": "<(&lt;operator&gt;.alloc,new FastScanner())<SUB>3</SUB>>", "5": "<(IDENTIFIER,s,new FastScanner())<SUB>3</SUB>>", "33": "<(IDENTIFIER,n,n = nextInt())<SUB>4</SUB>>", "35": "<(IDENTIFIER,s,nextInt())<SUB>4</SUB>>", "37": "<(IDENTIFIER,k,k = nextInt())<SUB>5</SUB>>", "39": "<(IDENTIFIER,s,nextInt())<SUB>5</SUB>>", "41": "<(&lt;operator&gt;.assignment,int[] a = new int[n])<SUB>7</SUB>>", "43": "<(&lt;operator&gt;.alloc,new int[n])>", "45": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>8</SUB>>", "47": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>8</SUB>>", "49": "<(LITERAL,0,int i = 0)<SUB>8</SUB>>", "51": "<(IDENTIFIER,i,i &lt; n)<SUB>8</SUB>>", "53": "<(&lt;operator&gt;.postIncrement,i++)<SUB>8</SUB>>", "55": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>>", "57": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>9</SUB>>", "59": "<(IDENTIFIER,i,a[i] = nextInt())<SUB>9</SUB>>", "61": "<(IDENTIFIER,s,nextInt())<SUB>9</SUB>>", "63": "<(IDENTIFIER,Arrays,sort(a))<SUB>11</SUB>>", "65": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>13</SUB>>", "67": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>13</SUB>>", "69": "<(LITERAL,0,int i = 0)<SUB>13</SUB>>", "71": "<(IDENTIFIER,i,i &lt; n)<SUB>13</SUB>>", "73": "<(&lt;operator&gt;.postIncrement,i++)<SUB>13</SUB>>", "75": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>13</SUB>>", "77": "<(&lt;operator&gt;.notEquals,a[i] % k != 0)<SUB>14</SUB>>", "79": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>14</SUB>>", "81": "<(IDENTIFIER,i,a[i] % k)<SUB>14</SUB>>", "83": "<(LITERAL,0,a[i] % k != 0)<SUB>14</SUB>>", "85": "<(add,add(a[i]))<SUB>15</SUB>>", "87": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>15</SUB>>", "89": "<(IDENTIFIER,i,add(a[i]))<SUB>15</SUB>>", "91": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>16</SUB>>", "93": "<(&lt;operator&gt;.logicalNot,!set.contains(a[i] / k))<SUB>17</SUB>>", "95": "<(IDENTIFIER,set,contains(a[i] / k))<SUB>17</SUB>>", "97": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>17</SUB>>", "99": "<(IDENTIFIER,i,a[i] / k)<SUB>17</SUB>>", "101": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>17</SUB>>", "103": "<(IDENTIFIER,set,add(a[i]))<SUB>18</SUB>>", "105": "<(IDENTIFIER,a,add(a[i]))<SUB>18</SUB>>", "107": "<(println,println(set.size()))<SUB>23</SUB>>", "109": "<(IDENTIFIER,System,println(set.size()))<SUB>23</SUB>>", "111": "<(size,size())<SUB>23</SUB>>", "113": "<(MODIFIER,PUBLIC)>", "115": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}