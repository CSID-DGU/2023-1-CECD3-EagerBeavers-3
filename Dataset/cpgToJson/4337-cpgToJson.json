{"edges": [["19", "21"], ["19", "265"], ["19", "266"], ["19", "267"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "40"], ["21", "45"], ["21", "83"], ["21", "84"], ["21", "91"], ["21", "111"], ["21", "201"], ["21", "202"], ["21", "205"], ["21", "257"], ["21", "260"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["40", "41"], ["40", "42"], ["42", "43"], ["42", "44"], ["45", "46"], ["45", "47"], ["45", "50"], ["45", "53"], ["45", "55"], ["47", "48"], ["47", "49"], ["50", "51"], ["50", "52"], ["53", "54"], ["55", "56"], ["55", "57"], ["55", "61"], ["55", "62"], ["55", "66"], ["55", "68"], ["55", "70"], ["57", "58"], ["57", "59"], ["59", "60"], ["62", "63"], ["62", "64"], ["64", "65"], ["66", "67"], ["68", "69"], ["70", "71"], ["70", "76"], ["71", "72"], ["71", "75"], ["72", "73"], ["72", "74"], ["76", "77"], ["76", "82"], ["77", "78"], ["77", "81"], ["78", "79"], ["78", "80"], ["84", "85"], ["84", "86"], ["86", "87"], ["86", "90"], ["87", "88"], ["87", "89"], ["91", "92"], ["91", "93"], ["91", "96"], ["91", "99"], ["91", "101"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["99", "100"], ["101", "102"], ["102", "103"], ["102", "110"], ["103", "104"], ["103", "109"], ["104", "105"], ["104", "106"], ["106", "107"], ["106", "108"], ["111", "112"], ["111", "113"], ["111", "116"], ["111", "121"], ["111", "123"], ["113", "114"], ["113", "115"], ["116", "117"], ["116", "118"], ["118", "119"], ["118", "120"], ["121", "122"], ["123", "124"], ["124", "125"], ["124", "130"], ["125", "126"], ["125", "129"], ["126", "127"], ["126", "128"], ["130", "131"], ["131", "132"], ["131", "133"], ["131", "136"], ["131", "139"], ["131", "141"], ["133", "134"], ["133", "135"], ["136", "137"], ["136", "138"], ["139", "140"], ["141", "142"], ["141", "149"], ["142", "143"], ["142", "148"], ["143", "144"], ["143", "145"], ["145", "146"], ["145", "147"], ["149", "150"], ["149", "157"], ["150", "151"], ["150", "156"], ["151", "152"], ["151", "153"], ["153", "154"], ["153", "155"], ["157", "158"], ["158", "159"], ["158", "160"], ["158", "163"], ["158", "166"], ["158", "168"], ["160", "161"], ["160", "162"], ["163", "164"], ["163", "165"], ["166", "167"], ["168", "169"], ["169", "170"], ["169", "185"], ["170", "171"], ["170", "178"], ["171", "172"], ["171", "177"], ["172", "173"], ["172", "174"], ["174", "175"], ["174", "176"], ["178", "179"], ["178", "184"], ["179", "180"], ["179", "183"], ["180", "181"], ["180", "182"], ["185", "186"], ["186", "187"], ["186", "192"], ["187", "188"], ["187", "191"], ["188", "189"], ["188", "190"], ["192", "193"], ["192", "200"], ["193", "194"], ["193", "195"], ["195", "196"], ["195", "197"], ["197", "198"], ["197", "199"], ["202", "203"], ["202", "204"], ["205", "206"], ["205", "207"], ["205", "210"], ["205", "215"], ["205", "217"], ["207", "208"], ["207", "209"], ["210", "211"], ["210", "212"], ["212", "213"], ["212", "214"], ["215", "216"], ["217", "218"], ["218", "219"], ["218", "224"], ["219", "220"], ["219", "223"], ["220", "221"], ["220", "222"], ["224", "225"], ["224", "226"], ["224", "231"], ["226", "227"], ["226", "228"], ["228", "229"], ["228", "230"], ["231", "232"], ["231", "233"], ["231", "236"], ["231", "239"], ["231", "241"], ["233", "234"], ["233", "235"], ["236", "237"], ["236", "238"], ["239", "240"], ["241", "242"], ["242", "243"], ["242", "250"], ["243", "244"], ["243", "249"], ["244", "245"], ["244", "248"], ["245", "246"], ["245", "247"], ["250", "251"], ["250", "252"], ["252", "253"], ["252", "256"], ["253", "254"], ["253", "255"], ["257", "258"], ["257", "259"], ["260", "261"], ["260", "264"], ["261", "262"], ["261", "263"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "42"], ["40", "47"], ["84", "93"], ["202", "207"], ["257", "263"], ["260", "267"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["42", "40"], ["47", "50"], ["50", "59"], ["50", "87"], ["53", "50"], ["86", "84"], ["93", "96"], ["96", "106"], ["96", "113"], ["99", "96"], ["113", "118"], ["116", "126"], ["116", "202"], ["121", "118"], ["207", "212"], ["210", "220"], ["210", "257"], ["215", "212"], ["261", "260"], ["28", "26"], ["57", "64"], ["62", "66"], ["66", "68"], ["68", "72"], ["70", "53"], ["87", "86"], ["102", "99"], ["118", "116"], ["212", "210"], ["263", "261"], ["59", "57"], ["64", "62"], ["71", "78"], ["76", "70"], ["103", "102"], ["125", "133"], ["125", "121"], ["219", "228"], ["219", "215"], ["72", "71"], ["77", "76"], ["104", "103"], ["126", "125"], ["220", "219"], ["226", "233"], ["78", "77"], ["106", "104"], ["133", "136"], ["136", "145"], ["136", "121"], ["139", "136"], ["228", "226"], ["233", "236"], ["236", "245"], ["236", "215"], ["239", "236"], ["143", "139"], ["143", "153"], ["150", "160"], ["150", "139"], ["243", "253"], ["243", "239"], ["250", "239"], ["145", "143"], ["151", "150"], ["244", "243"], ["252", "250"], ["153", "151"], ["160", "163"], ["163", "174"], ["163", "139"], ["166", "163"], ["245", "244"], ["253", "252"], ["170", "188"], ["170", "166"], ["171", "170"], ["171", "180"], ["178", "170"], ["186", "166"], ["172", "171"], ["179", "178"], ["187", "197"], ["192", "186"], ["174", "172"], ["180", "179"], ["188", "187"], ["193", "192"], ["195", "193"], ["197", "195"], ["19", "24"], ["20", "267"], ["22", "267"], ["25", "267"], ["25", "267"], ["30", "267"], ["37", "267"], ["35", "267"], ["35", "267"], ["40", "267"], ["40", "267"], ["40", "267"], ["47", "267"], ["50", "267"], ["50", "267"], ["84", "267"], ["84", "267"], ["84", "267"], ["93", "267"], ["96", "267"], ["96", "267"], ["202", "267"], ["207", "267"], ["210", "267"], ["212", "267"], ["210", "267"], ["210", "267"], ["257", "267"], ["260", "267"], ["260", "267"], ["260", "267"], ["220", "267"], ["219", "267"], ["219", "267"], ["226", "267"], ["228", "267"], ["226", "267"], ["226", "267"], ["233", "267"], ["236", "267"], ["236", "267"], ["215", "267"], ["243", "267"], ["243", "267"], ["250", "267"], ["250", "267"], ["239", "267"], ["126", "267"], ["125", "267"], ["125", "267"], ["133", "267"], ["136", "267"], ["136", "267"], ["121", "267"], ["145", "267"], ["143", "267"], ["143", "267"], ["151", "267"], ["150", "267"], ["150", "267"], ["160", "267"], ["163", "267"], ["163", "267"], ["172", "267"], ["171", "267"], ["170", "267"], ["178", "267"], ["170", "267"], ["170", "267"], ["186", "267"], ["195", "267"], ["186", "267"], ["186", "267"], ["166", "267"], ["139", "267"], ["102", "267"], ["102", "267"], ["99", "267"], ["57", "267"], ["64", "267"], ["62", "267"], ["62", "267"], ["66", "267"], ["66", "267"], ["68", "267"], ["68", "267"], ["70", "267"], ["76", "267"], ["70", "267"], ["70", "267"], ["53", "267"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["42", "40"], ["86", "84"], ["86", "84"], ["19", "202"], ["19", "257"], ["22", "25"], ["19", "25"], ["19", "47"], ["19", "93"], ["19", "113"], ["19", "207"], ["202", "257"], ["250", "257"], ["257", "260"], ["19", "260"], ["25", "32"], ["19", "32"], ["32", "37"], ["19", "37"], ["30", "42"], ["19", "42"], ["47", "50"], ["53", "50"], ["19", "50"], ["35", "50"], ["50", "53"], ["19", "53"], ["59", "57"], ["64", "62"], ["76", "70"], ["19", "70"], ["87", "86"], ["87", "86"], ["19", "86"], ["93", "96"], ["99", "96"], ["19", "96"], ["86", "96"], ["106", "99"], ["19", "99"], ["19", "102"], ["113", "116"], ["121", "116"], ["19", "116"], ["118", "116"], ["118", "116"], ["126", "121"], ["145", "121"], ["151", "121"], ["172", "121"], ["195", "121"], ["19", "121"], ["207", "210"], ["215", "210"], ["19", "210"], ["212", "210"], ["212", "210"], ["220", "215"], ["228", "215"], ["19", "215"], ["57", "66"], ["19", "66"], ["62", "68"], ["19", "68"], ["19", "87"], ["42", "87"], ["19", "118"], ["96", "118"], ["136", "118"], ["19", "212"], ["118", "212"], ["236", "212"], ["37", "59"], ["64", "59"], ["19", "59"], ["59", "64"], ["19", "64"], ["19", "76"], ["126", "125"], ["126", "125"], ["19", "125"], ["220", "219"], ["220", "219"], ["19", "219"], ["228", "226"], ["228", "226"], ["145", "126"], ["19", "126"], ["116", "126"], ["19", "133"], ["228", "220"], ["126", "220"], ["145", "220"], ["19", "220"], ["210", "220"], ["19", "233"], ["19", "106"], ["96", "106"], ["133", "136"], ["139", "136"], ["19", "136"], ["118", "136"], ["163", "136"], ["143", "139"], ["153", "139"], ["197", "139"], ["19", "139"], ["220", "228"], ["19", "228"], ["220", "228"], ["233", "236"], ["239", "236"], ["19", "236"], ["212", "236"], ["236", "239"], ["19", "239"], ["186", "250"], ["136", "143"], ["19", "143"], ["145", "143"], ["145", "143"], ["151", "150"], ["151", "150"], ["19", "150"], ["19", "243"], ["202", "250"], ["19", "250"], ["126", "145"], ["19", "145"], ["126", "145"], ["151", "145"], ["172", "145"], ["195", "145"], ["145", "151"], ["19", "151"], ["153", "151"], ["153", "151"], ["19", "160"], ["19", "153"], ["143", "153"], ["160", "163"], ["166", "163"], ["19", "163"], ["136", "163"], ["174", "166"], ["19", "166"], ["171", "170"], ["171", "170"], ["178", "170"], ["178", "170"], ["172", "171"], ["172", "171"], ["19", "171"], ["19", "178"], ["151", "172"], ["195", "172"], ["19", "172"], ["174", "172"], ["174", "172"], ["19", "174"], ["163", "174"], ["172", "195"], ["19", "195"], ["197", "195"], ["197", "195"], ["19", "197"], ["153", "197"], ["50", "68"], ["50", "77"], ["50", "64"], ["50", "57"], ["50", "76"], ["50", "50"], ["50", "59"], ["50", "70"], ["50", "66"], ["50", "72"], ["50", "71"], ["50", "53"], ["50", "78"], ["50", "62"], ["96", "96"], ["96", "102"], ["96", "103"], ["96", "104"], ["96", "99"], ["96", "106"], ["116", "121"], ["116", "118"], ["116", "116"], ["116", "126"], ["116", "125"], ["210", "215"], ["210", "212"], ["210", "210"], ["210", "220"], ["210", "219"], ["125", "136"], ["125", "133"], ["219", "226"], ["219", "228"], ["219", "233"], ["219", "236"], ["136", "136"], ["136", "145"], ["136", "139"], ["136", "143"], ["236", "244"], ["236", "243"], ["236", "245"], ["236", "239"], ["236", "236"], ["143", "150"], ["143", "151"], ["143", "153"], ["150", "163"], ["150", "160"], ["243", "252"], ["243", "253"], ["243", "250"], ["163", "163"], ["163", "170"], ["163", "174"], ["163", "171"], ["163", "166"], ["163", "172"], ["170", "188"], ["170", "192"], ["170", "197"], ["170", "195"], ["170", "187"], ["170", "186"], ["170", "193"], ["171", "179"], ["171", "178"], ["171", "180"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,int n: int)<SUB>3</SUB>>", "31": "<(IDENTIFIER,n,int n = nextInt())<SUB>3</SUB>>", "33": "<(IDENTIFIER,sc,nextInt())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,int m = nextInt())<SUB>4</SUB>>", "37": "<(nextInt,nextInt())<SUB>4</SUB>>", "39": "<(LOCAL,int[][] a: int[][])<SUB>5</SUB>>", "41": "<(IDENTIFIER,a,int[][] a = new int[n][n])<SUB>5</SUB>>", "43": "<(IDENTIFIER,n,new int[n][n])<SUB>5</SUB>>", "45": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt;= m); i++),for (int i = 1; Some(i &lt;= m); i++))<SUB>6</SUB>>", "47": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>6</SUB>>", "49": "<(LITERAL,1,int i = 1)<SUB>6</SUB>>", "51": "<(IDENTIFIER,i,i &lt;= m)<SUB>6</SUB>>", "53": "<(&lt;operator&gt;.postIncrement,i++)<SUB>6</SUB>>", "55": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>6</SUB>>", "57": "<(&lt;operator&gt;.assignment,int v1 = nextInt())<SUB>7</SUB>>", "59": "<(nextInt,nextInt())<SUB>7</SUB>>", "61": "<(LOCAL,int v2: int)<SUB>8</SUB>>", "63": "<(IDENTIFIER,v2,int v2 = nextInt())<SUB>8</SUB>>", "65": "<(IDENTIFIER,sc,nextInt())<SUB>8</SUB>>", "67": "<(IDENTIFIER,v1,v1--)<SUB>9</SUB>>", "69": "<(IDENTIFIER,v2,v2--)<SUB>10</SUB>>", "71": "<(&lt;operator&gt;.indexAccess,a[v1][v2])<SUB>11</SUB>>", "73": "<(IDENTIFIER,a,a[v1][v2] = a[v2][v1] = 1)<SUB>11</SUB>>", "75": "<(IDENTIFIER,v2,a[v1][v2] = a[v2][v1] = 1)<SUB>11</SUB>>", "77": "<(&lt;operator&gt;.indexAccess,a[v2][v1])<SUB>11</SUB>>", "79": "<(IDENTIFIER,a,a[v2][v1] = 1)<SUB>11</SUB>>", "81": "<(IDENTIFIER,v1,a[v2][v1] = 1)<SUB>11</SUB>>", "83": "<(LOCAL,long[][] dp: long[][])<SUB>13</SUB>>", "85": "<(IDENTIFIER,dp,long[][] dp = new long[1 &lt;&lt; n][n])<SUB>13</SUB>>", "87": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; n)<SUB>13</SUB>>", "89": "<(IDENTIFIER,n,1 &lt;&lt; n)<SUB>13</SUB>>", "91": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>14</SUB>>", "93": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>14</SUB>>", "95": "<(LITERAL,0,int i = 0)<SUB>14</SUB>>", "97": "<(IDENTIFIER,i,i &lt; n)<SUB>14</SUB>>", "99": "<(&lt;operator&gt;.postIncrement,i++)<SUB>14</SUB>>", "101": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>14</SUB>>", "103": "<(&lt;operator&gt;.indexAccess,dp[1 &lt;&lt; i][i])<SUB>15</SUB>>", "105": "<(IDENTIFIER,dp,dp[1 &lt;&lt; i][i] = 1)<SUB>15</SUB>>", "107": "<(LITERAL,1,1 &lt;&lt; i)<SUB>15</SUB>>", "109": "<(IDENTIFIER,i,dp[1 &lt;&lt; i][i] = 1)<SUB>15</SUB>>", "111": "<(CONTROL_STRUCTURE,for (int mask = 0; Some(mask &lt; (1 &lt;&lt; n)); mask++),for (int mask = 0; Some(mask &lt; (1 &lt;&lt; n)); mask++))<SUB>17</SUB>>", "113": "<(&lt;operator&gt;.assignment,int mask = 0)<SUB>17</SUB>>", "115": "<(LITERAL,0,int mask = 0)<SUB>17</SUB>>", "117": "<(IDENTIFIER,mask,mask &lt; (1 &lt;&lt; n))<SUB>17</SUB>>", "119": "<(LITERAL,1,1 &lt;&lt; n)<SUB>17</SUB>>", "121": "<(&lt;operator&gt;.postIncrement,mask++)<SUB>17</SUB>>", "123": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>17</SUB>>", "125": "<(&lt;operator&gt;.greaterThan,Integer.bitCount(mask) &gt; 1)<SUB>18</SUB>>", "127": "<(IDENTIFIER,Integer,Integer.bitCount(mask))<SUB>18</SUB>>", "129": "<(LITERAL,1,Integer.bitCount(mask) &gt; 1)<SUB>18</SUB>>", "131": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>19</SUB>>", "133": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>19</SUB>>", "135": "<(LITERAL,0,int i = 0)<SUB>19</SUB>>", "137": "<(IDENTIFIER,i,i &lt; n)<SUB>19</SUB>>", "139": "<(&lt;operator&gt;.postIncrement,i++)<SUB>19</SUB>>", "141": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>19</SUB>>", "143": "<(&lt;operator&gt;.equals,i == Integer.numberOfTrailingZeros(mask))<SUB>20</SUB>>", "145": "<(numberOfTrailingZeros,Integer.numberOfTrailingZeros(mask))<SUB>20</SUB>>", "147": "<(IDENTIFIER,mask,Integer.numberOfTrailingZeros(mask))<SUB>20</SUB>>", "149": "<(CONTROL_STRUCTURE,if ((mask &amp; (1 &lt;&lt; i)) != 0),if ((mask &amp; (1 &lt;&lt; i)) != 0))<SUB>22</SUB>>", "151": "<(&lt;operator&gt;.and,mask &amp; (1 &lt;&lt; i))<SUB>22</SUB>>", "153": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; i)<SUB>22</SUB>>", "155": "<(IDENTIFIER,i,1 &lt;&lt; i)<SUB>22</SUB>>", "157": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>22</SUB>>", "159": "<(LOCAL,int j: int)<SUB>23</SUB>>", "161": "<(IDENTIFIER,j,int j = 0)<SUB>23</SUB>>", "163": "<(&lt;operator&gt;.lessThan,j &lt; n)<SUB>23</SUB>>", "165": "<(IDENTIFIER,n,j &lt; n)<SUB>23</SUB>>", "167": "<(IDENTIFIER,j,j++)<SUB>23</SUB>>", "169": "<(CONTROL_STRUCTURE,if ((mask &amp; (1 &lt;&lt; j)) != 0 &amp;&amp; a[j][i] == 1),if ((mask &amp; (1 &lt;&lt; j)) != 0 &amp;&amp; a[j][i] == 1))<SUB>24</SUB>>", "171": "<(&lt;operator&gt;.notEquals,(mask &amp; (1 &lt;&lt; j)) != 0)<SUB>24</SUB>>", "173": "<(IDENTIFIER,mask,mask &amp; (1 &lt;&lt; j))<SUB>24</SUB>>", "175": "<(LITERAL,1,1 &lt;&lt; j)<SUB>24</SUB>>", "177": "<(LITERAL,0,(mask &amp; (1 &lt;&lt; j)) != 0)<SUB>24</SUB>>", "179": "<(&lt;operator&gt;.indexAccess,a[j][i])<SUB>24</SUB>>", "181": "<(IDENTIFIER,a,a[j][i] == 1)<SUB>24</SUB>>", "183": "<(IDENTIFIER,i,a[j][i] == 1)<SUB>24</SUB>>", "185": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>24</SUB>>", "187": "<(&lt;operator&gt;.indexAccess,dp[mask][i])<SUB>25</SUB>>", "189": "<(IDENTIFIER,dp,dp[mask][i] += dp[(mask ^ (1 &lt;&lt; i))][j])<SUB>25</SUB>>", "191": "<(IDENTIFIER,i,dp[mask][i] += dp[(mask ^ (1 &lt;&lt; i))][j])<SUB>25</SUB>>", "193": "<(&lt;operator&gt;.indexAccess,dp[(mask ^ (1 &lt;&lt; i))])<SUB>25</SUB>>", "195": "<(&lt;operator&gt;.xor,mask ^ (1 &lt;&lt; i))<SUB>25</SUB>>", "197": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; i)<SUB>25</SUB>>", "199": "<(IDENTIFIER,i,1 &lt;&lt; i)<SUB>25</SUB>>", "201": "<(LOCAL,long ans: long)<SUB>32</SUB>>", "203": "<(IDENTIFIER,ans,long ans = 0)<SUB>32</SUB>>", "205": "<(CONTROL_STRUCTURE,for (int mask = 0; Some(mask &lt; (1 &lt;&lt; n)); mask++),for (int mask = 0; Some(mask &lt; (1 &lt;&lt; n)); mask++))<SUB>33</SUB>>", "207": "<(&lt;operator&gt;.assignment,int mask = 0)<SUB>33</SUB>>", "209": "<(LITERAL,0,int mask = 0)<SUB>33</SUB>>", "211": "<(IDENTIFIER,mask,mask &lt; (1 &lt;&lt; n))<SUB>33</SUB>>", "213": "<(LITERAL,1,1 &lt;&lt; n)<SUB>33</SUB>>", "215": "<(&lt;operator&gt;.postIncrement,mask++)<SUB>33</SUB>>", "217": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>33</SUB>>", "219": "<(&lt;operator&gt;.greaterEqualsThan,Integer.bitCount(mask) &gt;= 3)<SUB>34</SUB>>", "221": "<(IDENTIFIER,Integer,Integer.bitCount(mask))<SUB>34</SUB>>", "223": "<(LITERAL,3,Integer.bitCount(mask) &gt;= 3)<SUB>34</SUB>>", "225": "<(LOCAL,int t: int)<SUB>35</SUB>>", "227": "<(IDENTIFIER,t,int t = Integer.numberOfTrailingZeros(mask))<SUB>35</SUB>>", "229": "<(IDENTIFIER,Integer,Integer.numberOfTrailingZeros(mask))<SUB>35</SUB>>", "231": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>36</SUB>>", "233": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>36</SUB>>", "235": "<(LITERAL,0,int i = 0)<SUB>36</SUB>>", "237": "<(IDENTIFIER,i,i &lt; n)<SUB>36</SUB>>", "239": "<(&lt;operator&gt;.postIncrement,i++)<SUB>36</SUB>>", "241": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>36</SUB>>", "243": "<(&lt;operator&gt;.equals,a[t][i] == 1)<SUB>37</SUB>>", "245": "<(&lt;operator&gt;.indexAccess,a[t])<SUB>37</SUB>>", "247": "<(IDENTIFIER,t,a[t][i] == 1)<SUB>37</SUB>>", "249": "<(LITERAL,1,a[t][i] == 1)<SUB>37</SUB>>", "251": "<(IDENTIFIER,ans,ans += dp[mask][i])<SUB>38</SUB>>", "253": "<(&lt;operator&gt;.indexAccess,dp[mask])<SUB>38</SUB>>", "255": "<(IDENTIFIER,mask,ans += dp[mask][i])<SUB>38</SUB>>", "257": "<(&lt;operator&gt;.assignmentDivision,ans /= 2)<SUB>42</SUB>>", "259": "<(LITERAL,2,ans /= 2)<SUB>42</SUB>>", "261": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>43</SUB>>", "263": "<(FIELD_IDENTIFIER,out,out)<SUB>43</SUB>>", "265": "<(MODIFIER,PUBLIC)>", "267": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}