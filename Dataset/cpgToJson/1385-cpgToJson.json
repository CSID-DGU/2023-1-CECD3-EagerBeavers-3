{"edges": [["19", "21"], ["19", "67"], ["19", "68"], ["19", "69"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "33"], ["21", "37"], ["21", "39"], ["21", "41"], ["21", "62"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["29", "30"], ["29", "31"], ["31", "32"], ["33", "34"], ["33", "35"], ["35", "36"], ["37", "38"], ["39", "40"], ["41", "42"], ["41", "51"], ["41", "55"], ["42", "43"], ["42", "50"], ["43", "44"], ["43", "49"], ["44", "45"], ["44", "46"], ["46", "47"], ["46", "48"], ["51", "52"], ["51", "53"], ["53", "54"], ["55", "56"], ["56", "57"], ["56", "58"], ["58", "59"], ["58", "60"], ["58", "61"], ["62", "63"], ["62", "66"], ["63", "64"], ["63", "65"], ["22", "28"], ["25", "31"], ["29", "35"], ["33", "37"], ["37", "39"], ["39", "46"], ["62", "69"], ["24", "22"], ["26", "25"], ["31", "29"], ["35", "33"], ["42", "53"], ["42", "58"], ["51", "65"], ["63", "62"], ["28", "26"], ["43", "42"], ["53", "51"], ["56", "65"], ["65", "63"], ["44", "43"], ["58", "56"], ["46", "44"], ["19", "24"], ["20", "69"], ["22", "69"], ["25", "69"], ["25", "69"], ["29", "69"], ["35", "69"], ["33", "69"], ["33", "69"], ["37", "69"], ["39", "69"], ["44", "69"], ["44", "69"], ["43", "69"], ["42", "69"], ["42", "69"], ["42", "69"], ["58", "69"], ["56", "69"], ["56", "69"], ["51", "69"], ["51", "69"], ["62", "69"], ["62", "69"], ["62", "69"], ["58", "69"], ["19", "20"], ["19", "22"], ["31", "29"], ["35", "33"], ["22", "25"], ["19", "25"], ["29", "37"], ["19", "37"], ["33", "39"], ["19", "39"], ["53", "51"], ["56", "62"], ["51", "62"], ["19", "62"], ["25", "31"], ["19", "31"], ["31", "35"], ["19", "35"], ["43", "42"], ["43", "42"], ["37", "42"], ["19", "42"], ["58", "56"], ["58", "56"], ["58", "56"], ["44", "43"], ["44", "43"], ["19", "43"], ["19", "53"], ["19", "44"], ["39", "44"], ["19", "58"], ["44", "58"], ["39", "46"], ["19", "46"], ["42", "56"], ["42", "58"], ["42", "51"], ["42", "53"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY in = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,in,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(&lt;operator&gt;.assignment,n = nextLong())<SUB>3</SUB>>", "31": "<(nextLong,nextLong())<SUB>3</SUB>>", "33": "<(&lt;operator&gt;.assignment,k = nextLong())<SUB>4</SUB>>", "35": "<(nextLong,nextLong())<SUB>4</SUB>>", "37": "<(&lt;operator&gt;.postDecrement,n--)<SUB>5</SUB>>", "39": "<(&lt;operator&gt;.postDecrement,k--)<SUB>6</SUB>>", "41": "<(CONTROL_STRUCTURE,if (k * (k + 1) / 2 &lt; n),if (k * (k + 1) / 2 &lt; n))<SUB>7</SUB>>", "43": "<(&lt;operator&gt;.division,k * (k + 1) / 2)<SUB>7</SUB>>", "45": "<(IDENTIFIER,k,k * (k + 1))<SUB>7</SUB>>", "47": "<(IDENTIFIER,k,k + 1)<SUB>7</SUB>>", "49": "<(LITERAL,2,k * (k + 1) / 2)<SUB>7</SUB>>", "51": "<(&lt;operator&gt;.assignment,ans = -1)<SUB>8</SUB>>", "53": "<(&lt;operator&gt;.minus,-1)<SUB>8</SUB>>", "55": "<(CONTROL_STRUCTURE,else,else)<SUB>10</SUB>>", "57": "<(IDENTIFIER,ans,ans = binsearch(0, k))<SUB>10</SUB>>", "59": "<(IDENTIFIER,this,binsearch(0, k))<SUB>10</SUB>>", "61": "<(IDENTIFIER,k,binsearch(0, k))<SUB>10</SUB>>", "63": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>11</SUB>>", "65": "<(FIELD_IDENTIFIER,out,out)<SUB>11</SUB>>", "67": "<(MODIFIER,PUBLIC)>", "69": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}