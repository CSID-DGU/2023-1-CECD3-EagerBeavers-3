{"edges": [["23", "25"], ["23", "115"], ["23", "116"], ["23", "117"], ["25", "4"], ["25", "26"], ["25", "29"], ["25", "6"], ["25", "33"], ["25", "36"], ["25", "40"], ["25", "41"], ["25", "8"], ["25", "45"], ["25", "48"], ["25", "49"], ["25", "64"], ["25", "65"], ["25", "68"], ["25", "110"], ["25", "113"], ["26", "27"], ["26", "28"], ["29", "3"], ["29", "30"], ["30", "31"], ["30", "32"], ["33", "34"], ["33", "35"], ["36", "5"], ["36", "37"], ["37", "38"], ["37", "39"], ["41", "42"], ["41", "43"], ["43", "44"], ["45", "46"], ["45", "47"], ["48", "7"], ["49", "50"], ["49", "51"], ["49", "54"], ["49", "57"], ["49", "59"], ["51", "52"], ["51", "53"], ["54", "55"], ["54", "56"], ["57", "58"], ["59", "60"], ["60", "61"], ["60", "62"], ["62", "63"], ["65", "66"], ["65", "67"], ["68", "69"], ["68", "73"], ["69", "70"], ["69", "72"], ["70", "71"], ["73", "74"], ["73", "76"], ["73", "77"], ["73", "84"], ["74", "75"], ["77", "78"], ["77", "79"], ["79", "80"], ["79", "81"], ["81", "82"], ["81", "83"], ["84", "85"], ["84", "86"], ["84", "89"], ["84", "93"], ["84", "95"], ["86", "87"], ["86", "88"], ["89", "90"], ["89", "91"], ["91", "92"], ["93", "94"], ["95", "96"], ["96", "97"], ["96", "104"], ["97", "98"], ["97", "103"], ["98", "99"], ["98", "102"], ["99", "100"], ["99", "101"], ["104", "105"], ["104", "108"], ["105", "106"], ["105", "107"], ["108", "109"], ["110", "111"], ["110", "112"], ["113", "114"], ["26", "32"], ["29", "35"], ["33", "39"], ["36", "43"], ["41", "47"], ["45", "48"], ["48", "51"], ["65", "70"], ["110", "113"], ["113", "117"], ["28", "26"], ["30", "29"], ["35", "33"], ["37", "36"], ["43", "41"], ["47", "45"], ["51", "54"], ["54", "62"], ["54", "65"], ["57", "54"], ["69", "74"], ["69", "110"], ["32", "30"], ["39", "37"], ["60", "57"], ["70", "69"], ["74", "81"], ["77", "86"], ["62", "60"], ["79", "77"], ["86", "91"], ["89", "70"], ["89", "99"], ["93", "91"], ["81", "79"], ["91", "89"], ["97", "105"], ["97", "93"], ["98", "97"], ["105", "108"], ["108", "93"], ["99", "98"], ["23", "28"], ["24", "117"], ["26", "117"], ["29", "117"], ["29", "117"], ["33", "117"], ["36", "117"], ["36", "117"], ["43", "117"], ["41", "117"], ["41", "117"], ["45", "117"], ["48", "117"], ["51", "117"], ["54", "117"], ["54", "117"], ["54", "117"], ["65", "117"], ["70", "117"], ["69", "117"], ["69", "117"], ["110", "117"], ["110", "117"], ["113", "117"], ["113", "117"], ["74", "117"], ["77", "117"], ["79", "117"], ["77", "117"], ["77", "117"], ["86", "117"], ["89", "117"], ["89", "117"], ["98", "117"], ["98", "117"], ["97", "117"], ["97", "117"], ["105", "117"], ["108", "117"], ["93", "117"], ["62", "117"], ["60", "117"], ["60", "117"], ["57", "117"], ["81", "117"], ["23", "24"], ["23", "26"], ["23", "33"], ["43", "41"], ["23", "45"], ["23", "65"], ["26", "29"], ["23", "29"], ["33", "36"], ["23", "36"], ["45", "48"], ["23", "48"], ["23", "51"], ["36", "110"], ["23", "110"], ["65", "110"], ["74", "110"], ["110", "113"], ["23", "113"], ["29", "43"], ["23", "43"], ["51", "54"], ["57", "54"], ["23", "54"], ["41", "54"], ["54", "57"], ["23", "57"], ["70", "69"], ["23", "69"], ["79", "77"], ["79", "77"], ["48", "60"], ["23", "60"], ["62", "60"], ["48", "70"], ["91", "70"], ["60", "70"], ["23", "70"], ["65", "74"], ["23", "74"], ["23", "86"], ["43", "62"], ["23", "62"], ["81", "79"], ["23", "79"], ["81", "79"], ["86", "89"], ["93", "89"], ["23", "89"], ["91", "89"], ["99", "93"], ["108", "93"], ["23", "93"], ["23", "81"], ["70", "81"], ["79", "91"], ["99", "91"], ["105", "91"], ["23", "91"], ["98", "97"], ["98", "97"], ["23", "97"], ["99", "98"], ["99", "98"], ["77", "98"], ["23", "98"], ["99", "105"], ["23", "105"], ["99", "105"], ["105", "108"], ["23", "108"], ["91", "99"], ["23", "99"], ["89", "99"], ["54", "60"], ["54", "57"], ["54", "54"], ["54", "62"], ["69", "77"], ["69", "89"], ["69", "81"], ["69", "69"], ["69", "70"], ["69", "74"], ["69", "91"], ["69", "79"], ["69", "86"], ["89", "89"], ["89", "98"], ["89", "99"], ["89", "97"], ["89", "91"], ["89", "93"], ["97", "105"], ["97", "108"]], "features": {"23": "<(METHOD,main)<SUB>1</SUB>>", "25": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "26": "<(&lt;operator&gt;.assignment,ANY sc = new FastScanner(System.in))<SUB>2</SUB>>", "28": "<(&lt;operator&gt;.alloc,new FastScanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new FastScanner(System.in))<SUB>2</SUB>>", "31": "<(IDENTIFIER,System,new FastScanner(System.in))<SUB>2</SUB>>", "6": "<(LOCAL,PrintWriter pw: ANY)<SUB>3</SUB>>", "34": "<(IDENTIFIER,pw,ANY pw = new PrintWriter(System.out))<SUB>3</SUB>>", "36": "<(&lt;init&gt;,new PrintWriter(System.out))<SUB>3</SUB>>", "37": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>3</SUB>>", "39": "<(FIELD_IDENTIFIER,out,out)<SUB>3</SUB>>", "41": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>5</SUB>>", "43": "<(nextInt,nextInt())<SUB>5</SUB>>", "8": "<(LOCAL,List&lt;Integer&gt; list: ANY)<SUB>6</SUB>>", "46": "<(IDENTIFIER,list,ANY list = new ArrayList&lt;Integer&gt;())<SUB>6</SUB>>", "48": "<(&lt;init&gt;,new ArrayList&lt;Integer&gt;())<SUB>6</SUB>>", "49": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>7</SUB>>", "51": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>7</SUB>>", "53": "<(LITERAL,0,int i = 0)<SUB>7</SUB>>", "55": "<(IDENTIFIER,i,i &lt; n)<SUB>7</SUB>>", "57": "<(&lt;operator&gt;.postIncrement,i++)<SUB>7</SUB>>", "59": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>7</SUB>>", "61": "<(IDENTIFIER,list,add(sc.nextInt()))<SUB>8</SUB>>", "63": "<(IDENTIFIER,sc,nextInt())<SUB>8</SUB>>", "65": "<(&lt;operator&gt;.assignment,int count = 0)<SUB>10</SUB>>", "67": "<(LITERAL,0,int count = 0)<SUB>10</SUB>>", "69": "<(&lt;operator&gt;.greaterThan,list.size() &gt; 0)<SUB>11</SUB>>", "71": "<(IDENTIFIER,list,size())<SUB>11</SUB>>", "73": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>11</SUB>>", "75": "<(IDENTIFIER,count,count++)<SUB>12</SUB>>", "77": "<(&lt;operator&gt;.assignment,int temp = get(minIndex(list)))<SUB>13</SUB>>", "79": "<(get,get(minIndex(list)))<SUB>13</SUB>>", "81": "<(minIndex,minIndex(list))<SUB>13</SUB>>", "83": "<(IDENTIFIER,list,minIndex(list))<SUB>13</SUB>>", "85": "<(LOCAL,int j: int)<SUB>15</SUB>>", "87": "<(IDENTIFIER,j,int j = 0)<SUB>15</SUB>>", "89": "<(&lt;operator&gt;.lessThan,j &lt; list.size())<SUB>15</SUB>>", "91": "<(size,size())<SUB>15</SUB>>", "93": "<(&lt;operator&gt;.postIncrement,j++)<SUB>15</SUB>>", "95": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>15</SUB>>", "97": "<(&lt;operator&gt;.equals,list.get(j) % temp == 0)<SUB>16</SUB>>", "99": "<(get,get(j))<SUB>16</SUB>>", "101": "<(IDENTIFIER,j,get(j))<SUB>16</SUB>>", "103": "<(LITERAL,0,list.get(j) % temp == 0)<SUB>16</SUB>>", "105": "<(remove,remove(j))<SUB>19</SUB>>", "107": "<(IDENTIFIER,j,remove(j))<SUB>19</SUB>>", "109": "<(IDENTIFIER,j,j--)<SUB>20</SUB>>", "111": "<(IDENTIFIER,pw,println(count))<SUB>27</SUB>>", "113": "<(close,close())<SUB>29</SUB>>", "115": "<(MODIFIER,PUBLIC)>", "117": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}