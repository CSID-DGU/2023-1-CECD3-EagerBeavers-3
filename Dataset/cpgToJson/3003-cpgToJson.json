{"edges": [["19", "20"], ["19", "21"], ["19", "106"], ["19", "107"], ["19", "108"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["34", "35"], ["34", "38"], ["34", "43"], ["35", "36"], ["35", "37"], ["38", "39"], ["38", "42"], ["39", "40"], ["39", "41"], ["43", "44"], ["44", "45"], ["45", "46"], ["45", "49"], ["45", "54"], ["46", "47"], ["46", "48"], ["49", "50"], ["49", "53"], ["50", "51"], ["50", "52"], ["54", "55"], ["55", "56"], ["55", "57"], ["55", "60"], ["55", "89"], ["57", "58"], ["57", "59"], ["60", "61"], ["60", "66"], ["61", "62"], ["61", "63"], ["63", "64"], ["63", "65"], ["66", "67"], ["67", "68"], ["67", "73"], ["67", "86"], ["68", "69"], ["68", "70"], ["70", "71"], ["70", "72"], ["73", "74"], ["74", "75"], ["74", "82"], ["74", "84"], ["75", "76"], ["75", "81"], ["76", "77"], ["76", "80"], ["77", "78"], ["77", "79"], ["82", "83"], ["84", "85"], ["86", "87"], ["87", "88"], ["89", "90"], ["89", "95"], ["89", "100"], ["90", "91"], ["90", "92"], ["92", "93"], ["92", "94"], ["95", "96"], ["95", "99"], ["96", "97"], ["96", "98"], ["100", "101"], ["101", "102"], ["101", "105"], ["102", "103"], ["102", "104"], ["22", "28"], ["25", "32"], ["30", "35"], ["24", "22"], ["26", "25"], ["32", "30"], ["35", "41"], ["35", "46"], ["38", "108"], ["28", "26"], ["39", "38"], ["41", "39"], ["46", "52"], ["46", "57"], ["49", "108"], ["50", "49"], ["52", "50"], ["57", "63"], ["61", "70"], ["61", "92"], ["90", "98"], ["90", "104"], ["95", "108"], ["63", "61"], ["92", "90"], ["96", "95"], ["101", "108"], ["68", "77"], ["68", "87"], ["98", "96"], ["102", "101"], ["70", "68"], ["87", "63"], ["104", "102"], ["75", "82"], ["75", "92"], ["82", "63"], ["76", "75"], ["77", "76"], ["19", "24"], ["20", "108"], ["22", "108"], ["25", "108"], ["25", "108"], ["32", "108"], ["30", "108"], ["30", "108"], ["35", "108"], ["35", "108"], ["38", "108"], ["19", "20"], ["19", "22"], ["32", "30"], ["22", "25"], ["19", "25"], ["25", "32"], ["19", "32"], ["30", "35"], ["19", "35"], ["19", "38"], ["19", "46"], ["35", "46"], ["19", "49"], ["19", "57"], ["57", "61"], ["87", "61"], ["82", "61"], ["19", "61"], ["63", "61"], ["63", "61"], ["61", "90"], ["76", "90"], ["19", "90"], ["92", "90"], ["92", "90"], ["19", "95"], ["77", "63"], ["19", "63"], ["46", "63"], ["77", "63"], ["63", "92"], ["77", "92"], ["19", "92"], ["63", "92"], ["77", "92"], ["19", "101"], ["46", "68"], ["19", "68"], ["61", "68"], ["61", "70"], ["19", "70"], ["19", "87"], ["61", "87"], ["76", "75"], ["76", "75"], ["19", "75"], ["76", "82"], ["19", "82"], ["77", "76"], ["77", "76"], ["19", "76"], ["61", "76"], ["63", "77"], ["19", "77"], ["63", "77"], ["35", "46"], ["35", "38"], ["35", "41"], ["35", "39"], ["46", "49"], ["46", "57"], ["46", "52"], ["46", "92"], ["46", "50"], ["46", "90"], ["46", "61"], ["46", "63"], ["61", "68"], ["61", "70"], ["90", "96"], ["90", "98"], ["90", "102"], ["90", "104"], ["90", "95"], ["90", "101"], ["68", "77"], ["68", "75"], ["68", "76"], ["68", "87"], ["68", "61"], ["68", "63"], ["75", "82"], ["75", "61"], ["75", "63"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY in = new Scanner(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,in,new Scanner(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,String input: java.lang.String)<SUB>3</SUB>>", "31": "<(IDENTIFIER,input,String input = nextLine())<SUB>3</SUB>>", "33": "<(IDENTIFIER,in,nextLine())<SUB>3</SUB>>", "35": "<(equals,input.equals(&quot;1&quot;))<SUB>4</SUB>>", "37": "<(LITERAL,&quot;1&quot;,input.equals(&quot;1&quot;))<SUB>4</SUB>>", "39": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>5</SUB>>", "41": "<(FIELD_IDENTIFIER,out,out)<SUB>5</SUB>>", "43": "<(CONTROL_STRUCTURE,else,else)<SUB>6</SUB>>", "45": "<(CONTROL_STRUCTURE,if (checkNum(input)),if (checkNum(input)))<SUB>7</SUB>>", "47": "<(IDENTIFIER,this,checkNum(input))<SUB>7</SUB>>", "49": "<(println,System.out.println(&quot;YES&quot;))<SUB>8</SUB>>", "51": "<(IDENTIFIER,System,System.out.println(&quot;YES&quot;))<SUB>8</SUB>>", "53": "<(LITERAL,&quot;YES&quot;,System.out.println(&quot;YES&quot;))<SUB>8</SUB>>", "55": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>>", "57": "<(&lt;operator&gt;.assignment,int i = 2)<SUB>10</SUB>>", "59": "<(LITERAL,2,int i = 2)<SUB>10</SUB>>", "61": "<(&lt;operator&gt;.lessThan,i &lt; Integer.parseInt(input))<SUB>11</SUB>>", "63": "<(parseInt,Integer.parseInt(input))<SUB>11</SUB>>", "65": "<(IDENTIFIER,input,Integer.parseInt(input))<SUB>11</SUB>>", "67": "<(CONTROL_STRUCTURE,if (checkNum(i + &quot;&quot;)),if (checkNum(i + &quot;&quot;)))<SUB>12</SUB>>", "69": "<(IDENTIFIER,this,checkNum(i + &quot;&quot;))<SUB>12</SUB>>", "71": "<(IDENTIFIER,i,i + &quot;&quot;)<SUB>12</SUB>>", "73": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>12</SUB>>", "75": "<(&lt;operator&gt;.notEquals,Integer.parseInt(input) % i != 0)<SUB>13</SUB>>", "77": "<(parseInt,Integer.parseInt(input))<SUB>13</SUB>>", "79": "<(IDENTIFIER,input,Integer.parseInt(input))<SUB>13</SUB>>", "81": "<(LITERAL,0,Integer.parseInt(input) % i != 0)<SUB>13</SUB>>", "83": "<(IDENTIFIER,i,i++)<SUB>14</SUB>>", "85": "<(CONTROL_STRUCTURE,break;,break;)<SUB>16</SUB>>", "87": "<(&lt;operator&gt;.postIncrement,i++)<SUB>18</SUB>>", "89": "<(CONTROL_STRUCTURE,if (i == Integer.parseInt(input)),if (i == Integer.parseInt(input)))<SUB>20</SUB>>", "91": "<(IDENTIFIER,i,i == Integer.parseInt(input))<SUB>20</SUB>>", "93": "<(IDENTIFIER,Integer,Integer.parseInt(input))<SUB>20</SUB>>", "95": "<(println,System.out.println(&quot;NO&quot;))<SUB>21</SUB>>", "97": "<(IDENTIFIER,System,System.out.println(&quot;NO&quot;))<SUB>21</SUB>>", "99": "<(LITERAL,&quot;NO&quot;,System.out.println(&quot;NO&quot;))<SUB>21</SUB>>", "101": "<(println,System.out.println(&quot;YES&quot;))<SUB>23</SUB>>", "103": "<(IDENTIFIER,System,System.out.println(&quot;YES&quot;))<SUB>23</SUB>>", "105": "<(LITERAL,&quot;YES&quot;,System.out.println(&quot;YES&quot;))<SUB>23</SUB>>", "107": "<(MODIFIER,STATIC)>"}}