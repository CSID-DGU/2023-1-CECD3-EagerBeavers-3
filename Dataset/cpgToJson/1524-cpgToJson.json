{"edges": [["21", "22"], ["21", "23"], ["21", "114"], ["21", "115"], ["21", "116"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "29"], ["23", "32"], ["23", "33"], ["23", "37"], ["23", "41"], ["23", "42"], ["23", "46"], ["23", "63"], ["23", "66"], ["23", "108"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["29", "30"], ["29", "31"], ["32", "5"], ["33", "34"], ["33", "35"], ["35", "36"], ["37", "38"], ["37", "39"], ["39", "40"], ["42", "43"], ["42", "44"], ["44", "45"], ["46", "47"], ["46", "48"], ["46", "51"], ["46", "54"], ["46", "56"], ["48", "49"], ["48", "50"], ["51", "52"], ["51", "53"], ["54", "55"], ["56", "57"], ["57", "58"], ["57", "61"], ["58", "59"], ["58", "60"], ["61", "62"], ["63", "64"], ["63", "65"], ["66", "67"], ["66", "68"], ["66", "71"], ["66", "74"], ["66", "76"], ["68", "69"], ["68", "70"], ["71", "72"], ["71", "73"], ["74", "75"], ["76", "77"], ["77", "78"], ["77", "85"], ["77", "91"], ["78", "79"], ["78", "84"], ["79", "80"], ["79", "83"], ["80", "81"], ["80", "82"], ["85", "86"], ["86", "87"], ["86", "88"], ["88", "89"], ["88", "90"], ["91", "92"], ["92", "93"], ["93", "94"], ["93", "102"], ["94", "95"], ["95", "96"], ["95", "97"], ["97", "98"], ["97", "101"], ["98", "99"], ["98", "100"], ["102", "103"], ["103", "104"], ["103", "105"], ["105", "106"], ["105", "107"], ["108", "109"], ["108", "112"], ["109", "110"], ["109", "111"], ["112", "113"], ["24", "27"], ["27", "31"], ["29", "32"], ["32", "35"], ["33", "39"], ["37", "44"], ["42", "48"], ["63", "68"], ["108", "116"], ["26", "24"], ["31", "29"], ["35", "33"], ["39", "37"], ["44", "42"], ["48", "51"], ["51", "58"], ["51", "63"], ["54", "51"], ["68", "71"], ["71", "80"], ["71", "111"], ["74", "71"], ["109", "112"], ["112", "108"], ["57", "54"], ["111", "109"], ["58", "61"], ["61", "57"], ["78", "88"], ["78", "98"], ["79", "78"], ["86", "74"], ["80", "79"], ["88", "86"], ["94", "105"], ["94", "74"], ["95", "94"], ["103", "74"], ["97", "95"], ["105", "103"], ["98", "97"], ["21", "26"], ["22", "116"], ["24", "116"], ["27", "116"], ["29", "116"], ["32", "116"], ["33", "116"], ["37", "116"], ["39", "116"], ["37", "116"], ["37", "116"], ["42", "116"], ["42", "116"], ["63", "116"], ["63", "116"], ["68", "116"], ["71", "116"], ["71", "116"], ["71", "116"], ["108", "116"], ["112", "116"], ["108", "116"], ["108", "116"], ["79", "116"], ["78", "116"], ["78", "116"], ["97", "116"], ["97", "116"], ["95", "116"], ["94", "116"], ["94", "116"], ["103", "116"], ["103", "116"], ["86", "116"], ["86", "116"], ["74", "116"], ["57", "116"], ["61", "116"], ["57", "116"], ["57", "116"], ["54", "116"], ["63", "116"], ["21", "22"], ["21", "24"], ["21", "29"], ["35", "33"], ["39", "37"], ["44", "42"], ["24", "27"], ["21", "27"], ["29", "32"], ["21", "32"], ["21", "48"], ["21", "63"], ["42", "63"], ["57", "63"], ["21", "68"], ["112", "108"], ["32", "35"], ["21", "35"], ["35", "39"], ["21", "39"], ["33", "44"], ["21", "44"], ["48", "51"], ["54", "51"], ["21", "51"], ["44", "51"], ["51", "54"], ["21", "54"], ["61", "57"], ["68", "71"], ["74", "71"], ["21", "71"], ["51", "71"], ["71", "74"], ["21", "74"], ["27", "112"], ["95", "112"], ["103", "112"], ["86", "112"], ["21", "112"], ["39", "61"], ["21", "61"], ["79", "78"], ["79", "78"], ["21", "78"], ["63", "79"], ["97", "79"], ["103", "79"], ["86", "79"], ["57", "79"], ["37", "79"], ["97", "79"], ["21", "79"], ["27", "86"], ["95", "86"], ["103", "86"], ["21", "86"], ["63", "86"], ["79", "86"], ["95", "94"], ["95", "94"], ["27", "95"], ["103", "95"], ["86", "95"], ["21", "95"], ["97", "95"], ["97", "95"], ["95", "103"], ["21", "103"], ["63", "103"], ["97", "103"], ["63", "97"], ["79", "97"], ["79", "97"], ["21", "97"], ["51", "58"], ["51", "61"], ["51", "51"], ["51", "57"], ["51", "54"], ["71", "80"], ["71", "71"], ["71", "74"], ["71", "78"], ["71", "79"], ["78", "94"], ["78", "98"], ["78", "88"], ["78", "95"], ["78", "97"], ["78", "86"], ["94", "105"], ["94", "103"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY set = new HashSet&lt;Integer&gt;(1000000))<SUB>5</SUB>>", "26": "<(&lt;operator&gt;.alloc,new HashSet&lt;Integer&gt;(1000000))<SUB>5</SUB>>", "3": "<(IDENTIFIER,set,new HashSet&lt;Integer&gt;(1000000))<SUB>5</SUB>>", "6": "<(LOCAL,FastScanner s: ANY)<SUB>6</SUB>>", "30": "<(IDENTIFIER,s,ANY s = new FastScanner())<SUB>6</SUB>>", "32": "<(&lt;init&gt;,new FastScanner())<SUB>6</SUB>>", "33": "<(&lt;operator&gt;.assignment,n = nextInt())<SUB>7</SUB>>", "35": "<(nextInt,nextInt())<SUB>7</SUB>>", "37": "<(&lt;operator&gt;.assignment,k = nextInt())<SUB>8</SUB>>", "39": "<(nextInt,nextInt())<SUB>8</SUB>>", "41": "<(LOCAL,int[] a: int[])<SUB>10</SUB>>", "43": "<(IDENTIFIER,a,int[] a = new int[n])<SUB>10</SUB>>", "45": "<(IDENTIFIER,n,new int[n])<SUB>10</SUB>>", "47": "<(LOCAL,int i: int)<SUB>11</SUB>>", "49": "<(IDENTIFIER,i,int i = 0)<SUB>11</SUB>>", "51": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>11</SUB>>", "53": "<(IDENTIFIER,n,i &lt; n)<SUB>11</SUB>>", "55": "<(IDENTIFIER,i,i++)<SUB>11</SUB>>", "57": "<(&lt;operator&gt;.assignment,a[i] = nextInt())<SUB>12</SUB>>", "59": "<(IDENTIFIER,a,a[i] = nextInt())<SUB>12</SUB>>", "61": "<(nextInt,nextInt())<SUB>12</SUB>>", "63": "<(sort,sort(a))<SUB>14</SUB>>", "65": "<(IDENTIFIER,a,sort(a))<SUB>14</SUB>>", "67": "<(LOCAL,int i: int)<SUB>16</SUB>>", "69": "<(IDENTIFIER,i,int i = 0)<SUB>16</SUB>>", "71": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>16</SUB>>", "73": "<(IDENTIFIER,n,i &lt; n)<SUB>16</SUB>>", "75": "<(IDENTIFIER,i,i++)<SUB>16</SUB>>", "77": "<(CONTROL_STRUCTURE,if (a[i] % k != 0),if (a[i] % k != 0))<SUB>17</SUB>>", "79": "<(&lt;operator&gt;.modulo,a[i] % k)<SUB>17</SUB>>", "81": "<(IDENTIFIER,a,a[i] % k)<SUB>17</SUB>>", "83": "<(IDENTIFIER,k,a[i] % k)<SUB>17</SUB>>", "85": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>17</SUB>>", "87": "<(IDENTIFIER,set,add(a[i]))<SUB>18</SUB>>", "89": "<(IDENTIFIER,a,add(a[i]))<SUB>18</SUB>>", "91": "<(CONTROL_STRUCTURE,else,else)<SUB>19</SUB>>", "93": "<(CONTROL_STRUCTURE,if (!set.contains(a[i] / k)),if (!set.contains(a[i] / k)))<SUB>20</SUB>>", "95": "<(contains,contains(a[i] / k))<SUB>20</SUB>>", "97": "<(&lt;operator&gt;.division,a[i] / k)<SUB>20</SUB>>", "99": "<(IDENTIFIER,a,a[i] / k)<SUB>20</SUB>>", "101": "<(IDENTIFIER,k,a[i] / k)<SUB>20</SUB>>", "103": "<(add,add(a[i]))<SUB>21</SUB>>", "105": "<(&lt;operator&gt;.indexAccess,a[i])<SUB>21</SUB>>", "107": "<(IDENTIFIER,i,add(a[i]))<SUB>21</SUB>>", "109": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>26</SUB>>", "111": "<(FIELD_IDENTIFIER,out,out)<SUB>26</SUB>>", "113": "<(IDENTIFIER,set,size())<SUB>26</SUB>>", "115": "<(MODIFIER,STATIC)>"}}