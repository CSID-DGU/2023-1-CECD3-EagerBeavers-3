{"edges": [["35", "36"], ["35", "382"], ["35", "383"], ["35", "384"], ["36", "4"], ["36", "37"], ["36", "40"], ["36", "8"], ["36", "51"], ["36", "61"], ["36", "17"], ["36", "66"], ["36", "19"], ["36", "71"], ["36", "76"], ["36", "98"], ["36", "103"], ["36", "108"], ["36", "254"], ["36", "255"], ["36", "267"], ["36", "375"], ["36", "380"], ["37", "38"], ["37", "39"], ["40", "3"], ["40", "41"], ["41", "42"], ["41", "45"], ["41", "50"], ["42", "43"], ["42", "44"], ["45", "46"], ["45", "47"], ["47", "48"], ["47", "49"], ["51", "52"], ["51", "53"], ["53", "54"], ["54", "55"], ["54", "6"], ["55", "56"], ["55", "57"], ["57", "58"], ["57", "60"], ["58", "59"], ["61", "62"], ["61", "63"], ["63", "64"], ["63", "65"], ["66", "67"], ["66", "68"], ["68", "69"], ["68", "70"], ["71", "72"], ["71", "73"], ["73", "74"], ["73", "75"], ["76", "15"], ["76", "77"], ["76", "80"], ["76", "83"], ["76", "85"], ["77", "78"], ["77", "79"], ["80", "81"], ["80", "82"], ["83", "84"], ["85", "86"], ["86", "87"], ["86", "90"], ["87", "88"], ["87", "89"], ["90", "91"], ["91", "92"], ["91", "12"], ["92", "93"], ["92", "94"], ["94", "95"], ["94", "97"], ["95", "96"], ["98", "99"], ["98", "100"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "105"], ["105", "106"], ["105", "107"], ["108", "109"], ["108", "110"], ["108", "113"], ["108", "116"], ["108", "118"], ["110", "111"], ["110", "112"], ["113", "114"], ["113", "115"], ["116", "117"], ["118", "119"], ["119", "120"], ["119", "121"], ["119", "124"], ["119", "127"], ["119", "129"], ["121", "122"], ["121", "123"], ["124", "125"], ["124", "126"], ["127", "128"], ["129", "130"], ["129", "198"], ["129", "207"], ["130", "131"], ["130", "134"], ["131", "132"], ["131", "133"], ["134", "135"], ["134", "144"], ["134", "187"], ["135", "136"], ["135", "141"], ["136", "137"], ["136", "140"], ["137", "138"], ["137", "139"], ["141", "142"], ["141", "143"], ["144", "145"], ["144", "146"], ["144", "149"], ["144", "152"], ["144", "154"], ["146", "147"], ["146", "148"], ["149", "150"], ["149", "151"], ["152", "153"], ["154", "155"], ["154", "156"], ["154", "171"], ["156", "157"], ["156", "158"], ["158", "159"], ["158", "160"], ["160", "161"], ["160", "166"], ["161", "162"], ["161", "165"], ["162", "163"], ["162", "164"], ["166", "167"], ["166", "170"], ["167", "168"], ["167", "169"], ["171", "172"], ["171", "179"], ["172", "173"], ["172", "174"], ["174", "175"], ["174", "178"], ["175", "176"], ["175", "177"], ["179", "180"], ["180", "181"], ["180", "186"], ["181", "182"], ["181", "185"], ["182", "183"], ["182", "184"], ["187", "188"], ["187", "193"], ["188", "189"], ["188", "192"], ["189", "190"], ["189", "191"], ["193", "194"], ["193", "197"], ["194", "195"], ["194", "196"], ["198", "199"], ["198", "204"], ["199", "200"], ["199", "203"], ["200", "201"], ["200", "202"], ["204", "205"], ["204", "206"], ["207", "208"], ["207", "209"], ["207", "212"], ["207", "217"], ["207", "219"], ["209", "210"], ["209", "211"], ["212", "213"], ["212", "214"], ["214", "215"], ["214", "216"], ["217", "218"], ["219", "220"], ["219", "221"], ["219", "238"], ["221", "222"], ["221", "223"], ["223", "224"], ["223", "225"], ["225", "226"], ["225", "233"], ["226", "227"], ["226", "230"], ["227", "228"], ["227", "229"], ["230", "231"], ["230", "232"], ["233", "234"], ["233", "237"], ["234", "235"], ["234", "236"], ["238", "239"], ["238", "246"], ["239", "240"], ["239", "241"], ["241", "242"], ["241", "245"], ["242", "243"], ["242", "244"], ["246", "247"], ["247", "248"], ["247", "253"], ["248", "249"], ["248", "252"], ["249", "250"], ["249", "251"], ["255", "256"], ["255", "257"], ["257", "258"], ["257", "261"], ["257", "266"], ["258", "259"], ["258", "260"], ["261", "262"], ["261", "265"], ["262", "263"], ["262", "264"], ["267", "268"], ["267", "269"], ["267", "272"], ["267", "275"], ["267", "277"], ["269", "270"], ["269", "271"], ["272", "273"], ["272", "274"], ["275", "276"], ["277", "278"], ["277", "280"], ["277", "322"], ["278", "279"], ["280", "281"], ["280", "282"], ["280", "285"], ["280", "288"], ["280", "290"], ["282", "283"], ["282", "284"], ["285", "286"], ["285", "287"], ["288", "289"], ["290", "291"], ["291", "292"], ["291", "295"], ["292", "293"], ["292", "294"], ["295", "296"], ["295", "297"], ["295", "306"], ["295", "307"], ["295", "314"], ["297", "298"], ["297", "299"], ["299", "300"], ["299", "303"], ["300", "301"], ["300", "302"], ["303", "304"], ["303", "305"], ["307", "308"], ["307", "309"], ["309", "310"], ["309", "311"], ["311", "312"], ["311", "313"], ["314", "315"], ["314", "316"], ["314", "317"], ["317", "318"], ["317", "321"], ["318", "319"], ["318", "320"], ["322", "323"], ["322", "324"], ["322", "327"], ["322", "330"], ["322", "332"], ["324", "325"], ["324", "326"], ["327", "328"], ["327", "329"], ["330", "331"], ["332", "333"], ["333", "334"], ["333", "337"], ["334", "335"], ["334", "336"], ["337", "338"], ["338", "339"], ["338", "346"], ["338", "348"], ["339", "340"], ["339", "345"], ["340", "341"], ["340", "344"], ["341", "342"], ["341", "343"], ["346", "347"], ["348", "349"], ["349", "350"], ["349", "351"], ["349", "369"], ["351", "352"], ["351", "353"], ["353", "354"], ["353", "355"], ["353", "360"], ["355", "356"], ["355", "359"], ["356", "357"], ["356", "358"], ["360", "361"], ["360", "362"], ["360", "363"], ["360", "364"], ["364", "365"], ["364", "368"], ["365", "366"], ["365", "367"], ["369", "370"], ["369", "371"], ["371", "372"], ["371", "373"], ["371", "374"], ["375", "376"], ["375", "379"], ["376", "377"], ["376", "378"], ["380", "381"], ["37", "44"], ["40", "58"], ["51", "63"], ["61", "68"], ["66", "73"], ["71", "77"], ["98", "105"], ["103", "110"], ["255", "269"], ["375", "380"], ["380", "384"], ["39", "37"], ["53", "51"], ["63", "61"], ["68", "66"], ["73", "71"], ["77", "80"], ["80", "87"], ["80", "100"], ["83", "80"], ["100", "98"], ["105", "103"], ["110", "113"], ["113", "121"], ["113", "258"], ["116", "113"], ["257", "255"], ["269", "272"], ["272", "278"], ["272", "378"], ["275", "272"], ["376", "375"], ["42", "49"], ["45", "40"], ["54", "53"], ["86", "83"], ["258", "262"], ["258", "257"], ["261", "257"], ["278", "282"], ["378", "376"], ["44", "42"], ["47", "45"], ["55", "6"], ["6", "54"], ["87", "95"], ["90", "86"], ["121", "124"], ["124", "131"], ["124", "116"], ["127", "124"], ["262", "261"], ["282", "285"], ["285", "292"], ["285", "324"], ["288", "285"], ["324", "327"], ["327", "334"], ["327", "275"], ["330", "327"], ["49", "47"], ["57", "55"], ["91", "90"], ["198", "209"], ["58", "57"], ["92", "12"], ["12", "91"], ["131", "137"], ["131", "200"], ["199", "206"], ["204", "198"], ["209", "214"], ["212", "227"], ["212", "127"], ["217", "214"], ["292", "300"], ["292", "288"], ["334", "341"], ["334", "330"], ["94", "92"], ["135", "146"], ["187", "200"], ["200", "199"], ["206", "204"], ["214", "212"], ["221", "242"], ["297", "311"], ["307", "318"], ["314", "288"], ["95", "94"], ["136", "143"], ["141", "135"], ["146", "149"], ["149", "162"], ["149", "189"], ["152", "149"], ["188", "194"], ["193", "187"], ["223", "221"], ["239", "249"], ["239", "217"], ["299", "297"], ["309", "307"], ["317", "314"], ["339", "330"], ["339", "356"], ["137", "136"], ["143", "141"], ["156", "175"], ["189", "188"], ["194", "193"], ["225", "223"], ["241", "239"], ["247", "217"], ["300", "303"], ["303", "299"], ["311", "309"], ["318", "317"], ["340", "339"], ["158", "156"], ["172", "182"], ["172", "152"], ["226", "234"], ["233", "225"], ["242", "241"], ["248", "247"], ["341", "340"], ["351", "371"], ["369", "330"], ["160", "158"], ["174", "172"], ["180", "152"], ["227", "230"], ["230", "226"], ["234", "233"], ["249", "248"], ["353", "351"], ["371", "369"], ["161", "167"], ["166", "160"], ["175", "174"], ["181", "180"], ["355", "365"], ["360", "353"], ["162", "161"], ["167", "166"], ["182", "181"], ["356", "355"], ["364", "360"], ["365", "364"], ["35", "39"], ["10", "384"], ["37", "384"], ["42", "384"], ["45", "384"], ["45", "384"], ["45", "384"], ["40", "384"], ["51", "384"], ["55", "384"], ["57", "384"], ["55", "384"], ["54", "384"], ["53", "384"], ["51", "384"], ["51", "384"], ["61", "384"], ["61", "384"], ["66", "384"], ["66", "384"], ["71", "384"], ["73", "384"], ["71", "384"], ["71", "384"], ["98", "384"], ["98", "384"], ["103", "384"], ["103", "384"], ["103", "384"], ["257", "384"], ["257", "384"], ["255", "384"], ["255", "384"], ["269", "384"], ["272", "384"], ["272", "384"], ["272", "384"], ["375", "384"], ["375", "384"], ["375", "384"], ["380", "384"], ["380", "384"], ["278", "384"], ["278", "384"], ["324", "384"], ["327", "384"], ["327", "384"], ["275", "384"], ["334", "384"], ["339", "384"], ["339", "384"], ["353", "384"], ["364", "384"], ["360", "384"], ["353", "384"], ["351", "384"], ["351", "384"], ["371", "384"], ["371", "384"], ["369", "384"], ["369", "384"], ["330", "384"], ["292", "384"], ["299", "384"], ["299", "384"], ["297", "384"], ["297", "384"], ["309", "384"], ["309", "384"], ["307", "384"], ["307", "384"], ["314", "384"], ["314", "384"], ["314", "384"], ["314", "384"], ["288", "384"], ["121", "384"], ["124", "384"], ["124", "384"], ["116", "384"], ["131", "384"], ["135", "384"], ["149", "384"], ["187", "384"], ["187", "384"], ["187", "384"], ["198", "384"], ["198", "384"], ["198", "384"], ["209", "384"], ["212", "384"], ["214", "384"], ["212", "384"], ["212", "384"], ["127", "384"], ["223", "384"], ["225", "384"], ["225", "384"], ["223", "384"], ["221", "384"], ["221", "384"], ["239", "384"], ["239", "384"], ["239", "384"], ["247", "384"], ["247", "384"], ["247", "384"], ["217", "384"], ["158", "384"], ["160", "384"], ["160", "384"], ["158", "384"], ["156", "384"], ["156", "384"], ["172", "384"], ["172", "384"], ["180", "384"], ["180", "384"], ["152", "384"], ["86", "384"], ["92", "384"], ["94", "384"], ["92", "384"], ["91", "384"], ["90", "384"], ["86", "384"], ["86", "384"], ["83", "384"], ["360", "384"], ["35", "10"], ["35", "37"], ["53", "51"], ["51", "61"], ["51", "66"], ["73", "71"], ["73", "71"], ["100", "98"], ["105", "103"], ["35", "255"], ["37", "40"], ["35", "40"], ["42", "40"], ["45", "40"], ["35", "77"], ["35", "110"], ["35", "269"], ["255", "375"], ["339", "375"], ["369", "375"], ["35", "375"], ["58", "380"], ["95", "380"], ["35", "380"], ["35", "42"], ["35", "50"], ["54", "53"], ["54", "53"], ["61", "73"], ["35", "73"], ["66", "73"], ["77", "80"], ["83", "80"], ["35", "80"], ["73", "80"], ["80", "83"], ["35", "83"], ["90", "86"], ["80", "100"], ["35", "100"], ["100", "105"], ["35", "105"], ["110", "113"], ["116", "113"], ["35", "113"], ["105", "113"], ["124", "113"], ["113", "116"], ["131", "116"], ["35", "116"], ["35", "257"], ["269", "272"], ["275", "272"], ["35", "272"], ["258", "272"], ["327", "272"], ["272", "275"], ["334", "275"], ["360", "275"], ["292", "275"], ["300", "275"], ["35", "275"], ["42", "45"], ["35", "45"], ["55", "54"], ["55", "54"], ["35", "54"], ["35", "121"], ["113", "258"], ["35", "258"], ["314", "278"], ["35", "278"], ["35", "282"], ["35", "324"], ["35", "55"], ["57", "55"], ["57", "55"], ["91", "90"], ["91", "90"], ["121", "124"], ["127", "124"], ["35", "124"], ["113", "124"], ["131", "127"], ["35", "127"], ["282", "285"], ["288", "285"], ["35", "285"], ["272", "285"], ["292", "288"], ["311", "288"], ["35", "288"], ["324", "327"], ["330", "327"], ["35", "327"], ["285", "327"], ["365", "327"], ["334", "330"], ["360", "330"], ["35", "330"], ["58", "57"], ["35", "57"], ["92", "91"], ["92", "91"], ["35", "91"], ["35", "209"], ["40", "58"], ["35", "58"], ["55", "92"], ["35", "92"], ["94", "92"], ["94", "92"], ["113", "131"], ["35", "131"], ["124", "131"], ["135", "187"], ["172", "187"], ["180", "187"], ["209", "212"], ["217", "212"], ["35", "212"], ["214", "212"], ["214", "212"], ["35", "217"], ["212", "217"], ["223", "221"], ["223", "221"], ["272", "292"], ["300", "292"], ["35", "292"], ["285", "292"], ["299", "297"], ["299", "297"], ["297", "307"], ["35", "307"], ["311", "307"], ["311", "307"], ["272", "334"], ["360", "334"], ["292", "334"], ["300", "334"], ["35", "334"], ["327", "334"], ["95", "94"], ["35", "94"], ["35", "146"], ["73", "214"], ["149", "214"], ["35", "214"], ["278", "314"], ["35", "314"], ["307", "314"], ["135", "314"], ["172", "314"], ["180", "314"], ["58", "95"], ["35", "95"], ["146", "149"], ["152", "149"], ["35", "149"], ["73", "149"], ["214", "149"], ["149", "152"], ["35", "152"], ["158", "156"], ["158", "156"], ["158", "223"], ["35", "223"], ["225", "223"], ["225", "223"], ["221", "239"], ["35", "239"], ["198", "239"], ["247", "239"], ["239", "247"], ["35", "247"], ["300", "299"], ["300", "299"], ["303", "299"], ["303", "299"], ["297", "309"], ["35", "309"], ["311", "309"], ["311", "309"], ["353", "339"], ["198", "339"], ["239", "339"], ["247", "339"], ["255", "339"], ["369", "339"], ["35", "339"], ["160", "225"], ["35", "300"], ["292", "300"], ["35", "303"], ["292", "303"], ["303", "311"], ["35", "311"], ["353", "351"], ["353", "351"], ["353", "351"], ["371", "369"], ["371", "369"], ["371", "369"], ["223", "158"], ["35", "158"], ["160", "158"], ["160", "158"], ["156", "172"], ["35", "172"], ["135", "172"], ["180", "172"], ["172", "180"], ["35", "180"], ["225", "160"], ["212", "230"], ["35", "230"], ["371", "353"], ["223", "353"], ["158", "353"], ["35", "353"], ["339", "353"], ["360", "353"], ["360", "353"], ["360", "353"], ["360", "353"], ["353", "371"], ["35", "371"], ["339", "371"], ["351", "371"], ["35", "360"], ["334", "360"], ["334", "360"], ["364", "360"], ["364", "360"], ["365", "364"], ["365", "364"], ["35", "364"], ["35", "365"], ["327", "365"], ["80", "95"], ["80", "80"], ["80", "86"], ["80", "12"], ["80", "94"], ["80", "92"], ["80", "87"], ["80", "91"], ["80", "90"], ["80", "83"], ["113", "116"], ["113", "113"], ["113", "121"], ["113", "124"], ["272", "272"], ["272", "324"], ["272", "278"], ["272", "282"], ["272", "275"], ["272", "285"], ["272", "327"], ["258", "262"], ["258", "261"], ["124", "214"], ["124", "209"], ["124", "204"], ["124", "206"], ["124", "127"], ["124", "200"], ["124", "199"], ["124", "131"], ["124", "198"], ["124", "212"], ["124", "124"], ["285", "292"], ["285", "288"], ["285", "285"], ["327", "334"], ["327", "327"], ["327", "330"], ["131", "188"], ["131", "136"], ["131", "146"], ["131", "194"], ["131", "141"], ["131", "135"], ["131", "149"], ["131", "189"], ["131", "187"], ["131", "137"], ["131", "193"], ["131", "143"], ["212", "214"], ["212", "230"], ["212", "226"], ["212", "242"], ["212", "217"], ["212", "241"], ["212", "227"], ["212", "225"], ["212", "223"], ["212", "212"], ["212", "221"], ["212", "233"], ["212", "239"], ["212", "234"], ["292", "317"], ["292", "300"], ["292", "311"], ["292", "297"], ["292", "307"], ["292", "309"], ["292", "314"], ["292", "318"], ["292", "299"], ["292", "303"], ["334", "340"], ["334", "341"], ["334", "339"], ["149", "167"], ["149", "161"], ["149", "162"], ["149", "152"], ["149", "174"], ["149", "158"], ["149", "160"], ["149", "172"], ["149", "149"], ["149", "166"], ["149", "175"], ["149", "156"], ["239", "247"], ["239", "249"], ["239", "248"], ["339", "356"], ["339", "355"], ["339", "364"], ["339", "365"], ["339", "360"], ["339", "351"], ["339", "353"], ["339", "371"], ["339", "369"], ["172", "181"], ["172", "182"], ["172", "180"]], "features": {"35": "<(METHOD,main)<SUB>1</SUB>>", "36": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "37": "<(&lt;operator&gt;.assignment,ANY br = new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "39": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "3": "<(IDENTIFIER,br,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "42": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "44": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>2</SUB>>", "46": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "48": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>2</SUB>>", "50": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "51": "<(&lt;operator&gt;.assignment,int[] params = toArray())<SUB>3</SUB>>", "53": "<(toArray,toArray())<SUB>3</SUB>>", "55": "<(stream,stream(br.readLine().split(&quot; &quot;)))<SUB>3</SUB>>", "57": "<(split,split(&quot; &quot;))<SUB>3</SUB>>", "59": "<(IDENTIFIER,br,readLine())<SUB>3</SUB>>", "6": "<(METHOD_REF,Main.lambda$0:&lt;unresolvedSignature&gt;(1),mapToInt(&lt;lambda&gt;))>", "62": "<(IDENTIFIER,n,n = params[0])<SUB>5</SUB>>", "64": "<(IDENTIFIER,params,n = params[0])<SUB>5</SUB>>", "17": "<(LOCAL,int m: int)<SUB>6</SUB>>", "67": "<(IDENTIFIER,m,int m = params[1])<SUB>6</SUB>>", "69": "<(IDENTIFIER,params,int m = params[1])<SUB>6</SUB>>", "19": "<(LOCAL,int[][] matrix: int[][])<SUB>7</SUB>>", "72": "<(IDENTIFIER,matrix,int[][] matrix = new int[n][m])<SUB>7</SUB>>", "74": "<(IDENTIFIER,n,new int[n][m])<SUB>7</SUB>>", "76": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>8</SUB>>", "77": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>8</SUB>>", "79": "<(LITERAL,0,int i = 0)<SUB>8</SUB>>", "81": "<(IDENTIFIER,i,i &lt; n)<SUB>8</SUB>>", "83": "<(&lt;operator&gt;.postIncrement,i++)<SUB>8</SUB>>", "85": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>>", "87": "<(&lt;operator&gt;.indexAccess,matrix[i])<SUB>9</SUB>>", "89": "<(IDENTIFIER,i,matrix[i] = toArray())<SUB>9</SUB>>", "91": "<(mapToInt,mapToInt(&lt;lambda&gt;))<SUB>9</SUB>>", "93": "<(IDENTIFIER,Arrays,stream(br.readLine().split(&quot; &quot;)))<SUB>9</SUB>>", "95": "<(readLine,readLine())<SUB>9</SUB>>", "97": "<(LITERAL,&quot; &quot;,split(&quot; &quot;))<SUB>9</SUB>>", "98": "<(&lt;operator&gt;.assignment,minCost = new int[n][n])<SUB>12</SUB>>", "100": "<(&lt;operator&gt;.alloc,new int[n][n])>", "102": "<(IDENTIFIER,n,new int[n][n])<SUB>12</SUB>>", "104": "<(IDENTIFIER,minCostEndpoints,minCostEndpoints = new int[n][n])<SUB>13</SUB>>", "106": "<(IDENTIFIER,n,new int[n][n])<SUB>13</SUB>>", "108": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>14</SUB>>", "110": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>14</SUB>>", "112": "<(LITERAL,0,int i = 0)<SUB>14</SUB>>", "114": "<(IDENTIFIER,i,i &lt; n)<SUB>14</SUB>>", "116": "<(&lt;operator&gt;.postIncrement,i++)<SUB>14</SUB>>", "118": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>14</SUB>>", "120": "<(LOCAL,int j: int)<SUB>15</SUB>>", "122": "<(IDENTIFIER,j,int j = 0)<SUB>15</SUB>>", "124": "<(&lt;operator&gt;.lessThan,j &lt; n)<SUB>15</SUB>>", "126": "<(IDENTIFIER,n,j &lt; n)<SUB>15</SUB>>", "128": "<(IDENTIFIER,j,j++)<SUB>15</SUB>>", "130": "<(CONTROL_STRUCTURE,if (i &gt; j),if (i &gt; j))<SUB>16</SUB>>", "132": "<(IDENTIFIER,i,i &gt; j)<SUB>16</SUB>>", "134": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>16</SUB>>", "136": "<(&lt;operator&gt;.indexAccess,minCost[i][j])<SUB>17</SUB>>", "138": "<(IDENTIFIER,minCost,minCost[i][j] = Integer.MAX_VALUE)<SUB>17</SUB>>", "140": "<(IDENTIFIER,j,minCost[i][j] = Integer.MAX_VALUE)<SUB>17</SUB>>", "142": "<(IDENTIFIER,Integer,minCost[i][j] = Integer.MAX_VALUE)<SUB>17</SUB>>", "144": "<(CONTROL_STRUCTURE,for (int k = 0; Some(k &lt; m); k++),for (int k = 0; Some(k &lt; m); k++))<SUB>18</SUB>>", "146": "<(&lt;operator&gt;.assignment,int k = 0)<SUB>18</SUB>>", "148": "<(LITERAL,0,int k = 0)<SUB>18</SUB>>", "150": "<(IDENTIFIER,k,k &lt; m)<SUB>18</SUB>>", "152": "<(&lt;operator&gt;.postIncrement,k++)<SUB>18</SUB>>", "154": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>18</SUB>>", "156": "<(&lt;operator&gt;.assignment,int diff = Math.abs(matrix[i][k] - matrix[j][k]))<SUB>19</SUB>>", "158": "<(abs,Math.abs(matrix[i][k] - matrix[j][k]))<SUB>19</SUB>>", "160": "<(&lt;operator&gt;.subtraction,matrix[i][k] - matrix[j][k])<SUB>19</SUB>>", "162": "<(&lt;operator&gt;.indexAccess,matrix[i])<SUB>19</SUB>>", "164": "<(IDENTIFIER,i,matrix[i][k] - matrix[j][k])<SUB>19</SUB>>", "166": "<(&lt;operator&gt;.indexAccess,matrix[j][k])<SUB>19</SUB>>", "168": "<(IDENTIFIER,matrix,matrix[i][k] - matrix[j][k])<SUB>19</SUB>>", "170": "<(IDENTIFIER,k,matrix[i][k] - matrix[j][k])<SUB>19</SUB>>", "172": "<(&lt;operator&gt;.lessThan,diff &lt; minCost[i][j])<SUB>20</SUB>>", "174": "<(&lt;operator&gt;.indexAccess,minCost[i][j])<SUB>20</SUB>>", "176": "<(IDENTIFIER,minCost,diff &lt; minCost[i][j])<SUB>20</SUB>>", "178": "<(IDENTIFIER,j,diff &lt; minCost[i][j])<SUB>20</SUB>>", "180": "<(&lt;operator&gt;.assignment,minCost[i][j] = diff)<SUB>21</SUB>>", "182": "<(&lt;operator&gt;.indexAccess,minCost[i])<SUB>21</SUB>>", "184": "<(IDENTIFIER,i,minCost[i][j] = diff)<SUB>21</SUB>>", "186": "<(IDENTIFIER,diff,minCost[i][j] = diff)<SUB>21</SUB>>", "188": "<(&lt;operator&gt;.indexAccess,minCost[j][i])<SUB>24</SUB>>", "190": "<(IDENTIFIER,minCost,minCost[j][i] = minCost[i][j])<SUB>24</SUB>>", "192": "<(IDENTIFIER,i,minCost[j][i] = minCost[i][j])<SUB>24</SUB>>", "194": "<(&lt;operator&gt;.indexAccess,minCost[i])<SUB>24</SUB>>", "196": "<(IDENTIFIER,i,minCost[j][i] = minCost[i][j])<SUB>24</SUB>>", "198": "<(&lt;operator&gt;.assignment,minCostEndpoints[i][j] = Integer.MAX_VALUE)<SUB>26</SUB>>", "200": "<(&lt;operator&gt;.indexAccess,minCostEndpoints[i])<SUB>26</SUB>>", "202": "<(IDENTIFIER,i,minCostEndpoints[i][j] = Integer.MAX_VALUE)<SUB>26</SUB>>", "204": "<(&lt;operator&gt;.fieldAccess,Integer.MAX_VALUE)<SUB>26</SUB>>", "206": "<(FIELD_IDENTIFIER,MAX_VALUE,MAX_VALUE)<SUB>26</SUB>>", "208": "<(LOCAL,int k: int)<SUB>27</SUB>>", "210": "<(IDENTIFIER,k,int k = 0)<SUB>27</SUB>>", "212": "<(&lt;operator&gt;.lessThan,k &lt; m - 1)<SUB>27</SUB>>", "214": "<(&lt;operator&gt;.subtraction,m - 1)<SUB>27</SUB>>", "216": "<(LITERAL,1,m - 1)<SUB>27</SUB>>", "218": "<(IDENTIFIER,k,k++)<SUB>27</SUB>>", "220": "<(LOCAL,int diff: int)<SUB>28</SUB>>", "222": "<(IDENTIFIER,diff,int diff = Math.abs(matrix[i][k + 1] - matrix[j][k]))<SUB>28</SUB>>", "224": "<(IDENTIFIER,Math,Math.abs(matrix[i][k + 1] - matrix[j][k]))<SUB>28</SUB>>", "226": "<(&lt;operator&gt;.indexAccess,matrix[i][k + 1])<SUB>28</SUB>>", "228": "<(IDENTIFIER,matrix,matrix[i][k + 1] - matrix[j][k])<SUB>28</SUB>>", "230": "<(&lt;operator&gt;.addition,k + 1)<SUB>28</SUB>>", "232": "<(LITERAL,1,k + 1)<SUB>28</SUB>>", "234": "<(&lt;operator&gt;.indexAccess,matrix[j])<SUB>28</SUB>>", "236": "<(IDENTIFIER,j,matrix[i][k + 1] - matrix[j][k])<SUB>28</SUB>>", "238": "<(CONTROL_STRUCTURE,if (diff &lt; minCostEndpoints[i][j]),if (diff &lt; minCostEndpoints[i][j]))<SUB>29</SUB>>", "240": "<(IDENTIFIER,diff,diff &lt; minCostEndpoints[i][j])<SUB>29</SUB>>", "242": "<(&lt;operator&gt;.indexAccess,minCostEndpoints[i])<SUB>29</SUB>>", "244": "<(IDENTIFIER,i,diff &lt; minCostEndpoints[i][j])<SUB>29</SUB>>", "246": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>29</SUB>>", "248": "<(&lt;operator&gt;.indexAccess,minCostEndpoints[i][j])<SUB>30</SUB>>", "250": "<(IDENTIFIER,minCostEndpoints,minCostEndpoints[i][j] = diff)<SUB>30</SUB>>", "252": "<(IDENTIFIER,j,minCostEndpoints[i][j] = diff)<SUB>30</SUB>>", "254": "<(LOCAL,int maxCost: int)<SUB>35</SUB>>", "256": "<(IDENTIFIER,maxCost,int maxCost = n == 1 ? minCostEndpoints[0][0] : 0)<SUB>35</SUB>>", "258": "<(&lt;operator&gt;.equals,n == 1)<SUB>35</SUB>>", "260": "<(LITERAL,1,n == 1)<SUB>35</SUB>>", "262": "<(&lt;operator&gt;.indexAccess,minCostEndpoints[0])<SUB>35</SUB>>", "264": "<(LITERAL,0,n == 1 ? minCostEndpoints[0][0] : 0)<SUB>35</SUB>>", "266": "<(LITERAL,0,n == 1 ? minCostEndpoints[0][0] : 0)<SUB>35</SUB>>", "268": "<(LOCAL,int i: int)<SUB>36</SUB>>", "270": "<(IDENTIFIER,i,int i = 0)<SUB>36</SUB>>", "272": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>36</SUB>>", "274": "<(IDENTIFIER,n,i &lt; n)<SUB>36</SUB>>", "276": "<(IDENTIFIER,i,i++)<SUB>36</SUB>>", "278": "<(clear,clear())<SUB>37</SUB>>", "280": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>38</SUB>>", "282": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>38</SUB>>", "284": "<(LITERAL,0,int j = 0)<SUB>38</SUB>>", "286": "<(IDENTIFIER,j,j &lt; n)<SUB>38</SUB>>", "288": "<(&lt;operator&gt;.postIncrement,j++)<SUB>38</SUB>>", "290": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>38</SUB>>", "292": "<(&lt;operator&gt;.notEquals,i != j)<SUB>39</SUB>>", "294": "<(IDENTIFIER,j,i != j)<SUB>39</SUB>>", "296": "<(LOCAL,int bitmask: int)<SUB>40</SUB>>", "298": "<(IDENTIFIER,bitmask,int bitmask = (1 &lt;&lt; i) | (1 &lt;&lt; j))<SUB>40</SUB>>", "300": "<(&lt;operator&gt;.shiftLeft,1 &lt;&lt; i)<SUB>40</SUB>>", "302": "<(IDENTIFIER,i,1 &lt;&lt; i)<SUB>40</SUB>>", "304": "<(LITERAL,1,1 &lt;&lt; j)<SUB>40</SUB>>", "306": "<(LOCAL,int state: int)<SUB>41</SUB>>", "308": "<(IDENTIFIER,state,int state = bitmask + (j &lt;&lt; 16))<SUB>41</SUB>>", "310": "<(IDENTIFIER,bitmask,bitmask + (j &lt;&lt; 16))<SUB>41</SUB>>", "312": "<(IDENTIFIER,j,j &lt;&lt; 16)<SUB>41</SUB>>", "314": "<(put,put(state, minCost[i][j]))<SUB>42</SUB>>", "316": "<(IDENTIFIER,state,put(state, minCost[i][j]))<SUB>42</SUB>>", "318": "<(&lt;operator&gt;.indexAccess,minCost[i])<SUB>42</SUB>>", "320": "<(IDENTIFIER,i,put(state, minCost[i][j]))<SUB>42</SUB>>", "322": "<(CONTROL_STRUCTURE,for (int j = 0; Some(j &lt; n); j++),for (int j = 0; Some(j &lt; n); j++))<SUB>45</SUB>>", "324": "<(&lt;operator&gt;.assignment,int j = 0)<SUB>45</SUB>>", "326": "<(LITERAL,0,int j = 0)<SUB>45</SUB>>", "328": "<(IDENTIFIER,j,j &lt; n)<SUB>45</SUB>>", "330": "<(&lt;operator&gt;.postIncrement,j++)<SUB>45</SUB>>", "332": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>45</SUB>>", "334": "<(&lt;operator&gt;.notEquals,i != j)<SUB>46</SUB>>", "336": "<(IDENTIFIER,j,i != j)<SUB>46</SUB>>", "338": "<(CONTROL_STRUCTURE,if (minCostEndpoints[i][j] &lt;= maxCost),if (minCostEndpoints[i][j] &lt;= maxCost))<SUB>47</SUB>>", "340": "<(&lt;operator&gt;.indexAccess,minCostEndpoints[i][j])<SUB>47</SUB>>", "342": "<(IDENTIFIER,minCostEndpoints,minCostEndpoints[i][j] &lt;= maxCost)<SUB>47</SUB>>", "344": "<(IDENTIFIER,j,minCostEndpoints[i][j] &lt;= maxCost)<SUB>47</SUB>>", "346": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>47</SUB>>", "348": "<(CONTROL_STRUCTURE,else,else)<SUB>49</SUB>>", "350": "<(LOCAL,int pathCost: int)<SUB>50</SUB>>", "352": "<(IDENTIFIER,pathCost,int pathCost = min(minCostEndpoints[i][j], findMaxCost(i, j, (1 &lt;&lt; n) - 1)))<SUB>50</SUB>>", "354": "<(IDENTIFIER,Math,min(minCostEndpoints[i][j], findMaxCost(i, j, (1 &lt;&lt; n) - 1)))<SUB>50</SUB>>", "356": "<(&lt;operator&gt;.indexAccess,minCostEndpoints[i])<SUB>50</SUB>>", "358": "<(IDENTIFIER,i,min(minCostEndpoints[i][j], findMaxCost(i, j, (1 &lt;&lt; n) - 1)))<SUB>50</SUB>>", "360": "<(findMaxCost,findMaxCost(i, j, (1 &lt;&lt; n) - 1))<SUB>50</SUB>>", "362": "<(IDENTIFIER,i,findMaxCost(i, j, (1 &lt;&lt; n) - 1))<SUB>50</SUB>>", "364": "<(&lt;operator&gt;.subtraction,(1 &lt;&lt; n) - 1)<SUB>50</SUB>>", "366": "<(LITERAL,1,1 &lt;&lt; n)<SUB>50</SUB>>", "368": "<(LITERAL,1,(1 &lt;&lt; n) - 1)<SUB>50</SUB>>", "370": "<(IDENTIFIER,maxCost,maxCost = Math.max(maxCost, pathCost))<SUB>51</SUB>>", "372": "<(IDENTIFIER,Math,Math.max(maxCost, pathCost))<SUB>51</SUB>>", "374": "<(IDENTIFIER,pathCost,Math.max(maxCost, pathCost))<SUB>51</SUB>>", "376": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>56</SUB>>", "378": "<(FIELD_IDENTIFIER,out,out)<SUB>56</SUB>>", "380": "<(close,close())<SUB>57</SUB>>", "382": "<(MODIFIER,PUBLIC)>", "384": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}