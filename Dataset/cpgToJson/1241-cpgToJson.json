{"edges": [["19", "20"], ["19", "21"], ["19", "110"], ["19", "111"], ["19", "112"], ["21", "4"], ["21", "22"], ["21", "25"], ["21", "29"], ["21", "30"], ["21", "34"], ["21", "35"], ["21", "39"], ["21", "40"], ["21", "44"], ["21", "45"], ["21", "48"], ["21", "49"], ["21", "58"], ["21", "103"], ["22", "23"], ["22", "24"], ["25", "3"], ["25", "26"], ["26", "27"], ["26", "28"], ["30", "31"], ["30", "32"], ["32", "33"], ["35", "36"], ["35", "37"], ["37", "38"], ["40", "41"], ["40", "42"], ["42", "43"], ["45", "46"], ["45", "47"], ["49", "50"], ["49", "51"], ["51", "52"], ["51", "55"], ["52", "53"], ["52", "54"], ["55", "56"], ["55", "57"], ["58", "59"], ["58", "62"], ["58", "98"], ["59", "60"], ["59", "61"], ["62", "63"], ["62", "70"], ["62", "71"], ["62", "76"], ["62", "91"], ["63", "64"], ["63", "65"], ["65", "66"], ["65", "67"], ["67", "68"], ["67", "69"], ["71", "72"], ["71", "73"], ["73", "74"], ["73", "75"], ["76", "77"], ["76", "78"], ["78", "79"], ["78", "88"], ["79", "80"], ["79", "83"], ["80", "81"], ["80", "82"], ["83", "84"], ["83", "87"], ["84", "85"], ["84", "86"], ["88", "89"], ["88", "90"], ["91", "92"], ["91", "93"], ["93", "94"], ["93", "97"], ["94", "95"], ["94", "96"], ["98", "99"], ["99", "100"], ["100", "101"], ["100", "102"], ["103", "104"], ["103", "107"], ["104", "105"], ["104", "106"], ["107", "108"], ["107", "109"], ["22", "28"], ["25", "32"], ["30", "37"], ["35", "42"], ["40", "45"], ["45", "52"], ["49", "59"], ["103", "112"], ["24", "22"], ["26", "25"], ["32", "30"], ["37", "35"], ["42", "40"], ["51", "49"], ["59", "67"], ["59", "100"], ["104", "107"], ["107", "103"], ["28", "26"], ["52", "55"], ["55", "51"], ["63", "73"], ["71", "80"], ["76", "94"], ["91", "106"], ["106", "104"], ["65", "63"], ["73", "71"], ["78", "76"], ["93", "91"], ["100", "106"], ["67", "65"], ["79", "88"], ["88", "78"], ["94", "93"], ["80", "84"], ["83", "79"], ["84", "83"], ["19", "24"], ["20", "112"], ["22", "112"], ["25", "112"], ["25", "112"], ["30", "112"], ["35", "112"], ["42", "112"], ["40", "112"], ["40", "112"], ["45", "112"], ["52", "112"], ["51", "112"], ["55", "112"], ["51", "112"], ["49", "112"], ["49", "112"], ["59", "112"], ["59", "112"], ["100", "112"], ["100", "112"], ["67", "112"], ["65", "112"], ["63", "112"], ["63", "112"], ["71", "112"], ["71", "112"], ["79", "112"], ["84", "112"], ["83", "112"], ["79", "112"], ["78", "112"], ["88", "112"], ["88", "112"], ["78", "112"], ["76", "112"], ["76", "112"], ["94", "112"], ["93", "112"], ["91", "112"], ["91", "112"], ["103", "112"], ["107", "112"], ["107", "112"], ["103", "112"], ["103", "112"], ["84", "112"], ["19", "20"], ["19", "22"], ["32", "30"], ["37", "35"], ["42", "40"], ["19", "45"], ["51", "49"], ["51", "49"], ["22", "25"], ["19", "25"], ["107", "103"], ["107", "103"], ["25", "32"], ["19", "32"], ["32", "37"], ["19", "37"], ["37", "42"], ["19", "42"], ["52", "51"], ["52", "51"], ["55", "51"], ["55", "51"], ["49", "59"], ["19", "59"], ["55", "59"], ["65", "63"], ["65", "63"], ["73", "71"], ["73", "71"], ["79", "76"], ["79", "76"], ["88", "76"], ["88", "76"], ["93", "91"], ["93", "91"], ["100", "107"], ["91", "107"], ["19", "107"], ["93", "107"], ["40", "52"], ["19", "52"], ["30", "55"], ["19", "55"], ["35", "55"], ["67", "63"], ["19", "63"], ["59", "100"], ["19", "100"], ["52", "65"], ["19", "65"], ["67", "65"], ["67", "65"], ["63", "73"], ["19", "73"], ["65", "73"], ["79", "78"], ["79", "78"], ["88", "78"], ["88", "78"], ["76", "93"], ["19", "93"], ["59", "93"], ["55", "67"], ["19", "67"], ["59", "67"], ["80", "79"], ["80", "79"], ["83", "79"], ["83", "79"], ["73", "88"], ["19", "88"], ["80", "88"], ["76", "94"], ["19", "94"], ["59", "94"], ["19", "80"], ["73", "80"], ["84", "83"], ["84", "83"], ["19", "83"], ["19", "84"], ["71", "84"], ["59", "80"], ["59", "94"], ["59", "73"], ["59", "83"], ["59", "71"], ["59", "100"], ["59", "84"], ["59", "67"], ["59", "88"], ["59", "63"], ["59", "76"], ["59", "65"], ["59", "91"], ["59", "93"], ["59", "78"], ["59", "79"]], "features": {"19": "<(METHOD,main)<SUB>1</SUB>>", "21": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "22": "<(&lt;operator&gt;.assignment,ANY in = new InputReader(System.in))<SUB>2</SUB>>", "24": "<(&lt;operator&gt;.alloc,new InputReader(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,in,new InputReader(System.in))<SUB>2</SUB>>", "27": "<(IDENTIFIER,System,new InputReader(System.in))<SUB>2</SUB>>", "29": "<(LOCAL,long n: long)<SUB>3</SUB>>", "31": "<(IDENTIFIER,n,long n = nextLong())<SUB>3</SUB>>", "33": "<(IDENTIFIER,in,nextLong())<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.assignment,long m = nextLong())<SUB>4</SUB>>", "37": "<(nextLong,nextLong())<SUB>4</SUB>>", "39": "<(LOCAL,long k: long)<SUB>5</SUB>>", "41": "<(IDENTIFIER,k,long k = nextLong())<SUB>5</SUB>>", "43": "<(IDENTIFIER,in,nextLong())<SUB>5</SUB>>", "45": "<(&lt;operator&gt;.assignment,long ans = 0)<SUB>7</SUB>>", "47": "<(LITERAL,0,long ans = 0)<SUB>7</SUB>>", "49": "<(&lt;operator&gt;.assignment,long t = (k - 1) * (n - m))<SUB>9</SUB>>", "51": "<(&lt;operator&gt;.multiplication,(k - 1) * (n - m))<SUB>9</SUB>>", "53": "<(IDENTIFIER,k,k - 1)<SUB>9</SUB>>", "55": "<(&lt;operator&gt;.subtraction,n - m)<SUB>9</SUB>>", "57": "<(IDENTIFIER,m,n - m)<SUB>9</SUB>>", "59": "<(&lt;operator&gt;.lessEqualsThan,t &lt;= m)<SUB>11</SUB>>", "61": "<(IDENTIFIER,m,t &lt;= m)<SUB>11</SUB>>", "63": "<(&lt;operator&gt;.assignmentMinus,n -= k * (n - m))<SUB>12</SUB>>", "65": "<(&lt;operator&gt;.multiplication,k * (n - m))<SUB>12</SUB>>", "67": "<(&lt;operator&gt;.subtraction,n - m)<SUB>12</SUB>>", "69": "<(IDENTIFIER,m,n - m)<SUB>12</SUB>>", "71": "<(&lt;operator&gt;.assignment,long g = n / k)<SUB>14</SUB>>", "73": "<(&lt;operator&gt;.division,n / k)<SUB>14</SUB>>", "75": "<(IDENTIFIER,k,n / k)<SUB>14</SUB>>", "77": "<(IDENTIFIER,ans,ans = 2 * k * (powmod(g) - 1) + n % k)<SUB>16</SUB>>", "79": "<(&lt;operator&gt;.multiplication,2 * k * (powmod(g) - 1))<SUB>16</SUB>>", "81": "<(LITERAL,2,2 * k)<SUB>16</SUB>>", "83": "<(&lt;operator&gt;.subtraction,powmod(g) - 1)<SUB>16</SUB>>", "85": "<(IDENTIFIER,this,powmod(g))<SUB>16</SUB>>", "87": "<(LITERAL,1,powmod(g) - 1)<SUB>16</SUB>>", "89": "<(IDENTIFIER,n,n % k)<SUB>16</SUB>>", "91": "<(&lt;operator&gt;.assignment,ans = (ans + t) % MOD)<SUB>18</SUB>>", "93": "<(&lt;operator&gt;.modulo,(ans + t) % MOD)<SUB>18</SUB>>", "95": "<(IDENTIFIER,ans,ans + t)<SUB>18</SUB>>", "97": "<(IDENTIFIER,MOD,(ans + t) % MOD)<SUB>18</SUB>>", "99": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>20</SUB>>", "101": "<(IDENTIFIER,ans,ans = m)<SUB>21</SUB>>", "103": "<(println,println(ans % MOD))<SUB>24</SUB>>", "105": "<(IDENTIFIER,System,println(ans % MOD))<SUB>24</SUB>>", "107": "<(&lt;operator&gt;.modulo,ans % MOD)<SUB>24</SUB>>", "109": "<(IDENTIFIER,MOD,ans % MOD)<SUB>24</SUB>>", "111": "<(MODIFIER,STATIC)>"}}