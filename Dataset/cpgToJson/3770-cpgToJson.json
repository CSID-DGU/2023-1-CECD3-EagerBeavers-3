{"edges": [["17", "18"], ["17", "19"], ["17", "536"], ["17", "537"], ["17", "538"], ["19", "20"], ["19", "23"], ["19", "25"], ["19", "28"], ["19", "33"], ["19", "34"], ["19", "38"], ["19", "39"], ["19", "43"], ["19", "44"], ["19", "48"], ["19", "58"], ["19", "62"], ["19", "67"], ["19", "89"], ["19", "90"], ["19", "104"], ["19", "153"], ["19", "202"], ["19", "243"], ["19", "456"], ["19", "534"], ["20", "21"], ["20", "22"], ["23", "24"], ["25", "26"], ["25", "27"], ["28", "29"], ["28", "30"], ["30", "31"], ["30", "32"], ["34", "35"], ["34", "36"], ["36", "37"], ["39", "40"], ["39", "41"], ["41", "42"], ["44", "45"], ["44", "46"], ["46", "47"], ["48", "49"], ["48", "50"], ["50", "51"], ["50", "54"], ["50", "57"], ["51", "52"], ["51", "53"], ["54", "55"], ["54", "56"], ["58", "59"], ["58", "60"], ["60", "61"], ["62", "63"], ["62", "66"], ["63", "64"], ["63", "65"], ["67", "68"], ["67", "69"], ["67", "72"], ["67", "75"], ["67", "77"], ["69", "70"], ["69", "71"], ["72", "73"], ["72", "74"], ["75", "76"], ["77", "78"], ["78", "79"], ["78", "82"], ["79", "80"], ["79", "81"], ["82", "83"], ["82", "84"], ["84", "85"], ["84", "86"], ["86", "87"], ["86", "88"], ["90", "91"], ["90", "92"], ["92", "93"], ["92", "96"], ["92", "99"], ["93", "94"], ["93", "95"], ["96", "97"], ["96", "98"], ["99", "100"], ["99", "103"], ["100", "101"], ["100", "102"], ["104", "105"], ["104", "106"], ["104", "109"], ["104", "112"], ["104", "114"], ["106", "107"], ["106", "108"], ["109", "110"], ["109", "111"], ["112", "113"], ["114", "115"], ["115", "116"], ["115", "117"], ["115", "120"], ["115", "125"], ["115", "127"], ["117", "118"], ["117", "119"], ["120", "121"], ["120", "122"], ["122", "123"], ["122", "124"], ["125", "126"], ["127", "128"], ["127", "129"], ["127", "133"], ["127", "142"], ["129", "130"], ["129", "131"], ["131", "132"], ["133", "134"], ["133", "141"], ["134", "135"], ["134", "140"], ["135", "136"], ["135", "139"], ["136", "137"], ["136", "138"], ["142", "143"], ["142", "152"], ["143", "144"], ["143", "151"], ["144", "145"], ["144", "148"], ["145", "146"], ["145", "147"], ["148", "149"], ["148", "150"], ["153", "154"], ["153", "155"], ["153", "158"], ["153", "163"], ["153", "165"], ["155", "156"], ["155", "157"], ["158", "159"], ["158", "160"], ["160", "161"], ["160", "162"], ["163", "164"], ["165", "166"], ["166", "167"], ["166", "168"], ["166", "171"], ["166", "174"], ["166", "176"], ["168", "169"], ["168", "170"], ["171", "172"], ["171", "173"], ["174", "175"], ["176", "177"], ["176", "178"], ["176", "182"], ["176", "191"], ["178", "179"], ["178", "180"], ["180", "181"], ["182", "183"], ["182", "190"], ["183", "184"], ["183", "189"], ["184", "185"], ["184", "188"], ["185", "186"], ["185", "187"], ["191", "192"], ["191", "201"], ["192", "193"], ["192", "200"], ["193", "194"], ["193", "199"], ["194", "195"], ["194", "196"], ["196", "197"], ["196", "198"], ["202", "203"], ["202", "204"], ["202", "207"], ["202", "210"], ["202", "212"], ["204", "205"], ["204", "206"], ["207", "208"], ["207", "209"], ["210", "211"], ["212", "213"], ["213", "214"], ["213", "215"], ["213", "218"], ["213", "221"], ["213", "223"], ["215", "216"], ["215", "217"], ["218", "219"], ["218", "220"], ["221", "222"], ["223", "224"], ["223", "234"], ["224", "225"], ["224", "226"], ["224", "231"], ["226", "227"], ["226", "230"], ["227", "228"], ["227", "229"], ["231", "232"], ["231", "233"], ["234", "235"], ["234", "242"], ["235", "236"], ["235", "241"], ["236", "237"], ["236", "240"], ["237", "238"], ["237", "239"], ["243", "244"], ["243", "245"], ["243", "248"], ["243", "255"], ["243", "257"], ["245", "246"], ["245", "247"], ["248", "249"], ["248", "250"], ["250", "251"], ["250", "254"], ["251", "252"], ["251", "253"], ["255", "256"], ["257", "258"], ["258", "259"], ["258", "260"], ["258", "263"], ["258", "266"], ["258", "268"], ["260", "261"], ["260", "262"], ["263", "264"], ["263", "265"], ["266", "267"], ["268", "269"], ["269", "270"], ["269", "271"], ["269", "274"], ["269", "277"], ["269", "279"], ["271", "272"], ["271", "273"], ["274", "275"], ["274", "276"], ["277", "278"], ["279", "280"], ["279", "324"], ["279", "368"], ["279", "412"], ["280", "281"], ["280", "286"], ["281", "282"], ["281", "285"], ["282", "283"], ["282", "284"], ["286", "287"], ["287", "288"], ["287", "295"], ["288", "289"], ["288", "294"], ["289", "290"], ["289", "293"], ["290", "291"], ["290", "292"], ["295", "296"], ["295", "297"], ["295", "317"], ["297", "298"], ["297", "309"], ["298", "299"], ["298", "306"], ["299", "300"], ["299", "305"], ["300", "301"], ["300", "302"], ["302", "303"], ["302", "304"], ["306", "307"], ["306", "308"], ["309", "310"], ["309", "311"], ["309", "312"], ["309", "313"], ["309", "316"], ["313", "314"], ["313", "315"], ["317", "318"], ["317", "323"], ["318", "319"], ["318", "322"], ["319", "320"], ["319", "321"], ["324", "325"], ["324", "330"], ["325", "326"], ["325", "329"], ["326", "327"], ["326", "328"], ["330", "331"], ["331", "332"], ["331", "339"], ["332", "333"], ["332", "338"], ["333", "334"], ["333", "337"], ["334", "335"], ["334", "336"], ["339", "340"], ["339", "341"], ["339", "361"], ["341", "342"], ["341", "353"], ["342", "343"], ["342", "350"], ["343", "344"], ["343", "347"], ["344", "345"], ["344", "346"], ["347", "348"], ["347", "349"], ["350", "351"], ["350", "352"], ["353", "354"], ["353", "355"], ["353", "356"], ["353", "357"], ["353", "358"], ["358", "359"], ["358", "360"], ["361", "362"], ["361", "367"], ["362", "363"], ["362", "366"], ["363", "364"], ["363", "365"], ["368", "369"], ["368", "374"], ["369", "370"], ["369", "373"], ["370", "371"], ["370", "372"], ["374", "375"], ["375", "376"], ["375", "383"], ["376", "377"], ["376", "382"], ["377", "378"], ["377", "381"], ["378", "379"], ["378", "380"], ["383", "384"], ["383", "385"], ["383", "405"], ["385", "386"], ["385", "397"], ["386", "387"], ["386", "394"], ["387", "388"], ["387", "393"], ["388", "389"], ["388", "390"], ["390", "391"], ["390", "392"], ["394", "395"], ["394", "396"], ["397", "398"], ["397", "399"], ["397", "400"], ["397", "401"], ["397", "404"], ["401", "402"], ["401", "403"], ["405", "406"], ["405", "411"], ["406", "407"], ["406", "410"], ["407", "408"], ["407", "409"], ["412", "413"], ["412", "418"], ["413", "414"], ["413", "417"], ["414", "415"], ["414", "416"], ["418", "419"], ["419", "420"], ["419", "427"], ["420", "421"], ["420", "426"], ["421", "422"], ["421", "425"], ["422", "423"], ["422", "424"], ["427", "428"], ["427", "429"], ["427", "449"], ["429", "430"], ["429", "441"], ["430", "431"], ["430", "438"], ["431", "432"], ["431", "435"], ["432", "433"], ["432", "434"], ["435", "436"], ["435", "437"], ["438", "439"], ["438", "440"], ["441", "442"], ["441", "443"], ["441", "444"], ["441", "445"], ["441", "446"], ["446", "447"], ["446", "448"], ["449", "450"], ["449", "455"], ["450", "451"], ["450", "454"], ["451", "452"], ["451", "453"], ["456", "457"], ["456", "462"], ["456", "493"], ["457", "458"], ["457", "461"], ["458", "459"], ["458", "460"], ["462", "463"], ["463", "464"], ["463", "465"], ["463", "468"], ["463", "471"], ["463", "473"], ["465", "466"], ["465", "467"], ["468", "469"], ["468", "470"], ["471", "472"], ["473", "474"], ["473", "491"], ["474", "475"], ["474", "476"], ["474", "479"], ["474", "482"], ["474", "484"], ["476", "477"], ["476", "478"], ["479", "480"], ["479", "481"], ["482", "483"], ["484", "485"], ["485", "486"], ["485", "487"], ["487", "488"], ["487", "490"], ["488", "489"], ["491", "492"], ["493", "494"], ["494", "495"], ["495", "496"], ["495", "497"], ["495", "500"], ["495", "503"], ["495", "505"], ["497", "498"], ["497", "499"], ["500", "501"], ["500", "502"], ["503", "504"], ["505", "506"], ["505", "532"], ["506", "507"], ["506", "508"], ["506", "511"], ["506", "514"], ["506", "516"], ["508", "509"], ["508", "510"], ["511", "512"], ["511", "513"], ["514", "515"], ["516", "517"], ["517", "518"], ["517", "519"], ["519", "520"], ["519", "531"], ["520", "521"], ["520", "530"], ["521", "522"], ["521", "527"], ["522", "523"], ["522", "526"], ["523", "524"], ["523", "525"], ["527", "528"], ["527", "529"], ["532", "533"], ["534", "535"], ["20", "23"], ["23", "27"], ["25", "32"], ["28", "36"], ["34", "41"], ["39", "46"], ["44", "51"], ["48", "60"], ["58", "63"], ["62", "69"], ["90", "106"], ["534", "538"], ["22", "20"], ["27", "25"], ["30", "28"], ["36", "34"], ["41", "39"], ["46", "44"], ["50", "48"], ["60", "58"], ["63", "62"], ["69", "72"], ["72", "79"], ["72", "93"], ["75", "72"], ["92", "90"], ["106", "109"], ["109", "117"], ["109", "155"], ["112", "109"], ["155", "160"], ["158", "168"], ["158", "204"], ["163", "160"], ["204", "207"], ["207", "215"], ["207", "245"], ["210", "207"], ["245", "251"], ["248", "260"], ["248", "458"], ["255", "251"], ["457", "465"], ["457", "497"], ["32", "30"], ["51", "54"], ["54", "50"], ["78", "75"], ["93", "96"], ["96", "100"], ["99", "92"], ["160", "158"], ["250", "248"], ["458", "457"], ["79", "86"], ["82", "78"], ["100", "99"], ["117", "122"], ["120", "131"], ["120", "112"], ["125", "122"], ["168", "171"], ["171", "180"], ["171", "163"], ["174", "171"], ["215", "218"], ["218", "227"], ["218", "210"], ["221", "218"], ["251", "250"], ["260", "263"], ["263", "271"], ["263", "255"], ["266", "263"], ["465", "468"], ["468", "476"], ["468", "534"], ["471", "468"], ["84", "82"], ["122", "120"], ["129", "136"], ["133", "145"], ["142", "125"], ["178", "185"], ["182", "196"], ["191", "174"], ["224", "237"], ["234", "221"], ["491", "471"], ["497", "500"], ["500", "508"], ["500", "534"], ["503", "500"], ["86", "84"], ["131", "129"], ["134", "133"], ["143", "142"], ["180", "178"], ["183", "182"], ["192", "191"], ["226", "233"], ["231", "224"], ["235", "234"], ["271", "274"], ["274", "282"], ["274", "266"], ["277", "274"], ["476", "479"], ["479", "488"], ["479", "491"], ["482", "479"], ["532", "503"], ["135", "134"], ["144", "143"], ["184", "183"], ["193", "192"], ["227", "226"], ["233", "231"], ["236", "235"], ["485", "482"], ["508", "511"], ["511", "523"], ["511", "532"], ["514", "511"], ["136", "135"], ["145", "148"], ["148", "144"], ["185", "184"], ["194", "193"], ["237", "236"], ["281", "290"], ["281", "326"], ["325", "334"], ["325", "370"], ["369", "378"], ["369", "414"], ["413", "422"], ["413", "277"], ["487", "485"], ["517", "514"], ["196", "194"], ["282", "281"], ["287", "326"], ["326", "325"], ["331", "370"], ["370", "369"], ["375", "414"], ["414", "413"], ["419", "277"], ["488", "487"], ["519", "517"], ["288", "302"], ["295", "287"], ["332", "344"], ["339", "331"], ["376", "390"], ["383", "375"], ["420", "432"], ["427", "419"], ["520", "519"], ["289", "288"], ["297", "319"], ["317", "295"], ["333", "332"], ["341", "363"], ["361", "339"], ["377", "376"], ["385", "407"], ["405", "383"], ["421", "420"], ["429", "451"], ["449", "427"], ["521", "520"], ["290", "289"], ["298", "313"], ["309", "297"], ["318", "317"], ["334", "333"], ["342", "358"], ["353", "341"], ["362", "361"], ["378", "377"], ["386", "401"], ["397", "385"], ["406", "405"], ["422", "421"], ["430", "446"], ["441", "429"], ["450", "449"], ["522", "527"], ["527", "521"], ["299", "306"], ["306", "298"], ["313", "309"], ["319", "318"], ["343", "350"], ["350", "342"], ["358", "353"], ["363", "362"], ["387", "394"], ["394", "386"], ["401", "397"], ["407", "406"], ["431", "438"], ["438", "430"], ["446", "441"], ["451", "450"], ["523", "522"], ["300", "299"], ["344", "347"], ["347", "343"], ["388", "387"], ["432", "435"], ["435", "431"], ["302", "300"], ["390", "388"], ["17", "22"], ["18", "538"], ["20", "538"], ["23", "538"], ["25", "538"], ["28", "538"], ["28", "538"], ["34", "538"], ["39", "538"], ["46", "538"], ["44", "538"], ["44", "538"], ["48", "538"], ["48", "538"], ["48", "538"], ["58", "538"], ["58", "538"], ["58", "538"], ["62", "538"], ["62", "538"], ["72", "538"], ["90", "538"], ["92", "538"], ["96", "538"], ["92", "538"], ["90", "538"], ["90", "538"], ["109", "538"], ["155", "538"], ["158", "538"], ["158", "538"], ["158", "538"], ["245", "538"], ["248", "538"], ["250", "538"], ["248", "538"], ["248", "538"], ["458", "538"], ["457", "538"], ["457", "538"], ["497", "538"], ["500", "538"], ["500", "538"], ["500", "538"], ["508", "538"], ["511", "538"], ["511", "538"], ["511", "538"], ["532", "538"], ["503", "538"], ["527", "538"], ["520", "538"], ["519", "538"], ["517", "538"], ["517", "538"], ["514", "538"], ["465", "538"], ["468", "538"], ["468", "538"], ["468", "538"], ["534", "538"], ["534", "538"], ["476", "538"], ["479", "538"], ["479", "538"], ["479", "538"], ["491", "538"], ["471", "538"], ["487", "538"], ["485", "538"], ["485", "538"], ["482", "538"], ["260", "538"], ["263", "538"], ["263", "538"], ["255", "538"], ["274", "538"], ["274", "538"], ["266", "538"], ["281", "538"], ["281", "538"], ["287", "538"], ["295", "538"], ["297", "538"], ["309", "538"], ["309", "538"], ["297", "538"], ["295", "538"], ["287", "538"], ["287", "538"], ["325", "538"], ["325", "538"], ["331", "538"], ["339", "538"], ["341", "538"], ["353", "538"], ["353", "538"], ["341", "538"], ["339", "538"], ["331", "538"], ["331", "538"], ["369", "538"], ["369", "538"], ["375", "538"], ["383", "538"], ["385", "538"], ["397", "538"], ["397", "538"], ["385", "538"], ["383", "538"], ["375", "538"], ["375", "538"], ["413", "538"], ["413", "538"], ["419", "538"], ["427", "538"], ["429", "538"], ["441", "538"], ["441", "538"], ["429", "538"], ["427", "538"], ["419", "538"], ["419", "538"], ["277", "538"], ["215", "538"], ["218", "538"], ["218", "538"], ["218", "538"], ["210", "538"], ["224", "538"], ["224", "538"], ["224", "538"], ["234", "538"], ["234", "538"], ["221", "538"], ["171", "538"], ["171", "538"], ["163", "538"], ["180", "538"], ["178", "538"], ["178", "538"], ["182", "538"], ["182", "538"], ["191", "538"], ["191", "538"], ["191", "538"], ["174", "538"], ["122", "538"], ["120", "538"], ["120", "538"], ["112", "538"], ["131", "538"], ["129", "538"], ["129", "538"], ["133", "538"], ["133", "538"], ["142", "538"], ["142", "538"], ["142", "538"], ["125", "538"], ["78", "538"], ["82", "538"], ["78", "538"], ["78", "538"], ["75", "538"], ["224", "538"], ["17", "18"], ["17", "20"], ["17", "25"], ["36", "34"], ["41", "39"], ["46", "44"], ["50", "48"], ["50", "48"], ["50", "48"], ["60", "58"], ["17", "62"], ["92", "90"], ["92", "90"], ["92", "90"], ["20", "23"], ["17", "23"], ["25", "28"], ["17", "28"], ["17", "69"], ["17", "106"], ["17", "155"], ["17", "204"], ["17", "245"], ["28", "534"], ["532", "534"], ["491", "534"], ["17", "534"], ["23", "36"], ["17", "36"], ["36", "41"], ["17", "41"], ["41", "46"], ["17", "46"], ["34", "50"], ["17", "50"], ["39", "50"], ["17", "60"], ["69", "72"], ["75", "72"], ["17", "72"], ["86", "75"], ["17", "75"], ["82", "78"], ["82", "78"], ["17", "92"], ["34", "92"], ["39", "92"], ["100", "92"], ["100", "92"], ["106", "109"], ["112", "109"], ["17", "109"], ["34", "109"], ["109", "112"], ["17", "112"], ["155", "158"], ["163", "158"], ["17", "158"], ["160", "158"], ["160", "158"], ["158", "163"], ["17", "163"], ["204", "207"], ["210", "207"], ["17", "207"], ["160", "207"], ["207", "210"], ["17", "210"], ["245", "248"], ["255", "248"], ["17", "248"], ["251", "248"], ["251", "248"], ["248", "255"], ["306", "255"], ["350", "255"], ["394", "255"], ["438", "255"], ["17", "255"], ["458", "457"], ["458", "457"], ["17", "457"], ["34", "51"], ["17", "51"], ["39", "54"], ["17", "54"], ["17", "93"], ["34", "93"], ["17", "96"], ["39", "96"], ["100", "99"], ["100", "99"], ["17", "99"], ["17", "117"], ["109", "160"], ["17", "160"], ["17", "168"], ["17", "215"], ["251", "250"], ["251", "250"], ["17", "250"], ["17", "260"], ["251", "458"], ["17", "458"], ["17", "465"], ["17", "82"], ["58", "82"], ["44", "100"], ["17", "100"], ["117", "120"], ["125", "120"], ["17", "120"], ["122", "120"], ["122", "120"], ["17", "125"], ["120", "125"], ["131", "129"], ["129", "133"], ["17", "133"], ["17", "142"], ["129", "142"], ["168", "171"], ["174", "171"], ["17", "171"], ["122", "171"], ["39", "171"], ["171", "174"], ["17", "174"], ["180", "178"], ["178", "182"], ["17", "182"], ["17", "191"], ["178", "191"], ["215", "218"], ["221", "218"], ["17", "218"], ["171", "218"], ["122", "218"], ["39", "218"], ["218", "221"], ["17", "221"], ["17", "234"], ["100", "251"], ["17", "251"], ["260", "263"], ["266", "263"], ["17", "263"], ["207", "263"], ["369", "263"], ["263", "266"], ["397", "266"], ["441", "266"], ["17", "266"], ["282", "266"], ["309", "266"], ["353", "266"], ["465", "468"], ["471", "468"], ["17", "468"], ["207", "468"], ["263", "468"], ["468", "471"], ["17", "471"], ["17", "497"], ["17", "122"], ["39", "122"], ["17", "224"], ["234", "224"], ["17", "271"], ["17", "476"], ["28", "491"], ["485", "491"], ["17", "491"], ["497", "500"], ["503", "500"], ["17", "500"], ["207", "500"], ["263", "500"], ["500", "503"], ["17", "503"], ["72", "86"], ["17", "86"], ["46", "131"], ["17", "131"], ["46", "180"], ["131", "180"], ["17", "180"], ["271", "274"], ["277", "274"], ["17", "274"], ["413", "274"], ["218", "274"], ["171", "274"], ["122", "274"], ["39", "274"], ["441", "277"], ["17", "277"], ["326", "277"], ["353", "277"], ["397", "277"], ["476", "479"], ["482", "479"], ["17", "479"], ["274", "479"], ["218", "479"], ["171", "479"], ["122", "479"], ["39", "479"], ["479", "482"], ["17", "482"], ["17", "508"], ["28", "532"], ["517", "532"], ["17", "532"], ["28", "485"], ["491", "485"], ["17", "485"], ["488", "485"], ["508", "511"], ["514", "511"], ["17", "511"], ["274", "511"], ["218", "511"], ["171", "511"], ["122", "511"], ["39", "511"], ["511", "514"], ["17", "514"], ["120", "148"], ["17", "148"], ["282", "281"], ["282", "281"], ["17", "281"], ["295", "287"], ["295", "287"], ["295", "287"], ["326", "325"], ["326", "325"], ["17", "325"], ["339", "331"], ["339", "331"], ["339", "331"], ["282", "369"], ["309", "369"], ["353", "369"], ["17", "369"], ["263", "369"], ["383", "375"], ["383", "375"], ["383", "375"], ["326", "413"], ["353", "413"], ["397", "413"], ["17", "413"], ["274", "413"], ["427", "419"], ["427", "419"], ["427", "419"], ["488", "487"], ["17", "487"], ["28", "517"], ["532", "517"], ["17", "517"], ["520", "517"], ["520", "517"], ["158", "196"], ["17", "196"], ["263", "282"], ["397", "282"], ["441", "282"], ["17", "282"], ["309", "282"], ["353", "282"], ["274", "326"], ["309", "326"], ["17", "326"], ["282", "370"], ["309", "370"], ["353", "370"], ["17", "370"], ["326", "414"], ["353", "414"], ["397", "414"], ["17", "414"], ["17", "488"], ["520", "519"], ["520", "519"], ["17", "519"], ["339", "295"], ["383", "295"], ["427", "295"], ["17", "295"], ["309", "295"], ["309", "295"], ["309", "295"], ["309", "295"], ["287", "295"], ["331", "295"], ["375", "295"], ["419", "295"], ["295", "339"], ["383", "339"], ["427", "339"], ["17", "339"], ["353", "339"], ["353", "339"], ["353", "339"], ["353", "339"], ["287", "339"], ["331", "339"], ["375", "339"], ["419", "339"], ["295", "383"], ["339", "383"], ["427", "383"], ["17", "383"], ["397", "383"], ["397", "383"], ["397", "383"], ["397", "383"], ["287", "383"], ["331", "383"], ["375", "383"], ["419", "383"], ["295", "427"], ["339", "427"], ["383", "427"], ["17", "427"], ["441", "427"], ["441", "427"], ["441", "427"], ["441", "427"], ["287", "427"], ["331", "427"], ["375", "427"], ["419", "427"], ["17", "520"], ["309", "297"], ["309", "297"], ["309", "297"], ["309", "297"], ["353", "341"], ["353", "341"], ["353", "341"], ["353", "341"], ["397", "385"], ["397", "385"], ["397", "385"], ["397", "385"], ["441", "429"], ["441", "429"], ["441", "429"], ["441", "429"], ["353", "309"], ["397", "309"], ["441", "309"], ["17", "309"], ["313", "309"], ["274", "309"], ["313", "309"], ["309", "353"], ["397", "353"], ["441", "353"], ["17", "353"], ["282", "353"], ["309", "353"], ["358", "353"], ["358", "353"], ["309", "397"], ["353", "397"], ["441", "397"], ["17", "397"], ["282", "397"], ["309", "397"], ["353", "397"], ["326", "397"], ["353", "397"], ["309", "441"], ["353", "441"], ["397", "441"], ["17", "441"], ["397", "441"], ["282", "441"], ["309", "441"], ["353", "441"], ["326", "441"], ["353", "441"], ["397", "441"], ["458", "527"], ["17", "527"], ["248", "306"], ["350", "306"], ["394", "306"], ["438", "306"], ["17", "306"], ["302", "313"], ["17", "313"], ["248", "350"], ["306", "350"], ["394", "350"], ["438", "350"], ["17", "350"], ["347", "358"], ["17", "358"], ["248", "394"], ["306", "394"], ["350", "394"], ["438", "394"], ["17", "394"], ["17", "401"], ["282", "401"], ["309", "401"], ["353", "401"], ["248", "438"], ["306", "438"], ["350", "438"], ["394", "438"], ["17", "438"], ["17", "446"], ["326", "446"], ["353", "446"], ["397", "446"], ["326", "347"], ["17", "347"], ["17", "435"], ["326", "435"], ["353", "435"], ["397", "435"], ["282", "302"], ["17", "302"], ["17", "390"], ["282", "390"], ["309", "390"], ["353", "390"], ["72", "84"], ["72", "86"], ["72", "72"], ["72", "75"], ["72", "79"], ["72", "82"], ["72", "78"], ["109", "120"], ["109", "112"], ["109", "122"], ["109", "117"], ["109", "109"], ["158", "163"], ["158", "168"], ["158", "158"], ["158", "160"], ["158", "171"], ["207", "215"], ["207", "207"], ["207", "210"], ["207", "218"], ["248", "260"], ["248", "255"], ["248", "251"], ["248", "263"], ["248", "248"], ["248", "250"], ["457", "497"], ["457", "468"], ["457", "465"], ["457", "500"], ["120", "120"], ["120", "136"], ["120", "129"], ["120", "134"], ["120", "148"], ["120", "122"], ["120", "135"], ["120", "133"], ["120", "145"], ["120", "131"], ["120", "144"], ["120", "142"], ["120", "143"], ["120", "125"], ["171", "192"], ["171", "196"], ["171", "184"], ["171", "174"], ["171", "194"], ["171", "182"], ["171", "180"], ["171", "178"], ["171", "185"], ["171", "191"], ["171", "171"], ["171", "183"], ["171", "193"], ["218", "226"], ["218", "224"], ["218", "236"], ["218", "237"], ["218", "227"], ["218", "231"], ["218", "221"], ["218", "233"], ["218", "235"], ["218", "234"], ["218", "218"], ["263", "274"], ["263", "263"], ["263", "271"], ["263", "266"], ["468", "476"], ["468", "471"], ["468", "479"], ["468", "468"], ["468", "491"], ["500", "503"], ["500", "511"], ["500", "508"], ["500", "500"], ["500", "532"], ["274", "326"], ["274", "370"], ["274", "281"], ["274", "414"], ["274", "274"], ["274", "413"], ["274", "282"], ["274", "325"], ["274", "277"], ["274", "369"], ["479", "488"], ["479", "479"], ["479", "485"], ["479", "487"], ["479", "482"], ["511", "514"], ["511", "522"], ["511", "511"], ["511", "517"], ["511", "523"], ["511", "527"], ["511", "520"], ["511", "521"], ["511", "519"], ["281", "290"], ["281", "317"], ["281", "298"], ["281", "300"], ["281", "302"], ["281", "306"], ["281", "288"], ["281", "297"], ["281", "319"], ["281", "309"], ["281", "289"], ["281", "318"], ["281", "295"], ["281", "299"], ["281", "287"], ["281", "313"], ["325", "334"], ["325", "358"], ["325", "362"], ["325", "347"], ["325", "342"], ["325", "341"], ["325", "339"], ["325", "332"], ["325", "353"], ["325", "361"], ["325", "343"], ["325", "333"], ["325", "331"], ["325", "350"], ["325", "363"], ["325", "344"], ["369", "376"], ["369", "383"], ["369", "401"], ["369", "394"], ["369", "378"], ["369", "390"], ["369", "388"], ["369", "405"], ["369", "397"], ["369", "385"], ["369", "377"], ["369", "386"], ["369", "375"], ["369", "387"], ["369", "406"], ["369", "407"], ["413", "450"], ["413", "435"], ["413", "430"], ["413", "446"], ["413", "441"], ["413", "429"], ["413", "420"], ["413", "419"], ["413", "427"], ["413", "449"], ["413", "421"], ["413", "422"], ["413", "451"], ["413", "432"], ["413", "431"], ["413", "438"]], "features": {"17": "<(METHOD,main)<SUB>1</SUB>>", "19": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "21": "<(IDENTIFIER,sc,sc = new MyScanner())<SUB>3</SUB>>", "23": "<(&lt;init&gt;,new MyScanner())<SUB>3</SUB>>", "25": "<(&lt;operator&gt;.assignment,out = new PrintWriter(System.out))<SUB>4</SUB>>", "27": "<(&lt;operator&gt;.alloc,new PrintWriter(System.out))<SUB>4</SUB>>", "29": "<(IDENTIFIER,out,new PrintWriter(System.out))<SUB>4</SUB>>", "31": "<(IDENTIFIER,System,new PrintWriter(System.out))<SUB>4</SUB>>", "33": "<(LOCAL,int n: int)<SUB>5</SUB>>", "35": "<(IDENTIFIER,n,int n = nextInt())<SUB>5</SUB>>", "37": "<(IDENTIFIER,sc,nextInt())<SUB>5</SUB>>", "39": "<(&lt;operator&gt;.assignment,int m = nextInt())<SUB>6</SUB>>", "41": "<(nextInt,nextInt())<SUB>6</SUB>>", "43": "<(LOCAL,int k: int)<SUB>7</SUB>>", "45": "<(IDENTIFIER,k,int k = nextInt())<SUB>7</SUB>>", "47": "<(IDENTIFIER,sc,nextInt())<SUB>7</SUB>>", "49": "<(IDENTIFIER,paths,paths = new long[n + 1][m + 1][4])<SUB>8</SUB>>", "51": "<(&lt;operator&gt;.addition,n + 1)<SUB>8</SUB>>", "53": "<(LITERAL,1,n + 1)<SUB>8</SUB>>", "55": "<(IDENTIFIER,m,m + 1)<SUB>8</SUB>>", "57": "<(LITERAL,4,new long[n + 1][m + 1][4])<SUB>8</SUB>>", "59": "<(IDENTIFIER,powers501,powers501 = new long[5])<SUB>9</SUB>>", "61": "<(LITERAL,5,new long[5])<SUB>9</SUB>>", "63": "<(&lt;operator&gt;.indexAccess,powers501[0])<SUB>10</SUB>>", "65": "<(LITERAL,0,powers501[0] = 1)<SUB>10</SUB>>", "67": "<(CONTROL_STRUCTURE,for (int j = 1; Some(j &lt; 5); j++),for (int j = 1; Some(j &lt; 5); j++))<SUB>11</SUB>>", "69": "<(&lt;operator&gt;.assignment,int j = 1)<SUB>11</SUB>>", "71": "<(LITERAL,1,int j = 1)<SUB>11</SUB>>", "73": "<(IDENTIFIER,j,j &lt; 5)<SUB>11</SUB>>", "75": "<(&lt;operator&gt;.postIncrement,j++)<SUB>11</SUB>>", "77": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>11</SUB>>", "79": "<(&lt;operator&gt;.indexAccess,powers501[j])<SUB>12</SUB>>", "81": "<(IDENTIFIER,j,powers501[j] = 501L * powers501[j - 1])<SUB>12</SUB>>", "83": "<(LITERAL,501L,501L * powers501[j - 1])<SUB>12</SUB>>", "85": "<(IDENTIFIER,powers501,501L * powers501[j - 1])<SUB>12</SUB>>", "87": "<(IDENTIFIER,j,j - 1)<SUB>12</SUB>>", "89": "<(LOCAL,long[][][] dp: long[][][])<SUB>14</SUB>>", "91": "<(IDENTIFIER,dp,long[][][] dp = new long[n + 1][m + 1][k / 2 + 2])<SUB>14</SUB>>", "93": "<(&lt;operator&gt;.addition,n + 1)<SUB>14</SUB>>", "95": "<(LITERAL,1,n + 1)<SUB>14</SUB>>", "97": "<(IDENTIFIER,m,m + 1)<SUB>14</SUB>>", "99": "<(&lt;operator&gt;.addition,k / 2 + 2)<SUB>14</SUB>>", "101": "<(IDENTIFIER,k,k / 2)<SUB>14</SUB>>", "103": "<(LITERAL,2,k / 2 + 2)<SUB>14</SUB>>", "105": "<(LOCAL,int i: int)<SUB>15</SUB>>", "107": "<(IDENTIFIER,i,int i = 1)<SUB>15</SUB>>", "109": "<(&lt;operator&gt;.lessEqualsThan,i &lt;= n)<SUB>15</SUB>>", "111": "<(IDENTIFIER,n,i &lt;= n)<SUB>15</SUB>>", "113": "<(IDENTIFIER,i,i++)<SUB>15</SUB>>", "115": "<(CONTROL_STRUCTURE,for (int j = 1; Some(j &lt;= m - 1); j++),for (int j = 1; Some(j &lt;= m - 1); j++))<SUB>16</SUB>>", "117": "<(&lt;operator&gt;.assignment,int j = 1)<SUB>16</SUB>>", "119": "<(LITERAL,1,int j = 1)<SUB>16</SUB>>", "121": "<(IDENTIFIER,j,j &lt;= m - 1)<SUB>16</SUB>>", "123": "<(IDENTIFIER,m,m - 1)<SUB>16</SUB>>", "125": "<(&lt;operator&gt;.postIncrement,j++)<SUB>16</SUB>>", "127": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>16</SUB>>", "129": "<(&lt;operator&gt;.assignment,int val = nextInt())<SUB>17</SUB>>", "131": "<(nextInt,nextInt())<SUB>17</SUB>>", "133": "<(&lt;operator&gt;.assignment,paths[i][j][3] = val)<SUB>18</SUB>>", "135": "<(&lt;operator&gt;.indexAccess,paths[i][j])<SUB>18</SUB>>", "137": "<(IDENTIFIER,paths,paths[i][j][3] = val)<SUB>18</SUB>>", "139": "<(IDENTIFIER,j,paths[i][j][3] = val)<SUB>18</SUB>>", "141": "<(IDENTIFIER,val,paths[i][j][3] = val)<SUB>18</SUB>>", "143": "<(&lt;operator&gt;.indexAccess,paths[i][j + 1][2])<SUB>19</SUB>>", "145": "<(&lt;operator&gt;.indexAccess,paths[i])<SUB>19</SUB>>", "147": "<(IDENTIFIER,i,paths[i][j + 1][2] = val)<SUB>19</SUB>>", "149": "<(IDENTIFIER,j,j + 1)<SUB>19</SUB>>", "151": "<(LITERAL,2,paths[i][j + 1][2] = val)<SUB>19</SUB>>", "153": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt;= n - 1); i++),for (int i = 1; Some(i &lt;= n - 1); i++))<SUB>24</SUB>>", "155": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>24</SUB>>", "157": "<(LITERAL,1,int i = 1)<SUB>24</SUB>>", "159": "<(IDENTIFIER,i,i &lt;= n - 1)<SUB>24</SUB>>", "161": "<(IDENTIFIER,n,n - 1)<SUB>24</SUB>>", "163": "<(&lt;operator&gt;.postIncrement,i++)<SUB>24</SUB>>", "165": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>24</SUB>>", "167": "<(LOCAL,int j: int)<SUB>25</SUB>>", "169": "<(IDENTIFIER,j,int j = 1)<SUB>25</SUB>>", "171": "<(&lt;operator&gt;.lessEqualsThan,j &lt;= m)<SUB>25</SUB>>", "173": "<(IDENTIFIER,m,j &lt;= m)<SUB>25</SUB>>", "175": "<(IDENTIFIER,j,j++)<SUB>25</SUB>>", "177": "<(LOCAL,int val: int)<SUB>26</SUB>>", "179": "<(IDENTIFIER,val,int val = nextInt())<SUB>26</SUB>>", "181": "<(IDENTIFIER,sc,nextInt())<SUB>26</SUB>>", "183": "<(&lt;operator&gt;.indexAccess,paths[i][j][1])<SUB>29</SUB>>", "185": "<(&lt;operator&gt;.indexAccess,paths[i])<SUB>29</SUB>>", "187": "<(IDENTIFIER,i,paths[i][j][1] = val)<SUB>29</SUB>>", "189": "<(LITERAL,1,paths[i][j][1] = val)<SUB>29</SUB>>", "191": "<(&lt;operator&gt;.assignment,paths[i + 1][j][0] = val)<SUB>30</SUB>>", "193": "<(&lt;operator&gt;.indexAccess,paths[i + 1][j])<SUB>30</SUB>>", "195": "<(IDENTIFIER,paths,paths[i + 1][j][0] = val)<SUB>30</SUB>>", "197": "<(IDENTIFIER,i,i + 1)<SUB>30</SUB>>", "199": "<(IDENTIFIER,j,paths[i + 1][j][0] = val)<SUB>30</SUB>>", "201": "<(IDENTIFIER,val,paths[i + 1][j][0] = val)<SUB>30</SUB>>", "203": "<(LOCAL,int j: int)<SUB>34</SUB>>", "205": "<(IDENTIFIER,j,int j = 1)<SUB>34</SUB>>", "207": "<(&lt;operator&gt;.lessEqualsThan,j &lt;= n)<SUB>34</SUB>>", "209": "<(IDENTIFIER,n,j &lt;= n)<SUB>34</SUB>>", "211": "<(IDENTIFIER,j,j++)<SUB>34</SUB>>", "213": "<(CONTROL_STRUCTURE,for (int i = 1; Some(i &lt;= m); i++),for (int i = 1; Some(i &lt;= m); i++))<SUB>35</SUB>>", "215": "<(&lt;operator&gt;.assignment,int i = 1)<SUB>35</SUB>>", "217": "<(LITERAL,1,int i = 1)<SUB>35</SUB>>", "219": "<(IDENTIFIER,i,i &lt;= m)<SUB>35</SUB>>", "221": "<(&lt;operator&gt;.postIncrement,i++)<SUB>35</SUB>>", "223": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>35</SUB>>", "225": "<(IDENTIFIER,Arrays,fill(dp[j][i], Integer.MAX_VALUE))<SUB>36</SUB>>", "227": "<(&lt;operator&gt;.indexAccess,dp[j])<SUB>36</SUB>>", "229": "<(IDENTIFIER,j,fill(dp[j][i], Integer.MAX_VALUE))<SUB>36</SUB>>", "231": "<(&lt;operator&gt;.fieldAccess,Integer.MAX_VALUE)<SUB>36</SUB>>", "233": "<(FIELD_IDENTIFIER,MAX_VALUE,MAX_VALUE)<SUB>36</SUB>>", "235": "<(&lt;operator&gt;.indexAccess,dp[j][i][0])<SUB>37</SUB>>", "237": "<(&lt;operator&gt;.indexAccess,dp[j])<SUB>37</SUB>>", "239": "<(IDENTIFIER,j,dp[j][i][0] = 0)<SUB>37</SUB>>", "241": "<(LITERAL,0,dp[j][i][0] = 0)<SUB>37</SUB>>", "243": "<(CONTROL_STRUCTURE,for (int steps = 1; Some(steps &lt; k / 2 + 2); steps++),for (int steps = 1; Some(steps &lt; k / 2 + 2); steps++))<SUB>40</SUB>>", "245": "<(&lt;operator&gt;.assignment,int steps = 1)<SUB>40</SUB>>", "247": "<(LITERAL,1,int steps = 1)<SUB>40</SUB>>", "249": "<(IDENTIFIER,steps,steps &lt; k / 2 + 2)<SUB>40</SUB>>", "251": "<(&lt;operator&gt;.division,k / 2)<SUB>40</SUB>>", "253": "<(LITERAL,2,k / 2)<SUB>40</SUB>>", "255": "<(&lt;operator&gt;.postIncrement,steps++)<SUB>40</SUB>>", "257": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>40</SUB>>", "259": "<(LOCAL,int i: int)<SUB>41</SUB>>", "261": "<(IDENTIFIER,i,int i = 1)<SUB>41</SUB>>", "263": "<(&lt;operator&gt;.lessEqualsThan,i &lt;= n)<SUB>41</SUB>>", "265": "<(IDENTIFIER,n,i &lt;= n)<SUB>41</SUB>>", "267": "<(IDENTIFIER,i,i++)<SUB>41</SUB>>", "269": "<(CONTROL_STRUCTURE,for (int j = 1; Some(j &lt;= m); j++),for (int j = 1; Some(j &lt;= m); j++))<SUB>42</SUB>>", "271": "<(&lt;operator&gt;.assignment,int j = 1)<SUB>42</SUB>>", "273": "<(LITERAL,1,int j = 1)<SUB>42</SUB>>", "275": "<(IDENTIFIER,j,j &lt;= m)<SUB>42</SUB>>", "277": "<(&lt;operator&gt;.postIncrement,j++)<SUB>42</SUB>>", "279": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>42</SUB>>", "281": "<(&lt;operator&gt;.greaterThan,i - 1 &gt; 0)<SUB>43</SUB>>", "283": "<(IDENTIFIER,i,i - 1)<SUB>43</SUB>>", "285": "<(LITERAL,0,i - 1 &gt; 0)<SUB>43</SUB>>", "287": "<(&lt;operator&gt;.assignment,dp[i][j][steps] = min(dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j), dp[i][j][steps]))<SUB>44</SUB>>", "289": "<(&lt;operator&gt;.indexAccess,dp[i][j])<SUB>44</SUB>>", "291": "<(IDENTIFIER,dp,dp[i][j][steps] = min(dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j), dp[i][j][steps]))<SUB>44</SUB>>", "293": "<(IDENTIFIER,j,dp[i][j][steps] = min(dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j), dp[i][j][steps]))<SUB>44</SUB>>", "295": "<(min,min(dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j), dp[i][j][steps]))<SUB>44</SUB>>", "297": "<(&lt;operator&gt;.addition,dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j))<SUB>44</SUB>>", "299": "<(&lt;operator&gt;.indexAccess,dp[i - 1][j])<SUB>44</SUB>>", "301": "<(IDENTIFIER,dp,dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j))<SUB>44</SUB>>", "303": "<(IDENTIFIER,i,i - 1)<SUB>44</SUB>>", "305": "<(IDENTIFIER,j,dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j))<SUB>44</SUB>>", "307": "<(IDENTIFIER,steps,steps - 1)<SUB>44</SUB>>", "309": "<(getVal,getVal(i, j, i - 1, j))<SUB>44</SUB>>", "311": "<(IDENTIFIER,i,getVal(i, j, i - 1, j))<SUB>44</SUB>>", "313": "<(&lt;operator&gt;.subtraction,i - 1)<SUB>44</SUB>>", "315": "<(LITERAL,1,i - 1)<SUB>44</SUB>>", "317": "<(&lt;operator&gt;.indexAccess,dp[i][j][steps])<SUB>44</SUB>>", "319": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>44</SUB>>", "321": "<(IDENTIFIER,i,min(dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j), dp[i][j][steps]))<SUB>44</SUB>>", "323": "<(IDENTIFIER,steps,min(dp[i - 1][j][steps - 1] + getVal(i, j, i - 1, j), dp[i][j][steps]))<SUB>44</SUB>>", "325": "<(&lt;operator&gt;.greaterThan,j - 1 &gt; 0)<SUB>46</SUB>>", "327": "<(IDENTIFIER,j,j - 1)<SUB>46</SUB>>", "329": "<(LITERAL,0,j - 1 &gt; 0)<SUB>46</SUB>>", "331": "<(&lt;operator&gt;.assignment,dp[i][j][steps] = min(dp[i][j - 1][steps - 1] + getVal(i, j, i, j - 1), dp[i][j][steps]))<SUB>47</SUB>>", "333": "<(&lt;operator&gt;.indexAccess,dp[i][j])<SUB>47</SUB>>", "335": "<(IDENTIFIER,dp,dp[i][j][steps] = min(dp[i][j - 1][steps - 1] + getVal(i, j, i, j - 1), dp[i][j][steps]))<SUB>47</SUB>>", "337": "<(IDENTIFIER,j,dp[i][j][steps] = min(dp[i][j - 1][steps - 1] + getVal(i, j, i, j - 1), dp[i][j][steps]))<SUB>47</SUB>>", "339": "<(min,min(dp[i][j - 1][steps - 1] + getVal(i, j, i, j - 1), dp[i][j][steps]))<SUB>47</SUB>>", "341": "<(&lt;operator&gt;.addition,dp[i][j - 1][steps - 1] + getVal(i, j, i, j - 1))<SUB>47</SUB>>", "343": "<(&lt;operator&gt;.indexAccess,dp[i][j - 1])<SUB>47</SUB>>", "345": "<(IDENTIFIER,dp,dp[i][j - 1][steps - 1] + getVal(i, j, i, j - 1))<SUB>47</SUB>>", "347": "<(&lt;operator&gt;.subtraction,j - 1)<SUB>47</SUB>>", "349": "<(LITERAL,1,j - 1)<SUB>47</SUB>>", "351": "<(IDENTIFIER,steps,steps - 1)<SUB>47</SUB>>", "353": "<(getVal,getVal(i, j, i, j - 1))<SUB>47</SUB>>", "355": "<(IDENTIFIER,i,getVal(i, j, i, j - 1))<SUB>47</SUB>>", "357": "<(IDENTIFIER,i,getVal(i, j, i, j - 1))<SUB>47</SUB>>", "359": "<(IDENTIFIER,j,j - 1)<SUB>47</SUB>>", "361": "<(&lt;operator&gt;.indexAccess,dp[i][j][steps])<SUB>47</SUB>>", "363": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>47</SUB>>", "365": "<(IDENTIFIER,i,min(dp[i][j - 1][steps - 1] + getVal(i, j, i, j - 1), dp[i][j][steps]))<SUB>47</SUB>>", "367": "<(IDENTIFIER,steps,min(dp[i][j - 1][steps - 1] + getVal(i, j, i, j - 1), dp[i][j][steps]))<SUB>47</SUB>>", "369": "<(&lt;operator&gt;.lessEqualsThan,i + 1 &lt;= n)<SUB>50</SUB>>", "371": "<(IDENTIFIER,i,i + 1)<SUB>50</SUB>>", "373": "<(IDENTIFIER,n,i + 1 &lt;= n)<SUB>50</SUB>>", "375": "<(&lt;operator&gt;.assignment,dp[i][j][steps] = min(dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j), dp[i][j][steps]))<SUB>51</SUB>>", "377": "<(&lt;operator&gt;.indexAccess,dp[i][j])<SUB>51</SUB>>", "379": "<(IDENTIFIER,dp,dp[i][j][steps] = min(dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j), dp[i][j][steps]))<SUB>51</SUB>>", "381": "<(IDENTIFIER,j,dp[i][j][steps] = min(dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j), dp[i][j][steps]))<SUB>51</SUB>>", "383": "<(min,min(dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j), dp[i][j][steps]))<SUB>51</SUB>>", "385": "<(&lt;operator&gt;.addition,dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j))<SUB>51</SUB>>", "387": "<(&lt;operator&gt;.indexAccess,dp[i + 1][j])<SUB>51</SUB>>", "389": "<(IDENTIFIER,dp,dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j))<SUB>51</SUB>>", "391": "<(IDENTIFIER,i,i + 1)<SUB>51</SUB>>", "393": "<(IDENTIFIER,j,dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j))<SUB>51</SUB>>", "395": "<(IDENTIFIER,steps,steps - 1)<SUB>51</SUB>>", "397": "<(getVal,getVal(i, j, i + 1, j))<SUB>51</SUB>>", "399": "<(IDENTIFIER,i,getVal(i, j, i + 1, j))<SUB>51</SUB>>", "401": "<(&lt;operator&gt;.addition,i + 1)<SUB>51</SUB>>", "403": "<(LITERAL,1,i + 1)<SUB>51</SUB>>", "405": "<(&lt;operator&gt;.indexAccess,dp[i][j][steps])<SUB>51</SUB>>", "407": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>51</SUB>>", "409": "<(IDENTIFIER,i,min(dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j), dp[i][j][steps]))<SUB>51</SUB>>", "411": "<(IDENTIFIER,steps,min(dp[i + 1][j][steps - 1] + getVal(i, j, i + 1, j), dp[i][j][steps]))<SUB>51</SUB>>", "413": "<(&lt;operator&gt;.lessEqualsThan,j + 1 &lt;= m)<SUB>53</SUB>>", "415": "<(IDENTIFIER,j,j + 1)<SUB>53</SUB>>", "417": "<(IDENTIFIER,m,j + 1 &lt;= m)<SUB>53</SUB>>", "419": "<(&lt;operator&gt;.assignment,dp[i][j][steps] = min(dp[i][j + 1][steps - 1] + getVal(i, j, i, j + 1), dp[i][j][steps]))<SUB>54</SUB>>", "421": "<(&lt;operator&gt;.indexAccess,dp[i][j])<SUB>54</SUB>>", "423": "<(IDENTIFIER,dp,dp[i][j][steps] = min(dp[i][j + 1][steps - 1] + getVal(i, j, i, j + 1), dp[i][j][steps]))<SUB>54</SUB>>", "425": "<(IDENTIFIER,j,dp[i][j][steps] = min(dp[i][j + 1][steps - 1] + getVal(i, j, i, j + 1), dp[i][j][steps]))<SUB>54</SUB>>", "427": "<(min,min(dp[i][j + 1][steps - 1] + getVal(i, j, i, j + 1), dp[i][j][steps]))<SUB>54</SUB>>", "429": "<(&lt;operator&gt;.addition,dp[i][j + 1][steps - 1] + getVal(i, j, i, j + 1))<SUB>54</SUB>>", "431": "<(&lt;operator&gt;.indexAccess,dp[i][j + 1])<SUB>54</SUB>>", "433": "<(IDENTIFIER,dp,dp[i][j + 1][steps - 1] + getVal(i, j, i, j + 1))<SUB>54</SUB>>", "435": "<(&lt;operator&gt;.addition,j + 1)<SUB>54</SUB>>", "437": "<(LITERAL,1,j + 1)<SUB>54</SUB>>", "439": "<(IDENTIFIER,steps,steps - 1)<SUB>54</SUB>>", "441": "<(getVal,getVal(i, j, i, j + 1))<SUB>54</SUB>>", "443": "<(IDENTIFIER,i,getVal(i, j, i, j + 1))<SUB>54</SUB>>", "445": "<(IDENTIFIER,i,getVal(i, j, i, j + 1))<SUB>54</SUB>>", "447": "<(IDENTIFIER,j,j + 1)<SUB>54</SUB>>", "449": "<(&lt;operator&gt;.indexAccess,dp[i][j][steps])<SUB>54</SUB>>", "451": "<(&lt;operator&gt;.indexAccess,dp[i])<SUB>54</SUB>>", "453": "<(IDENTIFIER,i,min(dp[i][j + 1][steps - 1] + getVal(i, j, i, j + 1), dp[i][j][steps]))<SUB>54</SUB>>", "455": "<(IDENTIFIER,steps,min(dp[i][j + 1][steps - 1] + getVal(i, j, i, j + 1), dp[i][j][steps]))<SUB>54</SUB>>", "457": "<(&lt;operator&gt;.equals,k % 2 == 1)<SUB>59</SUB>>", "459": "<(IDENTIFIER,k,k % 2)<SUB>59</SUB>>", "461": "<(LITERAL,1,k % 2 == 1)<SUB>59</SUB>>", "463": "<(CONTROL_STRUCTURE,for (int j = 1; Some(j &lt;= n); j++),for (int j = 1; Some(j &lt;= n); j++))<SUB>60</SUB>>", "465": "<(&lt;operator&gt;.assignment,int j = 1)<SUB>60</SUB>>", "467": "<(LITERAL,1,int j = 1)<SUB>60</SUB>>", "469": "<(IDENTIFIER,j,j &lt;= n)<SUB>60</SUB>>", "471": "<(&lt;operator&gt;.postIncrement,j++)<SUB>60</SUB>>", "473": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>60</SUB>>", "475": "<(LOCAL,int s: int)<SUB>61</SUB>>", "477": "<(IDENTIFIER,s,int s = 1)<SUB>61</SUB>>", "479": "<(&lt;operator&gt;.lessEqualsThan,s &lt;= m)<SUB>61</SUB>>", "481": "<(IDENTIFIER,m,s &lt;= m)<SUB>61</SUB>>", "483": "<(IDENTIFIER,s,s++)<SUB>61</SUB>>", "485": "<(print,print(-1 + &quot; &quot;))<SUB>62</SUB>>", "487": "<(&lt;operator&gt;.addition,-1 + &quot; &quot;)<SUB>62</SUB>>", "489": "<(LITERAL,1,-1)<SUB>62</SUB>>", "491": "<(println,println())<SUB>64</SUB>>", "493": "<(CONTROL_STRUCTURE,else,else)<SUB>67</SUB>>", "495": "<(CONTROL_STRUCTURE,for (int j = 1; Some(j &lt;= n); j++),for (int j = 1; Some(j &lt;= n); j++))<SUB>68</SUB>>", "497": "<(&lt;operator&gt;.assignment,int j = 1)<SUB>68</SUB>>", "499": "<(LITERAL,1,int j = 1)<SUB>68</SUB>>", "501": "<(IDENTIFIER,j,j &lt;= n)<SUB>68</SUB>>", "503": "<(&lt;operator&gt;.postIncrement,j++)<SUB>68</SUB>>", "505": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>68</SUB>>", "507": "<(LOCAL,int s: int)<SUB>69</SUB>>", "509": "<(IDENTIFIER,s,int s = 1)<SUB>69</SUB>>", "511": "<(&lt;operator&gt;.lessEqualsThan,s &lt;= m)<SUB>69</SUB>>", "513": "<(IDENTIFIER,m,s &lt;= m)<SUB>69</SUB>>", "515": "<(IDENTIFIER,s,s++)<SUB>69</SUB>>", "517": "<(print,print(dp[j][s][k / 2] * 2L + &quot; &quot;))<SUB>70</SUB>>", "519": "<(&lt;operator&gt;.addition,dp[j][s][k / 2] * 2L + &quot; &quot;)<SUB>70</SUB>>", "521": "<(&lt;operator&gt;.indexAccess,dp[j][s][k / 2])<SUB>70</SUB>>", "523": "<(&lt;operator&gt;.indexAccess,dp[j])<SUB>70</SUB>>", "525": "<(IDENTIFIER,j,dp[j][s][k / 2] * 2L)<SUB>70</SUB>>", "527": "<(&lt;operator&gt;.division,k / 2)<SUB>70</SUB>>", "529": "<(LITERAL,2,k / 2)<SUB>70</SUB>>", "531": "<(LITERAL,&quot; &quot;,dp[j][s][k / 2] * 2L + &quot; &quot;)<SUB>70</SUB>>", "533": "<(IDENTIFIER,out,println())<SUB>72</SUB>>", "535": "<(IDENTIFIER,out,close())<SUB>78</SUB>>", "537": "<(MODIFIER,STATIC)>"}}