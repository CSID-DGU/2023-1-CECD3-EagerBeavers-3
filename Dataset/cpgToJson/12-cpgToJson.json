{"edges": [["21", "23"], ["21", "97"], ["21", "98"], ["21", "99"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "31"], ["23", "34"], ["23", "38"], ["23", "39"], ["23", "43"], ["23", "48"], ["23", "49"], ["23", "57"], ["23", "93"], ["23", "95"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["31", "32"], ["31", "33"], ["34", "5"], ["34", "35"], ["35", "36"], ["35", "37"], ["39", "40"], ["39", "41"], ["41", "42"], ["43", "44"], ["43", "45"], ["45", "46"], ["45", "47"], ["49", "50"], ["49", "51"], ["51", "52"], ["51", "53"], ["51", "54"], ["54", "55"], ["54", "56"], ["57", "58"], ["57", "61"], ["57", "64"], ["58", "59"], ["58", "60"], ["61", "62"], ["61", "63"], ["64", "65"], ["65", "66"], ["66", "67"], ["66", "72"], ["66", "82"], ["67", "68"], ["67", "71"], ["68", "69"], ["68", "70"], ["72", "73"], ["72", "74"], ["74", "75"], ["74", "80"], ["74", "81"], ["75", "76"], ["75", "79"], ["76", "77"], ["76", "78"], ["82", "83"], ["83", "84"], ["83", "85"], ["85", "86"], ["85", "91"], ["85", "92"], ["86", "87"], ["86", "90"], ["87", "88"], ["87", "89"], ["93", "94"], ["95", "96"], ["24", "30"], ["27", "33"], ["31", "37"], ["34", "41"], ["39", "45"], ["43", "54"], ["49", "58"], ["93", "95"], ["95", "99"], ["26", "24"], ["28", "27"], ["33", "31"], ["35", "34"], ["41", "39"], ["45", "43"], ["51", "49"], ["58", "61"], ["58", "68"], ["61", "93"], ["30", "28"], ["37", "35"], ["54", "51"], ["67", "76"], ["67", "87"], ["72", "93"], ["68", "67"], ["74", "72"], ["83", "93"], ["75", "74"], ["85", "83"], ["76", "75"], ["86", "85"], ["87", "86"], ["21", "26"], ["22", "99"], ["24", "99"], ["27", "99"], ["27", "99"], ["31", "99"], ["34", "99"], ["34", "99"], ["39", "99"], ["39", "99"], ["45", "99"], ["43", "99"], ["43", "99"], ["49", "99"], ["51", "99"], ["49", "99"], ["49", "99"], ["58", "99"], ["58", "99"], ["68", "99"], ["67", "99"], ["67", "99"], ["87", "99"], ["86", "99"], ["85", "99"], ["83", "99"], ["83", "99"], ["76", "99"], ["75", "99"], ["74", "99"], ["72", "99"], ["72", "99"], ["61", "99"], ["93", "99"], ["95", "99"], ["95", "99"], ["51", "99"], ["43", "99"], ["21", "22"], ["21", "24"], ["21", "31"], ["41", "39"], ["45", "43"], ["45", "43"], ["51", "49"], ["51", "49"], ["51", "49"], ["24", "27"], ["21", "27"], ["31", "34"], ["21", "34"], ["83", "93"], ["72", "93"], ["61", "93"], ["21", "93"], ["93", "95"], ["21", "95"], ["27", "41"], ["21", "41"], ["41", "45"], ["21", "45"], ["39", "45"], ["21", "51"], ["54", "51"], ["54", "51"], ["54", "58"], ["21", "58"], ["34", "61"], ["21", "61"], ["45", "54"], ["21", "54"], ["68", "67"], ["68", "67"], ["21", "67"], ["34", "72"], ["21", "72"], ["58", "68"], ["21", "68"], ["21", "74"], ["34", "83"], ["21", "83"], ["76", "75"], ["76", "75"], ["21", "75"], ["21", "85"], ["49", "76"], ["21", "76"], ["87", "86"], ["87", "86"], ["21", "86"], ["49", "87"], ["21", "87"], ["58", "68"], ["58", "61"], ["58", "67"], ["67", "83"], ["67", "75"], ["67", "85"], ["67", "72"], ["67", "74"], ["67", "76"], ["67", "87"], ["67", "86"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>2</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>2</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>2</SUB>>", "29": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>2</SUB>>", "6": "<(LOCAL,PrintWriter out: ANY)<SUB>3</SUB>>", "32": "<(IDENTIFIER,out,ANY out = new PrintWriter(System.out))<SUB>3</SUB>>", "34": "<(&lt;init&gt;,new PrintWriter(System.out))<SUB>3</SUB>>", "35": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>3</SUB>>", "37": "<(FIELD_IDENTIFIER,out,out)<SUB>3</SUB>>", "39": "<(&lt;operator&gt;.assignment,int n = nextInt())<SUB>4</SUB>>", "41": "<(nextInt,nextInt())<SUB>4</SUB>>", "43": "<(&lt;operator&gt;.assignment,a = nextIntArray(n))<SUB>5</SUB>>", "45": "<(nextIntArray,nextIntArray(n))<SUB>5</SUB>>", "47": "<(IDENTIFIER,n,nextIntArray(n))<SUB>5</SUB>>", "49": "<(&lt;operator&gt;.assignment,long inversions = divide(0, n - 1))<SUB>6</SUB>>", "51": "<(divide,divide(0, n - 1))<SUB>6</SUB>>", "53": "<(LITERAL,0,divide(0, n - 1))<SUB>6</SUB>>", "55": "<(IDENTIFIER,n,n - 1)<SUB>6</SUB>>", "57": "<(CONTROL_STRUCTURE,if (n == 5),if (n == 5))<SUB>9</SUB>>", "59": "<(IDENTIFIER,n,n == 5)<SUB>9</SUB>>", "61": "<(println,println(&quot;Petr&quot;))<SUB>9</SUB>>", "63": "<(LITERAL,&quot;Petr&quot;,println(&quot;Petr&quot;))<SUB>9</SUB>>", "65": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>10</SUB>>", "67": "<(&lt;operator&gt;.equals,n % 2 == 0)<SUB>11</SUB>>", "69": "<(IDENTIFIER,n,n % 2)<SUB>11</SUB>>", "71": "<(LITERAL,0,n % 2 == 0)<SUB>11</SUB>>", "73": "<(IDENTIFIER,out,println(inversions % 2 == 0 ? &quot;Petr&quot; : &quot;Um_nik&quot;))<SUB>11</SUB>>", "75": "<(&lt;operator&gt;.equals,inversions % 2 == 0)<SUB>11</SUB>>", "77": "<(IDENTIFIER,inversions,inversions % 2)<SUB>11</SUB>>", "79": "<(LITERAL,0,inversions % 2 == 0)<SUB>11</SUB>>", "81": "<(LITERAL,&quot;Um_nik&quot;,inversions % 2 == 0 ? &quot;Petr&quot; : &quot;Um_nik&quot;)<SUB>11</SUB>>", "83": "<(println,println(inversions % 2 != 0 ? &quot;Petr&quot; : &quot;Um_nik&quot;))<SUB>12</SUB>>", "85": "<(&lt;operator&gt;.conditional,inversions % 2 != 0 ? &quot;Petr&quot; : &quot;Um_nik&quot;)<SUB>12</SUB>>", "87": "<(&lt;operator&gt;.modulo,inversions % 2)<SUB>12</SUB>>", "89": "<(LITERAL,2,inversions % 2)<SUB>12</SUB>>", "91": "<(LITERAL,&quot;Petr&quot;,inversions % 2 != 0 ? &quot;Petr&quot; : &quot;Um_nik&quot;)<SUB>12</SUB>>", "93": "<(flush,flush())<SUB>14</SUB>>", "95": "<(close,close())<SUB>15</SUB>>", "97": "<(MODIFIER,PUBLIC)>", "99": "<(METHOD_RETURN,void)<SUB>1</SUB>>"}}