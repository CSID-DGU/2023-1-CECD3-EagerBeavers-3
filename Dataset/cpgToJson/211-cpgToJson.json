{"edges": [["22", "23"], ["22", "24"], ["22", "228"], ["22", "229"], ["22", "230"], ["24", "4"], ["24", "25"], ["24", "28"], ["24", "6"], ["24", "39"], ["24", "42"], ["24", "45"], ["24", "46"], ["24", "52"], ["24", "53"], ["24", "59"], ["24", "63"], ["24", "84"], ["24", "119"], ["24", "123"], ["24", "127"], ["24", "131"], ["24", "146"], ["24", "157"], ["24", "223"], ["25", "26"], ["25", "27"], ["28", "3"], ["28", "29"], ["29", "30"], ["29", "33"], ["29", "38"], ["30", "31"], ["30", "32"], ["33", "34"], ["33", "35"], ["35", "36"], ["35", "37"], ["39", "40"], ["39", "41"], ["42", "5"], ["42", "43"], ["43", "44"], ["46", "47"], ["46", "48"], ["48", "49"], ["48", "50"], ["50", "51"], ["53", "54"], ["53", "55"], ["55", "56"], ["55", "57"], ["57", "58"], ["59", "60"], ["59", "61"], ["61", "62"], ["63", "64"], ["63", "65"], ["63", "68"], ["63", "71"], ["63", "73"], ["65", "66"], ["65", "67"], ["68", "69"], ["68", "70"], ["71", "72"], ["73", "74"], ["73", "77"], ["74", "75"], ["74", "76"], ["77", "78"], ["77", "81"], ["77", "83"], ["78", "79"], ["78", "80"], ["81", "82"], ["84", "85"], ["84", "89"], ["85", "86"], ["85", "88"], ["86", "87"], ["89", "90"], ["89", "93"], ["89", "96"], ["89", "97"], ["89", "105"], ["89", "106"], ["89", "114"], ["90", "91"], ["90", "92"], ["93", "7"], ["93", "94"], ["94", "95"], ["97", "98"], ["97", "99"], ["99", "100"], ["99", "104"], ["100", "101"], ["100", "102"], ["102", "103"], ["106", "107"], ["106", "108"], ["108", "109"], ["108", "113"], ["109", "110"], ["109", "111"], ["111", "112"], ["114", "115"], ["114", "118"], ["115", "116"], ["115", "117"], ["119", "120"], ["119", "121"], ["121", "122"], ["123", "124"], ["123", "125"], ["125", "126"], ["127", "128"], ["127", "129"], ["129", "130"], ["131", "132"], ["131", "133"], ["131", "136"], ["131", "139"], ["131", "141"], ["133", "134"], ["133", "135"], ["136", "137"], ["136", "138"], ["139", "140"], ["141", "142"], ["141", "145"], ["142", "143"], ["142", "144"], ["146", "147"], ["146", "150"], ["147", "148"], ["147", "149"], ["150", "151"], ["150", "156"], ["151", "152"], ["151", "155"], ["152", "153"], ["152", "154"], ["157", "158"], ["157", "161"], ["157", "167"], ["157", "170"], ["157", "176"], ["158", "159"], ["158", "160"], ["161", "162"], ["161", "163"], ["163", "164"], ["163", "165"], ["165", "166"], ["167", "168"], ["167", "169"], ["170", "171"], ["170", "172"], ["172", "173"], ["172", "174"], ["174", "175"], ["176", "177"], ["176", "181"], ["176", "185"], ["176", "186"], ["176", "189"], ["176", "208"], ["176", "218"], ["177", "178"], ["177", "179"], ["177", "180"], ["181", "182"], ["181", "183"], ["181", "184"], ["186", "187"], ["186", "188"], ["189", "190"], ["189", "191"], ["189", "194"], ["189", "197"], ["189", "199"], ["191", "192"], ["191", "193"], ["194", "195"], ["194", "196"], ["197", "198"], ["199", "200"], ["199", "203"], ["200", "201"], ["200", "202"], ["203", "204"], ["203", "207"], ["204", "205"], ["204", "206"], ["208", "209"], ["208", "211"], ["209", "210"], ["211", "212"], ["211", "217"], ["212", "213"], ["212", "216"], ["213", "214"], ["213", "215"], ["218", "219"], ["218", "222"], ["219", "220"], ["219", "221"], ["223", "224"], ["223", "227"], ["224", "225"], ["224", "226"], ["25", "32"], ["28", "41"], ["39", "43"], ["42", "50"], ["46", "57"], ["53", "61"], ["59", "65"], ["119", "125"], ["123", "129"], ["127", "133"], ["223", "230"], ["27", "25"], ["41", "39"], ["43", "42"], ["48", "46"], ["55", "53"], ["61", "59"], ["65", "68"], ["68", "74"], ["68", "86"], ["71", "68"], ["73", "71"], ["85", "92"], ["85", "121"], ["121", "119"], ["125", "123"], ["129", "127"], ["133", "136"], ["136", "142"], ["136", "147"], ["139", "136"], ["147", "154"], ["147", "158"], ["158", "165"], ["161", "174"], ["161", "226"], ["167", "165"], ["170", "167"], ["224", "223"], ["30", "37"], ["33", "28"], ["50", "48"], ["57", "55"], ["74", "80"], ["86", "85"], ["90", "94"], ["93", "102"], ["97", "111"], ["106", "115"], ["114", "86"], ["142", "147"], ["142", "139"], ["151", "156"], ["156", "230"], ["163", "161"], ["172", "170"], ["226", "224"], ["32", "30"], ["35", "33"], ["78", "81"], ["81", "73"], ["92", "90"], ["94", "93"], ["99", "97"], ["108", "106"], ["115", "114"], ["152", "151"], ["165", "163"], ["174", "172"], ["37", "35"], ["80", "78"], ["100", "99"], ["109", "108"], ["154", "152"], ["102", "100"], ["111", "109"], ["22", "27"], ["156", "230"], ["23", "230"], ["25", "230"], ["30", "230"], ["33", "230"], ["33", "230"], ["33", "230"], ["28", "230"], ["39", "230"], ["43", "230"], ["42", "230"], ["42", "230"], ["46", "230"], ["55", "230"], ["57", "230"], ["55", "230"], ["53", "230"], ["53", "230"], ["59", "230"], ["59", "230"], ["59", "230"], ["86", "230"], ["85", "230"], ["85", "230"], ["119", "230"], ["119", "230"], ["123", "230"], ["123", "230"], ["123", "230"], ["127", "230"], ["127", "230"], ["127", "230"], ["133", "230"], ["136", "230"], ["136", "230"], ["136", "230"], ["142", "230"], ["142", "230"], ["142", "230"], ["139", "230"], ["147", "230"], ["147", "230"], ["151", "230"], ["90", "230"], ["94", "230"], ["93", "230"], ["93", "230"], ["97", "230"], ["109", "230"], ["111", "230"], ["109", "230"], ["108", "230"], ["106", "230"], ["106", "230"], ["114", "230"], ["114", "230"], ["114", "230"], ["73", "230"], ["78", "230"], ["81", "230"], ["81", "230"], ["73", "230"], ["71", "230"], ["22", "23"], ["22", "25"], ["22", "39"], ["48", "46"], ["48", "46"], ["55", "53"], ["55", "53"], ["61", "59"], ["121", "119"], ["125", "123"], ["129", "127"], ["25", "28"], ["22", "28"], ["30", "28"], ["33", "28"], ["39", "42"], ["22", "42"], ["43", "42"], ["22", "65"], ["78", "73"], ["81", "73"], ["22", "73"], ["22", "133"], ["22", "158"], ["127", "161"], ["170", "167"], ["22", "167"], ["127", "170"], ["22", "223"], ["22", "30"], ["22", "38"], ["28", "43"], ["22", "43"], ["22", "48"], ["50", "48"], ["48", "55"], ["22", "55"], ["57", "55"], ["46", "61"], ["22", "61"], ["65", "68"], ["71", "68"], ["22", "68"], ["61", "68"], ["68", "71"], ["22", "71"], ["86", "85"], ["22", "85"], ["22", "90"], ["99", "97"], ["99", "97"], ["108", "106"], ["108", "106"], ["68", "121"], ["22", "121"], ["121", "125"], ["22", "125"], ["125", "129"], ["22", "129"], ["133", "136"], ["139", "136"], ["22", "136"], ["129", "136"], ["142", "139"], ["22", "139"], ["22", "147"], ["22", "156"], ["30", "33"], ["22", "33"], ["42", "50"], ["22", "50"], ["50", "57"], ["22", "57"], ["22", "78"], ["22", "83"], ["53", "86"], ["22", "86"], ["90", "93"], ["22", "93"], ["94", "93"], ["59", "114"], ["73", "114"], ["106", "114"], ["22", "114"], ["22", "142"], ["136", "142"], ["22", "151"], ["78", "81"], ["22", "81"], ["43", "94"], ["22", "94"], ["100", "99"], ["100", "99"], ["22", "99"], ["109", "108"], ["109", "108"], ["22", "108"], ["147", "165"], ["174", "165"], ["22", "165"], ["165", "174"], ["22", "174"], ["55", "100"], ["109", "100"], ["22", "100"], ["102", "100"], ["100", "109"], ["22", "109"], ["111", "109"], ["93", "102"], ["22", "102"], ["102", "111"], ["22", "111"], ["68", "68"], ["68", "73"], ["68", "81"], ["68", "74"], ["68", "80"], ["68", "71"], ["68", "78"], ["85", "94"], ["85", "115"], ["85", "99"], ["85", "102"], ["85", "114"], ["85", "85"], ["85", "92"], ["85", "106"], ["85", "97"], ["85", "93"], ["85", "90"], ["85", "100"], ["85", "108"], ["85", "111"], ["85", "109"], ["85", "86"], ["136", "142"], ["147", "154"], ["147", "161"], ["147", "163"], ["147", "226"], ["147", "151"], ["147", "223"], ["147", "152"], ["147", "165"], ["147", "224"], ["147", "156"], ["147", "158"], ["161", "167"], ["161", "161"], ["161", "163"], ["161", "170"], ["161", "165"], ["161", "174"], ["161", "172"], ["142", "136"], ["142", "139"]], "features": {"22": "<(METHOD,main)<SUB>1</SUB>>", "24": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "25": "<(&lt;operator&gt;.assignment,ANY br = new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "27": "<(&lt;operator&gt;.alloc,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "3": "<(IDENTIFIER,br,new BufferedReader(new InputStreamReader(System.in)))<SUB>2</SUB>>", "30": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "32": "<(&lt;operator&gt;.alloc,new InputStreamReader(System.in))<SUB>2</SUB>>", "34": "<(IDENTIFIER,$obj0,new InputStreamReader(System.in))>", "36": "<(IDENTIFIER,System,new InputStreamReader(System.in))<SUB>2</SUB>>", "38": "<(IDENTIFIER,$obj0,&lt;empty&gt;)>", "39": "<(&lt;operator&gt;.assignment,ANY st = new StringTokenizer(br.readLine()))<SUB>3</SUB>>", "41": "<(&lt;operator&gt;.alloc,new StringTokenizer(br.readLine()))<SUB>3</SUB>>", "5": "<(IDENTIFIER,st,new StringTokenizer(br.readLine()))<SUB>3</SUB>>", "44": "<(IDENTIFIER,br,readLine())<SUB>3</SUB>>", "46": "<(&lt;operator&gt;.assignment,int n = parseInt(st.nextToken()))<SUB>4</SUB>>", "48": "<(parseInt,parseInt(st.nextToken()))<SUB>4</SUB>>", "50": "<(nextToken,nextToken())<SUB>4</SUB>>", "52": "<(LOCAL,int m: int)<SUB>5</SUB>>", "54": "<(IDENTIFIER,m,int m = parseInt(st.nextToken()))<SUB>5</SUB>>", "56": "<(IDENTIFIER,Integer,parseInt(st.nextToken()))<SUB>5</SUB>>", "58": "<(IDENTIFIER,st,nextToken())<SUB>5</SUB>>", "60": "<(IDENTIFIER,aa,aa = new ArrayList[n])<SUB>6</SUB>>", "62": "<(IDENTIFIER,n,new ArrayList[n])<SUB>6</SUB>>", "64": "<(LOCAL,int i: int)<SUB>7</SUB>>", "66": "<(IDENTIFIER,i,int i = 0)<SUB>7</SUB>>", "68": "<(&lt;operator&gt;.lessThan,i &lt; n)<SUB>7</SUB>>", "70": "<(IDENTIFIER,n,i &lt; n)<SUB>7</SUB>>", "72": "<(IDENTIFIER,i,i++)<SUB>7</SUB>>", "74": "<(&lt;operator&gt;.indexAccess,aa[i])<SUB>8</SUB>>", "76": "<(IDENTIFIER,i,aa[i] = new ArrayList&lt;Integer&gt;())<SUB>8</SUB>>", "78": "<(&lt;operator&gt;.assignment,&lt;empty&gt;)>", "80": "<(&lt;operator&gt;.alloc,new ArrayList&lt;Integer&gt;())<SUB>8</SUB>>", "82": "<(IDENTIFIER,$obj3,new ArrayList&lt;Integer&gt;())>", "84": "<(CONTROL_STRUCTURE,while (m-- &gt; 0),while (m-- &gt; 0))<SUB>9</SUB>>", "86": "<(&lt;operator&gt;.postDecrement,m--)<SUB>9</SUB>>", "88": "<(LITERAL,0,m-- &gt; 0)<SUB>9</SUB>>", "90": "<(&lt;operator&gt;.assignment,st = new StringTokenizer(br.readLine()))<SUB>10</SUB>>", "92": "<(&lt;operator&gt;.alloc,new StringTokenizer(br.readLine()))<SUB>10</SUB>>", "7": "<(IDENTIFIER,st,new StringTokenizer(br.readLine()))<SUB>10</SUB>>", "95": "<(IDENTIFIER,br,readLine())<SUB>10</SUB>>", "97": "<(&lt;operator&gt;.assignment,int i = Integer.parseInt(st.nextToken()) - 1)<SUB>11</SUB>>", "99": "<(&lt;operator&gt;.subtraction,Integer.parseInt(st.nextToken()) - 1)<SUB>11</SUB>>", "101": "<(IDENTIFIER,Integer,parseInt(st.nextToken()))<SUB>11</SUB>>", "103": "<(IDENTIFIER,st,nextToken())<SUB>11</SUB>>", "105": "<(LOCAL,int j: int)<SUB>12</SUB>>", "107": "<(IDENTIFIER,j,int j = Integer.parseInt(st.nextToken()) - 1)<SUB>12</SUB>>", "109": "<(parseInt,parseInt(st.nextToken()))<SUB>12</SUB>>", "111": "<(nextToken,nextToken())<SUB>12</SUB>>", "113": "<(LITERAL,1,Integer.parseInt(st.nextToken()) - 1)<SUB>12</SUB>>", "115": "<(&lt;operator&gt;.indexAccess,aa[i])<SUB>13</SUB>>", "117": "<(IDENTIFIER,i,add(j))<SUB>13</SUB>>", "119": "<(&lt;operator&gt;.assignment,visited = new boolean[n])<SUB>15</SUB>>", "121": "<(&lt;operator&gt;.alloc,new boolean[n])>", "123": "<(&lt;operator&gt;.assignment,instack = new boolean[n])<SUB>16</SUB>>", "125": "<(&lt;operator&gt;.alloc,new boolean[n])>", "127": "<(&lt;operator&gt;.assignment,stack = new int[n])<SUB>17</SUB>>", "129": "<(&lt;operator&gt;.alloc,new int[n])>", "131": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>18</SUB>>", "133": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>18</SUB>>", "135": "<(LITERAL,0,int i = 0)<SUB>18</SUB>>", "137": "<(IDENTIFIER,i,i &lt; n)<SUB>18</SUB>>", "139": "<(&lt;operator&gt;.postIncrement,i++)<SUB>18</SUB>>", "141": "<(CONTROL_STRUCTURE,if (dfs1(i)),if (dfs1(i)))<SUB>19</SUB>>", "143": "<(IDENTIFIER,this,dfs1(i))<SUB>19</SUB>>", "145": "<(CONTROL_STRUCTURE,break;,break;)<SUB>20</SUB>>", "147": "<(&lt;operator&gt;.equals,cnt == 0)<SUB>21</SUB>>", "149": "<(LITERAL,0,cnt == 0)<SUB>21</SUB>>", "151": "<(println,System.out.println(&quot;YES&quot;))<SUB>22</SUB>>", "153": "<(IDENTIFIER,System,System.out.println(&quot;YES&quot;))<SUB>22</SUB>>", "155": "<(LITERAL,&quot;YES&quot;,System.out.println(&quot;YES&quot;))<SUB>22</SUB>>", "157": "<(CONTROL_STRUCTURE,for (j_ = h_, i_ = stack[--cnt]; None; j_ = i_, i_ = stack[--cnt]),for (j_ = h_, i_ = stack[--cnt]; None; j_ = i_, i_ = stack[--cnt]))<SUB>25</SUB>>", "159": "<(IDENTIFIER,j_,j_ = h_)<SUB>25</SUB>>", "161": "<(&lt;operator&gt;.assignment,i_ = stack[--cnt])<SUB>25</SUB>>", "163": "<(&lt;operator&gt;.indexAccess,stack[--cnt])<SUB>25</SUB>>", "165": "<(&lt;operator&gt;.preDecrement,--cnt)<SUB>25</SUB>>", "167": "<(&lt;operator&gt;.assignment,j_ = i_)<SUB>25</SUB>>", "169": "<(IDENTIFIER,i_,j_ = i_)<SUB>25</SUB>>", "171": "<(IDENTIFIER,i_,i_ = stack[--cnt])<SUB>25</SUB>>", "173": "<(IDENTIFIER,stack,i_ = stack[--cnt])<SUB>25</SUB>>", "175": "<(IDENTIFIER,cnt,--cnt)<SUB>25</SUB>>", "177": "<(fill,fill(visited, false))<SUB>26</SUB>>", "179": "<(IDENTIFIER,visited,fill(visited, false))<SUB>26</SUB>>", "181": "<(fill,fill(instack, false))<SUB>27</SUB>>", "183": "<(IDENTIFIER,instack,fill(instack, false))<SUB>27</SUB>>", "185": "<(LOCAL,boolean cycle: boolean)<SUB>28</SUB>>", "187": "<(IDENTIFIER,cycle,boolean cycle = false)<SUB>28</SUB>>", "189": "<(CONTROL_STRUCTURE,for (int i = 0; Some(i &lt; n); i++),for (int i = 0; Some(i &lt; n); i++))<SUB>29</SUB>>", "191": "<(&lt;operator&gt;.assignment,int i = 0)<SUB>29</SUB>>", "193": "<(LITERAL,0,int i = 0)<SUB>29</SUB>>", "195": "<(IDENTIFIER,i,i &lt; n)<SUB>29</SUB>>", "197": "<(&lt;operator&gt;.postIncrement,i++)<SUB>29</SUB>>", "199": "<(CONTROL_STRUCTURE,if (dfs2(i)),if (dfs2(i)))<SUB>30</SUB>>", "201": "<(IDENTIFIER,this,dfs2(i))<SUB>30</SUB>>", "203": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>30</SUB>>", "205": "<(IDENTIFIER,cycle,cycle = true)<SUB>31</SUB>>", "207": "<(CONTROL_STRUCTURE,break;,break;)<SUB>32</SUB>>", "209": "<(&lt;operator&gt;.logicalNot,!cycle)<SUB>34</SUB>>", "211": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>34</SUB>>", "213": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>35</SUB>>", "215": "<(FIELD_IDENTIFIER,out,out)<SUB>35</SUB>>", "217": "<(RETURN,return;,return;)<SUB>36</SUB>>", "219": "<(&lt;operator&gt;.equals,i_ == h_)<SUB>38</SUB>>", "221": "<(IDENTIFIER,h_,i_ == h_)<SUB>38</SUB>>", "223": "<(println,System.out.println(&quot;NO&quot;))<SUB>41</SUB>>", "225": "<(IDENTIFIER,System,System.out.println(&quot;NO&quot;))<SUB>41</SUB>>", "227": "<(LITERAL,&quot;NO&quot;,System.out.println(&quot;NO&quot;))<SUB>41</SUB>>", "229": "<(MODIFIER,STATIC)>"}}