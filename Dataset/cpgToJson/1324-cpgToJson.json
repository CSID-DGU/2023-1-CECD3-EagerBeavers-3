{"edges": [["21", "22"], ["21", "23"], ["21", "82"], ["21", "83"], ["21", "84"], ["23", "4"], ["23", "24"], ["23", "27"], ["23", "6"], ["23", "31"], ["23", "34"], ["23", "38"], ["23", "39"], ["23", "40"], ["23", "44"], ["23", "48"], ["23", "80"], ["24", "25"], ["24", "26"], ["27", "3"], ["27", "28"], ["28", "29"], ["28", "30"], ["31", "32"], ["31", "33"], ["34", "5"], ["34", "35"], ["35", "36"], ["35", "37"], ["40", "41"], ["40", "42"], ["42", "43"], ["44", "45"], ["44", "46"], ["46", "47"], ["48", "49"], ["48", "52"], ["48", "55"], ["49", "50"], ["49", "51"], ["52", "53"], ["52", "54"], ["55", "56"], ["56", "57"], ["56", "58"], ["58", "59"], ["58", "79"], ["59", "60"], ["59", "78"], ["60", "61"], ["60", "77"], ["61", "62"], ["61", "73"], ["62", "63"], ["62", "72"], ["63", "64"], ["63", "71"], ["64", "65"], ["64", "70"], ["65", "66"], ["65", "69"], ["66", "67"], ["66", "68"], ["73", "74"], ["73", "75"], ["73", "76"], ["80", "81"], ["24", "30"], ["27", "33"], ["31", "37"], ["34", "42"], ["40", "46"], ["44", "49"], ["80", "84"], ["26", "24"], ["28", "27"], ["33", "31"], ["35", "34"], ["42", "40"], ["46", "44"], ["49", "52"], ["49", "66"], ["52", "80"], ["30", "28"], ["37", "35"], ["56", "80"], ["58", "56"], ["59", "58"], ["60", "59"], ["61", "60"], ["62", "73"], ["73", "61"], ["63", "62"], ["64", "63"], ["65", "64"], ["66", "65"], ["21", "26"], ["22", "84"], ["24", "84"], ["27", "84"], ["27", "84"], ["31", "84"], ["34", "84"], ["34", "84"], ["40", "84"], ["44", "84"], ["46", "84"], ["44", "84"], ["44", "84"], ["49", "84"], ["49", "84"], ["66", "84"], ["65", "84"], ["64", "84"], ["63", "84"], ["62", "84"], ["61", "84"], ["73", "84"], ["61", "84"], ["60", "84"], ["59", "84"], ["58", "84"], ["58", "84"], ["56", "84"], ["56", "84"], ["52", "84"], ["80", "84"], ["80", "84"], ["73", "84"], ["21", "22"], ["21", "24"], ["21", "31"], ["42", "40"], ["46", "44"], ["24", "27"], ["21", "27"], ["31", "34"], ["21", "34"], ["56", "80"], ["52", "80"], ["21", "80"], ["27", "42"], ["21", "42"], ["42", "46"], ["21", "46"], ["40", "49"], ["21", "49"], ["34", "52"], ["21", "52"], ["34", "56"], ["21", "56"], ["58", "56"], ["58", "56"], ["60", "58"], ["60", "58"], ["21", "58"], ["60", "59"], ["60", "59"], ["21", "59"], ["61", "60"], ["61", "60"], ["62", "60"], ["21", "60"], ["62", "61"], ["62", "61"], ["73", "61"], ["73", "61"], ["73", "61"], ["64", "62"], ["64", "62"], ["66", "62"], ["21", "62"], ["21", "73"], ["44", "73"], ["64", "63"], ["64", "63"], ["66", "63"], ["21", "63"], ["65", "64"], ["65", "64"], ["21", "64"], ["66", "65"], ["66", "65"], ["21", "65"], ["49", "66"], ["21", "66"], ["49", "58"], ["49", "60"], ["49", "73"], ["49", "61"], ["49", "64"], ["49", "66"], ["49", "52"], ["49", "56"], ["49", "63"], ["49", "65"], ["49", "59"], ["49", "62"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>>", "24": "<(&lt;operator&gt;.assignment,ANY sc = new Scanner(System.in))<SUB>3</SUB>>", "26": "<(&lt;operator&gt;.alloc,new Scanner(System.in))<SUB>3</SUB>>", "3": "<(IDENTIFIER,sc,new Scanner(System.in))<SUB>3</SUB>>", "29": "<(IDENTIFIER,System,new Scanner(System.in))<SUB>3</SUB>>", "6": "<(LOCAL,PrintWriter out: ANY)<SUB>4</SUB>>", "32": "<(IDENTIFIER,out,ANY out = new PrintWriter(System.out))<SUB>4</SUB>>", "34": "<(&lt;init&gt;,new PrintWriter(System.out))<SUB>4</SUB>>", "35": "<(&lt;operator&gt;.fieldAccess,System.out)<SUB>4</SUB>>", "37": "<(FIELD_IDENTIFIER,out,out)<SUB>4</SUB>>", "39": "<(LOCAL,long k: long)<SUB>6</SUB>>", "41": "<(IDENTIFIER,x,long x = nextLong())<SUB>6</SUB>>", "43": "<(IDENTIFIER,sc,nextLong())<SUB>6</SUB>>", "45": "<(IDENTIFIER,k,long k = nextLong())<SUB>6</SUB>>", "47": "<(IDENTIFIER,sc,nextLong())<SUB>6</SUB>>", "49": "<(&lt;operator&gt;.equals,x == 0)<SUB>7</SUB>>", "51": "<(LITERAL,0,x == 0)<SUB>7</SUB>>", "53": "<(IDENTIFIER,out,println(0))<SUB>8</SUB>>", "55": "<(CONTROL_STRUCTURE,else,else)<SUB>10</SUB>>", "57": "<(IDENTIFIER,out,println(((x % MOD * 2 - 1 + MOD) % MOD * modPow(2, k) % MOD + 1) % MOD))<SUB>10</SUB>>", "59": "<(&lt;operator&gt;.addition,(x % MOD * 2 - 1 + MOD) % MOD * modPow(2, k) % MOD + 1)<SUB>10</SUB>>", "61": "<(&lt;operator&gt;.multiplication,(x % MOD * 2 - 1 + MOD) % MOD * modPow(2, k))<SUB>10</SUB>>", "63": "<(&lt;operator&gt;.addition,x % MOD * 2 - 1 + MOD)<SUB>10</SUB>>", "65": "<(&lt;operator&gt;.multiplication,x % MOD * 2)<SUB>10</SUB>>", "67": "<(IDENTIFIER,x,x % MOD)<SUB>10</SUB>>", "69": "<(LITERAL,2,x % MOD * 2)<SUB>10</SUB>>", "71": "<(IDENTIFIER,MOD,x % MOD * 2 - 1 + MOD)<SUB>10</SUB>>", "73": "<(modPow,modPow(2, k))<SUB>10</SUB>>", "75": "<(LITERAL,2,modPow(2, k))<SUB>10</SUB>>", "77": "<(IDENTIFIER,MOD,(x % MOD * 2 - 1 + MOD) % MOD * modPow(2, k) % MOD)<SUB>10</SUB>>", "79": "<(IDENTIFIER,MOD,((x % MOD * 2 - 1 + MOD) % MOD * modPow(2, k) % MOD + 1) % MOD)<SUB>10</SUB>>", "81": "<(IDENTIFIER,out,close())<SUB>11</SUB>>", "83": "<(MODIFIER,STATIC)>"}}