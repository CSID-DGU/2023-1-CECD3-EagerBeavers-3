{"edges": [["21", "22"], ["21", "23"], ["21", "100"], ["21", "101"], ["21", "102"], ["23", "24"], ["23", "25"], ["23", "4"], ["23", "32"], ["23", "35"], ["23", "6"], ["23", "36"], ["23", "39"], ["23", "43"], ["23", "44"], ["23", "48"], ["23", "98"], ["25", "26"], ["25", "27"], ["27", "28"], ["27", "29"], ["29", "30"], ["29", "31"], ["32", "33"], ["32", "34"], ["35", "3"], ["36", "37"], ["36", "38"], ["39", "5"], ["39", "40"], ["40", "41"], ["40", "42"], ["44", "45"], ["44", "46"], ["46", "47"], ["48", "49"], ["48", "53"], ["49", "50"], ["49", "52"], ["50", "51"], ["53", "54"], ["53", "55"], ["53", "59"], ["53", "60"], ["53", "65"], ["53", "66"], ["53", "71"], ["55", "56"], ["55", "57"], ["57", "58"], ["60", "61"], ["60", "62"], ["62", "63"], ["62", "64"], ["66", "67"], ["66", "68"], ["68", "69"], ["68", "70"], ["71", "72"], ["71", "91"], ["71", "94"], ["72", "73"], ["72", "82"], ["73", "74"], ["73", "77"], ["74", "75"], ["74", "76"], ["77", "78"], ["77", "81"], ["78", "79"], ["78", "80"], ["82", "83"], ["82", "86"], ["83", "84"], ["83", "85"], ["86", "87"], ["86", "90"], ["87", "88"], ["87", "89"], ["91", "92"], ["91", "93"], ["94", "95"], ["95", "96"], ["95", "97"], ["98", "99"], ["25", "34"], ["32", "35"], ["35", "38"], ["36", "42"], ["39", "46"], ["44", "50"], ["98", "102"], ["27", "25"], ["34", "32"], ["38", "36"], ["40", "39"], ["46", "44"], ["49", "57"], ["49", "98"], ["28", "29"], ["29", "27"], ["42", "40"], ["50", "49"], ["55", "62"], ["60", "68"], ["66", "74"], ["57", "55"], ["62", "60"], ["68", "66"], ["72", "91"], ["72", "95"], ["91", "50"], ["73", "72"], ["73", "83"], ["82", "72"], ["95", "50"], ["74", "73"], ["74", "78"], ["77", "73"], ["83", "82"], ["83", "87"], ["86", "82"], ["78", "77"], ["87", "86"], ["21", "28"], ["22", "102"], ["25", "102"], ["27", "102"], ["25", "102"], ["25", "102"], ["32", "102"], ["35", "102"], ["36", "102"], ["39", "102"], ["39", "102"], ["46", "102"], ["44", "102"], ["44", "102"], ["50", "102"], ["49", "102"], ["49", "102"], ["98", "102"], ["98", "102"], ["57", "102"], ["55", "102"], ["55", "102"], ["60", "102"], ["60", "102"], ["66", "102"], ["68", "102"], ["66", "102"], ["66", "102"], ["74", "102"], ["74", "102"], ["73", "102"], ["78", "102"], ["77", "102"], ["77", "102"], ["73", "102"], ["72", "102"], ["83", "102"], ["83", "102"], ["82", "102"], ["87", "102"], ["86", "102"], ["86", "102"], ["82", "102"], ["72", "102"], ["72", "102"], ["95", "102"], ["91", "102"], ["21", "22"], ["21", "25"], ["21", "32"], ["21", "36"], ["46", "44"], ["32", "35"], ["21", "35"], ["36", "39"], ["21", "39"], ["39", "98"], ["95", "98"], ["91", "98"], ["21", "98"], ["21", "27"], ["35", "46"], ["21", "46"], ["50", "49"], ["21", "49"], ["57", "55"], ["62", "60"], ["62", "60"], ["68", "66"], ["68", "66"], ["21", "29"], ["44", "50"], ["21", "50"], ["46", "57"], ["21", "57"], ["55", "62"], ["21", "62"], ["62", "68"], ["21", "68"], ["73", "72"], ["73", "72"], ["82", "72"], ["82", "72"], ["39", "91"], ["95", "91"], ["21", "91"], ["74", "73"], ["74", "73"], ["77", "73"], ["77", "73"], ["83", "82"], ["83", "82"], ["86", "82"], ["86", "82"], ["39", "95"], ["91", "95"], ["21", "95"], ["83", "74"], ["21", "74"], ["60", "74"], ["78", "77"], ["78", "77"], ["68", "77"], ["21", "77"], ["74", "83"], ["21", "83"], ["66", "83"], ["87", "86"], ["87", "86"], ["68", "86"], ["77", "86"], ["21", "86"], ["74", "78"], ["21", "78"], ["83", "87"], ["21", "87"], ["49", "68"], ["49", "49"], ["49", "60"], ["49", "73"], ["49", "57"], ["49", "66"], ["49", "72"], ["49", "74"], ["49", "50"], ["49", "55"], ["49", "62"], ["72", "95"], ["72", "91"], ["73", "83"], ["73", "82"], ["74", "77"], ["74", "78"], ["83", "87"], ["83", "86"]], "features": {"21": "<(METHOD,main)<SUB>1</SUB>>", "23": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>>", "25": "<(&lt;operator&gt;.assignment,long mod = (long) (1e9 + 7))<SUB>3</SUB>>", "27": "<(&lt;operator&gt;.cast,(long) (1e9 + 7))<SUB>3</SUB>>", "29": "<(&lt;operator&gt;.addition,1e9 + 7)<SUB>3</SUB>>", "31": "<(LITERAL,7,1e9 + 7)<SUB>3</SUB>>", "32": "<(&lt;operator&gt;.assignment,ANY s = new Reader())<SUB>4</SUB>>", "34": "<(&lt;operator&gt;.alloc,new Reader())<SUB>4</SUB>>", "3": "<(IDENTIFIER,s,new Reader())<SUB>4</SUB>>", "36": "<(&lt;operator&gt;.assignment,ANY pt = new PrintWriter(System.out))<SUB>5</SUB>>", "38": "<(&lt;operator&gt;.alloc,new PrintWriter(System.out))<SUB>5</SUB>>", "5": "<(IDENTIFIER,pt,new PrintWriter(System.out))<SUB>5</SUB>>", "41": "<(IDENTIFIER,System,new PrintWriter(System.out))<SUB>5</SUB>>", "43": "<(LOCAL,int T: int)<SUB>8</SUB>>", "45": "<(IDENTIFIER,T,int T = nextInt())<SUB>8</SUB>>", "47": "<(IDENTIFIER,s,nextInt())<SUB>8</SUB>>", "49": "<(&lt;operator&gt;.greaterThan,T-- &gt; 0)<SUB>11</SUB>>", "51": "<(IDENTIFIER,T,T--)<SUB>11</SUB>>", "53": "<(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>12</SUB>>", "55": "<(&lt;operator&gt;.assignment,long n = nextInt())<SUB>13</SUB>>", "57": "<(nextInt,nextInt())<SUB>13</SUB>>", "59": "<(LOCAL,long sq1: long)<SUB>14</SUB>>", "61": "<(IDENTIFIER,sq1,long sq1 = n / 2)<SUB>14</SUB>>", "63": "<(IDENTIFIER,n,n / 2)<SUB>14</SUB>>", "65": "<(LOCAL,long sq2: long)<SUB>16</SUB>>", "67": "<(IDENTIFIER,sq2,long sq2 = n / 4)<SUB>16</SUB>>", "69": "<(IDENTIFIER,n,n / 4)<SUB>16</SUB>>", "71": "<(CONTROL_STRUCTURE,if (isPerfectSquare(sq1) &amp;&amp; sq1 * 2 == n || isPerfectSquare(sq2) &amp;&amp; sq2 * 4 == n),if (isPerfectSquare(sq1) &amp;&amp; sq1 * 2 == n || isPerfectSquare(sq2) &amp;&amp; sq2 * 4 == n))<SUB>18</SUB>>", "73": "<(&lt;operator&gt;.logicalAnd,isPerfectSquare(sq1) &amp;&amp; sq1 * 2 == n)<SUB>18</SUB>>", "75": "<(IDENTIFIER,this,isPerfectSquare(sq1))<SUB>18</SUB>>", "77": "<(&lt;operator&gt;.equals,sq1 * 2 == n)<SUB>18</SUB>>", "79": "<(IDENTIFIER,sq1,sq1 * 2)<SUB>18</SUB>>", "81": "<(IDENTIFIER,n,sq1 * 2 == n)<SUB>18</SUB>>", "83": "<(isPerfectSquare,isPerfectSquare(sq2))<SUB>18</SUB>>", "85": "<(IDENTIFIER,sq2,isPerfectSquare(sq2))<SUB>18</SUB>>", "87": "<(&lt;operator&gt;.multiplication,sq2 * 4)<SUB>18</SUB>>", "89": "<(LITERAL,4,sq2 * 4)<SUB>18</SUB>>", "91": "<(println,println(&quot;YES&quot;))<SUB>19</SUB>>", "93": "<(LITERAL,&quot;YES&quot;,println(&quot;YES&quot;))<SUB>19</SUB>>", "95": "<(println,println(&quot;NO&quot;))<SUB>21</SUB>>", "97": "<(LITERAL,&quot;NO&quot;,println(&quot;NO&quot;))<SUB>21</SUB>>", "99": "<(IDENTIFIER,pt,close())<SUB>26</SUB>>", "101": "<(MODIFIER,STATIC)>"}}